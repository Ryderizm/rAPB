/*
#############################################################################################
# All Points Bulletin Reloaded (1.6) SDK
# Generated with TheFeckless UE3 SDK Generator v1.2_Beta-Rev.39
# ========================================================================================= #
# File: Engine_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net	
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_TRACEFLAG_Bullet                                   1
#define CONST_TRACEFLAG_PhysicsVolumes                           2
#define CONST_TRACEFLAG_SkipMovers                               4
#define CONST_TRACEFLAG_Blocking                                 8
#define CONST_REP_RBLOCATION_ERROR_TOLERANCE_SQ                  16.0f
#define CONST_TRACEFLAG_Targeting                                16
#define CONST_MINFLOORZ                                          0.7
#define CONST_ACTORMAXSTEPHEIGHT                                 35.0
#define CONST_RBSTATE_LINVELSCALE                                10.0
#define CONST_RBSTATE_ANGVELSCALE                                1000.0
#define CONST_RB_None                                            0x00
#define CONST_RB_NeedsUpdate                                     0x01
#define CONST_RB_Sleeping                                        0x02
#define CONST_LATENT_MOVETOWARD                                  503
#define CONST_MAXPOSITIONERRORSQUARED                            3.0
#define CONST_MAXNEARZEROVELOCITYSQUARED                         9.0
#define CONST_MAXVEHICLEPOSITIONERRORSQUARED                     900.0
#define CONST_CLIENTADJUSTUPDATECOST                             180.0
#define CONST_MAXCLIENTUPDATEINTERVAL                            0.25
#define CONST_BLOCKEDPATHCOST                                    10000000
#define CONST_MAX_ACTIVE_CAMERA_ANIMS                            8
#define CONST_ACTORPROXYFLAG_None                                0x00
#define CONST_ACTORPROXYFLAG_Init                                0x01
#define CONST_ACTORPROXYFLAG_NetworkReferenced                   0x02
#define CONST_ACTORPROXYFLAG_NetworkReplicated                   0x04
#define CONST_ACTORPROXYFLAG_DistanceVisible                     0x08
#define CONST_ACTORPROXYFLAG_DistanceInferable                   0x10
#define CONST_ACTORPROXYFLAG_NoDelete                            0x20
#define CONST_ACTORPROXYFLAG_All                                 0x3F
#define CONST_NULLCHARACTER                                      127
#define CONST_COMMANDFLAG_Cyclic                                 0x0001
#define CONST_COMMANDFLAG_Local_Client_Debug                     0x0010
#define CONST_COMMANDFLAG_Local_Client_Release                   0x0020
#define CONST_COMMANDFLAG_Local_Server_Debug                     0x0040
#define CONST_COMMANDFLAG_Local_Server_Release                   0x0080
#define CONST_COMMANDFLAG_Client_To_Clients_Debug                0x0100
#define CONST_COMMANDFLAG_Client_To_Clients_Release              0x0200
#define CONST_COMMANDFLAG_Server_To_Clients_Debug                0x0400
#define CONST_COMMANDFLAG_Server_To_Clients_Release              0x0800
#define CONST_COMMANDFLAG_Client_To_Server_Debug                 0x1000
#define CONST_COMMANDFLAG_Client_To_Server_Release               0x2000
#define CONST_COMMANDFLAG_Local_Client                           0x0030
#define CONST_COMMANDFLAG_Local_Server                           0x00C0
#define CONST_COMMANDFLAG_Client_To_Clients                      0x0300
#define CONST_COMMANDFLAG_Server_To_Clients                      0x0C00
#define CONST_COMMANDFLAG_Client_To_Server                       0x3000
#define CONST_MaxPoints                                          20
#define CONST_MaxSegments                                        19
#define CONST_TEMP_SPLITSCREEN_INDEX                             0
#define CONST_PRIVATE_NotEditorSelectable                        0x001
#define CONST_PRIVATE_TreeHidden                                 0x002
#define CONST_PRIVATE_NotFocusable                               0x004
#define CONST_PRIVATE_NotDockable                                0x008
#define CONST_PRIVATE_NotRotatable                               0x010
#define CONST_PRIVATE_ManagedStyle                               0x020
#define CONST_PRIVATE_TreeHiddenRecursive                        0x042
#define CONST_PRIVATE_EditorNoDelete                             0x080
#define CONST_PRIVATE_EditorNoRename                             0x100
#define CONST_PRIVATE_EditorNoReparent                           0x200
#define CONST_PRIVATE_PropagateState                             0x400
#define CONST_PRIVATE_KeepFocusedState                           0x800
#define CONST_PRIVATE_Protected                                  0x380
#define CONST_ASPECTRATIO_Normal                                 1.333333f
#define CONST_ASPECTRATIO_Monitor                                1.25f
#define CONST_ASPECTRATIO_Widescreen                             1.777778f
#define CONST_DEFAULT_SIZE_X                                     1024
#define CONST_DEFAULT_SIZE_Y                                     768
#define CONST_SCENE_DATASTORE_TAG                                'SceneData'
#define CONST_MAX_SUPPORTED_GAMEPADS                             4
#define CONST_BACKGROUND_ALPHA                                   150
#define CONST_BORDER_X                                           10.0
#define CONST_BORDER_Y                                           5.0
#define CONST_NUM_PAGES_ON_INDEX                                 25
#define CONST_PAGE_TOGGLE_KEY                                    'Divide'
#define CONST_PAGE_BACK_KEY                                      'NumPadZero'
#define CONST_PAGE_BACK_KEY_ALT                                  'Escape'
#define CONST_PAGE_SELECT_KEY                                    'Enter'
#define CONST_PAGE_MOVEUP_KEY                                    'NumPadEight'
#define CONST_PAGE_MOVEDOWN_KEY                                  'NumPadTwo'
#define CONST_PAGE_MOVELEFT_KEY                                  'NumPadFour'
#define CONST_PAGE_MOVERIGHT_KEY                                 'NumPadSix'
#define CONST_PAGE_PGUP_KEY                                      'NumPadNine'
#define CONST_PAGE_PGDN_KEY                                      'NumPadThree'
#define CONST_PAGE_REFRESH_KEY                                   'NumPadFive'
#define CONST_NUM_NPC_TYPES                                      6
#define CONST_MaxHistory                                         16
#define CONST_FIRST_DEFAULT_DATABINDING_INDEX                    100
#define CONST_TOOLTIP_BINDING_INDEX                              100
#define CONST_CONTEXTMENU_BINDING_INDEX                          101
#define CONST_ACTIVE_DISABLED_BINDING_INDEX                      102
#define CONST_ConsolePromptText                                  "(> "
#define CONST_INFINITE_PATH_COST                                 10000000
#define CONST_COVERLINK_ExposureDot                              0.4f
#define CONST_COVERLINK_EdgeCheckDot                             0.25f
#define CONST_COVERLINK_EdgeExposureDot                          0.85f
#define CONST_COVERLINK_DangerDist                               1536.f
#define CONST_EXTENDED_NODE_TYPES                                7
#define CONST_NOTEXTENDED                                        0
#define CONST_BDPNODE                                            1
#define CONST_BJDPNODE                                           2
#define CONST_SDDPNODE                                           4
#define CONST_SDNODE                                             8
#define CONST_VDPNODE                                            16
#define CONST_VNODE                                              32
#define CONST_EDGE_NOT_FLAT_VALUE                                -1e16
#define CONST_EDGE_NOT_FLAT_VALUE_THRESHOLD                      -1e15
#define CONST_ActivityMessage_None                               0
#define CONST_ActivityMessageParameterType_None                  0
#define CONST_Ammo_None                                          0
#define CONST_CameraShakePreset_None                             0
#define CONST_ClothingItemCategory_None                          0
#define CONST_Contact_None                                       0
#define CONST_CSA_InputMapping_None                              0
#define CONST_DisplayPoint_None                                  0
#define CONST_District_None                                      0
#define CONST_DistrictInstanceType_None                          0
#define CONST_DistrictPlaystyle_None                             0
#define CONST_DistrictRuleSet_None                               0
#define CONST_Equipment_Equipment__None                          0
#define CONST_FnMod_FnMod_None                                   0
#define CONST_FnMod_FnMod_Vacant                                 1
#define CONST_GameplayModeTimer_None                             0
#define CONST_GameplayObject_None                                0
#define CONST_GameplayObjectSet_None                             0
#define CONST_GameplayStateSet_None                              0
#define CONST_GolemPartClass_None                                0
#define CONST_HeatActionAffect_None                              0
#define CONST_HeatActionAffect_EndMission                        1
#define CONST_HeatActionAffect_StartMissionAsOwner               2
#define CONST_HeatLevel_None                                     0
#define CONST_HUDColour_None                                     0
#define CONST_DMM_None                                           0
#define CONST_HUDIcon_None                                       0
#define CONST_HUDMarkerOffset_None                               0
#define CONST_HUDMarkerOffset_UseAutoRouteLocation               1
#define CONST_HUDTaskMarker_None                                 0
#define CONST_HUDTextureIcon_None                                0
#define CONST_IntraActivityReward_None                           0
#define CONST_InventoryItemInfraCategory_None                    0
#define CONST_InventoryItemInfraCategory_MarketplaceCash         1
#define CONST_InventoryItemType_None                             0
#define CONST_InventoryItemType_Equipment__None                  1
#define CONST_InventoryItemType_FnMod_None                       2
#define CONST_InventoryItemType_FnMod_Vacant                     3
#define CONST_InventoryItemType_Reward_GenericReward             4
#define CONST_InventoryItemType_Reward_LeagueReward              5
#define CONST_InventoryItemType_Reward_RedemptionKeyReward       6
#define CONST_InventoryItemType_Token_DisplayPoint               7
#define CONST_KillStreak_05                                      0
#define CONST_Any                                                0
#define CONST_MissionUIMissionTemplateProfile_None               0
#define CONST_NotorietyEffect_None                               0
#define CONST_NotorietyLevel_None                                0
#define CONST_OpenWorldOperation_None                            0
#define CONST_PrestigeEffect_None                                0
#define CONST_PrestigeLevel_None                                 0
#define CONST_RewardPackage_None                                 0
#define CONST_RewardPackageChild_None                            0
#define CONST_RoleMilestone_None                                 0
#define CONST_ShopUIFilter_Ammo                                  0
#define CONST_ShopUIFilter_Armory_ItemCat_Ammo                   1
#define CONST_ShopUIFilter_ItemCat_All                           2
#define CONST_ShopUIFilter_None                                  3
#define CONST_ShopUIFilterRestriction_None                       0
#define CONST_TaskItemTag_None                                   0
#define CONST_TaskObjective_None                                 0
#define CONST_TaskObjective_OppositionDefault                    1
#define CONST_TaskOperation_None                                 0
#define CONST_TaskOperation_OppositionDefault                    1
#define CONST_MissionUITaskOperationProfile_None                 0
#define CONST_MissionUITaskOperationProfile_Simple               1
#define CONST_TaskTargetAllocation_A_None                        0
#define CONST_TrackedActivity_None                               0
#define CONST_VehicleCritical_None                               0
#define CONST_VehicleDamageHandlingEffect_NoDamage               0
#define CONST_VehicleDamageLevel_NoDamage                        0
#define CONST_VehicleDamageVFX_ExplodeWreck                      0
#define CONST_VehicleDamageVFX_State0                            1
#define CONST_FnMod_Vehicle_FnMod_None                           0
#define CONST_FnMod_Vehicle_FnMod_Vacant                         1
#define CONST_VehicleUIComponentCategory_None                    0
#define CONST_VFXType_None                                       0
#define CONST_Weapon_None                                        0
#define CONST_WitnessableCrime_None                              0
#define CONST_WitnessableCrime_CSA_End                           1
#define CONST_SDPG_NumBits                                       3
#define CONST_CONVERT_CM_SEC_TO_MPH                              0.022374
#define CONST_TEXT_CHANGED_NOTIFY_MASK                           0x1
#define CONST_INDEX_CHANGED_NOTIFY_MASK                          0x2
#define CONST_ResizeBufferPixels                                 5
#define CONST_DEFAULT_UISKIN                                     "DefaultUISkin.DefaultSkin"
#define CONST_UnknownCellDataFieldName                           'NAME_None'
#define CONST_UIKEY_MoveCursorLeft                               'UIKEY_MoveCursorLeft'
#define CONST_UIKEY_MoveCursorRight                              'UIKEY_MoveCursorRight'
#define CONST_PROGRESSBAR_VALUE_BINDING_INDEX                    0
#define CONST_PROGRESSBAR_PIVOT_POINT_BINDING_INDEX              1
#define CONST_cUILabelButtonBinding_ImageOverlay                 2
#define CONST_CAPTION_DATABINDING_INDEX                          0
#define CONST_TOOLTIP_DATABINDING_INDEX                          1
#define CONST_DESCRIPTION_DATABINDING_INDEX                      2

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum Engine.AnimNode.ESliderType
/*enum ESliderType
{
	ST_1D                                              = 0,
	ST_2D                                              = 1,
	ST_MAX                                             = 2
};*/

// Enum Engine.Actor.ECollisionType
/*enum ECollisionType
{
	COLLIDE_CustomDefault                              = 0,
	COLLIDE_NoCollision                                = 1,
	COLLIDE_BlockAll                                   = 2,
	COLLIDE_BlockWeapons                               = 3,
	COLLIDE_TouchAll                                   = 4,
	COLLIDE_TouchWeapons                               = 5,
	COLLIDE_BlockAllButWeapons                         = 6,
	COLLIDE_TouchAllButWeapons                         = 7,
	COLLIDE_BlockAllButWeaponsAndProjectiles           = 8,
	COLLIDE_MAX                                        = 9
};*/

// Enum Engine.Actor.ENetRole
/*enum ENetRole
{
	ROLE_None                                          = 0,
	ROLE_SimulatedProxy                                = 1,
	ROLE_AutonomousProxy                               = 2,
	ROLE_Authority                                     = 3,
	ROLE_MAX                                           = 4
};*/

// Enum Engine.Actor.EPhysics
/*enum EPhysics
{
	PHYS_None                                          = 0,
	PHYS_Walking                                       = 1,
	PHYS_Falling                                       = 2,
	PHYS_Rotating                                      = 3,
	PHYS_Projectile                                    = 4,
	PHYS_Interpolating                                 = 5,
	PHYS_RigidBody                                     = 6,
	PHYS_Unused                                        = 7,
	PHYS_MAX                                           = 8
};*/

// Enum Engine.Actor.EMoveDir
/*enum EMoveDir
{
	MD_Stationary                                      = 0,
	MD_Forward                                         = 1,
	MD_Backward                                        = 2,
	MD_Left                                            = 3,
	MD_Right                                           = 4,
	MD_Up                                              = 5,
	MD_Down                                            = 6,
	MD_MAX                                             = 7
};*/

// Enum Engine.Actor.etDamageInfoType
/*enum etDamageInfoType
{
	DAMAGEINFO_INVALID                                 = 0,
	DAMAGEINFO_Explosion                               = 1,
	DAMAGEINFO_RayWeapon                               = 2,
	DAMAGEINFO_COUNT                                   = 3,
	DAMAGEINFO_MAX                                     = 4
};*/

// Enum Engine.Actor.ETravelType
/*enum ETravelType
{
	TRAVEL_Absolute                                    = 0,
	TRAVEL_Partial                                     = 1,
	TRAVEL_Relative                                    = 2,
	TRAVEL_MAX                                         = 3
};*/

// Enum Engine.LightComponent.EShadowFilterQuality
/*enum EShadowFilterQuality
{
	SFQ_Low                                            = 0,
	SFQ_Medium                                         = 1,
	SFQ_High                                           = 2,
	SFQ_MAX                                            = 3
};*/

// Enum Engine.LightComponent.EShadowProjectionTechnique
/*enum EShadowProjectionTechnique
{
	ShadowProjTech_Default                             = 0,
	ShadowProjTech_PCF                                 = 1,
	ShadowProjTech_VSM                                 = 2,
	ShadowProjTech_BPCF_Low                            = 3,
	ShadowProjTech_BPCF_Medium                         = 4,
	ShadowProjTech_BPCF_High                           = 5,
	ShadowProjTech_MAX                                 = 6
};*/

// Enum Engine.LightComponent.ELightShadowMode
/*enum ELightShadowMode
{
	LightShadow_Normal                                 = 0,
	LightShadow_Modulate                               = 1,
	LightShadow_ModulateBetter                         = 2,
	LightShadow_MAX                                    = 3
};*/

// Enum Engine.LightComponent.ELightAffectsClassification
/*enum ELightAffectsClassification
{
	LAC_USER_SELECTED                                  = 0,
	LAC_DYNAMIC_AFFECTING                              = 1,
	LAC_STATIC_AFFECTING                               = 2,
	LAC_DYNAMIC_AND_STATIC_AFFECTING                   = 3,
	LAC_MAX                                            = 4
};*/

// Enum Engine.Scene.EDetailMode
/*enum EDetailMode
{
	DM_Low                                             = 0,
	DM_Medium                                          = 1,
	DM_High                                            = 2,
	DM_MAX                                             = 3
};*/

// Enum Engine.Scene.ESceneDepthPriorityGroup
/*enum ESceneDepthPriorityGroup
{
	SDPG_UnrealEdBackground                            = 0,
	SDPG_World                                         = 1,
	SDPG_Foreground                                    = 2,
	SDPG_UnrealEdForeground                            = 3,
	SDPG_PostProcess                                   = 4,
	SDPG_MAX                                           = 5
};*/

// Enum Engine.PrimitiveComponent.etTNTStatPrimitiveType
/*enum etTNTStatPrimitiveType
{
	kTNTPT_Unknown                                     = 0,
	kTNTPT_Building                                    = 1,
	kTNTPT_BuildingCollision                           = 2,
	kTNTPT_Road                                        = 3,
	kTNTPT_Terrain                                     = 4,
	kTNTPT_StaticProp                                  = 5,
	kTNTPT_cProp                                       = 6,
	kTNTPT_FeatureGroup                                = 7,
	kTNTPT_PlayerCharacter                             = 8,
	kTNTPT_PlayerVehicle                               = 9,
	kTNTPT_NPC                                         = 10,
	kTNTPT_NPCVehicle                                  = 11,
	kTNTPT_Graffiti                                    = 12,
	kTNTPT_Statue                                      = 13,
	kTNTPT_Decal                                       = 14,
	kTNTPT_Holdable                                    = 15,
	kTNTPT_ParticleSystem                              = 16,
	kTNTPT_Misc                                        = 17,
	kTNTPT_Contact                                     = 18,
	kTNTPT_Foliage                                     = 19,
	kTNTPT_MAX                                         = 20
};*/

// Enum Engine.PrimitiveComponent.etAPBPrimitiveType
/*enum etAPBPrimitiveType
{
	APBPT_Unknown                                      = 0,
	APBPT_PlayerCharacter                              = 1,
	APBPT_PlayerVehicle                                = 2,
	APBPT_NPCPedestrian                                = 3,
	APBPT_NPCVehicle                                   = 4,
	APBPT_MAX                                          = 5
};*/

// Enum Engine.PrimitiveComponent.ERBCollisionChannel
/*enum ERBCollisionChannel
{
	RBCC_Default                                       = 0,
	RBCC_Nothing                                       = 1,
	RBCC_Pawn                                          = 2,
	RBCC_Vehicle                                       = 3,
	RBCC_Water                                         = 4,
	RBCC_GameplayPhysics                               = 5,
	RBCC_EffectPhysics                                 = 6,
	RBCC_Untitled1                                     = 7,
	RBCC_Untitled2                                     = 8,
	RBCC_Untitled3                                     = 9,
	RBCC_Untitled4                                     = 10,
	RBCC_Cloth                                         = 11,
	RBCC_FluidDrain                                    = 12,
	RBCC_SoftBody                                      = 13,
	RBCC_MAX                                           = 14
};*/

// Enum Engine.PrimitiveComponent.ERadialImpulseFalloff
/*enum ERadialImpulseFalloff
{
	RIF_Constant                                       = 0,
	RIF_Linear                                         = 1,
	RIF_MAX                                            = 2
};*/

// Enum Engine.Texture.TextureCompressionSettings
/*enum TextureCompressionSettings
{
	TC_Default                                         = 0,
	TC_Normalmap                                       = 1,
	TC_Displacementmap                                 = 2,
	TC_NormalmapAlpha                                  = 3,
	TC_Grayscale                                       = 4,
	TC_HighDynamicRange                                = 5,
	TC_VehicleNormalmap                                = 6,
	TC_DistanceField                                   = 7,
	TC_Normalmap_X_Y                                   = 8,
	TC_MAX                                             = 9
};*/

// Enum Engine.Texture.EPixelFormat
/*enum EPixelFormat
{
	PF_Unknown                                         = 0,
	PF_A32B32G32R32F                                   = 1,
	PF_A8R8G8B8                                        = 2,
	PF_G8                                              = 3,
	PF_G16                                             = 4,
	PF_DXT1                                            = 5,
	PF_DXT3                                            = 6,
	PF_DXT5                                            = 7,
	PF_UYVY                                            = 8,
	PF_FloatRGB                                        = 9,
	PF_FloatRGBA                                       = 10,
	PF_DepthStencil                                    = 11,
	PF_ShadowDepth                                     = 12,
	PF_FilteredShadowDepth                             = 13,
	PF_R32F                                            = 14,
	PF_G16R16                                          = 15,
	PF_G16R16F                                         = 16,
	PF_G16R16F_FILTER                                  = 17,
	PF_G32R32F                                         = 18,
	PF_A2B10G10R10                                     = 19,
	PF_A16B16G16R16                                    = 20,
	PF_D24                                             = 21,
	PF_R16F                                            = 22,
	PF_R16F_FILTER                                     = 23,
	PF_RGBA32_Unordered                                = 24,
	PF_MAX                                             = 25
};*/

// Enum Engine.Texture.TextureFilter
/*enum TextureFilter
{
	TF_Nearest                                         = 0,
	TF_Linear                                          = 1,
	TF_MAX                                             = 2
};*/

// Enum Engine.Texture.TextureAddress
/*enum TextureAddress
{
	TA_Wrap                                            = 0,
	TA_Clamp                                           = 1,
	TA_Mirror                                          = 2,
	TA_Border                                          = 3,
	TA_MAX                                             = 4
};*/

// Enum Engine.Texture.TextureGroup
/*enum TextureGroup
{
	TEXTUREGROUP_World                                 = 0,
	TEXTUREGROUP_WorldNormalMap                        = 1,
	TEXTUREGROUP_WorldSpecular                         = 2,
	TEXTUREGROUP_Character                             = 3,
	TEXTUREGROUP_CharacterNormalMap                    = 4,
	TEXTUREGROUP_CharacterSpecular                     = 5,
	TEXTUREGROUP_Weapon                                = 6,
	TEXTUREGROUP_WeaponNormalMap                       = 7,
	TEXTUREGROUP_WeaponSpecular                        = 8,
	TEXTUREGROUP_Vehicle                               = 9,
	TEXTUREGROUP_VehicleNormalMap                      = 10,
	TEXTUREGROUP_VehicleSpecular                       = 11,
	TEXTUREGROUP_Cinematic                             = 12,
	TEXTUREGROUP_Effects                               = 13,
	TEXTUREGROUP_Skybox                                = 14,
	TEXTUREGROUP_UI                                    = 15,
	TEXTUREGROUP_LightAndShadowMap                     = 16,
	TEXTUREGROUP_RenderTarget                          = 17,
	TEXTUREGROUP_GolemCharacter                        = 18,
	TEXTUREGROUP_GolemVehicle                          = 19,
	TEXTUREGROUP_LCPedestrian                          = 20,
	TEXTUREGROUP_LCVehicle                             = 21,
	TEXTUREGROUP_MAX                                   = 22
};*/

// Enum Engine.Texture.CropMode
/*enum CropMode
{
	CROP_None                                          = 0,
	CROP_Alpha                                         = 1,
	CROP_RGB                                           = 2,
	CROP_RGBA                                          = 3,
	CROP_MAX                                           = 4
};*/

// Enum Engine.Texture.etTextureUsage
/*enum etTextureUsage
{
	TEXUSE_Diffuse                                     = 0,
	TEXUSE_Normal                                      = 1,
	TEXUSE_MAX                                         = 2
};*/

// Enum Engine.Texture.etTextureCategory
/*enum etTextureCategory
{
	TEXCAT_Unknown                                     = 0,
	TEXCAT_Environment                                 = 1,
	TEXCAT_Prop                                        = 2,
	TEXCAT_Signage                                     = 3,
	TEXCAT_PlayerCharacter                             = 4,
	TEXCAT_PlayerVehicle                               = 5,
	TEXCAT_PlayerGraffiti                              = 6,
	TEXCAT_PlayerStatue                                = 7,
	TEXCAT_LCPedestrian                                = 8,
	TEXCAT_LCVehicle                                   = 9,
	TEXCAT_CharacterShared                             = 10,
	TEXCAT_VehicleShared                               = 11,
	TEXCAT_Pickup                                      = 12,
	TEXCAT_CharacterSource                             = 13,
	TEXCAT_VehicleSource                               = 14,
	TEXCAT_PrimitiveSource                             = 15,
	TEXCAT_UI                                          = 16,
	TEXCAT_UI_StreamedIcon                             = 17,
	TEXCAT_VFX                                         = 18,
	TEXCAT_LightAndShadowMap                           = 19,
	TEXCAT_RenderTarget                                = 20,
	TEXCAT_NonFinal                                    = 21,
	TEXCAT_Contact                                     = 22,
	TEXCAT_BuildingCollision                           = 23,
	TEXCAT_Engine                                      = 24,
	TEXCAT_Volumes                                     = 25,
	TEXCAT_ColourLookupTable                           = 26,
	TEXCAT_MAX                                         = 27
};*/

// Enum Engine.Texture.DistanceFieldResolutionMode
/*enum DistanceFieldResolutionMode
{
	DF_Visual                                          = 0,
	DF_Auto                                            = 1,
	DF                                                 = 2,
	DF01                                               = 3,
	DF02                                               = 4,
	DF_MAX                                             = 5
};*/

// Enum Engine.OnlineSubsystem.ELoginStatus
/*enum ELoginStatus
{
	LS_NotLoggedIn                                     = 0,
	LS_UsingLocalProfile                               = 1,
	LS_LoggedIn                                        = 2,
	LS_MAX                                             = 3
};*/

// Enum Engine.OnlineSubsystem.EFeaturePrivilegeLevel
/*enum EFeaturePrivilegeLevel
{
	FPL_Disabled                                       = 0,
	FPL_EnabledFriendsOnly                             = 1,
	FPL_Enabled                                        = 2,
	FPL_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.ENetworkNotificationPosition
/*enum ENetworkNotificationPosition
{
	NNP_TopLeft                                        = 0,
	NNP_TopCenter                                      = 1,
	NNP_TopRight                                       = 2,
	NNP_CenterLeft                                     = 3,
	NNP_Center                                         = 4,
	NNP_CenterRight                                    = 5,
	NNP_BottomLeft                                     = 6,
	NNP_BottomCenter                                   = 7,
	NNP_BottomRight                                    = 8,
	NNP_MAX                                            = 9
};*/

// Enum Engine.OnlineSubsystem.EOnlineGameState
/*enum EOnlineGameState
{
	OGS_NoSession                                      = 0,
	OGS_Pending                                        = 1,
	OGS_InProgress                                     = 2,
	OGS_Ending                                         = 3,
	OGS_Ended                                          = 4,
	OGS_MAX                                            = 5
};*/

// Enum Engine.OnlineSubsystem.EOnlineEnumerationReadState
/*enum EOnlineEnumerationReadState
{
	OERS_NotStarted                                    = 0,
	OERS_InProgress                                    = 1,
	OERS_Done                                          = 2,
	OERS_Failed                                        = 3,
	OERS_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineServerConnectionStatus
/*enum EOnlineServerConnectionStatus
{
	OSCS_NotConnected                                  = 0,
	OSCS_Connected                                     = 1,
	OSCS_ConnectionDropped                             = 2,
	OSCS_NoNetworkConnection                           = 3,
	OSCS_ServiceUnavailable                            = 4,
	OSCS_UpdateRequired                                = 5,
	OSCS_ServersTooBusy                                = 6,
	OSCS_DuplicateLoginDetected                        = 7,
	OSCS_InvalidUser                                   = 8,
	OSCS_MAX                                           = 9
};*/

// Enum Engine.OnlineSubsystem.ENATType
/*enum ENATType
{
	NAT_Unknown                                        = 0,
	NAT_Open                                           = 1,
	NAT_Moderate                                       = 2,
	NAT_Strict                                         = 3,
	NAT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ELanBeaconState
/*enum ELanBeaconState
{
	LANB_NotUsingLanBeacon                             = 0,
	LANB_Hosting                                       = 1,
	LANB_Searching                                     = 2,
	LANB_MAX                                           = 3
};*/

// Enum Engine.OnlineSubsystem.EOnlineAccountCreateStatus
/*enum EOnlineAccountCreateStatus
{
	OACS_CreateSuccessful                              = 0,
	OACS_UnknownError                                  = 1,
	OACS_InvalidUserName                               = 2,
	OACS_InvalidPassword                               = 3,
	OACS_InvalidUniqueUserName                         = 4,
	OACS_UniqueUserNameInUse                           = 5,
	OACS_ServiceUnavailable                            = 6,
	OACS_MAX                                           = 7
};*/

// Enum Engine.RB_BodySetup.ESleepFamily
/*enum ESleepFamily
{
	SF_Normal                                          = 0,
	SF_Sensitive                                       = 1,
	SF_Vehicle                                         = 2,
	SF_MAX                                             = 3
};*/

// Enum Engine.Settings.EOnlineDataAdvertisementType
/*enum EOnlineDataAdvertisementType
{
	ODAT_DontAdvertise                                 = 0,
	ODAT_OnlineService                                 = 1,
	ODAT_QoS                                           = 2,
	ODAT_MAX                                           = 3
};*/

// Enum Engine.Settings.ESettingsDataType
/*enum ESettingsDataType
{
	SDT_Empty                                          = 0,
	SDT_Int32                                          = 1,
	SDT_Int64                                          = 2,
	SDT_Double                                         = 3,
	SDT_String                                         = 4,
	SDT_Float                                          = 5,
	SDT_Blob                                           = 6,
	SDT_DateTime                                       = 7,
	SDT_MAX                                            = 8
};*/

// Enum Engine.Settings.EPropertyValueMappingType
/*enum EPropertyValueMappingType
{
	PVMT_RawValue                                      = 0,
	PVMT_PredefinedValues                              = 1,
	PVMT_Ranged                                        = 2,
	PVMT_IdMapped                                      = 3,
	PVMT_MAX                                           = 4
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchEntryType
/*enum EOnlineGameSearchEntryType
{
	OGSET_Property                                     = 0,
	OGSET_LocalizedSetting                             = 1,
	OGSET_ObjectProperty                               = 2,
	OGSET_MAX                                          = 3
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchComparisonType
/*enum EOnlineGameSearchComparisonType
{
	OGSCT_Equals                                       = 0,
	OGSCT_NotEquals                                    = 1,
	OGSCT_GreaterThan                                  = 2,
	OGSCT_GreaterThanEquals                            = 3,
	OGSCT_LessThan                                     = 4,
	OGSCT_LessThanEquals                               = 5,
	OGSCT_MAX                                          = 6
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchSortType
/*enum EOnlineGameSearchSortType
{
	OGSSO_Ascending                                    = 0,
	OGSSO_Descending                                   = 1,
	OGSSO_MAX                                          = 2
};*/

// Enum Engine.Camera.EViewTargetBlendFunction
/*enum EViewTargetBlendFunction
{
	VTBlend_Linear                                     = 0,
	VTBlend_Cubic                                      = 1,
	VTBlend_EaseIn                                     = 2,
	VTBlend_EaseOut                                    = 3,
	VTBlend_EaseInOut                                  = 4,
	VTBlend_MAX                                        = 5
};*/

// Enum Engine.DOFEffect.EFocusType
/*enum EFocusType
{
	FOCUS_Distance                                     = 0,
	FOCUS_Position                                     = 1,
	FOCUS_MAX                                          = 2
};*/

// Enum Engine.Brush.ECsgOper
/*enum ECsgOper
{
	CSG_Active                                         = 0,
	CSG_Add                                            = 1,
	CSG_Subtract                                       = 2,
	CSG_Intersect                                      = 3,
	CSG_Deintersect                                    = 4,
	CSG_MAX                                            = 5
};*/

// Enum Engine.PlayerController.EInputTypes
/*enum EInputTypes
{
	IT_XAxis                                           = 0,
	IT_YAxis                                           = 1,
	IT_MAX                                             = 2
};*/

// Enum Engine.PlayerController.EInputMatchAction
/*enum EInputMatchAction
{
	IMA_GreaterThan                                    = 0,
	IMA_LessThan                                       = 1,
	IMA_MAX                                            = 2
};*/

// Enum Engine.PlayerController.EProgressMessageType
/*enum EProgressMessageType
{
	PMT_Clear                                          = 0,
	PMT_Information                                    = 1,
	PMT_AdminMessage                                   = 2,
	PMT_DownloadProgress                               = 3,
	PMT_RedrawDownloadProgress                         = 4,
	PMT_ConnectionFailure                              = 5,
	PMT_MAX                                            = 6
};*/

// Enum Engine.AmbientOcclusionEffect.EAmbientOcclusionQuality
/*enum EAmbientOcclusionQuality
{
	AO_High                                            = 0,
	AO_Medium                                          = 1,
	AO_Low                                             = 2,
	AO_MAX                                             = 3
};*/

// Enum Engine.SoundNodeAttenuation.SoundDistanceModel
/*enum SoundDistanceModel
{
	ATTENUATION_Linear                                 = 0,
	ATTENUATION_Logarithmic                            = 1,
	ATTENUATION_Inverse                                = 2,
	ATTENUATION_LogReverse                             = 3,
	ATTENUATION_NaturalSound                           = 4,
	ATTENUATION_MAX                                    = 5
};*/

// Enum Engine.AnimSequence.AnimationCompressionFormat
/*enum AnimationCompressionFormat
{
	ACF_None                                           = 0,
	ACF_Float96NoW                                     = 1,
	ACF_Fixed48NoW                                     = 2,
	ACF_IntervalFixed32NoW                             = 3,
	ACF_Fixed32NoW                                     = 4,
	ACF_Float32NoW                                     = 5,
	ACF_MAX                                            = 6
};*/

// Enum Engine.AnimNodeAimOffset.EAnimAimDir
/*enum EAnimAimDir
{
	ANIMAIM_LEFTUP                                     = 0,
	ANIMAIM_CENTERUP                                   = 1,
	ANIMAIM_RIGHTUP                                    = 2,
	ANIMAIM_LEFTCENTER                                 = 3,
	ANIMAIM_CENTERCENTER                               = 4,
	ANIMAIM_RIGHTCENTER                                = 5,
	ANIMAIM_LEFTDOWN                                   = 6,
	ANIMAIM_CENTERDOWN                                 = 7,
	ANIMAIM_RIGHTDOWN                                  = 8,
	ANIMAIM_MAX                                        = 9
};*/

// Enum Engine.AnimNodeBlendByBase.EBaseBlendType
/*enum EBaseBlendType
{
	BBT_ByActorTag                                     = 0,
	BBT_ByActorClass                                   = 1,
	BBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeSequence.ERootRotationOption
/*enum ERootRotationOption
{
	RRO_Default                                        = 0,
	RRO_Discard                                        = 1,
	RRO_Extract                                        = 2,
	RRO_MAX                                            = 3
};*/

// Enum Engine.AnimNodeSequence.ERootBoneAxis
/*enum ERootBoneAxis
{
	RBA_Default                                        = 0,
	RBA_Discard                                        = 1,
	RBA_Translate                                      = 2,
	RBA_MAX                                            = 3
};*/

// Enum Engine.AnimNotify.etAnimNotifyCategory
/*enum etAnimNotifyCategory
{
	ANIMNOTIFYCATEGORY_GENERAL                         = 0,
	ANIMNOTIFYCATEGORY_AUDIO                           = 1,
	ANIMNOTIFYCATEGORY_MAX                             = 2
};*/

// Enum Engine.AnimSet.etAnimSetAnimationCategory
/*enum etAnimSetAnimationCategory
{
	ASAC_Unknown                                       = 0,
	ASAC_Weapons                                       = 1,
	ASAC_Props                                         = 2,
	ASAC_GenerapProps                                  = 3,
	ASAC_Vehicle                                       = 4,
	ASAC_Character                                     = 5,
	ASAC_Character_CharacterStudio                     = 6,
	ASAC_Character_Contacts                            = 7,
	ASAC_Character_Contacts_Social                     = 8,
	ASAC_Character_LC                                  = 9,
	ASAC_Character_Vehicle                             = 10,
	ASAC_Character_CSAs                                = 11,
	ASAC_Character_Emote                               = 12,
	ASAC_Character_DeathAndImpact                      = 13,
	ASAC_Character_Weapons                             = 14,
	ASAC_Character_Player                              = 15,
	ASAC_MAX                                           = 16
};*/

// Enum Engine.AudioDevice.ESoundMode
/*enum ESoundMode
{
	SOUNDMODE_NORMAL                                   = 0,
	SOUNDMODE_SLOWMOTION                               = 1,
	SOUNDMODE_DEATH                                    = 2,
	SOUNDMODE_COVER                                    = 3,
	SOUNDMODE_ROADIE_RUN                               = 4,
	SOUNDMODE_TACCOM                                   = 5,
	SOUNDMODE_RADIO                                    = 6,
	SOUNDMODE_MAX                                      = 7
};*/

// Enum Engine.cActorProxiesManager.EProxyBehaviour
/*enum EProxyBehaviour
{
	PROXYBEHAVIOUR_Default                             = 0,
	PROXYBEHAVIOUR_Always                              = 1,
	PROXYBEHAVIOUR_Never                               = 2,
	PROXYBEHAVIOUR_MAX                                 = 3
};*/

// Enum Engine.FontImportOptions.EFontImportCharacterSet
/*enum EFontImportCharacterSet
{
	FontICS_Default                                    = 0,
	FontICS_Ansi                                       = 1,
	FontICS_Symbol                                     = 2,
	FontICS_MAX                                        = 3
};*/

// Enum Engine.cConsoleCommand.etMode
/*enum etMode
{
	kMODE_ProcessArguments                             = 0,
	kMODE_CyclePrevious                                = 1,
	kMODE_CycleNext                                    = 2,
	kMODE_MAX                                          = 3
};*/

// Enum Engine.WorldInfo.etPhysCorrectMode
/*enum etPhysCorrectMode
{
	kPHYS_CORRECT_None                                 = 0,
	kPHYS_CORRECT_Epic                                 = 1,
	kPHYS_CORRECT_Predicted                            = 2,
	kPHYS_CORRECT_MAX                                  = 3
};*/

// Enum Engine.WorldInfo.EConsoleType
/*enum EConsoleType
{
	CONSOLE_Any                                        = 0,
	CONSOLE_Xbox360                                    = 1,
	CONSOLE_PS3                                        = 2,
	CONSOLE_MAX                                        = 3
};*/

// Enum Engine.WorldInfo.etTimeOfDayMode
/*enum etTimeOfDayMode
{
	kTODM_Accelerated                                  = 0,
	kTODM_Fixed                                        = 1,
	kTODM_MAX                                          = 2
};*/

// Enum Engine.WorldInfo.EWorldState
/*enum EWorldState
{
	WORLDSTATE_Initial                                 = 0,
	WORLDSTATE_LevelsLoaded_WaitingReady               = 1,
	WORLDSTATE_Ready                                   = 2,
	WORLDSTATE_MAX                                     = 3
};*/

// Enum Engine.WorldInfo.ENetMode
/*enum ENetMode
{
	NM_Standalone                                      = 0,
	NM_DedicatedServer                                 = 1,
	NM_ListenServer                                    = 2,
	NM_Client                                          = 3,
	NM_MAX                                             = 4
};*/

// Enum Engine.ReverbVolume.ReverbPreset
/*enum ReverbPreset
{
	REVERB_Default                                     = 0,
	REVERB_Bathroom                                    = 1,
	REVERB_StoneRoom                                   = 2,
	REVERB_Auditorium                                  = 3,
	REVERB_ConcertHall                                 = 4,
	REVERB_Cave                                        = 5,
	REVERB_Hallway                                     = 6,
	REVERB_StoneCorridor                               = 7,
	REVERB_Alley                                       = 8,
	REVERB_Forest                                      = 9,
	REVERB_City                                        = 10,
	REVERB_Mountains                                   = 11,
	REVERB_Quarry                                      = 12,
	REVERB_Plain                                       = 13,
	REVERB_ParkingLot                                  = 14,
	REVERB_SewerPipe                                   = 15,
	REVERB_Underwater                                  = 16,
	REVERB_SmallRoom                                   = 17,
	REVERB_MediumRoom                                  = 18,
	REVERB_LargeRoom                                   = 19,
	REVERB_MediumHall                                  = 20,
	REVERB_LargeHall                                   = 21,
	REVERB_Plate                                       = 22,
	REVERB_MAX                                         = 23
};*/

// Enum Engine.UIRoot.EMaterialAdjustmentType
/*enum EMaterialAdjustmentType
{
	ADJUST_None                                        = 0,
	ADJUST_Normal                                      = 1,
	ADJUST_Justified                                   = 2,
	ADJUST_Bound                                       = 3,
	ADJUST_Stretch                                     = 4,
	ADJUST_MAX                                         = 5
};*/

// Enum Engine.UIRoot.EPositionEvalType
/*enum EPositionEvalType
{
	EVALPOS_None                                       = 0,
	EVALPOS_PixelViewport                              = 1,
	EVALPOS_PixelScene                                 = 2,
	EVALPOS_PixelOwner                                 = 3,
	EVALPOS_PercentageViewport                         = 4,
	EVALPOS_PercentageOwner                            = 5,
	EVALPOS_PercentageScene                            = 6,
	EVALPOS_PercentageViewportWS                       = 7,
	EVALPOS_MAX                                        = 8
};*/

// Enum Engine.UIRoot.EUIExtentEvalType
/*enum EUIExtentEvalType
{
	UIEXTENTEVAL_Pixels                                = 0,
	UIEXTENTEVAL_PercentSelf                           = 1,
	UIEXTENTEVAL_PercentOwner                          = 2,
	UIEXTENTEVAL_PercentScene                          = 3,
	UIEXTENTEVAL_PercentViewport                       = 4,
	UIEXTENTEVAL_UIListPercentRemaining                = 5,
	UIEXTENTEVAL_MAX                                   = 6
};*/

// Enum Engine.UIRoot.EUIDockPaddingEvalType
/*enum EUIDockPaddingEvalType
{
	UIPADDINGEVAL_Pixels                               = 0,
	UIPADDINGEVAL_PercentTarget                        = 1,
	UIPADDINGEVAL_PercentOwner                         = 2,
	UIPADDINGEVAL_PercentScene                         = 3,
	UIPADDINGEVAL_PercentViewport                      = 4,
	UIPADDINGEVAL_MAX                                  = 5
};*/

// Enum Engine.UIRoot.EUIAutoSizeConstraintType
/*enum EUIAutoSizeConstraintType
{
	UIAUTOSIZEREGION_Minimum                           = 0,
	UIAUTOSIZEREGION_Maximum                           = 1,
	UIAUTOSIZEREGION_MAX                               = 2
};*/

// Enum Engine.UIRoot.ETextClipMode
/*enum ETextClipMode
{
	CLIP_None                                          = 0,
	CLIP_Normal                                        = 1,
	CLIP_Ellipsis                                      = 2,
	CLIP_Wrap                                          = 3,
	CLIP_MAX                                           = 4
};*/

// Enum Engine.UIRoot.ETextAutoScaleMode
/*enum ETextAutoScaleMode
{
	UIAUTOSCALE_None                                   = 0,
	UIAUTOSCALE_Normal                                 = 1,
	UIAUTOSCALE_Justified                              = 2,
	UIAUTOSCALE_ResolutionBased                        = 3,
	UIAUTOSCALE_MAX                                    = 4
};*/

// Enum Engine.UIRoot.EUIAlignment
/*enum EUIAlignment
{
	UIALIGN_Left                                       = 0,
	UIALIGN_Center                                     = 1,
	UIALIGN_Right                                      = 2,
	UIALIGN_Default                                    = 3,
	UIALIGN_MAX                                        = 4
};*/

// Enum Engine.UIRoot.EUIListElementState
/*enum EUIListElementState
{
	ELEMENT_Normal                                     = 0,
	ELEMENT_Active                                     = 1,
	ELEMENT_Selected                                   = 2,
	ELEMENT_Pressed                                    = 3,
	ELEMENT_Dragged                                    = 4,
	ELEMENT_UnderCursor                                = 5,
	ELEMENT_MAX                                        = 6
};*/

// Enum Engine.UIRoot.EColumnHeaderState
/*enum EColumnHeaderState
{
	COLUMNHEADER_Normal                                = 0,
	COLUMNHEADER_PrimarySort                           = 1,
	COLUMNHEADER_SecondarySort                         = 2,
	COLUMNHEADER_MAX                                   = 3
};*/

// Enum Engine.UIRoot.EUIThumnailListItemState
/*enum EUIThumnailListItemState
{
	THUMBNAIL_Normal                                   = 0,
	THUMBNAIL_Selected                                 = 1,
	THUMBNAIL_Dragged                                  = 2,
	THUMBNAIL_Disabled                                 = 3,
	THUMBNAIL_MouseOver                                = 4,
	THUMBNAIL_MAX                                      = 5
};*/

// Enum Engine.UIRoot.EUIOrientation
/*enum EUIOrientation
{
	UIORIENT_Horizontal                                = 0,
	UIORIENT_Vertical                                  = 1,
	UIORIENT_MAX                                       = 2
};*/

// Enum Engine.UIRoot.EUIWidgetFace
/*enum EUIWidgetFace
{
	UIFACE_Left                                        = 0,
	UIFACE_Top                                         = 1,
	UIFACE_Right                                       = 2,
	UIFACE_Bottom                                      = 3,
	UIFACE_MAX                                         = 4
};*/

// Enum Engine.UIRoot.EUIAspectRatioConstraint
/*enum EUIAspectRatioConstraint
{
	UIASPECTRATIO_AdjustNone                           = 0,
	UIASPECTRATIO_AdjustWidthViewport                  = 1,
	UIASPECTRATIO_AdjustHeightViewport                 = 2,
	UIASPECTRATIO_AdjustWidthWidget                    = 3,
	UIASPECTRATIO_AdjustHeightWidget                   = 4,
	UIASPECTRATIO_MAX                                  = 5
};*/

// Enum Engine.UIRoot.EUIDefaultPenColor
/*enum EUIDefaultPenColor
{
	UIPEN_White                                        = 0,
	UIPEN_Black                                        = 1,
	UIPEN_Grey                                         = 2,
	UIPEN_MAX                                          = 3
};*/

// Enum Engine.UIRoot.ENavigationLinkType
/*enum ENavigationLinkType
{
	NAVLINK_Automatic                                  = 0,
	NAVLINK_Manual                                     = 1,
	NAVLINK_MAX                                        = 2
};*/

// Enum Engine.UIRoot.EScreenInputMode
/*enum EScreenInputMode
{
	INPUTMODE_None                                     = 0,
	INPUTMODE_Locked                                   = 1,
	INPUTMODE_MatchingOnly                             = 2,
	INPUTMODE_ActiveOnly                               = 3,
	INPUTMODE_Free                                     = 4,
	INPUTMODE_Simultaneous                             = 5,
	INPUTMODE_MAX                                      = 6
};*/

// Enum Engine.UIRoot.ESplitscreenRenderMode
/*enum ESplitscreenRenderMode
{
	SPLITRENDER_Fullscreen                             = 0,
	SPLITRENDER_PlayerOwner                            = 1,
	SPLITRENDER_MAX                                    = 2
};*/

// Enum Engine.UIRoot.EUIDataProviderFieldType
/*enum EUIDataProviderFieldType
{
	DATATYPE_Property                                  = 0,
	DATATYPE_Provider                                  = 1,
	DATATYPE_RangeProperty                             = 2,
	DATATYPE_Collection                                = 3,
	DATATYPE_ProviderCollection                        = 4,
	DATATYPE_MAX                                       = 5
};*/

// Enum Engine.UIRoot.ERotationAnchor
/*enum ERotationAnchor
{
	RA_Absolute                                        = 0,
	RA_Center                                          = 1,
	RA_PivotLeft                                       = 2,
	RA_PivotRight                                      = 3,
	RA_PivotTop                                        = 4,
	RA_PivotBottom                                     = 5,
	RA_UpperLeft                                       = 6,
	RA_UpperRight                                      = 7,
	RA_LowerLeft                                       = 8,
	RA_LowerRight                                      = 9,
	RA_MAX                                             = 10
};*/

// Enum Engine.UIRoot.EInputPlatformType
/*enum EInputPlatformType
{
	IPT_PC                                             = 0,
	IPT                                                = 1,
	IPT_PS3                                            = 2,
	IPT_MAX                                            = 3
};*/

// Enum Engine.cEdgeUserInterface.etUserTypes
/*enum etUserTypes
{
	kUT_NPCPedestrian                                  = 0,
	kUT_NPCVehicle                                     = 1,
	kUT_PlayerOnFoot                                   = 2,
	kUT_PlayerVehicle                                  = 3,
	kUT_UnhingedProp                                   = 4,
	kUT_MAX                                            = 5
};*/

// Enum Engine.cImporterNode.etAINodeType
/*enum etAINodeType
{
	eVignetteNode                                      = 0,
	eVignetteDecisionPoint                             = 1,
	eSpawnPoint                                        = 2,
	eNone                                              = 3,
	etAINodeType_MAX                                   = 4
};*/

// Enum Engine.UIAnimation.EUIAnimType
/*enum EUIAnimType
{
	EAT_None                                           = 0,
	EAT_Position                                       = 1,
	EAT_RelPosition                                    = 2,
	EAT_Rotation                                       = 3,
	EAT_RelRotation                                    = 4,
	EAT_Color                                          = 5,
	EAT_Opacity                                        = 6,
	EAT_Visibility                                     = 7,
	EAT_Scale                                          = 8,
	EAT_Left                                           = 9,
	EAT_Top                                            = 10,
	EAT_Right                                          = 11,
	EAT_Bottom                                         = 12,
	EAT_MAX                                            = 13
};*/

// Enum Engine.UIAnimation.EUIAnimNotifyType
/*enum EUIAnimNotifyType
{
	EANT_WidgetFunction                                = 0,
	EANT_SceneFunction                                 = 1,
	EANT_KismetEvent                                   = 2,
	EANT_Sound                                         = 3,
	EANT_MAX                                           = 4
};*/

// Enum Engine.UIComp_DrawComponents.EFadeType
/*enum EFadeType
{
	EFT_None                                           = 0,
	EFT_Fading                                         = 1,
	EFT_Pulsing                                        = 2,
	EFT_MAX                                            = 3
};*/

// Enum Engine.UIEditBox.EEditBoxCharacterSet
/*enum EEditBoxCharacterSet
{
	CHARSET_All                                        = 0,
	CHARSET_NoSpecial                                  = 1,
	CHARSET_AlphaOnly                                  = 2,
	CHARSET_NumericOnly                                = 3,
	CHARSET_APB_AccountName                            = 4,
	CHARSET_APB_CharacterName                          = 5,
	CHARSET_AlphaNumeric                               = 6,
	CHARSET_APB_Password                               = 7,
	CHARSET_APB_ItemName                               = 8,
	CHARSET_NaturalNumber                              = 9,
	CHARSET_APB_CharacterNameUnlimited                 = 10,
	CHARSET_APB_LicensePlate                           = 11,
	CHARSET_MAX                                        = 12
};*/

// Enum Engine.CoverGroup.ECoverGroupFillAction
/*enum ECoverGroupFillAction
{
	CGFA_Overwrite                                     = 0,
	CGFA_Add                                           = 1,
	CGFA_Remove                                        = 2,
	CGFA_Clear                                         = 3,
	CGFA_Cylinder                                      = 4,
	CGFA_MAX                                           = 5
};*/

// Enum Engine.NavigationPoint.ENodeTypes
/*enum ENodeTypes
{
	ENavigationPoint                                   = 0,
	E_LiftCenter                                       = 1,
	E_LiftExit                                         = 2,
	E_Objective                                        = 3,
	E_PathNode                                         = 4,
	E__CoverNode                                       = 5,
	E__VolumePathNode                                  = 6,
	E_PickupFactory                                    = 7,
	E_PlayerStart                                      = 8,
	E_RWTechNode                                       = 9,
	E__Pedestrian                                      = 10,
	E__Road                                            = 11,
	E_Teleporter                                       = 12,
	E__RoadLane                                        = 13,
	E__VehicleFeature                                  = 14,
	E__PedestrianCrossingLane                          = 15,
	E__PavementLane                                    = 16,
	E__PedestrianFeature                               = 17,
	ENodeTypes_MAX                                     = 18
};*/

// Enum Engine.CoverLink.ECoverAction
/*enum ECoverAction
{
	CA_Default                                         = 0,
	CA_BlindLeft                                       = 1,
	CA_BlindRight                                      = 2,
	CA_LeanLeft                                        = 3,
	CA_LeanRight                                       = 4,
	CA_StepLeft                                        = 5,
	CA_StepRight                                       = 6,
	CA_PopUp                                           = 7,
	CA_BlindUp                                         = 8,
	CA_PeekLeft                                        = 9,
	CA_PeekRight                                       = 10,
	CA_PeekUp                                          = 11,
	CA_MAX                                             = 12
};*/

// Enum Engine.CoverLink.ECoverDirection
/*enum ECoverDirection
{
	CD_Default                                         = 0,
	CD_Left                                            = 1,
	CD_Right                                           = 2,
	CD_Up                                              = 3,
	CD_MAX                                             = 4
};*/

// Enum Engine.CoverLink.ECoverType
/*enum ECoverType
{
	CT_None                                            = 0,
	CT_Standing                                        = 1,
	CT_MidLevel                                        = 2,
	CT_MAX                                             = 3
};*/

// Enum Engine.CoverLink.ECoverLocationDescription
/*enum ECoverLocationDescription
{
	CoverDesc_None                                     = 0,
	CoverDesc_InWindow                                 = 1,
	CoverDesc_InDoorway                                = 2,
	CoverDesc_BehindCar                                = 3,
	CoverDesc_BehindTruck                              = 4,
	CoverDesc_OnTruck                                  = 5,
	CoverDesc_BehindBarrier                            = 6,
	CoverDesc_BehindColumn                             = 7,
	CoverDesc_BehindCrate                              = 8,
	CoverDesc_BehindWall                               = 9,
	CoverDesc_BehindStatue                             = 10,
	CoverDesc_BehindSandbags                           = 11,
	CoverDesc_MAX                                      = 12
};*/

// Enum Engine.cParticleDecalComponent.ParticleDecalMode
/*enum ParticleDecalMode
{
	PDM_Modulate                                       = 0,
	PDM_Add                                            = 1,
	PDM_MAX                                            = 2
};*/

// Enum Engine.cParticleDecalComponent.ParticleDecalProjection
/*enum ParticleDecalProjection
{
	PDP_Box                                            = 0,
	PDP_Cone                                           = 1,
	PDP_Sphere                                         = 2,
	PDP_MAX                                            = 3
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXBlendMode
/*enum EFaceFXBlendMode
{
	FXBM_Overwrite                                     = 0,
	FXBM_Additive                                      = 1,
	FXBM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionRotationMode
/*enum ERootMotionRotationMode
{
	RMRM_Ignore                                        = 0,
	RMRM_RotateActor                                   = 1,
	RMRM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionMode
/*enum ERootMotionMode
{
	RMM_Translate                                      = 0,
	RMM_Velocity                                       = 1,
	RMM_Ignore                                         = 2,
	RMM_Accel                                          = 3,
	RMM_APB_Cosmetic                                   = 4,
	RMM_MAX                                            = 5
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXRegOp
/*enum EFaceFXRegOp
{
	FXRO_Add                                           = 0,
	FXRO_Multiply                                      = 1,
	FXRO_Replace                                       = 2,
	FXRO_MAX                                           = 3
};*/

// Enum Engine.CrowdAgent.EAgentMoveState
/*enum EAgentMoveState
{
	EAMS_Move                                          = 0,
	EAMS_Idle                                          = 1,
	EAMS_MAX                                           = 2
};*/

// Enum Engine.CrowdAttractor.ECrowdAttractorMode
/*enum ECrowdAttractorMode
{
	ECAM_MoveTarget                                    = 0,
	ECAM_Repulsor                                      = 1,
	ECAM_MAX                                           = 2
};*/

// Enum Engine.UIDataProvider.EProviderAccessType
/*enum EProviderAccessType
{
	ACCESS_ReadOnly                                    = 0,
	ACCESS_PerField                                    = 1,
	ACCESS_WriteAll                                    = 2,
	ACCESS_MAX                                         = 3
};*/

// Enum Engine.GameViewportClient.ESplitScreenType
/*enum ESplitScreenType
{
	eSST_NONE                                          = 0,
	eSST_2P_HORIZONTAL                                 = 1,
	eSST_2P_VERTICAL                                   = 2,
	eSST_3P_FAVOR_TOP                                  = 3,
	eSST_3P_FAVOR_BOTTOM                               = 4,
	eSST_4P                                            = 5,
	eSST_COUNT                                         = 6,
	eSST_NOVALUE                                       = 7,
	eSST_MAX                                           = 8
};*/

// Enum Engine.GameViewportClient.ESafeZoneType
/*enum ESafeZoneType
{
	eSZ_TOP                                            = 0,
	eSZ_BOTTOM                                         = 1,
	eSZ_LEFT                                           = 2,
	eSZ_RIGHT                                          = 3,
	eSZ_MAX                                            = 4
};*/

// Enum Engine.DecalComponent.EFilterMode
/*enum EFilterMode
{
	FM_None                                            = 0,
	FM_Ignore                                          = 1,
	FM_Affect                                          = 2,
	FM_MAX                                             = 3
};*/

// Enum Engine.MaterialInterface.EMaterialUsage
/*enum EMaterialUsage
{
	MATUSAGE_SkeletalMesh                              = 0,
	MATUSAGE_ParticleSprites                           = 1,
	MATUSAGE_BeamTrails                                = 2,
	MATUSAGE_ParticleSubUV                             = 3,
	MATUSAGE_Foliage                                   = 4,
	MATUSAGE_SpeedTree                                 = 5,
	MATUSAGE_StaticLighting                            = 6,
	MATUSAGE_GammaCorrection                           = 7,
	MATUSAGE_LensFlare                                 = 8,
	MATUSAGE_InstancedMeshParticles                    = 9,
	MATUSAGE_FluidSurface                              = 10,
	MATUSAGE_Decals                                    = 11,
	MATUSAGE_SHLight                                   = 12,
	MATUSAGE_MAX                                       = 13
};*/

// Enum Engine.MaterialInterface.EUVMappingType
/*enum EUVMappingType
{
	UVTYPE_Standard                                    = 0,
	UVTYPE_BoundingBox                                 = 1,
	UVTYPE_GlobalTerrainMap                            = 2,
	UVTYPE_MAX                                         = 3
};*/

// Enum Engine.MaterialInterface.EUVMappingSubtype
/*enum EUVMappingSubtype
{
	UVSUBTYPE_Planar                                   = 0,
	UVSUBTYPE_Railing                                  = 1,
	UVSUBTYPE_EdgeMatch                                = 2,
	UVSUBTYPE_Grime                                    = 3,
	UVSUBTYPE_MAX                                      = 4
};*/

// Enum Engine.Material.EBlendMode
/*enum EBlendMode
{
	BLEND_Opaque                                       = 0,
	BLEND_Masked                                       = 1,
	BLEND_Translucent                                  = 2,
	BLEND_Additive                                     = 3,
	BLEND_Modulate                                     = 4,
	BLEND_OpaqueWriteAlpha                             = 5,
	BLEND_Translucent_PreMulAlpha                      = 6,
	BLEND_MAX                                          = 7
};*/

// Enum Engine.Material.EMaterialLightingModel
/*enum EMaterialLightingModel
{
	MLM_Phong                                          = 0,
	MLM_NonDirectional                                 = 1,
	MLM_Unlit                                          = 2,
	MLM_SHPRT                                          = 3,
	MLM_Custom                                         = 4,
	MLM_MAX                                            = 5
};*/

// Enum Engine.DistributionFloatParameterBase.DistributionParamMode
/*enum DistributionParamMode
{
	DPM_Normal                                         = 0,
	DPM_Abs                                            = 1,
	DPM_Direct                                         = 2,
	DPM_MAX                                            = 3
};*/

// Enum Engine.DoorMarker.EDoorType
/*enum EDoorType
{
	DOOR_Shoot                                         = 0,
	DOOR_Touch                                         = 1,
	DOOR_MAX                                           = 2
};*/

// Enum Engine.ParticleSystem.EParticleSystemUpdateMode
/*enum EParticleSystemUpdateMode
{
	EPSUM_RealTime                                     = 0,
	EPSUM_FixedTime                                    = 1,
	EPSUM_MAX                                          = 2
};*/

// Enum Engine.ParticleSystem.ParticleSystemLODMethod
/*enum ParticleSystemLODMethod
{
	PARTICLESYSTEMLODMETHOD_Automatic                  = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                  = 1,
	PARTICLESYSTEMLODMETHOD_MAX                        = 2
};*/

// Enum Engine.ParticleSystemComponent.EParticleEventType
/*enum EParticleEventType
{
	EPET_Any                                           = 0,
	EPET_Spawn                                         = 1,
	EPET_Death                                         = 2,
	EPET_Collision                                     = 3,
	EPET_Kismet                                        = 4,
	EPET_MAX                                           = 5
};*/

// Enum Engine.ParticleSystemComponent.EParticleSysParamType
/*enum EParticleSysParamType
{
	PSPT_None                                          = 0,
	PSPT_Scalar                                        = 1,
	PSPT_Vector                                        = 2,
	PSPT_Color                                         = 3,
	PSPT_Actor                                         = 4,
	PSPT_Material                                      = 5,
	PSPT_MAX                                           = 6
};*/

// Enum Engine.Engine.ETransitionType
/*enum ETransitionType
{
	TT_None                                            = 0,
	TT_Paused                                          = 1,
	TT_Loading                                         = 2,
	TT_Saving                                          = 3,
	TT_Connecting                                      = 4,
	TT_Precaching                                      = 5,
	TT_MAX                                             = 6
};*/

// Enum Engine.FileWriter.FWFileType
/*enum FWFileType
{
	FWFT_Log                                           = 0,
	FWFT_Stats                                         = 1,
	FWFT_HTML                                          = 2,
	FWFT_User                                          = 3,
	FWFT_Debug                                         = 4,
	FWFT_MAX                                           = 5
};*/

// Enum Engine.FluidInfluenceComponent.EInfluenceType
/*enum EInfluenceType
{
	Fluid_Flow                                         = 0,
	Fluid_Raindrops                                    = 1,
	Fluid_Wave                                         = 2,
	Fluid_Sphere                                       = 3,
	Fluid_MAX                                          = 4
};*/

// Enum Engine.ForceFeedbackWaveform.EWaveformFunction
/*enum EWaveformFunction
{
	WF_Constant                                        = 0,
	WF_LinearIncreasing                                = 1,
	WF_LinearDecreasing                                = 2,
	WF_Sin0to90                                        = 3,
	WF_Sin90to180                                      = 4,
	WF_Sin0to180                                       = 5,
	WF_Noise                                           = 6,
	WF_MAX                                             = 7
};*/

// Enum Engine.GameEngine.EFullyLoadPackageType
/*enum EFullyLoadPackageType
{
	FULLYLOAD_Map                                      = 0,
	FULLYLOAD_Game_PreLoadClass                        = 1,
	FULLYLOAD_Game_PostLoadClass                       = 2,
	FULLYLOAD_Always                                   = 3,
	FULLYLOAD_MAX                                      = 4
};*/

// Enum Engine.GameUISceneClient.EUIDragAndDropOperation
/*enum EUIDragAndDropOperation
{
	EUIDNDOP_None                                      = 0,
	EUIDNDOP_InsertDrop                                = 1,
	EUIDNDOP_InsertDrop_RemoveDrag                     = 2,
	EUIDNDOP_ModifyDrop                                = 3,
	EUIDNDOP_ModifyDrop_RemoveDrag                     = 4,
	EUIDNDOP_MAX                                       = 5
};*/

// Enum Engine.InterpTrackToggle.ETrackToggleAction
/*enum ETrackToggleAction
{
	ETTA_Off                                           = 0,
	ETTA_On                                            = 1,
	ETTA_Toggle                                        = 2,
	ETTA_MAX                                           = 3
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveRotMode
/*enum EInterpTrackMoveRotMode
{
	IMR_Keyframed                                      = 0,
	IMR_LookAtGroup                                    = 1,
	IMR_MAX                                            = 2
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveFrame
/*enum EInterpTrackMoveFrame
{
	IMF_World                                          = 0,
	IMF_RelativeToInitial                              = 1,
	IMF_MAX                                            = 2
};*/

// Enum Engine.LevelStreamingVolume.EStreamingVolumeUsage
/*enum EStreamingVolumeUsage
{
	SVB_Loading                                        = 0,
	SVB_LoadingAndVisibility                           = 1,
	SVB_VisibilityBlockingOnLoad                       = 2,
	SVB_BlockingOnLoad                                 = 3,
	SVB_LoadingNotVisible                              = 4,
	SVB_MAX                                            = 5
};*/

// Enum Engine.MaterialExpressionSceneTexture.ESceneTextureType
/*enum ESceneTextureType
{
	SceneTex_Lighting                                  = 0,
	SceneTex_Filter                                    = 1,
	SceneTex_MAX                                       = 2
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransform
/*enum EMaterialVectorCoordTransform
{
	TRANSFORM_World                                    = 0,
	TRANSFORM_View                                     = 1,
	TRANSFORM_Local                                    = 2,
	TRANSFORM_MAX                                      = 3
};*/

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransform
/*enum EMaterialPositionTransform
{
	TRANSFORMPOS_World                                 = 0,
	TRANSFORMPOS_MAX                                   = 1
};*/

// Enum Engine.NxGenericForceFieldBrush.FFB_ForceFieldCoordinates
/*enum FFB_ForceFieldCoordinates
{
	FFB_CARTESIAN                                      = 0,
	FFB_SPHERICAL                                      = 1,
	FFB_CYLINDRICAL                                    = 2,
	FFB_TOROIDAL                                       = 3,
	FFB_MAX                                            = 4
};*/

// Enum Engine.NxForceFieldGeneric.FFG_ForceFieldCoordinates
/*enum FFG_ForceFieldCoordinates
{
	FFG_CARTESIAN                                      = 0,
	FFG_SPHERICAL                                      = 1,
	FFG_CYLINDRICAL                                    = 2,
	FFG_TOROIDAL                                       = 3,
	FFG_MAX                                            = 4
};*/

// Enum Engine.OnlineProfileSettings.EOnlineProfilePropertyOwner
/*enum EOnlineProfilePropertyOwner
{
	OPPO_None                                          = 0,
	OPPO_OnlineService                                 = 1,
	OPPO_Game                                          = 2,
	OPPO_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileSettingID
/*enum EProfileSettingID
{
	PSI_Unknown                                        = 0,
	PSI_ControllerVibration                            = 1,
	PSI_YInversion                                     = 2,
	PSI_GamerCred                                      = 3,
	PSI_GamerRep                                       = 4,
	PSI_VoiceMuted                                     = 5,
	PSI_VoiceThruSpeakers                              = 6,
	PSI_VoiceVolume                                    = 7,
	PSI_GamerPictureKey                                = 8,
	PSI_GamerMotto                                     = 9,
	PSI_GamerTitlesPlayed                              = 10,
	PSI_GamerAchievementsEarned                        = 11,
	PSI_GameDifficulty                                 = 12,
	PSI_ControllerSensitivity                          = 13,
	PSI_PreferredColor1                                = 14,
	PSI_PreferredColor2                                = 15,
	PSI_AutoAim                                        = 16,
	PSI_AutoCenter                                     = 17,
	PSI_MovementControl                                = 18,
	PSI_RaceTransmission                               = 19,
	PSI_RaceCameraLocation                             = 20,
	PSI_RaceBrakeControl                               = 21,
	PSI_RaceAcceleratorControl                         = 22,
	PSI_GameCredEarned                                 = 23,
	PSI_GameAchievementsEarned                         = 24,
	PSI_EndLiveIds                                     = 25,
	PSI_ProfileVersionNum                              = 26,
	PSI_ProfileSaveCount                               = 27,
	PSI_MAX                                            = 28
};*/

// Enum Engine.OnlineProfileSettings.EOnlineProfileAsyncState
/*enum EOnlineProfileAsyncState
{
	OPAS_None                                          = 0,
	OPAS_Read                                          = 1,
	OPAS_Write                                         = 2,
	OPAS_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileDifficultyOptions
/*enum EProfileDifficultyOptions
{
	PDO_Normal                                         = 0,
	PDO_Easy                                           = 1,
	PDO_Hard                                           = 2,
	PDO_MAX                                            = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerSensitivityOptions
/*enum EProfileControllerSensitivityOptions
{
	PCSO_Medium                                        = 0,
	PCSO_Low                                           = 1,
	PCSO_High                                          = 2,
	PCSO_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfilePreferredColorOptions
/*enum EProfilePreferredColorOptions
{
	PPCO_None                                          = 0,
	PPCO_Black                                         = 1,
	PPCO_White                                         = 2,
	PPCO_Yellow                                        = 3,
	PPCO_Orange                                        = 4,
	PPCO_Pink                                          = 5,
	PPCO_Red                                           = 6,
	PPCO_Purple                                        = 7,
	PPCO_Blue                                          = 8,
	PPCO_Green                                         = 9,
	PPCO_Brown                                         = 10,
	PPCO_Silver                                        = 11,
	PPCO_MAX                                           = 12
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoAimOptions
/*enum EProfileAutoAimOptions
{
	PAAO_Off                                           = 0,
	PAAO_On                                            = 1,
	PAAO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoCenterOptions
/*enum EProfileAutoCenterOptions
{
	PACO_Off                                           = 0,
	PACO_On                                            = 1,
	PACO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileMovementControlOptions
/*enum EProfileMovementControlOptions
{
	PMCO_L_Thumbstick                                  = 0,
	PMCO_R_Thumbstick                                  = 1,
	PMCO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceTransmissionOptions
/*enum EProfileRaceTransmissionOptions
{
	PRTO_Auto                                          = 0,
	PRTO_Manual                                        = 1,
	PRTO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceCameraLocationOptions
/*enum EProfileRaceCameraLocationOptions
{
	PRCLO_Behind                                       = 0,
	PRCLO_Front                                        = 1,
	PRCLO_Inside                                       = 2,
	PRCLO_MAX                                          = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceBrakeControlOptions
/*enum EProfileRaceBrakeControlOptions
{
	PRBCO_Trigger                                      = 0,
	PRBCO_Button                                       = 1,
	PRBCO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceAcceleratorControlOptions
/*enum EProfileRaceAcceleratorControlOptions
{
	PRACO_Trigger                                      = 0,
	PRACO_Button                                       = 1,
	PRACO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileYInversionOptions
/*enum EProfileYInversionOptions
{
	PYIO_Off                                           = 0,
	PYIO_On                                            = 1,
	PYIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileXInversionOptions
/*enum EProfileXInversionOptions
{
	PXIO_Off                                           = 0,
	PXIO_On                                            = 1,
	PXIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerVibrationToggleOptions
/*enum EProfileControllerVibrationToggleOptions
{
	PCVTO_Off                                          = 0,
	PCVTO_IgnoreThis                                   = 1,
	PCVTO_IgnoreThis2                                  = 2,
	PCVTO_On                                           = 3,
	PCVTO_MAX                                          = 4
};*/

// Enum Engine.OnlineProfileSettings.EProfileVoiceThruSpeakersOptions
/*enum EProfileVoiceThruSpeakersOptions
{
	PVTSO_Off                                          = 0,
	PVTSO_On                                           = 1,
	PVTSO_Both                                         = 2,
	PVTSO_MAX                                          = 3
};*/

// Enum Engine.ParticleEmitter.EEmitterRenderMode
/*enum EEmitterRenderMode
{
	ERM_Normal                                         = 0,
	ERM_Point                                          = 1,
	ERM_Cross                                          = 2,
	ERM_None                                           = 3,
	ERM_MAX                                            = 4
};*/

// Enum Engine.ParticleEmitter.EParticleSubUVInterpMethod
/*enum EParticleSubUVInterpMethod
{
	PSUVIM_None                                        = 0,
	PSUVIM_Linear                                      = 1,
	PSUVIM_Linear_Blend                                = 2,
	PSUVIM_Random                                      = 3,
	PSUVIM_Random_Blend                                = 4,
	PSUVIM_MAX                                         = 5
};*/

// Enum Engine.ParticleEmitter.EParticleBurstMethod
/*enum EParticleBurstMethod
{
	EPBM_Instant                                       = 0,
	EPBM_Interpolated                                  = 1,
	EPBM_MAX                                           = 2
};*/

// Enum Engine.ParticleModule.EModuleType
/*enum EModuleType
{
	EPMT_General                                       = 0,
	EPMT_TypeData                                      = 1,
	EPMT_Beam                                          = 2,
	EPMT_Trail                                         = 3,
	EPMT_Spawn                                         = 4,
	EPMT_Required                                      = 5,
	EPMT_Event                                         = 6,
	EPMT_MAX                                           = 7
};*/

// Enum Engine.ParticleModule.EParticleSourceSelectionMethod
/*enum EParticleSourceSelectionMethod
{
	EPSSM_Random                                       = 0,
	EPSSM_Sequential                                   = 1,
	EPSSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleAttractorParticle.EAttractorParticleSelectionMethod
/*enum EAttractorParticleSelectionMethod
{
	EAPSM_Random                                       = 0,
	EAPSM_Sequential                                   = 1,
	EAPSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetMethod
/*enum Beam2SourceTargetMethod
{
	PEB2STM_Default                                    = 0,
	PEB2STM_UserSet                                    = 1,
	PEB2STM_Emitter                                    = 2,
	PEB2STM_Particle                                   = 3,
	PEB2STM_Actor                                      = 4,
	PEB2STM_MAX                                        = 5
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetTangentMethod
/*enum Beam2SourceTargetTangentMethod
{
	PEB2STTM_Direct                                    = 0,
	PEB2STTM_UserSet                                   = 1,
	PEB2STTM_Distribution                              = 2,
	PEB2STTM_Emitter                                   = 3,
	PEB2STTM_MAX                                       = 4
};*/

// Enum Engine.ParticleModuleBeamModifier.BeamModifierType
/*enum BeamModifierType
{
	PEB2MT_Source                                      = 0,
	PEB2MT_Target                                      = 1,
	PEB2MT_MAX                                         = 2
};*/

// Enum Engine.ParticleModuleCollisionBase.EParticleCollisionComplete
/*enum EParticleCollisionComplete
{
	EPCC_Kill                                          = 0,
	EPCC_Freeze                                        = 1,
	EPCC_HaltCollisions                                = 2,
	EPCC_FreezeTranslation                             = 3,
	EPCC_FreezeRotation                                = 4,
	EPCC_FreezeMovement                                = 5,
	EPCC_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleLocationEmitter.ELocationEmitterSelectionMethod
/*enum ELocationEmitterSelectionMethod
{
	ELESM_Random                                       = 0,
	ELESM_Sequential                                   = 1,
	ELESM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleLocationPrimitiveCylinder.CylinderHeightAxis
/*enum CylinderHeightAxis
{
	PMLPC_HEIGHTAXIS_X                                 = 0,
	PMLPC_HEIGHTAXIS_Y                                 = 1,
	PMLPC_HEIGHTAXIS_Z                                 = 2,
	PMLPC_HEIGHTAXIS_MAX                               = 3
};*/

// Enum Engine.ParticleModuleOrbit.EOrbitChainMode
/*enum EOrbitChainMode
{
	EOChainMode_Add                                    = 0,
	EOChainMode_Scale                                  = 1,
	EOChainMode_Link                                   = 2,
	EOChainMode_MAX                                    = 3
};*/

// Enum Engine.ParticleModuleOrientationAxisLock.EParticleAxisLock
/*enum EParticleAxisLock
{
	EPAL_NONE                                          = 0,
	EPAL_X                                             = 1,
	EPAL_Y                                             = 2,
	EPAL_Z                                             = 3,
	EPAL_NEGATIVE_X                                    = 4,
	EPAL_NEGATIVE_Y                                    = 5,
	EPAL_NEGATIVE_Z                                    = 6,
	EPAL_ROTATE_X                                      = 7,
	EPAL_ROTATE_Y                                      = 8,
	EPAL_ROTATE_Z                                      = 9,
	EPAL_MAX                                           = 10
};*/

// Enum Engine.ParticleSpriteEmitter.EParticleScreenAlignment
/*enum EParticleScreenAlignment
{
	PSA_Square                                         = 0,
	PSA_Rectangle                                      = 1,
	PSA_Velocity                                       = 2,
	PSA_TypeSpecific                                   = 3,
	PSA_MAX                                            = 4
};*/

// Enum Engine.ParticleModuleTrailSource.ETrail2SourceMethod
/*enum ETrail2SourceMethod
{
	PET2SRCM_Default                                   = 0,
	PET2SRCM_Particle                                  = 1,
	PET2SRCM_Actor                                     = 2,
	PET2SRCM_MAX                                       = 3
};*/

// Enum Engine.ParticleModuleTrailSpawn.ETrail2SpawnMethod
/*enum ETrail2SpawnMethod
{
	PET2SM_Emitter                                     = 0,
	PET2SM_Velocity                                    = 1,
	PET2SM_Distance                                    = 2,
	PET2SM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTrailTaper.ETrailTaperMethod
/*enum ETrailTaperMethod
{
	PETTM_None                                         = 0,
	PETTM_Full                                         = 1,
	PETTM_Partial                                      = 2,
	PETTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamMethod
/*enum EBeamMethod
{
	PEBM_Distance                                      = 0,
	PEBM_EndPoints                                     = 1,
	PEBM_EndPoints_Interpolated                        = 2,
	PEBM_UserSet_EndPoints                             = 3,
	PEBM_UserSet_EndPoints_Interpolated                = 4,
	PEBM_MAX                                           = 5
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamEndPointMethod
/*enum EBeamEndPointMethod
{
	PEBEPM_Calculated                                  = 0,
	PEBEPM_Distribution                                = 1,
	PEBEPM_Distribution_Constant                       = 2,
	PEBEPM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeam2Method
/*enum EBeam2Method
{
	PEB2M_Distance                                     = 0,
	PEB2M_Target                                       = 1,
	PEB2M_Branch                                       = 2,
	PEB2M_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeamTaperMethod
/*enum EBeamTaperMethod
{
	PEBTM_None                                         = 0,
	PEBTM_Full                                         = 1,
	PEBTM_Partial                                      = 2,
	PEBTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshScreenAlignment
/*enum EMeshScreenAlignment
{
	PSMA_MeshFaceCameraWithRoll                        = 0,
	PSMA_MeshFaceCameraWithSpin                        = 1,
	PSMA_MeshFaceCameraWithLockedAxis                  = 2,
	PSMA_MAX                                           = 3
};*/

// Enum Engine.ParticleModuleTypeDataMeshPhysX.EPhysXMeshRotationMethod
/*enum EPhysXMeshRotationMethod
{
	PMRM_Disabled                                      = 0,
	PMRM_Spherical                                     = 1,
	PMRM_Box                                           = 2,
	PMRM_LongBox                                       = 3,
	PMRM_FlatBox                                       = 4,
	PMRM_MAX                                           = 5
};*/

// Enum Engine.RWTechNode.etExtendedNodeTypeIndex
/*enum etExtendedNodeTypeIndex
{
	eBDPNode                                           = 0,
	eBJDPNode                                          = 1,
	eSDDPNode                                          = 2,
	eSDNode                                            = 3,
	eVDPNode                                           = 4,
	eVNode                                             = 5,
	eNotExtended                                       = 6,
	etExtendedNodeTypeIndex_MAX                        = 7
};*/

// Enum Engine.RWTechReachSpec.etTurnType
/*enum etTurnType
{
	eLeft                                              = 0,
	eRight                                             = 1,
	eNoTurn                                            = 2,
	etTurnType_MAX                                     = 3
};*/

// Enum Engine.Pawn.EPathSearchType
/*enum EPathSearchType
{
	PST_Default                                        = 0,
	PST_Breadth                                        = 1,
	PST_NewBestPathTo                                  = 2,
	PST_Constraint                                     = 3,
	PST_MAX                                            = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etActivityMessageExclude
/*enum etActivityMessageExclude
{
	ActivityMessageExclude_None                        = 0,
	ActivityMessageExclude_Match                       = 1,
	ActivityMessageExclude_Player                      = 2,
	ActivityMessageExclude_Side                        = 3,
	ActivityMessageExclude_MAX                         = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etActivityMessageLocation
/*enum etActivityMessageLocation
{
	ActivityMessageLocation_ActionMessage              = 0,
	ActivityMessageLocation_DistrictMapMessage         = 1,
	ActivityMessageLocation_ChatMessage                = 2,
	ActivityMessageLocation_StandardMessage            = 3,
	ActivityMessageLocation_ScoreboardMessage          = 4,
	ActivityMessageLocation_RespawnMessage             = 5,
	ActivityMessageLocation_MAX                        = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etActivityMessageParameterConversion
/*enum etActivityMessageParameterConversion
{
	AMPC_AchievementName                               = 0,
	AMPC_AmmoType                                      = 1,
	AMPC_CharacterName                                 = 2,
	AMPC_ContactName                                   = 3,
	AMPC_DisplayPointName                              = 4,
	AMPC_DistrictBlock                                 = 5,
	AMPC_ItemDisplayName                               = 6,
	AMPC_JustificationText                             = 7,
	AMPC_LeagueName                                    = 8,
	AMPC_LocationBeacon                                = 9,
	AMPC_MedalDescription                              = 10,
	AMPC_MedalName                                     = 11,
	AMPC_Number                                        = 12,
	AMPC_OfferType                                     = 13,
	AMPC_OrganisationName                              = 14,
	AMPC_RewardDisplayName                             = 15,
	AMPC_RoleName                                      = 16,
	AMPC_SddRow_Contact                                = 17,
	AMPC_SddRow_Heat                                   = 18,
	AMPC_SddRow_League                                 = 19,
	AMPC_SddRow_Medal                                  = 20,
	AMPC_SddRow_Organisation                           = 21,
	AMPC_SddRow_RewardDescription                      = 22,
	AMPC_SddRow_Role                                   = 23,
	AMPC_SddRow_Threat                                 = 24,
	AMPC_StreetName                                    = 25,
	AMPC_VehicleName                                   = 26,
	AMPC_WeaponIcon                                    = 27,
	AMPC_WeaponType                                    = 28,
	AMPC_MAX                                           = 29
};*/

// Enum Engine.PhysicalMaterialSDD.etActivityMessageRelevance
/*enum etActivityMessageRelevance
{
	ActivityMessageRelevance_Player                    = 0,
	ActivityMessageRelevance_Side                      = 1,
	ActivityMessageRelevance_Match                     = 2,
	ActivityMessageRelevance_District                  = 3,
	ActivityMessageRelevance_Group                     = 4,
	ActivityMessageRelevance_MAX                       = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etActivityMessageScope
/*enum etActivityMessageScope
{
	ActivityMessageScope_Player                        = 0,
	ActivityMessageScope_Side                          = 1,
	ActivityMessageScope_Match                         = 2,
	ActivityMessageScope_District                      = 3,
	ActivityMessageScope_MAX                           = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etAPBPawnConstant
/*enum etAPBPawnConstant
{
	APBPawnConstant_ArrestTime                         = 0,
	APBPawnConstant_DistanceSprintedBeforeGameplayEvent = 1,
	APBPawnConstant_FallDeathMomentumScale             = 2,
	APBPawnConstant_HitReactionAngleConstraint         = 3,
	APBPawnConstant_ImmuneToDamageTimeInitial          = 4,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnExtended = 5,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnNormal  = 6,
	APBPawnConstant_ImmuneToStaminaDamageTime          = 7,
	APBPawnConstant_ImmunityCheckDelay                 = 8,
	APBPawnConstant_ImmunityDistanceMax                = 9,
	APBPawnConstant_StaminaExhaustedThreshold          = 10,
	APBPawnConstant_SwitchToUnarmedTime                = 11,
	APBPawnConstant_WeaponAccuracyCooldownPerSecond    = 12,
	APBPawnConstant_WeaponFireRateTechnicalLimit       = 13,
	APBPawnConstant_MAX                                = 14
};*/

// Enum Engine.PhysicalMaterialSDD.etAPBViewportType
/*enum etAPBViewportType
{
	VWT_16to9_Full                                     = 0,
	VWT_4to3_Full                                      = 1,
	VWT_MAX                                            = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etCameraConstant
/*enum etCameraConstant
{
	CameraConstant_CloseIn16_9BackAdjust               = 0,
	CameraConstant_CloseIn16_9HeightAdjust             = 1,
	CameraConstant_CloseIn16_9RightAdjust              = 2,
	CameraConstant_CloseIn16_9RightAdjustPitchScalar   = 3,
	CameraConstant_CloseIn4_3BackAdjust                = 4,
	CameraConstant_CloseIn4_3HeightAdjust              = 5,
	CameraConstant_CloseIn4_3RightAdjust               = 6,
	CameraConstant_CloseIn4_3RightAdjustPitchScalar    = 7,
	CameraConstant_CrouchAndSideSwapCameraSpeed        = 8,
	CameraConstant_CrouchCloseIn16_9BackAdjust         = 9,
	CameraConstant_CrouchCloseIn16_9HeightAdjust       = 10,
	CameraConstant_CrouchCloseIn16_9RightAdjust        = 11,
	CameraConstant_CrouchCloseIn16_9RightAdjustPitchScalar = 12,
	CameraConstant_CrouchCloseIn4_3BackAdjust          = 13,
	CameraConstant_CrouchCloseIn4_3HeightAdjust        = 14,
	CameraConstant_CrouchCloseIn4_3RightAdjust         = 15,
	CameraConstant_CrouchCloseIn4_3RightAdjustPitchScalar = 16,
	CameraConstant_CrouchFarOut16_9BackAdjust          = 17,
	CameraConstant_CrouchFarOut16_9HeightAdjust        = 18,
	CameraConstant_CrouchFarOut16_9RightAdjust         = 19,
	CameraConstant_CrouchFarOut16_9RightAdjustPitchScalar = 20,
	CameraConstant_CrouchFarOut4_3BackAdjust           = 21,
	CameraConstant_CrouchFarOut4_3HeightAdjust         = 22,
	CameraConstant_CrouchFarOut4_3RightAdjust          = 23,
	CameraConstant_CrouchFarOut4_3RightAdjustPitchScalar = 24,
	CameraConstant_FarOut16_9BackAdjust                = 25,
	CameraConstant_FarOut16_9HeightAdjust              = 26,
	CameraConstant_FarOut16_9RightAdjust               = 27,
	CameraConstant_FarOut16_9RightAdjustPitchScalar    = 28,
	CameraConstant_FarOut4_3BackAdjust                 = 29,
	CameraConstant_FarOut4_3HeightAdjust               = 30,
	CameraConstant_FarOut4_3RightAdjust                = 31,
	CameraConstant_FarOut4_3RightAdjustPitchScalar     = 32,
	CameraConstant_PenetrationBlendInTime              = 33,
	CameraConstant_PenetrationBlendOutTime             = 34,
	CameraConstant_SafeLocBlendSpeed                   = 35,
	CameraConstant_VaultFenceCameraRotationSpeed       = 36,
	CameraConstant_ZoomSpeedPerSecond                  = 37,
	CameraConstant_MAX                                 = 38
};*/

// Enum Engine.PhysicalMaterialSDD.etCameraMode
/*enum etCameraMode
{
	CameraMode_None                                    = 0,
	CameraMode_ADA                                     = 1,
	CameraMode_AttachToActor                           = 2,
	CameraMode_Death                                   = 3,
	CameraMode_DefaultCharacter                        = 4,
	CameraMode_Director                                = 5,
	CameraMode_Driving                                 = 6,
	CameraMode_Fly                                     = 7,
	CameraMode_LeanTowardScreenCentre                  = 8,
	CameraMode_MarksManShip                            = 9,
	CameraMode_Passenger                               = 10,
	CameraMode_Sprinting                               = 11,
	CameraMode_Unstick                                 = 12,
	CameraMode_VehicleDeath                            = 13,
	CameraMode_VehicleMarksmanship                     = 14,
	CameraMode_MAX                                     = 15
};*/

// Enum Engine.PhysicalMaterialSDD.etCameraShakePresetExported
/*enum etCameraShakePresetExported
{
	CameraShakePresetExported_None                     = 0,
	CameraShakePresetExported_APBScreenShake1          = 1,
	CameraShakePresetExported_APBScreenShake2          = 2,
	CameraShakePresetExported_APBScreenShake3          = 3,
	CameraShakePresetExported_APBScreenShake4          = 4,
	CameraShakePresetExported_APBScreenShake5          = 5,
	CameraShakePresetExported_APBScreenShake6          = 6,
	CameraShakePresetExported_HeavyLanding             = 7,
	CameraShakePresetExported_MAX                      = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etCharacterStatus
/*enum etCharacterStatus
{
	GMS_None                                           = 0,
	GMS_Dead                                           = 1,
	GMS_TaskParticipant                                = 2,
	GMS_NonTaskParticipant                             = 3,
	GMS_Stunned                                        = 4,
	GMS_Arrested                                       = 5,
	GMS_Driving                                        = 6,
	GMS_OutOfDistrict                                  = 7,
	GMS_Ready                                          = 8,
	GMS_DND                                            = 9,
	GMS_AFK                                            = 10,
	GMS_Disconnected                                   = 11,
	GMS_MAX                                            = 12
};*/

// Enum Engine.PhysicalMaterialSDD.etCharacterVOIPStatus
/*enum etCharacterVOIPStatus
{
	VOIP_Active_High                                   = 0,
	VOIP_Active_Low                                    = 1,
	VOIP_Active_Medium                                 = 2,
	VOIP_InChannel                                     = 3,
	VOIP_Muted                                         = 4,
	VOIP_None                                          = 5,
	VOIP_NotInChannel                                  = 6,
	VOIP_MAX                                           = 7
};*/

// Enum Engine.PhysicalMaterialSDD.etChatConstant
/*enum etChatConstant
{
	ChatConstant_SayRadius                             = 0,
	ChatConstant_YellRadius                            = 1,
	ChatConstant_MAX                                   = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etChatState
/*enum etChatState
{
	kChatState_Normal                                  = 0,
	kChatState_AFK                                     = 1,
	kChatState_DND                                     = 2,
	kChatState_MAX                                     = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etClanRank
/*enum etClanRank
{
	Leader                                             = 0,
	Officer                                            = 1,
	Member                                             = 2,
	etClanRank_MAX                                     = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etContactType
/*enum etContactType
{
	ContactType_None                                   = 0,
	ContactType_Fixer                                  = 1,
	ContactType_MissionProvider                        = 2,
	ContactType_Organisation                           = 3,
	ContactType_TurfContact                            = 4,
	ContactType_MAX                                    = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etContextSensitiveActionBase
/*enum etContextSensitiveActionBase
{
	CSA_None                                           = 0,
	CSA_AntiGraffiti                                   = 1,
	CSA_Arrest                                         = 2,
	CSA_Arrested                                       = 3,
	CSA_AudioDisplayPoint                              = 4,
	CSA_BuildingBreakIn                                = 5,
	CSA_BuildingForcedEntry                            = 6,
	CSA_CargoInteraction                               = 7,
	CSA_CrimeSceneInvestigation                        = 8,
	CSA_CrimeSceneInvestigation_Vehicle                = 9,
	CSA_DefuseBomb                                     = 10,
	CSA_DefuseVehicleBomb                              = 11,
	CSA_DeployAmmoCarrier                              = 12,
	CSA_DropTaskItem                                   = 13,
	CSA_EnterVehicle                                   = 14,
	CSA_Graffiti                                       = 15,
	CSA_GraffitiDisplayPoint_Billboard                 = 16,
	CSA_GraffitiDisplayPoint_Default                   = 17,
	CSA_GraffitiDisplayPoint_Targeted                  = 18,
	CSA_Hacking                                        = 19,
	CSA_Hacking_Vehicle                                = 20,
	CSA_Hotwire                                        = 21,
	CSA_InventoryAccess                                = 22,
	CSA_NPCForcibleArrest                              = 23,
	CSA_NPCMugging                                     = 24,
	CSA_NPCStopSearch                                  = 25,
	CSA_OpenAmmoPurchase                               = 26,
	CSA_OpenGarage                                     = 27,
	CSA_OpenInventory                                  = 28,
	CSA_OpenInventory_Legacy                           = 29,
	CSA_OpenLocker                                     = 30,
	CSA_OpenMailBox                                    = 31,
	CSA_OpenMarketPlace                                = 32,
	CSA_OpenMusicStudio                                = 33,
	CSA_OpenPersona                                    = 34,
	CSA_OpenSymbolDesigner                             = 35,
	CSA_OpenWardrobe                                   = 36,
	CSA_PassTaskItem                                   = 37,
	CSA_PassTaskItemToCargoHold                        = 38,
	CSA_PickupTaskItem                                 = 39,
	CSA_PlantBomb                                      = 40,
	CSA_PlantVehicleBomb                               = 41,
	CSA_PlayerInteractionMenu                          = 42,
	CSA_RCE_Door                                       = 43,
	CSA_RCE_Fence                                      = 44,
	CSA_RCE_Ladder                                     = 45,
	CSA_ReceiveTaskItem                                = 46,
	CSA_ReceiveTaskItemFromCargoHold                   = 47,
	CSA_Rescue                                         = 48,
	CSA_Rescued                                        = 49,
	CSA_ResupplyAmmo                                   = 50,
	CSA_ResupplyAmmo_Legacy                            = 51,
	CSA_Sabotage                                       = 52,
	CSA_Sabotage_Vehicle                               = 53,
	CSA_SetAlight                                      = 54,
	CSA_SetVehicleAlight                               = 55,
	CSA_SpawnVehicle                                   = 56,
	CSA_SpawnVehicle_Legacy                            = 57,
	CSA_SpeakToContact                                 = 58,
	CSA_StatueDisplayPoint                             = 59,
	CSA_VehicleBreakIn                                 = 60,
	CSA_MAX                                            = 61
};*/

// Enum Engine.PhysicalMaterialSDD.etCrimeTargetCategory
/*enum etCrimeTargetCategory
{
	CrimeTargetCategory_NPC                            = 0,
	CrimeTargetCategory_Vehicle                        = 1,
	CrimeTargetCategory_Environmental                  = 2,
	CrimeTargetCategory_Prop                           = 3,
	CrimeTargetCategory_Max                            = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etCrimeTargetEnvironmental
/*enum etCrimeTargetEnvironmental
{
	CrimeTargetEnvironmental_RamRaid                   = 0,
	CrimeTargetEnvironmental_Arson                     = 1,
	CrimeTargetEnvironmental_PickupPoint               = 2,
	CrimeTargetEnvironmental_Graffiti                  = 3,
	CrimeTargetEnvironmental_MAX                       = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etCrimeTargetType
/*enum etCrimeTargetType
{
	CrimeTargetType_BrownCollarWorker                  = 0,
	CrimeTargetType_Businessman                        = 1,
	CrimeTargetType_BusinessmanGoingHome               = 2,
	CrimeTargetType_Clubber                            = 3,
	CrimeTargetType_ClubberGoingHome                   = 4,
	CrimeTargetType_CorporateBusinessman               = 5,
	CrimeTargetType_GenericEntertainment               = 6,
	CrimeTargetType_GenericHungry                      = 7,
	CrimeTargetType_GenericShopper                     = 8,
	CrimeTargetType_GenericShopperGoingHome            = 9,
	CrimeTargetType_Vehicle                            = 10,
	CrimeTargetType_FamilyCar                          = 11,
	CrimeTargetType_SportsCar                          = 12,
	CrimeTargetType_RamRaidTarget                      = 13,
	CrimeTargetType_ArsonTarget                        = 14,
	CrimeTargetType_PickupPoint                        = 15,
	CrimeTargetType_GraffitiTarget                     = 16,
	CrimeTargetType_PropTarget                         = 17,
	CrimeTargetType_Max                                = 18
};*/

// Enum Engine.PhysicalMaterialSDD.etCrimeTargetZone
/*enum etCrimeTargetZone
{
	CrimeTargetZone_Vandalism                          = 0,
	CrimeTargetZone_Mugging                            = 1,
	CrimeTargetZone_VehicleTheft                       = 2,
	CrimeTargetZone_Assassination                      = 3,
	CrimeTargetZone_HitAndRun                          = 4,
	CrimeTargetZone_Max                                = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etCrimeType
/*enum etCrimeType
{
	CrimeType_Assault                                  = 0,
	CrimeType_Mugging                                  = 1,
	CrimeType_Kidnapping                               = 2,
	CrimeType_VehicleTheft                             = 3,
	CrimeType_HitAndRun                                = 4,
	CrimeType_Assassination                            = 5,
	CrimeType_RamRaid                                  = 6,
	CrimeType_Arson                                    = 7,
	CrimeType_PickUp                                   = 8,
	CrimeType_Vandalism                                = 9,
	CrimeType_Graffiti                                 = 10,
	CrimeType_TestAttackProp                           = 11,
	CrimeType_Max                                      = 12
};*/

// Enum Engine.PhysicalMaterialSDD.etCSA_IATState
/*enum etCSA_IATState
{
	CSA_IATState_None                                  = 0,
	CSA_IATState_AmmoDepot_Default                     = 1,
	CSA_IATState_AmmoShopFront_Default                 = 2,
	CSA_IATState_AmmoVendingMachine_Default            = 3,
	CSA_IATState_APBPawn_AmmoCarrierDeployed           = 4,
	CSA_IATState_APBPawn_Arrested                      = 5,
	CSA_IATState_APBPawn_Default                       = 6,
	CSA_IATState_APBPawn_Unconscious                   = 7,
	CSA_IATState_APBVehicle_ArsonTarget                = 8,
	CSA_IATState_APBVehicle_BombTarget                 = 9,
	CSA_IATState_APBVehicle_Default                    = 10,
	CSA_IATState_AudioDisplayPoint_Default             = 11,
	CSA_IATState_Contact_Default                       = 12,
	CSA_IATState_GraffitiCrimeTarget_Default           = 13,
	CSA_IATState_GrafittiDisplayPoint_Default          = 14,
	CSA_IATState_MailBox_Default                       = 15,
	CSA_IATState_NPC_NoUseAllowed                      = 16,
	CSA_IATState_NPC_OpenWorldTarget                   = 17,
	CSA_IATState_PlayerVehicleDisplayPoint_Default     = 18,
	CSA_IATState_PlayerVehicleSpawnZone_Default        = 19,
	CSA_IATState_Prop_ArsonTarget                      = 20,
	CSA_IATState_Prop_BombPlanted                      = 21,
	CSA_IATState_Prop_BombTarget                       = 22,
	CSA_IATState_Prop_BurglaryTarget                   = 23,
	CSA_IATState_Prop_CSITarget                        = 24,
	CSA_IATState_Prop_Default                          = 25,
	CSA_IATState_Prop_ForcedEntryTarget                = 26,
	CSA_IATState_Prop_HackingTarget                    = 27,
	CSA_IATState_Prop_OpenWorldTarget                  = 28,
	CSA_IATState_Prop_SabotageTarget                   = 29,
	CSA_IATState_RouteControlElement_Default           = 30,
	CSA_IATState_RouteControlElement_Door              = 31,
	CSA_IATState_RouteControlElement_Fence             = 32,
	CSA_IATState_RouteControlElement_Ladder            = 33,
	CSA_IATState_StatueDisplayPoint_Default            = 34,
	CSA_IATState_TaskItemPickup_DirectedMission        = 35,
	CSA_IATState_TaskItemPickup_OpenWorld              = 36,
	CSA_IATState_UIInteractionPoint_Default            = 37,
	CSA_IATState_MAX                                   = 38
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAAlignmentType
/*enum etCSAAlignmentType
{
	CSA_AT_None                                        = 0,
	CSA_AT_Rotate_ActorLocation                        = 1,
	CSA_AT_Rotate_ActorNormal                          = 2,
	CSA_AT_MAX                                         = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAAnimEvent
/*enum etCSAAnimEvent
{
	CSAAnimEvent_None                                  = 0,
	CSAAnimEvent_EndInteraction                        = 1,
	CSAAnimEvent_MAX                                   = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAAnimType
/*enum etCSAAnimType
{
	CSAAnimType_None                                   = 0,
	CSAAnimType_1Phase                                 = 1,
	CSAAnimType_1Phase_RCE                             = 2,
	CSAAnimType_1Phase_TaskItem                        = 3,
	CSAAnimType_3Phase                                 = 4,
	CSAAnimType_MAX                                    = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAAutoRouteType
/*enum etCSAAutoRouteType
{
	CSA_AutoRouteType_None                             = 0,
	CSA_AutoRouteType_Offset                           = 1,
	CSA_AutoRouteType_Socket                           = 2,
	CSA_AutoRouteType_MAX                              = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAEndPoint
/*enum etCSAEndPoint
{
	CSAEndPoint_None                                   = 0,
	CSAEndPoint_Outro_Cosmetic                         = 1,
	CSAEndPoint_Outro_Logical_AnimDuration             = 2,
	CSAEndPoint_Outro_Logical_AnimNotify               = 3,
	CSAEndPoint_Outro_Logical_Timed                    = 4,
	CSAEndPoint_MAX                                    = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAInputType
/*enum etCSAInputType
{
	CSA_InputType_None                                 = 0,
	CSA_InputType_PressAndHold                         = 1,
	CSA_InputType_Toggle                               = 2,
	CSA_InputType_MAX                                  = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etCSALineCheckType
/*enum etCSALineCheckType
{
	CSA_LCT_None                                       = 0,
	CSA_LCT_Blocking                                   = 1,
	CSA_LCT_Static                                     = 2,
	CSA_LCT_MAX                                        = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAState
/*enum etCSAState
{
	CSAState_None                                      = 0,
	CSAState_Cancel                                    = 1,
	CSAState_InProgress                                = 2,
	CSAState_Success                                   = 3,
	CSAState_MAX                                       = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etCSAType
/*enum etCSAType
{
	CSAType_None                                       = 0,
	CSAType_Action                                     = 1,
	CSAType_UseEquipment                               = 2,
	CSAType_Invoked                                    = 3,
	CSAType_Ammo                                       = 4,
	CSAType_MAX                                        = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etCustomisedAssetPriority
/*enum etCustomisedAssetPriority
{
	CAMPriority_SelfCharacter                          = 0,
	CAMPriority_SelfVehicle                            = 1,
	CAMPriority_Groupmate                              = 2,
	CAMPriority_Friend                                 = 3,
	CAMPriority_SameMission                            = 4,
	CAMPriority_Threat11                               = 5,
	CAMPriority_Threat13                               = 6,
	CAMPriority_SideMate                               = 7,
	CAMPriority_MAX                                    = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etDeployedUsableArray
/*enum etDeployedUsableArray
{
	DeployedUsableArray_None                           = 0,
	DeployedUsableArray_Character                      = 1,
	DeployedUsableArray_Vehicle                        = 2,
	DeployedUsableArray_MAX                            = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etDesignerConstant
/*enum etDesignerConstant
{
	DesignerConstant_AbandonedPlayerRewardMultiplier   = 0,
	DesignerConstant_AccelerationRate                  = 1,
	DesignerConstant_ActivityMessage_WinStreak_Threshold = 2,
	DesignerConstant_AirControl                        = 3,
	DesignerConstant_AllowGiftingUnlocks               = 4,
	DesignerConstant_AmmoCarrierRadiusPlayerDefault    = 5,
	DesignerConstant_AmmoCarrierRadiusVehicleDefault   = 6,
	DesignerConstant_AmmoStoredBoxesWarningLevel       = 7,
	DesignerConstant_ArrestStreakArrests               = 8,
	DesignerConstant_BailOutSpeed                      = 9,
	DesignerConstant_BountyHuntDeclineTimer            = 10,
	DesignerConstant_BountyHuntSuppressNotoriety       = 11,
	DesignerConstant_BountyHuntSuppressTimer           = 12,
	DesignerConstant_BountyHuntSuppressTimerUnopposed  = 13,
	DesignerConstant_CanAbandonOpposed                 = 14,
	DesignerConstant_CanAbandonUnopposed               = 15,
	DesignerConstant_CarSurfingAppySideForceTime       = 16,
	DesignerConstant_CarSurfingMinSpeed                = 17,
	DesignerConstant_CarSurfingStillApplicableTime     = 18,
	DesignerConstant_CarSurfingTeleportPlayerTime      = 19,
	DesignerConstant_CashGift                          = 20,
	DesignerConstant_ChatAFKCooldownTime               = 21,
	DesignerConstant_ChatAutomaticAFKIdleTime          = 22,
	DesignerConstant_ContactHailTimerReset             = 23,
	DesignerConstant_ContactInnerProximityRadius       = 24,
	DesignerConstant_ContactOuterProximityRadius       = 25,
	DesignerConstant_CrouchSpeed                       = 26,
	DesignerConstant_CrouchStaminaRechargeScalar       = 27,
	DesignerConstant_CSAHintIconDefaultMaxDistance     = 28,
	DesignerConstant_DelayBetweenBackupCalls           = 29,
	DesignerConstant_DisplayGammaMax                   = 30,
	DesignerConstant_DisplayGammaMin                   = 31,
	DesignerConstant_EscortDefaultVIPLives             = 32,
	DesignerConstant_FallDamageWaterScalar             = 33,
	DesignerConstant_FallDamgeScalar                   = 34,
	DesignerConstant_FallSpeedCauseDamage              = 35,
	DesignerConstant_FallStaminaScalar                 = 36,
	DesignerConstant_FallStaminaWaterScalar            = 37,
	DesignerConstant_FeeToRefurbishCustom              = 38,
	DesignerConstant_FeeToRefurbishPreset              = 39,
	DesignerConstant_FemaleCharacterHeightMax          = 40,
	DesignerConstant_FemaleCharacterHeightMin          = 41,
	DesignerConstant_FlailingSpeed                     = 42,
	DesignerConstant_GlobalUsableCooldownTimer         = 43,
	DesignerConstant_GM_MaxPlayerRunSpeed              = 44,
	DesignerConstant_GM_MinPlayerRunSpeed              = 45,
	DesignerConstant_GM_TeleportGMToPlayerDistance     = 46,
	DesignerConstant_GM_TeleportPlayerToGMDistance     = 47,
	DesignerConstant_GoneReadyMissionTimer             = 48,
	DesignerConstant_GrenadeSpeedThreshold             = 49,
	DesignerConstant_GroupMaxMembers                   = 50,
	DesignerConstant_Health                            = 51,
	DesignerConstant_HealthRechargeDuration            = 52,
	DesignerConstant_ItemSellbackAPBCash               = 53,
	DesignerConstant_ItemUnlockReplenishmentDayOffset  = 54,
	DesignerConstant_ItemUnlockReplenishmentHourOffset = 55,
	DesignerConstant_ItemUnlockReplenishmentTime       = 56,
	DesignerConstant_JumpStaminaDrain                  = 57,
	DesignerConstant_JumpZ                             = 58,
	DesignerConstant_KillFromBehindTolerance           = 59,
	DesignerConstant_KillStreakKills                   = 60,
	DesignerConstant_LeagueRewardDisplayPointValidFromDelay = 61,
	DesignerConstant_LeanLeftCrouchingAimOffset        = 62,
	DesignerConstant_LeanLeftStandingAimOffset         = 63,
	DesignerConstant_LeanRightCrouchingAimOffset       = 64,
	DesignerConstant_LeanRightStandingAimOffset        = 65,
	DesignerConstant_LoadingScreenHintChangeFrequency  = 66,
	DesignerConstant_LobbyMaxAllowedCharacters         = 67,
	DesignerConstant_MaleCharacterHeightMax            = 68,
	DesignerConstant_MaleCharacterHeightMin            = 69,
	DesignerConstant_MarksmanshipMouseSensitivityMax   = 70,
	DesignerConstant_MarksmanshipMouseSensitivityMin   = 71,
	DesignerConstant_MatchmakingGlobalOwningSideBias   = 72,
	DesignerConstant_MatchmakingMetaGroupAttempt       = 73,
	DesignerConstant_MatchmakingMetaGroupBias          = 74,
	DesignerConstant_MatchmakingMetaGroupPenalty       = 75,
	DesignerConstant_MatchmakingOvermatchedRatio       = 76,
	DesignerConstant_MatchmakingPerMemberConstant      = 77,
	DesignerConstant_MatchmakingPrevSideAttempt        = 78,
	DesignerConstant_MatchmakingPrevSidePenalty        = 79,
	DesignerConstant_MatchmakingSameFactionAttempt     = 80,
	DesignerConstant_MatchmakingSameFactionPenalty     = 81,
	DesignerConstant_MatchmakingSecondsPerAttempt      = 82,
	DesignerConstant_MatchmakingSideSizeMultiplier     = 83,
	DesignerConstant_MatchmakingThresholdDirectWitnessCrimOvermatched = 84,
	DesignerConstant_MatchmakingThresholdDirectWitnessEnfOvermatched = 85,
	DesignerConstant_MatchmakingThresholdMax           = 86,
	DesignerConstant_MatchmakingThresholdMaxAttempts   = 87,
	DesignerConstant_MatchmakingThresholdMin           = 88,
	DesignerConstant_MaxedContactMissionWeight         = 89,
	DesignerConstant_MaxFallSpeedScaleToDamage         = 90,
	DesignerConstant_MaxMissionDeclines                = 91,
	DesignerConstant_MinCSACacheTime                   = 92,
	DesignerConstant_MinThreatToOwnSoloMission         = 93,
	DesignerConstant_MissionDeclinePeriod              = 94,
	DesignerConstant_MissionDeclineTimerMax            = 95,
	DesignerConstant_MissionDefaultObjectiveTimeLimit  = 96,
	DesignerConstant_MissionDefaultTakeoutCount        = 97,
	DesignerConstant_MissionEscapeGracePeriod          = 98,
	DesignerConstant_MissionFeedback_Enabled           = 99,
	DesignerConstant_MissionFeedback_NumberOfMissionsBetweenFeedback = 100,
	DesignerConstant_MissionFeedback_TimeOutSec        = 101,
	DesignerConstant_MissionFirstTargetMaxRadius       = 102,
	DesignerConstant_MissionMinTakeoutsClearOnStartMultiplier = 103,
	DesignerConstant_MissionMinTakeoutsVIPMultiplier   = 104,
	DesignerConstant_MissionObstructedVehicleSpawnerDelay = 105,
	DesignerConstant_MissionOfferMinimumInterval       = 106,
	DesignerConstant_MissionPauseTimeMax               = 107,
	DesignerConstant_MissionPauseTimeMin               = 108,
	DesignerConstant_MissionPostCompletionDelay        = 109,
	DesignerConstant_MissionScoreBalanceMultiplier     = 110,
	DesignerConstant_MissionScoreDisplayResultsTime    = 111,
	DesignerConstant_MissionScoreLockedContactCashMultiplier = 112,
	DesignerConstant_MissionScoreLosePoints            = 113,
	DesignerConstant_MissionScoreMaxBalanceBonus       = 114,
	DesignerConstant_MissionScoreMaxMedalPoints        = 115,
	DesignerConstant_MissionScoreMinimum               = 116,
	DesignerConstant_MissionScoreUnopposedFailPoints   = 117,
	DesignerConstant_MissionScoreUnopposedSucceedPoints = 118,
	DesignerConstant_MissionScoreWinPoints             = 119,
	DesignerConstant_MissionTargetDamagedHUDMarkerBlinkDuration = 120,
	DesignerConstant_MissionTaskPropRespawnTime        = 121,
	DesignerConstant_MissionTaskVehicleDeathDuration   = 122,
	DesignerConstant_MissionVehicleSpawnFailTime       = 123,
	DesignerConstant_MissionWinStreakCount             = 124,
	DesignerConstant_MissionWrongMethodDamageScaler    = 125,
	DesignerConstant_MissionWrongMethodMaxDamage       = 126,
	DesignerConstant_ModifierSuperMagClipSizeForScaler = 127,
	DesignerConstant_ModifierSuperMagMinClipSize       = 128,
	DesignerConstant_MouseSensitivityMax               = 129,
	DesignerConstant_MouseSensitivityMin               = 130,
	DesignerConstant_MVP_ArrestedByEnforcerMultiplier  = 131,
	DesignerConstant_MVP_ArrestingCriminalsMultiplier  = 132,
	DesignerConstant_MVP_CompletedTargetsMultiplier    = 133,
	DesignerConstant_MVP_DeathsByEnemyMultiplier       = 134,
	DesignerConstant_MVP_DeathsByFriendlyMultiplier    = 135,
	DesignerConstant_MVP_DeathsBySuicidesMultiplier    = 136,
	DesignerConstant_MVP_FriendlyKillsMultiplier       = 137,
	DesignerConstant_MVP_FriendlyKillsReduction        = 138,
	DesignerConstant_MVP_HonorableKillAssistsMultiplier = 139,
	DesignerConstant_MVP_HonorableKillsMultiplier      = 140,
	DesignerConstant_MVP_MedalsNegativeMultiplier      = 141,
	DesignerConstant_MVP_MedalsPositiveMultiplier      = 142,
	DesignerConstant_NotReadyNagTimer_Initial          = 143,
	DesignerConstant_NotReadyNagTimer_Repeat           = 144,
	DesignerConstant_NPCHealth                         = 145,
	DesignerConstant_NPCHealthRechargeDelay            = 146,
	DesignerConstant_NPCHealthRechargeDuration         = 147,
	DesignerConstant_NPCViewingConeHorizontalAngle     = 148,
	DesignerConstant_NPCViewingConeVerticalAngle       = 149,
	DesignerConstant_OvermatchedCallForBackupDialogueTimeout = 150,
	DesignerConstant_PedestrianPanicMaxDuration        = 151,
	DesignerConstant_PedestrianPanicMinDuration        = 152,
	DesignerConstant_PedestrianTaskItemSpawnRadius     = 153,
	DesignerConstant_PlayerMaxStepHeight               = 154,
	DesignerConstant_PlayerVehicleDamageHigh           = 155,
	DesignerConstant_PlayerVehicleDamageSmall          = 156,
	DesignerConstant_PlayerVehicleSpawnDialogueTimeout = 157,
	DesignerConstant_PlayerVehicleSpawnMinInterval     = 158,
	DesignerConstant_ProgressionGovernanceMinRestHours = 159,
	DesignerConstant_ProgressionGovernancePreferredAdvancementInitial = 160,
	DesignerConstant_ProgressionGovernancePreferredAdvancementMax = 161,
	DesignerConstant_ProgressionGovernancePreferredAdvancementPerHour = 162,
	DesignerConstant_ProgressionGovernanceReducedRate  = 163,
	DesignerConstant_ProgressionGovernanceStandingPerHour = 164,
	DesignerConstant_PropMissionBlockedDamageInterval  = 165,
	DesignerConstant_PropMissionBlockedDamagePercentage = 166,
	DesignerConstant_RagdollImpulseScale               = 167,
	DesignerConstant_RagdollImpulseScale_NPC           = 168,
	DesignerConstant_RagdollSpeedThreshold             = 169,
	DesignerConstant_RatingModifier                    = 170,
	DesignerConstant_RatingRoleBias                    = 171,
	DesignerConstant_RBCollisionThreshold1             = 172,
	DesignerConstant_RBCollisionThreshold2             = 173,
	DesignerConstant_RoleUpdateInterval                = 174,
	DesignerConstant_RunSpeed                          = 175,
	DesignerConstant_ShieldHealth                      = 176,
	DesignerConstant_ShieldHealthRechargeDelay         = 177,
	DesignerConstant_ShieldHealthRechargeDuration      = 178,
	DesignerConstant_SprintSpeed                       = 179,
	DesignerConstant_SprintStaminaDrain                = 180,
	DesignerConstant_SprintTolerance                   = 181,
	DesignerConstant_Stamina                           = 182,
	DesignerConstant_StaminaBuffer                     = 183,
	DesignerConstant_StaminaRechargeDelay              = 184,
	DesignerConstant_StaminaRechargeDuration           = 185,
	DesignerConstant_StrafeFiringTime                  = 186,
	DesignerConstant_StrafeReloadingTime               = 187,
	DesignerConstant_TakeoutStreakTakeouts             = 188,
	DesignerConstant_TargetingAimLockBorder            = 189,
	DesignerConstant_TargetingHUDLockBorder            = 190,
	DesignerConstant_TargetingLeanOffset               = 191,
	DesignerConstant_TargetInVehicleDriverOffsetHorizontal = 192,
	DesignerConstant_TargetInVehicleDriverOffsetVertical = 193,
	DesignerConstant_Task_Time_RunningOutOfTime        = 194,
	DesignerConstant_TaskItemDropDistance              = 195,
	DesignerConstant_TaskTargetPVPLockPendingDuration  = 196,
	DesignerConstant_TaskTargetReallocationDelay       = 197,
	DesignerConstant_TaskTargetReallocationMaxDistance = 198,
	DesignerConstant_TaskTargetReallocationMinDistance = 199,
	DesignerConstant_ThreatLinearLevelMapping          = 200,
	DesignerConstant_ThreatNumLevels                   = 201,
	DesignerConstant_ThreatPointsForDraw               = 202,
	DesignerConstant_ThreatPointsForLose               = 203,
	DesignerConstant_ThreatPointsForWin                = 204,
	DesignerConstant_ThreatWindowPassband              = 205,
	DesignerConstant_ThreatWindowStopband              = 206,
	DesignerConstant_VCPRaycastClampSpeed              = 207,
	DesignerConstant_VehicleAbandonmentTime            = 208,
	DesignerConstant_VehicleAlarmCollisionTrigger      = 209,
	DesignerConstant_VehicleAlarmOffTime               = 210,
	DesignerConstant_VehicleAlarmOnTime                = 211,
	DesignerConstant_VehicleAlarmTimeOut               = 212,
	DesignerConstant_VehicleArsonDamageThreshold       = 213,
	DesignerConstant_VehicleCriticalMaxDuration        = 214,
	DesignerConstant_VehicleCriticalMinDuration        = 215,
	DesignerConstant_VehicleDeliveryCleanupDuration    = 216,
	DesignerConstant_VehicleDirtApplicationSpeed       = 217,
	DesignerConstant_VehicleDirtApplicationTime        = 218,
	DesignerConstant_VehicleDirtCleanSpeed             = 219,
	DesignerConstant_VehicleDirtCleanSpeedActive       = 220,
	DesignerConstant_VehicleDustApplicationTime        = 221,
	DesignerConstant_VehicleEnterDistantTooGreat       = 222,
	DesignerConstant_VehicleEnterNoMovementTimeOut     = 223,
	DesignerConstant_VehicleEnterSpeedHoldOnToDoor     = 224,
	DesignerConstant_VehicleEnterTimeout               = 225,
	DesignerConstant_VehicleHitDeathSpeed              = 226,
	DesignerConstant_VehicleHitNudgeAmount             = 227,
	DesignerConstant_VehicleLastDamageValidTime        = 228,
	DesignerConstant_VehicleMissionRecycleTime         = 229,
	DesignerConstant_VehicleNeutralDamageTime          = 230,
	DesignerConstant_VehiclePropCSAObstructionCleanupTime = 231,
	DesignerConstant_VehiclePropCSAObstructionDistance = 232,
	DesignerConstant_VehicleRepairDamageTimeout        = 233,
	DesignerConstant_VehicleSpawnFreeBaySearchRadius   = 234,
	DesignerConstant_VehicleTransientRecycleTime       = 235,
	DesignerConstant_VehicleUseDoorAllowableZDiff      = 236,
	DesignerConstant_VehicleUseDoorPitchAngle          = 237,
	DesignerConstant_VehicleUseDoorRayCastDepth        = 238,
	DesignerConstant_VehicleUseDoorRollAngle           = 239,
	DesignerConstant_VehicleUseTeleportDownDistance    = 240,
	DesignerConstant_VehicleUseTeleportUpDistance      = 241,
	DesignerConstant_VehicleUseVAPLeanLerpOffset       = 242,
	DesignerConstant_WalkSpeed                         = 243,
	DesignerConstant_WeaponAccuracyModifierGlobal      = 244,
	DesignerConstant_WeaponBenchmarkTargetRadius       = 245,
	DesignerConstant_WeaponGrenadeMaxAngleAdded        = 246,
	DesignerConstant_WeaponRangeHysteresis             = 247,
	DesignerConstant_WeaponReticulePickLength          = 248,
	DesignerConstant_WindedSpeed                       = 249,
	DesignerConstant_WindedTime                        = 250,
	DesignerConstant_MAX                               = 251
};*/

// Enum Engine.PhysicalMaterialSDD.etDifficultyRating
/*enum etDifficultyRating
{
	Difficulty_VeryEasy                                = 0,
	Difficulty_Easy                                    = 1,
	Difficulty_Medium                                  = 2,
	Difficulty_Hard                                    = 3,
	Difficulty_VeryHard                                = 4,
	Difficulty_MAX                                     = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etDirection
/*enum etDirection
{
	Direction_None                                     = 0,
	Direction_Left                                     = 1,
	Direction_Right                                    = 2,
	Direction_MAX                                      = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etDisplayPointActivationType
/*enum etDisplayPointActivationType
{
	DisplayPointActivationType_None                    = 0,
	DisplayPointActivationType_Free                    = 1,
	DisplayPointActivationType_Purchasable             = 2,
	DisplayPointActivationType_Winnable                = 3,
	DisplayPointActivationType_MAX                     = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etDisplayPointType
/*enum etDisplayPointType
{
	DisplayPointType_None                              = 0,
	DisplayPointType_Audio                             = 1,
	DisplayPointType_Graffiti                          = 2,
	DisplayPointType_Statue                            = 3,
	DisplayPointType_Vehicle                           = 4,
	DisplayPointType_MAX                               = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etDistrictFirstEntry
/*enum etDistrictFirstEntry
{
	DistrictFirstEntry_Standard                        = 0,
	DistrictFirstEntry_MAX                             = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etDistrictTypeInfo
/*enum etDistrictTypeInfo
{
	DistrictTypeInfo_None                              = 0,
	DistrictTypeInfo_Action                            = 1,
	DistrictTypeInfo_Social                            = 2,
	DistrictTypeInfo_Tutorial                          = 3,
	DistrictTypeInfo_MAX                               = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etEncumbrance
/*enum etEncumbrance
{
	Encumbrance_None                                   = 0,
	Encumbrance_Small_No_Crouch_Move                   = 1,
	Encumbrance_Small_No_Crouch                        = 2,
	Encumbrance_Small_No_Jump                          = 3,
	Encumbrance_Small_No_Crouch_Move_Or_Jump           = 4,
	Encumbrance_Small_No_Crouch_Or_Jump                = 5,
	Encumbrance_Medium                                 = 6,
	Encumbrance_Medium_No_Crouch_Move                  = 7,
	Encumbrance_Medium_No_Crouch                       = 8,
	Encumbrance_Medium_No_Jump                         = 9,
	Encumbrance_Medium_No_Crouch_Move_Or_Jump          = 10,
	Encumbrance_Medium_No_Crouch_Or_Jump               = 11,
	Encumbrance_Large                                  = 12,
	Encumbrance_Large_No_Crouch_Move                   = 13,
	Encumbrance_Large_No_Crouch                        = 14,
	Encumbrance_Large_No_Jump                          = 15,
	Encumbrance_Large_No_Crouch_Move_Or_Jump           = 16,
	Encumbrance_All                                    = 17,
	Encumbrance_Small_No_Sprint                        = 18,
	Encumbrance_MAX                                    = 19
};*/

// Enum Engine.PhysicalMaterialSDD.etErrorCode
/*enum etErrorCode
{
	ERROR_OK                                           = 0,
	ERROR_ASYNCHRONOUS                                 = 1,
	ERROR_ABANDON_TIMER_ACTIVE                         = 2,
	ERROR_ALREADY_HAS_MISSION                          = 3,
	ERROR_ALREADY_INTERACTING                          = 4,
	ERROR_AWAITING_REPLICATION                         = 5,
	ERROR_BAD_SDD_DATA                                 = 6,
	ERROR_CANT_EQUIP_ITEM_IN_VEHICLE                   = 7,
	ERROR_CANT_UNDEPLOY_ITEM_IN_VEHICLE                = 8,
	ERROR_CONTACT_LOCKED                               = 9,
	ERROR_CONTACT_NOT_MISSION_PROVIDER                 = 10,
	ERROR_CONTACT_NOT_TUTOR                            = 11,
	ERROR_CONTACT_NOT_FOUND_IN_LEVEL                   = 12,
	ERROR_CONTROLLER_HAS_NO_PAWN                       = 13,
	ERROR_CONTROLLER_HAS_NO_SCORER                     = 14,
	ERROR_COULD_NOT_DEPLOY_ITEM                        = 15,
	ERROR_DECLINE_TIMER_ACTIVE                         = 16,
	ERROR_FEE_TOO_SMALL                                = 17,
	ERROR_GROUP_TOO_LARGE                              = 18,
	ERROR_GROUP_TOO_SMALL                              = 19,
	ERROR_ILLEGAL_CATEGORY                             = 20,
	ERROR_INSIDE_VEHICLE                               = 21,
	ERROR_OUTSIDE_AMMO_ZONE                            = 22,
	ERROR_INSUFFICIENT_CASH                            = 23,
	ERROR_INSUFFICIENT_RTW_POINTS                      = 24,
	ERROR_INSUFFICIENT_MILESTONE                       = 25,
	ERROR_INSUFFICIENT_RATING                          = 26,
	ERROR_INSUFFICIENT_ROLE                            = 27,
	ERROR_INVALID_CONTACT                              = 28,
	ERROR_INVALID_CONTROLLER                           = 29,
	ERROR_INVALID_CREATOR                              = 30,
	ERROR_INVALID_DEPLOYMENT_SLOT                      = 31,
	ERROR_INVALID_DISPLAY_POINT_TYPE                   = 32,
	ERROR_INVALID_DISTRICT                             = 33,
	ERROR_INVALID_DURATION                             = 34,
	ERROR_INVALID_FACTION                              = 35,
	ERROR_INVALID_FNMOD                                = 36,
	ERROR_INVALID_FNMOD_SLOT                           = 37,
	ERROR_INVALID_FNMOD_SLOT_NOT_VACANT                = 38,
	ERROR_INVALID_FNMOD_TYPE                           = 39,
	ERROR_INVALID_INVENTORY_SLOT                       = 40,
	ERROR_INVALID_ITEM_NOT_CUSTOMISABLE                = 41,
	ERROR_INVALID_ITEM_TYPE                            = 42,
	ERROR_INVALID_LOCOMOTION_STATE                     = 43,
	ERROR_INVALID_METADATA_FILTER                      = 44,
	ERROR_INVALID_MISSION                              = 45,
	ERROR_INVALID_PARAM                                = 46,
	ERROR_INVALID_QUANTITY                             = 47,
	ERROR_INVALID_SEX                                  = 48,
	ERROR_INVALID_TIME_OF_DAY                          = 49,
	ERROR_INVENTORY_LOCKED_FROM_TRANSACTION            = 50,
	ERROR_DISALLOW_HEAT_LEVEL                          = 51,
	ERROR_INVALID_USABLE_SLOT                          = 52,
	ERROR_INVENTORY_TABLE_FULL                         = 53,
	ERROR_ITEM_DOESNT_NEED_REFURBISHED                 = 54,
	ERROR_ITEM_IS_DEPLOYED                             = 55,
	ERROR_ITEM_IS_STACKED                              = 56,
	ERROR_ITEM_IS_TIME_LIMITED                         = 57,
	ERROR_ITEM_NOT_ACTIVE                              = 58,
	ERROR_ITEM_NOT_AVAILABLE                           = 59,
	ERROR_ITEM_NOT_BOUND                               = 60,
	ERROR_ITEM_NOT_DEPLOYED                            = 61,
	ERROR_ITEM_NOT_FOR_SALE                            = 62,
	ERROR_ITEM_NOT_FOUND                               = 63,
	ERROR_ITEM_NOT_PAID_FOR                            = 64,
	ERROR_ITEM_NOT_TRADEABLE                           = 65,
	ERROR_ITEM_NOT_REMOVABLE                           = 66,
	ERROR_ITEM_NOT_UNLOCKED                            = 67,
	ERROR_LEADER_ABSENT                                = 68,
	ERROR_MISSION_ACTIVE                               = 69,
	ERROR_NOT_CLIENT_FUNCTION                          = 70,
	ERROR_NOT_HOSTED_MODE                              = 71,
	ERROR_NOT_LEADER                                   = 72,
	ERROR_NO_ITEMS_IN_PACKAGE                          = 73,
	ERROR_NO_PLEDGED_CONTACT                           = 74,
	ERROR_NO_VENDOR_CONTACT                            = 75,
	ERROR_PLAYER_DIDNT_CREATE_ITEM                     = 76,
	ERROR_SLOT_IN_USE                                  = 77,
	ERROR_STACKING_SLOT_UNAVAILABLE                    = 78,
	ERROR_STRING_TOO_LONG                              = 79,
	ERROR_TIME_TOO_EARLY                               = 80,
	ERROR_TIME_TOO_LATE                                = 81,
	ERROR_KNOWN_TRANSACTION_FAILURE                    = 82,
	ERROR_UNKNOWN_TRANSACTION_FAILURE                  = 83,
	ERROR_UNKNOWN_CATEGORY                             = 84,
	ERROR_UNKNOWN_COMMAND                              = 85,
	ERROR_UNKNOWN_DISPLAY_POINT                        = 86,
	ERROR_USABLE_ACTIVE                                = 87,
	ERROR_USABLE_INACTIVE                              = 88,
	ERROR_USABLE_AFFECTED_ITEM_NOT_DEPLOYED            = 89,
	ERROR_USABLE_FNMOD_UNAVAILABLE                     = 90,
	ERROR_USABLE_GLOBAL_COOLDOWN_TIMER_ACTIVE          = 91,
	ERROR_USABLE_REUSE_GROUP_MISSION_CHECK_FAILED      = 92,
	ERROR_USABLE_REUSE_GROUP_TIMER_ACTIVE              = 93,
	ERROR_XML_FAILURE                                  = 94,
	ERROR_LAST_UNDERWEAR                               = 95,
	ERROR_USABLE_PLAYER_IN_VEHICLE                     = 96,
	ERROR_MAX                                          = 97
};*/

// Enum Engine.PhysicalMaterialSDD.etFacialHairRandomGeneration
/*enum etFacialHairRandomGeneration
{
	FacialHairRandomGeneration_ChanceOfFacialHair      = 0,
	FacialHairRandomGeneration_ChanceOfBodilyHair      = 1,
	FacialHairRandomGeneration_MAX                     = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etFaction
/*enum etFaction
{
	kFACTION_None                                      = 0,
	kFACTION_Enforcer                                  = 1,
	kFACTION_Criminal                                  = 2,
	kFACTION_Both                                      = 3,
	kFACTION_MAX                                       = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etFeedbackMessage
/*enum etFeedbackMessage
{
	FeedbackQuestion_None                              = 0,
	FeedbackQuestion_Standard                          = 1,
	FeedbackQuestion_Special                           = 2,
	FeedbackQuestion_BalancedMatch                     = 3,
	FeedbackQuestion_NotReadyNag                       = 4,
	FeedbackQuestion_MAX                               = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etFireOffset
/*enum etFireOffset
{
	FireOffset_Normal                                  = 0,
	FireOffset_VehicleLeft                             = 1,
	FireOffset_VehicleRight                            = 2,
	FireOffset_Grenade                                 = 3,
	FireOffset_LeanTowardScreenCentre                  = 4,
	FireOffset_MAX                                     = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etFXMaterialImpact
/*enum etFXMaterialImpact
{
	FXMI_Default                                       = 0,
	FXMI_Concrete                                      = 1,
	FXMI_MetalVehicle                                  = 2,
	FXMI_Metal                                         = 3,
	FXMI_Flesh                                         = 4,
	FXMI_Wood                                          = 5,
	FXMI_Asphalt                                       = 6,
	FXMI_Brick                                         = 7,
	FXMI_Foliage                                       = 8,
	FXMI_Glass                                         = 9,
	FXMI_Stone                                         = 10,
	FXMI_Earth                                         = 11,
	FXMI_Cloth                                         = 12,
	FXMI_Water                                         = 13,
	FXMI_Sand                                          = 14,
	FXMI_ShallowWater                                  = 15,
	FXMI_MAX                                           = 16
};*/

// Enum Engine.PhysicalMaterialSDD.etGameplayEvent_VehicleHealth
/*enum etGameplayEvent_VehicleHealth
{
	DeliverVehicle_OpenWorld_Damaged                   = 0,
	DeliverVehicle_OpenWorld_Perfect                   = 1,
	DeliverVehicle_OpenWorld_MAX                       = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etGameplayEventCategory
/*enum etGameplayEventCategory
{
	GameplayEventCategory_None                         = 0,
	GameplayEventCategory_Abandon_Match                = 1,
	GameplayEventCategory_Abandon_Match_Fail           = 2,
	GameplayEventCategory_Ammo_FromLocker              = 3,
	GameplayEventCategory_AmmoZone_Begin               = 4,
	GameplayEventCategory_AmmoZone_BuySomeAmmo         = 5,
	GameplayEventCategory_AmmoZone_Deactivate          = 6,
	GameplayEventCategory_Arrest_Player                = 7,
	GameplayEventCategory_ArrestedBy_Enforcer          = 8,
	GameplayEventCategory_Attacked_InvulnerablePlayer  = 9,
	GameplayEventCategory_Become_Group_Leader          = 10,
	GameplayEventCategory_Become_Side_Leader           = 11,
	GameplayEventCategory_Become_Side_VIP              = 12,
	GameplayEventCategory_CallFor_Backup               = 13,
	GameplayEventCategory_Change_MissionOfferSettingFail = 14,
	GameplayEventCategory_Contact_Error                = 15,
	GameplayEventCategory_Contact_LevelUp              = 16,
	GameplayEventCategory_Contact_Pledge               = 17,
	GameplayEventCategory_Contact_Referal              = 18,
	GameplayEventCategory_CSA_Begin                    = 19,
	GameplayEventCategory_CSA_End                      = 20,
	GameplayEventCategory_CustomiseStats_Broker        = 21,
	GameplayEventCategory_CustomiseStats_FashionMogul  = 22,
	GameplayEventCategory_CustomiseStats_ImageDesign   = 23,
	GameplayEventCategory_CustomiseStats_Profiteer     = 24,
	GameplayEventCategory_CustomiseStats_WeaponSmith_FNModsApplied = 25,
	GameplayEventCategory_Damage_Pedestrian            = 26,
	GameplayEventCategory_Damage_Player                = 27,
	GameplayEventCategory_Damage_Prop                  = 28,
	GameplayEventCategory_Damage_Vehicle               = 29,
	GameplayEventCategory_Damaged_TaskTarget_ObstructionDamage = 30,
	GameplayEventCategory_Death1                       = 31,
	GameplayEventCategory_Death2                       = 32,
	GameplayEventCategory_DeliverItem_Checkpoint       = 33,
	GameplayEventCategory_DeliverItem_Mission          = 34,
	GameplayEventCategory_DeliverItem_OpenWorld        = 35,
	GameplayEventCategory_DeliverItem_OpenWorld_Fail   = 36,
	GameplayEventCategory_DeliverVehicle_Fail          = 37,
	GameplayEventCategory_DeliverVehicle_OpenWorld     = 38,
	GameplayEventCategory_DeployAmmoCarrier            = 39,
	GameplayEventCategory_Destroy_Prop                 = 40,
	GameplayEventCategory_Destroy_Vehicle              = 41,
	GameplayEventCategory_Dispatched                   = 42,
	GameplayEventCategory_Display_Graffiti_Fail        = 43,
	GameplayEventCategory_DisplayPoint_Taken           = 44,
	GameplayEventCategory_DistrictEnter                = 45,
	GameplayEventCategory_DistrictLeave                = 46,
	GameplayEventCategory_Drive_StolenVehicle          = 47,
	GameplayEventCategory_Earned_Medal                 = 48,
	GameplayEventCategory_Ended_ArrestStreak           = 49,
	GameplayEventCategory_Ended_KillStreak             = 50,
	GameplayEventCategory_Ended_Mission                = 51,
	GameplayEventCategory_Ended_Mission2               = 52,
	GameplayEventCategory_Ended_MissionType            = 53,
	GameplayEventCategory_Enter_Resupply_Zone          = 54,
	GameplayEventCategory_Fire_Weapon                  = 55,
	GameplayEventCategory_Health_Regenerated           = 56,
	GameplayEventCategory_Heat_ChangeLevel             = 57,
	GameplayEventCategory_Heat_PayOff                  = 58,
	GameplayEventCategory_Hijack_LCVehicle             = 59,
	GameplayEventCategory_Hotwire_Vehicle              = 60,
	GameplayEventCategory_Immunity_End                 = 61,
	GameplayEventCategory_Immunity_Start               = 62,
	GameplayEventCategory_ItemOperation_Fail           = 63,
	GameplayEventCategory_JoinGroup_LeaderInDifferentMission = 64,
	GameplayEventCategory_JoinGroup_PledgedToLockedContact = 65,
	GameplayEventCategory_Kill_DriverAssist            = 66,
	GameplayEventCategory_Kill_EnemyTeamAnnihilation   = 67,
	GameplayEventCategory_Kill_FromBehind              = 68,
	GameplayEventCategory_Kill_Group_LeaningOutOfVehicle = 69,
	GameplayEventCategory_Kill_GroupInVehicle          = 70,
	GameplayEventCategory_Kill_Pedestrian              = 71,
	GameplayEventCategory_Kill_Player                  = 72,
	GameplayEventCategory_Kill_Player_InVehicleWithGrenade = 73,
	GameplayEventCategory_Kill_Player_LeaningOutOfVehicle = 74,
	GameplayEventCategory_Kill_Player_Task_Target      = 75,
	GameplayEventCategory_Kill_WhileDriving            = 76,
	GameplayEventCategory_KillAssist_Player            = 77,
	GameplayEventCategory_KillStats_AgainstTaskItemCarriers = 78,
	GameplayEventCategory_Knocked_Out                  = 79,
	GameplayEventCategory_Knocked_Player_Out           = 80,
	GameplayEventCategory_LocationBeacon_Enter         = 81,
	GameplayEventCategory_MailBox_Begin                = 82,
	GameplayEventCategory_Mission_AwardMVP             = 83,
	GameplayEventCategory_Mission_BackupGroupArrived   = 84,
	GameplayEventCategory_Mission_BackupPlayerArrived  = 85,
	GameplayEventCategory_Mission_CashPaid             = 86,
	GameplayEventCategory_Mission_DispatchedVsGroup    = 87,
	GameplayEventCategory_Mission_DispatchedVsPlayer   = 88,
	GameplayEventCategory_Mission_Offer                = 89,
	GameplayEventCategory_Mission_OppositionGroupAdded = 90,
	GameplayEventCategory_Mission_OppositionGroupAssigned = 91,
	GameplayEventCategory_Mission_OppositionPlayerAdded = 92,
	GameplayEventCategory_Mission_OppositionPlayerAssigned = 93,
	GameplayEventCategory_Mission_OppositionPlayerRemoved = 94,
	GameplayEventCategory_Mission_OwnerGroupAdded      = 95,
	GameplayEventCategory_Mission_OwnerPlayerAdded     = 96,
	GameplayEventCategory_Mission_OwnerPlayerRemoved   = 97,
	GameplayEventCategory_Mission_Stage                = 98,
	GameplayEventCategory_Mission_TaskTargetCompleted  = 99,
	GameplayEventCategory_ModeTimer                    = 100,
	GameplayEventCategory_Mug_Pedestrian               = 101,
	GameplayEventCategory_NotReadyNagMessage           = 102,
	GameplayEventCategory_On_ArrestStreak              = 103,
	GameplayEventCategory_On_KillStreak                = 104,
	GameplayEventCategory_On_TakeoutStreak             = 105,
	GameplayEventCategory_OpenWorldItem_Spawned        = 106,
	GameplayEventCategory_Organisation_LevelUp         = 107,
	GameplayEventCategory_OutOf_Bullets                = 108,
	GameplayEventCategory_OutOf_Grenades               = 109,
	GameplayEventCategory_OutOf_Projectiles            = 110,
	GameplayEventCategory_Passenger_StolenVehicle      = 111,
	GameplayEventCategory_PlayerTaskTargetProtected    = 112,
	GameplayEventCategory_RamRaidOrBust_OpenWorld      = 113,
	GameplayEventCategory_ReadyStateChanged_Group      = 114,
	GameplayEventCategory_ReadyStateChanged_Leader     = 115,
	GameplayEventCategory_ReadyStateChanged_Player     = 116,
	GameplayEventCategory_Receive_CashOnly_Reward      = 117,
	GameplayEventCategory_Receive_Damage               = 118,
	GameplayEventCategory_Receive_Organisation_Reward  = 119,
	GameplayEventCategory_RemovedFromGroup             = 120,
	GameplayEventCategory_Rescue_Arrested_Player       = 121,
	GameplayEventCategory_Rescued_By_Player            = 122,
	GameplayEventCategory_Resupplied_Ammo_To_Player    = 123,
	GameplayEventCategory_Resupplied_AmmoClips         = 124,
	GameplayEventCategory_Resupply_Fail                = 125,
	GameplayEventCategory_Reward_NewMail               = 126,
	GameplayEventCategory_Reward_RandomRewardGained    = 127,
	GameplayEventCategory_RewardPackage_ConsumptionError = 128,
	GameplayEventCategory_Role_LevelUp                 = 129,
	GameplayEventCategory_Song_Produced                = 130,
	GameplayEventCategory_SpawnPlayer                  = 131,
	GameplayEventCategory_SprintedDistance             = 132,
	GameplayEventCategory_Start_Mission                = 133,
	GameplayEventCategory_StolenItem                   = 134,
	GameplayEventCategory_StreetVolume_Enter           = 135,
	GameplayEventCategory_Task_Item_Delivered          = 136,
	GameplayEventCategory_Task_Time_OneMinuteRemaining = 137,
	GameplayEventCategory_TaskItem_Spawned             = 138,
	GameplayEventCategory_TestFire_Weapon              = 139,
	GameplayEventCategory_Threat_Changed               = 140,
	GameplayEventCategory_Vehicle_BeginRepair          = 141,
	GameplayEventCategory_Vehicle_BrokenInto           = 142,
	GameplayEventCategory_Vehicle_Cargo_Full           = 143,
	GameplayEventCategory_Vehicle_Critical             = 144,
	GameplayEventCategory_Vehicle_EndRepair            = 145,
	GameplayEventCategory_Vehicle_EnterFail            = 146,
	GameplayEventCategory_Vehicle_ReceiveDamage        = 147,
	GameplayEventCategory_Vehicle_SpawnFail            = 148,
	GameplayEventCategory_Vehicle_SpawnSuccess         = 149,
	GameplayEventCategory_WinStreak_Mission            = 150,
	GameplayEventCategory_Witness_Crime                = 151,
	GameplayEventCategory_WitnessedBy_Enforcer         = 152,
	GameplayEventCategory_WitnessedBy_NPC              = 153,
	GameplayEventCategory_Won_Match                    = 154,
	GameplayEventCategory_MAX                          = 155
};*/

// Enum Engine.PhysicalMaterialSDD.etGameplayEventMutuallyExclusiveGroup
/*enum etGameplayEventMutuallyExclusiveGroup
{
	GameplayEventMutuallyExclusiveGroup_NotExclusive   = 0,
	GameplayEventMutuallyExclusiveGroup                = 1,
	GameplayEventMutuallyExclusiveGroup01              = 2,
	GameplayEventMutuallyExclusiveGroup02              = 3,
	GameplayEventMutuallyExclusiveGroup03              = 4,
	GameplayEventMutuallyExclusiveGroup04              = 5,
	GameplayEventMutuallyExclusiveGroup05              = 6,
	GameplayEventMutuallyExclusiveGroup06              = 7,
	GameplayEventMutuallyExclusiveGroup07              = 8,
	GameplayEventMutuallyExclusiveGroup08              = 9,
	GameplayEventMutuallyExclusiveGroup09              = 10,
	GameplayEventMutuallyExclusiveGroup10              = 11,
	GameplayEventMutuallyExclusiveGroup11              = 12,
	GameplayEventMutuallyExclusiveGroup12              = 13,
	GameplayEventMutuallyExclusiveGroup13              = 14,
	GameplayEventMutuallyExclusiveGroup14              = 15,
	GameplayEventMutuallyExclusiveGroup_MAX            = 16
};*/

// Enum Engine.PhysicalMaterialSDD.etGameplayObjectFixed
/*enum etGameplayObjectFixed
{
	GameplayObjectFixed_None                           = 0,
	GameplayObjectFixed_Checkpoint_Misc                = 1,
	GameplayObjectFixed_Pedestrian_LivingCity          = 2,
	GameplayObjectFixed_PlayerCharacter_Criminal       = 3,
	GameplayObjectFixed_PlayerCharacter_Enforcer       = 4,
	GameplayObjectFixed_Prop_Misc                      = 5,
	GameplayObjectFixed_TaskItem_OpenWorld             = 6,
	GameplayObjectFixed_Vehicle_Misc                   = 7,
	GameplayObjectFixed_MAX                            = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etGameplayState
/*enum etGameplayState
{
	GameplayState_None                                 = 0,
	GameplayState_Player                               = 1,
	GameplayState_Player_Arrested                      = 2,
	GameplayState_Player_Driving                       = 3,
	GameplayState_Player_VCP                           = 4,
	GameplayState_Player_VIP                           = 5,
	GameplayState_Vehicle_Free_PlayerControlled        = 6,
	GameplayState_Vehicle_Free_Unoccupied              = 7,
	GameplayState_Vehicle_LivingCity_Abandoned         = 8,
	GameplayState_Vehicle_LivingCity_AIControlled      = 9,
	GameplayState_Vehicle_LivingCity_PlayerControlled  = 10,
	GameplayState_Vehicle_Other                        = 11,
	GameplayState_Vehicle_PlayerDeployed               = 12,
	GameplayState_Vehicle_TaskTarget_PlayerControlled  = 13,
	GameplayState_Vehicle_TaskTarget_Unoccupied        = 14,
	GameplayState_MAX                                  = 15
};*/

// Enum Engine.PhysicalMaterialSDD.etGameplayVehicleHealthRange
/*enum etGameplayVehicleHealthRange
{
	Pristine                                           = 0,
	Damaged                                            = 1,
	etGameplayVehicleHealthRange_MAX                   = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etGenericVFXEvent
/*enum etGenericVFXEvent
{
	VFXEventGroup_None                                 = 0,
	VFXEventGroup_Character                            = 1,
	VFXEventGroup_Vehicle                              = 2,
	VFXEventGroup_MAX                                  = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etGraffitiInteractionType
/*enum etGraffitiInteractionType
{
	GraffitiInteractionType_Default                    = 0,
	GraffitiInteractionType_TargetedClose              = 1,
	GraffitiInteractionType_TargetedDistant            = 2,
	GraffitiInteractionType_MAX                        = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etH2HAttackDir
/*enum etH2HAttackDir
{
	Clockwise                                          = 0,
	CounterClockwise                                   = 1,
	etH2HAttackDir_MAX                                 = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etHeatConstant
/*enum etHeatConstant
{
	HeatConstant_DecayDelay                            = 0,
	HeatConstant_DecayInterval                         = 1,
	HeatConstant_DecayRate                             = 2,
	HeatConstant_EquilibriumAmount                     = 3,
	HeatConstant_HeatAmountMax                         = 4,
	HeatConstant_PayForHeatPrice                       = 5,
	HeatConstant_UnDecayDelay                          = 6,
	HeatConstant_UnDecayInterval                       = 7,
	HeatConstant_UnDecayRate                           = 8,
	HeatConstant_MAX                                   = 9
};*/

// Enum Engine.PhysicalMaterialSDD.etHeatFunctionality
/*enum etHeatFunctionality
{
	RulesetHeat_Off                                    = 0,
	RulesetHeat_NoPvPUnlockToAllOpposingFaction        = 1,
	RulesetHeat_Full                                   = 2,
	RulesetHeat_MAX                                    = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etHostingConfigFile
/*enum etHostingConfigFile
{
	HostingConfigFile_Account                          = 0,
	HostingConfigFile_TutorialSettings                 = 1,
	HostingConfigFile_Account3                         = 2,
	HostingConfigFile_Account4                         = 3,
	HostingConfigFile_Account5                         = 4,
	HostingConfigFile_AccountTutorialSettings          = 5,
	HostingConfigFile_AccountPersistentUI              = 6,
	HostingConfigFile_AccountPersistent3               = 7,
	HostingConfigFile_AccountPersistent4               = 8,
	HostingConfigFile_AccountPersistent5               = 9,
	HostingConfigFile_CharacterMisc                    = 10,
	HostingConfigFile_Character4                       = 11,
	HostingConfigFile_Character5                       = 12,
	HostingConfigFile_CharacterPersistent1             = 13,
	HostingConfigFile_CharacterPersistent2             = 14,
	HostingConfigFile_CharacterPersistent3             = 15,
	HostingConfigFile_CharacterPersistent4             = 16,
	HostingConfigFile_CharacterPersistent5             = 17,
	HostingConfigFile_InputBindings                    = 18,
	HostingConfigFile_UserOptions                      = 19,
	HostingConfigFile_MAX                              = 20
};*/

// Enum Engine.PhysicalMaterialSDD.etHostingConfigFileAccountPersistentId
/*enum etHostingConfigFileAccountPersistentId
{
	kConfigAccountPersistentNone                       = 0,
	kConfigAccountPersistent1                          = 1,
	kConfigAccountPersistent2                          = 2,
	kConfigAccountPersistent3                          = 3,
	kConfigAccountPersistent4                          = 4,
	kConfigAccountPersistent5                          = 5,
	etHostingConfigFileAccountPersistentId_MAX         = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etHostingConfigFileCharacterPersistentId
/*enum etHostingConfigFileCharacterPersistentId
{
	kConfigCharacterPersistentNone                     = 0,
	kConfigCharacterPersistent1                        = 1,
	kConfigCharacterPersistent2                        = 2,
	kConfigCharacterPersistent3                        = 3,
	kConfigCharacterPersistent4                        = 4,
	kConfigCharacterPersistent5                        = 5,
	etHostingConfigFileCharacterPersistentId_MAX       = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etHostingConfigFileType
/*enum etHostingConfigFileType
{
	kHostingConfigFileType_Account                     = 0,
	kHostingConfigFileType_Character                   = 1,
	kHostingConfigFileType_MAX                         = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDCeremonyMsgType
/*enum etHUDCeremonyMsgType
{
	HUDCeremonyMsgType_None                            = 0,
	HUDCeremonyMsgType_Contact                         = 1,
	HUDCeremonyMsgType_Heat                            = 2,
	HUDCeremonyMsgType_League                          = 3,
	HUDCeremonyMsgType_Medal                           = 4,
	HUDCeremonyMsgType_Organisation                    = 5,
	HUDCeremonyMsgType_Role                            = 6,
	HUDCeremonyMsgType_Threat                          = 7,
	HUDCeremonyMsgType_MAX                             = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDConstant
/*enum etHUDConstant
{
	HUDConstant_ActionMessage_FadeOutTime              = 0,
	HUDConstant_ActionMessage_MaxDisplayedMessages     = 1,
	HUDConstant_ActionMessage_OpaqueDisplayTime        = 2,
	HUDConstant_Ammo_MaxQuantity                       = 3,
	HUDConstant_Ammo_MinQuantity                       = 4,
	HUDConstant_Chat_MaxTabNum                         = 5,
	HUDConstant_ChatNotification_DisplayTime           = 6,
	HUDConstant_ChatNotification_UpdateMessageDelay    = 7,
	HUDConstant_CrimeList_BarDuration                  = 8,
	HUDConstant_DistrictMap_MouseOverSizeModifier      = 9,
	HUDConstant_DistrictMessage_MaxMessages            = 10,
	HUDConstant_Heat_FlashDuration                     = 11,
	HUDConstant_Heat_FlashTriggerAmount                = 12,
	HUDConstant_Heat_RateOfChangePerSecond             = 13,
	HUDConstant_Hit_BloodFadeTime                      = 14,
	HUDConstant_Hit_DamageMax                          = 15,
	HUDConstant_Hit_DamageMin                          = 16,
	HUDConstant_Hit_NumIndicators                      = 17,
	HUDConstant_Hit_ThicknessMax                       = 18,
	HUDConstant_Hit_ThicknessMin                       = 19,
	HUDConstant_Hit_TimeMax                            = 20,
	HUDConstant_Hit_TimeMin                            = 21,
	HUDConstant_HUDMarker_ArrowDrawDistance            = 22,
	HUDConstant_HUDMarker_FlashRate                    = 23,
	HUDConstant_HUDMessage_SpawnHideTime               = 24,
	HUDConstant_InfoBrowser_DistanceThreshold          = 25,
	HUDConstant_Lobby_GametimeLowWarning               = 26,
	HUDConstant_Locale_HudMsgSupressTime               = 27,
	HUDConstant_Locale_PlayerHeight                    = 28,
	HUDConstant_Locale_PlayerRadius                    = 29,
	HUDConstant_LowHealth_Begin                        = 30,
	HUDConstant_LowHealth_End                          = 31,
	HUDConstant_LowHealth_MaxOpacity                   = 32,
	HUDConstant_LowHealth_Power                        = 33,
	HUDConstant_LowHealthAndStamina_Blur               = 34,
	HUDConstant_LowStamina_Begin                       = 35,
	HUDConstant_LowStamina_End                         = 36,
	HUDConstant_LowStamina_MaxOpacity                  = 37,
	HUDConstant_LowStamina_Power                       = 38,
	HUDConstant_Mail_OpacityRateOfChange               = 39,
	HUDConstant_MeshViewer_NightLevel                  = 40,
	HUDConstant_MeshViewer_TimeOfDay                   = 41,
	HUDConstant_MissionTimeLimit_AudioThreashold_Seconds = 42,
	HUDConstant_MissionTimeLimit_BonusDisplayTime      = 43,
	HUDConstant_MissionTimeLimit_ChangeDisplayTime     = 44,
	HUDConstant_MissionValue_ChangeDisplayTime         = 45,
	HUDConstant_MusicInfo_ShowDelay                    = 46,
	HUDConstant_MusicInfo_UpdateDelay                  = 47,
	HUDConstant_Radar_ContourDistance                  = 48,
	HUDConstant_RadarRadius_InVehicle                  = 49,
	HUDConstant_RadarRadius_Min                        = 50,
	HUDConstant_RadarRadius_OnFoot                     = 51,
	HUDConstant_Reticule_RateOfChange                  = 52,
	HUDConstant_Standing_RateOfChange                  = 53,
	HUDConstant_TaskMarker_BufferX                     = 54,
	HUDConstant_TaskMarker_BufferY                     = 55,
	HUDConstant_TaskMarker_DistanceMax                 = 56,
	HUDConstant_TaskMarker_DistanceMin                 = 57,
	HUDConstant_TaskMarker_Ellipse_ScreenHeightPercentage = 58,
	HUDConstant_TaskMarker_Ellipse_ScreenWidthPercentage = 59,
	HUDConstant_TaskMarker_OpacityMax                  = 60,
	HUDConstant_TaskMarker_OpacityRateOfChange         = 61,
	HUDConstant_TaskMarker_OverlapOpacity              = 62,
	HUDConstant_TaskMarker_ProjectionPadding           = 63,
	HUDConstant_TaskMarker_ScreenSize                  = 64,
	HUDConstant_TutorialDistrictExitPromptDelay        = 65,
	HUDConstant_Tutorials_ReticuleTime                 = 66,
	HUDConstant_VOIP_Active_LowMax                     = 67,
	HUDConstant_VOIP_Active_MediumMax                  = 68,
	HUDConstant_Waypoints_MaxNumGroup                  = 69,
	HUDConstant_Waypoints_MaxNumPersonal               = 70,
	HUDConstant_WeaponInfo_DeltaOpacity                = 71,
	HUDConstant_WeaponInfo_InCarNoEquipOpacity         = 72,
	HUDConstant_WeaponInfo_InCarOpacity                = 73,
	HUDConstant_WSCI_DefaultMarkerSize                 = 74,
	HUDConstant_WSCI_FadeDistance                      = 75,
	HUDConstant_WSCI_MaxOpacity                        = 76,
	HUDConstant_WSCI_MaxScale                          = 77,
	HUDConstant_WSCI_MinScale                          = 78,
	HUDConstant_WSCI_OffsetZ                           = 79,
	HUDConstant_WSCI_OpacityRateOfChange               = 80,
	HUDConstant_WSCI_OverlapOpacity1                   = 81,
	HUDConstant_WSCI_OverlapOpacity2                   = 82,
	HUDConstant_ZoneNotifier_FlashRate                 = 83,
	HUDConstant_ZoneNotifier_SphereTestRadius          = 84,
	HUDConstant_MAX                                    = 85
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDConstantBool
/*enum etHUDConstantBool
{
	HUDConstantBool_CharacterMarkers_ShowCarPassengers = 0,
	HUDConstantBool_CharacterMarkers_ShowThreat        = 1,
	HUDConstantBool_Radar_FullModeOnly                 = 2,
	HUDConstantBool_Radar_ShowContours                 = 3,
	HUDConstantBool_Radar_ShowMap                      = 4,
	HUDConstantBool_Radar_ZoomEnabled                  = 5,
	HUDConstantBool_Reticule_ShowBlockedLineOfSight    = 6,
	HUDConstantBool_ScoreboardOn                       = 7,
	HUDConstantBool_TargetInfo_On                      = 8,
	HUDConstantBool_TaskMarkers_OnEdge_Distance        = 9,
	HUDConstantBool_TaskMarkers_OnEdge_ID              = 10,
	HUDConstantBool_TaskMarkers_OnEdge_Objective       = 11,
	HUDConstantBool_TaskMarkers_OnEdge_Text            = 12,
	HUDConstantBool_MAX                                = 13
};*/

// Enum Engine.PhysicalMaterialSDD.etHudGroupState
/*enum etHudGroupState
{
	HTS_Solo_Ready                                     = 0,
	HTS_Solo_NotReady                                  = 1,
	HTS_Group_Ready                                    = 2,
	HTS_Group_NotReady                                 = 3,
	HTS_Group_Waiting                                  = 4,
	HTS_OnMission                                      = 5,
	HTS_MAX                                            = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDInfoBrowser
/*enum etHUDInfoBrowser
{
	InfoBrowser_None                                   = 0,
	InfoBrowser_Character                              = 1,
	InfoBrowser_Contact                                = 2,
	InfoBrowser_DisplayPoint                           = 3,
	InfoBrowser_OpenWorld                              = 4,
	InfoBrowser_RouteControl                           = 5,
	InfoBrowser_Vehicle                                = 6,
	InfoBrowser_Vending                                = 7,
	InfoBrowser_MAX                                    = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDMarkerCategory
/*enum etHUDMarkerCategory
{
	HUDMarkerCategory_None                             = 0,
	HUDMarkerCategory_RouteControl                     = 1,
	HUDMarkerCategory_HiddenDuringTask                 = 2,
	HUDMarkerCategory_VehiclePosition                  = 3,
	HUDMarkerCategory_VehicleSpawnBay                  = 4,
	HUDMarkerCategory_AmmoSupplyZone                   = 5,
	HUDMarkerCategory_GroupPlayer                      = 6,
	HUDMarkerCategory_OppositionPlayer                 = 7,
	HUDMarkerCategory_Vehicle                          = 8,
	HUDMarkerCategory_Task                             = 9,
	HUDMarkerCategory_SpawnZone                        = 10,
	HUDMarkerCategory_VehicleSpawnZone                 = 11,
	HUDMarkerCategory_VehicleRepairZone                = 12,
	HUDMarkerCategory_CustomisationZone                = 13,
	HUDMarkerCategory_MusicZone                        = 14,
	HUDMarkerCategory_MarketplaceZone                  = 15,
	HUDMarkerCategory_GMPlayer                         = 16,
	HUDMarkerCategory_DisplayPoint                     = 17,
	HUDMarkerCategory_Waypoint                         = 18,
	HUDMarkerCategory_OpenWorldDropOff                 = 19,
	HUDMarkerCategory_Fame                             = 20,
	HUDMarkerCategory_Misc                             = 21,
	HUDMarkerCategory_MAX                              = 22
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDMarkerState
/*enum etHUDMarkerState
{
	HUDMarkerState_Active                              = 0,
	HUDMarkerState_Flashing                            = 1,
	HUDMarkerState_Greyed                              = 2,
	HUDMarkerState_Inactive                            = 3,
	HUDMarkerState_Ping_Crouched_Moving                = 4,
	HUDMarkerState_Ping_Crouched_Static                = 5,
	HUDMarkerState_Ping_FireDefault                    = 6,
	HUDMarkerState_Ping_Marksmanship                   = 7,
	HUDMarkerState_Ping_Running                        = 8,
	HUDMarkerState_Ping_Sprinting                      = 9,
	HUDMarkerState_Ping_Static                         = 10,
	HUDMarkerState_Ping_Vehicle_Moving                 = 11,
	HUDMarkerState_Ping_Vehicle_Static                 = 12,
	HUDMarkerState_Ping_Walking                        = 13,
	HUDMarkerState_Task_Neutral                        = 14,
	HUDMarkerState_Task_OppositionAttack               = 15,
	HUDMarkerState_Task_OppositionDefend               = 16,
	HUDMarkerState_Task_OwnerAttack                    = 17,
	HUDMarkerState_Task_OwnerDefend                    = 18,
	HUDMarkerState_MAX                                 = 19
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDMarkerUsage
/*enum etHUDMarkerUsage
{
	HUDMarkerUsage_MiniMap                             = 0,
	HUDMarkerUsage_SpawnSelect                         = 1,
	HUDMarkerUsage_All                                 = 2,
	HUDMarkerUsage_MAX                                 = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDMessageRank
/*enum etHUDMessageRank
{
	HUDMessagePriority_Low                             = 0,
	HUDMessagePriority_Medium                          = 1,
	HUDMessagePriority_High                            = 2,
	HUDMessagePriority_Tutorial                        = 3,
	HUDMessagePriority_Instant                         = 4,
	HUDMessagePriority_MAX                             = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDMessageType
/*enum etHUDMessageType
{
	HUDMessageType_Standard                            = 0,
	HUDMessageType_Locale                              = 1,
	HUDMessageType_Action                              = 2,
	HUDMessageType_Scoreboard                          = 3,
	HUDMessageType_Chat                                = 4,
	HUDMessageType_MAX                                 = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDPopUpItemRule
/*enum etHUDPopUpItemRule
{
	HUDPopUpItemRule_Disabled                          = 0,
	HUDPopUpItemRule_Enabled                           = 1,
	HUDPopUpItemRule_InMission                         = 2,
	HUDPopUpItemRule_NotInMission                      = 3,
	HUDPopUpItemRule_InCustomisation                   = 4,
	HUDPopUpItemRule_InSocialDistrict                  = 5,
	HUDPopUpItemRule_InActionDistrict                  = 6,
	HUDPopUpItemRule_CanUnpledgeFromContact            = 7,
	HUDPopUpItemRule_InAmmoResupplyZone                = 8,
	HUDPopUpItemRule_CanOpenScoreboard                 = 9,
	HUDPopUpItemRule_LFGEnabled                        = 10,
	HUDPopUpItemRule_LFGDisabled                       = 11,
	HUDPopUpItemRule_MAX                               = 12
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDReticule
/*enum etHUDReticule
{
	Reticule_Explosive                                 = 0,
	Reticule_Ranged                                    = 1,
	Reticule_Unarmed                                   = 2,
	Reticule_Vehicle                                   = 3,
	Reticule_MAX                                       = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDWSCharInfo
/*enum etHUDWSCharInfo
{
	HUDWSCharInfo_None                                 = 0,
	HUDWSCharInfo_Player_MaxHeat                       = 1,
	HUDWSCharInfo_Player_MissionFriendly               = 2,
	HUDWSCharInfo_Player_MissionOpposition             = 3,
	HUDWSCharInfo_Player_NeutralFriendly               = 4,
	HUDWSCharInfo_Player_NeutralOpposition             = 5,
	HUDWSCharInfo_MAX                                  = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etHUDZoneNotifier
/*enum etHUDZoneNotifier
{
	HUDZoneNotifier_None                               = 0,
	HUDZoneNotifier_Customisation                      = 1,
	HUDZoneNotifier_Marketplace                        = 2,
	HUDZoneNotifier_Supply                             = 3,
	HUDZoneNotifier_VehicleRepair                      = 4,
	HUDZoneNotifier_VehicleSpawn                       = 5,
	HUDZoneNotifier_MAX                                = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etInteractiveActorCategory
/*enum etInteractiveActorCategory
{
	InteractiveActorCategory_None                      = 0,
	InteractiveActorCategory_PedestrianCharacter       = 1,
	InteractiveActorCategory_PlayerCharacter           = 2,
	InteractiveActorCategory_Vehicle                   = 3,
	InteractiveActorCategory_Prop                      = 4,
	InteractiveActorCategory_StaticActor               = 5,
	InteractiveActorCategory_TriggerVolume             = 6,
	InteractiveActorCategory_MAX                       = 7
};*/

// Enum Engine.PhysicalMaterialSDD.etInteractiveActorType
/*enum etInteractiveActorType
{
	InteractiveActorType_None                          = 0,
	InteractiveActorType_APBPawn                       = 1,
	InteractiveActorType_GrafittiDisplayPoint          = 2,
	InteractiveActorType_TaskItemPickup                = 3,
	InteractiveActorType_RouteControlElement           = 4,
	InteractiveActorType_Contact                       = 5,
	InteractiveActorType_AudioDisplayPoint             = 6,
	InteractiveActorType_PlayerVehicleSpawnZone        = 7,
	InteractiveActorType_AmmoDepot                     = 8,
	InteractiveActorType_AmmoCarrier                   = 9,
	InteractiveActorType_StatueDisplayPoint            = 10,
	InteractiveActorType_MailBox                       = 11,
	InteractiveActorType_APBVehicle                    = 12,
	InteractiveActorType_NPC                           = 13,
	InteractiveActorType_Prop                          = 14,
	InteractiveActorType_PlayerVehicleDisplayPoint     = 15,
	InteractiveActorType_GraffitiCrimeTarget           = 16,
	InteractiveActorType_AmmoVendingMachine            = 17,
	InteractiveActorType_AmmoShopFront                 = 18,
	InteractiveActorType_UIInteractionPoint            = 19,
	InteractiveActorType_MAX                           = 20
};*/

// Enum Engine.PhysicalMaterialSDD.etInventoryItemCategory
/*enum etInventoryItemCategory
{
	InventoryItemCategory_None                         = 0,
	InventoryItemCategory_Character                    = 1,
	InventoryItemCategory_Clothing                     = 2,
	InventoryItemCategory_DisplayPointToken            = 3,
	InventoryItemCategory_Dummy                        = 4,
	InventoryItemCategory_Equipment                    = 5,
	InventoryItemCategory_FnMod                        = 6,
	InventoryItemCategory_Instrument                   = 7,
	InventoryItemCategory_MarketplaceCash              = 8,
	InventoryItemCategory_Outfit                       = 9,
	InventoryItemCategory_Song                         = 10,
	InventoryItemCategory_Symbol                       = 11,
	InventoryItemCategory_Theme                        = 12,
	InventoryItemCategory_Unlock                       = 13,
	InventoryItemCategory_UsableToken                  = 14,
	InventoryItemCategory_Vehicle                      = 15,
	InventoryItemCategory_Weapon                       = 16,
	InventoryItemCategory_MAX                          = 17
};*/

// Enum Engine.PhysicalMaterialSDD.etInventoryItemCategoryLimited
/*enum etInventoryItemCategoryLimited
{
	InventoryItemCategoryLimited_None                  = 0,
	InventoryItemCategoryLimited_Character             = 1,
	InventoryItemCategoryLimited_Clothing              = 2,
	InventoryItemCategoryLimited_Outfit                = 3,
	InventoryItemCategoryLimited_Song                  = 4,
	InventoryItemCategoryLimited_Symbol                = 5,
	InventoryItemCategoryLimited_Theme                 = 6,
	InventoryItemCategoryLimited_Vehicle               = 7,
	InventoryItemCategoryLimited_Weapon                = 8,
	InventoryItemCategoryLimited_MAX                   = 9
};*/

// Enum Engine.PhysicalMaterialSDD.etInventoryItemSubCategory
/*enum etInventoryItemSubCategory
{
	InventoryItemSubCategory_None                      = 0,
	InventoryItemSubCategory_Character                 = 1,
	InventoryItemSubCategory_ClothingAccessory         = 2,
	InventoryItemSubCategory_ClothingBadges            = 3,
	InventoryItemSubCategory_ClothingBelts             = 4,
	InventoryItemSubCategory_ClothingBodyHair          = 5,
	InventoryItemSubCategory_ClothingCoat              = 6,
	InventoryItemSubCategory_ClothingFacewear          = 7,
	InventoryItemSubCategory_ClothingFacialHair        = 8,
	InventoryItemSubCategory_ClothingFootwear          = 9,
	InventoryItemSubCategory_ClothingGloves            = 10,
	InventoryItemSubCategory_ClothingHeadwear          = 11,
	InventoryItemSubCategory_ClothingJewellery         = 12,
	InventoryItemSubCategory_ClothingTop               = 13,
	InventoryItemSubCategory_ClothingTrousers          = 14,
	InventoryItemSubCategory_ClothingUnderwear         = 15,
	InventoryItemSubCategory_DisplayPointToken         = 16,
	InventoryItemSubCategory_Dummy                     = 17,
	InventoryItemSubCategory_Equipment                 = 18,
	InventoryItemSubCategory_FnModCharacter            = 19,
	InventoryItemSubCategory_FnModVehicle              = 20,
	InventoryItemSubCategory_FnModWeapon               = 21,
	InventoryItemSubCategory_Instrument                = 22,
	InventoryItemSubCategory_MarketplaceCash           = 23,
	InventoryItemSubCategory_Outfit                    = 24,
	InventoryItemSubCategory_Song                      = 25,
	InventoryItemSubCategory_Symbol                    = 26,
	InventoryItemSubCategory_Theme                     = 27,
	InventoryItemSubCategory_UnlockClothing            = 28,
	InventoryItemSubCategory_UnlockDisplayPoint        = 29,
	InventoryItemSubCategory_UnlockEmote               = 30,
	InventoryItemSubCategory_UnlockEquipment           = 31,
	InventoryItemSubCategory_UnlockFeature             = 32,
	InventoryItemSubCategory_UnlockFnMod               = 33,
	InventoryItemSubCategory_UnlockGeneric             = 34,
	InventoryItemSubCategory_UnlockInstrument          = 35,
	InventoryItemSubCategory_UnlockPrimitive           = 36,
	InventoryItemSubCategory_UnlockSong                = 37,
	InventoryItemSubCategory_UnlockSymbol              = 38,
	InventoryItemSubCategory_UnlockTheme               = 39,
	InventoryItemSubCategory_UnlockUsable              = 40,
	InventoryItemSubCategory_UnlockVehicle             = 41,
	InventoryItemSubCategory_UnlockVehicleComponent    = 42,
	InventoryItemSubCategory_UnlockWeapon              = 43,
	InventoryItemSubCategory_UsableToken               = 44,
	InventoryItemSubCategory_VehicleCar                = 45,
	InventoryItemSubCategory_VehicleTruck              = 46,
	InventoryItemSubCategory_VehicleVan                = 47,
	InventoryItemSubCategory_WeaponGrenade             = 48,
	InventoryItemSubCategory_WeaponMelee               = 49,
	InventoryItemSubCategory_WeaponPrimary             = 50,
	InventoryItemSubCategory_WeaponSecondary           = 51,
	InventoryItemSubCategory_WeaponWitnessing          = 52,
	InventoryItemSubCategory_MAX                       = 53
};*/

// Enum Engine.PhysicalMaterialSDD.etLeagueActivity
/*enum etLeagueActivity
{
	LeagueActivity_Kills                               = 0,
	LeagueActivity_CarsStolen                          = 1,
	LeagueActivity_Arrests                             = 2,
	LeagueActivity_KillDeathRatio                      = 3,
	LeagueActivity_MissionsWon                         = 4,
	LeagueActivity_MissionWinLossRatio                 = 5,
	LeagueActivity_KillStreak_MedalsOpen               = 6,
	LeagueActivity_KillStreak_MedalsElite              = 7,
	LeagueActivity_TimeLimited_Medals                  = 8,
	LeagueActivity_Damage                              = 9,
	LeagueActivity_KillStreak                          = 10,
	LeagueActivity_MissionWinStreak                    = 11,
	LeagueActivity_TaskTargetsCompleted                = 12,
	LeagueActivity_KillsPistol                         = 13,
	LeagueActivity_KillsGrenade                        = 14,
	LeagueActivity_KillsMelee                          = 15,
	LeagueActivity_MAX                                 = 16
};*/

// Enum Engine.PhysicalMaterialSDD.etLeagueCycle
/*enum etLeagueCycle
{
	LeagueCycle_Daily                                  = 0,
	LeagueCycle_Weekly                                 = 1,
	LeagueCycle_Monthly                                = 2,
	LeagueCycle_MAX                                    = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etLeagueEntity
/*enum etLeagueEntity
{
	LeagueEntity_Character                             = 0,
	LeagueEntity_Clan                                  = 1,
	LeagueEntity_MAX                                   = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etLeagueParticipants
/*enum etLeagueParticipants
{
	LeagueParticipant_Character                        = 0,
	LeagueParticipant_Clan                             = 1,
	LeagueParticipant_Both                             = 2,
	LeagueParticipant_MAX                              = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etLeaguePeriod
/*enum etLeaguePeriod
{
	LeaguePeriod_Day                                   = 0,
	LeaguePeriod_WeekMonthYear                         = 1,
	LeaguePeriod_All                                   = 2,
	LeaguePeriod_MAX                                   = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etLeagueRewardType
/*enum etLeagueRewardType
{
	kLeagueRewardType_Normal                           = 0,
	kLeagueRewardType_Consecutive1st                   = 1,
	kLeagueRewardType_ConsecutiveTop3                  = 2,
	kLeagueRewardType_Lifetime1st                      = 3,
	kLeagueRewardType_LifetimeTop3                     = 4,
	kLeagueRewardType_MAX                              = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etLeagueScope
/*enum etLeagueScope
{
	LeagueScope_World                                  = 0,
	LeagueScope_Enforcer                               = 1,
	LeagueScope_Criminal                               = 2,
	LeagueScope_District                               = 3,
	LeagueScope_MAX                                    = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etLoadingMovieTip
/*enum etLoadingMovieTip
{
	E_Move                                             = 0,
	E_Resize                                           = 1,
	E_Rotate                                           = 2,
	ED_Layers                                          = 3,
	EP_TattooOpacity                                   = 4,
	GL_AccountDetails                                  = 5,
	GL_APBSite                                         = 6,
	GL_PickUpGroups                                    = 7,
	GP_AccuracyBursts                                  = 8,
	GP_Ammo                                            = 9,
	GP_C_Rescue                                        = 10,
	GP_ChangeLoadout                                   = 11,
	GP_CookNades                                       = 12,
	GP_E_Arrest                                        = 13,
	GP_E_Rescue                                        = 14,
	GP_Equipment                                       = 15,
	GP_GroupUp1                                        = 16,
	GP_GroupUp2                                        = 17,
	GP_GroupWithBackup                                 = 18,
	GP_ItemsInBoot                                     = 19,
	GP_Jumping                                         = 20,
	GP_Leaning                                         = 21,
	GP_LMG                                             = 22,
	GP_LowAmmo                                         = 23,
	GP_LTLCanKill                                      = 24,
	GP_Marksmanship                                    = 25,
	GP_MM_Settings                                     = 26,
	GP_MuzzleFlash                                     = 27,
	GP_N5                                              = 28,
	GP_N5Bounties                                      = 29,
	GP_N5Teammate                                      = 30,
	GP_Notoriety                                       = 31,
	GP_P5Bounties                                      = 32,
	GP_P5FriendlyFire                                  = 33,
	GP_P5Teammate                                      = 34,
	GP_P5Waste                                         = 35,
	GP_Percs                                           = 36,
	GP_PersonalVehicles                                = 37,
	GP_Prestige                                        = 38,
	GP_Range                                           = 39,
	GP_Rating                                          = 40,
	GP_ReticuleFriendly                                = 41,
	GP_Scoreboard                                      = 42,
	GP_ShootUnderVehicles                              = 43,
	GP_SpawningVehicle                                 = 44,
	GP_StaminaDamage_C                                 = 45,
	GP_StaminaDamage_E                                 = 46,
	GP_SupplyUnit                                      = 47,
	GP_TeamKills                                       = 48,
	GP_TeamTalk                                        = 49,
	GP_Teamwork                                        = 50,
	GP_Threat                                          = 51,
	GP_Upgrades_Selection                              = 52,
	GP_UpgradesActivatable                             = 53,
	GP_VehicleCombat                                   = 54,
	GP_VehicleCritical                                 = 55,
	GP_VoIPEnemy                                       = 56,
	GP_VoIPTeam                                        = 57,
	GP_WaypointLetters                                 = 58,
	GP_WeaponsCQB                                      = 59,
	GP_WeaponsHVR                                      = 60,
	GP_WeaponVariety                                   = 61,
	KP_CameraSwitch                                    = 62,
	OW_C_VehiclesPristine                              = 63,
	OW_E_MuggingDelivery                               = 64,
	OW_E_RamraidDeliver                                = 65,
	OW_E_StolenVehicles                                = 66,
	OW_E_VehiclesPristine                              = 67,
	OW_Graffiti                                        = 68,
	OW_Witness_C                                       = 69,
	OW_Witness_E                                       = 70,
	OW_WitnessVehicles_C                               = 71,
	PG_Pledge                                          = 72,
	PG_Pledge01                                        = 73,
	PG_StandingLevel                                   = 74,
	SL_AudioDisplayPoints                              = 75,
	SL_GroupUp                                         = 76,
	SL_Kiosks                                          = 77,
	SL_MailScam                                        = 78,
	SL_Marketplace_Buy                                 = 79,
	SL_Marketplace_DisplayPoints                       = 80,
	SL_Marketplace_Sell                                = 81,
	SL_MusicStudio                                     = 82,
	SL_WhereToCustomise                                = 83,
	UI_CharacterInfo                                   = 84,
	UI_Map_Waypoints                                   = 85,
	UI_MusicPlayer_Import                              = 86,
	UI_MusicPlayer_OnFoot                              = 87,
	UI_MusicPlayer_Playlists                           = 88,
	UI_QuickCapture                                    = 89,
	UI_RemotePledge                                    = 90,
	UI_Scoreboard                                      = 91,
	SL_Whisper                                         = 92,
	SL_Marketplace_VehicleDP                           = 93,
	SL_Marketplace_StatueDP                            = 94,
	SL_Marketplace_SellFaction_C                       = 95,
	SL_Marketplace_SellFaction_E                       = 96,
	ED_DupeLayer                                       = 97,
	Ed_CtrlZCtrlY                                      = 98,
	EW_SelectedOnly                                    = 99,
	EW_ProjectSections                                 = 100,
	EW_RealignClothing                                 = 101,
	EG_LicensePlate                                    = 102,
	EG_Camera                                          = 103,
	EG_EngineAudio                                     = 104,
	EP_BodyPaint                                       = 105,
	Ed_Camera                                          = 106,
	EP_Zoom                                            = 107,
	EW_Zoom                                            = 108,
	EG_Zoom                                            = 109,
	SL_Clans                                           = 110,
	GL_MouseSensitivity                                = 111,
	GP_PitManeuver                                     = 112,
	GL_Unstick                                         = 113,
	SL_Emotes                                          = 114,
	etLoadingMovieTip_MAX                              = 115
};*/

// Enum Engine.PhysicalMaterialSDD.etLoadingMovieTransitionType
/*enum etLoadingMovieTransitionType
{
	LMTT_AllFactions_Generic                           = 0,
	LMTT_Enforcer_Generic                              = 1,
	LMTT_Enforcer_Leagues                              = 2,
	LMTT_Criminal_Generic                              = 3,
	LMTT_Criminal_Leagues                              = 4,
	LMTT_AllFactions_Leagues                           = 5,
	LMTT_MAX                                           = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etLoadingScreenHintDomain
/*enum etLoadingScreenHintDomain
{
	LoadingScreenHintDomain_Action                     = 0,
	LoadingScreenHintDomain_Social                     = 1,
	LoadingScreenHintDomain_Either                     = 2,
	LoadingScreenHintDomain_MAX                        = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etLocaleTypePriority
/*enum etLocaleTypePriority
{
	BlockVolume                                        = 0,
	Street                                             = 1,
	LocationBeacon                                     = 2,
	etLocaleTypePriority_MAX                           = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMailConstant
/*enum etMailConstant
{
	MailConstant_Cost                                  = 0,
	MailConstant_SoftLimit                             = 1,
	MailConstant_MAX                                   = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etMailDetach
/*enum etMailDetach
{
	kMailDetach_None                                   = 0,
	kMailDetach_Cash                                   = 1,
	kMailDetach_Item                                   = 2,
	kMailDetach_Points                                 = 3,
	kMailDetach_MAX                                    = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etMailDuration
/*enum etMailDuration
{
	MailDuration_Short                                 = 0,
	MailDuration_Long                                  = 1,
	MailDuration_MAX                                   = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etMailInfo
/*enum etMailInfo
{
	kMailInfo_None                                     = 0,
	kMailInfo_Unread                                   = 1,
	kMailInfo_Expired                                  = 2,
	kMailInfo_MAX                                      = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMailSort
/*enum etMailSort
{
	kMailSort_Default                                  = 0,
	kMailSort_Sender_Name_ASC                          = 1,
	kMailSort_Sender_Name_DESC                         = 2,
	kMailSort_Send_Time_ASC                            = 3,
	kMailSort_Send_Time_DESC                           = 4,
	kMailSort_Expiration_Time_ASC                      = 5,
	kMailSort_Expiration_Time_DESC                     = 6,
	kMailSort_Read_ASC                                 = 7,
	kMailSort_Read_DESC                                = 8,
	kMailSort_Subject_ASC                              = 9,
	kMailSort_Subject_DESC                             = 10,
	kMailSort_MAX                                      = 11
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceAuctionType
/*enum etMarketplaceAuctionType
{
	kMarketplaceAuctionType_None                       = 0,
	kMarketplaceAuctionType_Cash                       = 1,
	kMarketplaceAuctionType_Points                     = 2,
	kMarketplaceAuctionType_MAX                        = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceCashType
/*enum etMarketplaceCashType
{
	MarketplaceCash                                    = 0,
	etMarketplaceCashType_MAX                          = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceConstant
/*enum etMarketplaceConstant
{
	MarketplaceConstant_Tariff                         = 0,
	MarketplaceConstant_MaximumAuctions                = 1,
	MarketplaceConstant_MinimumCash                    = 2,
	MarketplaceConstant_MAX                            = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceDuration
/*enum etMarketplaceDuration
{
	MarketplaceDuration_Short                          = 0,
	MarketplaceDuration_Medium                         = 1,
	MarketplaceDuration_Long                           = 2,
	MarketplaceDuration_MAX                            = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceInfo
/*enum etMarketplaceInfo
{
	kMarketplaceInfo_None                              = 0,
	kMarketplaceInfo_Auction_Expired                   = 1,
	kMarketplaceInfo_Auction_Sold                      = 2,
	kMarketplaceInfo_Auction_Won                       = 3,
	kMarketplaceInfo_Auction_Outbid                    = 4,
	kMarketplaceInfo_Auction_Cancelled                 = 5,
	kMarketplaceInfo_MAX                               = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceListType
/*enum etMarketplaceListType
{
	kMarketplaceList_Auction                           = 0,
	kMarketplaceList_MyAuction                         = 1,
	kMarketplaceList_MyBid                             = 2,
	kMarketplaceList_MAX                               = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceSearch
/*enum etMarketplaceSearch
{
	kMarketplaceSearch_Default                         = 0,
	kMarketplaceSearch_Item                            = 1,
	kMarketplaceSearch_Seller                          = 2,
	kMarketplaceSearch_MAX                             = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceSort
/*enum etMarketplaceSort
{
	kMarketplaceSort_Default                           = 0,
	kMarketplaceSort_Item_Name_ASC                     = 1,
	kMarketplaceSort_Item_Name_DESC                    = 2,
	kMarketplaceSort_Item_Rating_ASC                   = 3,
	kMarketplaceSort_Item_Rating_DESC                  = 4,
	kMarketplaceSort_Expiration_Time_ASC               = 5,
	kMarketplaceSort_Expiration_Time_DESC              = 6,
	kMarketplaceSort_Seller_Name_ASC                   = 7,
	kMarketplaceSort_Seller_Name_DESC                  = 8,
	kMarketplaceSort_Bid_Price_ASC                     = 9,
	kMarketplaceSort_Bid_Price_DESC                    = 10,
	kMarketplaceSort_Buyout_Price_ASC                  = 11,
	kMarketplaceSort_Buyout_Price_DESC                 = 12,
	kMarketplaceSort_Gender_ASC                        = 13,
	kMarketplaceSort_Gender_DESC                       = 14,
	kMarketplaceSort_High_Bidder_Name_ASC              = 15,
	kMarketplaceSort_High_Bidder_Name_DESC             = 16,
	kMarketplaceSort_Item_Faction_ASC                  = 17,
	kMarketplaceSort_Item_Faction_DESC                 = 18,
	kMarketplaceSort_MAX                               = 19
};*/

// Enum Engine.PhysicalMaterialSDD.etMarketplaceTimeLeft
/*enum etMarketplaceTimeLeft
{
	MarketplaceTimeLeft_VeryShort                      = 0,
	MarketplaceTimeLeft_Short                          = 1,
	MarketplaceTimeLeft_Medium                         = 2,
	MarketplaceTimeLeft_Long                           = 3,
	MarketplaceTimeLeft_VeryLong                       = 4,
	MarketplaceTimeLeft_MAX                            = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etMedalCategory
/*enum etMedalCategory
{
	MedalCategory_KillStreak                           = 0,
	MedalCategory_BigWin_Arrest                        = 1,
	MedalCategory_BigWin_Rescue                        = 2,
	MedalCategory_BigWin_Takeout                       = 3,
	MedalCategory_BigWin_Bomber                        = 4,
	MedalCategory_BigWin_BombDisposal                  = 5,
	MedalCategory_BigWin_TaskTargetHero                = 6,
	MedalCategory_TimeLimit_Kills                      = 7,
	MedalCategory_Situational_MeleeKillFromBehind      = 8,
	MedalCategory_Situational_MeleeKill                = 9,
	MedalCategory_Situational_GrenadeKill              = 10,
	MedalCategory_Situational_VehicleKill              = 11,
	MedalCategory_Situational_PostMortemKill           = 12,
	MedalCategory_Situational_TaskItemKill             = 13,
	MedalCategory_Situational_VIPKill                  = 14,
	MedalCategory_Situational_GraffitiKill             = 15,
	MedalCategory_Situational_AntiGraffitiKill         = 16,
	MedalCategory_Situational_ArsonKill                = 17,
	MedalCategory_Situational_KillStreakerKill         = 18,
	MedalCategory_Situational_ArrestStreakerKill       = 19,
	MedalCategory_Situational_KillStreakerArrest       = 20,
	MedalCategory_Situational_DriverAssistsKill        = 21,
	MedalCategory_Situational_GroupAnnihilation        = 22,
	MedalCategory_Dishonour_FriendlyKill               = 23,
	MedalCategory_Dishonour_ArrestedKill               = 24,
	MedalCategory_Dishonour_SelfKill                   = 25,
	MedalCategory_MAX                                  = 26
};*/

// Enum Engine.PhysicalMaterialSDD.etMissionCriminalDispatchTypes
/*enum etMissionCriminalDispatchTypes
{
	kCRIMINALDISPATCH_MissionVsEnforcers               = 0,
	kCRIMINALDISPATCH_MissionVsCriminals               = 1,
	kCRIMINALDISPATCH_Backup                           = 2,
	kCRIMINALDISPATCH_MAX                              = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMissionEnforcerDispatchTypes
/*enum etMissionEnforcerDispatchTypes
{
	kENFORCERDISPATCH_MissionVsCriminals               = 0,
	kENFORCERDISPATCH_Backup                           = 1,
	kENFORCERDISPATCH_Bounty                           = 2,
	kENFORCERDISPATCH_MAX                              = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etMissionResultReason
/*enum etMissionResultReason
{
	eMRR_None                                          = 0,
	eMRR_Abandoned                                     = 1,
	eMRR_CompletedUnopposed                            = 2,
	eMRR_Declined                                      = 3,
	eMRR_Emergency                                     = 4,
	eMRR_Forced                                        = 5,
	eMRR_ObjectiveCompleted                            = 6,
	eMRR_ObjectiveFailed                               = 7,
	eMRR_OppositionDestroyedOwnerTarget                = 8,
	eMRR_OwnersDestroyedOwnerTarget                    = 9,
	eMRR_RemovedFromSide                               = 10,
	eMRR_SideTooSmall                                  = 11,
	eMRR_TimedOut                                      = 12,
	eMRR_VipKillLimitReached                           = 13,
	eMRR_WonFinalObjective                             = 14,
	eMRR_WonMostObjectives                             = 15,
	eMRR_MAX                                           = 16
};*/

// Enum Engine.PhysicalMaterialSDD.etMissionUITrackedValue
/*enum etMissionUITrackedValue
{
	MissionUITrackedValue_None                         = 0,
	MissionUITrackedValue_TaskTargetsTriggeredOwners   = 1,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition = 2,
	MissionUITrackedValue_TaskItemsDelivered           = 3,
	MissionUITrackedValue_CheckpointsTriggeredLocalPlayer = 4,
	MissionUITrackedValue_VIPLivesLostOwners           = 5,
	MissionUITrackedValue_TakeoutsOwners               = 6,
	MissionUITrackedValue_TakeoutsOpposition           = 7,
	MissionUITrackedValue_BombTimer                    = 8,
	MissionUITrackedValue_GraffitiPointState           = 9,
	MissionUITrackedValue_ArmedGuardTimer              = 10,
	MissionUITrackedValue_TakeoutBalanceOwnerOpposition = 11,
	MissionUITrackedValue_CheckpointTerritoryState     = 12,
	MissionUITrackedValue_MovingTargetState            = 13,
	MissionUITrackedValue_BombState                    = 14,
	MissionUITrackedValue_TakeoutBalanceOppositionOwner = 15,
	MissionUITrackedValue_SurvivalTimer                = 16,
	MissionUITrackedValue_EscapeBar                    = 17,
	MissionUITrackedValue_EscapePenaltyTimer           = 18,
	MissionUITrackedValue_BombsArmed                   = 19,
	MissionUITrackedValue_MovingTargetsHeldOwners      = 20,
	MissionUITrackedValue_MovingTargetsHeldOpposition  = 21,
	MissionUITrackedValue_ObjectivesWonOwners          = 22,
	MissionUITrackedValue_ObjectivesWonOpposition      = 23,
	MissionUITrackedValue_TaskTargetsTriggeredOwners_SumConcStages = 24,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition_SumConcStages = 25,
	MissionUITrackedValue_TaskItemsDeliveredOpposition = 26,
	MissionUITrackedValue_BombsArmed_SumConcStages     = 27,
	MissionUITrackedValue_VIPLivesLostOpposition       = 28,
	MissionUITrackedValue_VehiclesDelivered            = 29,
	MissionUITrackedValue_VehiclesDeliveredOpposition  = 30,
	MissionUITrackedValue_BombsArmedOpposition         = 31,
	MissionUITrackedValue_BombsArmedOpposition_SumConcStages = 32,
	MissionUITrackedValue_MAX                          = 33
};*/

// Enum Engine.PhysicalMaterialSDD.etMissionUITrackedValueDisplay
/*enum etMissionUITrackedValueDisplay
{
	MissionUITrackedValueDisplay_None                  = 0,
	MissionUITrackedValueDisplay_Percentage            = 1,
	MissionUITrackedValueDisplay_Bar                   = 2,
	MissionUITrackedValueDisplay_Percentage_Inverse    = 3,
	MissionUITrackedValueDisplay_Bar_Inverse           = 4,
	MissionUITrackedValueDisplay_Counter               = 5,
	MissionUITrackedValueDisplay_Counter_Inverse       = 6,
	MissionUITrackedValueDisplay_LimitedCounter        = 7,
	MissionUITrackedValueDisplay_LimitedCounter_Inverse = 8,
	MissionUITrackedValueDisplay_Time                  = 9,
	MissionUITrackedValueDisplay_Time_Inverse          = 10,
	MissionUITrackedValueDisplay_MAX                   = 11
};*/

// Enum Engine.PhysicalMaterialSDD.etModifierCategory
/*enum etModifierCategory
{
	ModifierCategory_None                              = 0,
	ModifierCategory_Character_AmmoCarrier             = 1,
	ModifierCategory_Character_AmmoRadiusIncrease      = 2,
	ModifierCategory_Character_FastRegeneration        = 3,
	ModifierCategory_Character_HappyLandings           = 4,
	ModifierCategory_Character_Invulnerable            = 5,
	ModifierCategory_Character_IronMan                 = 6,
	ModifierCategory_Character_Medikit                 = 7,
	ModifierCategory_Character_Monolith                = 8,
	ModifierCategory_Character_Olympian                = 9,
	ModifierCategory_Character_QuickReSupply           = 10,
	ModifierCategory_Character_ReducedStaminaDamage    = 11,
	ModifierCategory_Character_Slugger                 = 12,
	ModifierCategory_Character_Staminakit              = 13,
	ModifierCategory_Character_Stealth                 = 14,
	ModifierCategory_Character_Survivor                = 15,
	ModifierCategory_Character_TakeAKnee               = 16,
	ModifierCategory_Vehicle_AmmoCarrier               = 17,
	ModifierCategory_Vehicle_AmmoRadiusIncrease        = 18,
	ModifierCategory_Vehicle_BlastRadiusIncrease       = 19,
	ModifierCategory_Vehicle_ChassisStrengthening      = 20,
	ModifierCategory_Vehicle_CriticalThresholdIncrease = 21,
	ModifierCategory_Vehicle_CriticalTimerIncrease     = 22,
	ModifierCategory_Vehicle_EngineOverhaul            = 23,
	ModifierCategory_Vehicle_ExtraCargoCapacity        = 24,
	ModifierCategory_Vehicle_IncreasedActivationTimer  = 25,
	ModifierCategory_Vehicle_MatesRates                = 26,
	ModifierCategory_Vehicle_QuickRepair               = 27,
	ModifierCategory_Vehicle_QuickResupply             = 28,
	ModifierCategory_Vehicle_RammingPlate              = 29,
	ModifierCategory_Vehicle_SteelPlating              = 30,
	ModifierCategory_Weapon_Bandolier                  = 31,
	ModifierCategory_Weapon_Damping                    = 32,
	ModifierCategory_Weapon_EagleEyes                  = 33,
	ModifierCategory_Weapon_PointGuard                 = 34,
	ModifierCategory_Weapon_QuickFingers               = 35,
	ModifierCategory_Weapon_Rifling                    = 36,
	ModifierCategory_Weapon_Savage                     = 37,
	ModifierCategory_Weapon_ShortSighted               = 38,
	ModifierCategory_Weapon_SprayAndPray               = 39,
	ModifierCategory_Weapon_SuperMag                   = 40,
	ModifierCategory_Weapon_Switch                     = 41,
	ModifierCategory_Weapon_ThreePointSling            = 42,
	ModifierCategory_MAX                               = 43
};*/

// Enum Engine.PhysicalMaterialSDD.etModifierClass
/*enum etModifierClass
{
	ModifierClass_None                                 = 0,
	ModifierClass_Character                            = 1,
	ModifierClass_Vehicle                              = 2,
	ModifierClass_Weapon                               = 3,
	ModifierClass_MAX                                  = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etModifierStatus
/*enum etModifierStatus
{
	ModifierStatus_None                                = 0,
	ModifierStatus_Activatable                         = 1,
	ModifierStatus_Permanent                           = 2,
	ModifierStatus_MAX                                 = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etNameQuery
/*enum etNameQuery
{
	kNameQuery_Chat                                    = 0,
	kNameQuery_Item                                    = 1,
	kNameQuery_MAX                                     = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etNPCCategory
/*enum etNPCCategory
{
	LCPedestrian                                       = 0,
	LCVehicle                                          = 1,
	etNPCCategory_MAX                                  = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etNPCEvent
/*enum etNPCEvent
{
	eAvoidLoudVehicleNotifier                          = 0,
	eAvoidVehicle                                      = 1,
	eAvoidVehicleNotifier                              = 2,
	eBumpIntoPlayer                                    = 3,
	eCrimeCommitted                                    = 4,
	eDespawnPedestrian                                 = 5,
	eDriverBlocked                                     = 6,
	eDriverDespawn                                     = 7,
	eDriverPanic                                       = 8,
	eDriverRandomAnim                                  = 9,
	eDriverStopAndPanic                                = 10,
	eLookAround                                        = 11,
	eLookAt                                            = 12,
	eMinorCollision                                    = 13,
	eNotifier                                          = 14,
	eNotifierTimed                                     = 15,
	eOnTopOfActor                                      = 16,
	ePedestrianPanic                                   = 17,
	ePedIdle                                           = 18,
	eRandomAnim                                        = 19,
	eSpawnDestroy                                      = 20,
	eTaskTargetInteraction                             = 21,
	eVehicleCriticallyDamaged                          = 22,
	LC_NonProps_ColdHands                              = 23,
	LC_NonProps_Fem_Ambients                           = 24,
	LC_NonProps_Fem_ListenMusic                        = 25,
	LC_NonProps_Fem_TalkMobile                         = 26,
	LC_NonProps_LookSkyward                            = 27,
	LC_NonProps_Prototype                              = 28,
	LC_NonProps_Stand_Ambients                         = 29,
	LC_NonProps_Texting                                = 30,
	LC_Vignette_BankMachine_Male                       = 31,
	LC_Vignette_BinLitter_Male                         = 32,
	LC_Vignette_MailBox_Male                           = 33,
	LC_Vignette_Newspaper_Male                         = 34,
	LC_Vignette_Observe_Male                           = 35,
	LC_Vignette_Parkbench_Backless_Male                = 36,
	LC_Vignette_Parkbench_Universal_Male               = 37,
	LC_Vignette_Payphone_Male                          = 38,
	LC_Vignette_TaxiWait                               = 39,
	LC_Vignette_VendingMachine_Male                    = 40,
	LC_Vignette_WallLean_Male                          = 41,
	NO_EVENT                                           = 42,
	etNPCEvent_MAX                                     = 43
};*/

// Enum Engine.PhysicalMaterialSDD.etNPCReaction
/*enum etNPCReaction
{
	NO_REACTION                                        = 0,
	rBumpIntoPlayer                                    = 1,
	rCower                                             = 2,
	rCrimeCommitted                                    = 3,
	rDespawnPedestrian                                 = 4,
	rDriverAngry                                       = 5,
	rDriverBlocked                                     = 6,
	rDriverDeSpawn                                     = 7,
	rDriverPanic                                       = 8,
	rDriverRandomAnim                                  = 9,
	rDriverStopAndPanic                                = 10,
	rLookAround                                        = 11,
	rLookAt                                            = 12,
	rPedWaitingAnxious                                 = 13,
	rPedWaitingGeneric                                 = 14,
	rReRouteToVignetteNode                             = 15,
	rRunAway                                           = 16,
	rRunIntoBuilding                                   = 17,
	rSpawnDestroy                                      = 18,
	rStationaryRandomAnim                              = 19,
	rTaskTargetInteraction                             = 20,
	rVehicleCriticallyDamaged                          = 21,
	etNPCReaction_MAX                                  = 22
};*/

// Enum Engine.PhysicalMaterialSDD.etNPCWorldEvent
/*enum etNPCWorldEvent
{
	WorldEvent_Arson                                   = 0,
	WorldEvent_AvoidVehicle                            = 1,
	WorldEvent_AvoidVehicleHorn                        = 2,
	WorldEvent_AvoidVehicleSiren                       = 3,
	WorldEvent_Bombing                                 = 4,
	WorldEvent_BuildingBreakIn                         = 5,
	WorldEvent_BulletFired                             = 6,
	WorldEvent_BulletHit                               = 7,
	WorldEvent_Deathmatch                              = 8,
	WorldEvent_DebugShout                              = 9,
	WorldEvent_DestroyProp                             = 10,
	WorldEvent_Explosion                               = 11,
	WorldEvent_Graffiti                                = 12,
	WorldEvent_GrenadeCook                             = 13,
	WorldEvent_GrenadeThrown                           = 14,
	WorldEvent_Hijack                                  = 15,
	WorldEvent_ItemDelivery                            = 16,
	WorldEvent_LookAtPlayer                            = 17,
	WorldEvent_LookAtShopfront                         = 18,
	WorldEvent_LookAtVehicleSiren                      = 19,
	WorldEvent_Mugging                                 = 20,
	WorldEvent_None                                    = 21,
	WorldEvent_NPCDeath                                = 22,
	WorldEvent_Pickup                                  = 23,
	WorldEvent_RamRaid                                 = 24,
	WorldEvent_Rendezvous                              = 25,
	WorldEvent_StolenLargeObject                       = 26,
	WorldEvent_TerritoryControl                        = 27,
	WorldEvent_Vandalism                               = 28,
	WorldEvent_VehicleCollision                        = 29,
	WorldEvent_VehicleLocked                           = 30,
	WorldEvent_VehicleUnlocked                         = 31,
	WorldEvent_WitnessableCrimeDefault                 = 32,
	WorldEvent_MAX                                     = 33
};*/

// Enum Engine.PhysicalMaterialSDD.etOnFootDeathAnimation
/*enum etOnFootDeathAnimation
{
	eDA_None                                           = 0,
	eDA_Backwards                                      = 1,
	eDA_Explosion_Backwards                            = 2,
	eDA_Explosion_Forwards                             = 3,
	eDA_Explosion_Left                                 = 4,
	eDA_Explosion_Right                                = 5,
	eDA_Fall                                           = 6,
	eDA_Forwards                                       = 7,
	eDA_MAX                                            = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etOpenWorldConstant
/*enum etOpenWorldConstant
{
	OpenWorldConstant_DropOffDeliveryPointReplenishmentDelay = 0,
	OpenWorldConstant_DropOffLargeTaskItemDeliveryPoints = 1,
	OpenWorldConstant_DropOffMediumTaskItemDeliveryPoints = 2,
	OpenWorldConstant_DropOffSmallTaskItemDeliveryPoints = 3,
	OpenWorldConstant_DropOffVehicleDeliveryPoints     = 4,
	OpenWorldConstant_LargeTaskItemSizePoints          = 5,
	OpenWorldConstant_MediumTaskItemSizePoints         = 6,
	OpenWorldConstant_SmallTaskItemsLimit              = 7,
	OpenWorldConstant_TaskItemTimeOut                  = 8,
	OpenWorldConstant_MAX                              = 9
};*/

// Enum Engine.PhysicalMaterialSDD.etOrganisation
/*enum etOrganisation
{
	Organisation_None                                  = 0,
	Organisation_CriminalDefault                       = 1,
	Organisation_GKings                                = 2,
	Organisation_BloodRoses                            = 3,
	Organisation_Praetorian                            = 4,
	Organisation_PrentissTigers                        = 5,
	Organisation_RedRain                               = 6,
	Organisation_SPPD                                  = 7,
	Organisation_EnforcerDefault                       = 8,
	Organisation_MAX                                   = 9
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReaction_BoneList
/*enum etPawnHitReaction_BoneList
{
	aHitReactionBoneList                               = 0,
	etPawnHitReaction_BoneList_MAX                     = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReaction_BoneRemapTable
/*enum etPawnHitReaction_BoneRemapTable
{
	aHitReactionBoneRemapTable1                        = 0,
	aHitReactionBoneRemapTable2                        = 1,
	etPawnHitReaction_BoneRemapTable_MAX               = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReaction_Bool
/*enum etPawnHitReaction_Bool
{
	bEnableHitReactionBoneSprings                      = 0,
	etPawnHitReaction_Bool_MAX                         = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReaction_ConstrainedBoneList
/*enum etPawnHitReaction_ConstrainedBoneList
{
	aHitReactionConstrainedBoneList                    = 0,
	etPawnHitReaction_ConstrainedBoneList_MAX          = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReaction_Float
/*enum etPawnHitReaction_Float
{
	fHitReactionBlendOutTime                           = 0,
	fHitReactionImpulseScale                           = 1,
	fHitReactionImpulseScaleWalking                    = 2,
	fHitReactionImpulseScaleRunning                    = 3,
	fHitReactionImpulseScaleSprinting                  = 4,
	fHitReactionImpulseScaleLocalPlayer                = 5,
	fHitReactionMassEffectScale                        = 6,
	etPawnHitReaction_Float_MAX                        = 7
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReaction_SpringList
/*enum etPawnHitReaction_SpringList
{
	aHitReactionSpringList                             = 0,
	etPawnHitReaction_SpringList_MAX                   = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReaction_Vector2D
/*enum etPawnHitReaction_Vector2D
{
	vHitReactionMotorStrength                          = 0,
	vHitReactionSpringStrength                         = 1,
	etPawnHitReaction_Vector2D_MAX                     = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etPawnHitReactionType
/*enum etPawnHitReactionType
{
	PawnHitReaction_BoneList                           = 0,
	PawnHitReaction_ConstrainedBoneList                = 1,
	PawnHitReaction_SpringList                         = 2,
	PawnHitReaction_BoneRemapTable                     = 3,
	PawnHitReaction_Float                              = 4,
	PawnHitReaction_Vector2D                           = 5,
	PawnHitReaction_Bool                               = 6,
	PawnHitReaction_MAX                                = 7
};*/

// Enum Engine.PhysicalMaterialSDD.etPedestrianPaletteType
/*enum etPedestrianPaletteType
{
	F_Business_City                                    = 0,
	F_Business_Local                                   = 1,
	F_Clubber_Casual                                   = 2,
	F_Clubber_Fashion                                  = 3,
	F_Industrial_DockWorker                            = 4,
	F_Industrial_FactoryWorker                         = 5,
	F_LowerClass_TrailerTrash                          = 6,
	F_LowerClass_Welfare                               = 7,
	F_MiddleClass_Casual                               = 8,
	F_MiddleClass_Professional                         = 9,
	F_Seedy_Grifter                                    = 10,
	F_Seedy_Hobo                                       = 11,
	F_Uniformed_Casual                                 = 12,
	F_Uniformed_Smart                                  = 13,
	F_UpperClass_Casual                                = 14,
	F_UpperClass_Fashion                               = 15,
	F_Urban1_HipHop                                    = 16,
	F_Urban1_Rocker                                    = 17,
	F_Urban2_Athletic                                  = 18,
	F_Urban2_Emo                                       = 19,
	M_Business_City                                    = 20,
	M_Business_City_AsianDyed_06                       = 21,
	M_Business_Local                                   = 22,
	M_Clubber_Casual                                   = 23,
	M_Clubber_Fashion                                  = 24,
	M_Industrial_DockWorker                            = 25,
	M_Industrial_FactoryWorker                         = 26,
	M_LowerClass_TrailerTrash                          = 27,
	M_LowerClass_Welfare                               = 28,
	M_MiddleClass_Casual                               = 29,
	M_MiddleClass_Professional                         = 30,
	M_Seedy_Grifter                                    = 31,
	M_Seedy_Hobo                                       = 32,
	M_Uniformed_Casual                                 = 33,
	M_Uniformed_Professional                           = 34,
	M_Uniformed_Smart_AsianDyed_06                     = 35,
	M_UpperClass_Casual                                = 36,
	M_UpperClass_Fashion                               = 37,
	M_Urban1_HipHop                                    = 38,
	M_Urban1_Rocker                                    = 39,
	M_Urban2_Athletic                                  = 40,
	M_Urban2_Emo                                       = 41,
	etPedestrianPaletteType_MAX                        = 42
};*/

// Enum Engine.PhysicalMaterialSDD.etPedestrianTempSetup
/*enum etPedestrianTempSetup
{
	Male                                               = 0,
	Female                                             = 1,
	etPedestrianTempSetup_MAX                          = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etPedestrianTTIReaction
/*enum etPedestrianTTIReaction
{
	NPCMugging                                         = 0,
	etPedestrianTTIReaction_MAX                        = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etPlayerRadarPings
/*enum etPlayerRadarPings
{
	Pings_None                                         = 0,
	Pings_Partial                                      = 1,
	Pings_Full                                         = 2,
	Pings_MAX                                          = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etPopulation
/*enum etPopulation
{
	kPopulation_Low                                    = 0,
	kPopulation_Medium                                 = 1,
	kPopulation_High                                   = 2,
	kPopulation_Full                                   = 3,
	kPopulation_MAX                                    = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etPrimitiveType
/*enum etPrimitiveType
{
	kPrimitive_Vinyl                                   = 0,
	kPrimitive_Decal                                   = 1,
	kPrimitive_Font                                    = 2,
	kPrimitive_MAX                                     = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etPvPRule
/*enum etPvPRule
{
	PvPRule_DisabledAlways                             = 0,
	PvPRule_EnabledAlways                              = 1,
	PvPRule_EnabledFriendsOnly                         = 2,
	PvPRule_EnabledEnemiesOnly                         = 3,
	PvPRule_EnabledFriendsAndEnemiesOnly               = 4,
	PvPRule_MAX                                        = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etPvPType
/*enum etPvPType
{
	PvPType_Environment                                = 0,
	PvPType_PlayerEnforcer                             = 1,
	PvPType_PlayerCriminal                             = 2,
	PvPType_PlayerGM                                   = 3,
	PvPType_MAX                                        = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etRCEType
/*enum etRCEType
{
	RCEType_None                                       = 0,
	RCEType_Door                                       = 1,
	RCEType_Fence                                      = 2,
	RCEType_Ladder                                     = 3,
	RCEType_MAX                                        = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etSpawnConstant
/*enum etSpawnConstant
{
	SpawnConstant_ElectiveRespawnDelaySeconds          = 0,
	SpawnConstant_GroundPlacementHeightOffset          = 1,
	SpawnConstant_MinPlayerRespawnTime                 = 2,
	SpawnConstant_MissionDefaultRespawnTime            = 3,
	SpawnConstant_MissionDefaultRespawnTimeIncrement   = 4,
	SpawnConstant_MissionMinPlayerRespawnDistance      = 5,
	SpawnConstant_PlayerRespawnTimeTillTransition      = 6,
	SpawnConstant_RespawnTransitionScreenFadeInTime    = 7,
	SpawnConstant_RespawnTransitionScreenFadeOutTime   = 8,
	SpawnConstant_MAX                                  = 9
};*/

// Enum Engine.PhysicalMaterialSDD.etSpawnDestroyData
/*enum etSpawnDestroyData
{
	Spawn                                              = 0,
	Destroy                                            = 1,
	etSpawnDestroyData_MAX                             = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskItemAnimationType
/*enum etTaskItemAnimationType
{
	TaskItemAnimationType_None                         = 0,
	TaskItemAnimationType_Medium                       = 1,
	TaskItemAnimationType_Large                        = 2,
	TaskItemAnimationType_MAX                          = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskItemBatch
/*enum etTaskItemBatch
{
	TaskItemBatch_None                                 = 0,
	TaskItemBatch_A                                    = 1,
	TaskItemBatch_B                                    = 2,
	TaskItemBatch_C                                    = 3,
	TaskItemBatch_D                                    = 4,
	TaskItemBatch_E                                    = 5,
	TaskItemBatch_F                                    = 6,
	TaskItemBatch_G                                    = 7,
	TaskItemBatch_H                                    = 8,
	TaskItemBatch_MAX                                  = 9
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskItemSize
/*enum etTaskItemSize
{
	TaskItemSize_None                                  = 0,
	TaskItemSize_Small                                 = 1,
	TaskItemSize_MediumCarried                         = 2,
	TaskItemSize_LargeCarried                          = 3,
	TaskItemSize_Vehicle                               = 4,
	TaskItemSize_MAX                                   = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskItemSpecificationMethod
/*enum etTaskItemSpecificationMethod
{
	TISM_ByTaskItemVariety                             = 0,
	TISM_ByTaskItemSubCategory                         = 1,
	TISM_ByTaskItemCategory                            = 2,
	TISM_MAX                                           = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskItemVisibility
/*enum etTaskItemVisibility
{
	ItemVisibility_VisibleAlways                       = 0,
	ItemVisibility_HiddenAlways                        = 1,
	ItemVisibility_VisibleUntilFirstPickup             = 2,
	ItemVisibility_MAX                                 = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskMemberRequirement
/*enum etTaskMemberRequirement
{
	MemberRequirement_AllMembersSimultaneously         = 0,
	MemberRequirement_AllMembersSequentially           = 1,
	MemberRequirement_AnyMember                        = 2,
	MemberRequirement_MAX                              = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskObjectiveStage
/*enum etTaskObjectiveStage
{
	TaskObjectiveStage                                 = 0,
	TaskObjectiveStage_01                              = 1,
	TaskObjectiveStage_02                              = 2,
	TaskObjectiveStage_03                              = 3,
	TaskObjectiveStage_04                              = 4,
	TaskObjectiveStage_05                              = 5,
	TaskObjectiveStage_06                              = 6,
	TaskObjectiveStage_07                              = 7,
	TaskObjectiveStage_08                              = 8,
	TaskObjectiveStage_09                              = 9,
	TaskObjectiveStage01                               = 10,
	TaskObjectiveStage02                               = 11,
	TaskObjectiveStage03                               = 12,
	TaskObjectiveStage04                               = 13,
	TaskObjectiveStage05                               = 14,
	TaskObjectiveStage06                               = 15,
	TaskObjectiveStage07                               = 16,
	TaskObjectiveStage08                               = 17,
	TaskObjectiveStage09                               = 18,
	TaskObjectiveStage10                               = 19,
	TaskObjectiveStage11                               = 20,
	TaskObjectiveStage12                               = 21,
	TaskObjectiveStage13                               = 22,
	TaskObjectiveStage14                               = 23,
	TaskObjectiveStage15                               = 24,
	TaskObjectiveStage16                               = 25,
	TaskObjectiveStage17                               = 26,
	TaskObjectiveStage18                               = 27,
	TaskObjectiveStage19                               = 28,
	TaskObjectiveStage20                               = 29,
	TaskObjectiveStage21                               = 30,
	TaskObjectiveStage22                               = 31,
	TaskObjectiveStage23                               = 32,
	TaskObjectiveStage24                               = 33,
	TaskObjectiveStage25                               = 34,
	TaskObjectiveStage26                               = 35,
	TaskObjectiveStage27                               = 36,
	TaskObjectiveStage28                               = 37,
	TaskObjectiveStage29                               = 38,
	TaskObjectiveStage30                               = 39,
	TaskObjectiveStage_MAX                             = 40
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskOperationCategory
/*enum etTaskOperationCategory
{
	TaskOperationCategory_None                         = 0,
	TaskOperationCategory_AntiGraffiti                 = 1,
	TaskOperationCategory_ArmedGuard                   = 2,
	TaskOperationCategory_Arson                        = 3,
	TaskOperationCategory_BombDisposal                 = 4,
	TaskOperationCategory_Bombing                      = 5,
	TaskOperationCategory_Burglary                     = 6,
	TaskOperationCategory_Bust                         = 7,
	TaskOperationCategory_CrimeSceneInvestigation      = 8,
	TaskOperationCategory_Deathmatch                   = 9,
	TaskOperationCategory_DefaultOpposition            = 10,
	TaskOperationCategory_Delivery                     = 11,
	TaskOperationCategory_Escape                       = 12,
	TaskOperationCategory_Escort                       = 13,
	TaskOperationCategory_ForcedArrest                 = 14,
	TaskOperationCategory_ForcedEntry                  = 15,
	TaskOperationCategory_Graffiti                     = 16,
	TaskOperationCategory_Hacking                      = 17,
	TaskOperationCategory_MovingTarget                 = 18,
	TaskOperationCategory_Mugging                      = 19,
	TaskOperationCategory_Pickup                       = 20,
	TaskOperationCategory_RamRaid                      = 21,
	TaskOperationCategory_Rendezvous                   = 22,
	TaskOperationCategory_Sabotage                     = 23,
	TaskOperationCategory_StopAndSearch                = 24,
	TaskOperationCategory_Survival                     = 25,
	TaskOperationCategory_TakeOverDeathmatch           = 26,
	TaskOperationCategory_TerritoryControl             = 27,
	TaskOperationCategory_Vandalism                    = 28,
	TaskOperationCategory_VehicleCargo                 = 29,
	TaskOperationCategory_VehicleLooting               = 30,
	TaskOperationCategory_VehicleTheft                 = 31,
	TaskOperationCategory_MAX                          = 32
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskTargetCategory
/*enum etTaskTargetCategory
{
	TaskTargetCategory_None                            = 0,
	TaskTargetCategory_NPC_Pedestrian                  = 1,
	TaskTargetCategory_ParkedVehicle                   = 2,
	TaskTargetCategory_ObjectivePoint                  = 3,
	TaskTargetCategory_StaticActor                     = 4,
	TaskTargetCategory_TriggerVolume                   = 5,
	TaskTargetCategory_GraffitiPoint                   = 6,
	TaskTargetCategory_StandAloneProp                  = 7,
	TaskTargetCategory_ItemSpawnPoint                  = 8,
	TaskTargetCategory_Checkpoint                      = 9,
	TaskTargetCategory_MAX                             = 10
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskTargetClass
/*enum etTaskTargetClass
{
	TaskTargetClass_None                               = 0,
	TaskTargetClass_GraffitiPoint                      = 1,
	TaskTargetClass_ItemSpawnPoint                     = 2,
	TaskTargetClass_Checkpoint                         = 3,
	TaskTargetClass_NPC                                = 4,
	TaskTargetClass_Prop                               = 5,
	TaskTargetClass_VehicleSpawnPoint                  = 6,
	TaskTargetClass_MAX                                = 7
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskTargetGraffiti
/*enum etTaskTargetGraffiti
{
	Graffiti_Default                                   = 0,
	Graffiti_MAX                                       = 1
};*/

// Enum Engine.PhysicalMaterialSDD.etTaskTargetSpecificationMethod
/*enum etTaskTargetSpecificationMethod
{
	TTSM_SpecificTaskTargetType                        = 0,
	TTSM_AnyOneTypeFromClass                           = 1,
	TTSM_AnyMixFromClass                               = 2,
	TTSM_MAX                                           = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTESProjectionInfo
/*enum etTESProjectionInfo
{
	TESProjectionInfo_Body_MaxProjections              = 0,
	TESProjectionInfo_Body_MaxPrimitives               = 1,
	TESProjectionInfo_Body_AverageNumItems             = 2,
	TESProjectionInfo_ComplexityCutOff_LowMed          = 3,
	TESProjectionInfo_ComplexityCutOff_MedHigh         = 4,
	TESProjectionInfo_Vehicle_MaxProjections           = 5,
	TESProjectionInfo_Vehicle_MaxPrimitives            = 6,
	TESProjectionInfo_Symbol_MaxPrimitives             = 7,
	TESProjectionInfo_MAX                              = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etTimeOfDayAvailability
/*enum etTimeOfDayAvailability
{
	TimeOfDayAvailability_0000                         = 0,
	TimeOfDayAvailability_0001                         = 1,
	TimeOfDayAvailability_0010                         = 2,
	TimeOfDayAvailability_0011                         = 3,
	TimeOfDayAvailability_0100                         = 4,
	TimeOfDayAvailability_0101                         = 5,
	TimeOfDayAvailability_0110                         = 6,
	TimeOfDayAvailability_0111                         = 7,
	TimeOfDayAvailability                              = 8,
	TimeOfDayAvailability01                            = 9,
	TimeOfDayAvailability02                            = 10,
	TimeOfDayAvailability03                            = 11,
	TimeOfDayAvailability04                            = 12,
	TimeOfDayAvailability05                            = 13,
	TimeOfDayAvailability06                            = 14,
	TimeOfDayAvailability07                            = 15,
	TimeOfDayAvailability_Always                       = 16,
	TimeOfDayAvailability_MAX                          = 17
};*/

// Enum Engine.PhysicalMaterialSDD.etTimeofDayPeriod
/*enum etTimeofDayPeriod
{
	TimeofDayPeriod_Morning                            = 0,
	TimeofDayPeriod_Afternoon                          = 1,
	TimeofDayPeriod_Evening                            = 2,
	TimeofDayPeriod_Night                              = 3,
	TimeofDayPeriod_MAX                                = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etTrackedActivityFixed
/*enum etTrackedActivityFixed
{
	TrackedActivityFixed_None                          = 0,
	TrackedActivityFixed_ArrestStats_AgainstEnemy      = 1,
	TrackedActivityFixed_ArrestStats_RescuedFriendly   = 2,
	TrackedActivityFixed_KillStats_FriendlyKills       = 3,
	TrackedActivityFixed_MatchStats_TotalLost          = 4,
	TrackedActivityFixed_MatchStats_TotalWon           = 5,
	TrackedActivityFixed_MedalStats_MedalsWon          = 6,
	TrackedActivityFixed_MiscStats_ContactLevelUp      = 7,
	TrackedActivityFixed_TakeoutStats_AgainstEnemy     = 8,
	TrackedActivityFixed_TimeStats_TotalActionDistrictTime = 9,
	TrackedActivityFixed_TimeStats_TotalAnyEditorTime  = 10,
	TrackedActivityFixed_TimeStats_TotalClothingEditorTime = 11,
	TrackedActivityFixed_TimeStats_TotalGameTime       = 12,
	TrackedActivityFixed_TimeStats_TotalMusicEditorTime = 13,
	TrackedActivityFixed_TimeStats_TotalSymbolEditorTime = 14,
	TrackedActivityFixed_TimeStats_TotalVehicleEditorTime = 15,
	TrackedActivityFixed_Total_Deaths                  = 16,
	TrackedActivityFixed_Total_Kills                   = 17,
	TrackedActivityFixed_MAX                           = 18
};*/

// Enum Engine.PhysicalMaterialSDD.etTrackedActivityOperation
/*enum etTrackedActivityOperation
{
	TrackedActivityOperation_None                      = 0,
	TrackedActivityOperation_0_DivideBy                = 1,
	TrackedActivityOperation_0_DivideBy_1_Percent      = 2,
	TrackedActivityOperation_Sum                       = 3,
	TrackedActivityOperation_MAX                       = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etTrackedActivityUnitConversion
/*enum etTrackedActivityUnitConversion
{
	TrackedActivityUnitConversion_None                 = 0,
	TrackedActivityUnitConversion_Days_Hours_Minutes_Seconds = 1,
	TrackedActivityUnitConversion_FixedPoint           = 2,
	TrackedActivityUnitConversion_MAX                  = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTTINPCEndingType
/*enum etTTINPCEndingType
{
	Despawn                                            = 0,
	WalkAway                                           = 1,
	RunAway                                            = 2,
	Die                                                = 3,
	etTTINPCEndingType_MAX                             = 4
};*/

// Enum Engine.PhysicalMaterialSDD.etTTIPlayerAnimType
/*enum etTTIPlayerAnimType
{
	IntroAnim                                          = 0,
	MainAnim1                                          = 1,
	MainAnim2                                          = 2,
	MainAnim3                                          = 3,
	OutroAnim                                          = 4,
	IdleAnim                                           = 5,
	etTTIPlayerAnimType_MAX                            = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etTutorialBypassBehaviour
/*enum etTutorialBypassBehaviour
{
	TutorialBypassBehaviour_None                       = 0,
	TutorialBypassBehaviour_MaxOutTutorContacts_NoRewards = 1,
	TutorialBypassBehaviour_MaxOutTutorContacts_FullRewards = 2,
	TutorialBypassBehaviour_MAX                        = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTutorialPosition
/*enum etTutorialPosition
{
	TopLeft                                            = 0,
	MiddleLeft                                         = 1,
	BottomLeft                                         = 2,
	etTutorialPosition_MAX                             = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etTutorialType
/*enum etTutorialType
{
	Small                                              = 0,
	Large                                              = 1,
	etTutorialType_MAX                                 = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleBatch
/*enum etVehicleBatch
{
	VehicleBatch_None                                  = 0,
	VehicleBatch_A                                     = 1,
	VehicleBatch_B                                     = 2,
	VehicleBatch_C                                     = 3,
	VehicleBatch_D                                     = 4,
	VehicleBatch_E                                     = 5,
	VehicleBatch_F                                     = 6,
	VehicleBatch_G                                     = 7,
	VehicleBatch_H                                     = 8,
	VehicleBatch_MAX                                   = 9
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleColour
/*enum etVehicleColour
{
	White                                              = 0,
	Silver                                             = 1,
	Grey                                               = 2,
	SlateGrey                                          = 3,
	DarkGrey                                           = 4,
	Black                                              = 5,
	CadetBlue                                          = 6,
	RoyalBlue                                          = 7,
	MediumBlue                                         = 8,
	Blue                                               = 9,
	DarkBlueMike                                       = 10,
	LightSlateGrey                                     = 11,
	Cyan                                               = 12,
	MediumSeaGreen                                     = 13,
	SeaGreenStig                                       = 14,
	DarkCyan                                           = 15,
	DarkSeaGreen                                       = 16,
	Green                                              = 17,
	DarkGreen                                          = 18,
	DarkOliveGreen                                     = 19,
	Orange                                             = 20,
	Red                                                = 21,
	DarkRed                                            = 22,
	Brown                                              = 23,
	DarkBrownPranay                                    = 24,
	Khaki                                              = 25,
	HoneyDew                                           = 26,
	LightPink                                          = 27,
	Yellow                                             = 28,
	Golden                                             = 29,
	DarkOrange                                         = 30,
	DarkGolden                                         = 31,
	Silver_Metallic                                    = 32,
	Grey_Metallic                                      = 33,
	SlateGrey_Metallic                                 = 34,
	LightSlateGrey_Metallic                            = 35,
	DarkSeaGreen_Metallic                              = 36,
	HoneyDew_Metallic                                  = 37,
	Orange_Metallic                                    = 38,
	etVehicleColour_MAX                                = 39
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleDamageVFXState
/*enum etVehicleDamageVFXState
{
	VehicleDamageVFX_None                              = 0,
	VehicleDamageVFX_DamageState1                      = 1,
	VehicleDamageVFX_DamageState2                      = 2,
	VehicleDamageVFX_DamageState3                      = 3,
	VehicleDamageVFX_DamageState4                      = 4,
	VehicleDamageVFX_MAX                               = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleDistricts
/*enum etVehicleDistricts
{
	None_                                              = 0,
	Financial                                          = 1,
	etVehicleDistricts_MAX                             = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleDriveType
/*enum etVehicleDriveType
{
	kVehicleDriveRWD                                   = 0,
	kVehicleDriveFWD                                   = 1,
	kVehicleDriveAWD                                   = 2,
	etVehicleDriveType_MAX                             = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleGear
/*enum etVehicleGear
{
	VehicleGear_Reverse                                = 0,
	VehicleGear                                        = 1,
	VehicleGear01                                      = 2,
	VehicleGear02                                      = 3,
	VehicleGear03                                      = 4,
	VehicleGear04                                      = 5,
	VehicleGear05                                      = 6,
	VehicleGear_MAX                                    = 7
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleInteractionAnimation
/*enum etVehicleInteractionAnimation
{
	kVIA_Open_Door                                     = 0,
	kVIA_Close_Door                                    = 1,
	kVIA_Close_Door_From_Inside                        = 2,
	kVIA_Get_In_And_Close_Door                         = 3,
	kVIA_Open_Door_And_Get_Out                         = 4,
	kVIA_Open_Door_And_Bail_Out                        = 5,
	kVIA_Swap_Seats                                    = 6,
	kVIA_Enter_VCP                                     = 7,
	kVIA_Exit_VCP                                      = 8,
	kVIA_Eject_Doing_Initial_Criminal                  = 9,
	kVIA_Eject_Doing_Initial_Enforcer                  = 10,
	kVIA_Eject_Doing_Later_Criminal                    = 11,
	kVIA_Eject_Doing_Later_Enforcer                    = 12,
	kVIA_Eject_Seat_Slide_Criminal                     = 13,
	kVIA_Eject_Seat_Slide_Enforcer                     = 14,
	kVIA_Death                                         = 15,
	kVIA_DeathLean                                     = 16,
	kVIA_MAX                                           = 17
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleModelClass
/*enum etVehicleModelClass
{
	VehicleModelClass_CriminalGeneralPurpose           = 0,
	VehicleModelClass_CriminalPerformance              = 1,
	VehicleModelClass_CriminalCarrying                 = 2,
	VehicleModelClass_EnforcerGeneralPurpose           = 3,
	VehicleModelClass_EnforcerPerformance              = 4,
	VehicleModelClass_EnforcerCarrying                 = 5,
	VehicleModelClass_AmbientUtility                   = 6,
	VehicleModelClass_AmbientVan                       = 7,
	VehicleModelClass_AmbientSUV                       = 8,
	VehicleModelClass_AmbientTruck                     = 9,
	VehicleModelClass_MAX                              = 10
};*/

// Enum Engine.PhysicalMaterialSDD.etVehiclePositionIndex
/*enum etVehiclePositionIndex
{
	VehiclePositionIndex_FrontLeft                     = 0,
	VehiclePositionIndex_FrontRight                    = 1,
	VehiclePositionIndex_RearLeft                      = 2,
	VehiclePositionIndex_RearRight                     = 3,
	VehiclePositionIndex_Cargo                         = 4,
	VehiclePositionIndex_MAX                           = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleSetupType
/*enum etVehicleSetupType
{
	VehicleSetupType_None                              = 0,
	VehicleSetupType_AmbientSUV_PickupCamper           = 1,
	VehicleSetupType_AmbientSUV_PickupFrontVariant1    = 2,
	VehicleSetupType_AmbientSUV_PickupKingCab          = 3,
	VehicleSetupType_AmbientSUV_PickupWorks            = 4,
	VehicleSetupType_AmbientSUV_SUV                    = 5,
	VehicleSetupType_AmbientTruck_BoxBackCurtain       = 6,
	VehicleSetupType_AmbientTruck_BoxBackSolid         = 7,
	VehicleSetupType_AmbientTruck_CementMixer          = 8,
	VehicleSetupType_AmbientTruck_DumpTruck            = 9,
	VehicleSetupType_AmbientTruck_FireTruck            = 10,
	VehicleSetupType_AmbientTruck_GarbageTruck         = 11,
	VehicleSetupType_AmbientUtility_2DoorCabriolet     = 12,
	VehicleSetupType_AmbientUtility_2DoorCoupe         = 13,
	VehicleSetupType_AmbientUtility_2DoorHatchback     = 14,
	VehicleSetupType_AmbientUtility_2DoorHatchbackVan  = 15,
	VehicleSetupType_AmbientUtility_4DoorEstate        = 16,
	VehicleSetupType_AmbientUtility_4DoorEstateVan     = 17,
	VehicleSetupType_AmbientUtility_4DoorHatchback     = 18,
	VehicleSetupType_AmbientUtility_4DoorSedan         = 19,
	VehicleSetupType_AmbientUtility_4DoorSedanFrontVariant1 = 20,
	VehicleSetupType_AmbientUtility_4DoorSedanFrontVariant2 = 21,
	VehicleSetupType_AmbientUtility_4DoorSedanFrontVariant3 = 22,
	VehicleSetupType_AmbientUtility_ClassicMuscle      = 23,
	VehicleSetupType_AmbientUtility_ExecSaloon         = 24,
	VehicleSetupType_AmbientUtility_LowRider           = 25,
	VehicleSetupType_AmbientUtility_SportSUV           = 26,
	VehicleSetupType_AmbientUtility_Taxi               = 27,
	VehicleSetupType_AmbientVan_Ambulance              = 28,
	VehicleSetupType_AmbientVan_ArmouredVan            = 29,
	VehicleSetupType_AmbientVan_CamperVan              = 30,
	VehicleSetupType_AmbientVan_FrontVariant1          = 31,
	VehicleSetupType_AmbientVan_HighBoxBack            = 32,
	VehicleSetupType_AmbientVan_PrisonVan              = 33,
	VehicleSetupType_AmbientVan_StandardVan            = 34,
	VehicleSetupType_CriminalCarrying                  = 35,
	VehicleSetupType_CriminalCompact                   = 36,
	VehicleSetupType_CriminalGeneralPurpose            = 37,
	VehicleSetupType_CriminalPerformance               = 38,
	VehicleSetupType_EnforcerCarrying                  = 39,
	VehicleSetupType_EnforcerCompact                   = 40,
	VehicleSetupType_EnforcerGeneralPurpose            = 41,
	VehicleSetupType_EnforcerPerformance               = 42,
	VehicleSetupType_AmbientSUV_Pickup                 = 43,
	VehicleSetupType_AmbientUtility_Roadster           = 44,
	VehicleSetupType_MAX                               = 45
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleSpecificationMethod
/*enum etVehicleSpecificationMethod
{
	VehicleSpecification_ByVehicleCategory             = 0,
	VehicleSpecification_ByVehicleSubCategory          = 1,
	VehicleSpecification_SpecificVehicleSetupType      = 2,
	VehicleSpecification_MAX                           = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleTempSetup
/*enum etVehicleTempSetup
{
	VehicleTempSetup_2DoorCar                          = 0,
	VehicleTempSetup_4DoorCar                          = 1,
	VehicleTempSetup_KingCab                           = 2,
	VehicleTempSetup_Roadster                          = 3,
	VehicleTempSetup_VanStandard                       = 4,
	VehicleTempSetup_2DrCoupe                          = 5,
	VehicleTempSetup_2DrVan                            = 6,
	VehicleTempSetup_4DrEstate                         = 7,
	VehicleTempSetup_ClassicMuscle                     = 8,
	VehicleTempSetup_Utility1Estate                    = 9,
	VehicleTempSetup_EstateVan                         = 10,
	VehicleTempSetup_ExecSaloon                        = 11,
	VehicleTempSetup_Hatchback                         = 12,
	VehicleTempSetup_Lowrider                          = 13,
	VehicleTempSetup_Pickup                            = 14,
	VehicleTempSetup_Saloon                            = 15,
	VehicleTempSetup_SportsSUV                         = 16,
	VehicleTempSetup_SUV                               = 17,
	VehicleTempSetup_Taxi                              = 18,
	VehicleTempSetup_TruckCurtain                      = 19,
	VehicleTempSetup_VanAmbulance                      = 20,
	VehicleTempSetup_VanArmoured                       = 21,
	VehicleTempSetup_CrimCarrying                      = 22,
	VehicleTempSetup_CrimCompact                       = 23,
	VehicleTempSetup_CrimPerformance                   = 24,
	VehicleTempSetup_EnfCarrying                       = 25,
	VehicleTempSetup_EnfCompact                        = 26,
	VehicleTempSetup_EnfPerformance                    = 27,
	VehicleTempSetup_MAX                               = 28
};*/

// Enum Engine.PhysicalMaterialSDD.etVehicleUICategory
/*enum etVehicleUICategory
{
	VehicleUICategory_Civilian                         = 0,
	VehicleUICategory_Performance                      = 1,
	VehicleUICategory_Carrying                         = 2,
	VehicleUICategory_Luxury                           = 3,
	VehicleUICategory_Small                            = 4,
	VehicleUICategory_MAX                              = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etVIPAssignmentMethod
/*enum etVIPAssignmentMethod
{
	VIPAssignmentMethod_SideLeader                     = 0,
	VIPAssignmentMethod_HighestHeatPlayer              = 1,
	VIPAssignmentMethod_MAX                            = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etWarningPromptGroup
/*enum etWarningPromptGroup
{
	WPG_Warning_Email                                  = 0,
	WPG_Warning_Vending                                = 1,
	WPG_Warning_MAX                                    = 2
};*/

// Enum Engine.PhysicalMaterialSDD.etWeaponClass
/*enum etWeaponClass
{
	Grenade                                            = 0,
	Melee                                              = 1,
	Projectile                                         = 2,
	Raycast                                            = 3,
	ShotGun                                            = 4,
	Witnessing                                         = 5,
	etWeaponClass_MAX                                  = 6
};*/

// Enum Engine.PhysicalMaterialSDD.etWeaponFiringState
/*enum etWeaponFiringState
{
	WeaponNone                                         = 0,
	WeaponSemi                                         = 1,
	WeaponAuto                                         = 2,
	WeaponBurst                                        = 3,
	WeaponCooking                                      = 4,
	etWeaponFiringState_MAX                            = 5
};*/

// Enum Engine.PhysicalMaterialSDD.etWeaponImpactClass
/*enum etWeaponImpactClass
{
	WIC_Null                                           = 0,
	WIC_Small                                          = 1,
	WIC_Medium                                         = 2,
	WIC_Heavy                                          = 3,
	WIC_Explosive                                      = 4,
	WIC_Melee                                          = 5,
	WIC_Shotgun                                        = 6,
	WIC_NonLethal                                      = 7,
	WIC_MAX                                            = 8
};*/

// Enum Engine.PhysicalMaterialSDD.etWitnessingFunctionality
/*enum etWitnessingFunctionality
{
	RulesetWitnessing_Off                              = 0,
	RulesetWitnessing_HeatGenerated                    = 1,
	RulesetWitnessing_HeatAndMissionsGenerated         = 2,
	RulesetWitnessing_MAX                              = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etWorldFaction
/*enum etWorldFaction
{
	kWorldFaction_Normal                               = 0,
	kWorldFaction_Recommended                          = 1,
	kWorldFaction_Full                                 = 2,
	kWorldFaction_MAX                                  = 3
};*/

// Enum Engine.PhysicalMaterialSDD.etYesNoEither
/*enum etYesNoEither
{
	kYNE_Either                                        = 0,
	kYNE_Yes                                           = 1,
	kYNE_No                                            = 2,
	kYNE_MAX                                           = 3
};*/

// Enum Engine.PhysXParticleSystem.ESimulationMethod
/*enum ESimulationMethod
{
	ESM_SPH                                            = 0,
	ESM_NO_PARTICLE_INTERACTION                        = 1,
	ESM_MIXED_MODE                                     = 2,
	ESM_MAX                                            = 3
};*/

// Enum Engine.PhysXParticleSystem.EPacketSizeMultiplier
/*enum EPacketSizeMultiplier
{
	EPSM                                               = 0,
	EPSM01                                             = 1,
	EPSM02                                             = 2,
	EPSM03                                             = 3,
	EPSM04                                             = 4,
	EPSM05                                             = 5,
	EPSM_MAX                                           = 6
};*/

// Enum Engine.SceneCaptureComponent.ESceneCaptureViewMode
/*enum ESceneCaptureViewMode
{
	SceneCapView_Lit                                   = 0,
	SceneCapView_Unlit                                 = 1,
	SceneCapView_LitNoShadows                          = 2,
	SceneCapView_Wire                                  = 3,
	SceneCapView_MAX                                   = 4
};*/

// Enum Engine.PrefabInstance.EPrefabInstanceState
/*enum EPrefabInstanceState
{
	PIS_Uninitialised                                  = 0,
	PIS_Instantiated                                   = 1,
	PIS_PoolInstantiated                               = 2,
	PIS_PoolFree                                       = 3,
	PIS_Destroyed                                      = 4,
	PIS_MAX                                            = 5
};*/

// Enum Engine.PrefabInstance.EScalingRule
/*enum EScalingRule
{
	eSCALINGRULE_NoScaling                             = 0,
	eSCALINGRULE_UniformOnly                           = 1,
	eSCALINGRULE_AnyScaling                            = 2,
	eSCALINGRULE_MAX                                   = 3
};*/

// Enum Engine.RB_RadialForceActor.ERadialForceType
/*enum ERadialForceType
{
	RFT_Force                                          = 0,
	RFT_Impulse                                        = 1,
	RFT_MAX                                            = 2
};*/

// Enum Engine.Road.etVehicleSpawnFreq
/*enum etVehicleSpawnFreq
{
	kVSF_None                                          = 0,
	kVSF_VeryLow                                       = 1,
	kVSF_Low                                           = 2,
	kVSF_Medium                                        = 3,
	kVSF_High                                          = 4,
	kVSF_VeryHigh                                      = 5,
	kVSF_MAX                                           = 6
};*/

// Enum Engine.RoadReachSpec.etVehicleTypes
/*enum etVehicleTypes
{
	eCar                                               = 0,
	eBus                                               = 1,
	etVehicleTypes_MAX                                 = 2
};*/

// Enum Engine.Route.ERouteFillAction
/*enum ERouteFillAction
{
	RFA_Overwrite                                      = 0,
	RFA_Add                                            = 1,
	RFA_Remove                                         = 2,
	RFA_Clear                                          = 3,
	RFA_MAX                                            = 4
};*/

// Enum Engine.Route.ERouteDirection
/*enum ERouteDirection
{
	ERD_Forward                                        = 0,
	ERD_Reverse                                        = 1,
	ERD_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteType
/*enum ERouteType
{
	ERT_Linear                                         = 0,
	ERT_Loop                                           = 1,
	ERT_Circle                                         = 2,
	ERT_MAX                                            = 3
};*/

// Enum Engine.SeqAct_ActorFactory.EPointSelection
/*enum EPointSelection
{
	PS_Normal                                          = 0,
	PS_Random                                          = 1,
	PS_Reverse                                         = 2,
	PS_MAX                                             = 3
};*/

// Enum Engine.SeqEvent_ParticleEvent.EParticleEventOutputType
/*enum EParticleEventOutputType
{
	ePARTICLEOUT_Spawn                                 = 0,
	ePARTICLEOUT_Death                                 = 1,
	ePARTICLEOUT_Collision                             = 2,
	ePARTICLEOUT_Kismet                                = 3,
	ePARTICLEOUT_MAX                                   = 4
};*/

// Enum Engine.SkelControlBase.EBoneControlSpace
/*enum EBoneControlSpace
{
	BCS_WorldSpace                                     = 0,
	BCS_ActorSpace                                     = 1,
	BCS_ComponentSpace                                 = 2,
	BCS_ParentBoneSpace                                = 3,
	BCS_BoneSpace                                      = 4,
	BCS_OtherBoneSpace                                 = 5,
	BCS_MAX                                            = 6
};*/

// Enum Engine.SkelControlSpline.ESplineControlRotMode
/*enum ESplineControlRotMode
{
	SCR_NoChange                                       = 0,
	SCR_AlongSpline                                    = 1,
	SCR_Interpolate                                    = 2,
	SCR_MAX                                            = 3
};*/

// Enum Engine.SkeletalMesh.ClothBoneType
/*enum ClothBoneType
{
	CLOTHBONE_Fixed                                    = 0,
	CLOTHBONE_BreakableAttachment                      = 1,
	CLOTHBONE_MAX                                      = 2
};*/

// Enum Engine.SkeletalMesh.SoftBodyBoneType
/*enum SoftBodyBoneType
{
	SOFTBODYBONE_Fixed                                 = 0,
	SOFTBODYBONE_BreakableAttachment                   = 1,
	SOFTBODYBONE_TwoWayAttachment                      = 2,
	SOFTBODYBONE_MAX                                   = 3
};*/

// Enum Engine.SoundNodeWave.EDecompressionType
/*enum EDecompressionType
{
	DTYPE_Setup                                        = 0,
	DTYPE_Invalid                                      = 1,
	DTYPE_Preview                                      = 2,
	DTYPE_Native                                       = 3,
	DTYPE_RealTime                                     = 4,
	DTYPE_MAX                                          = 5
};*/

// Enum Engine.SoundNodeWave.ETTSSpeaker
/*enum ETTSSpeaker
{
	TTSSPEAKER_Paul                                    = 0,
	TTSSPEAKER_Harry                                   = 1,
	TTSSPEAKER_Frank                                   = 2,
	TTSSPEAKER_Dennis                                  = 3,
	TTSSPEAKER_Kit                                     = 4,
	TTSSPEAKER_Betty                                   = 5,
	TTSSPEAKER_Ursula                                  = 6,
	TTSSPEAKER_Rita                                    = 7,
	TTSSPEAKER_Wendy                                   = 8,
	TTSSPEAKER_MAX                                     = 9
};*/

// Enum Engine.SVehicleWheel.EWheelSide
/*enum EWheelSide
{
	SIDE_None                                          = 0,
	SIDE_Left                                          = 1,
	SIDE_Right                                         = 2,
	SIDE_MAX                                           = 3
};*/

// Enum Engine.TerrainMaterial.ETerrainMappingType
/*enum ETerrainMappingType
{
	TMT_Auto                                           = 0,
	TMT_XY                                             = 1,
	TMT_XZ                                             = 2,
	TMT_YZ                                             = 3,
	TMT_MAX                                            = 4
};*/

// Enum Engine.TextureFlipBook.TextureFlipBookMethod
/*enum TextureFlipBookMethod
{
	TFBM_UL_ROW                                        = 0,
	TFBM_UL_COL                                        = 1,
	TFBM_UR_ROW                                        = 2,
	TFBM_UR_COL                                        = 3,
	TFBM_LL_ROW                                        = 4,
	TFBM_LL_COL                                        = 5,
	TFBM_LR_ROW                                        = 6,
	TFBM_LR_COL                                        = 7,
	TFBM_RANDOM                                        = 8,
	TFBM_MAX                                           = 9
};*/

// Enum Engine.TextureMovie.EMovieStreamSource
/*enum EMovieStreamSource
{
	MovieStream_File                                   = 0,
	MovieStream_Memory                                 = 1,
	MovieStream_MAX                                    = 2
};*/

// Enum Engine.UIAction_FocusActions.EFocusActionResultIndex
/*enum EFocusActionResultIndex
{
	FOCUSACTRESULT_Success                             = 0,
	FOCUSACTRESULT_Failure                             = 1,
	FOCUSACTRESULT_MAX                                 = 2
};*/

// Enum Engine.UIAction_GetPrivilegeLevel.EFeaturePrivilegeMode
/*enum EFeaturePrivilegeMode
{
	FPM_Online                                         = 0,
	FPM_Chat                                           = 1,
	FPM_DownloadUserContent                            = 2,
	FPM_PurchaseContent                                = 3,
	FPM_MAX                                            = 4
};*/

// Enum Engine.UICalloutButtonPanel.ECalloutButtonLayoutType
/*enum ECalloutButtonLayoutType
{
	CBLT_None                                          = 0,
	CBLT_DockLeft                                      = 1,
	CBLT_DockRight                                     = 2,
	CBLT_MAX                                           = 3
};*/

// Enum Engine.UICond_IsFocused.ECondIsFocusedResultIndex
/*enum ECondIsFocusedResultIndex
{
	ISFOCUSEDRESULT_True                               = 0,
	ISFOCUSEDRESULT_False                              = 1,
	ISFOCUSEDRESULT_MAX                                = 2
};*/

// Enum Engine.UIList.EListWrapBehavior
/*enum EListWrapBehavior
{
	LISTWRAP_None                                      = 0,
	LISTWRAP_Smooth                                    = 1,
	LISTWRAP_Jump                                      = 2,
	LISTWRAP_MAX                                       = 3
};*/

// Enum Engine.UIList.ECellLinkType
/*enum ECellLinkType
{
	LINKED_None                                        = 0,
	LINKED_Rows                                        = 1,
	LINKED_Columns                                     = 2,
	LINKED_MAX                                         = 3
};*/

// Enum Engine.UIList.ECellAutoSizeMode
/*enum ECellAutoSizeMode
{
	CELLAUTOSIZE_None                                  = 0,
	CELLAUTOSIZE_Uniform                               = 1,
	CELLAUTOSIZE_Constrain                             = 2,
	CELLAUTOSIZE_AdjustList                            = 3,
	CELLAUTOSIZE_FillRemaining                         = 4,
	CELLAUTOSIZE_MAX                                   = 5
};*/

// Enum Engine.UIContextMenu.EContextMenuItemType
/*enum EContextMenuItemType
{
	CMIT_Normal                                        = 0,
	CMIT_Submenu                                       = 1,
	CMIT_Separator                                     = 2,
	CMIT_Check                                         = 3,
	CMIT_Radio                                         = 4,
	CMIT_MAX                                           = 5
};*/

// Enum Engine.UIDataStore_OnlineStats.EStatsFetchType
/*enum EStatsFetchType
{
	SFT_Player                                         = 0,
	SFT_CenteredOnPlayer                               = 1,
	SFT_Friends                                        = 2,
	SFT_TopRankings                                    = 3,
	SFT_MAX                                            = 4
};*/

// Enum Engine.UIEvent_OnListCellMouseOver.EEventOnMouseOverResultIndex
/*enum EEventOnMouseOverResultIndex
{
	ONLISTCELLMOUSEOVERRESULT_Active                   = 0,
	ONLISTCELLMOUSEOVERRESULT_OnLeave                  = 1,
	ONLISTCELLMOUSEOVERRESULT_MAX                      = 2
};*/

// Enum Engine.UIFrameBox.EFrameBoxImage
/*enum EFrameBoxImage
{
	FBI_TopLeft                                        = 0,
	FBI_Top                                            = 1,
	FBI_TopRight                                       = 2,
	FBI_CenterLeft                                     = 3,
	FBI_Center                                         = 4,
	FBI_CenterRight                                    = 5,
	FBI_BottomLeft                                     = 6,
	FBI_Bottom                                         = 7,
	FBI_BottomRight                                    = 8,
	FBI_MAX                                            = 9
};*/

// Enum Engine.UIScene.ESceneLayer
/*enum ESceneLayer
{
	SceneLayer_HUD_WS                                  = 0,
	SceneLayer_HUD_2D                                  = 1,
	SceneLayer_MainDialog                              = 2,
	SceneLayer_CustomCanvas                            = 3,
	SceneLayer_CustomScene                             = 4,
	SceneLayer_CustomMain                              = 5,
	SceneLayer_ChatDialog                              = 6,
	SceneLayer_MessageDialog                           = 7,
	SceneLayer_MAX                                     = 8
};*/

// Enum Engine.UISafeRegionPanel.ESafeRegionType
/*enum ESafeRegionType
{
	ESRT_FullRegion                                    = 0,
	ESRT_TextSafeRegion                                = 1,
	ESRT_MAX                                           = 2
};*/

// Enum Engine.UITabControl.EUITabAutosizeType
/*enum EUITabAutosizeType
{
	TAST_Manual                                        = 0,
	TAST_Fill                                          = 1,
	TAST_Auto                                          = 2,
	TAST_Const                                         = 3,
	TAST_MAX                                           = 4
};*/

// Enum Engine.Weapon.EWeaponFireType
/*enum EWeaponFireType
{
	EWFT_InstantHit                                    = 0,
	EWFT_Projectile                                    = 1,
	EWFT_Custom                                        = 2,
	EWFT_None                                          = 3,
	EWFT_MAX                                           = 4
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class Engine.ActorComponent
// 0x000D (0x0059 - 0x004C)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                            		// 0x004C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class AActor*                                      Owner;                                            		// 0x0050 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAttached : 1;                                    		// 0x0054 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bTickInEditor : 1;                                		// 0x0054 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bNeedsReattach : 1;                               		// 0x0054 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNeedsUpdateTransform : 1;                        		// 0x0054 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x0058 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorComponent" );

		return pClassPointer;
	};

	void ForceUpdate ( unsigned long bTransformOnly );
	void SetComponentRBFixed ( unsigned long bFixed );
	void SetTickGroup ( unsigned char NewTickGroup );
};

UClass* UActorComponent::pClassPointer = NULL;

// Class Engine.cBlobShadowComponent
// 0x00AB (0x0104 - 0x0059)
class UcBlobShadowComponent : public UActorComponent
{
public:
	unsigned long                                      m_bEnabled : 1;                                   		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FVector                                     m_Scale3D;                                        		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     m_Translation;                                    		// 0x006C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture*                                    m_Texture;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCullDistance;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMatrix                                     m_CachedParentToWorld;                            		// 0x0080 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FMatrix                                     m_LocalToWorld;                                   		// 0x00C0 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    SceneInfo;                                        		// 0x0100 (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cBlobShadowComponent" );

		return pClassPointer;
	};

	void RecalcLocalToWorld ( );
	void SetTranslation ( struct FVector Translation );
	void SetScale3D ( struct FVector Scale3D );
};

UClass* UcBlobShadowComponent::pClassPointer = NULL;

// Class Engine.AudioComponent
// 0x014F (0x01A8 - 0x0059)
class UAudioComponent : public UActorComponent
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  CueFirstNode;                                     		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FAudioComponentParam >              InstanceParameters;                               		// 0x0064 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bUseOwnerLocation : 1;                            		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoPlay : 1;                                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAutoDestroy : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                      		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasOccluded : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0070 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWasPlaying : 1;                                  		// 0x0070 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bApplyEffects : 1;                                		// 0x0070 (0x0004) [0x0000000000001002] [0x00000100] ( CPF_Const | CPF_Native )
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x0070 (0x0004) [0x0000000000001000] [0x00000200] ( CPF_Native )
	unsigned long                                      bAllowSpatialization : 1;                         		// 0x0070 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIsUISound : 1;                                   		// 0x0070 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsMusic : 1;                                     		// 0x0070 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bNoReverb : 1;                                    		// 0x0070 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bFinished : 1;                                    		// 0x0070 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bIgnoreForFlushing : 1;                           		// 0x0070 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	TArray< struct FPointer >                          WaveInstances;                                    		// 0x0074 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            SoundNodeData;                                    		// 0x0080 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x008C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                            		// 0x00C8 (0x003C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Listener;                                         		// 0x0104 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	float                                              PlaybackTime;                                     		// 0x0108 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	class APortalVolume*                               PortalVolume;                                     		// 0x010C (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FVector                                     Location;                                         		// 0x0110 (0x000C) [0x0000000000201000]              ( CPF_Native )
	struct FVector                                     ComponentLocation;                                		// 0x011C (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	float                                              SubtitlePriority;                                 		// 0x0128 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              FadeInStartTime;                                  		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              FadeInStopTime;                                   		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              FadeInTargetVolume;                               		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              FadeOutStartTime;                                 		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              FadeOutStopTime;                                  		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              FadeOutTargetVolume;                              		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStartTime;                            		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStopTime;                             		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeTargetVolume;                         		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              CurrAdjustVolumeTargetVolume;                     		// 0x0150 (0x0004) [0x0000000000000000]              
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                  		// 0x0154 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     CurrentLocation;                                  		// 0x0158 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolume;                                    		// 0x0164 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitch;                                     		// 0x0168 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGain;                         		// 0x016C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSpatialization;                         		// 0x0170 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSeamlessLooping;                        		// 0x0174 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolumeMultiplier;                          		// 0x0178 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitchMultiplier;                           		// 0x017C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceCenterChannelVolume;                  		// 0x0180 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceRadioVolume;                          		// 0x0184 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              VolumeMultiplier;                                 		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionCheckInterval;                           		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              LastOcclusionCheckTime;                           		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                               		// 0x0198 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                      		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AudioComponent" );

		return pClassPointer;
	};

	void eventOcclusionChanged ( unsigned long bNowOccluded );
	void OnAudioFinished ( class UAudioComponent* AC );
	void ResetToDefaults ( );
	void SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave );
	void SetFloatParameter ( struct FName InName, float InFloat );
	void AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel );
	void FadeOut ( float FadeOutDuration, float FadeVolumeLevel );
	void FadeIn ( float FadeInDuration, float FadeVolumeLevel );
	bool IsPlaying ( );
	void Stop ( );
	void Play ( );
};

UClass* UAudioComponent::pClassPointer = NULL;

// Class Engine.PrimitiveComponent
// 0x017F (0x01D8 - 0x0059)
class UPrimitiveComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                        		// 0x005C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                DetachFence;                                      		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LocalToWorldDeterminant;                          		// 0x0064 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                     		// 0x0070 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                MotionBlurInfoIndex;                              		// 0x00B0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          DecalList;                                        		// 0x00B4 (0x000C) [0x0000000001001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	int                                                Tag;                                              		// 0x00C0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UPrimitiveComponent*                         ShadowParent;                                     		// 0x00C4 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                               		// 0x00C8 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FBoxSphereBounds                            Bounds;                                           		// 0x00CC (0x001C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x00E8 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CullDistance;                                     		// 0x00EC (0x0004) [0x0000000000800003]              ( CPF_Edit | CPF_Const | CPF_NoExport )
	float                                              CachedCullDistance;                               		// 0x00F0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      DepthPriorityGroup;                               		// 0x00F4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ViewOwnerDepthPriorityGroup;                      		// 0x00F5 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      DetailMode;                                       		// 0x00F6 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MotionBlurScale;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;              		// 0x00FC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAllowCullDistanceVolume : 1;                     		// 0x00FC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x00FC (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x00FC (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bShowCollision : 1;                             		// 0x00FC (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x00FC (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x00FC (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreOwnerHidden : 1;                           		// 0x00FC (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseAsOccluder : 1;                               		// 0x00FC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowApproximateOcclusion : 1;                   		// 0x00FC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bSelectable : 1;                                  		// 0x00FC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bAcceptsDecals : 1;                               		// 0x00FC (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDecalsDuringGameplay : 1;                 		// 0x00FC (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsRefreshingDecals : 1;                          		// 0x00FC (0x0004) [0x0000000000003002] [0x00002000] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bAcceptsFoliage : 1;                              		// 0x00FC (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	int                                                TranslucencySortPriority;                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWriteOpaqueAlpha : 1;                            		// 0x0104 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      CastShadow : 1;                                   		// 0x0104 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0104 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0104 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastHiddenShadow : 1;                            		// 0x0104 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x0104 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bExcludeFromLightEnvironmentBounds : 1;           		// 0x0104 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bLightMapAndAOShadowsOnly : 1;                    		// 0x0104 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0104 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0104 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FsAPBCollision                              APBCollision;                                     		// 0x010C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUsePrecomputedShadows : 1;                       		// 0x0120 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCullModulatedShadowOnBackfaces : 1;              		// 0x0120 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCullModulatedShadowOnEmissive : 1;               		// 0x0120 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowAmbientOcclusion : 1;                       		// 0x0120 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      CollideActors : 1;                                		// 0x0120 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      AlwaysCheckCollision : 1;                         		// 0x0120 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x0120 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x0120 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x0120 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0120 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      RigidBodyIgnorePawns : 1;                         		// 0x0120 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x0124 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct UPrimitiveComponent_FRBCollisionChannelContainer RBCollideWithChannels;                            		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableAllRigidBody : 1;                         		// 0x012C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x012C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidDrain : 1;                                  		// 0x012C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidTwoWay : 1;                                 		// 0x012C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreRadialImpulse : 1;                         		// 0x012C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIgnoreRadialForce : 1;                           		// 0x012C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIgnoreForceField : 1;                            		// 0x012C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x012C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysLoadOnClient : 1;                           		// 0x012C (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      AlwaysLoadOnServer : 1;                           		// 0x012C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                		// 0x012C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bWasSNFiltered : 1;                               		// 0x012C (0x0004) [0x0000000000003002] [0x00000800] ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      OctreeNodes;                                      		// 0x0130 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x0140 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      RBDominanceGroup;                                 		// 0x0144 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0xB ];                             		// 0x0145 (0x000B) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x0150 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Translation;                                      		// 0x0190 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x019C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Scale;                                            		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale3D;                                          		// 0x01AC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x01B8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteRotation : 1;                             		// 0x01B8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteScale : 1;                                		// 0x01B8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              LastSubmitTime;                                   		// 0x01BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           m_asStaticDecals;                                 		// 0x01C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_eAPBType;                                       		// 0x01D0 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_TNTPrimitiveType;                               		// 0x01D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_StatLodOverride;                                		// 0x01D2 (0x0001) [0x0000000000000000]              
	float                                              ScriptRigidBodyCollisionThreshold;                		// 0x01D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PrimitiveComponent" );

		return pClassPointer;
	};

	struct FRotator GetRotation ( );
	struct FVector GetPosition ( );
	void SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale );
	void SetScale3D ( struct FVector NewScale3D );
	void SetScale ( float NewScale );
	void SetRotation ( struct FRotator NewRotation );
	void SetTranslation ( struct FVector NewTranslation );
	void SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision );
	void SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent );
	void SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void SetCastShadow ( unsigned long bNewCastShadow );
	void SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels );
	float RetCullDistance ( );
	void SetCullDistance ( float NewCullDistance );
	void SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment );
	void SetShadowParent ( class UPrimitiveComponent* NewShadowParent );
	void SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetOwnerNoSee ( unsigned long bNewOwnerNoSee );
	void SetHidden ( unsigned long NewHidden );
	void SetRigidBodyAwake ( unsigned long bAwake );
	void SetRigidBodyGravityResponse ( unsigned long bGravityResponse );
	void SetRigidBodyIsTrigger ( unsigned long bNewIsTrigger );
	void SetAPBCollision ( struct FsAPBCollision newAPBCollision );
	void SetRBDominanceGroup ( unsigned char InDomGroup );
	class URB_BodyInstance* GetRootBodyInstance ( );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void InitRBPhys ( );
	void SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision );
	void SetRBChannel ( unsigned char Channel );
	void SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	bool RigidBodyIsAwake ( struct FName BoneName );
	void PutRigidBodyToSleep ( struct FName BoneName );
	void WakeRigidBody ( struct FName BoneName );
	void SetRBRotation ( struct FRotator NewRot, struct FName BoneName );
	void SetRBPosition ( struct FVector NewPos, struct FName BoneName );
	void SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent );
	void SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent );
	void AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff );
	void AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName );
	void AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange );
	void AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange );
};

UClass* UPrimitiveComponent::pClassPointer = NULL;

// Class Engine.CylinderComponent
// 0x000C (0x01E4 - 0x01D8)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                  		// 0x01D8 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              CollisionRadius;                                  		// 0x01DC (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	class URB_BodySetup*                               BodySetup;                                        		// 0x01E0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CylinderComponent" );

		return pClassPointer;
	};

	void SetCylinderSize ( float NewRadius, float NewHeight );
	void UpdateCosmeticCollision ( );
};

UClass* UCylinderComponent::pClassPointer = NULL;

// Class Engine.cVisualFXComponent
// 0x003F (0x0098 - 0x0059)
class UcVisualFXComponent : public UActorComponent
{
public:
	TArray< class AActor* >                            aReplacedActors;                                  		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FEnumeratedName                             m_eVFXType;                                       		// 0x0068 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      AttachmentBase;                                   		// 0x0078 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      AttachmentSkelComp;                               		// 0x007C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       AttachmentName;                                   		// 0x0080 (0x0008) [0x0000000000000000]              
	TArray< class APrefabInstance* >                   aInstances;                                       		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_actorsReplaced;                                 		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cVisualFXComponent" );

		return pClassPointer;
	};

	void CheckComplete ( class USequence* Sequence );
	void SetVFXActors ( unsigned long bHasVFX );
};

UClass* UcVisualFXComponent::pClassPointer = NULL;

// Class Engine.LightEnvironmentComponent
// 0x000F (0x0068 - 0x0059)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bForceIncludeExcluded : 1;                      		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              m_ExcludedLightBlend;                             		// 0x0060 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x0064 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LightEnvironmentComponent" );

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bNewEnabled );
};

UClass* ULightEnvironmentComponent::pClassPointer = NULL;

// Class Engine.DynamicLightEnvironmentComponent
// 0x0078 (0x00E0 - 0x0068)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                            		// 0x0068 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              InvisibleUpdateTime;                              		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTimeBetweenFullUpdates;                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumVolumeVisibilitySamples;                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x0078 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientGlow;                                      		// 0x0094 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightDesaturation;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightDistance;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowDistance;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCastShadows : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDynamic : 1;                                     		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSynthesizeDirectionalLight : 1;                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bFreeze : 1;                                      		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bWorldSpaceVisibilityOriginOffset : 1;          		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bAllowSHLightBeforeModShadows : 1;              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              ModShadowFadeoutTime;                             		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutExponent;                         		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShadowFilterQuality;                              		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightShadowMode;                                  		// 0x00BD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncedLightingIntensity;                         		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncedLightingDesaturation;                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaxSkylightRays;                               		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_VisibilityOriginOffset;                         		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_MinShadowInterpTime;                            		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_LightEnvironmentListIndex;                      		// 0x00DC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicLightEnvironmentComponent" );

		return pClassPointer;
	};

};

UClass* UDynamicLightEnvironmentComponent::pClassPointer = NULL;

// Class Engine.MeshComponent
// 0x0010 (0x01E8 - 0x01D8)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x01D8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    m_LODPolicy;                                      		// 0x01E4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MeshComponent" );

		return pClassPointer;
	};

	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex );
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant ( int ElementIndex );
	int GetNumElements ( );
	void SetMaterial ( int ElementIndex, class UMaterialInterface* Material );
	class UMaterialInterface* GetMaterial ( int ElementIndex );
};

UClass* UMeshComponent::pClassPointer = NULL;

// Class Engine.StaticMeshComponent
// 0x0060 (0x0248 - 0x01E8)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                   		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                PreviousLODLevel;                                 		// 0x01EC (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 StaticMesh;                                       		// 0x01F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      WireframeColor;                                   		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;           		// 0x01F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOverrideLightMapResolution : 1;                  		// 0x01F8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	int                                                OverriddenLightMapResolution;                     		// 0x01FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SubDivisionStepSize;                              		// 0x0200 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MinSubDivisions;                                  		// 0x0204 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxSubDivisions;                                  		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSubDivisions : 1;                             		// 0x020C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipLightmapInit : 1;                            		// 0x020C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x0210 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FStaticMeshComponentLODInfo >       LODData;                                          		// 0x021C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FMaterialArray >                    LODMaterials;                                     		// 0x0228 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              m_fDepthBias;                                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSlopeScaleDepthBias;                           		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRenderCommandFence                         ReleaseLightmapFence;                             		// 0x023C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FName                                       m_VertexLitComponent;                             		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.StaticMeshComponent" );

		return pClassPointer;
	};

	void DisableRBCollisionWithSMC ( class UStaticMeshComponent* OtherSMC, unsigned long bDisabled );
	bool SetStaticMesh ( class UStaticMesh* NewMesh );
};

UClass* UStaticMeshComponent::pClassPointer = NULL;

// Class Engine.Engine
// 0x03F8 (0x043C - 0x0044)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     TinyFontName;                                     		// 0x0048 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       SmallFont;                                        		// 0x0054 (0x0004) [0x0000000000000000]              
	struct FString                                     SmallFontName;                                    		// 0x0058 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       MediumFont;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FString                                     MediumFontName;                                   		// 0x0068 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       LargeFont;                                        		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     LargeFontName;                                    		// 0x0078 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       SubtitleFont;                                     		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     SubtitleFontName;                                 		// 0x0088 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< class UFont* >                             AdditionalFonts;                                  		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           AdditionalFontNames;                              		// 0x00A0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      ConsoleClass;                                     		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FString                                     ConsoleClassName;                                 		// 0x00B0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      GameViewportClientClass;                          		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FString                                     GameViewportClientClassName;                      		// 0x00C0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      DataStoreClientClass;                             		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FString                                     DataStoreClientClassName;                         		// 0x00D0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      LocalPlayerClass;                                 		// 0x00DC (0x0004) [0x0000000000000000]              
	struct FString                                     LocalPlayerClassName;                             		// 0x00E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultMaterial;                                  		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultMaterialName;                              		// 0x00F0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture*                                    DefaultTexture;                                   		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultTextureName;                               		// 0x0100 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   WireframeMaterial;                                		// 0x010C (0x0004) [0x0000000000000000]              
	struct FString                                     WireframeMaterialName;                            		// 0x0110 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   EmissiveTexturedMaterial;                         		// 0x011C (0x0004) [0x0000000000000000]              
	struct FString                                     EmissiveTexturedMaterialName;                     		// 0x0120 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   GeomMaterial;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	struct FString                                     GeomMaterialName;                                 		// 0x0130 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultFogVolumeMaterial;                         		// 0x013C (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultFogVolumeMaterialName;                     		// 0x0140 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TickMaterial;                                     		// 0x014C (0x0004) [0x0000000000000000]              
	struct FString                                     TickMaterialName;                                 		// 0x0150 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   CrossMaterial;                                    		// 0x015C (0x0004) [0x0000000000000000]              
	struct FString                                     CrossMaterialName;                                		// 0x0160 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LevelColorationLitMaterial;                       		// 0x016C (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColorationLitMaterialName;                   		// 0x0170 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LevelColorationUnlitMaterial;                     		// 0x017C (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColorationUnlitMaterialName;                 		// 0x0180 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   RemoveSurfaceMaterial;                            		// 0x018C (0x0004) [0x0000000000000000]              
	struct FString                                     RemoveSurfaceMaterialName;                        		// 0x0190 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorMaterial;                              		// 0x019C (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorMaterialName;                          		// 0x01A0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FColor >                            LightComplexityColors;                            		// 0x01AC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FColor >                            ShaderComplexityColors;                           		// 0x01B8 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	unsigned long                                      bUsePixelShaderComplexity : 1;                    		// 0x01C4 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseAdditiveComplexity : 1;                       		// 0x01C4 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bAboveGarbageCollectionMemoryCeiling : 1;       		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bEnableAPBMapFixup : 1;                         		// 0x01C4 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bShowWarningMarker : 1;                         		// 0x01C4 (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseSound : 1;                                    		// 0x01C4 (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDisableSoundUpdates : 1;                         		// 0x01C4 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseTextureStreaming : 1;                         		// 0x01C4 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseLightingTextureStreaming : 1;                 		// 0x01C4 (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                 		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bSubtitlesEnabled : 1;                            		// 0x01C4 (0x0004) [0x0000000000004001] [0x00000400] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesForcedOff : 1;                          		// 0x01C4 (0x0004) [0x0000000000004001] [0x00000800] ( CPF_Edit | CPF_Config )
	unsigned long                                      bForceStaticTerrain : 1;                          		// 0x01C4 (0x0004) [0x0000000000004001] [0x00001000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x01C4 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bUsePostProcessEffects : 1;                       		// 0x01C4 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bOnScreenKismetWarnings : 1;                      		// 0x01C4 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bEnableKismetLogging : 1;                         		// 0x01C4 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      bAllowMatureLanguage : 1;                         		// 0x01C4 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bRenderTerrainCollisionAsOverlay : 1;             		// 0x01C4 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bDisablePhysXHardwareSupport : 1;                 		// 0x01C4 (0x0004) [0x0000000000004000] [0x00080000] ( CPF_Config )
	unsigned long                                      bPauseOnLossOfFocus : 1;                          		// 0x01C4 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bEnableColorClear : 1;                            		// 0x01C4 (0x0004) [0x0000000000044002] [0x00200000] ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseDynamicOrigin : 1;                            		// 0x01C4 (0x0004) [0x0000000000004001] [0x00400000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bShowOnscreenWarnings : 1;                        		// 0x01C4 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	float                                              MaxPixelShaderAdditiveComplexityCount;            		// 0x01C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxPixelShaderOpaqueComplexityCount;              		// 0x01CC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxVertexShaderComplexityCount;                   		// 0x01D0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTextureDensity;                                		// 0x01D4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealTextureDensity;                              		// 0x01D8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTextureDensity;                                		// 0x01DC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FStatColorMapping >                 StatColorMappings;                                		// 0x01E0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   EditorBrushMaterial;                              		// 0x01EC (0x0004) [0x0000000000000000]              
	struct FString                                     EditorBrushMaterialName;                          		// 0x01F0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x01FC (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPhysMaterialName;                          		// 0x0200 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TerrainErrorMaterial;                             		// 0x020C (0x0004) [0x0000000000000000]              
	struct FString                                     TerrainErrorMaterialName;                         		// 0x0210 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                TerrainMaterialMaxTextureCount;                   		// 0x021C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                TerrainTessellationCheckCount;                    		// 0x0220 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TerrainTessellationCheckDistance;                 		// 0x0224 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UClass*                                      OnlineSubsystemClass;                             		// 0x0228 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultOnlineSubsystemName;                       		// 0x022C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UPostProcessChain*                           DefaultPostProcess;                               		// 0x0238 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPostProcessName;                           		// 0x023C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                 		// 0x0248 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;             		// 0x024C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;               		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailParticleSystemPostProcessName;           		// 0x025C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                     		// 0x0268 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailMaterialPostProcessName;                 		// 0x026C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           DefaultUIScenePostProcess;                        		// 0x0278 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultUIScenePostProcessName;                    		// 0x027C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      m_BuildManagerClass;                              		// 0x0288 (0x0004) [0x0000000000000000]              
	struct FString                                     m_BuildManagerClassName;                          		// 0x028C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultUICaretMaterial;                           		// 0x0298 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultUICaretMaterialName;                       		// 0x029C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                 		// 0x02A8 (0x0004) [0x0000000000000000]              
	struct FString                                     SceneCaptureReflectActorMaterialName;             		// 0x02AC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                    		// 0x02B8 (0x0004) [0x0000000000000000]              
	struct FString                                     SceneCaptureCubeActorMaterialName;                		// 0x02BC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomAngleTexture;                               		// 0x02C8 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomAngleTextureName;                           		// 0x02CC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomNormalTexture;                              		// 0x02D8 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomNormalTextureName;                          		// 0x02DC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture*                                    WeightMapPlaceholderTexture;                      		// 0x02E8 (0x0004) [0x0000000000000000]              
	struct FString                                     WeightMapPlaceholderTextureName;                  		// 0x02EC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class USoundNodeWave*                              DefaultSound;                                     		// 0x02F8 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultSoundName;                                 		// 0x02FC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              TimeBetweenPurgingPendingKillObjects;             		// 0x0308 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              GarbageCollectionMemoryCeilingGb;                 		// 0x030C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UcConsoleCommandManager*                     m_CommandManager;                                 		// 0x0310 (0x0004) [0x0000000000000000]              
	class UcMemDbgPageWin32*                           m_MyMemDbgPage;                                   		// 0x0314 (0x0004) [0x0000000000000000]              
	class UcDynamicFontManager*                        m_DynamicFontManager;                             		// 0x0318 (0x0004) [0x0000000000000000]              
	class UObject*                                     m_CustomisationSettings;                          		// 0x031C (0x0004) [0x0000000000000000]              
	class UClass*                                      m_CustomisationSettingsClass;                     		// 0x0320 (0x0004) [0x0000000000000000]              
	struct FString                                     m_CustomisationSettingsClassName;                 		// 0x0324 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UObject*                                     m_AttributeManager;                               		// 0x0330 (0x0004) [0x0000000000000000]              
	class UClass*                                      m_AttributeManagerClass;                          		// 0x0334 (0x0004) [0x0000000000000000]              
	struct FString                                     m_AttributeManagerClassName;                      		// 0x0338 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UcBuildManagerBase*                          m_AssetBuildManager;                              		// 0x0344 (0x0004) [0x0000000000000000]              
	class UcWeatherManagerBase*                        m_WeatherManagerBase;                             		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClient*                                     Client;                                           		// 0x034C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class ULocalPlayer* >                      GamePlayers;                                      		// 0x0350 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UGameViewportClient*                         GameViewport;                                     		// 0x035C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FString >                           DeferredCommands;                                 		// 0x0360 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                TickCycles;                                       		// 0x036C (0x0004) [0x0000000000000000]              
	int                                                GameCycles;                                       		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                ClientCycles;                                     		// 0x0374 (0x0004) [0x0000000000000000]              
	class UDebugManager*                               DebugManager;                                     		// 0x0378 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    RemoteControlExec;                                		// 0x037C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FColor                                      C_WorldBox;                                       		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushWire;                                      		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_AddWire;                                        		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SubtractWire;                                   		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SemiSolidWire;                                  		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_NonSolidWire;                                   		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_WireBackground;                                 		// 0x0398 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_ScaleBoxHi;                                     		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_VolumeCollision;                                		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BSPCollision;                                   		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_OrthoBackground;                                		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_Volume;                                         		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceFactor;                          		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ScoutClassName;                                   		// 0x03B4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      TransitionType;                                   		// 0x03C0 (0x0001) [0x0000000000000000]              
	struct FString                                     TransitionDescription;                            		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TransitionGameType;                               		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MeshLODRange;                                     		// 0x03DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraRotationThreshold;                          		// 0x03E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraTranslationThreshold;                       		// 0x03E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PrimitiveProbablyVisibleTime;                     		// 0x03E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentUnoccludedRequeries;                       		// 0x03EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxFluidNumVerts;                                 		// 0x03F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSimulationTimeLimit;                         		// 0x03F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResize;                                		// 0x03F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResizeWarn;                            		// 0x03FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   TerrainCollisionMaterial;                         		// 0x0400 (0x0004) [0x0000000000000000]              
	struct FString                                     TerrainCollisionMaterialName;                     		// 0x0404 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                BeginUPTryCount;                                  		// 0x0410 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FDropNoteInfo >                     PendingDroppedNotes;                              		// 0x0414 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DynamicCoverMeshComponentName;                    		// 0x0420 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              NetClientTicksPerSecond;                          		// 0x042C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              fCullCoefficient;                                 		// 0x0430 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UcDebugPage*                                 m_ObjectStreamingDebugPage;                       		// 0x0434 (0x0004) [0x0000000000000000]              
	int                                                nDrawSharedOptimisationMode;                      		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Engine" );

		return pClassPointer;
	};

	void AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth );
	void AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered );
	class UEngine* GetGEngine ( );
	void RemoveAllOverlays ( );
	void StopMovie ( unsigned long bDelayStopUntilGameHasRendered );
	bool PlayLoadMapMovie ( );
	struct FString GetLastMovieName ( );
	class UAudioDevice* GetAudioDevice ( );
	bool IsSplitScreen ( );
	class UFont* GetAdditionalFont ( int AdditionalFontIndex );
	class UFont* GetLargeFont ( );
	class UFont* GetMediumFont ( );
	class UFont* GetSmallFont ( );
	class UFont* GetTinyFont ( );
	class AWorldInfo* GetCurrentWorldInfo ( );
	void eventReportScriptVersion ( );
	void eventOnBeginPlay ( );
	void OnWorldCleanup ( );
	void eventOnConnectFailed ( int nError );
	void eventOnConnectSuccess ( );
};

UClass* UEngine::pClassPointer = NULL;

// Class Engine.GameEngine
// 0x0100 (0x053C - 0x043C)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                    		// 0x043C (0x0004) [0x0000000000000000]              
	struct FURL                                        LastURL;                                          		// 0x0440 (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FURL                                        LastRemoteURL;                                    		// 0x0484 (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ServerActors;                                     		// 0x04C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TravelURL;                                        		// 0x04D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      TravelType;                                       		// 0x04E0 (0x0001) [0x0000000000000000]              
	unsigned long                                      bWorldWasLoadedThisTick : 1;                      		// 0x04E4 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldCommitPendingMapChange : 1;                		// 0x04E4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bShouldSkipLevelStartupEventOnMapCommit : 1;      		// 0x04E4 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bShouldSkipLevelBeginningEventOnMapCommit : 1;    		// 0x04E4 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bSmoothFrameRate : 1;                             		// 0x04E4 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;           		// 0x04E4 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x04E8 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             LevelsToLoadForPendingMapChange;                  		// 0x04EC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class ULevel* >                            LoadedLevelsForPendingMapChange;                  		// 0x04F8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     PendingMapChangeFailureDescription;               		// 0x0504 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              MaxSmoothedFrameRate;                             		// 0x0510 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinSmoothedFrameRate;                             		// 0x0514 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FLevelStreamingStatus >             PendingLevelStreamingStatusUpdates;               		// 0x0518 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObjectReferencer* >                 ObjectReferencers;                                		// 0x0524 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FFullyLoadedPackagesInfo >          PackagesToFullyLoad;                              		// 0x0530 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameEngine" );

		return pClassPointer;
	};

	class UOnlineSubsystem* GetOnlineSubsystem ( );
};

UClass* UGameEngine::pClassPointer = NULL;

// Class Engine.Actor
// 0x01FC (0x023C - 0x0040)
class AActor : public UObject
{
public:
	struct FPointer                                    VfTable_IcEdgeUserInterface;                      		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      m_bCanBeCombatTargeted : 1;                       		// 0x0044 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStatic : 1;                                      		// 0x0044 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bHidden : 1;                                      		// 0x0044 (0x0004) [0x0000000000000023] [0x00000004] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bNoDelete : 1;                                    		// 0x0044 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDeleteMe : 1;                                    		// 0x0044 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bTicked : 1;                                      		// 0x0044 (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0044 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bStasis : 1;                                      		// 0x0044 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bWorldGeometry : 1;                               		// 0x0044 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                        		// 0x0044 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bOrientOnSlope : 1;                               		// 0x0044 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x0044 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bPushedByEncroachers : 1;                         		// 0x0044 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                  		// 0x0044 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bIsMoving : 1;                                    		// 0x0044 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bNetTemporary : 1;                                		// 0x0044 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bOnlyRelevantToOwner : 1;                         		// 0x0044 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bNetDirty : 1;                                    		// 0x0044 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bAlwaysRelevant : 1;                              		// 0x0044 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      m_bForceClassDebugUpdate : 1;                     		// 0x0044 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bReplicateInstigator : 1;                         		// 0x0044 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bReplicateMovement : 1;                           		// 0x0044 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bSkipActorPropertyReplication : 1;                		// 0x0044 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bUpdateSimulatedPosition : 1;                     		// 0x0044 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bTearOff : 1;                                     		// 0x0044 (0x0004) [0x0000000000000020] [0x01000000] ( CPF_Net )
	unsigned long                                      bOnlyDirtyReplication : 1;                        		// 0x0044 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      m_bCollideScraping : 1;                           		// 0x0044 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bDemoRecording : 1;                               		// 0x0044 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bDemoOwner : 1;                                   		// 0x0044 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bNetInitialRotation : 1;                          		// 0x0044 (0x0004) [0x0000000000000002] [0x20000000] ( CPF_Const )
	unsigned long                                      bReplicateRigidBodyLocation : 1;                  		// 0x0044 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bKillDuringLevelTransition : 1;                   		// 0x0044 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bExchangedRoles : 1;                              		// 0x0048 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bDebug : 1;                                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPostRenderIfNotVisible : 1;                      		// 0x0048 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bForceNetUpdate : 1;                              		// 0x0048 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPendingNetUpdate : 1;                            		// 0x0048 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHardAttach : 1;                                  		// 0x0048 (0x0004) [0x0000000000000023] [0x00000020] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bHurtEntry : 1;                                   		// 0x0048 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bGameRelevant : 1;                                		// 0x0048 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bMovable : 1;                                     		// 0x0048 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bDestroyInPainVolume : 1;                         		// 0x0048 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanBeDamaged : 1;                                		// 0x0048 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bShouldBaseAtStartup : 1;                         		// 0x0048 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bPendingDelete : 1;                               		// 0x0048 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCanTeleport : 1;                                 		// 0x0048 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bAlwaysTick : 1;                                  		// 0x0048 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bBlocksNavigation : 1;                            		// 0x0048 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0048 (0x0004) [0x0000000000002003] [0x00010000] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bProxyInference : 1;                              		// 0x0048 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bUseGrid : 1;                                     		// 0x0048 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      m_bValidateGridLocation : 1;                      		// 0x0048 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bSavedInMap : 1;                                  		// 0x0048 (0x0004) [0x0000000000000002] [0x00100000] ( CPF_Const )
	unsigned long                                      bStasisWakeUpEvent : 1;                           		// 0x0048 (0x0004) [0x0000000000002002] [0x00200000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bLimbo : 1;                                       		// 0x0048 (0x0004) [0x0000000000002002] [0x00400000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCollideWhenPlacing : 1;                          		// 0x0048 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bCollideActors : 1;                               		// 0x0048 (0x0004) [0x0000000000000022] [0x01000000] ( CPF_Const | CPF_Net )
	unsigned long                                      bCollideWorld : 1;                                		// 0x0048 (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      bCollideComplex : 1;                              		// 0x0048 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bBlockActors : 1;                                 		// 0x0048 (0x0004) [0x0000000000000020] [0x08000000] ( CPF_Net )
	unsigned long                                      bForceBlockEncroachers : 1;                       		// 0x0048 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bProjTarget : 1;                                  		// 0x0048 (0x0004) [0x0000000000000020] [0x20000000] ( CPF_Net )
	unsigned long                                      bBlocksTeleport : 1;                              		// 0x0048 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      m_bCollidesWithCamera : 1;                        		// 0x0048 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      m_bCameraIsBlockedByTest : 1;                     		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bJustTeleported : 1;                              		// 0x004C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bNetInitial : 1;                                  		// 0x004C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bNetOwner : 1;                                    		// 0x004C (0x0004) [0x0000000000000022] [0x00000010] ( CPF_Const | CPF_Net )
	unsigned long                                      bHiddenEd : 1;                                    		// 0x004C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHiddenEdGroup : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEdShouldSnap : 1;                                		// 0x004C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bTempEditor : 1;                                  		// 0x004C (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPathColliding : 1;                               		// 0x004C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPathTemp : 1;                                    		// 0x004C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bScriptInitialized : 1;                           		// 0x004C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bLockLocation : 1;                                		// 0x004C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bShouldUseThisCollisionAsAABB : 1;              		// 0x004C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned char                                      m_detachFrameCountdown;                           		// 0x0050 (0x0001) [0x0000000000000000]              
	unsigned char                                      Physics;                                          		// 0x0051 (0x0001) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned char                                      RemoteRole;                                       		// 0x0052 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Role;                                             		// 0x0053 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CollisionType;                                    		// 0x0054 (0x0001) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x0055 (0x0001) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nChannelsOpen;                                  		// 0x0058 (0x0004) [0x0000000000000000]              
	TArray< class UActorComponent* >                   Components;                                       		// 0x005C (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UActorComponent* >                   AllComponents;                                    		// 0x0068 (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRenderCommandFence                         DetachFence;                                      		// 0x0074 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class AActor*                                      Owner;                                            		// 0x0078 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class AActor*                                      Base;                                             		// 0x007C (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	TArray< struct FTimerData >                        Timers;                                           		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NetTag;                                           		// 0x008C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NetUpdateTime;                                    		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetUpdateFrequency;                               		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              NetPriority;                                      		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              LastNetUpdateTime;                                		// 0x009C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APawn*                                       Instigator;                                       		// 0x00A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWorldInfo*                                  WorldInfo;                                        		// 0x00A4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LifeSpan;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              CreationTime;                                     		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastRenderTime;                                   		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       Tag;                                              		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InitialState;                                     		// 0x00BC (0x0008) [0x0000000000000000]              
	struct FName                                       Group;                                            		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Touching;                                         		// 0x00CC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            Children;                                         		// 0x00D8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LatentFloat;                                      		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimNodeSequence*                           LatentSeqNode;                                    		// 0x00E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APhysicsVolume*                              PhysicsVolume;                                    		// 0x00EC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Location;                                         		// 0x00F0 (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FRotator                                    Rotation;                                         		// 0x00FC (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FVector                                     Velocity;                                         		// 0x0108 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     Acceleration;                                     		// 0x0114 (0x000C) [0x0000000000000000]              
	struct FVector                                     AngularVelocity;                                  		// 0x0120 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FtLocationInfo                              m_LastReceivedLocation;                           		// 0x012C (0x0020) [0x0000000000000000]              
	class USkeletalMeshComponent*                      BaseSkelComponent;                                		// 0x014C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BaseBoneName;                                     		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Attached;                                         		// 0x0158 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     RelativeLocation;                                 		// 0x0164 (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	struct FRotator                                    RelativeRotation;                                 		// 0x0170 (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	float                                              DrawScale;                                        		// 0x017C (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FVector                                     DrawScale3D;                                      		// 0x0180 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PrePivot;                                         		// 0x018C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPrimitiveComponent*                         CollisionComponent;                               		// 0x0198 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPrimitiveComponent*                         m_TargetingComponent;                             		// 0x019C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcVisualFXComponent*                         VisualFXComponent;                                		// 0x01A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AActor*                                      OwningPrefabInstance;                             		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OverlapTag;                                       		// 0x01A8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FsAPBCollision                              APBCollision;                                     		// 0x01AC (0x0014) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	TArray< struct FPointer >                          aReplicatedActorProperties;                       		// 0x01C0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class AActor* >                            aReplicatedActors;                                		// 0x01CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      aIndexPendingRPCs;                                		// 0x01D8 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UPlayer*                                     NetOwningConnection;                              		// 0x01E4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UcActorProxy*                                pActorProxy;                                      		// 0x01E8 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pCurrentGridCell;                               		// 0x01EC (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                nNonStasisArrayIndex;                             		// 0x01F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FRotator                                    RotationRate;                                     		// 0x01F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DesiredRotation;                                  		// 0x0200 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PendingTouch;                                     		// 0x020C (0x0004) [0x0000000000000000]              
	class UClass*                                      MessageClass;                                     		// 0x0210 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            SupportedEvents;                                  		// 0x0214 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USequenceEvent* >                    GeneratedEvents;                                  		// 0x0220 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USeqAct_Latent* >                    LatentActions;                                    		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AVolume*                                     m_CurrentDisplayArea;                             		// 0x0238 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Actor" );

		return pClassPointer;
	};

	bool SourceActorAllowCameraBlockingTest ( );
	void DEBUGBREAKPOINT2 ( );
	void DEBUGBREAKPOINT ( );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName );
	void eventFinishAnimControl ( );
	void eventSetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void OnMakeNoise ( class USeqAct_MakeNoise* Action );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnHealDamage ( class USeqAct_HealDamage* Action );
	void OnCauseDamage ( class USeqAct_CauseDamage* Action );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void ForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	bool APBTriggerEvent ( class UClass* InEventClass, class AActor* InInstigator, TArray< struct FString > aLinksToActivate, TArray< class USequenceVariable* > aVariablesToUpdate, unsigned long bTest );
	float TimeSince ( float Time );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void SetGRI ( class AGameReplicationInfo* GRI );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CheckForErrors ( );
	void DebugFreezeGame ( );
	float GetGravityZ ( );
	void eventCheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** Actor );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void RadiusActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void PostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void Falling ( );
	void eventTimer ( );
	void ServerIllegalLocation_APB ( );
	void ClientIllegalLocation_APB ( );
	void InIllegalLocation_APB ( struct FString sErrorMessage );
	bool IsNonSpatiallyRelevant ( );
	bool IsAlwaysRelevant_APB ( );
	void SetAlwaysRelevant_APB ( unsigned long bNewAlwaysRelevant, unsigned long bForce );
	bool IsUsingGrid ( );
	void SetUseGrid ( unsigned long bNewUseGrid );
	void SetStasis ( unsigned long bNewStasis, unsigned long bSimpleWakeUpEvent );
	void SetAPBCollision ( struct FsAPBCollision newAPBCollision );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickGroup ( unsigned char NewTickGroup );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedArrayEvent ( struct FName VarName, int nElement );
	void eventCallSuperReplicated ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysicsPhysNone ( float fDeltaSeconds );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void CancelInteractionWithProp ( class UActorComponent* pr_pProp );
	void RotateActorFast ( struct FRotator pr_rRotation );
	void MoveActorFast ( struct FVector pr_vLocation, struct FRotator pr_rRotation, struct FVector pr_vMoveBy );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* AActor::pClassPointer = NULL;

// Class Engine.Channel
// 0x002C (0x006C - 0x0040)
class UChannel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x2C ];                            		// 0x0040 (0x002C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Channel" );

		return pClassPointer;
	};

};

UClass* UChannel::pClassPointer = NULL;

// Class Engine.ActorChannel
// 0x0078 (0x00E4 - 0x006C)
class UActorChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x78 ];                            		// 0x006C (0x0078) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorChannel" );

		return pClassPointer;
	};

};

UClass* UActorChannel::pClassPointer = NULL;

// Class Engine.ActorFactory
// 0x0028 (0x0068 - 0x0040)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MenuPriority;                                     		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      NewActorClass;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlaceable : 1;                                   		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     SpecificGameName;                                 		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactory" );

		return pClassPointer;
	};

};

UClass* UActorFactory::pClassPointer = NULL;

// Class Engine.ActorFactoryAI
// 0x0018 (0x0080 - 0x0068)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnClass;                                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PawnName;                                         		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TeamIndex;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryAI" );

		return pClassPointer;
	};

};

UClass* UActorFactoryAI::pClassPointer = NULL;

// Class Engine.ActorFactoryAmbientSound
// 0x0004 (0x006C - 0x0068)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryAmbientSound" );

		return pClassPointer;
	};

};

UClass* UActorFactoryAmbientSound::pClassPointer = NULL;

// Class Engine.ActorFactoryAmbientSoundSimple
// 0x0004 (0x006C - 0x0068)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryAmbientSoundSimple" );

		return pClassPointer;
	};

};

UClass* UActorFactoryAmbientSoundSimple::pClassPointer = NULL;

// Class Engine.ActorFactoryArchetype
// 0x0004 (0x006C - 0x0068)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryArchetype" );

		return pClassPointer;
	};

};

UClass* UActorFactoryArchetype::pClassPointer = NULL;

// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryCoverLink : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryCoverLink" );

		return pClassPointer;
	};

};

UClass* UActorFactoryCoverLink::pClassPointer = NULL;

// Class Engine.ActorFactoryDynamicSM
// 0x0015 (0x007D - 0x0068)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      CollisionType;                                    		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryDynamicSM" );

		return pClassPointer;
	};

};

UClass* UActorFactoryDynamicSM::pClassPointer = NULL;

// Class Engine.ActorFactoryEmitter
// 0x0004 (0x006C - 0x0068)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryEmitter" );

		return pClassPointer;
	};

};

UClass* UActorFactoryEmitter::pClassPointer = NULL;

// Class Engine.ActorFactoryLensFlare
// 0x0004 (0x006C - 0x0068)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryLensFlare" );

		return pClassPointer;
	};

};

UClass* UActorFactoryLensFlare::pClassPointer = NULL;

// Class Engine.ActorFactoryLight
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryLight" );

		return pClassPointer;
	};

};

UClass* UActorFactoryLight::pClassPointer = NULL;

// Class Engine.ActorFactoryMover
// 0x0000 (0x007D - 0x007D)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryMover" );

		return pClassPointer;
	};

};

UClass* UActorFactoryMover::pClassPointer = NULL;

// Class Engine.ActorFactoryPathNode
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPathNode : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryPathNode" );

		return pClassPointer;
	};

};

UClass* UActorFactoryPathNode::pClassPointer = NULL;

// Class Engine.ActorFactoryPhysicsAsset
// 0x0024 (0x008C - 0x0068)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAwake : 1;                                  		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x0070 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0070 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryPhysicsAsset" );

		return pClassPointer;
	};

};

UClass* UActorFactoryPhysicsAsset::pClassPointer = NULL;

// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryPlayerStart" );

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart::pClassPointer = NULL;

// Class Engine.ActorFactoryRigidBody
// 0x001C (0x0099 - 0x007D)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned long                                      bStartAwake : 1;                                  		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                   		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UDistributionVector*                         AdditionalVelocity;                               		// 0x0090 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         InitialAngularVelocity;                           		// 0x0094 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      RBChannel;                                        		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryRigidBody" );

		return pClassPointer;
	};

};

UClass* UActorFactoryRigidBody::pClassPointer = NULL;

// Class Engine.ActorFactorySkeletalMesh
// 0x0010 (0x0078 - 0x0068)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSet;                                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSequenceName;                                 		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactorySkeletalMesh" );

		return pClassPointer;
	};

};

UClass* UActorFactorySkeletalMesh::pClassPointer = NULL;

// Class Engine.ActorFactoryStaticMesh
// 0x0010 (0x0078 - 0x0068)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryStaticMesh" );

		return pClassPointer;
	};

};

UClass* UActorFactoryStaticMesh::pClassPointer = NULL;

// Class Engine.ActorFactoryTrigger
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryTrigger : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryTrigger" );

		return pClassPointer;
	};

};

UClass* UActorFactoryTrigger::pClassPointer = NULL;

// Class Engine.ActorFactoryVehicle
// 0x0004 (0x006C - 0x0068)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryVehicle" );

		return pClassPointer;
	};

};

UClass* UActorFactoryVehicle::pClassPointer = NULL;

// Class Engine.ReachSpec
// 0x005C (0x009C - 0x0040)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                  		// 0x0040 (0x0004) [0x0000000000023002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_EditConst )
	int                                                Distance;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FVector                                     Direction;                                        		// 0x0048 (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            Start;                                            		// 0x0054 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FNavReference                               End;                                              		// 0x0058 (0x0014) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                CollisionRadius;                                  		// 0x006C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                CollisionHeight;                                  		// 0x0070 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                reachFlags;                                       		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                MaxLandingVelocity;                               		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned char                                      bPruned;                                          		// 0x007C (0x0001) [0x0000000000000000]              
	unsigned char                                      PathColorIndex;                                   		// 0x007D (0x0001) [0x0000000000000000]              
	unsigned long                                      bAddToNavigationOctree : 1;                       		// 0x0080 (0x0004) [0x0000000000020002] [0x00000001] ( CPF_Const | CPF_EditConst )
	unsigned long                                      bCanCutCorners : 1;                               		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x0080 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSkipPrune : 1;                                   		// 0x0080 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisabled : 1;                                    		// 0x0080 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< class UClass* >                            PruneSpecList;                                    		// 0x0084 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FName                                       ForcedPathSizeName;                               		// 0x0090 (0x0008) [0x0000000000000000]              
	class AActor*                                      BlockedBy;                                        		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ReachSpec" );

		return pClassPointer;
	};

	bool IsBlockedFor ( class APawn* P );
	int CostFor ( class APawn* P );
};

UClass* UReachSpec::pClassPointer = NULL;

// Class Engine.AdvancedReachSpec
// 0x0000 (0x009C - 0x009C)
class UAdvancedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AdvancedReachSpec" );

		return pClassPointer;
	};

};

UClass* UAdvancedReachSpec::pClassPointer = NULL;

// Class Engine.PostProcessEffect
// 0x0025 (0x0065 - 0x0040)
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowInGame : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseWorldSettings : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAffectsLightingOnly : 1;                         		// 0x0040 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FName                                       EffectName;                                       		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NodePosY;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                InDrawY;                                          		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned char                                      SceneDPG;                                         		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PostProcessEffect" );

		return pClassPointer;
	};

};

UClass* UPostProcessEffect::pClassPointer = NULL;

// Class Engine.AmbientOcclusionEffect
// 0x005F (0x00C4 - 0x0065)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	struct FLinearColor                                OcclusionColor;                                   		// 0x0068 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionPower;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionScale;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionBias;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOcclusion;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionRadius;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionAttenuation;                             		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OcclusionQuality;                                 		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMinDistance;                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMaxDistance;                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceThreshold;                            		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceScale;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloOcclusion;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloSampleWeight;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceThreshold;                            		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceScale;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterDistanceScale;                              		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FilterSize;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryConvergenceTime;                           		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryWeightConvergenceTime;                     		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AmbientOcclusionEffect" );

		return pClassPointer;
	};

};

UClass* UAmbientOcclusionEffect::pClassPointer = NULL;

// Class Engine.Camera
// 0x0210 (0x044C - 0x023C)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                          		// 0x023C (0x0004) [0x0000000000000000]              
	struct FName                                       CameraStyle;                                      		// 0x0240 (0x0008) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLockedFOV : 1;                                   		// 0x024C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x024C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableFading : 1;                                		// 0x024C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x024C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableColorScaling : 1;                          		// 0x024C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnableColorScaleInterp : 1;                      		// 0x024C (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              LockedFOV;                                        		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              ConstrainedAspectRatio;                           		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              DefaultAspectRatio;                               		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              FadeAmount;                                       		// 0x0260 (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CamPostProcessSettings;                           		// 0x0264 (0x010C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     ColorScale;                                       		// 0x0370 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredColorScale;                                		// 0x037C (0x000C) [0x0000000000000000]              
	struct FVector                                     OriginalColorScale;                               		// 0x0388 (0x000C) [0x0000000000000000]              
	float                                              ColorScaleInterpDuration;                         		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              ColorScaleInterpStartTime;                        		// 0x0398 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            HiddenActors;                                     		// 0x039C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTCameraCache                               CameraCache;                                      		// 0x03A8 (0x0020) [0x0000000000000000]              
	struct FTViewTarget                                ViewTarget;                                       		// 0x03C8 (0x002C) [0x0000000000000000]              
	struct FTViewTarget                                PendingViewTarget;                                		// 0x03F4 (0x002C) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0420 (0x0004) [0x0000000000000000]              
	struct FViewTargetTransitionParams                 BlendParams;                                      		// 0x0424 (0x000C) [0x0000000000000000]              
	TArray< class UCameraModifier* >                   ModifierList;                                     		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              FreeCamDistance;                                  		// 0x043C (0x0004) [0x0000000000000000]              
	struct FVector                                     FreeCamOffset;                                    		// 0x0440 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Camera" );

		return pClassPointer;
	};

	class AActor* GetViewTarget ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	bool SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void UpdateCamera ( float DeltaTime );
	void SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime );
	void SetFOV ( float NewFOV );
	float GetFOVAngle ( );
};

UClass* ACamera::pClassPointer = NULL;

// Class Engine.AnimatedCamera
// 0x0040 (0x048C - 0x044C)
class AAnimatedCamera : public ACamera
{
public:
	class UCameraAnimInst*                             AnimInstPool[ 0x8 ];                              		// 0x044C (0x0020) [0x0000000000000000]              
	TArray< class UCameraAnimInst* >                   ActiveAnims;                                      		// 0x046C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UCameraAnimInst* >                   FreeAnims;                                        		// 0x0478 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ADynamicCameraActor*                         AnimCameraActor;                                  		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicCameraActor*                         AccumulatorCameraActor;                           		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimatedCamera" );

		return pClassPointer;
	};

	void StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate );
	void StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate );
	class UCameraAnimInst* PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration );
	void ApplyCameraModifiersNative ( float DeltaTime, struct FTPOV* OutPOV );
	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* AAnimatedCamera::pClassPointer = NULL;

// Class Engine.ArrowComponent
// 0x0008 (0x01E0 - 0x01D8)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                       		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArrowSize;                                        		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ArrowComponent" );

		return pClassPointer;
	};

};

UClass* UArrowComponent::pClassPointer = NULL;

// Class Engine.Brush
// 0x0024 (0x0260 - 0x023C)
class ABrush : public AActor
{
public:
	unsigned char                                      CsgOper;                                          		// 0x023C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BrushColor;                                       		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PolyFlags;                                        		// 0x0244 (0x0004) [0x0000000000000000]              
	unsigned long                                      bColored : 1;                                     		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSolidWhenSelected : 1;                           		// 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	class UModel*                                      Brush;                                            		// 0x024C (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UBrushComponent*                             BrushComponent;                                   		// 0x0250 (0x0004) [0x00000000040A000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	TArray< struct FGeomSelection >                    SavedSelections;                                  		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Brush" );

		return pClassPointer;
	};

};

UClass* ABrush::pClassPointer = NULL;

// Class Engine.Volume
// 0x0018 (0x0278 - 0x0260)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                  		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                LocationPriority;                                 		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LocationName;                                     		// 0x0268 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bForcePawnWalk : 1;                               		// 0x0274 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessAllActors : 1;                            		// 0x0274 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Volume" );

		return pClassPointer;
	};

	void eventProcessActorSetVolume ( class AActor* Other );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	void eventPostBeginPlay ( );
	bool Encompasses ( class AActor* Other );
};

UClass* AVolume::pClassPointer = NULL;

// Class Engine.BlockingVolume
// 0x0004 (0x027C - 0x0278)
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bClampFluid : 1;                                  		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.BlockingVolume" );

		return pClassPointer;
	};

};

UClass* ABlockingVolume::pClassPointer = NULL;

// Class Engine.BloomEffect
// 0x0000 (0x0065 - 0x0065)
class UBloomEffect : public UPostProcessEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.BloomEffect" );

		return pClassPointer;
	};

};

UClass* UBloomEffect::pClassPointer = NULL;

// Class Engine.BookMark
// 0x0018 (0x0058 - 0x0040)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                         		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.BookMark" );

		return pClassPointer;
	};

};

UClass* UBookMark::pClassPointer = NULL;

// Class Engine.Info
// 0x0000 (0x023C - 0x023C)
class AInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Info" );

		return pClassPointer;
	};

};

UClass* AInfo::pClassPointer = NULL;

// Class Engine.BroadcastHandler
// 0x0008 (0x0244 - 0x023C)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                         		// 0x023C (0x0004) [0x0000000000000000]              
	unsigned long                                      bMuteSpectators : 1;                              		// 0x0240 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.BroadcastHandler" );

		return pClassPointer;
	};

	void eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void Broadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type );
	bool AllowsBroadcast ( class AActor* broadcaster, int InLen );
	void UpdateSentText ( );
};

UClass* ABroadcastHandler::pClassPointer = NULL;

// Class Engine.BrushComponent
// 0x004C (0x0224 - 0x01D8)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                            		// 0x01D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FKAggregateGeom                             BrushAggGeom;                                     		// 0x01DC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    BrushPhysDesc;                                    		// 0x0210 (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                              		// 0x0214 (0x000C) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                CachedPhysBrushDataVersion;                       		// 0x0220 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.BrushComponent" );

		return pClassPointer;
	};

};

UClass* UBrushComponent::pClassPointer = NULL;

// Class Engine.cActorFactoryPrefab
// 0x0004 (0x006C - 0x0068)
class UcActorFactoryPrefab : public UActorFactory
{
public:
	class UPrefab*                                     PrefabToSpawn;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cActorFactoryPrefab" );

		return pClassPointer;
	};

};

UClass* UcActorFactoryPrefab::pClassPointer = NULL;

// Class Engine.CameraActor
// 0x0120 (0x035C - 0x023C)
class ACameraActor : public AActor
{
public:
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x023C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              AspectRatio;                                      		// 0x0240 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              FOVAngle;                                         		// 0x0244 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x0248 (0x010C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0354 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        MeshComp;                                         		// 0x0358 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CameraActor" );

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
};

UClass* ACameraActor::pClassPointer = NULL;

// Class Engine.CameraAnim
// 0x0008 (0x0048 - 0x0040)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              AnimLength;                                       		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CameraAnim" );

		return pClassPointer;
	};

};

UClass* UCameraAnim::pClassPointer = NULL;

// Class Engine.CameraAnimInst
// 0x0040 (0x0080 - 0x0040)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	class UInterpGroupInst*                            InterpGroupInst;                                  		// 0x0044 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CurTime;                                          		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFinished : 1;                                    		// 0x004C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAutoReleaseWhenFinished : 1;                     		// 0x004C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBlendingIn : 1;                                  		// 0x004C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x004C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              BlendOutTime;                                     		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              CurBlendInTime;                                   		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurBlendOutTime;                                  		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              BasePlayScale;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              TransientScaleModifier;                           		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              CurrentBlendWeight;                               		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              RemainingTime;                                    		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           SourceAnimNode;                                   		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CameraAnimInst" );

		return pClassPointer;
	};

	void ApplyTransientScaling ( float Scalar );
	void Stop ( unsigned long bImmediate );
	void AdvanceAnim ( float DeltaTime, unsigned long bJump );
	void Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration );
};

UClass* UCameraAnimInst::pClassPointer = NULL;

// Class Engine.CameraConeComponent
// 0x0000 (0x01D8 - 0x01D8)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CameraConeComponent" );

		return pClassPointer;
	};

};

UClass* UCameraConeComponent::pClassPointer = NULL;

// Class Engine.CameraMode
// 0x0000 (0x0040 - 0x0040)
class UCameraMode : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CameraMode" );

		return pClassPointer;
	};

};

UClass* UCameraMode::pClassPointer = NULL;

// Class Engine.CameraModifier
// 0x0008 (0x0048 - 0x0040)
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                    		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingDisable : 1;                              		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebug : 1;                                       		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class ACamera*                                     CameraOwner;                                      		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CameraModifier" );

		return pClassPointer;
	};

};

UClass* UCameraModifier::pClassPointer = NULL;

// Class Engine.Canvas
// 0x0054 (0x0094 - 0x0040)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                             		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              OrgX;                                             		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              OrgY;                                             		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              ClipX;                                            		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              ClipY;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              CurX;                                             		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              CurY;                                             		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              CurYL;                                            		// 0x005C (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCenter : 1;                                      		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoSmooth : 1;                                    		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                SizeX;                                            		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    Canvas;                                           		// 0x0070 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SceneView;                                        		// 0x0074 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0078 (0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                    		// 0x0080 (0x0010) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Canvas" );

		return pClassPointer;
	};

	void DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture2D* Tex, float U, float V, float UL, float VL );
	void DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture2D* LineTexture, float U, float V, float UL, float VL );
	void Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor );
	void DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void DrawRotatedTile ( class UTexture2D* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );
	void DrawBox ( float Width, float Height );
	void DrawRect ( float RectX, float RectY, class UTexture2D* Tex );
	void DrawIconSection ( struct FCanvasIcon Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale );
	void DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale );
	struct FCanvasIcon MakeIcon ( class UTexture2D* Texture, float U, float V, float UL, float VL );
	void DrawTexture ( class UTexture2D* Tex, float Scale );
	void SetClip ( float X, float Y );
	void SetOrigin ( float X, float Y );
	void SetPos ( float PosX, float PosY );
	void eventReset ( unsigned long bKeepOrigin );
	void DrawColorizedTile ( class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor );
	void DrawTileStretched ( class UTexture2D* Tex, float Left, float Top, float AWidth, float AHeight, float U, float V, float UL, float VL, struct FLinearColor LDrawColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor );
	void PopTransform ( );
	void PushTranslationMatrix ( struct FVector TranslationVector );
	struct FVector Project ( struct FVector Location );
	void DrawTileClipped ( class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL );
	void DrawTextRA ( struct FString Text, unsigned long CR );
	void DrawTextClipped ( struct FString Text, unsigned long bCheckHotKey, float XScale, float YScale );
	void DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale );
	void TextSize ( struct FString String, float* XL, float* YL );
	void StrLen ( struct FString String, float* XL, float* YL );
	void DrawMaterialTileClipped ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL );
	void DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL );
	void DrawQuad ( class UTexture2D* Tex, float XL, float YL, float U1, float v1, float U2, float v2, float U3, float V3, float U4, float V4 );
	void DrawLine2D ( float XL, float YL );
	void DrawTile ( class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL );
};

UClass* UCanvas::pClassPointer = NULL;

// Class Engine.cBuildManagerBase
// 0x0000 (0x0040 - 0x0040)
class UcBuildManagerBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cBuildManagerBase" );

		return pClassPointer;
	};

	void SetThumbTimeBudget ( );
	void SetIngameTimeBudget ( unsigned long bAction );
	void SetIdleTimeBudget ( unsigned long bStreamWithTimeReserve );
	void NotifyActorIrrelevant ( class AActor* pActor );
};

UClass* UcBuildManagerBase::pClassPointer = NULL;

// Class Engine.cConsoleCmdDebugPage
// 0x002C (0x006C - 0x0040)
class UcConsoleCmdDebugPage : public UObject
{
public:
	TArray< struct FtPageItem >                        m_ItemList;                                       		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UcDebugPage* >                       m_DebugPageList;                                  		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              m_ItemSpanY;                                      		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CurItemID;                                      		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_PageItemNum;                                    		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CursorPos;                                      		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_PageItemStart;                                  		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cConsoleCmdDebugPage" );

		return pClassPointer;
	};

	void ActivateItem ( );
	void MoveToNextItem ( );
	void MoveToPrevItem ( );
	void DrawPage ( class UCanvas* Canvas );
	int eventClear ( );
	int eventAddItem ( struct FString r_ItemName, struct FString r_UsageString, struct FString r_HelpString );
	int eventInit ( class UObject* r_Obj );
};

UClass* UcConsoleCmdDebugPage::pClassPointer = NULL;

// Class Engine.cConsoleCommand
// 0x003C (0x007C - 0x0040)
class UcConsoleCommand : public UObject
{
public:
	struct FString                                     m_sName;                                          		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sUsage;                                         		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHelp;                                          		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nFlags;                                         		// 0x0064 (0x0004) [0x0000000000000000]              
	class UClass*                                      m_tObjectClass;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pCommandFunction;                               		// 0x006C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FScriptDelegate                             __ExecCommand__Delegate;                          		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cConsoleCommand" );

		return pClassPointer;
	};

	bool ExecCommand_DelegateToCommandPointer ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager );
	bool ExecCommand ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager );
};

UClass* UcConsoleCommand::pClassPointer = NULL;

// Class Engine.cConsoleCommandManager
// 0x002C (0x006C - 0x0040)
class UcConsoleCommandManager : public UObject
{
public:
	TArray< class UcConsoleCommand* >                  commandArray;                                     		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     focusObject;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_callFlags;                                      		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_execFlags;                                      		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                m_transmitFlags;                                  		// 0x0058 (0x0004) [0x0000000000000000]              
	class UcConsoleCmdDebugPage*                       m_MyDebugPage;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __ExecCommand__Delegate;                          		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cConsoleCommandManager" );

		return pClassPointer;
	};

	void eventSendToServer ( struct FString arguments );
	void eventSendToAllClients ( struct FString arguments );
	class UEngine* GetEngine ( );
	void GetCompletion ( struct FString cmdStart, TArray< struct FString >* completions );
	bool LocalExec ( struct FString arguments );
	float SafeStrToFloat ( struct FString str, int* bIsSafe );
	int SafeStrToInt ( struct FString str, int* bIsSafe );
	bool SafeStrToBool ( struct FString str, int* bIsSafe );
	void Print ( struct FString Text );
	void DestroyCommand ( struct FString cmdName );
	void CreateCommandScript ( struct FString cmdName, struct FString cmdUsage, struct FString cmdHelp, class UClass* tObjectClass, int cmdFlags, struct FScriptDelegate cmdDelegate );
	bool ExecCommand ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager );
};

UClass* UcConsoleCommandManager::pClassPointer = NULL;

// Class Engine.cCubicBezierCurve
// 0x0144 (0x0184 - 0x0040)
class UcCubicBezierCurve : public UObject
{
public:
	struct FcCubicBezierCurveStruct                    m_Struct;                                         		// 0x0040 (0x0144) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cCubicBezierCurve" );

		return pClassPointer;
	};

};

UClass* UcCubicBezierCurve::pClassPointer = NULL;

// Class Engine.cDebugPage
// 0x00B0 (0x00F0 - 0x0040)
class UcDebugPage : public UObject
{
public:
	struct FString                                     m_sPageName;                                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPageCategory;                                  		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bAutoRegister : 1;                              		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bReferencesGameWorld : 1;                       		// 0x0058 (0x0004) [0x0000000000000000] [0x00000002] 
	class UcDebugPageManager*                          m_MyManager;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pfnTick;                                        		// 0x0060 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnRender;                                      		// 0x0064 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnPageUp;                                      		// 0x0068 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnPageDown;                                    		// 0x006C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnPageLeft;                                    		// 0x0070 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnPageRight;                                   		// 0x0074 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnPageEnter;                                   		// 0x0078 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnLostFocus;                                   		// 0x007C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnPageRefresh;                                 		// 0x0080 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FScriptDelegate                             __TickDebugPage__Delegate;                        		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RenderDebugPage__Delegate;                      		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugPageUp__Delegate;                          		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugPageDown__Delegate;                        		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugPageLeft__Delegate;                        		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugPageRight__Delegate;                       		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugPageEnter__Delegate;                       		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __LostFocus__Delegate;                            		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugPageRefresh__Delegate;                     		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cDebugPage" );

		return pClassPointer;
	};

	void UnRegisterDebugPage ( );
	void eventRegisterDebugPage ( class UcDebugPageManager* theManager );
	void UnRegisterDebugPage_native ( );
	void SetDebugPageCategory ( struct FString sNewPageCategory );
	struct FString RetDebugPageCategory ( );
	void SetDebugPageName ( struct FString sNewPageName );
	struct FString RetDebugPageName ( );
	void CallNativePageRefresh ( );
	void CallNativeLostFocus ( );
	void CallNativePageEnter ( );
	void CallNativePageRight ( );
	void CallNativePageLeft ( );
	void CallNativePageDown ( );
	void CallNativePageUp ( );
	void CallNativeRender ( class UCanvas* Canvas );
	void CallNativeTick ( float fDeltaTime );
	void DebugPageRefresh ( );
	void LostFocus ( );
	void DebugPageEnter ( );
	void DebugPageRight ( );
	void DebugPageLeft ( );
	void DebugPageDown ( );
	void DebugPageUp ( );
	void RenderDebugPage ( class UCanvas* Canvas );
	void TickDebugPage ( float fDeltaTime );
};

UClass* UcDebugPage::pClassPointer = NULL;

// Class Engine.cEdgeUserInterface
// 0x0000 (0x0040 - 0x0040)
class UcEdgeUserInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cEdgeUserInterface" );

		return pClassPointer;
	};

};

UClass* UcEdgeUserInterface::pClassPointer = NULL;

// Class Engine.CeilingReachSpec
// 0x0000 (0x009C - 0x009C)
class UCeilingReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CeilingReachSpec" );

		return pClassPointer;
	};

};

UClass* UCeilingReachSpec::pClassPointer = NULL;

// Class Engine.cEngineClientServerDebugManager
// 0x0008 (0x0244 - 0x023C)
class AcEngineClientServerDebugManager : public AActor
{
public:
	unsigned long                                      m_bHasLinesToFlush : 1;                           		// 0x023C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDisplayLCActive : 1;                           		// 0x023C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      m_bIsLCActive : 1;                                		// 0x023C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FPointer                                    SceneView;                                        		// 0x0240 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cEngineClientServerDebugManager" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName sVariableName );
};

UClass* AcEngineClientServerDebugManager::pClassPointer = NULL;

// Class Engine.cEngineConsoleCommands
// 0x0000 (0x0040 - 0x0040)
class UcEngineConsoleCommands : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cEngineConsoleCommands" );

		return pClassPointer;
	};

	void eventRegisterEngineConsoleCommands_Script ( class UcConsoleCommandManager* manager );
	bool Command_Echo ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager );
};

UClass* UcEngineConsoleCommands::pClassPointer = NULL;

// Class Engine.cFeatureEmissiveManagerBase
// 0x0000 (0x0040 - 0x0040)
class UcFeatureEmissiveManagerBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cFeatureEmissiveManagerBase" );

		return pClassPointer;
	};

};

UClass* UcFeatureEmissiveManagerBase::pClassPointer = NULL;

// Class Engine.Download
// 0x0A34 (0x0A74 - 0x0040)
class UDownload : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xA34 ];                           		// 0x0040 (0x0A34) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Download" );

		return pClassPointer;
	};

};

UClass* UDownload::pClassPointer = NULL;

// Class Engine.ChannelDownload
// 0x0004 (0x0A78 - 0x0A74)
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0A74 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ChannelDownload" );

		return pClassPointer;
	};

};

UClass* UChannelDownload::pClassPointer = NULL;

// Class Engine.Controller
// 0x00E0 (0x031C - 0x023C)
class AController : public AActor
{
public:
	class APawn*                                       Pawn;                                             		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0240 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PlayerNum;                                        		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 NextController;                                   		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsPlayer : 1;                                    		// 0x024C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bGodMode : 1;                                     		// 0x024C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAffectedByHitEffects : 1;                        		// 0x024C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSoaking : 1;                                     		// 0x024C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSlowerZAcquire : 1;                              		// 0x024C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceStrafe : 1;                                 		// 0x024C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bNotifyApex : 1;                                  		// 0x024C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAdvancedTactics : 1;                             		// 0x024C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCanDoSpecial : 1;                                		// 0x024C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAdjusting : 1;                                   		// 0x024C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPreparingMove : 1;                               		// 0x024C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bLOSflag : 1;                                     		// 0x024C (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bUsePlayerHearing : 1;                            		// 0x024C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bForceDesiredRotation : 1;                        		// 0x024C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x024C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bSeeFriendly : 1;                                 		// 0x024C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bUsingPathLanes : 1;                              		// 0x024C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned char                                      bFire;                                            		// 0x0250 (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              MinHitWall;                                       		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              MoveTimer;                                        		// 0x0258 (0x0004) [0x0000000000000000]              
	class AActor*                                      MoveTarget;                                       		// 0x025C (0x0004) [0x0000000000000000]              
	struct FVector                                     Destination;                                      		// 0x0260 (0x000C) [0x0000000000000000]              
	struct FVector                                     FocalPoint;                                       		// 0x026C (0x000C) [0x0000000000000000]              
	class AActor*                                      Focus;                                            		// 0x0278 (0x0004) [0x0000000000000000]              
	class AActor*                                      GoalList[ 0x4 ];                                  		// 0x027C (0x0010) [0x0000000000000000]              
	struct FVector                                     AdjustLoc;                                        		// 0x028C (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            StartSpot;                                        		// 0x0298 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  RouteCache;                                       		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UReachSpec*                                  CurrentPath;                                      		// 0x02A8 (0x0004) [0x0000000000000000]              
	class UReachSpec*                                  NextRoutePath;                                    		// 0x02AC (0x0004) [0x0000000000000000]              
	struct FVector                                     CurrentPathDir;                                   		// 0x02B0 (0x000C) [0x0000000000000000]              
	class AActor*                                      RouteGoal;                                        		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              RouteDist;                                        		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              LastRouteFind;                                    		// 0x02C4 (0x0004) [0x0000000000000000]              
	class AInterpActor*                                PendingMover;                                     		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              GroundPitchTime;                                  		// 0x02CC (0x0004) [0x0000000000000000]              
	class APawn*                                       ShotTarget;                                       		// 0x02D0 (0x0004) [0x0000000000000000]              
	class AActor*                                      LastFailedReach;                                  		// 0x02D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FailedReachTime;                                  		// 0x02D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     FailedReachLocation;                              		// 0x02DC (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SightCounter;                                     		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              RespawnPredictionTime;                            		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              InUseNodeCostMultiplier;                          		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                HighJumpNodeCostModifier;                         		// 0x02F4 (0x0004) [0x0000000000000000]              
	class APawn*                                       Enemy;                                            		// 0x02F8 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x02FC (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	TArray< struct FVisiblePortalInfo >                VisiblePortals;                                   		// 0x0300 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LaneOffset;                                       		// 0x030C (0x0004) [0x0000000000000000]              
	struct FRotator                                    OldBasedRotation;                                 		// 0x0310 (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Controller" );

		return pClassPointer;
	};

	void SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType );
	void eventCurrentLevelUnloaded ( );
	class AActor* GetRouteGoalAfter ( int RouteIdx );
	bool eventIsInCombat ( );
	bool eventIsSpectating ( );
	class AController* GetKillerController ( );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnCauseDamage ( class USeqAct_CauseDamage* Action );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	void eventNotifyCoverAdjusted ( );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx );
	void OnToggleAffectedByHitEffects ( class USeqAct_ToggleAffectedByHitEffects* inAction );
	void OnToggleGodMode ( class USeqAct_ToggleGodMode* inAction );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnMakeNoise ( class USeqAct_MakeNoise* Action );
	bool IsDead ( );
	struct FString GetHumanReadableName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void StopLatentExecution ( );
	bool InLatentExecution ( int LatentActionNumber );
	void eventNotifyMissedJump ( );
	void eventNotifyJumpApex ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	bool LandingShake ( );
	bool IsAimingAt ( class AActor* ATarget, float Epsilon );
	void GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void RetCameraLocationAndReticuleDirection ( struct FVector* CameraLocationOut, struct FVector* ReticuleDirectionOut );
	void GetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	bool eventHandlePathObstruction ( class AActor* BlockedBy );
	void UnderLift ( class ALiftCenter* Lift );
	bool eventMoverFinished ( );
	void WaitForMover ( class AInterpActor* M );
	bool eventAllowDetourTo ( class ANavigationPoint* N );
	void eventLongFall ( );
	void WaitForLanding ( float waitDuration );
	bool PickWallAdjust ( struct FVector HitNormal );
	void eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	bool ActorReachable ( class AActor* anActor );
	bool PointReachable ( struct FVector aPoint );
	class AActor* FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class ANavigationPoint* FindRandomDest ( );
	class AActor* FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial );
	void FinishRotation ( );
	void eventSetupSpecialPathAbilities ( );
	void MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk );
	void MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, unsigned long bShouldWalk );
	void eventEnemyNotVisible ( );
	void eventSeeMonster ( class APawn* Seen );
	void eventSeePlayer ( class APawn* Seen );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	class APawn* PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist );
	bool CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation );
	bool CanSee ( class APawn* Other );
	bool LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc );
	void ReceiveProjectileWarning ( class AProjectile* Proj );
	void ReceiveWarning ( class APawn* Shooter, float projSpeed, struct FVector FireDir );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation, class UClass* InDamageType );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void eventStopFiring ( );
	bool FireWeaponAt ( class AActor* inActor );
	void WarnProjExplode ( class AProjectile* Proj );
	void NotifyProjLanded ( class AProjectile* Proj );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void SetCharacter ( struct FString inCharacter );
	void ServerGivePawn ( );
	void ServerRestartPlayer ( );
	unsigned char GetTeamNum ( );
	void InitPlayerReplicationInfo ( );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void EnemyJustTeleported ( );
	bool BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint );
	void Restart ( unsigned long bVehicleTransition );
	void CleanupPRI ( );
	void eventDestroyed ( );
	void PawnDied ( class APawn* inPawn );
	void eventUnPossess ( );
	void UpdateSex ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void OnPossess ( class USeqAct_Possess* inAction );
	void eventReplicatedEvent ( struct FName VarName );
	void ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void Reset ( );
	void eventPostBeginPlay ( );
	void RouteCache_RemoveIndex ( int InIndex, int Count );
	void RouteCache_RemoveItem ( class ANavigationPoint* Nav );
	void RouteCache_InsertItem ( class ANavigationPoint* Nav, int Idx );
	void RouteCache_AddItem ( class ANavigationPoint* Nav );
	void RouteCache_Empty ( );
	bool IsLocalPlayerController ( );
};

UClass* AController::pClassPointer = NULL;

// Class Engine.PlayerController
// 0x0268 (0x0584 - 0x031C)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                           		// 0x031C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACamera*                                     PlayerCamera;                                     		// 0x0320 (0x0004) [0x0000000000000000]              
	class UClass*                                      CameraClass;                                      		// 0x0324 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ADebugCameraController*                      DebugCameraControllerRef;                         		// 0x0328 (0x0004) [0x0000000000000000]              
	class UClass*                                      DebugCameraControllerClass;                       		// 0x032C (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerOwnerDataStoreClass;                        		// 0x0330 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UPlayerOwnerDataStore*                       CurrentPlayerData;                                		// 0x0334 (0x0004) [0x0000000000000000]              
	class UUIDataStore_PlayerSettings*                 CurrentPlayerSettings;                            		// 0x0338 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFrozen : 1;                                      		// 0x033C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x033C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bPredictedJump : 1;                             		// 0x033C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUpdatePosition : 1;                              		// 0x033C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUpdating : 1;                                    		// 0x033C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNeverSwitchOnPickup : 1;                         		// 0x033C (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheatFlying : 1;                                 		// 0x033C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCameraPositionLocked : 1;                        		// 0x033C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShortConnectTimeOut : 1;                         		// 0x033C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPendingDestroy : 1;                              		// 0x033C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bWasSpeedHack : 1;                                		// 0x033C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bWasSaturated : 1;                                		// 0x033C (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bDynamicNetSpeed : 1;                             		// 0x033C (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAimingHelp : 1;                                  		// 0x033C (0x0004) [0x0000000000044000] [0x00002000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCinematicMode : 1;                               		// 0x033C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCinemaDisableInputMove : 1;                      		// 0x033C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCinemaDisableInputLook : 1;                      		// 0x033C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bReplicateAllPawns : 1;                           		// 0x033C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bIsUsingStreamingVolumes : 1;                     		// 0x033C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x033C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIsControllerConnected : 1;                       		// 0x033C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bCheckSoundOcclusion : 1;                         		// 0x033C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bLogHearSoundOverflow : 1;                        		// 0x033C (0x0004) [0x0000000000044000] [0x00400000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      m_bMovementKeyIsDownOnServer : 1;                 		// 0x033C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bIsCustomising : 1;                             		// 0x033C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                		// 0x033C (0x0004) [0x0000000000044000] [0x02000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bReceivedUniqueId : 1;                            		// 0x033C (0x0004) [0x0000000000000000] [0x04000000] 
	float                                              MaxResponseTime;                                  		// 0x0340 (0x0004) [0x0000000000000000]              
	float                                              WaitDelay;                                        		// 0x0344 (0x0004) [0x0000000000000000]              
	class APawn*                                       AcknowledgedPawn;                                 		// 0x0348 (0x0004) [0x0000000000000000]              
	class AActor*                                      ViewTarget;                                       		// 0x034C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APlayerReplicationInfo*                      RealViewTarget;                                   		// 0x0350 (0x0004) [0x0000000000000000]              
	float                                              FOVAngle;                                         		// 0x0354 (0x0004) [0x0000000000000000]              
	float                                              DesiredFOV;                                       		// 0x0358 (0x0004) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x035C (0x0004) [0x0000000000000000]              
	float                                              LODDistanceFactor;                                		// 0x0360 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    TargetViewRotation;                               		// 0x0364 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              TargetEyeHeight;                                  		// 0x0370 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    BlendedTargetViewRotation;                        		// 0x0374 (0x000C) [0x0000000000000000]              
	class AHUD*                                        myHUD;                                            		// 0x0380 (0x0004) [0x0000000000000000]              
	class UClass*                                      SavedMoveClass;                                   		// 0x0384 (0x0004) [0x0000000000000000]              
	class USavedMove*                                  SavedMoves;                                       		// 0x0388 (0x0004) [0x0000000000000000]              
	class USavedMove*                                  FreeMoves;                                        		// 0x038C (0x0004) [0x0000000000000000]              
	class USavedMove*                                  PendingMove;                                      		// 0x0390 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastAckedAccel;                                   		// 0x0394 (0x000C) [0x0000000000000000]              
	float                                              CurrentTimeStamp;                                 		// 0x03A0 (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              ServerTimeStamp;                                  		// 0x03A8 (0x0004) [0x0000000000000000]              
	float                                              TimeMargin;                                       		// 0x03AC (0x0004) [0x0000000000000000]              
	float                                              ClientUpdateTime;                                 		// 0x03B0 (0x0004) [0x0000000000000000]              
	float                                              MaxTimeMargin;                                    		// 0x03B4 (0x0004) [0x0000000000000000]              
	float                                              LastActiveTime;                                   		// 0x03B8 (0x0004) [0x0000000000000000]              
	int                                                ClientCap;                                        		// 0x03BC (0x0004) [0x0000000000000000]              
	float                                              DynamicPingThreshold;                             		// 0x03C0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              LastPingUpdate;                                   		// 0x03C4 (0x0004) [0x0000000000000000]              
	float                                              OldPing;                                          		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              LastSpeedHackLog;                                 		// 0x03CC (0x0004) [0x0000000000000000]              
	struct FClientAdjustment                           PendingAdjustment;                                		// 0x03D0 (0x0034) [0x0000000000000000]              
	struct FString                                     ProgressMessage[ 0x2 ];                           		// 0x0404 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ProgressTimeOut;                                  		// 0x041C (0x0004) [0x0000000000000000]              
	struct FString                                     QuickSaveString;                                  		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoPauseMessage;                                   		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ViewingFrom;                                      		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OwnCamera;                                        		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                GroundPitch;                                      		// 0x0450 (0x0004) [0x0000000000000000]              
	struct FVector                                     OldFloor;                                         		// 0x0454 (0x000C) [0x0000000000000000]              
	class UCheatManager*                               CheatManager;                                     		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      CheatClass;                                       		// 0x0464 (0x0004) [0x0000000000000000]              
	class UPlayerInput*                                PlayerInput;                                      		// 0x0468 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      InputClass;                                       		// 0x046C (0x0004) [0x0000000000000000]              
	struct FVector                                     FailedPathStart;                                  		// 0x0470 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x047C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     ForceFeedbackManagerClassName;                    		// 0x0480 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UForceFeedbackManager*                       ForceFeedbackManager;                             		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UInteraction* >                      Interactions;                                     		// 0x0490 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      VoiceMuteList;                                    		// 0x049C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      GameplayVoiceMuteList;                            		// 0x04A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      VoicePacketFilter;                                		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x04C0 (0x0004) [0x0000000000000000]              
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x04C4 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x04C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                 		// 0x04CC (0x0004) [0x0000000000000000]              
	unsigned char                                      bIgnoreMoveInput;                                 		// 0x04D0 (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreLookInput;                                 		// 0x04D1 (0x0001) [0x0000000000000000]              
	unsigned char                                      bRun;                                             		// 0x04D2 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bDuck;                                            		// 0x04D3 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      NetPlayerIndex;                                   		// 0x04D4 (0x0001) [0x0000000000200002]              ( CPF_Const )
	unsigned char                                      m_nPing;                                          		// 0x04D5 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              InteractDistance;                                 		// 0x04D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FInputMatchRequest >                InputRequests;                                    		// 0x04DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastBroadcastTime;                                		// 0x04E8 (0x0004) [0x0000000000000000]              
	struct FString                                     LastBroadcastString[ 0x4 ];                       		// 0x04EC (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             PendingMapChangeLevelNames;                       		// 0x051C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACoverReplicator*                            MyCoverReplicator;                                		// 0x0528 (0x0004) [0x0000000000000000]              
	TArray< struct FDebugTextInfo >                    DebugTextList;                                    		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SpectatorCameraSpeed;                             		// 0x0538 (0x0004) [0x0000000000000000]              
	class UNetConnection*                              PendingSwapConnection;                            		// 0x053C (0x0004) [0x0000000000200002]              ( CPF_Const )
	float                                              MinRespawnDelay;                                  		// 0x0540 (0x0004) [0x0000000000000000]              
	int                                                MaxConcurrentHearSounds;                          		// 0x0544 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class UAudioComponent* >                   HearSoundActiveComponents;                        		// 0x0548 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAudioComponent* >                   HearSoundPoolComponents;                          		// 0x0554 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class AActor* >                            HiddenActors;                                     		// 0x0560 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_fOldInAccelCharacter;                           		// 0x056C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x0578 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerController" );

		return pClassPointer;
	};

	struct FString GetGameModeURLString ( unsigned long bIsSessionHost );
	struct FString GetPartyModeURLString ( unsigned long bIsPartyLeader );
	struct FString GetPartyGameTypeName ( );
	struct FString GetPartyMapName ( );
	void ClientReturnToParty ( );
	void OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void ShowSurvey ( struct FString QuestionId, struct FString Context );
	void ClientShowSurvey ( struct FString QuestionId, struct FString Context );
	void PathClear ( );
	void PathChild ( int Cnt );
	void PathStep ( int Cnt );
	void eventSoakPause ( class APawn* P );
	void IncrementNumberOfMatchesPlayed ( );
	void MovementKeyIsUpOnServer ( );
	void MovementKeyIsDownOnServer ( );
	bool CanViewUserCreatedContent ( );
	void ServerRegisterClientStatGuid ( struct FString StatGuid );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	void ClientRegisterHostStatGuid ( struct FString StatGuid );
	void EnableDebugCamera ( );
	void eventRemoveDebugText ( class AActor* SrcActor );
	void CommandManagerBridge_Server ( struct FString str );
	void CommandManagerBridge_Client ( struct FString str );
	void eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck );
	void DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta );
	void SendToConsole ( struct FString Command );
	void ConsoleKey ( struct FName Key );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void eventClientAdjustMusicTrackVolume ( class USeqAct_CrossFadeMusicTracks* MusicAction, float AdjustVolumeDuration, float AdjustVolumeLevel );
	void eventClientFadeOutMusicTrack ( class USeqAct_CrossFadeMusicTracks* MusicAction, float FadeOutTime, float FadeOutVolumeLevel );
	void eventClientCrossFadeMusicTrack_PlayTrack ( class USeqAct_CrossFadeMusicTracks* MusicAction, struct FMusicTrackStruct MusicTrack );
	void ServerSendMusicInfo ( );
	void ClientStartNetworkedVoice ( );
	void ClientStopNetworkedVoice ( );
	void ClientSetHostUniqueId ( struct FUniqueNetId InHostId );
	void ClientWriteOnlinePlayerScores ( );
	void ClientArbitratedMatchEnded ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void NotifyInviteFailed ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClearInviteDelegates ( );
	bool CanAllPlayersPlayOnline ( );
	bool InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings );
	void OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings );
	void ServerWritenArbitrationEndGameData ( );
	void ClientWriteArbitrationEndGameData ( class UClass* OnlineStatsWriteClass );
	void ServerRegisteredForArbitration ( unsigned long bWasSuccessful );
	void OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientRegisterForArbitration ( );
	void eventClientWasKicked ( );
	void NotifyConnectionError ( struct FString Message, struct FString Title );
	bool IsShowingSubtitles ( );
	void SetShowSubtitles ( unsigned long bValue );
	void eventNotifyDirectorControl ( unsigned long bNowControlling );
	void eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventServerMutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayMutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientMutePlayer ( struct FUniqueNetId PlayerNetId );
	class APlayerController* GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId );
	void ClientSetOnlineStatus ( );
	void SeamlessTravelFrom ( class APlayerController* OldPC );
	void SeamlessTravelTo ( class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	bool IsPlayerMuted ( struct FUniqueNetId* Sender );
	class UUIInteraction* GetUIController ( );
	void SaveActorConfig ( struct FName actorName );
	void SaveClassConfig ( struct FString ClassName );
	void eventClientSetBlockOnAsyncLoading ( );
	void eventClientFlushLevelStreaming ( );
	void eventClientCommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent );
	void DelayedPrepareMapChange ( );
	void eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast );
	void eventServerUpdateLevelVisibility ( struct FString PackageName, unsigned long bIsVisible );
	void ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventClientForceGarbageCollection ( );
	void OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction );
	void ResetPlayerMovementInput ( );
	bool IsLookInputIgnored ( );
	void IgnoreLookInput ( unsigned long bNewLookInput );
	bool IsMoveInputIgnored ( );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons );
	void OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action );
	void CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	void ClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void ClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void OnForceFeedback ( class USeqAct_ForceFeedback* Action );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void ShowGameState ( );
	void ShowPlayerState ( );
	void ListCE ( );
	void ListConsoleEvents ( );
	void CE ( struct FName EventName );
	void CauseEvent ( struct FName EventName );
	void ServerCauseEvent ( struct FString EventName );
	void OnToggleHUD ( class USeqAct_ToggleHUD* inAction );
	void OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ClientIgnoreLookInput ( unsigned long bIgnore );
	void ClientIgnoreMoveInput ( unsigned long bIgnore );
	void OnToggleInput ( class USeqAct_ToggleInput* inAction );
	void DrawHUD ( class AHUD* H );
	bool CanRestartPlayer ( );
	void ServerViewSelf ( );
	void ViewAPlayer ( int Dir );
	void ServerViewPrevPlayer ( );
	void ServerViewNextPlayer ( );
	void ProcessMoveBaseSpectatingState ( float DeltaRot, struct FVector* outNewAccel );
	void eventServerSetSpectatorLocation ( struct FVector NewLoc );
	bool IsSpectating ( );
	void ProcessMovePlayerWalkingState ( float DeltaRot, struct FVector* outNewAccel );
	void AlterPlayerWalkingAccel ( struct FVector* out_NewAccel );
	struct FRotator eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void eventUpdateRotation ( float DeltaTime );
	float GetRollRotationDelta ( float fDeltaTime );
	void ViewShake ( float DeltaTime );
	void GetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventServerVerifyViewTarget ( );
	class AActor* GetViewTarget ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	bool IsLocalPlayerController ( );
	float GetFOVAngle ( );
	void AdjustFOV ( float DeltaTime );
	float AimHelpDot ( unsigned long bInstantHit );
	void eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action );
	bool AimingHelp ( unsigned long bInstantHit );
	void PlayerMove ( float DeltaTime );
	void eventPlayerTick ( float DeltaTime );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void ClientRestart ( class APawn* NewPawn );
	void EnterStartState ( );
	bool HasClientLoadedCurrentWorld ( );
	void eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest );
	void eventServerNotifyLoadedWorld ( struct FString WorldPackageName );
	void Restart ( unsigned long bVehicleTransition );
	void ClientSetProgressTime ( float T );
	void SetProgressTime ( float T );
	void ClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title );
	void SetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title );
	void ClientClearProgressMessages ( );
	void ClearProgressMessages ( );
	void SwitchLevel ( struct FString URL );
	void ServerChangeName ( struct FString S );
	void SetName ( struct FString S );
	void eventServerSuicide ( );
	void Suicide ( );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void NextWeapon ( );
	void PrevWeapon ( );
	void UTrace ( );
	void ServerUTrace ( );
	void eventConditionalPause ( unsigned long bDesiredPauseState );
	void ShowMenu ( );
	void ServerPause ( );
	void Pause ( );
	bool IsPaused ( );
	void DebugPause ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	void QuickLoad ( );
	void QuickSave ( );
	void LocalTravel ( struct FString URL );
	void RestartLevel ( );
	void ServerSpeech ( struct FString Type, int Index, struct FString Callsign );
	void Speech ( struct FName Type, int Index, struct FString Callsign );
	void ServerRestartGame ( );
	void eventHandleWalking ( );
	void eventReplicateMove ( float DeltaTime, struct FVector newAccel, struct FRotator DeltaRot );
	void ReplicateMovePlayerController ( float DeltaTime, struct FVector* newAccel, struct FRotator* DeltaRot );
	void ClientUpdatePosition ( );
	void ClearAckedMoves ( );
	void ServerUpdatePing ( int NewPing );
	void UpdateStateFromAdjustment ( struct FName NewState );
	void eventLongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );
	void LongClientAdjustPositionPlayerController ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );
	void ServerSetNetSpeed ( int NewSpeed );
	void eventClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase );
	void eventClientAckGoodMove ( float TimeStamp );
	void APB_AckGoodStop ( );
	void APB_AckGoodStart ( );
	void APB_LCAPStop ( );
	void APB_LCAPStart ( );
	void ClientCapBandwidth ( int Cap );
	void eventShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void eventVeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot );
	void eventProcessMove ( float DeltaTime, struct FVector newAccel, struct FRotator DeltaRot );
	void ProcessMovePlayerController ( float DeltaTime, struct FVector* newAccel );
	void ProcessDrive ( float InForward, float InStrafe, float InUp, float InSprint );
	void SendClientAdjustment ( );
	void eventServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void eventWrapResetTimeMargin ( );
	void eventWrapGivePawn ( class APawn* NewPawn );
	void eventOldServerMove ( float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags );
	void eventDualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View );
	void ForceDeathUpdate ( );
	void ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char messageID );
	bool UsingFirstPersonCamera ( );
	void ResetCameraMode ( );
	void SetCameraMode ( struct FName NewCamMode );
	void eventClientSetCameraMode ( struct FName NewCamMode );
	void ServerCamera ( struct FString r_NewMode );
	void Camera ( struct FName NewMode );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	bool AllowTextMessage ( struct FString msg );
	void ServerMutate ( struct FString MutateString );
	void Mutate ( struct FString MutateString );
	void FOV ( float F );
	void ResetFOV ( );
	void SetFOV ( float NewFOV );
	void FixFOV ( );
	void eventDestroyed ( );
	void eventClearOnlineDelegates ( );
	void PlayBeepSound ( );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	void eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName );
	void eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime );
	void eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization );
	void eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	class UAudioComponent* GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation );
	void HearSoundFinished ( class UAudioComponent* AC );
	void eventClientPlaySound ( class USoundCue* ASound );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void CleanupPRI ( );
	void ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType );
	void PawnDied ( class APawn* P );
	void eventUnPossess ( );
	void ServerAcknowledgePossession ( class APawn* P );
	void AcknowledgePossession ( class APawn* P );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void GivePawn ( class APawn* NewPawn );
	void AskForPawn ( );
	void ClientGotoState ( struct FName NewState, struct FName NewLabel );
	bool IsMouseAvailable ( );
	bool IsKeyboardAvailable ( );
	void SetUseTiltForwardAndBack ( unsigned long bActive );
	void SetOnlyUseControllerTiltInput ( unsigned long bActive );
	void SetControllerTiltActive ( unsigned long bActive );
	void SetControllerTiltDesiredIfAvailable ( unsigned long bActive );
	bool IsControllerTiltActive ( );
	float GetRumbleScale ( );
	void SetRumbleScale ( float ScaleBy );
	void SetPlayerDataProvider ( class UPlayerDataProvider* DataProvider );
	void UnregisterPlayerDataStores ( );
	void RegisterPlayerDataStores ( );
	void ClientInitializeDataStores ( );
	void ServerSetUniquePlayerId ( struct FUniqueNetId UniqueId, unsigned long bWasInvited );
	void eventInitUniquePlayerId ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventInitInputSystem ( );
	void CleanOutSavedMoves ( );
	void ClientReset ( );
	void Reset ( );
	void SpawnDefaultHUD ( );
	void EnableCheats ( );
	void AddCheats ( );
	void eventKickWarning ( );
	void ServerGivePawn ( );
	void ServerShortTimeout ( );
	void ResetTimeMargin ( );
	void eventPreRender ( class UCanvas* Canvas );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* SpawnCoverReplicator ( );
	bool CanUnpauseControllerConnected ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool CanUnpauseExternalUI ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void CleanUpAudioComponents ( );
	int FindStairRotation ( float DeltaTime );
	bool CheckSpeedHack ( float DeltaTime );
	void eventServerProcessConvolve ( struct FString C, int H );
	void eventClientConvolve ( struct FString C, int H );
	void SetAudioGroupVolume ( struct FName GroupName, float Volume );
	void SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge );
	struct FString PasteFromClipboard ( );
	void CopyToClipboard ( struct FString Text );
	struct FString GetDefaultURL ( struct FString Option );
	void UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default );
	void eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	struct FString GetServerNetworkAddress ( );
	struct FString GetPlayerNetworkAddress ( );
	void SetNetSpeed ( int NewSpeed );
	void ClientDrawCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
};

UClass* APlayerController::pClassPointer = NULL;

// Class Engine.CheatManager
// 0x0000 (0x0040 - 0x0040)
class UCheatManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CheatManager" );

		return pClassPointer;
	};

	void TestLevel ( );
	void ToggleDebugCamera ( );
	void StreamLevelOut ( struct FName PackageName );
	void OnlyLoadLevel ( struct FName PackageName );
	void StreamLevelIn ( struct FName PackageName );
	void SetLevelStreamingStatus ( struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible );
	void AllWeapons ( );
	void Loaded ( );
	void ViewClass ( class UClass* aClass );
	void ViewBot ( );
	void ViewFlag ( );
	void ViewActor ( struct FName actorName );
	void ViewPlayer ( struct FString S );
	void ViewSelf ( unsigned long bQuiet );
	void RememberSpot ( );
	void PlayersOnly ( );
	void Avatar ( struct FName ClassName );
	void KillPawns ( );
	void KillAllPawns ( class UClass* aClass );
	void KillAll ( class UClass* aClass );
	void SetSpeed ( float F );
	void SetGravity ( float F );
	void SetJumpZ ( float F );
	void SloMo ( float T );
	void AffectedByHitEffects ( );
	void God ( );
	void AllAmmo ( );
	void Ghost ( );
	void Walk ( );
	void Fly ( );
	void EndPath ( );
	void ChangeSize ( float F );
	struct FRotator GetFRotatorFromString ( struct FString InStr );
	struct FVector GetFVectorFromString ( struct FString InStr );
	void BugIt ( struct FString ScreenShotDescription );
	void BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation );
	void BugItGoString ( struct FString TheLocation, struct FString TheRotation );
	void BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll );
	void Teleport ( );
	void KillViewedActor ( );
	void WriteToLog ( struct FString Param );
	void FreezeFrame ( float delay );
	void ListDynamicActors ( );
};

UClass* UCheatManager::pClassPointer = NULL;

// Class Engine.Player
// 0x0030 (0x0070 - 0x0040)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class APlayerController*                           Actor;                                            		// 0x0044 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentNetSpeed;                                  		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConfiguredInternetSpeed;                          		// 0x004C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ConfiguredLanSpeed;                               		// 0x0050 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ServerActionRatePerPeriod;                        		// 0x0054 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ServerActionRateAverageSeconds;                   		// 0x0058 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ServerActionRatePerPacket;                        		// 0x005C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              PP_DesaturationMultiplier;                        		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_HighlightsMultiplier;                          		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_MidTonesMultiplier;                            		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_ShadowsMultiplier;                             		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Player" );

		return pClassPointer;
	};

	void SwitchController ( class APlayerController* PC );
};

UClass* UPlayer::pClassPointer = NULL;

// Class Engine.NetConnection
// 0x4F44 (0x4FB4 - 0x0070)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[ 0x130 ];                           		// 0x0070 (0x0130) MISSED OFFSET
	int                                                DefaultRepFreq_Action;                            		// 0x01A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DefaultRepFreq_Social;                            		// 0x01A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x4E0C ];                          		// 0x01A8 (0x4E0C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NetConnection" );

		return pClassPointer;
	};

};

UClass* UNetConnection::pClassPointer = NULL;

// Class Engine.ChildConnection
// 0x0004 (0x4FB8 - 0x4FB4)
class UChildConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x4FB4 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ChildConnection" );

		return pClassPointer;
	};

};

UClass* UChildConnection::pClassPointer = NULL;

// Class Engine.cImporterEdge
// 0x0030 (0x0070 - 0x0040)
class UcImporterEdge : public UObject
{
public:
	class URWTechReachSpec*                            m_pRWTechReachSpec;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< int >                                      LinkEdgeIDs;                                      		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ParentEdgeID;                                     		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            m_aAllowedVehicleTypes;                           		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ParentJunctionNodeID;                             		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              m_fDelta;                                         		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nRouteCount;                                    		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nInitialRouteCount;                             		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cImporterEdge" );

		return pClassPointer;
	};

};

UClass* UcImporterEdge::pClassPointer = NULL;

// Class Engine.cImporterNode
// 0x0070 (0x00B0 - 0x0040)
class UcImporterNode : public UObject
{
public:
	class URWTechNode*                                 m_pRWTechNode;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< float >                                    m_afDistanceToSDNode;                             		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_anEdgeIndexForSDNode;                           		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_NodeState;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                m_nSearchID;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              m_fSearchCost;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              m_fSearchHeuristic;                               		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              m_fCostMultiplier;                                		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              m_fTotalCostEstimate;                             		// 0x0070 (0x0004) [0x0000000000000000]              
	class UcImporterNode*                              m_SearchParent;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	class UcImporterNode*                              m_NextOpenList;                                   		// 0x0078 (0x0004) [0x0000000000000000]              
	class UcImporterNode*                              m_PreviousOpenList;                               		// 0x007C (0x0004) [0x0000000000000000]              
	class UcImporterNode*                              m_NextPropergateList;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_SearchParentToThisNodeCost;                     		// 0x0084 (0x0004) [0x0000000000000000]              
	TArray< int >                                      SpawnNodeIDs;                                     		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ParentJunctionNodeID;                             		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< class URWTechReachSpec* >                  AllowedPathList;                                  		// 0x0098 (0x000C) [0x0000000004420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FArrayOfEdges >                     m_aArchivedPathListStack;                         		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cImporterNode" );

		return pClassPointer;
	};

};

UClass* UcImporterNode::pClassPointer = NULL;

// Class Engine.cLCManagerBase
// 0x0000 (0x023C - 0x023C)
class AcLCManagerBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cLCManagerBase" );

		return pClassPointer;
	};

};

UClass* AcLCManagerBase::pClassPointer = NULL;

// Class Engine.Client
// 0x0014 (0x0054 - 0x0040)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                              		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisplayGamma;                                     		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialButtonRepeatDelay;                         		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ButtonRepeatDelay;                                		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Client" );

		return pClassPointer;
	};

};

UClass* UClient::pClassPointer = NULL;

// Class Engine.Keypoint
// 0x0000 (0x023C - 0x023C)
class AKeypoint : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Keypoint" );

		return pClassPointer;
	};

};

UClass* AKeypoint::pClassPointer = NULL;

// Class Engine.ClipMarker
// 0x0000 (0x023C - 0x023C)
class AClipMarker : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ClipMarker" );

		return pClassPointer;
	};

};

UClass* AClipMarker::pClassPointer = NULL;

// Class Engine.ClipPadEntry
// 0x0018 (0x0058 - 0x0040)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                            		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Text;                                             		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ClipPadEntry" );

		return pClassPointer;
	};

};

UClass* UClipPadEntry::pClassPointer = NULL;

// Class Engine.cMemDbgPageWin32
// 0x0004 (0x0044 - 0x0040)
class UcMemDbgPageWin32 : public UObject
{
public:
	class UcDebugPage*                                 m_DebugPage;                                      		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cMemDbgPageWin32" );

		return pClassPointer;
	};

};

UClass* UcMemDbgPageWin32::pClassPointer = NULL;

// Class Engine.CodecMovie
// 0x0008 (0x0048 - 0x0040)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                 		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              Volume;                                           		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CodecMovie" );

		return pClassPointer;
	};

};

UClass* UCodecMovie::pClassPointer = NULL;

// Class Engine.CodecMovieBink
// 0x0024 (0x006C - 0x0048)
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      UnknownData00[ 0x24 ];                            		// 0x0048 (0x0024) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CodecMovieBink" );

		return pClassPointer;
	};

};

UClass* UCodecMovieBink::pClassPointer = NULL;

// Class Engine.CodecMovieFallback
// 0x0004 (0x004C - 0x0048)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                      		// 0x0048 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CodecMovieFallback" );

		return pClassPointer;
	};

};

UClass* UCodecMovieFallback::pClassPointer = NULL;

// Class Engine.ControlChannel
// 0x001C (0x0088 - 0x006C)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x1C ];                            		// 0x006C (0x001C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ControlChannel" );

		return pClassPointer;
	};

};

UClass* UControlChannel::pClassPointer = NULL;

// Class Engine.CoverGroup
// 0x0014 (0x0250 - 0x023C)
class ACoverGroup : public AInfo
{
public:
	TArray< struct FNavReference >                     CoverLinkRefs;                                    		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AutoSelectRadius;                                 		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectHeight;                                 		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CoverGroup" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void ToggleGroup ( );
	void DisableGroup ( );
	void EnableGroup ( );
};

UClass* ACoverGroup::pClassPointer = NULL;

// Class Engine.NavigationPoint
// 0x00F8 (0x0334 - 0x023C)
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                    		// 0x023C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTransientEndPoint : 1;                           		// 0x023C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideEditorPaths : 1;                             		// 0x023C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCanReach : 1;                                    		// 0x023C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlocked : 1;                                     		// 0x023C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOneWayPath : 1;                                  		// 0x023C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNeverUseStrafing : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAlwaysUseStrafing : 1;                           		// 0x023C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNoStrafing : 1;                             		// 0x023C (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bAutoBuilt : 1;                                   		// 0x023C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bSpecialMove : 1;                                 		// 0x023C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNoAutoConnect : 1;                               		// 0x023C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bNotBased : 1;                                    		// 0x023C (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bPathsChanged : 1;                                		// 0x023C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bDestinationOnly : 1;                             		// 0x023C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bSourceOnly : 1;                                  		// 0x023C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bSpecialForced : 1;                               		// 0x023C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bMustBeReachable : 1;                             		// 0x023C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bBlockable : 1;                                   		// 0x023C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bFlyingPreferred : 1;                             		// 0x023C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bMayCausePain : 1;                                		// 0x023C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x023C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bVehicleDestination : 1;                          		// 0x023C (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bMakeSourceOnly : 1;                              		// 0x023C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bMustTouchToReach : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCanWalkOnToReach : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bBuildLongPaths : 1;                              		// 0x023C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bBlockedForVehicles : 1;                          		// 0x023C (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bPreferredVehiclePath : 1;                        		// 0x023C (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      m_bAutoConnect : 1;                               		// 0x023C (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      m_bAutoGenerated : 1;                             		// 0x023C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bHasCrossLevelPaths : 1;                          		// 0x023C (0x0004) [0x0000000000000002] [0x80000000] ( CPF_Const )
	struct FNavigationOctreeObject                     NavOctreeObject;                                  		// 0x0240 (0x0034) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UReachSpec* >                        PathList;                                         		// 0x0274 (0x000C) [0x0000000004620003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FNavReference >                     EditorProscribedPaths;                            		// 0x0280 (0x000C) [0x0000000000600000]              ( CPF_NeedCtorLink )
	TArray< struct FNavReference >                     EditorForcedPaths;                                		// 0x028C (0x000C) [0x0000000000600000]              ( CPF_NeedCtorLink )
	TArray< class AVolume* >                           VolumeList;                                       		// 0x0298 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	int                                                visitedWeight;                                    		// 0x02A4 (0x0004) [0x0000000000000000]              
	int                                                bestPathWeight;                                   		// 0x02A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextNavigationPoint;                              		// 0x02AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextOrdered;                                      		// 0x02B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            prevOrdered;                                      		// 0x02B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            previousPath;                                     		// 0x02B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Cost;                                             		// 0x02BC (0x0004) [0x0000000000000000]              
	int                                                ExtraCost;                                        		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TransientCost;                                    		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FearCost;                                         		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDebugNavCost >                     CostArray;                                        		// 0x02CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ADroppedPickup*                              InventoryCache;                                   		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              InventoryDist;                                    		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              LastDetourWeight;                                 		// 0x02E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x02E4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AObjective*                                  NearestObjective;                                 		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              ObjectiveDistance;                                		// 0x02EC (0x0004) [0x0000000000000000]              
	struct FCylinder                                   MaxPathSize;                                      		// 0x02F0 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	TArray< unsigned char >                            m_allowedNodeTypes;                               		// 0x02F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_proscribedNodeTypes;                            		// 0x0304 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGuid                                       NavGuid;                                          		// 0x0310 (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class USpriteComponent*                            GoodSprite;                                       		// 0x0320 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            BadSprite;                                        		// 0x0324 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                NetworkID;                                        		// 0x0328 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class APawn*                                       AnchoredPawn;                                     		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAnchoredPawnTime;                             		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NavigationPoint" );

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	bool OnMatchingNetworks ( class ANavigationPoint* Nav );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* chkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* chkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* chkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool IsAvailableTo ( class AActor* chkActor );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

UClass* ANavigationPoint::pClassPointer = NULL;

// Class Engine.CoverLink
// 0x0071 (0x03A5 - 0x0334)
class ACoverLink : public ANavigationPoint
{
public:
	TArray< struct FCoverSlot >                        Slots;                                            		// 0x0334 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class APawn* >                             Claims;                                           		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bDisabled : 1;                                    		// 0x034C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClaimAllSlots : 1;                               		// 0x034C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoSort : 1;                                    		// 0x034C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAutoAdjust : 1;                                  		// 0x034C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCircular : 1;                                    		// 0x034C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLooped : 1;                                      		// 0x034C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x034C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDynamicCover : 1;                                		// 0x034C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDebug_FireLinks : 1;                             		// 0x034C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDebug_ExposedLinks : 1;                          		// 0x034C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDebug_DangerLinks : 1;                           		// 0x034C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              MaxFireLinkDist;                                  		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CircularOrigin;                                   		// 0x0354 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              CircularRadius;                                   		// 0x0360 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AlignDist;                                        		// 0x0364 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StandHeight;                                      		// 0x0368 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MidHeight;                                        		// 0x036C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     StandingLeanOffset;                               		// 0x0370 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     CrouchLeanOffset;                                 		// 0x037C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     PopupOffset;                                      		// 0x0388 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SlipDist;                                         		// 0x0394 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TurnDist;                                         		// 0x0398 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DangerScale;                                      		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACoverLink*                                  NextCoverLink;                                    		// 0x03A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      LocationDescription;                              		// 0x03A4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CoverLink" );

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	unsigned char GetLocationDescription ( int SlotIdx );
	struct FString eventGetDebugString ( int SlotIdx );
	int AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate );
	void eventTick ( float DeltaTime );
	bool GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverReference* out_Info );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsEnabled ( );
	bool AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans );
	void OnModifyCover ( class USeqAct_ModifyCover* Action );
	void eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable );
	void eventSetDisabled ( unsigned long bNewDisabled );
	void GetSlotActions ( int SlotIdx, TArray< unsigned char >* Actions );
	bool HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks );
	bool GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, TArray< int >* out_Items );
	bool AllowLeftTransition ( int SlotIdx );
	bool AllowRightTransition ( int SlotIdx );
	bool IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx );
	bool IsStationarySlot ( int SlotIdx );
	bool IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	bool eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool eventClaim ( class APawn* NewClaim, int SlotIdx );
	void eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid );
	bool IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale );
	class ACoverSlotMarker* GetSlotMarker ( int SlotIdx );
	struct FVector GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action );
	struct FRotator GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset );
	struct FVector GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset );
};

UClass* ACoverLink::pClassPointer = NULL;

// Class Engine.ForcedReachSpec
// 0x0000 (0x009C - 0x009C)
class UForcedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ForcedReachSpec" );

		return pClassPointer;
	};

};

UClass* UForcedReachSpec::pClassPointer = NULL;

// Class Engine.CoverSlipReachSpec
// 0x0001 (0x009D - 0x009C)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x009C (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CoverSlipReachSpec" );

		return pClassPointer;
	};

};

UClass* UCoverSlipReachSpec::pClassPointer = NULL;

// Class Engine.CoverSlotMarker
// 0x000C (0x0340 - 0x0334)
class ACoverSlotMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x0334 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bIgnoreSizeLimits : 1;                            		// 0x033C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CoverSlotMarker" );

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	bool IsValidClaim ( class APawn* ChkClaim, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	void SetSlotEnabled ( unsigned long bEnable );
	struct FRotator GetSlotRotation ( );
	struct FVector GetSlotLocation ( );
	void eventPostBeginPlay ( );
};

UClass* ACoverSlotMarker::pClassPointer = NULL;

// Class Engine.cParticleDecalComponent
// 0x00CB (0x0124 - 0x0059)
class UcParticleDecalComponent : public UActorComponent
{
public:
	unsigned long                                      m_bEnabled : 1;                                   		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      m_BlendMode;                                      		// 0x0060 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      m_ProjectionMode;                                 		// 0x0061 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_OutputScale;                                    		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_OutputBias;                                     		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     m_Scale3D;                                        		// 0x006C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     m_Translation;                                    		// 0x0078 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    m_Rotation;                                       		// 0x0084 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture*                                    m_Texture;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_CullDistance;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_CullNearDistance;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULightComponent*                             m_LightNearReplacement;                           		// 0x009C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FMatrix                                     m_CachedParentToWorld;                            		// 0x00A0 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FMatrix                                     m_LocalToWorld;                                   		// 0x00E0 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    SceneInfo;                                        		// 0x0120 (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cParticleDecalComponent" );

		return pClassPointer;
	};

	void RecalcLocalToWorld ( );
};

UClass* UcParticleDecalComponent::pClassPointer = NULL;

// Class Engine.CrowdAgent
// 0x0048 (0x0284 - 0x023C)
class ACrowdAgent : public AActor
{
public:
	class USeqAct_CrowdSpawner*                        Spawner;                                          		// 0x023C (0x0004) [0x0000000000000000]              
	unsigned char                                      AgentState;                                       		// 0x0240 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndActionTime;                                    		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              NextActionTime;                                   		// 0x0248 (0x0004) [0x0000000000000000]              
	float                                              VelDamping;                                       		// 0x024C (0x0004) [0x0000000000000000]              
	struct FRotator                                    ToTargetRot;                                      		// 0x0250 (0x000C) [0x0000000000000000]              
	unsigned long                                      bRotateToTargetRot : 1;                           		// 0x025C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHadNearbyTarget : 1;                             		// 0x025C (0x0004) [0x0000000000000000] [0x00000002] 
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0260 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimNodeBlend*                              SpeedBlendNode;                                   		// 0x0264 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              ActionBlendNode;                                  		// 0x0268 (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           ActionSeqNode;                                    		// 0x026C (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           WalkSeqNode;                                      		// 0x0270 (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           RunSeqNode;                                       		// 0x0274 (0x0004) [0x0000000000000000]              
	class UAnimTree*                                   AgentTree;                                        		// 0x0278 (0x0004) [0x0000000000000000]              
	int                                                Health;                                           		// 0x027C (0x0004) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0280 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CrowdAgent" );

		return pClassPointer;
	};

	void PlayDeath ( );
};

UClass* ACrowdAgent::pClassPointer = NULL;

// Class Engine.CrowdAttractor
// 0x0011 (0x024D - 0x023C)
class ACrowdAttractor : public AActor
{
public:
	float                                              Attraction;                                       		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttractorEnabled : 1;                            		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttractionFalloff : 1;                           		// 0x0240 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActionAtThisAttractor : 1;                       		// 0x0240 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              ActionRadiusScale;                                		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0248 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      Mode;                                             		// 0x024C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CrowdAttractor" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ACrowdAttractor::pClassPointer = NULL;

// Class Engine.cStatsCapturer
// 0x0008 (0x0244 - 0x023C)
class AcStatsCapturer : public AActor
{
public:
	int                                                nbTickCurrent;                                    		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nbTickMax;                                        		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cStatsCapturer" );

		return pClassPointer;
	};

};

UClass* AcStatsCapturer::pClassPointer = NULL;

// Class Engine.Surface
// 0x0000 (0x0040 - 0x0040)
class USurface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Surface" );

		return pClassPointer;
	};

	float GetSurfaceHeight ( );
	float GetSurfaceWidth ( );
};

UClass* USurface::pClassPointer = NULL;

// Class Engine.Texture
// 0x00B0 (0x00F0 - 0x0040)
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                         		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RGBE : 1;                                         		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      CompressionNoAlpha : 1;                           		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      CompressionNone : 1;                              		// 0x0040 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      CompressionNoMipmaps : 1;                         		// 0x0040 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      CompressionFullDynamicRange : 1;                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      DeferCompression : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      NeverStream : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDitherMipMapAlpha : 1;                           		// 0x0040 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bPreserveBorderR : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPreserveBorderG : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPreserveBorderB : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPreserveBorderA : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;          		// 0x0040 (0x0004) [0x0000000000002002] [0x00002000] ( CPF_Const | CPF_Transient )
	float                                              UnpackMin[ 0x4 ];                                 		// 0x0044 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              UnpackMax[ 0x4 ];                                 		// 0x0054 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FUntypedBulkData_Mirror                     SourceArt;                                        		// 0x0064 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FIndirectArray_Mirror                       MipSourceArt;                                     		// 0x0098 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      CompressionSettings;                              		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Filter;                                           		// 0x00A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODGroup;                                         		// 0x00A6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODCategory;                                      		// 0x00A7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODUsage;                                         		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      GolemCropMode;                                    		// 0x00A9 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                LODBias;                                          		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CachedCombinedLODBias;                            		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SourceFilePath;                                   		// 0x00B4 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SourceFileTimestamp;                              		// 0x00C0 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	float                                              WorldUScale;                                      		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldVScale;                                      		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GolemScale;                                       		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GolemOffset;                                      		// 0x00E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Resource;                                         		// 0x00EC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Texture" );

		return pClassPointer;
	};

};

UClass* UTexture::pClassPointer = NULL;

// Class Engine.cTexture3D
// 0x0020 (0x0110 - 0x00F0)
class UcTexture3D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x00F0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SizeX;                                            		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0100 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeZ;                                            		// 0x0104 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x0108 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x0109 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x010A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressZ;                                         		// 0x010B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumMips;                                          		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cTexture3D" );

		return pClassPointer;
	};

};

UClass* UcTexture3D::pClassPointer = NULL;

// Class Engine.CullDistanceVolume
// 0x0010 (0x0288 - 0x0278)
class ACullDistanceVolume : public AVolume
{
public:
	TArray< struct FCullDistanceSizePair >             CullDistances;                                    		// 0x0278 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CullDistanceVolume" );

		return pClassPointer;
	};

};

UClass* ACullDistanceVolume::pClassPointer = NULL;

// Class Engine.CurveEdPresetCurve
// 0x0018 (0x0058 - 0x0040)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                        		// 0x0040 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FPresetGeneratedPoint >             Points;                                           		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CurveEdPresetCurve" );

		return pClassPointer;
	};

};

UClass* UCurveEdPresetCurve::pClassPointer = NULL;

// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x0040 - 0x0040)
class UCustomPropertyItemHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CustomPropertyItemHandler" );

		return pClassPointer;
	};

};

UClass* UCustomPropertyItemHandler::pClassPointer = NULL;

// Class Engine.GameViewportClient
// 0x00C4 (0x0104 - 0x0040)
class UGameViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                          		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FExec;                                    		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    Viewport;                                         		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ViewportFrame;                                    		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UInteraction* >                      GlobalInteractions;                               		// 0x0050 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UClass*                                      UIControllerClass;                                		// 0x005C (0x0004) [0x0000000000000000]              
	class UUIInteraction*                              UIController;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	class UConsole*                                    ViewportConsole;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FQWord                                      ShowFlags;                                        		// 0x0068 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UcDebugPageManager*                          m_ViewportDebugPageManager;                       		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     LoadingMessage;                                   		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SavingMessage;                                    		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectingMessage;                                		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PausedMessage;                                    		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PrecachingMessage;                                		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShowTitleSafeZone : 1;                           		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayingUIMouseCursor : 1;                     		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUIMouseCaptureOverride : 1;                      		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FTitleSafeZoneArea                          TitleSafeZone;                                    		// 0x00B4 (0x0010) [0x0000000000000000]              
	TArray< struct FSplitscreenData >                  SplitscreenInfo;                                  		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      SplitscreenType;                                  		// 0x00D0 (0x0001) [0x0000000000000000]              
	unsigned char                                      Default2PSplitType;                               		// 0x00D1 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Default3PSplitType;                               		// 0x00D2 (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              fIdleTime;                                        		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   VanishingPointOffset;                             		// 0x00D8 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __HandleInputKey__Delegate;                       		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                      		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleInputChar__Delegate;                      		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameViewportClient" );

		return pClassPointer;
	};

	void eventRenderDebug ( class UCanvas* Canvas );
	void NativeRenderDebug ( class UCanvas* Canvas );
	void eventChangedInputLanguage ( struct FString sInputLangId, unsigned long bHasIME, unsigned long bIMEActive );
	void RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer );
	void AddLocalPlayer ( class ULocalPlayer* NewPlayer );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message );
	void eventPostRender ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	void CalculatePixelCenter ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* out_CenterX, float* out_CenterY );
	float CalculateDeadZone ( class ULocalPlayer* LPlayer, unsigned char SZType, class UCanvas* Canvas, unsigned long bUseMaxPercent );
	void CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical );
	void GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height );
	bool HasRightSafeZone ( int LocalPlayerIndex );
	bool HasLeftSafeZone ( int LocalPlayerIndex );
	bool HasBottomSafeZone ( int LocalPlayerIndex );
	bool HasTopSafeZone ( int LocalPlayerIndex );
	int ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer );
	void eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos );
	void eventLayoutPlayers ( );
	void SetSplitscreenConfiguration ( unsigned char SplitType );
	void eventGameSessionEnded ( );
	int eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex );
	bool eventInit ( struct FString* OutError );
	void SetConsoleTarget ( int PlayerIndex );
	void ShowTitleSafeArea ( );
	void SetSplit ( int Mode );
	void DebugRemovePlayer ( int ControllerId );
	void SSSwapControllers ( );
	void DebugCreatePlayer ( int ControllerId );
	class ULocalPlayer* eventFindPlayerByControllerId ( int ControllerId );
	bool eventRemovePlayer ( class ULocalPlayer* ExPlayer );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	bool IsFullScreenViewport ( );
	void GetViewportSize ( struct FVector2D* out_ViewportSize );
	struct FString ConsoleCommand ( struct FString Command );
	bool HandleInputChar ( int ControllerId, struct FString Unicode );
	bool HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

UClass* UGameViewportClient::pClassPointer = NULL;

// Class Engine.cVSViewportClient
// 0x0008 (0x010C - 0x0104)
class UcVSViewportClient : public UGameViewportClient
{
public:
	class UcAPBVisualServerHUD*                        m_VisualServerHUD;                                		// 0x0104 (0x0004) [0x0000000000000000]              
	class UcDistrictVisualiser*                        m_DistrictVisualiser;                             		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cVSViewportClient" );

		return pClassPointer;
	};

	void SetSplitscreenConfiguration ( unsigned char SplitType );
	void eventTick ( float DeltaTime );
	void eventPostRender ( class UCanvas* Canvas );
	void eventGameSessionEnded ( );
	bool eventInit ( struct FString* OutError );
};

UClass* UcVSViewportClient::pClassPointer = NULL;

// Class Engine.cWeatherManagerBase
// 0x0000 (0x0040 - 0x0040)
class UcWeatherManagerBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cWeatherManagerBase" );

		return pClassPointer;
	};

};

UClass* UcWeatherManagerBase::pClassPointer = NULL;

// Class Engine.DamageType
// 0x0050 (0x0090 - 0x0040)
class UDamageType : public UObject
{
public:
	struct FString                                     DeathString;                                      		// 0x0040 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FemaleSuicide;                                    		// 0x004C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaleSuicide;                                      		// 0x0058 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bArmorStops : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysGibs : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNeverGibs : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLocationalHit : 1;                               		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCausesBlood : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCausesBloodSplatterDecals : 1;                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bKUseOwnDeathVel : 1;                             		// 0x0064 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCausedByWorld : 1;                               		// 0x0064 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bExtraMomentumZ : 1;                              		// 0x0064 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIgnoreDriverDamageMult : 1;                      		// 0x0064 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bDontHurtInstigator : 1;                          		// 0x0064 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bKRadialImpulse : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bRadialDamageVelChange : 1;                       		// 0x0064 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	float                                              GibModifier;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDamageImpulse;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathVel;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathUpKick;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KImpulseRadius;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialDamageImpulse;                              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleDamageScaling;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              VehicleMomentumScaling;                           		// 0x0084 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                 		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DamageType" );

		return pClassPointer;
	};

	float VehicleDamageScalingFor ( class AVehicle* V );
	struct FString SuicideMessage ( class APlayerReplicationInfo* Victim );
	struct FString DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim );
};

UClass* UDamageType::pClassPointer = NULL;

// Class Engine.DebugManager
// 0x0004 (0x0044 - 0x0040)
class UDebugManager : public UObject
{
public:
	int                                                FirstColoredMip;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DebugManager" );

		return pClassPointer;
	};

};

UClass* UDebugManager::pClassPointer = NULL;

// Class Engine.PhysicsVolume
// 0x003C (0x02B4 - 0x0278)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                     		// 0x0278 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityAffectsWalking : 1;                      		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPainCausing : 1;                                 		// 0x0284 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEntryPain : 1;                                   		// 0x0284 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      BACKUP_bPainCausing : 1;                          		// 0x0284 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDestructive : 1;                                 		// 0x0284 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNoInventory : 1;                                 		// 0x0284 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMoveProjectiles : 1;                             		// 0x0284 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bBounceVelocity : 1;                              		// 0x0284 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNeutralZone : 1;                                 		// 0x0284 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bPhysicsOnContact : 1;                            		// 0x0284 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bWaterVolume : 1;                                 		// 0x0284 (0x0004) [0x0000000000000000] [0x00000400] 
	float                                              GroundFriction;                                   		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TerminalVelocity;                                 		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePerSec;                                     		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageType;                                       		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidFriction;                                    		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RigidBodyDamping;                                 		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDampingForce;                                  		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInfo*                                       PainTimer;                                        		// 0x02A8 (0x0004) [0x0000000000000000]              
	class AController*                                 DamageInstigator;                                 		// 0x02AC (0x0004) [0x0000000000000000]              
	class APhysicsVolume*                              NextPhysicsVolume;                                		// 0x02B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicsVolume" );

		return pClassPointer;
	};

	void OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action );
	void ModifyPlayer ( class APawn* PlayerPawn );
	void CausePainTo ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void TimerPop ( class AVolumeTimer* T );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
	void eventActorLeavingVolume ( class AActor* Other );
	void eventActorEnteredVolume ( class AActor* Other );
	void Reset ( );
	void eventPostBeginPlay ( );
	float GetGravityZ ( );
};

UClass* APhysicsVolume::pClassPointer = NULL;

// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x02B4 - 0x02B4)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DefaultPhysicsVolume" );

		return pClassPointer;
	};

	void eventDestroyed ( );
};

UClass* ADefaultPhysicsVolume::pClassPointer = NULL;

// Class Engine.LevelBase
// 0x0098 (0x00D8 - 0x0040)
class ULevelBase : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x98 ];                            		// 0x0040 (0x0098) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LevelBase" );

		return pClassPointer;
	};

};

UClass* ULevelBase::pClassPointer = NULL;

// Class Engine.PendingLevel
// 0x0030 (0x0108 - 0x00D8)
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0x30 ];                            		// 0x00D8 (0x0030) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PendingLevel" );

		return pClassPointer;
	};

};

UClass* UPendingLevel::pClassPointer = NULL;

// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x0108 - 0x0108)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DemoPlayPendingLevel" );

		return pClassPointer;
	};

};

UClass* UDemoPlayPendingLevel::pClassPointer = NULL;

// Class Engine.DemoRecConnection
// 0x0000 (0x4FB4 - 0x4FB4)
class UDemoRecConnection : public UNetConnection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DemoRecConnection" );

		return pClassPointer;
	};

};

UClass* UDemoRecConnection::pClassPointer = NULL;

// Class Engine.NetDriver
// 0x0184 (0x01C8 - 0x0044)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0044 (0x0008) MISSED OFFSET
	int                                                ServerActionRatePerPeriod;                        		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ServerActionRateAverageSeconds;                   		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ServerActionRatePerPacket;                        		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x20 ];                            		// 0x0058 (0x0020) MISSED OFFSET
	float                                              ConnectionTimeout;                                		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialConnectTimeout;                            		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeepAliveTime;                                    		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RelevantTimeout;                                  		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpawnPrioritySeconds;                             		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ServerTravelPause;                                		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxClientRate;                                    		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxInternetClientRate;                            		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetServerMaxTickRate;                             		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bClampListenServerTickRate : 1;                   		// 0x009C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowDownloads : 1;                               		// 0x00A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00A4 (0x0004) MISSED OFFSET
	float                                              AckTimeOut;                                       		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AckMaxWaitInBufferTime;                           		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetServerMaxTickRate_Social;                      		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetRateAtten_Near;                                		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetRateAtten_Medium;                              		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetRateAtten_Far;                                 		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetRateAtten_BehindViewer;                        		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData03[ 0xC ];                             		// 0x00C4 (0x000C) MISSED OFFSET
	float                                              fRelevancyDistance;                               		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fRelevancyDistance_Social;                        		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData04[ 0x18 ];                            		// 0x00D8 (0x0018) MISSED OFFSET
	int                                                MaxDownloadSize;                                  		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           DownloadManagers;                                 		// 0x00F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x8C ];                            		// 0x0100 (0x008C) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                           		// 0x018C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0198 (0x0004) MISSED OFFSET
	int                                                ServerBandwidth_OutBytesMax;                      		// 0x019C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x01A0 (0x0004) MISSED OFFSET
	int                                                ServerBandwidth_FallbackRate;                     		// 0x01A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ServerBandwidth_FallbackTimeout;                  		// 0x01A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x01AC (0x0004) MISSED OFFSET
	float                                              m_fTickDispatchTimeout;                           		// 0x01B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTickDispatchUnreliableTimeout;                 		// 0x01B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData09[ 0x10 ];                            		// 0x01B8 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NetDriver" );

		return pClassPointer;
	};

};

UClass* UNetDriver::pClassPointer = NULL;

// Class Engine.DemoRecDriver
// 0x00A0 (0x0268 - 0x01C8)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[ 0x28 ];                            		// 0x01C8 (0x0028) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                               		// 0x01F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x6C ];                            		// 0x01FC (0x006C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DemoRecDriver" );

		return pClassPointer;
	};

};

UClass* UDemoRecDriver::pClassPointer = NULL;

// Class Engine.Light
// 0x0008 (0x0244 - 0x023C)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                   		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0240 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Light" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ALight::pClassPointer = NULL;

// Class Engine.DirectionalLight
// 0x0000 (0x0244 - 0x0244)
class ADirectionalLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DirectionalLight" );

		return pClassPointer;
	};

};

UClass* ADirectionalLight::pClassPointer = NULL;

// Class Engine.LightComponent
// 0x012B (0x0184 - 0x0059)
class ULightComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                        		// 0x005C (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     WorldToLight;                                     		// 0x0060 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     LightToWorld;                                     		// 0x00A0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       LightGuid;                                        		// 0x00E0 (0x0010) [0x0000000000200002]              ( CPF_Const )
	struct FGuid                                       LightmapGuid;                                     		// 0x00F0 (0x0010) [0x0000000000200002]              ( CPF_Const )
	float                                              Brightness;                                       		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ULightFunction*                              Function;                                         		// 0x0108 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x010C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastShadows : 1;                                  		// 0x010C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastStaticShadows : 1;                            		// 0x010C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastDynamicShadows : 1;                           		// 0x010C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x010C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RequireDynamicShadows : 1;                        		// 0x010C (0x0004) [0x0000000020000002] [0x00000020] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bForceDynamicLight : 1;                           		// 0x010C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      UseDirectLightMap : 1;                            		// 0x010C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;           		// 0x010C (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bOnlyAffectSameAndSpecifiedLevels : 1;            		// 0x010C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;		// 0x010C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseVolumes : 1;                                  		// 0x010C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      m_bNightLight : 1;                                		// 0x010C (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      m_bExcludedFromLightEnvironment : 1;              		// 0x010C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bCooked : 1;                                      		// 0x010C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	float                                              AttenuationBufferFactor;                          		// 0x0110 (0x0004) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0114 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FName >                             OtherLevelsToAffect;                              		// 0x0118 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class ABrush* >                            InclusionVolumes;                                 		// 0x0128 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class ABrush* >                            ExclusionVolumes;                                 		// 0x0134 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPointer >                          InclusionConvexVolumes;                           		// 0x0140 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FPointer >                          ExclusionConvexVolumes;                           		// 0x014C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      LightAffectsClassification;                       		// 0x0158 (0x0001) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      LightShadowMode;                                  		// 0x0159 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ModShadowColor;                                   		// 0x015C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutTime;                             		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutExponent;                         		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightListIndex;                                   		// 0x0174 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      ShadowProjectionTechnique;                        		// 0x0178 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShadowFilterQuality;                              		// 0x0179 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinShadowResolution;                              		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxShadowResolution;                              		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LightComponent" );

		return pClassPointer;
	};

	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
	void UpdateColorAndBrightness ( );
	struct FVector GetDirection ( );
	struct FVector GetOrigin ( );
	void SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction );
	void SetEnabled ( unsigned long bSetEnabled );
};

UClass* ULightComponent::pClassPointer = NULL;

// Class Engine.DirectionalLightComponent
// 0x0004 (0x0188 - 0x0184)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                    		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DirectionalLightComponent" );

		return pClassPointer;
	};

};

UClass* UDirectionalLightComponent::pClassPointer = NULL;

// Class Engine.DirectionalLightToggleable
// 0x0000 (0x0244 - 0x0244)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DirectionalLightToggleable" );

		return pClassPointer;
	};

};

UClass* ADirectionalLightToggleable::pClassPointer = NULL;

// Class Engine.DistributionFloatConstant
// 0x0004 (0x0058 - 0x0054)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionFloatConstant" );

		return pClassPointer;
	};

};

UClass* UDistributionFloatConstant::pClassPointer = NULL;

// Class Engine.DistributionFloatConstantCurve
// 0x0010 (0x0064 - 0x0054)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                    		// 0x0054 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionFloatConstantCurve" );

		return pClassPointer;
	};

};

UClass* UDistributionFloatConstantCurve::pClassPointer = NULL;

// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x0071 - 0x0058)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinInput;                                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInput;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOutput;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOutput;                                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamMode;                                        		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionFloatParameterBase" );

		return pClassPointer;
	};

};

UClass* UDistributionFloatParameterBase::pClassPointer = NULL;

// Class Engine.DistributionFloatUniform
// 0x0008 (0x005C - 0x0054)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                              		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionFloatUniform" );

		return pClassPointer;
	};

};

UClass* UDistributionFloatUniform::pClassPointer = NULL;

// Class Engine.DistributionFloatUniformCurve
// 0x0010 (0x0064 - 0x0054)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                    		// 0x0054 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionFloatUniformCurve" );

		return pClassPointer;
	};

};

UClass* UDistributionFloatUniformCurve::pClassPointer = NULL;

// Class Engine.DistributionVectorConstant
// 0x0011 (0x0065 - 0x0054)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                         		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionVectorConstant" );

		return pClassPointer;
	};

};

UClass* UDistributionVectorConstant::pClassPointer = NULL;

// Class Engine.DistributionVectorConstantCurve
// 0x0015 (0x0069 - 0x0054)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                    		// 0x0054 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionVectorConstantCurve" );

		return pClassPointer;
	};

};

UClass* UDistributionVectorConstantCurve::pClassPointer = NULL;

// Class Engine.DistributionVectorParameterBase
// 0x003E (0x00A3 - 0x0065)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinInput;                                         		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxInput;                                         		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinOutput;                                        		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxOutput;                                        		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamModes[ 0x3 ];                                		// 0x00A0 (0x0003) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionVectorParameterBase" );

		return pClassPointer;
	};

};

UClass* UDistributionVectorParameterBase::pClassPointer = NULL;

// Class Engine.DistributionVectorUniform
// 0x0020 (0x0074 - 0x0054)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                              		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Min;                                              		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      LockedAxes;                                       		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x0071 (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionVectorUniform" );

		return pClassPointer;
	};

};

UClass* UDistributionVectorUniform::pClassPointer = NULL;

// Class Engine.DistributionVectorUniformCurve
// 0x0019 (0x006D - 0x0054)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                    		// 0x0054 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes1 : 1;                                   		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockAxes2 : 1;                                   		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      LockedAxes[ 0x2 ];                                		// 0x0068 (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x006A (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionVectorUniformCurve" );

		return pClassPointer;
	};

};

UClass* UDistributionVectorUniformCurve::pClassPointer = NULL;

// Class Engine.DmgType_Fell
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Fell : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DmgType_Fell" );

		return pClassPointer;
	};

};

UClass* UDmgType_Fell::pClassPointer = NULL;

// Class Engine.DOFEffect
// 0x002F (0x0094 - 0x0065)
class UDOFEffect : public UPostProcessEffect
{
public:
	float                                              FalloffExponent;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ModulateBlurColor;                                		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FocusType;                                        		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DOFEffect" );

		return pClassPointer;
	};

};

UClass* UDOFEffect::pClassPointer = NULL;

// Class Engine.DOFAndBloomEffect
// 0x0004 (0x0098 - 0x0094)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DOFAndBloomEffect" );

		return pClassPointer;
	};

};

UClass* UDOFAndBloomEffect::pClassPointer = NULL;

// Class Engine.DoorMarker
// 0x0010 (0x0344 - 0x0334)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                           		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DoorType;                                         		// 0x0338 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      DoorTrigger;                                      		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x0340 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x0340 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x0340 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoorOpen : 1;                                    		// 0x0340 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x0340 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DoorMarker" );

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void MoverClosed ( );
	void MoverOpened ( );
	void eventPostBeginPlay ( );
};

UClass* ADoorMarker::pClassPointer = NULL;

// Class Engine.DrawBoxComponent
// 0x0018 (0x01F0 - 0x01D8)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                         		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   BoxMaterial;                                      		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxExtent;                                        		// 0x01E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireBox : 1;                                 		// 0x01EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitBox : 1;                                  		// 0x01EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawBoxComponent" );

		return pClassPointer;
	};

};

UClass* UDrawBoxComponent::pClassPointer = NULL;

// Class Engine.DrawCapsuleComponent
// 0x0014 (0x01EC - 0x01D8)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                     		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CapsuleMaterial;                                  		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleHeight;                                    		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCapsule : 1;                             		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCapsule : 1;                              		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawCapsuleComponent" );

		return pClassPointer;
	};

};

UClass* UDrawCapsuleComponent::pClassPointer = NULL;

// Class Engine.DrawConeComponent
// 0x0010 (0x01E8 - 0x01D8)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                        		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeAngle;                                        		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConeSides;                                        		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawConeComponent" );

		return pClassPointer;
	};

};

UClass* UDrawConeComponent::pClassPointer = NULL;

// Class Engine.DrawCylinderComponent
// 0x0020 (0x01F8 - 0x01D8)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                    		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CylinderMaterial;                                 		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderRadius;                                   		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderTopRadius;                                		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeight;                                   		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeightOffset;                             		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CylinderSides;                                    		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCylinder : 1;                            		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCylinder : 1;                             		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawCylinderComponent" );

		return pClassPointer;
	};

};

UClass* UDrawCylinderComponent::pClassPointer = NULL;

// Class Engine.DrawFrustumComponent
// 0x0018 (0x01F0 - 0x01D8)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                     		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAngle;                                     		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAspectRatio;                               		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumStartDist;                                 		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumEndDist;                                   		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    Texture;                                          		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawFrustumComponent" );

		return pClassPointer;
	};

};

UClass* UDrawFrustumComponent::pClassPointer = NULL;

// Class Engine.DrawLightConeComponent
// 0x0000 (0x01E8 - 0x01E8)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawLightConeComponent" );

		return pClassPointer;
	};

};

UClass* UDrawLightConeComponent::pClassPointer = NULL;

// Class Engine.DrawSphereComponent
// 0x0014 (0x01EC - 0x01D8)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                      		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   SphereMaterial;                                   		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereRadius;                                     		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SphereSides;                                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireSphere : 1;                              		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitSphere : 1;                               		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawSphereComponent" );

		return pClassPointer;
	};

};

UClass* UDrawSphereComponent::pClassPointer = NULL;

// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawLightRadiusComponent" );

		return pClassPointer;
	};

};

UClass* UDrawLightRadiusComponent::pClassPointer = NULL;

// Class Engine.DrawQuadComponent
// 0x000C (0x01E4 - 0x01D8)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                          		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Width;                                            		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawQuadComponent" );

		return pClassPointer;
	};

};

UClass* UDrawQuadComponent::pClassPointer = NULL;

// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DrawSoundRadiusComponent" );

		return pClassPointer;
	};

};

UClass* UDrawSoundRadiusComponent::pClassPointer = NULL;

// Class Engine.DroppedPickup
// 0x0008 (0x0244 - 0x023C)
class ADroppedPickup : public AActor
{
public:
	class ANavigationPoint*                            PickupCache;                                      		// 0x023C (0x0004) [0x0000000000000000]              
	unsigned long                                      bFadeOut : 1;                                     		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DroppedPickup" );

		return pClassPointer;
	};

	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventEncroachedBy ( class AActor* Other );
	void eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void Reset ( );
	void RemoveFromNavigation ( );
	void AddToNavigation ( );
};

UClass* ADroppedPickup::pClassPointer = NULL;

// Class Engine.DynamicAnchor
// 0x0004 (0x0338 - 0x0334)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                      		// 0x0334 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicAnchor" );

		return pClassPointer;
	};

};

UClass* ADynamicAnchor::pClassPointer = NULL;

// Class Engine.DynamicBlockingVolume
// 0x0000 (0x027C - 0x027C)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicBlockingVolume" );

		return pClassPointer;
	};

};

UClass* ADynamicBlockingVolume::pClassPointer = NULL;

// Class Engine.DynamicCameraActor
// 0x0000 (0x035C - 0x035C)
class ADynamicCameraActor : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicCameraActor" );

		return pClassPointer;
	};

};

UClass* ADynamicCameraActor::pClassPointer = NULL;

// Class Engine.DynamicSMActor
// 0x0038 (0x0274 - 0x023C)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0240 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 ReplicatedMesh;                                   		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInterface*                          ReplicatedMaterial;                               		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedMeshTranslation;                        		// 0x024C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    ReplicatedMeshRotation;                           		// 0x0258 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedMeshScale3D;                            		// 0x0264 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bPawnCanBaseOn : 1;                               		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSafeBaseIfAsleep : 1;                            		// 0x0270 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicSMActor" );

		return pClassPointer;
	};

	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	bool CanBasePawn ( class APawn* P );
	void SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnSetStaticMesh ( class USeqAct_SetStaticMesh* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ADynamicSMActor::pClassPointer = NULL;

// Class Engine.EdCoordSystem
// 0x004C (0x008C - 0x0040)
class UEdCoordSystem : public UObject
{
public:
	struct FMatrix                                     M;                                                		// 0x0040 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Desc;                                             		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.EdCoordSystem" );

		return pClassPointer;
	};

};

UClass* UEdCoordSystem::pClassPointer = NULL;

// Class Engine.EmitterPool
// 0x0058 (0x0294 - 0x023C)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                      		// 0x023C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          PoolComponents;                                   		// 0x0240 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          ActiveComponents;                                 		// 0x024C (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxActiveEffects;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLogPoolOverflow : 1;                             		// 0x025C (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bLogPoolOverflowList : 1;                         		// 0x025C (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FEmitterBaseInfo >                  RelativePSCs;                                     		// 0x0260 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	float                                              SMC_MIC_ReductionTime;                            		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              SMC_MIC_CurrentReductionTime;                     		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IdealStaticMeshComponents;                        		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                IdealMaterialInstanceConstants;                   		// 0x0278 (0x0004) [0x0000000000000000]              
	TArray< class UStaticMeshComponent* >              FreeSMComponents;                                 		// 0x027C (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         FreeMatInstConsts;                                		// 0x0288 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.EmitterPool" );

		return pClassPointer;
	};

	class UParticleSystemComponent* SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate );
	class UParticleSystemComponent* SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor );
	class UParticleSystemComponent* GetPooledComponent ( class UParticleSystem* EmitterTemplate );
	class UMaterialInstanceConstant* GetFreeMatInstConsts ( unsigned long bCreateNewObject );
	void FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC );
	class UStaticMeshComponent* GetFreeStaticMeshComponent ( unsigned long bCreateNewObject );
	void FreeStaticMeshComponents ( class UParticleSystemComponent* PSC );
	void ReturnToPool ( class UParticleSystemComponent* PSC );
	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
};

UClass* AEmitterPool::pClassPointer = NULL;

// Class Engine.FaceFXAnimSet
// 0x0030 (0x0070 - 0x0040)
class UFaceFXAnimSet : public UObject
{
public:
	class UFaceFXAsset*                                DefaultFaceFXAsset;                               		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    InternalFaceFXAnimSet;                            		// 0x0044 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXAnimSetBytes;                            		// 0x0048 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXMiniSessionBytes;                        		// 0x0054 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USoundCue* >                         ReferencedSoundCues;                              		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumLoadErrors;                                    		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FaceFXAnimSet" );

		return pClassPointer;
	};

};

UClass* UFaceFXAnimSet::pClassPointer = NULL;

// Class Engine.FaceFXAsset
// 0x0048 (0x0088 - 0x0040)
class UFaceFXAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                  		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    FaceFXActor;                                      		// 0x0044 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXActorBytes;                              		// 0x0048 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXSessionBytes;                            		// 0x0054 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UMorphTargetSet* >                   PreviewMorphSets;                                 		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UFaceFXAnimSet* >                    MountedFaceFXAnimSets;                            		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         ReferencedSoundCues;                              		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumLoadErrors;                                    		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FaceFXAsset" );

		return pClassPointer;
	};

	void UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
	void MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
};

UClass* UFaceFXAsset::pClassPointer = NULL;

// Class Engine.FileChannel
// 0x0210 (0x027C - 0x006C)
class UFileChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x210 ];                           		// 0x006C (0x0210) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FileChannel" );

		return pClassPointer;
	};

};

UClass* UFileChannel::pClassPointer = NULL;

// Class Engine.FileWriter
// 0x0018 (0x0254 - 0x023C)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                       		// 0x023C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     Filename;                                         		// 0x0240 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      FileType;                                         		// 0x024C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFlushEachWrite : 1;                              		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FileWriter" );

		return pClassPointer;
	};

	void eventDestroyed ( );
	void Logf ( struct FString logString );
	void CloseFile ( );
	bool OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp );
};

UClass* AFileWriter::pClassPointer = NULL;

// Class Engine.FileLog
// 0x0000 (0x0254 - 0x0254)
class AFileLog : public AFileWriter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FileLog" );

		return pClassPointer;
	};

	void CloseLog ( );
	void OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique );
};

UClass* AFileLog::pClassPointer = NULL;

// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x009C - 0x009C)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FloorToCeilingReachSpec" );

		return pClassPointer;
	};

};

UClass* UFloorToCeilingReachSpec::pClassPointer = NULL;

// Class Engine.Font
// 0x00C4 (0x0104 - 0x0040)
class UFont : public UObject
{
public:
	TArray< struct FFontCharacter >                    Characters;                                       		// 0x0040 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UTexture2D* >                        Textures;                                         		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CharRemap;                                        		// 0x0058 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                IsRemapped;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                Kerning;                                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFontImportOptionsData                      ImportOptions;                                    		// 0x006C (0x0088) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumCharacters;                                    		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      MaxCharHeight;                                    		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Font" );

		return pClassPointer;
	};

	float GetMaxCharHeight ( );
	float GetAuthoredViewportHeight ( float ViewportHeight );
	float GetScalingFactor ( float HeightTest );
	int GetResolutionPageIndex ( float HeightTest );
};

UClass* UFont::pClassPointer = NULL;

// Class Engine.FontImportOptions
// 0x0088 (0x00C8 - 0x0040)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                             		// 0x0040 (0x0088) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FontImportOptions" );

		return pClassPointer;
	};

};

UClass* UFontImportOptions::pClassPointer = NULL;

// Class Engine.ForceFeedbackManager
// 0x0014 (0x0054 - 0x0040)
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                         		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsPaused : 1;                                    		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                CurrentSample;                                    		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              ElapsedTime;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              ScaleAllWaveformsBy;                              		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ForceFeedbackManager" );

		return pClassPointer;
	};

	void PauseWaveform ( unsigned long bPause );
	void StopForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform );
	void PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform );
};

UClass* UForceFeedbackManager::pClassPointer = NULL;

// Class Engine.ForceFeedbackWaveform
// 0x0010 (0x0050 - 0x0040)
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                   		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FWaveformSample >                   Samples;                                          		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ForceFeedbackWaveform" );

		return pClassPointer;
	};

};

UClass* UForceFeedbackWaveform::pClassPointer = NULL;

// Class Engine.GameInfo
// 0x0170 (0x03AC - 0x023C)
class AGameInfo : public AInfo
{
public:
	unsigned long                                      bRestartLevel : 1;                                		// 0x023C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPauseable : 1;                                   		// 0x023C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTeamGame : 1;                                    		// 0x023C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGameEnded : 1;                                   		// 0x023C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOverTime : 1;                                    		// 0x023C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayedStart : 1;                                		// 0x023C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWaitingToStartMatch : 1;                         		// 0x023C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bChangeLevels : 1;                                		// 0x023C (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAlreadyChanged : 1;                              		// 0x023C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bLoggingGame : 1;                                 		// 0x023C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bAdminCanPause : 1;                               		// 0x023C (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bGameRestarted : 1;                               		// 0x023C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bLevelChange : 1;                                 		// 0x023C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bKickLiveIdlers : 1;                              		// 0x023C (0x0004) [0x0000000000044000] [0x00002000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUsingArbitration : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                 		// 0x023C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bNeedsEndGameHandshake : 1;                       		// 0x023C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                  		// 0x023C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                    		// 0x023C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bFixedPlayerStart : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bAutomatedPerfTesting : 1;                        		// 0x023C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAutoContinueToNextRound : 1;                     		// 0x023C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                		// 0x023C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bAutomatedTestingWithOpen : 1;                    		// 0x023C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bDoingAFlyThrough : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCheckingForFragmentation : 1;                    		// 0x023C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bCheckingForMemLeaks : 1;                         		// 0x023C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bDoingMemStartupStats : 1;                        		// 0x023C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bDoFearCostFallOff : 1;                           		// 0x023C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bUseSeamlessTravel : 1;                           		// 0x023C (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bHasNetworkError : 1;                             		// 0x023C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bRequiresPushToTalk : 1;                          		// 0x023C (0x0004) [0x0000000000000002] [0x80000000] ( CPF_Const )
	int                                                AutomatedPerfRemainingTime;                       		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                AutomatedTestingMapIndex;                         		// 0x0244 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           AutomatedMapTestingList;                          		// 0x0248 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                NumAutomatedMapTestingCycles;                     		// 0x0254 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                NumberOfMatchesPlayed;                            		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                NumMapListCyclesDone;                             		// 0x025C (0x0004) [0x0000000000000000]              
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;     		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AutomatedMapTestingTransitionMap;                 		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugLocString;                                     		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugRotString;                                     		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerController* >                 PendingArbitrationPCs;                            		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerController* >                 ArbitrationPCs;                                   		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ArbitrationHandshakeTimeout;                      		// 0x02A8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameDifficulty;                                   		// 0x02AC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                GoreLevel;                                        		// 0x02B0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameSpeed;                                        		// 0x02B4 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultPawnClass;                                 		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UClass*                                      ScoreBoardType;                                   		// 0x02BC (0x0004) [0x0000000000000000]              
	class UClass*                                      HUDType;                                          		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                MaxSpectators;                                    		// 0x02C4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxSpectatorsAllowed;                             		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                NumSpectators;                                    		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                MaxPlayers;                                       		// 0x02D0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxPlayersAllowed;                                		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                NumPlayers;                                       		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                NumBots;                                          		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                NumTravellingPlayers;                             		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                CurrentID;                                        		// 0x02E4 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPlayerName;                                		// 0x02E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameName;                                         		// 0x02F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              FearCostFallOff;                                  		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                GoalScore;                                        		// 0x0304 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxLives;                                         		// 0x0308 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TimeLimit;                                        		// 0x030C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      DeathMessageClass;                                		// 0x0310 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameMessageClass;                                 		// 0x0314 (0x0004) [0x0000000000000000]              
	class AMutator*                                    BaseMutator;                                      		// 0x0318 (0x0004) [0x0000000000000000]              
	class UClass*                                      AccessControlClass;                               		// 0x031C (0x0004) [0x0000000000000000]              
	class AAccessControl*                              AccessControl;                                    		// 0x0320 (0x0004) [0x0000000000000000]              
	class AGameRules*                                  GameRulesModifiers;                               		// 0x0324 (0x0004) [0x0000000000000000]              
	class UClass*                                      BroadcastHandlerClass;                            		// 0x0328 (0x0004) [0x0000000000000000]              
	class ABroadcastHandler*                           BroadcastHandler;                                 		// 0x032C (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerControllerClass;                            		// 0x0330 (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerReplicationInfoClass;                       		// 0x0334 (0x0004) [0x0000000000000000]              
	struct FString                                     DialogueManagerClass;                             		// 0x0338 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ADialogueManager*                            DialogueManager;                                  		// 0x0344 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameReplicationInfoClass;                         		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x034C (0x0004) [0x0000000000000000]              
	float                                              MaxIdleTime;                                      		// 0x0350 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTimeMargin;                                    		// 0x0354 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TimeMarginSlack;                                  		// 0x0358 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTimeMargin;                                    		// 0x035C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x0360 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   Pausers;                                          		// 0x036C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0378 (0x0004) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x037C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0380 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameSettings*                         GameSettings;                                     		// 0x0384 (0x0004) [0x0000000000000000]              
	class UClass*                                      OnlineStatsWriteClass;                            		// 0x0388 (0x0004) [0x0000000000000000]              
	class ACoverReplicator*                            CoverReplicatorBase;                              		// 0x038C (0x0004) [0x0000000000000000]              
	class UClass*                                      OnlineGameSettingsClass;                          		// 0x0390 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ServerOptions;                                    		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameInfo" );

		return pClassPointer;
	};

	void TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void TellClientsToReturnToPartyHost ( );
	void ShowSurveyForAllClients ( struct FString QuestionId, struct FString Context );
	void IncrementNumberOfMatchesPlayed ( );
	void NativeRenderDebug ( class UCanvas* Canvas );
	void IncrementAutomatedTestingMapIndex ( );
	void CloseAutomatedMapTestTimer ( );
	void eventStartAutomatedMapTestTimer ( );
	void OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServer ( );
	void OnLoginChange ( );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	void ClearAutoLoginDelegates ( );
	bool ProcessServerLogin ( );
	void eventMatineeCancelled ( );
	void RecalculateSkillRating ( );
	void UpdateGameplayMuteList ( class APlayerController* PC );
	void NotifyArbitratedMatchEnd ( );
	void ServerWriteArbitrationEndGameData ( );
	void ProcessClientDataWriteCompletion ( class APlayerController* PC );
	void ProcessEndGameHandshake ( );
	bool MatchIsInProgress ( );
	void ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServerForArbitration ( );
	void StartArbitratedMatch ( );
	void StartArbitrationRegistration ( );
	void ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful );
	void UpdateGameSettingsCounts ( );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void UpdateGameSettings ( );
	void eventPostSeamlessTravel ( );
	void SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI );
	bool FindInactivePRI ( class APlayerController* PC );
	void AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void eventPostCommitMapChange ( );
	void eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName );
	bool AllowCheats ( class APlayerController* P );
	bool AllowMutator ( struct FString MutatorClassName );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void KillBots ( );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool eventCanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	struct FString ParseMessageString ( class AController* Who, struct FString Message );
	void ModifyScoreKill ( class AController* Killer, class AController* Other );
	void eventScoreKill ( class AController* Killer, class AController* Other );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	void AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	void EndLogging ( struct FString Reason );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void WriteOnlinePlayerScores ( );
	void WriteOnlineStats ( );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void RestartGame ( );
	bool GetTravelType ( );
	struct FString GetNextAutomatedTestingMap ( );
	struct FString GetNextMap ( );
	void SendPlayer ( class APlayerController* aPlayer, struct FString URL );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	bool ShouldRespawn ( class APickupFactory* Other );
	bool CheckRelevance ( class AActor* Other );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void KickBan ( struct FString S );
	void Kick ( struct FString S );
	struct FString ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage );
	void BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType );
	bool PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, int nWeaponType );
	void eventNotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventAddDefaultInventory ( class APawn* P );
	void eventAcceptInventory ( class APawn* PlayerPawn );
	void Logout ( class AController* Exiting );
	void eventPreExit ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void ReplicateStreamingStatus ( class APlayerController* PC );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void RestartPlayer ( class AController* NewPlayer );
	void StartBots ( );
	void StartHumans ( );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartOnlineGame ( );
	void StartMatch ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage );
	bool AtCapacity ( unsigned long bSpectator );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage );
	bool RequiresPassword ( );
	class APlayerController* ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL );
	void ProcessServerTravel ( struct FString URL, unsigned long bAbsolute );
	struct FString eventGetBeaconText ( );
	void RemoveMutator ( class AMutator* MutatorToRemove );
	void AddGameRules ( class UClass* GRClass );
	void AddMutator ( struct FString mutname, unsigned long bUserAdded );
	void ParseAutomatedTestingOptions ( struct FString Options );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	int GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue );
	bool HasOption ( struct FString Options, struct FString InKey );
	struct FString ParseOption ( struct FString Options, struct FString InKey );
	void GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value );
	bool GrabOption ( struct FString* Options, struct FString* Result );
	void SetGameSpeed ( float T );
	void DebugPause ( );
	void ClearPause ( );
	bool SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	int GetServerPort ( );
	int GetNumPlayers ( );
	struct FString GetNetworkNumber ( );
	void InitGameReplicationInfo ( );
	void eventKickIdler ( class APlayerController* PC );
	void eventGameEnding ( );
	void NotifyNavigationChanged ( class ANavigationPoint* N );
	void DoNavFearCostFallOff ( );
	void eventTimer ( );
	void ResetLevel ( );
	bool ShouldReset ( class AActor* ActorToReset );
	void Reset ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* GetCoverReplicator ( );
	bool UseLowGore ( class AWorldInfo* WI );
	struct FString FindPlayerByID ( int PlayerID );
	void eventPreBeginPlay ( );
};

UClass* AGameInfo::pClassPointer = NULL;

// Class Engine.ReplicationInfo
// 0x0000 (0x023C - 0x023C)
class AReplicationInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ReplicationInfo" );

		return pClassPointer;
	};

};

UClass* AReplicationInfo::pClassPointer = NULL;

// Class Engine.GameReplicationInfo
// 0x00AC (0x02E8 - 0x023C)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                        		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UCurrentGameDataStore*                       CurrentGameData;                                  		// 0x0240 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStopCountDown : 1;                               		// 0x0244 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bMatchHasBegun : 1;                               		// 0x0244 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bMatchIsOver : 1;                                 		// 0x0244 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bNeedsOnlineCleanup : 1;                          		// 0x0244 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsArbitrated : 1;                                		// 0x0244 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bTrackStats : 1;                                  		// 0x0244 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	int                                                RemainingTime;                                    		// 0x0248 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                ElapsedTime;                                      		// 0x024C (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                RemainingMinute;                                  		// 0x0250 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	float                                              SecondCount;                                      		// 0x0254 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                GoalScore;                                        		// 0x0258 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                TimeLimit;                                        		// 0x025C (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                MaxLives;                                         		// 0x0260 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	TArray< class ATeamInfo* >                         Teams;                                            		// 0x0264 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ServerName;                                       		// 0x0270 (0x000C) [0x0000000040444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ShortName;                                        		// 0x027C (0x000C) [0x0000000040444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     AdminName;                                        		// 0x0288 (0x000C) [0x0000000040444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     AdminEmail;                                       		// 0x0294 (0x000C) [0x0000000040444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                ServerRegion;                                     		// 0x02A0 (0x0004) [0x0000000040044021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_EditInlineNotify )
	struct FString                                     MessageOfTheDay;                                  		// 0x02A4 (0x000C) [0x0000000040444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	class AActor*                                      Winner;                                           		// 0x02B0 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	TArray< class APlayerReplicationInfo* >            PRIArray;                                         		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MatchID;                                          		// 0x02CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcEngineClientServerDebugManager*            m_pEngineClientServerDebugManager;                		// 0x02D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fServerAvgFrameTime;                            		// 0x02D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fServerMaxFrameTime;                            		// 0x02D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nServerSpikesCurrent;                           		// 0x02DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nServerSpikesPrev;                              		// 0x02E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fServerSpikeThresholdMS;                        		// 0x02E4 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameReplicationInfo" );

		return pClassPointer;
	};

	bool ShouldShowGore ( );
	bool PreventPause ( );
	bool IsCoopMultiplayerGame ( );
	bool IsMultiplayerGame ( );
	void eventOnlineSession_EndSession ( unsigned long bForced );
	void eventOnlineSession_EndMatch ( );
	void eventOnlineSession_StartMatch ( );
	class UOnlineGameInterface* GetOnlineGameInterface ( );
	void EndGame ( );
	void StartMatch ( );
	void CleanupGameDataStore ( );
	void InitializeGameDataStore ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SortPRIArray ( );
	bool InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 );
	void GetPRIArray ( TArray< class APlayerReplicationInfo* >* pris );
	void SetTeam ( int Index, class ATeamInfo* TI );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* FindPlayerByID ( int PlayerID );
	bool OnSameTeam ( class AActor* A, class AActor* B );
	void eventTimer ( );
	void eventDestroyed ( );
	void Reset ( );
	void eventFinishedBlockedLoads ( );
	void UpdateServerFrameTime ( );
	void eventPostBeginPlay ( );
	void DoGfxMemStats ( );
	void DoSysMemStats ( );
	float GetGfxMemStatsInterval ( );
	float GetSysMemStatsInterval ( );
	void AllocateEngineDebugManager ( );
};

UClass* AGameReplicationInfo::pClassPointer = NULL;

// Class Engine.GravityVolume
// 0x0004 (0x02B8 - 0x02B4)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                         		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GravityVolume" );

		return pClassPointer;
	};

};

UClass* AGravityVolume::pClassPointer = NULL;

// Class Engine.GuidCache
// 0x0048 (0x0088 - 0x0040)
class UGuidCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0040 (0x0048) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GuidCache" );

		return pClassPointer;
	};

};

UClass* UGuidCache::pClassPointer = NULL;

// Class Engine.HeightFogComponent
// 0x001F (0x0078 - 0x0059)
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseWeatherSystem : 1;                            		// 0x005C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	float                                              Height;                                           		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Density;                                          		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightBrightness;                                  		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ExtinctionDistance;                               		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartDistance;                                    		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.HeightFogComponent" );

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};

UClass* UHeightFogComponent::pClassPointer = NULL;

// Class Engine.HUD
// 0x0284 (0x04C0 - 0x023C)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                       		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      GreenColor;                                       		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      RedColor;                                         		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APlayerController*                           PlayerOwner;                                      		// 0x0248 (0x0004) [0x0000000000000000]              
	class AHUD*                                        HudOwner;                                         		// 0x024C (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      ViewedInfo;                                       		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              ProgressFadeTime;                                 		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FColor                                      MOTDColor;                                        		// 0x0258 (0x0004) [0x0000000000000000]              
	class AScoreboard*                                 Scoreboard;                                       		// 0x025C (0x0004) [0x0000000000000000]              
	unsigned long                                      LostFocusPaused : 1;                              		// 0x0260 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowHUD : 1;                                     		// 0x0260 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bShowScores : 1;                                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowDebugInfo : 1;                               		// 0x0260 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowBadConnectionAlert : 1;                      		// 0x0260 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bMessageBeep : 1;                                 		// 0x0260 (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	float                                              HudCanvasScale;                                   		// 0x0264 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FConsoleMessage >                   ConsoleMessages;                                  		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      ConsoleColor;                                     		// 0x0274 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConsoleMessageCount;                              		// 0x0278 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ConsoleFontSize;                                  		// 0x027C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MessageFontOffset;                                		// 0x0280 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxHUDAreaMessageCount;                           		// 0x0284 (0x0004) [0x0000000000000000]              
	struct FHudLocalizedMessage                        LocalMessages[ 0x8 ];                             		// 0x0288 (0x0200) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              ConsoleMessagePosX;                               		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConsoleMessagePosY;                               		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCanvas*                                     Canvas;                                           		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              LastHUDRenderTime;                                		// 0x0494 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RenderDelta;                                      		// 0x0498 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeX;                                            		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeY;                                            		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterX;                                          		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterY;                                          		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioX;                                           		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioY;                                           		// 0x04B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DebugDisplay;                                     		// 0x04B4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.HUD" );

		return pClassPointer;
	};

	void eventOnLostFocusPause ( unsigned long Enable );
	void PlayerOwnerDied ( );
	struct FColor GetRYGColorRamp ( float Pct );
	class UFont* GetFontSizeIndex ( int FontSize );
	void DisplayLocalMessages ( );
	void DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY );
	void DrawMessage ( int I, float PosY, float* DX, float* DY );
	void GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage );
	void AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject );
	void LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject );
	void AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime );
	void DisplayConsoleMessages ( );
	void Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime );
	void ClearMessage ( struct FHudLocalizedMessage* M );
	void DisplayBadConnectionAlert ( );
	void DisplayProgressMessage ( );
	void DrawEngineHUD ( );
	void DrawDemoHUD ( );
	void DrawHUD ( );
	void eventPostRenderScript ( );
	void PostRender ( );
	void PreRender ( );
	void PreCalcValues ( );
	void DrawRoute ( class APawn* Target );
	void FXStop ( class UClass* aClass );
	void FXPlay ( class UClass* aClass, struct FString FXAnimPath );
	bool ShouldDisplayDebug ( struct FName DebugType );
	void ShowDebug ( struct FName DebugType );
	void SetShowScores ( unsigned long bNewValue );
	void ShowScores ( );
	void ShowHUD ( );
	void ToggleHUD ( );
	void eventDestroyed ( );
	void SpawnScoreBoard ( class UClass* ScoringType );
	void eventPostBeginPlay ( );
	void Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor );
	void Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor );
};

UClass* AHUD::pClassPointer = NULL;

// Class Engine.InternetInfo
// 0x0000 (0x023C - 0x023C)
class AInternetInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InternetInfo" );

		return pClassPointer;
	};

	struct FString GetBeaconText ( int I );
	struct FString GetBeaconAddress ( int I );
};

UClass* AInternetInfo::pClassPointer = NULL;

// Class Engine.InterpActor
// 0x002C (0x02A0 - 0x0274)
class AInterpActor : public ADynamicSMActor
{
public:
	class ANavigationPoint*                            MyMarker;                                         		// 0x0274 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMonitorMover : 1;                                		// 0x0278 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMonitorZVelocity : 1;                            		// 0x0278 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                		// 0x0278 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;             		// 0x0278 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bStopOnEncroach : 1;                              		// 0x0278 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              MaxZVelocity;                                     		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              StayOpenTime;                                     		// 0x0280 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   OpenSound;                                        		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpeningAmbientSound;                              		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpenedSound;                                      		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CloseSound;                                       		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosingAmbientSound;                              		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosedSound;                                      		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x029C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpActor" );

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction );
	void PlayMovingSound ( unsigned long bClosing );
	void FinishedOpen ( );
	void Restart ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventRanInto ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventPostBeginPlay ( );
};

UClass* AInterpActor::pClassPointer = NULL;

// Class Engine.InterpCurveEdSetup
// 0x0010 (0x0050 - 0x0040)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray< struct FCurveEdTab >                       Tabs;                                             		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveTab;                                        		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpCurveEdSetup" );

		return pClassPointer;
	};

};

UClass* UInterpCurveEdSetup::pClassPointer = NULL;

// Class Engine.InterpTrack
// 0x001C (0x005C - 0x0040)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    CurveEdVTable;                                    		// 0x0044 (0x0004) [0x0000000000801000]              ( CPF_Native | CPF_NoExport )
	class UClass*                                      TrackInstClass;                                   		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FString                                     TrackTitle;                                       		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bOnePerGroup : 1;                                 		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirGroupOnly : 1;                                		// 0x0058 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisableTrack : 1;                                		// 0x0058 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsAnimControlTrack : 1;                          		// 0x0058 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrack" );

		return pClassPointer;
	};

};

UClass* UInterpTrack::pClassPointer = NULL;

// Class Engine.Inventory
// 0x004C (0x0288 - 0x023C)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                        		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AInventoryManager*                           InvManager;                                       		// 0x0240 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     ItemName;                                         		// 0x0244 (0x000C) [0x0000000040408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bRenderOverlays : 1;                              		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReceiveOwnerEvents : 1;                          		// 0x0250 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDropOnDeath : 1;                                 		// 0x0250 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x0250 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPredictRespawns : 1;                             		// 0x0250 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              RespawnTime;                                      		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDesireability;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FString                                     PickupMessage;                                    		// 0x025C (0x000C) [0x0000000040408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink | CPF_EditInlineNotify )
	class USoundCue*                                   PickupSound;                                      		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PickupForce;                                      		// 0x026C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      DroppedPickupClass;                               		// 0x0278 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         DroppedPickupMesh;                                		// 0x027C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPrimitiveComponent*                         PickupFactoryMesh;                                		// 0x0280 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    DroppedPickupParticles;                           		// 0x0284 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Inventory" );

		return pClassPointer;
	};

	void OwnerEvent ( struct FName EventName );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void ItemRemovedFromInvManager ( );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void AnnouncePickup ( class APawn* Other );
	void GiveTo ( class APawn* Other );
	float DetourWeight ( class APawn* Other, float PathWeight );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	void eventDestroyed ( );
	struct FString GetHumanReadableName ( );
	void ActiveRenderOverlays ( class AHUD* H );
	void RenderOverlays ( class AHUD* H );
};

UClass* AInventory::pClassPointer = NULL;

// Class Engine.InventoryManager
// 0x001C (0x0258 - 0x023C)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                   		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     PendingWeapon;                                    		// 0x0240 (0x0004) [0x0000000000000000]              
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                      		// 0x0244 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMustHoldWeapon : 1;                              		// 0x0248 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      PendingFire;                                      		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InventoryManager" );

		return pClassPointer;
	};

	void ClientSyncWeapon ( class AWeapon* NewWeapon );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ChangedWeapon ( );
	bool CancelWeaponChange ( );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void NextWeapon ( );
	void PrevWeapon ( );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	class AWeapon* GetBestWeapon ( unsigned long bForceADifferentWeapon );
	float GetWeaponRatingFor ( class AWeapon* W );
	bool IsActiveWeapon ( class AWeapon* ThisWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void DrawHUD ( class AHUD* H );
	void OwnerEvent ( struct FName EventName );
	int ModifyDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType );
	void eventDiscardInventory ( );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	bool AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	class AInventory* eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	bool HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void eventDestroyed ( );
	void SetupFor ( class APawn* P );
	void DumpWeaponStats ( );
	void InventoryActors ( class UClass* BaseClass, class AInventory** Inv );
	void eventPostBeginPlay ( );
};

UClass* AInventoryManager::pClassPointer = NULL;

// Class Engine.KillZDamageType
// 0x0000 (0x0090 - 0x0090)
class UKillZDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.KillZDamageType" );

		return pClassPointer;
	};

};

UClass* UKillZDamageType::pClassPointer = NULL;

// Class Engine.KMeshProps
// 0x0040 (0x0080 - 0x0040)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                         		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FKAggregateGeom                             AggGeom;                                          		// 0x004C (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.KMeshProps" );

		return pClassPointer;
	};

};

UClass* UKMeshProps::pClassPointer = NULL;

// Class Engine.Level
// 0x01A4 (0x027C - 0x00D8)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0x1A4 ];                           		// 0x00D8 (0x01A4) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Level" );

		return pClassPointer;
	};

};

UClass* ULevel::pClassPointer = NULL;

// Class Engine.LevelStreaming
// 0x0040 (0x0080 - 0x0040)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                      		// 0x0040 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class ULevel*                                      LoadedLevel;                                      		// 0x0048 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Offset;                                           		// 0x004C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     OldOffset;                                        		// 0x0058 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsVisible : 1;                                   		// 0x0064 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasLoadRequestPending : 1;                       		// 0x0064 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasUnloadRequestPending : 1;                     		// 0x0064 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisibleInEditor : 1;                     		// 0x0064 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBoundingBoxVisible : 1;                          		// 0x0064 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bLocked : 1;                                      		// 0x0064 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsFullyStatic : 1;                               		// 0x0064 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x0064 (0x0004) [0x0000000000002002] [0x00000080] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x0064 (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x0064 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                		// 0x0064 (0x0004) [0x0000000000002002] [0x00000400] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDoNotLoadInEditor : 1;                           		// 0x0064 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	struct FColor                                      DrawColor;                                        		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class ALevelStreamingVolume* >             EditorStreamingVolumes;                           		// 0x006C (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	float                                              MinTimeBetweenVolumeUnloadRequests;               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastVolumeUnloadRequestTime;                      		// 0x007C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LevelStreaming" );

		return pClassPointer;
	};

};

UClass* ULevelStreaming::pClassPointer = NULL;

// Class Engine.LevelStreamingDistance
// 0x0010 (0x0090 - 0x0080)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                           		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LevelStreamingDistance" );

		return pClassPointer;
	};

};

UClass* ULevelStreamingDistance::pClassPointer = NULL;

// Class Engine.LevelStreamingKismet
// 0x0000 (0x0080 - 0x0080)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LevelStreamingKismet" );

		return pClassPointer;
	};

};

UClass* ULevelStreamingKismet::pClassPointer = NULL;

// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0080 - 0x0080)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LevelStreamingPersistent" );

		return pClassPointer;
	};

};

UClass* ULevelStreamingPersistent::pClassPointer = NULL;

// Class Engine.LevelStreamingVolume
// 0x0011 (0x0289 - 0x0278)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x0278 (0x000C) [0x0000000001420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bEditorPreVisOnly : 1;                            		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisabled : 1;                                    		// 0x0284 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      Usage;                                            		// 0x0288 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LevelStreamingVolume" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ALevelStreamingVolume::pClassPointer = NULL;

// Class Engine.LiftCenter
// 0x0020 (0x0354 - 0x0334)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                           		// 0x0334 (0x0004) [0x0000000000000000]              
	float                                              MaxDist2D;                                        		// 0x0338 (0x0004) [0x0000000000000000]              
	struct FVector                                     LiftOffset;                                       		// 0x033C (0x000C) [0x0000000000000000]              
	unsigned long                                      bJumpLift : 1;                                    		// 0x0348 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CollisionHeight;                                  		// 0x034C (0x0004) [0x0000000000000000]              
	class ATrigger*                                    LiftTrigger;                                      		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LiftCenter" );

		return pClassPointer;
	};

	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostBeginPlay ( );
};

UClass* ALiftCenter::pClassPointer = NULL;

// Class Engine.LiftExit
// 0x0008 (0x033C - 0x0334)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                     		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExitOnly : 1;                                    		// 0x0338 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LiftExit" );

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	void WaitForLift ( class APawn* Other );
	bool CanBeReachedFromLiftBy ( class APawn* Other );
};

UClass* ALiftExit::pClassPointer = NULL;

// Class Engine.LightFunction
// 0x0010 (0x0050 - 0x0040)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                   		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale;                                            		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LightFunction" );

		return pClassPointer;
	};

};

UClass* ULightFunction::pClassPointer = NULL;

// Class Engine.Texture2D
// 0x0060 (0x0150 - 0x00F0)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x00F0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SizeX;                                            		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0100 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x0104 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x0105 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x0106 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsStreamable : 1;                                		// 0x0108 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasCancelationPending : 1;                       		// 0x0108 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;          		// 0x0108 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceMiplevelsToBeResident : 1;                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;            		// 0x0108 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreFairUsagePolicy : 1;                       		// 0x0108 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bManualStream : 1;                                		// 0x0108 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUnsharedLightingTexture : 1;                     		// 0x0108 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	float                                              TimeToForceMipLevelsToBeResident;                 		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       TextureFileCacheName;                             		// 0x0110 (0x0008) [0x0000000000000000]              
	int                                                RequestedMips;                                    		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResidentMips;                                     		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                OriginallyRequestedMips;                          		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                    		// 0x0124 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                           		// 0x0128 (0x000C) [0x0000000001201002]              ( CPF_Const | CPF_Native )
	int                                                MipTailBaseIdx;                                   		// 0x0134 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ResourceMem;                                      		// 0x0138 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FirstResourceMemMip;                              		// 0x013C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FairUsagePseudoPriority;                          		// 0x0140 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                FairUsageBias;                                    		// 0x0144 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                FairUsageLastRequestedBias;                       		// 0x0148 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                FairUsageLastUsedBias;                            		// 0x014C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Texture2D" );

		return pClassPointer;
	};

};

UClass* UTexture2D::pClassPointer = NULL;

// Class Engine.LightMapTexture2D
// 0x0000 (0x0150 - 0x0150)
class ULightMapTexture2D : public UTexture2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LightMapTexture2D" );

		return pClassPointer;
	};

};

UClass* ULightMapTexture2D::pClassPointer = NULL;

// Class Engine.LightVolume
// 0x0000 (0x0278 - 0x0278)
class ALightVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LightVolume" );

		return pClassPointer;
	};

};

UClass* ALightVolume::pClassPointer = NULL;

// Class Engine.LineBatchComponent
// 0x0018 (0x01F0 - 0x01D8)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                   		// 0x01D8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    FPrimitiveDrawInterfaceView;                      		// 0x01DC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FPointer >                          BatchedLines;                                     		// 0x01E0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              DefaultLifeTime;                                  		// 0x01EC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LineBatchComponent" );

		return pClassPointer;
	};

};

UClass* ULineBatchComponent::pClassPointer = NULL;

// Class Engine.LocalPlayer
// 0x0284 (0x02F4 - 0x0070)
class ULocalPlayer : public UPlayer
{
public:
	int                                                ControllerId;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	class UGameViewportClient*                         ViewportClient;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   Origin;                                           		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Size;                                             		// 0x0080 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           PlayerPostProcess;                                		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UPostProcessChain* >                 PlayerPostProcessChains;                          		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    ViewState;                                        		// 0x0098 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                           		// 0x009C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     LastViewLocation;                                 		// 0x00A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                    		// 0x00B0 (0x0118) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bOverridePostProcessSettings : 1;                 		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSentSplitJoin : 1;                               		// 0x01C8 (0x0004) [0x0000000000022002] [0x00000002] ( CPF_Const | CPF_Transient | CPF_EditConst )
	struct FPostProcessSettings                        PostProcessSettingsOverride;                      		// 0x01CC (0x010C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PPSettingsOverrideStartBlend;                     		// 0x02D8 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_CachedViewLocation;                             		// 0x02DC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FRotator                                    m_CachedViewRotation;                             		// 0x02E8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LocalPlayer" );

		return pClassPointer;
	};

	void TouchPlayerPostProcessChain ( );
	class UPostProcessChain* GetPostProcessChain ( int InIndex );
	bool RemoveAllPostProcessingChains ( );
	bool RemovePostProcessingChain ( int InIndex );
	bool InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone );
	void SetControllerId ( int NewControllerId );
	void ClearPostProcessSettingsOverride ( );
	void UpdateOverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings );
	void OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float StartBlendTime );
	bool GetActorVisibility ( class AActor* TestActor );
	void SendSplitJoin ( );
	bool SpawnPlayActor ( struct FString URL, struct FString* OutError );
};

UClass* ULocalPlayer::pClassPointer = NULL;

// Class Engine.MantleMarker
// 0x0008 (0x033C - 0x0334)
class AMantleMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x0334 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MantleMarker" );

		return pClassPointer;
	};

};

UClass* AMantleMarker::pClassPointer = NULL;

// Class Engine.MantleReachSpec
// 0x0000 (0x009C - 0x009C)
class UMantleReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MantleReachSpec" );

		return pClassPointer;
	};

};

UClass* UMantleReachSpec::pClassPointer = NULL;

// Class Engine.MapInfo
// 0x0000 (0x0040 - 0x0040)
class UMapInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MapInfo" );

		return pClassPointer;
	};

};

UClass* UMapInfo::pClassPointer = NULL;

// Class Engine.MaterialInterface
// 0x002C (0x006C - 0x0040)
class UMaterialInterface : public USurface
{
public:
	struct FString                                     RWTGuid;                                          		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FChannelParams >                    Channels;                                         		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterial*                                   BakedMaterial;                                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_BakedTextureCoordinate;                         		// 0x005C (0x0004) [0x0000000000000000]              
	struct FString                                     PreviewMesh;                                      		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialInterface" );

		return pClassPointer;
	};

	bool GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue );
	bool GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue );
	bool GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue );
	bool GetScalarParameterValue ( struct FName ParameterName, float* OutValue );
	bool GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage );
	class UPhysicalMaterial* GetPhysicalMaterial ( );
	class UMaterial* GetMaterial ( );
};

UClass* UMaterialInterface::pClassPointer = NULL;

// Class Engine.Material
// 0x026C (0x02D8 - 0x006C)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PhysicalMaterial;                                 		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FColorMaterialInput                         DiffuseColor;                                     		// 0x0074 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        DiffusePower;                                     		// 0x0098 (0x0024) [0x0000000000000000]              
	struct FColorMaterialInput                         SpecularColor;                                    		// 0x00BC (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        SpecularPower;                                    		// 0x00E0 (0x0024) [0x0000000000000000]              
	struct FVectorMaterialInput                        Normal;                                           		// 0x0104 (0x002C) [0x0000000000000000]              
	struct FColorMaterialInput                         EmissiveColor;                                    		// 0x0130 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        Opacity;                                          		// 0x0154 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        OpacityMask;                                      		// 0x0178 (0x0024) [0x0000000000000000]              
	float                                              OpacityMaskClipValue;                             		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2MaterialInput                       Distortion;                                       		// 0x01A0 (0x0028) [0x0000000000000000]              
	unsigned char                                      BlendMode;                                        		// 0x01C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightingModel;                                    		// 0x01C9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColorMaterialInput                         CustomLighting;                                   		// 0x01CC (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        TwoSidedLightingMask;                             		// 0x01F0 (0x0024) [0x0000000000000000]              
	struct FColorMaterialInput                         TwoSidedLightingColor;                            		// 0x0214 (0x0024) [0x0000000000000000]              
	unsigned long                                      TwoSided : 1;                                     		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableDepthTest : 1;                            		// 0x0238 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableShadowCasting : 1;                         		// 0x0238 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUsedAsLightFunction : 1;                         		// 0x0238 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFogVolumes : 1;                          		// 0x0238 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                 		// 0x0238 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSkeletalMesh : 1;                        		// 0x0238 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSystem : 1;                      		// 0x0238 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bUsedWithParticleSprites : 1;                     		// 0x0238 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithBeamTrails : 1;                          		// 0x0238 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSubUV : 1;                       		// 0x0238 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFoliage : 1;                             		// 0x0238 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSpeedTree : 1;                           		// 0x0238 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithStaticLighting : 1;                      		// 0x0238 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLensFlare : 1;                           		// 0x0238 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithGammaCorrection : 1;                     		// 0x0238 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;              		// 0x0238 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFluidSurfaces : 1;                       		// 0x0238 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithDecals : 1;                              		// 0x0238 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSHLight : 1;                             		// 0x0238 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      Wireframe : 1;                                    		// 0x0238 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bIsFallbackMaterial : 1;                          		// 0x0238 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bUsesDistortion : 1;                              		// 0x0238 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x0238 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bIsMasked : 1;                                    		// 0x0238 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bIsPreviewMaterial : 1;                           		// 0x0238 (0x0004) [0x0000000000202000] [0x02000000] ( CPF_Transient )
	class UMaterial*                                   FallbackMaterial;                                 		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MaterialResources[ 0x2 ];                         		// 0x0240 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DefaultMaterialInstances[ 0x2 ];                  		// 0x0248 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	int                                                EditorX;                                          		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                EditorY;                                          		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                EditorPitch;                                      		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                EditorYaw;                                        		// 0x025C (0x0004) [0x0000000000000000]              
	TArray< class UMaterialExpression* >               Expressions;                                      		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialExpressionComment* >        EditorComments;                                   		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialExpressionCompound* >       EditorCompounds;                                  		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0284 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Material.EditorParameters
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x02C0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             ContentTags;                                      		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Material" );

		return pClassPointer;
	};

	TArray< class UTexture* > GetTextures ( );
};

UClass* UMaterial::pClassPointer = NULL;

// Class Engine.MaterialEffect
// 0x0007 (0x006C - 0x0065)
class UMaterialEffect : public UPostProcessEffect
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialEffect" );

		return pClassPointer;
	};

};

UClass* UMaterialEffect::pClassPointer = NULL;

// Class Engine.MaterialExpression
// 0x001C (0x005C - 0x0040)
class UMaterialExpression : public UObject
{
public:
	int                                                EditorX;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                EditorY;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRealtimePreview : 1;                             		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsParameterExpression : 1;                       		// 0x0048 (0x0004) [0x0000000000000000] [0x00000002] 
	class UMaterialExpressionCompound*                 Compound;                                         		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     Desc;                                             		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpression" );

		return pClassPointer;
	};

};

UClass* UMaterialExpression::pClassPointer = NULL;

// Class Engine.MaterialInstanceActor
// 0x0004 (0x0240 - 0x023C)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialInstanceActor" );

		return pClassPointer;
	};

};

UClass* AMaterialInstanceActor::pClassPointer = NULL;

// Class Engine.MatineeActor
// 0x0010 (0x024C - 0x023C)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                     		// 0x023C (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0240 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bReversePlayback : 1;                             		// 0x0240 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPaused : 1;                                      		// 0x0240 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	float                                              PlayRate;                                         		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              Position;                                         		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MatineeActor" );

		return pClassPointer;
	};

	void eventUpdate ( );
};

UClass* AMatineeActor::pClassPointer = NULL;

// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x0044 - 0x0040)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                		// 0x0040 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x0040 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x0040 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x0040 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0040 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x0040 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0040 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      CastShadow : 1;                                   		// 0x0040 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PrimitiveComponentFactory" );

		return pClassPointer;
	};

};

UClass* UPrimitiveComponentFactory::pClassPointer = NULL;

// Class Engine.MeshComponentFactory
// 0x000C (0x0050 - 0x0044)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MeshComponentFactory" );

		return pClassPointer;
	};

};

UClass* UMeshComponentFactory::pClassPointer = NULL;

// Class Engine.Model
// 0x0950 (0x0990 - 0x0040)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x950 ];                           		// 0x0040 (0x0950) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Model" );

		return pClassPointer;
	};

};

UClass* UModel::pClassPointer = NULL;

// Class Engine.ModelComponent
// 0x0030 (0x0208 - 0x01D8)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                            		// 0x01D8 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ZoneIndex;                                        		// 0x01DC (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ComponentIndex;                                   		// 0x01E0 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	TArray< struct FPointer >                          Nodes;                                            		// 0x01E4 (0x000C) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	TArray< struct FPointer >                          Edges;                                            		// 0x01F0 (0x000C) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	TArray< struct FPointer >                          Elements;                                         		// 0x01FC (0x000C) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ModelComponent" );

		return pClassPointer;
	};

};

UClass* UModelComponent::pClassPointer = NULL;

// Class Engine.MotionBlurEffect
// 0x0017 (0x007C - 0x0065)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MotionBlurEffect" );

		return pClassPointer;
	};

};

UClass* UMotionBlurEffect::pClassPointer = NULL;

// Class Engine.MultiFont
// 0x000C (0x0110 - 0x0104)
class UMultiFont : public UFont
{
public:
	TArray< float >                                    ResolutionTestTable;                              		// 0x0104 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MultiFont" );

		return pClassPointer;
	};

	int GetResolutionTestTableIndex ( float HeightTest );
};

UClass* UMultiFont::pClassPointer = NULL;

// Class Engine.MusicTrackDataStructures
// 0x0000 (0x0040 - 0x0040)
class UMusicTrackDataStructures : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MusicTrackDataStructures" );

		return pClassPointer;
	};

};

UClass* UMusicTrackDataStructures::pClassPointer = NULL;

// Class Engine.Mutator
// 0x0014 (0x0250 - 0x023C)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                      		// 0x023C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           GroupNames;                                       		// 0x0240 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUserAdded : 1;                                   		// 0x024C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Mutator" );

		return pClassPointer;
	};

	void GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void NotifyLogin ( class AController* NewPlayer );
	void NotifyLogout ( class AController* Exiting );
	struct FString ParseChatPercVar ( class AController* Who, struct FString Cmd );
	void GetServerPlayers ( struct FServerResponseLine* ServerState );
	void GetServerDetails ( struct FServerResponseLine* ServerState );
	bool CheckReplacement ( class AActor* Other );
	bool CheckRelevance ( class AActor* Other );
	bool IsRelevant ( class AActor* Other );
	bool AlwaysKeep ( class AActor* Other );
	void AddMutator ( class AMutator* M );
	void ModifyPlayer ( class APawn* Other );
	void ModifyLogin ( struct FString* Portal, struct FString* Options );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventDestroyed ( );
	bool MutatorIsAllowed ( );
	void eventPreBeginPlay ( );
};

UClass* AMutator::pClassPointer = NULL;

// Class Engine.NetPendingLevel
// 0x0000 (0x0108 - 0x0108)
class UNetPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NetPendingLevel" );

		return pClassPointer;
	};

};

UClass* UNetPendingLevel::pClassPointer = NULL;

// Class Engine.Note
// 0x000C (0x0248 - 0x023C)
class ANote : public AActor
{
public:
	struct FString                                     Text;                                             		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Note" );

		return pClassPointer;
	};

};

UClass* ANote::pClassPointer = NULL;

// Class Engine.Objective
// 0x0000 (0x0334 - 0x0334)
class AObjective : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Objective" );

		return pClassPointer;
	};

};

UClass* AObjective::pClassPointer = NULL;

// Class Engine.ObjectReferencer
// 0x000C (0x004C - 0x0040)
class UObjectReferencer : public UObject
{
public:
	TArray< class UObject* >                           ReferencedObjects;                                		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ObjectReferencer" );

		return pClassPointer;
	};

};

UClass* UObjectReferencer::pClassPointer = NULL;

// Class Engine.Settings
// 0x0030 (0x0070 - 0x0040)
class USettings : public UObject
{
public:
	TArray< struct FLocalizedStringSetting >           LocalizedSettings;                                		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLocalizedStringSettingMetaData >   LocalizedSettingsMappings;                        		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsPropertyPropertyMetaData > PropertyMappings;                                 		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Settings" );

		return pClassPointer;
	};

	void UpdateFromURL ( class AGameInfo* Game, struct FString* URL );
	void BuildURL ( struct FString* URL );
	void AppendContextsToURL ( struct FString* URL );
	void AppendPropertiesToURL ( struct FString* URL );
	void AppendDataBindingsToURL ( struct FString* URL );
	void GetQoSAdvertisedStringSettings ( TArray< struct FLocalizedStringSetting >* QoSSettings );
	void GetQoSAdvertisedProperties ( TArray< struct FSettingsProperty >* QoSProps );
	bool GetRangedPropertyValue ( int PropertyId, float* OutValue );
	bool SetRangedPropertyValue ( int PropertyId, float NewValue );
	bool GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetPropertyMappingType ( int PropertyId, unsigned char* OutType );
	bool HasStringSetting ( int SettingId );
	bool HasProperty ( int PropertyId );
	void UpdateProperties ( unsigned long bShouldAddIfMissing, TArray< struct FSettingsProperty >* Props );
	void UpdateStringSettings ( unsigned long bShouldAddIfMissing, TArray< struct FLocalizedStringSetting >* Settings );
	unsigned char GetPropertyType ( int PropertyId );
	bool GetStringProperty ( int PropertyId, struct FString* Value );
	void SetStringProperty ( int PropertyId, struct FString Value );
	bool GetIntProperty ( int PropertyId, int* Value );
	void SetIntProperty ( int PropertyId, int Value );
	bool GetFloatProperty ( int PropertyId, float* Value );
	void SetFloatProperty ( int PropertyId, float Value );
	bool SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue );
	struct FString GetPropertyAsStringByName ( struct FName PropertyName );
	struct FString GetPropertyAsString ( int PropertyId );
	struct FString GetPropertyColumnHeader ( int PropertyId );
	struct FName GetPropertyName ( int PropertyId );
	bool GetPropertyId ( struct FName PropertyName, int* PropertyId );
	bool SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue );
	struct FName GetStringSettingValueNameByName ( struct FName StringSettingName );
	struct FName GetStringSettingValueName ( int StringSettingId, int ValueIndex );
	bool IsWildcardStringSetting ( int StringSettingId );
	struct FString GetStringSettingColumnHeader ( int StringSettingId );
	struct FName GetStringSettingName ( int StringSettingId );
	bool GetStringSettingId ( struct FName StringSettingName, int* StringSettingId );
	bool GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex );
	void SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd );
	bool GetStringSettingValueNames ( int StringSettingId, TArray< struct FIdToStringMapping >* Values );
	bool GetStringSettingValue ( int StringSettingId, int* ValueIndex );
	void SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd );
	void GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 );
	void GetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* OutBlob );
	int GetSettingsDataInt ( struct FSettingsData* Data );
	float GetSettingsDataFloat ( struct FSettingsData* Data );
	struct FString GetSettingsDataString ( struct FSettingsData* Data );
	void EmptySettingsData ( struct FSettingsData* Data );
	void SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy );
	void SetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* InBlob );
	void SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data );
	void SetSettingsDataInt ( int InInt, struct FSettingsData* Data );
	void SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data );
	void SetSettingsDataString ( struct FString InString, struct FSettingsData* Data );
};

UClass* USettings::pClassPointer = NULL;

// Class Engine.OnlineGameSearch
// 0x0060 (0x00D0 - 0x0070)
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                 		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FLocalizedStringSetting                     Query;                                            		// 0x0074 (0x000C) [0x0000000000000000]              
	unsigned long                                      bIsLanQuery : 1;                                  		// 0x0080 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bIsListPlayQuery : 1;                             		// 0x0080 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x0080 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bIsSearchInProgress : 1;                          		// 0x0080 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bIsListPlaySearchInProgress : 1;                  		// 0x0080 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	int                                                NumListPlayServersAvailable;                      		// 0x0084 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumGoldOnlyListPlayServersAvailable;              		// 0x0088 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumJoinableListPlayServersAvailable;              		// 0x008C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UClass*                                      GameSettingsClass;                                		// 0x0090 (0x0004) [0x0000000000000000]              
	TArray< struct FOnlineGameSearchResult >           Results;                                          		// 0x0094 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FNamedObjectProperty >              NamedProperties;                                  		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FOnlineGameSearchQuery                      FilterQuery;                                      		// 0x00AC (0x0018) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     AdditionalSearchCriteria;                         		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineGameSearch" );

		return pClassPointer;
	};

};

UClass* UOnlineGameSearch::pClassPointer = NULL;

// Class Engine.OnlineGameSettings
// 0x0040 (0x00B0 - 0x0070)
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                             		// 0x0070 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumPrivateConnections;                            		// 0x0074 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPublicConnections;                         		// 0x0078 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPrivateConnections;                        		// 0x007C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      ServerNonce[ 0x8 ];                               		// 0x0080 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      GameState;                                        		// 0x0088 (0x0001) [0x0000000040000002]              ( CPF_Const | CPF_EditInlineNotify )
	unsigned long                                      bShouldAdvertise : 1;                             		// 0x008C (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bIsLanMatch : 1;                                  		// 0x008C (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesStats : 1;                                   		// 0x008C (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinInProgress : 1;                         		// 0x008C (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowInvites : 1;                                		// 0x008C (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesPresence : 1;                                		// 0x008C (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresence : 1;                        		// 0x008C (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;             		// 0x008C (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x008C (0x0004) [0x0000000040000000] [0x00000100] ( CPF_EditInlineNotify )
	unsigned long                                      bWasFromInvite : 1;                               		// 0x008C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bIsDedicated : 1;                                 		// 0x008C (0x0004) [0x0000000040000000] [0x00000400] ( CPF_EditInlineNotify )
	unsigned long                                      bIsListPlay : 1;                                  		// 0x008C (0x0004) [0x0000000040000000] [0x00000800] ( CPF_EditInlineNotify )
	unsigned long                                      bIsGoldOnlyListPlay : 1;                          		// 0x008C (0x0004) [0x0000000040000000] [0x00001000] ( CPF_EditInlineNotify )
	unsigned long                                      bHasSkillUpdateInProgress : 1;                    		// 0x008C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	struct FString                                     OwningPlayerName;                                 		// 0x0090 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FUniqueNetId                                OwningPlayerId;                                   		// 0x009C (0x0008) [0x0000000000000000]              
	int                                                PingInMs;                                         		// 0x00A4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              AverageSkillRating;                               		// 0x00A8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                BuildUniqueId;                                    		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineGameSettings" );

		return pClassPointer;
	};

};

UClass* UOnlineGameSettings::pClassPointer = NULL;

// Class Engine.OnlineProfileSettings
// 0x0041 (0x0081 - 0x0040)
class UOnlineProfileSettings : public UObject
{
public:
	int                                                VersionNumber;                                    		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ProfileSettingIds;                                		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineProfileSetting >             ProfileSettings;                                  		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineProfileSetting >             DefaultSettings;                                  		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIdToStringMapping >                OwnerMappings;                                    		// 0x0068 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSettingsPropertyPropertyMetaData > ProfileMappings;                                  		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      AsyncState;                                       		// 0x0080 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineProfileSettings" );

		return pClassPointer;
	};

	bool GetRangedProfileSettingValue ( int ProfileId, float* OutValue );
	bool SetRangedProfileSettingValue ( int ProfileId, float NewValue );
	bool GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType );
	void SetDefaultVersionNumber ( );
	int GetVersionNumber ( );
	void AppendVersionToSettings ( );
	void AppendVersionToReadIds ( );
	void eventScriptSetToDefaults ( );
	void eventSetToDefaults ( );
	bool SetProfileSettingValueFloat ( int ProfileSettingId, float Value );
	bool SetProfileSettingValueInt ( int ProfileSettingId, int Value );
	bool SetProfileSettingValueId ( int ProfileSettingId, int Value );
	bool GetProfileSettingValueFloat ( int ProfileSettingId, float* Value );
	bool GetProfileSettingValueInt ( int ProfileSettingId, int* Value );
	bool GetProfileSettingValueId ( int ProfileSettingId, int* ValueId );
	bool SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue );
	bool SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue );
	bool GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value );
	bool GetProfileSettingValues ( int ProfileSettingId, TArray< struct FName >* Values );
	struct FName GetProfileSettingValueName ( int ProfileSettingId );
	bool GetProfileSettingValue ( int ProfileSettingId, struct FString* Value );
	bool IsProfileSettingIdMapped ( int ProfileSettingId );
	struct FString GetProfileSettingColumnHeader ( int ProfileSettingId );
	struct FName GetProfileSettingName ( int ProfileSettingId );
	bool GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId );
};

UClass* UOnlineProfileSettings::pClassPointer = NULL;

// Class Engine.OnlineStats
// 0x000C (0x004C - 0x0040)
class UOnlineStats : public UObject
{
public:
	TArray< struct FStringIdToStringMapping >          ViewIdMappings;                                   		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineStats" );

		return pClassPointer;
	};

	struct FName GetViewName ( int ViewId );
	bool GetViewId ( struct FName ViewName, int* ViewId );
};

UClass* UOnlineStats::pClassPointer = NULL;

// Class Engine.OnlineStatsRead
// 0x0048 (0x0094 - 0x004C)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                           		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SortColumnId;                                     		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ColumnIds;                                        		// 0x0054 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                TotalRowsInView;                                  		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FOnlineStatsRow >                   Rows;                                             		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FColumnMetaData >                   ColumnMappings;                                   		// 0x0070 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ViewName;                                         		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStatsReadComplete__Delegate;                  		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineStatsRead" );

		return pClassPointer;
	};

	void OnStatsReadComplete ( );
};

UClass* UOnlineStatsRead::pClassPointer = NULL;

// Class Engine.OnlineStatsWrite
// 0x0040 (0x008C - 0x004C)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray< struct FStringIdToStringMapping >          StatMappings;                                     		// 0x004C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x0058 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ViewIds;                                          		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ArbitratedViewIds;                                		// 0x0070 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                RatingId;                                         		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                 		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineStatsWrite" );

		return pClassPointer;
	};

	void DecrementIntStat ( int StatId, int DecBy );
	void DecrementFloatStat ( int StatId, float DecBy );
	void IncrementIntStat ( int StatId, int IncBy );
	void IncrementFloatStat ( int StatId, float IncBy );
	void SetIntStat ( int StatId, int Value );
	void SetFloatStat ( int StatId, float Value );
	struct FName GetStatName ( int StatId );
	bool GetStatId ( struct FName StatName, int* StatId );
	void OnStatsWriteComplete ( );
};

UClass* UOnlineStatsWrite::pClassPointer = NULL;

// Class Engine.OnlineSubsystem
// 0x0070 (0x00B0 - 0x0040)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UOnlineAccountInterface*                     AccountInterface;                                 		// 0x0044 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0048 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x004C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0050 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx;                                		// 0x0054 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0058 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSystemInterface*                      SystemInterface;                                  		// 0x005C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0064 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineContentInterface*                     ContentInterface;                                 		// 0x006C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0070 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x0074 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0078 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x007C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x0080 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineNewsInterface*                        NewsInterface;                                    		// 0x0084 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FNamedInterface >                   NamedInterfaces;                                  		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedInterfaceDef >                NamedInterfaceDefs;                               		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FNamedSession >                     Sessions;                                         		// 0x00A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineSubsystem" );

		return pClassPointer;
	};

	bool StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId );
	struct FString UniqueNetIdToString ( struct FUniqueNetId* IdToConvert );
	class UObject* eventGetNamedInterface ( struct FName InterfaceName );
	void eventSetNamedInteface ( struct FName InterfaceName, class UObject* NewInterface );
	bool eventSetNewsInterface ( class UObject* NewInterface );
	bool eventSetStatsInterface ( class UObject* NewInterface );
	bool eventSetVoiceInterface ( class UObject* NewInterface );
	bool eventSetContentInterface ( class UObject* NewInterface );
	bool eventSetGameInterface ( class UObject* NewInterface );
	bool eventSetSystemInterface ( class UObject* NewInterface );
	bool eventSetPlayerInterfaceEx ( class UObject* NewInterface );
	bool eventSetPlayerInterface ( class UObject* NewInterface );
	bool eventSetAccountInterface ( class UObject* NewInterface );
	void eventExit ( );
	bool eventInit ( );
};

UClass* UOnlineSubsystem::pClassPointer = NULL;

// Class Engine.PackageMapLevel
// 0x0004 (0x00C8 - 0x00C4)
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C4 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PackageMapLevel" );

		return pClassPointer;
	};

};

UClass* UPackageMapLevel::pClassPointer = NULL;

// Class Engine.PackageMapSeekFree
// 0x0000 (0x00C8 - 0x00C8)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PackageMapSeekFree" );

		return pClassPointer;
	};

};

UClass* UPackageMapSeekFree::pClassPointer = NULL;

// Class Engine.PathBlockingVolume
// 0x0000 (0x0278 - 0x0278)
class APathBlockingVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PathBlockingVolume" );

		return pClassPointer;
	};

};

UClass* APathBlockingVolume::pClassPointer = NULL;

// Class Engine.PathGraph
// 0x0048 (0x0284 - 0x023C)
class APathGraph : public AActor
{
public:
	TArray< class URWTechNode* >                       m_aNodes;                                         		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0248 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PathGraph.m_PropNameToNodeIndexMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PathGraph" );

		return pClassPointer;
	};

	void ShowLCDebuggingInformation ( class UCanvas* pr_Canvas );
	struct FLinearColor ConvertWeightToRGB ( float fValue );
};

UClass* APathGraph::pClassPointer = NULL;

// Class Engine.PathNode
// 0x0000 (0x0334 - 0x0334)
class APathNode : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PathNode" );

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
};

UClass* APathNode::pClassPointer = NULL;

// Class Engine.RWTechNode
// 0x007C (0x00BC - 0x0040)
class URWTechNode : public UObject
{
public:
	class AActor*                                      m_pInteractingActor;                              		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FRotator                                    m_rVNodeOrientation;                              		// 0x0044 (0x000C) [0x0000000000000000]              
	class URWTechNode*                                 m_pParentPFNode;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FVector                                     Location;                                         		// 0x0054 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class URWTechReachSpec* >                  PathList;                                         		// 0x0060 (0x000C) [0x0000000004620003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class URWTechReachSpec* >                  IncomingEdges;                                    		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NodeID;                                           		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsJunction : 1;                                   		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsSpawnPoint : 1;                                 		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsDetailed : 1;                                   		// 0x007C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsVignetteNode : 1;                               		// 0x007C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsVignetteDecisionPoint : 1;                      		// 0x007C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsSpawnPending : 1;                              		// 0x007C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bOccupied : 1;                                  		// 0x007C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bBroken : 1;                                    		// 0x007C (0x0004) [0x0000000000000000] [0x00000080] 
	float                                              m_fSpawnPendingTimer;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	TArray< class URWTechNode* >                       SpawnNodeRefs;                                    		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PathWidth;                                        		// 0x0090 (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 ParentJunctionNodeRef;                            		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLastUsed;                                  		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                m_ExtendedNodeTypes;                              		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                m_nBlockID;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            m_abyteCompressedEdgeIndexForSDNode;              		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     m_pVignetteDescriptor;                            		// 0x00B0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class AActor*                                      m_pGeometryProp;                                  		// 0x00B4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UcImporterNode*                              m_pImporterNode;                                  		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RWTechNode" );

		return pClassPointer;
	};

	bool UndoLastEdgeDisconnection ( );
	bool DisconnectAllEdgesExceptOne ( int pr_nEdgeIDNotToDisconnect );
	bool DisconnectAllEdges ( );
};

UClass* URWTechNode::pClassPointer = NULL;

// Class Engine.Pedestrian
// 0x0000 (0x00BC - 0x00BC)
class UPedestrian : public URWTechNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Pedestrian" );

		return pClassPointer;
	};

};

UClass* UPedestrian::pClassPointer = NULL;

// Class Engine.PavementLane
// 0x0000 (0x00BC - 0x00BC)
class UPavementLane : public UPedestrian
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PavementLane" );

		return pClassPointer;
	};

};

UClass* UPavementLane::pClassPointer = NULL;

// Class Engine.RWTechReachSpec
// 0x009C (0x00DC - 0x0040)
class URWTechReachSpec : public UObject
{
public:
	class URWTechNode*                                 Start;                                            		// 0x0040 (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 End;                                              		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                EdgeID;                                           		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                numRegisteredNPCVehicles;                         		// 0x004C (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 AlternateSpawnPoint;                              		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< class URWTechReachSpec* >                  LinkEdgeRefs;                                     		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            LinkEdgeTurns;                                    		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AllowedPathIDs;                                   		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class URWTechReachSpec*                            ParentEdgeRef;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsJunction : 1;                                   		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsBezierCurve : 1;                                		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_nStartPriority;                                 		// 0x0080 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nEndPriority;                                   		// 0x0081 (0x0001) [0x0000000000000000]              
	int                                                LeftSiblingID;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                RightSiblingID;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	class URWTechReachSpec*                            LeftSiblingRef;                                   		// 0x008C (0x0004) [0x0000000000000000]              
	class URWTechReachSpec*                            RightSiblingRef;                                  		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FString                                     sPropGUID;                                        		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nEdgeUserIdx;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                TrafficLightGroup;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 ParentJunctionNodeRef;                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FVector                                     BezierControlPoints[ 0x2 ];                       		// 0x00AC (0x0018) [0x0000000000000000]              
	float                                              m_fDistance;                                      		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              m_fPathGraphWeight;                               		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     m_strStreetName;                                  		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcImporterEdge*                              m_pImporterEdge;                                  		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RWTechReachSpec" );

		return pClassPointer;
	};

	int GetLaneCount ( );
	bool GetEdgeIntersection ( class URWTechReachSpec* pCrossingEdge, float* U );
	class URWTechReachSpec* GetOtherDirectionEdge ( );
	void GetMidpoint ( struct FVector* pr_vMidpoint );
	int GetReferenceIndex ( class URWTechReachSpec* pr_pRefEdge );
	void GenerateDTNodes ( class URWTechNode* pr_pStartDTNode, class URWTechReachSpec* pr_pNextPFEdge, unsigned long pr_bRemoveExistingNodes, TArray< class URWTechNode* >* pr_aOutNodes );
	void Render2D ( class UCanvas* Canvas, struct FLinearColor Col );
	void Render ( class UCanvas* Canvas, struct FColor Col, float fZOffset );
	bool IsInAllowedPathList ( int pr_nEdgeId );
	void GetLocationAndDirection ( float fDistance, struct FVector* vLocation, struct FVector* vDirection );
	bool IsVehicleTypeAllowed ( unsigned char pr_type );
	int FindEdgeInNextPaths ( class URWTechReachSpec* pEdge );
	bool IsEdgeInNextPaths ( class URWTechReachSpec* pEdge );
};

UClass* URWTechReachSpec::pClassPointer = NULL;

// Class Engine.PedestrianReachSpec
// 0x0004 (0x00E0 - 0x00DC)
class UPedestrianReachSpec : public URWTechReachSpec
{
public:
	float                                              fFlatHeight;                                      		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PedestrianReachSpec" );

		return pClassPointer;
	};

};

UClass* UPedestrianReachSpec::pClassPointer = NULL;

// Class Engine.PavementLaneReachSpec
// 0x0000 (0x00E0 - 0x00E0)
class UPavementLaneReachSpec : public UPedestrianReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PavementLaneReachSpec" );

		return pClassPointer;
	};

};

UClass* UPavementLaneReachSpec::pClassPointer = NULL;

// Class Engine.Pawn
// 0x01E8 (0x0424 - 0x023C)
class APawn : public AActor
{
public:
	float                                              MaxStepHeight;                                    		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxJumpHeight;                                    		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WalkableFloorZ;                                   		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 Controller;                                       		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       NextPawn;                                         		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetRelevancyTime;                                 		// 0x0250 (0x0004) [0x0000000000000000]              
	class APlayerController*                           LastRealViewer;                                   		// 0x0254 (0x0004) [0x0000000000000000]              
	class AActor*                                      LastViewer;                                       		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpAndOut : 1;                                    		// 0x025C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsWalking : 1;                                   		// 0x025C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bWantsToCrouch : 1;                               		// 0x025C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsCrouched : 1;                                  		// 0x025C (0x0004) [0x0000000000000022] [0x00000008] ( CPF_Const | CPF_Net )
	unsigned long                                      bTryToUncrouch : 1;                               		// 0x025C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bCanCrouch : 1;                                   		// 0x025C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCrawler : 1;                                     		// 0x025C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bReducedSpeed : 1;                                		// 0x025C (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bJumpCapable : 1;                                 		// 0x025C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanJump : 1;                                     		// 0x025C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanWalk : 1;                                     		// 0x025C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanSwim : 1;                                     		// 0x025C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanFly : 1;                                      		// 0x025C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCanStrafe : 1;                                   		// 0x025C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bAvoidLedges : 1;                                 		// 0x025C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bStopAtLedges : 1;                                		// 0x025C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bSimulateGravity : 1;                             		// 0x025C (0x0004) [0x0000000000000022] [0x00010000] ( CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreForces : 1;                                		// 0x025C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCanWalkOffLedges : 1;                            		// 0x025C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x025C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bSimGravityDisabled : 1;                          		// 0x025C (0x0004) [0x0000000000000002] [0x00100000] ( CPF_Const )
	unsigned long                                      bDirectHitWall : 1;                               		// 0x025C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bPushesRigidBodies : 1;                           		// 0x025C (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bForceFloorCheck : 1;                             		// 0x025C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bForceKeepAnchor : 1;                             		// 0x025C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCanMantle : 1;                                   		// 0x025C (0x0004) [0x0000000000004000] [0x02000000] ( CPF_Config )
	unsigned long                                      bCanClimbCeilings : 1;                            		// 0x025C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bCanSwatTurn : 1;                                 		// 0x025C (0x0004) [0x0000000000004000] [0x08000000] ( CPF_Config )
	unsigned long                                      bCanLeap : 1;                                     		// 0x025C (0x0004) [0x0000000000004000] [0x10000000] ( CPF_Config )
	unsigned long                                      bCanCoverSlip : 1;                                		// 0x025C (0x0004) [0x0000000000004000] [0x20000000] ( CPF_Config )
	unsigned long                                      bDisplayPathErrors : 1;                           		// 0x025C (0x0004) [0x0000000000044000] [0x40000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bIsFemale : 1;                                    		// 0x025C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bCanPickupInventory : 1;                          		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAmbientCreature : 1;                             		// 0x0260 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLOSHearing : 1;                                  		// 0x0260 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bMuffledHearing : 1;                              		// 0x0260 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDontPossess : 1;                                 		// 0x0260 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAutoFire : 1;                                    		// 0x0260 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bStationary : 1;                                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCachedRelevant : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bSpecialHUD : 1;                                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bNoWeaponFiring : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanUse : 1;                                      		// 0x0260 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bModifyReachSpecCost : 1;                         		// 0x0260 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bPathfindsAsVehicle : 1;                          		// 0x0260 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bRunPhysicsWithNoController : 1;                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x0260 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x0260 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bForceRegularVelocity : 1;                        		// 0x0260 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bPlayedDeath : 1;                                 		// 0x0260 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bRestartNative : 1;                             		// 0x0260 (0x0004) [0x0000000000000000] [0x00040000] 
	float                                              UncrouchTime;                                     		// 0x0264 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CrouchHeight;                                     		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              CrouchRadius;                                     		// 0x026C (0x0004) [0x0000000000000000]              
	int                                                FullHeight;                                       		// 0x0270 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NonPreferredVehiclePathMultiplier;                		// 0x0274 (0x0004) [0x0000000000000000]              
	unsigned char                                      PathSearchType;                                   		// 0x0278 (0x0001) [0x0000000000000000]              
	unsigned char                                      RemoteViewPitch;                                  		// 0x0279 (0x0001) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned char                                      FlashCount;                                       		// 0x027A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      FiringMode;                                       		// 0x027B (0x0001) [0x0000000000000020]              ( CPF_Net )
	class UPathConstraint*                             PathConstraintList;                               		// 0x027C (0x0004) [0x0000000000000000]              
	class UPathGoalEvaluator*                          PathGoalList;                                     		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              DesiredSpeed;                                     		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              MaxDesiredSpeed;                                  		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              HearingThreshold;                                 		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Alertness;                                        		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SightRadius;                                      		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PeripheralVision;                                 		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvgPhysicsTime;                                   		// 0x029C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Mass;                                             		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              Buoyancy;                                         		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              MeleeRange;                                       		// 0x02A8 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            Anchor;                                           		// 0x02AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            LastAnchor;                                       		// 0x02B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FindAnchorFailedTime;                             		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              LastValidAnchorTime;                              		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              DestinationOffset;                                		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              NextPathRadius;                                   		// 0x02C0 (0x0004) [0x0000000000000000]              
	struct FVector                                     SerpentineDir;                                    		// 0x02C4 (0x000C) [0x0000000000000000]              
	float                                              SerpentineDist;                                   		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              SerpentineTime;                                   		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              SpawnTime;                                        		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                MaxPitchLimit;                                    		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              GroundSpeed;                                      		// 0x02E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WaterSpeed;                                       		// 0x02E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AirSpeed;                                         		// 0x02E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AccelRate;                                        		// 0x02EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              JumpZ;                                            		// 0x02F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              OutofWaterZ;                                      		// 0x02F4 (0x0004) [0x0000000000000000]              
	float                                              MaxOutOfWaterStepHeight;                          		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              AirControl;                                       		// 0x02FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WalkingPct;                                       		// 0x0300 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              CrouchedPct;                                      		// 0x0304 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              MaxFallSpeed;                                     		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              AIMaxFallSpeedFactor;                             		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              BaseEyeHeight;                                    		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EyeHeight;                                        		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Floor;                                            		// 0x0318 (0x000C) [0x0000000000000000]              
	float                                              SplashTime;                                       		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              OldZ;                                             		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                Health;                                           		// 0x032C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                HealthMax;                                        		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastPainTime;                                     		// 0x0334 (0x0004) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x0338 (0x000C) [0x0000000000000000]              
	struct FVector                                     noise1spot;                                       		// 0x0344 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1time;                                       		// 0x0350 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise1other;                                      		// 0x0354 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1loudness;                                   		// 0x0358 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     noise2spot;                                       		// 0x035C (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2time;                                       		// 0x0368 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise2other;                                      		// 0x036C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2loudness;                                   		// 0x0370 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SoundDampening;                                   		// 0x0374 (0x0004) [0x0000000000000000]              
	float                                              DamageScaling;                                    		// 0x0378 (0x0004) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      ControllerClass;                                  		// 0x0388 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x038C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       LandMovementState;                                		// 0x0390 (0x0008) [0x0000000000000000]              
	class APlayerStart*                                LastStartSpot;                                    		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              LastStartTime;                                    		// 0x039C (0x0004) [0x0000000000000000]              
	struct FVector                                     TakeHitLocation;                                  		// 0x03A0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      HitDamageType;                                    		// 0x03AC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     TearOffMomentum;                                  		// 0x03B0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x03BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x03C0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RBPushRadius;                                     		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPushStrength;                                   		// 0x03C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVehicle*                                    DrivenVehicle;                                    		// 0x03CC (0x0004) [0x0000000000000000]              
	class AVehicle*                                    m_PassengerVehicle;                               		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              VehicleCheckRadius;                               		// 0x03D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 LastHitBy;                                        		// 0x03DC (0x0004) [0x0000000000000000]              
	float                                              ViewPitchMin;                                     		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewPitchMax;                                     		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AllowedYawError;                                  		// 0x03E8 (0x0004) [0x0000000000000000]              
	struct FVector                                     FlashLocation;                                    		// 0x03EC (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LastFiringFlashLocation;                          		// 0x03F8 (0x000C) [0x0000000000000000]              
	int                                                ShotCount;                                        		// 0x0404 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                     		// 0x0408 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPointer                                    PhysicsPushBody;                                  		// 0x040C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                FailedLandingCount;                               		// 0x0410 (0x0004) [0x0000000000000000]              
	class AActor*                                      HoveredActor;                                     		// 0x0414 (0x0004) [0x0000000000000000]              
	int                                                HoverVelocityMin;                                 		// 0x0418 (0x0004) [0x0000000000000000]              
	int                                                HoverVelocityMax;                                 		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              m_MaxVelocityInAir;                               		// 0x0420 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Pawn" );

		return pClassPointer;
	};

	bool IsCurrentlyCarSurfing ( );
	bool IsPawnImmobile ( );
	void ClearPathStep ( );
	void DrawPathStep ( class UCanvas* C );
	void IncrementPathChild ( int Cnt, class UCanvas* C );
	void IncrementPathStep ( int Cnt, class UCanvas* C );
	void AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UPathConstraint* Constraint );
	void ClearConstraints ( );
	void eventSoakPause ( );
	void AdjustCameraScale ( unsigned long bMoveCameraIn );
	void eventMessagePlayer ( struct FString msg );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void eventOnSetMaterial ( class USeqAct_SetMaterial* Action );
	bool InCombat ( );
	bool PoweredUp ( );
	float GetDamageScaling ( );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventSpawnedByKismet ( );
	bool IsStationary ( );
	struct FVector GetCollisionExtent ( );
	float GetCollisionHeight ( );
	float GetCollisionRadius ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void DrawHUD ( class AHUD* H );
	void AddDefaultInventory ( );
	void eventStopDriving ( class AVehicle* V );
	void Suicide ( );
	class AVehicle* GetVehicleBase ( );
	void eventPlayFootStepSound ( int FootDown );
	void eventTornOff ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void TurnOff ( );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void PlayDyingSound ( );
	float GetDefaultJumpZ ( );
	bool DoJump ( unsigned long bUpdating );
	bool CheckWaterJump ( struct FVector* WallNormal );
	void TakeDrowningDamage ( );
	bool IsInPain ( );
	bool TouchingWaterVolume ( );
	bool eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nInventoryItemTypeID );
	bool eventIsSameTeam ( class APawn* Other );
	class ATeamInfo* GetTeam ( );
	unsigned char GetTeamNum ( );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, TArray< struct FName > Bones );
	void PruneDamagedBoneList ( TArray< struct FName >* Bones );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
	void SetMovementPhysics ( );
	void Gasp ( );
	void OnGiveInventory ( class USeqAct_GiveInventory* inAction );
	void OnAssignController ( class USeqAct_AssignController* inAction );
	void SpawnDefaultController ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void eventDestroyed ( );
	void DetachFromController ( unsigned long bDestroyController );
	void CrushedBy ( class APawn* OtherPawn );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void eventBaseChange ( );
	void eventJumpOffPawn ( );
	void eventgibbedBy ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void ClientSetRotation ( struct FRotator NewRotation );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void ClientReStartNative ( );
	void ClientRestart ( );
	void Restart ( );
	void KilledBy ( class APawn* EventInstigator );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void RestartPlayer ( );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void ShouldCrouch ( unsigned long bCrouch, unsigned long bFromServer );
	void UnCrouch ( );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity );
	void JumpOutOfWater ( struct FVector jumpDir );
	void FinishedInterpolation ( );
	void eventClientMessage ( struct FString S, struct FName Type );
	void ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	float AdjustedStrength ( );
	bool LineOfSightTo ( class AActor* Other );
	void SetMoveTarget ( class AActor* NewTarget );
	class AActor* GetMoveTarget ( );
	bool NearMoveTarget ( );
	bool AffectedByHitEffects ( );
	bool InGodMode ( );
	void SetViewRotation ( struct FRotator NewRotation );
	bool eventInFreeCam ( );
	struct FRotator GetBaseAimRotation ( );
	struct FVector GetPawnViewLocation ( );
	struct FRotator GetViewRotation ( );
	void GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	bool IsFirstPerson ( );
	bool WasPlayerPawn ( );
	bool IsPlayerPawn ( );
	bool IsLocallyControlled ( );
	bool IsHumanControlled ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	bool CanSplash ( );
	void eventSetWalking ( unsigned long bNewIsWalking );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	void DropToGround ( );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void UnPossessed ( );
	void UpdateControllerOnPossess ( unsigned long bVehicleTransition );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void NotifyTeamChanged ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	struct FString GetHumanReadableName ( );
	bool NeedToTurn ( struct FVector targ );
	bool TooCloseToAttack ( class AActor* Other );
	bool CanAttack ( class AActor* Other );
	unsigned char ChooseFireMode ( );
	bool BotFire ( unsigned long bFinished );
	void FiringModeUpdated ( unsigned long bViaReplication );
	void SetFiringMode ( unsigned char FiringModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool StopFiring ( );
	void Reset ( );
	void PlayerChangedTeam ( );
	void SetBaseEyeheight ( );
	bool SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	bool IsValidEnemy ( );
	int SpecialCostForPath ( class UReachSpec* Path );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void SetPushesRigidBodies ( unsigned long NewPush );
	void ForceCrouch ( );
	bool ReachedPoint ( struct FVector Point, class AActor* NewAnchor );
	bool ReachedDestination ( class AActor* Goal );
	class ANavigationPoint* GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist );
	void SetAnchor ( class ANavigationPoint* NewAnchor );
	void SetRemoteViewPitch ( int NewRemoteViewPitch );
	bool IsInvisible ( );
	bool IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy );
	bool IsValidTargetFor ( class AController* C );
	bool SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, struct FVector* JumpVelocity );
	bool ValidAnchor ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* APawn::pClassPointer = NULL;

// Class Engine.PedestrianCrossingLane
// 0x0000 (0x00BC - 0x00BC)
class UPedestrianCrossingLane : public UPedestrian
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PedestrianCrossingLane" );

		return pClassPointer;
	};

};

UClass* UPedestrianCrossingLane::pClassPointer = NULL;

// Class Engine.PedestrianCrossingLaneReachSpec
// 0x003C (0x011C - 0x00E0)
class UPedestrianCrossingLaneReachSpec : public UPedestrianReachSpec
{
public:
	class ANavigationPoint*                            m_parentNode;                                     		// 0x00E0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      CrossedIncomingDetailedEdgeIDs;                   		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URoadLaneReachSpec* >                CrossedIncomingDetailedEdgeRefs;                  		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CrossedOutgoingDetailedEdgeIDs;                   		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URoadLaneReachSpec* >                CrossedOutgoingDetailedEdgeRefs;                  		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CrossedPathfindingEdgeID;                         		// 0x0114 (0x0004) [0x0000000000000000]              
	class URoadReachSpec*                              CrossedPathfindingEdgeRef;                        		// 0x0118 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PedestrianCrossingLaneReachSpec" );

		return pClassPointer;
	};

};

UClass* UPedestrianCrossingLaneReachSpec::pClassPointer = NULL;

// Class Engine.PedestrianCrossingPFReachSpec
// 0x0000 (0x00DC - 0x00DC)
class UPedestrianCrossingPFReachSpec : public URWTechReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PedestrianCrossingPFReachSpec" );

		return pClassPointer;
	};

};

UClass* UPedestrianCrossingPFReachSpec::pClassPointer = NULL;

// Class Engine.PedestrianFeature
// 0x0000 (0x00BC - 0x00BC)
class UPedestrianFeature : public UPedestrian
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PedestrianFeature" );

		return pClassPointer;
	};

};

UClass* UPedestrianFeature::pClassPointer = NULL;

// Class Engine.PickupFactory
// 0x0018 (0x034C - 0x0334)
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                         		// 0x0334 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPickupHidden : 1;                                		// 0x0334 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPredictRespawns : 1;                             		// 0x0334 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsSuperItem : 1;                                 		// 0x0334 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              RespawnEffectTime;                                		// 0x0338 (0x0004) [0x0000000000000000]              
	float                                              MaxDesireability;                                 		// 0x033C (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PickupMesh;                                       		// 0x0340 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class APickupFactory*                              ReplacementFactory;                               		// 0x0344 (0x0004) [0x0000000000000000]              
	class APickupFactory*                              OriginalFactory;                                  		// 0x0348 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PickupFactory" );

		return pClassPointer;
	};

	bool ShouldRespawn ( );
	void eventDestroyed ( );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	void RespawnEffect ( );
	float GetRespawnTime ( );
	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	bool ReadyToPickup ( float MaxWait );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	void StartSleeping ( );
	void SetRespawn ( );
	bool CheckForErrors ( );
	void Reset ( );
	void StaticPrecache ( class AWorldInfo* W );
	void ShutDown ( );
	void eventSetInitialState ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* APickupFactory::pClassPointer = NULL;

// Class Engine.PlayerReplicationInfo
// 0x0098 (0x02D4 - 0x023C)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                            		// 0x023C (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	float                                              Deaths;                                           		// 0x0240 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	unsigned char                                      Ping;                                             		// 0x0244 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      PacketLoss;                                       		// 0x0245 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      PlayerLocationHint;                               		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                NumLives;                                         		// 0x024C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     PlayerName;                                       		// 0x0250 (0x000C) [0x0000000040400020]              ( CPF_Net | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PlayerAlias;                                      		// 0x025C (0x000C) [0x0000000040400020]              ( CPF_Net | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     OldName;                                          		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerID;                                         		// 0x0274 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATeamInfo*                                   Team;                                             		// 0x0278 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TeamID;                                           		// 0x027C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bAdmin : 1;                                       		// 0x0280 (0x0004) [0x0000000040000020] [0x00000001] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0280 (0x0004) [0x0000000040000020] [0x00000002] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bIsSpectator : 1;                                 		// 0x0280 (0x0004) [0x0000000040000020] [0x00000004] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bOnlySpectator : 1;                               		// 0x0280 (0x0004) [0x0000000040000020] [0x00000008] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bWaitingPlayer : 1;                               		// 0x0280 (0x0004) [0x0000000040000020] [0x00000010] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bReadyToPlay : 1;                                 		// 0x0280 (0x0004) [0x0000000040000020] [0x00000020] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bOutOfLives : 1;                                  		// 0x0280 (0x0004) [0x0000000040000020] [0x00000040] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bBot : 1;                                         		// 0x0280 (0x0004) [0x0000000040000020] [0x00000080] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bHasFlag : 1;                                     		// 0x0280 (0x0004) [0x0000000040000020] [0x00000100] ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bHasBeenWelcomed : 1;                             		// 0x0280 (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	unsigned long                                      bIsInactive : 1;                                  		// 0x0280 (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned long                                      bFromPreviousLevel : 1;                           		// 0x0280 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bControllerVibrationAllowed : 1;                  		// 0x0280 (0x0004) [0x0000000000000020] [0x00001000] ( CPF_Net )
	int                                                StartTime;                                        		// 0x0284 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     StringDead;                                       		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringSpectating;                                 		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringUnknown;                                    		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                Kills;                                            		// 0x02AC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UClass*                                      GameMessageClass;                                 		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              ExactPing;                                        		// 0x02B4 (0x0004) [0x0000000000000000]              
	struct FString                                     SavedNetworkAddress;                              		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUniqueNetId                                UniqueId;                                         		// 0x02C4 (0x0008) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	struct FAutomatedTestingDatum                      AutomatedTestingData;                             		// 0x02CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerReplicationInfo" );

		return pClassPointer;
	};

	void SetPlayerAlias ( struct FString NewAlias );
	bool IsInvalidName ( );
	unsigned char GetTeamNum ( );
	bool IsLocalPlayerPRI ( );
	void BindPlayerOwnerDataProvider ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateTeamDataProvider ( );
	void UpdatePlayerDataProvider ( struct FName PropertyName );
	class UCurrentGameDataStore* GetCurrentGameDS ( );
	void SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OverrideWith ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* Duplicate ( );
	void SetWaitingPlayer ( unsigned long B );
	void eventSetPlayerName ( struct FString S );
	void eventTimer ( );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	void UpdatePlayerLocation ( );
	struct FString GetLocationName ( );
	struct FString GetHumanReadableName ( );
	void Reset ( );
	void eventDestroyed ( );
	bool ShouldBroadCastWelcomeMessage ( );
	void UpdatePing ( float TimeStamp );
	void eventReplicatedEvent ( struct FName VarName );
	void ClientInitialize ( class AController* C );
	void eventPostBeginPlay ( );
	struct FString GetPlayerAlias ( );
	bool AreUniqueNetIdsEqual ( class APlayerReplicationInfo* OtherPRI );
};

UClass* APlayerReplicationInfo::pClassPointer = NULL;

// Class Engine.PlayerStart
// 0x0004 (0x0338 - 0x0334)
class APlayerStart : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0334 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPrimaryStart : 1;                                		// 0x0334 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerStart" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* APlayerStart::pClassPointer = NULL;

// Class Engine.PointLight
// 0x0000 (0x0244 - 0x0244)
class APointLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PointLight" );

		return pClassPointer;
	};

};

UClass* APointLight::pClassPointer = NULL;

// Class Engine.PointLightComponent
// 0x006C (0x01F0 - 0x0184)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                           		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FalloffExponent;                                  		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowFalloffExponent;                            		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinShadowFalloffRadius;                           		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0198 (0x0008) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x01A0 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Translation;                                      		// 0x01E0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                               		// 0x01EC (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PointLightComponent" );

		return pClassPointer;
	};

	void SetTranslation ( struct FVector NewTranslation );
};

UClass* UPointLightComponent::pClassPointer = NULL;

// Class Engine.PointLightMovable
// 0x0000 (0x0244 - 0x0244)
class APointLightMovable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PointLightMovable" );

		return pClassPointer;
	};

};

UClass* APointLightMovable::pClassPointer = NULL;

// Class Engine.PointLightToggleable
// 0x0000 (0x0244 - 0x0244)
class APointLightToggleable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PointLightToggleable" );

		return pClassPointer;
	};

};

UClass* APointLightToggleable::pClassPointer = NULL;

// Class Engine.PolyMarker
// 0x0000 (0x023C - 0x023C)
class APolyMarker : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PolyMarker" );

		return pClassPointer;
	};

};

UClass* APolyMarker::pClassPointer = NULL;

// Class Engine.Polys
// 0x0010 (0x0050 - 0x0040)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x0040 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Polys" );

		return pClassPointer;
	};

};

UClass* UPolys::pClassPointer = NULL;

// Class Engine.PortalMarker
// 0x0004 (0x0338 - 0x0334)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                         		// 0x0334 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PortalMarker" );

		return pClassPointer;
	};

	bool CanTeleport ( class AActor* A );
};

UClass* APortalMarker::pClassPointer = NULL;

// Class Engine.SceneCaptureActor
// 0x0004 (0x0240 - 0x023C)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                     		// 0x023C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCaptureActor" );

		return pClassPointer;
	};

};

UClass* ASceneCaptureActor::pClassPointer = NULL;

// Class Engine.SceneCaptureReflectActor
// 0x0008 (0x0248 - 0x0240)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0240 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                              		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCaptureReflectActor" );

		return pClassPointer;
	};

};

UClass* ASceneCaptureReflectActor::pClassPointer = NULL;

// Class Engine.SceneCapturePortalActor
// 0x0000 (0x0248 - 0x0248)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCapturePortalActor" );

		return pClassPointer;
	};

};

UClass* ASceneCapturePortalActor::pClassPointer = NULL;

// Class Engine.PortalTeleporter
// 0x0014 (0x025C - 0x0248)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                     		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionX;                               		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionY;                               		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APortalMarker*                               MyMarker;                                         		// 0x0254 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMovablePortal : 1;                               		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                      		// 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x0258 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PortalTeleporter" );

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	class UTextureRenderTarget2D* CreatePortalTexture ( );
	struct FVector TransformHitLocation ( struct FVector HitLocation );
	struct FVector TransformVectorDir ( struct FVector V );
	bool TransformActor ( class AActor* A );
};

UClass* APortalTeleporter::pClassPointer = NULL;

// Class Engine.PortalVolume
// 0x000C (0x0284 - 0x0278)
class APortalVolume : public AVolume
{
public:
	TArray< class APortalTeleporter* >                 Portals;                                          		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PortalVolume" );

		return pClassPointer;
	};

};

UClass* APortalVolume::pClassPointer = NULL;

// Class Engine.PostProcessChain
// 0x000C (0x004C - 0x0040)
class UPostProcessChain : public UObject
{
public:
	TArray< class UPostProcessEffect* >                Effects;                                          		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PostProcessChain" );

		return pClassPointer;
	};

	class UPostProcessEffect* FindPostProcessEffect ( struct FName EffectName );
};

UClass* UPostProcessChain::pClassPointer = NULL;

// Class Engine.PostProcessVolume
// 0x0118 (0x0390 - 0x0278)
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        Settings;                                         		// 0x027C (0x010C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APostProcessVolume*                          NextLowerPriorityVolume;                          		// 0x0388 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x038C (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PostProcessVolume" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* APostProcessVolume::pClassPointer = NULL;

// Class Engine.Projectile
// 0x003C (0x0278 - 0x023C)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                            		// 0x023C (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x0240 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSwitchToZeroCollision : 1;                       		// 0x0244 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBlockedByInstigator : 1;                         		// 0x0244 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0244 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x0244 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNotBlockedByShield : 1;                          		// 0x0244 (0x0004) [0x0000000000000000] [0x00000010] 
	class AActor*                                      ZeroCollider;                                     		// 0x0248 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         ZeroColliderComponent;                            		// 0x024C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Damage;                                           		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              DamageRadius;                                     		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              MomentumTransfer;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	class UClass*                                      MyDamageType;                                     		// 0x025C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpawnSound;                                       		// 0x0260 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ImpactSound;                                      		// 0x0264 (0x0004) [0x0000000000000000]              
	class AController*                                 InstigatorController;                             		// 0x0268 (0x0004) [0x0000000000000000]              
	class AActor*                                      ImpactedActor;                                    		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              NetCullDistanceSquared;                           		// 0x0270 (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0274 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Projectile" );

		return pClassPointer;
	};

	float GetRange ( );
	float StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy );
	float GetTimeToLocation ( struct FVector TargetLoc );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool IsStationary ( );
	void RandSpin ( float spinRate );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
	void eventEncroachedBy ( class AActor* Other );
	void eventProjectileHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp, class UPhysicalMaterial* HitMaterial );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void Reset ( );
	bool CanSplash ( );
	unsigned char GetTeamNum ( );
	void Init ( struct FVector Direction );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	bool eventEncroachingOn ( class AActor* Other );
};

UClass* AProjectile::pClassPointer = NULL;

// Class Engine.ProscribedReachSpec
// 0x0000 (0x009C - 0x009C)
class UProscribedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ProscribedReachSpec" );

		return pClassPointer;
	};

};

UClass* UProscribedReachSpec::pClassPointer = NULL;

// Class Engine.ReverbVolume
// 0x0014 (0x028C - 0x0278)
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FReverbSettings                             Settings;                                         		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AReverbVolume*                               NextLowerPriorityVolume;                          		// 0x0288 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ReverbVolume" );

		return pClassPointer;
	};

};

UClass* AReverbVolume::pClassPointer = NULL;

// Class Engine.Road
// 0x0010 (0x00CC - 0x00BC)
class URoad : public URWTechNode
{
public:
	struct FVector2D                                   m_direction;                                      		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_width;                                          		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_nSelectionFrequency;                            		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Road" );

		return pClassPointer;
	};

};

UClass* URoad::pClassPointer = NULL;

// Class Engine.RoadLane
// 0x0000 (0x00CC - 0x00CC)
class URoadLane : public URoad
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RoadLane" );

		return pClassPointer;
	};

};

UClass* URoadLane::pClassPointer = NULL;

// Class Engine.RoadReachSpec
// 0x001C (0x00F8 - 0x00DC)
class URoadReachSpec : public URWTechReachSpec
{
public:
	float                                              m_fSpeedLimit;                                    		// 0x00DC (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            m_aAllowedTypes;                                  		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bObstructed : 1;                                		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fTimeWithNoVehicles;                            		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                m_nSpawnEligibilityTimer;                         		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RoadReachSpec" );

		return pClassPointer;
	};

};

UClass* URoadReachSpec::pClassPointer = NULL;

// Class Engine.RoadLaneReachSpec
// 0x0024 (0x011C - 0x00F8)
class URoadLaneReachSpec : public URoadReachSpec
{
public:
	TArray< int >                                      CrossedEdgeJunctionIDs;                           		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URoadLaneReachSpec* >                CrossedEdgeJunctionRefs;                          		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    CrossedEdgeDistances;                             		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RoadLaneReachSpec" );

		return pClassPointer;
	};

};

UClass* URoadLaneReachSpec::pClassPointer = NULL;

// Class Engine.Route
// 0x0010 (0x024C - 0x023C)
class ARoute : public AInfo
{
public:
	unsigned char                                      RouteType;                                        		// 0x023C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FNavReference >                     NavList;                                          		// 0x0240 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Route" );

		return pClassPointer;
	};

};

UClass* ARoute::pClassPointer = NULL;

// Class Engine.SavedMove
// 0x0098 (0x00D8 - 0x0040)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                         		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              TimeStamp;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              Delta;                                            		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRun : 1;                                         		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuck : 1;                                        		// 0x004C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x004C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x004C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x004C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      SavedPhysics;                                     		// 0x0050 (0x0001) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartRelativeLocation;                            		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartVelocity;                                    		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     StartFloor;                                       		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedLocation;                                    		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedVelocity;                                    		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedRelativeLocation;                            		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     Acceleration;                                     		// 0x00B4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x00C0 (0x000C) [0x0000000000000000]              
	class AActor*                                      StartBase;                                        		// 0x00CC (0x0004) [0x0000000000000000]              
	class AActor*                                      EndBase;                                          		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              AccelDotThreshold;                                		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SavedMove" );

		return pClassPointer;
	};

	unsigned char CompressedFlags ( );
	void SetInitialPosition ( class APawn* P );
	struct FVector GetStartLocation ( );
	void Clear ( );
};

UClass* USavedMove::pClassPointer = NULL;

// Class Engine.SaveGameSummary
// 0x0014 (0x0054 - 0x0040)
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                        		// 0x0040 (0x0008) [0x0000000000000000]              
	struct FString                                     Description;                                      		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SaveGameSummary" );

		return pClassPointer;
	};

};

UClass* USaveGameSummary::pClassPointer = NULL;

// Class Engine.SceneCapture2DActor
// 0x0004 (0x0244 - 0x0240)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0240 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCapture2DActor" );

		return pClassPointer;
	};

};

UClass* ASceneCapture2DActor::pClassPointer = NULL;

// Class Engine.SceneCaptureComponent
// 0x002B (0x0084 - 0x0059)
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableFog : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                   		// 0x005C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedsSceneUpdate : 1;                            		// 0x005C (0x0004) [0x0000000000003002] [0x00000008] ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      ClearColor;                                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ViewMode;                                         		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                SceneLOD;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPostProcessChain*                           PostProcess;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxUpdateDist;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStreamingUpdateDist;                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CaptureInfo;                                      		// 0x007C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ViewState;                                        		// 0x0080 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCaptureComponent" );

		return pClassPointer;
	};

	void SetFrameRate ( float NewFrameRate );
};

UClass* USceneCaptureComponent::pClassPointer = NULL;

// Class Engine.SceneCapture2DComponent
// 0x009C (0x0120 - 0x0084)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FieldOfView;                                      		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NearPlane;                                        		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FarPlane;                                         		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateMatrices : 1;                              		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0098 (0x0008) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                       		// 0x00A0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     ProjMatrix;                                       		// 0x00E0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCapture2DComponent" );

		return pClassPointer;
	};

	void SetView ( struct FVector NewLocation, struct FRotator NewRotation );
	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane );
};

UClass* USceneCapture2DComponent::pClassPointer = NULL;

// Class Engine.SceneCaptureCubeMapActor
// 0x0008 (0x0248 - 0x0240)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0240 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                 		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCaptureCubeMapActor" );

		return pClassPointer;
	};

};

UClass* ASceneCaptureCubeMapActor::pClassPointer = NULL;

// Class Engine.SceneCaptureCubeMapComponent
// 0x0018 (0x009C - 0x0084)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearPlane;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldLocation;                                    		// 0x0090 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCaptureCubeMapComponent" );

		return pClassPointer;
	};

};

UClass* USceneCaptureCubeMapComponent::pClassPointer = NULL;

// Class Engine.SceneCapturePortalComponent
// 0x000C (0x0090 - 0x0084)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleFOV;                                         		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      ViewDestination;                                  		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCapturePortalComponent" );

		return pClassPointer;
	};

	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest );
};

UClass* USceneCapturePortalComponent::pClassPointer = NULL;

// Class Engine.SceneCaptureReflectComponent
// 0x0008 (0x008C - 0x0084)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleFOV;                                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneCaptureReflectComponent" );

		return pClassPointer;
	};

};

UClass* USceneCaptureReflectComponent::pClassPointer = NULL;

// Class Engine.Scout
// 0x0028 (0x044C - 0x0424)
class AScout : public APawn
{
public:
	TArray< struct FPathSizeInfo >                     PathSizes;                                        		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TestJumpZ;                                        		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              TestGroundSpeed;                                  		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              TestMaxFallSpeed;                                 		// 0x0438 (0x0004) [0x0000000000000000]              
	float                                              TestFallSpeed;                                    		// 0x043C (0x0004) [0x0000000000000000]              
	float                                              MaxLandingVelocity;                               		// 0x0440 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MinNumPlayerStarts;                               		// 0x0444 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultReachSpecClass;                            		// 0x0448 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Scout" );

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};

UClass* AScout::pClassPointer = NULL;

// Class Engine.ServerCommandlet
// 0x0000 (0x0080 - 0x0080)
class UServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ServerCommandlet" );

		return pClassPointer;
	};

};

UClass* UServerCommandlet::pClassPointer = NULL;

// Class Engine.ShaderCache
// 0x00BC (0x00FC - 0x0040)
class UShaderCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xBC ];                            		// 0x0040 (0x00BC) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ShaderCache" );

		return pClassPointer;
	};

};

UClass* UShaderCache::pClassPointer = NULL;

// Class Engine.ShadowMap1D
// 0x004C (0x008C - 0x0040)
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4C ];                            		// 0x0040 (0x004C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ShadowMap1D" );

		return pClassPointer;
	};

};

UClass* UShadowMap1D::pClassPointer = NULL;

// Class Engine.ShadowMap2D
// 0x0024 (0x0064 - 0x0040)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                          		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateScale;                                  		// 0x0044 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateBias;                                   		// 0x004C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightGuid;                                        		// 0x0054 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ShadowMap2D" );

		return pClassPointer;
	};

};

UClass* UShadowMap2D::pClassPointer = NULL;

// Class Engine.ShadowMapTexture2D
// 0x0000 (0x0150 - 0x0150)
class UShadowMapTexture2D : public UTexture2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ShadowMapTexture2D" );

		return pClassPointer;
	};

};

UClass* UShadowMapTexture2D::pClassPointer = NULL;

// Class Engine.SkeletalMesh
// 0x02E0 (0x0320 - 0x0040)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                           		// 0x0040 (0x001C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x005C (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FVector                                     Origin;                                           		// 0x0068 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FRotator                                    RotOrigin;                                        		// 0x0074 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< int >                                      RefSkeleton;                                      		// 0x0080 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SkeletalDepth;                                    		// 0x008C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0090 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                        		// 0x00CC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FMatrix >                           RefBasesInvMatrix;                                		// 0x00D8 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FBoneMirrorInfo >                   SkelMirrorTable;                                  		// 0x00E4 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	unsigned char                                      SkelMirrorAxis;                                   		// 0x00F0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SkelMirrorFlipAxis;                               		// 0x00F1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USkeletalMeshSocket* >               Sockets;                                          		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSkeletalMeshLODInfo >              LODInfo;                                          		// 0x0100 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	TArray< struct FName >                             PerPolyCollisionBones;                            		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             AddToParentPerPolyCollisionBone;                  		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      PerPolyBoneKDOPs;                                 		// 0x0124 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                     		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSimpleLineCollision : 1;                      		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSimpleBoxCollision : 1;                       		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x0130 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFullPrecisionUVs : 1;                         		// 0x0130 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFullPrecisionPositions : 1;                   		// 0x0130 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	class UFaceFXAsset*                                FaceFXAsset;                                      		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               BoundsPreviewAsset;                               		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPC;                                        		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPS3;                                       		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasXbox360;                                   		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPointer >                          ClothMesh;                                        		// 0x0148 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    ClothMeshScale;                                   		// 0x0154 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothToGraphicsVertMap;                           		// 0x0160 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ClothWeldingMap;                                  		// 0x016C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                ClothWeldingDomain;                               		// 0x0178 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothWeldedIndices;                               		// 0x017C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bForceNoWelding : 1;                              		// 0x0188 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                NumFreeClothVerts;                                		// 0x018C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothIndexBuffer;                                 		// 0x0190 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             ClothBones;                                       		// 0x019C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnableClothBendConstraints : 1;                  		// 0x01A8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothDamping : 1;                          		// 0x01A8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseClothCOMDamping : 1;                          		// 0x01A8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              ClothStretchStiffness;                            		// 0x01AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothBendStiffness;                               		// 0x01B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDensity;                                     		// 0x01B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothThickness;                                   		// 0x01B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDamping;                                     		// 0x01BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothIterations;                                  		// 0x01C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothFriction;                                    		// 0x01C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothRelativeGridSpacing;                         		// 0x01C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothPressure;                                    		// 0x01CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothCollisionResponseCoefficient;                		// 0x01D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentResponseCoefficient;               		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentTearFactor;                        		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothSleepLinearVelocity;                         		// 0x01DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;             		// 0x01E0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothSelfCollision : 1;                    		// 0x01E0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothPressure : 1;                         		// 0x01E0 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTwoWayCollision : 1;                  		// 0x01E0 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	TArray< struct FClothSpecialBoneInfo >             ClothSpecialBones;                                		// 0x01E4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnableClothLineChecks : 1;                       		// 0x01F0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothMetal : 1;                                  		// 0x01F0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	float                                              ClothMetalImpulseThreshold;                       		// 0x01F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalPenetrationDepth;                       		// 0x01F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalMaxDeformationDistance;                 		// 0x01FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTearing : 1;                          		// 0x0200 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              ClothTearFactor;                                  		// 0x0204 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothTearReserve;                                 		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FMap_Mirror                                 ClothTornTriMap;                                  		// 0x020C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      SoftBodySurfaceToGraphicsVertMap;                 		// 0x0248 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodySurfaceIndices;                           		// 0x0254 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVector >                           SoftBodyTetraVertsUnscaled;                       		// 0x0260 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodyTetraIndices;                             		// 0x026C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSoftBodyTetraLink >                SoftBodyTetraLinks;                               		// 0x0278 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPointer >                          CachedSoftBodyMeshes;                             		// 0x0284 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    CachedSoftBodyMeshScales;                         		// 0x0290 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FName >                             SoftBodyBones;                                    		// 0x029C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSoftBodySpecialBoneInfo >          SoftBodySpecialBones;                             		// 0x02A8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              SoftBodyVolumeStiffness;                          		// 0x02B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyStretchingStiffness;                      		// 0x02B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDensity;                                  		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyParticleRadius;                           		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDamping;                                  		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySolverIterations;                         		// 0x02C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyFriction;                                 		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyRelativeGridSpacing;                      		// 0x02D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodySleepLinearVelocity;                      		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                 		// 0x02D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentResponse;                       		// 0x02DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyCollisionResponse;                        		// 0x02E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDetailLevel;                              		// 0x02E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySubdivisionLevel;                         		// 0x02E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSoftBodyIsoSurface : 1;                          		// 0x02EC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyDamping : 1;                       		// 0x02EC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                       		// 0x02EC (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentThreshold;                      		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;               		// 0x02F4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentTearFactor;                     		// 0x02F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                    		// 0x02FC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                ReleaseResourcesFence;                            		// 0x0300 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       SkelMeshGUID;                                     		// 0x0304 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bPreserveSourceData : 1;                          		// 0x0314 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsRenderable : 1;                                		// 0x0314 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCPUSkinning : 1;                              		// 0x0314 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                NeverStream;                                      		// 0x0318 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    Streamable;                                       		// 0x031C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkeletalMesh" );

		return pClassPointer;
	};

};

UClass* USkeletalMesh::pClassPointer = NULL;

// Class Engine.SkeletalMeshComponent
// 0x02C0 (0x04A8 - 0x01E8)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                          		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x01F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNode*                                   Animations;                                       		// 0x01F4 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAnimNode* >                         AnimTickArray;                                    		// 0x01F8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UAnimNode*                                   m_RootMotionAnimation;                            		// 0x0204 (0x0004) [0x0000000000000000]              
	TArray< class UAnimNode* >                         m_aLogicalAnimations;                             		// 0x0208 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_bSetPhysAssetOnMeshChange;                      		// 0x0214 (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                             		// 0x021C (0x0004) [0x000000000440200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	float                                              PhysicsWeight;                                    		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalAnimRateScale;                              		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MeshObject;                                       		// 0x0228 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      WireframeColor;                                   		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMatrix >                           SpaceBases;                                       		// 0x0230 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         LocalAtoms;                                       		// 0x023C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x0248 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class USkeletalMeshComponent*                      ParentAnimComponent;                              		// 0x0254 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< int >                                      ParentBoneMap;                                    		// 0x0258 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0264 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          TemporarySavedAnimSets;                           		// 0x0270 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UMorphTargetSet* >                   MorphSets;                                        		// 0x027C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FActiveMorph >                      ActiveMorphs;                                     		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAttachment >                       Attachments;                                      		// 0x0294 (0x000C) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< unsigned char >                            SkelControlIndex;                                 		// 0x02A0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ForcedLodModel;                                   		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PredictedLODLevel;                                		// 0x02B0 (0x0004) [0x0000000000000000]              
	int                                                OldPredictedLODLevel;                             		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              MaxDistanceFactor;                                		// 0x02B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bForceWireframe;                                  		// 0x02BC (0x0004) [0x0000000000000000]              
	int                                                bForceRefpose;                                    		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                bOldForceRefPose;                                 		// 0x02C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoSkeletonUpdate : 1;                            		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                bForceSkelUpdate;                                 		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                bDisplayBones;                                    		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                bShowPrePhysBones;                                		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                bShowSockets;                                     		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                bHideSkin;                                        		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                bForceRawOffset;                                  		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                bIgnoreControllers;                               		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                bForceScalingControllers;                         		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                bTransformFromAnimParent;                         		// 0x02EC (0x0004) [0x0000000000000000]              
	unsigned long                                      bAnimTreeEnabled : 1;                             		// 0x02F0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                TickTag;                                          		// 0x02F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CachedAtomsTag;                                   		// 0x02F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                bUseSingleBodyPhysics;                            		// 0x02FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bRequiredBonesUpToDate;                           		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistFactorForKinematicUpdate;                  		// 0x0304 (0x0004) [0x0000000000000000]              
	struct FName                                       PhysicsBlendZeroDriftBoneName;                    		// 0x0308 (0x0008) [0x0000000000000000]              
	int                                                FramesPhysicsAsleep;                              		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                bDisplayTangentSpace;                             		// 0x0314 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;              		// 0x0318 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                   		// 0x0318 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;            		// 0x0318 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;           		// 0x0318 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bForceDiscardRootMotion : 1;                      		// 0x0318 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRootMotionModeChangeNotify : 1;                  		// 0x0318 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bRootMotionExtractedNotify : 1;                   		// 0x0318 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;       		// 0x0318 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAnimTreeInitialised : 1;                         		// 0x0318 (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasPhysicsAssetInstance : 1;                     		// 0x0318 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;           		// 0x0318 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bUpdateJointsFromAnimation : 1;                   		// 0x0318 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkelCompFixed : 1;                               		// 0x0318 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                      		// 0x0318 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                		// 0x0318 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                  		// 0x0318 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bPerBoneVolumeEffects : 1;                        		// 0x0318 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;            		// 0x0318 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bUseRawData : 1;                                  		// 0x0318 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x0318 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;           		// 0x0318 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bPauseAnims : 1;                                  		// 0x0318 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bChartDistanceFactor : 1;                         		// 0x0318 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bEnableLineCheckWithBounds : 1;                   		// 0x0318 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bEnableClothSimulation : 1;                       		// 0x0318 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableClothCollision : 1;                       		// 0x0318 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothFrozen : 1;                                 		// 0x0318 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;              		// 0x0318 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bClothAwakeOnStartup : 1;                         		// 0x0318 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bClothBaseVelClamp : 1;                           		// 0x0318 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                  		// 0x0318 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bCacheAnimSequenceNodes : 1;                      		// 0x0318 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bForceMeshObjectUpdates : 1;                      		// 0x031C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                   		// 0x031C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                    		// 0x031C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	TArray< struct FBonePair >                         InstanceVertexWeightBones;                        		// 0x0320 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     ClothExternalForce;                               		// 0x032C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ClothWind;                                        		// 0x0338 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ClothBaseVelClampRange;                           		// 0x0344 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendWeight;                                 		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ClothSim;                                         		// 0x0354 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x0358 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshPosData;                                 		// 0x035C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVector >                           ClothMeshNormalData;                              		// 0x0368 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ClothMeshIndexData;                               		// 0x0374 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshVerts;                                		// 0x0380 (0x0004) [0x0000000000000000]              
	int                                                NumClothMeshIndices;                              		// 0x0384 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ClothMeshParentData;                              		// 0x0388 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshParentIndices;                        		// 0x0394 (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           ClothMeshWeldedPosData;                           		// 0x0398 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshWeldedNormalData;                        		// 0x03A4 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothMeshWeldedIndexData;                         		// 0x03B0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ClothDirtyBufferFlag;                             		// 0x03BC (0x0004) [0x0000000000000000]              
	unsigned char                                      ClothRBChannel;                                   		// 0x03C0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct UPrimitiveComponent_FRBCollisionChannelContainer ClothRBCollideWithChannels;                       		// 0x03C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothForceScale;                                  		// 0x03C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothImpulseScale;                                		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothAttachmentTearFactor;                        		// 0x03D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    SoftBodySim;                                      		// 0x03D4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SoftBodySceneIndex;                               		// 0x03D8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bEnableSoftBodySimulation : 1;                    		// 0x03DC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FVector >                           SoftBodyTetraPosData;                             		// 0x03E0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodyTetraIndexData;                           		// 0x03EC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumSoftBodyTetraVerts;                            		// 0x03F8 (0x0004) [0x0000000000000000]              
	int                                                NumSoftBodyTetraIndices;                          		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              SoftBodyImpulseScale;                             		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftBodyFrozen : 1;                              		// 0x0404 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;           		// 0x0404 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                      		// 0x0404 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      SoftBodyRBChannel;                                		// 0x0408 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct UPrimitiveComponent_FRBCollisionChannelContainer SoftBodyRBCollideWithChannels;                    		// 0x040C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    SoftBodyASVPlane;                                 		// 0x0410 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UMaterial*                                   LimitMaterial;                                    		// 0x0414 (0x0004) [0x0000000000000000]              
	struct FBoneAtom                                   RootMotionDelta;                                  		// 0x0418 (0x0030) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionVelocity;                               		// 0x0448 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RootBoneTranslation;                              		// 0x0454 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionAccelScale;                             		// 0x0460 (0x000C) [0x0000000000000000]              
	struct FVector                                     ExtraRootMotionPerSecond;                         		// 0x046C (0x000C) [0x0000000000000000]              
	float                                              ExtraRootMotionDuration;                          		// 0x0478 (0x0004) [0x0000000000000000]              
	struct FVector                                     RootMotionCosmeticOffset;                         		// 0x047C (0x000C) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x0488 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviousRMM;                                      		// 0x0489 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      PendingRMM;                                       		// 0x048A (0x0001) [0x0000000000000000]              
	unsigned char                                      OldPendingRMM;                                    		// 0x048B (0x0001) [0x0000000000000000]              
	int                                                bRMMOneFrameDelay;                                		// 0x048C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RootMotionRotationMode;                           		// 0x0490 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FaceFXBlendMode;                                  		// 0x0491 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    FaceFXActorInstance;                              		// 0x0494 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UAudioComponent*                             CachedFaceFXAudioComp;                            		// 0x0498 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< unsigned char >                            BoneVisibility;                                   		// 0x049C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkeletalMeshComponent" );

		return pClassPointer;
	};

	void RemoveLogicalAnimation ( class UAnimNode* Animation );
	void AddLogicalAnimation ( class UAnimNode* Animation, unsigned long bRootMotion );
	void StopAnim ( );
	void PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying );
	bool IsBoneHidden ( int BoneIndex );
	void UnHideBone ( int BoneIndex );
	void HideBone ( int BoneIndex );
	void SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration );
	void SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration );
	float GetFaceFXRegister ( struct FString RegName );
	void DeclareFaceFXRegister ( struct FString RegName );
	bool IsPlayingFaceFXAnim ( );
	void StopFaceFXAnim ( );
	bool PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName );
	void ToggleInstanceVertexWeights ( unsigned long bEnable );
	void UpdateInstanceVertexWeightBones ( TArray< struct FBonePair > BonePairs );
	int FindInstanceVertexweightBonePair ( struct FBonePair Bones );
	void RemoveInstanceVertexWeightBoneParented ( struct FName BoneName );
	void AddInstanceVertexWeightBoneParented ( struct FName BoneName );
	bool GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, TArray< struct FName >* out_Bones );
	void UpdateAnimations ( );
	void ForceSkelUpdate ( );
	void UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport );
	void SetHasPhysicsAssetInstance ( unsigned long bHasInstance );
	class URB_BodyInstance* FindBodyInstanceNamed ( struct FName BoneName );
	struct FName FindConstraintBoneName ( int ConstraintIndex );
	int FindConstraintIndex ( struct FName ConstraintName );
	void InitSkelControls ( );
	void UpdateParentBoneMap ( );
	void SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp );
	void SetAnimTreeTemplate ( class UAnimTree* NewTemplate );
	struct FName FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation );
	void TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	void TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	struct FVector GetBoneAxis ( struct FName BoneName, unsigned char Axis );
	void GetBoneNames ( TArray< struct FName >* BoneNames );
	struct FName GetParentBone ( struct FName BoneName );
	struct FMatrix GetBoneMatrix ( int BoneIndex );
	struct FName GetBoneName ( int BoneIndex );
	int MatchRefBone ( struct FName BoneName );
	struct FVector GetBoneLocation ( struct FName BoneName, int Space );
	struct FQuat GetBoneQuaternion ( struct FName BoneName, int Space );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
	void AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
	float GetAnimLength ( struct FName AnimSeqName );
	float GetAnimRateByDuration ( struct FName AnimSeqName, float Duration );
	void RestoreSavedAnimSets ( );
	void SaveAnimSets ( );
	class UAnimSequence* FindAnimSequence ( struct FName AnimSeqName );
	void SetSoftBodyFrozen ( unsigned long bNewFrozen );
	void UpdateSoftBodyParams ( );
	void SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax );
	void EnableClothValidBounds ( unsigned long IfEnableClothValidBounds );
	void AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable );
	void SetClothVelocity ( struct FVector VelocityOffSet );
	void SetClothPosition ( struct FVector ClothOffSet );
	void SetClothSleep ( unsigned long IfClothSleep );
	void SetClothThickness ( float ClothThickness );
	void SetClothTearFactor ( float ClothTearFactor );
	void SetClothStretchingStiffness ( float ClothStretchingStiffness );
	void SetClothSolverIterations ( int ClothSolverIterations );
	void SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity );
	void SetClothPressure ( float ClothPressure );
	void SetClothFriction ( float ClothFriction );
	void SetClothFlags ( int ClothFlags );
	void SetClothDampingCoefficient ( float ClothDampingCoefficient );
	void SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient );
	void SetClothBendingStiffness ( float ClothBendingStiffness );
	void SetClothAttachmentTearFactor ( float ClothAttachTearFactor );
	void SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient );
	float GetClothThickness ( );
	float GetClothTearFactor ( );
	float GetClothStretchingStiffness ( );
	int GetClothSolverIterations ( );
	float GetClothSleepLinearVelocity ( );
	float GetClothPressure ( );
	float GetClothFriction ( );
	int GetClothFlags ( );
	float GetClothDampingCoefficient ( );
	float GetClothCollisionResponseCoefficient ( );
	float GetClothBendingStiffness ( );
	float GetClothAttachmentTearFactor ( );
	float GetClothAttachmentResponseCoefficient ( );
	void ResetClothVertsToRefPose ( );
	void SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts );
	void SetClothExternalForce ( struct FVector InForce );
	void UpdateClothParams ( );
	void SetClothFrozen ( unsigned long bNewFrozen );
	void SetEnableClothSimulation ( unsigned long bInEnable );
	void SetForceRefPose ( unsigned long bNewForceRefPose );
	void SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit );
	void SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases );
	void AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	bool IsComponentAttached ( class UActorComponent* Component, struct FName BoneName );
	class UActorComponent* FindComponentAttachedToBone ( struct FName InBoneName );
	struct FName GetSocketBoneName ( struct FName InSocketName );
	class USkeletalMeshSocket* GetSocketByName ( struct FName InSocketName );
	bool GetSocketWorldLocationAndRotation ( struct FName InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation );
	void AttachComponentToSocket ( class UActorComponent* Component, struct FName SocketName );
	void DetachComponent ( class UActorComponent* Component );
	void AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale );
};

UClass* USkeletalMeshComponent::pClassPointer = NULL;

// Class Engine.SkeletalMeshSocket
// 0x0040 (0x0080 - 0x0040)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                       		// 0x0040 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FName                                       BoneName;                                         		// 0x0048 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FVector                                     RelativeLocation;                                 		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeScale;                                    		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               PreviewSkelMesh;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      PreviewSkelComp;                                  		// 0x0078 (0x0004) [0x00000000040A200B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 PreviewStaticMesh;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkeletalMeshSocket" );

		return pClassPointer;
	};

};

UClass* USkeletalMeshSocket::pClassPointer = NULL;

// Class Engine.SkyLight
// 0x0000 (0x0244 - 0x0244)
class ASkyLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkyLight" );

		return pClassPointer;
	};

};

UClass* ASkyLight::pClassPointer = NULL;

// Class Engine.SkyLightComponent
// 0x0018 (0x019C - 0x0184)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                  		// 0x0184 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LowerColor;                                       		// 0x0188 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bGenerateAO : 1;                                		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bAOCosineWeighting : 1;                         		// 0x018C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              m_fAOPower;                                       		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinimumAOLevel;                                		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAOTraceDistance;                               		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkyLightComponent" );

		return pClassPointer;
	};

};

UClass* USkyLightComponent::pClassPointer = NULL;

// Class Engine.SkyLightToggleable
// 0x0000 (0x0244 - 0x0244)
class ASkyLightToggleable : public ASkyLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkyLightToggleable" );

		return pClassPointer;
	};

};

UClass* ASkyLightToggleable::pClassPointer = NULL;

// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x009D - 0x009C)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x009C (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SlotToSlotReachSpec" );

		return pClassPointer;
	};

};

UClass* USlotToSlotReachSpec::pClassPointer = NULL;

// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0080 - 0x0080)
class USmokeTestCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SmokeTestCommandlet" );

		return pClassPointer;
	};

};

UClass* USmokeTestCommandlet::pClassPointer = NULL;

// Class Engine.SoundCue
// 0x007C (0x00BC - 0x0040)
class USoundCue : public UObject
{
public:
	struct FName                                       SoundGroup;                                       		// 0x0040 (0x0008) [0x0000000000000000]              
	class USoundNode*                                  FirstNode;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x004C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	float                                              MaxAudibleDistance;                               		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VolumeMultiplier;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0094 (0x0004) [0x0000000000000000]              
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxConcurrentPlayCount;                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentPlayCount;                                 		// 0x00B8 (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundCue" );

		return pClassPointer;
	};

	float GetCueDuration ( );
};

UClass* USoundCue::pClassPointer = NULL;

// Class Engine.SoundNode
// 0x0010 (0x0050 - 0x0040)
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                   		// 0x0040 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USoundNode* >                        ChildNodes;                                       		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNode" );

		return pClassPointer;
	};

};

UClass* USoundNode::pClassPointer = NULL;

// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0058 - 0x0050)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeWaveParam" );

		return pClassPointer;
	};

};

UClass* USoundNodeWaveParam::pClassPointer = NULL;

// Class Engine.SpeechRecognition
// 0x0088 (0x00C8 - 0x0040)
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                         		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ConfidenceThreshhold;                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRecogVocabulary >                  Vocabularies;                                     		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            VoiceData;                                        		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            WorkingVoiceData;                                 		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            UserData;                                         		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRecogUserData                              InstanceData[ 0x4 ];                              		// 0x0080 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bDirty : 1;                                       		// 0x00C0 (0x0004) [0x0000000000202000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialised : 1;                                 		// 0x00C0 (0x0004) [0x0000000000202000] [0x00000002] ( CPF_Transient )
	struct FPointer                                    FnxVoiceData;                                     		// 0x00C4 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpeechRecognition" );

		return pClassPointer;
	};

};

UClass* USpeechRecognition::pClassPointer = NULL;

// Class Engine.SphericalHarmonicLightComponent
// 0x0070 (0x01F4 - 0x0184)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                       		// 0x0184 (0x006C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRenderBeforeModShadows : 1;                      		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SphericalHarmonicLightComponent" );

		return pClassPointer;
	};

};

UClass* USphericalHarmonicLightComponent::pClassPointer = NULL;

// Class Engine.SpotLight
// 0x0000 (0x0244 - 0x0244)
class ASpotLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpotLight" );

		return pClassPointer;
	};

};

UClass* ASpotLight::pClassPointer = NULL;

// Class Engine.SpotLightComponent
// 0x0010 (0x0200 - 0x01F0)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                   		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterConeAngle;                                   		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x01F8 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x01FC (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpotLightComponent" );

		return pClassPointer;
	};

};

UClass* USpotLightComponent::pClassPointer = NULL;

// Class Engine.SpotLightMovable
// 0x0000 (0x0244 - 0x0244)
class ASpotLightMovable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpotLightMovable" );

		return pClassPointer;
	};

};

UClass* ASpotLightMovable::pClassPointer = NULL;

// Class Engine.SpotLightToggleable
// 0x0000 (0x0244 - 0x0244)
class ASpotLightToggleable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpotLightToggleable" );

		return pClassPointer;
	};

};

UClass* ASpotLightToggleable::pClassPointer = NULL;

// Class Engine.SpriteComponent
// 0x000C (0x01E4 - 0x01D8)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                           		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsScreenSizeScaled : 1;                          		// 0x01DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScreenSize;                                       		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpriteComponent" );

		return pClassPointer;
	};

};

UClass* USpriteComponent::pClassPointer = NULL;

// Class Engine.StaticLightCollectionActor
// 0x0010 (0x0254 - 0x0244)
class AStaticLightCollectionActor : public ALight
{
public:
	TArray< class ULightComponent* >                   LightComponents;                                  		// 0x0244 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxLightComponents;                               		// 0x0250 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.StaticLightCollectionActor" );

		return pClassPointer;
	};

};

UClass* AStaticLightCollectionActor::pClassPointer = NULL;

// Class Engine.StaticMesh
// 0x00EC (0x012C - 0x0040)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0040 (0x000C) MISSED OFFSET
	TArray< struct FStaticMeshLODInfo >                LODInfo;                                          		// 0x004C (0x000C) [0x0000000000001041]              ( CPF_Edit | CPF_EditConstArray | CPF_Native )
	float                                              LODDistanceRatio;                                 		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0x14 ];                            		// 0x005C (0x0014) MISSED OFFSET
	int                                                LightMapResolution;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapCoordinateIndex;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCollisionOnly : 1;                             		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDiscardCPURenderData : 1;                      		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bRequiresCollisionData : 1;                     		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0084 (0x0004) MISSED OFFSET
	unsigned long                                      NeverStream : 1;                                  		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UnknownData03[ 0x18 ];                            		// 0x008C (0x0018) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                        		// 0x00A4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned char                                      UnknownData04[ 0x34 ];                            		// 0x00A8 (0x0034) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                       		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleBoxCollision : 1;                        		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                  		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ForceDoubleSidedShadowVolumes : 1;                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseFullPrecisionUVs : 1;                          		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FName >                             ContentTags;                                      		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      RecenterUVs : 1;                                  		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OverridePlanarZ : 1;                              		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UnknownData05[ 0x28 ];                            		// 0x0104 (0x0028) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.StaticMesh" );

		return pClassPointer;
	};

};

UClass* UStaticMesh::pClassPointer = NULL;

// Class Engine.RB_BodySetup
// 0x0060 (0x00E0 - 0x0080)
class URB_BodySetup : public UKMeshProps
{
public:
	unsigned char                                      SleepFamily;                                      		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0084 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bFixed : 1;                                       		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoCollision : 1;                                 		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockZeroExtent : 1;                             		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBlockNonZeroExtent : 1;                          		// 0x008C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableContinuousCollisionDetection : 1;          		// 0x008C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAlwaysFullAnimWeight : 1;                        		// 0x008C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassScale;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPointer >                          CollisionGeom;                                    		// 0x0098 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FVector >                           CollisionGeomScale3D;                             		// 0x00A4 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FsAPBCollision                              APBCollision;                                     		// 0x00B0 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           PreCachedPhysScale;                               		// 0x00C4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FKCachedConvexData >                PreCachedPhysData;                                		// 0x00D0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                PreCachedPhysDataVersion;                         		// 0x00DC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_BodySetup" );

		return pClassPointer;
	};

};

UClass* URB_BodySetup::pClassPointer = NULL;

// Class Engine.StaticMeshActorBase
// 0x0000 (0x023C - 0x023C)
class AStaticMeshActorBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.StaticMeshActorBase" );

		return pClassPointer;
	};

};

UClass* AStaticMeshActorBase::pClassPointer = NULL;

// Class Engine.StaticMeshActor
// 0x0004 (0x0240 - 0x023C)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.StaticMeshActor" );

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};

UClass* AStaticMeshActor::pClassPointer = NULL;

// Class Engine.StaticMeshCollectionActor
// 0x0010 (0x024C - 0x023C)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray< class UStaticMeshComponent* >              StaticMeshComponents;                             		// 0x023C (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxStaticMeshComponents;                          		// 0x0248 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.StaticMeshCollectionActor" );

		return pClassPointer;
	};

};

UClass* AStaticMeshCollectionActor::pClassPointer = NULL;

// Class Engine.StaticMeshComponentFactory
// 0x0004 (0x0054 - 0x0050)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.StaticMeshComponentFactory" );

		return pClassPointer;
	};

};

UClass* UStaticMeshComponentFactory::pClassPointer = NULL;

// Class Engine.SwatTurnReachSpec
// 0x0001 (0x009D - 0x009C)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x009C (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SwatTurnReachSpec" );

		return pClassPointer;
	};

};

UClass* USwatTurnReachSpec::pClassPointer = NULL;

// Class Engine.TeamInfo
// 0x001C (0x0258 - 0x023C)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                         		// 0x023C (0x000C) [0x0000000040408022]              ( CPF_Const | CPF_Net | CPF_Localized | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                Size;                                             		// 0x0248 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              Score;                                            		// 0x024C (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                TeamIndex;                                        		// 0x0250 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	struct FColor                                      TeamColor;                                        		// 0x0254 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TeamInfo" );

		return pClassPointer;
	};

	unsigned char GetTeamNum ( );
	struct FColor GetTextColor ( );
	struct FColor GetHUDColor ( );
	struct FString GetHumanReadableName ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void eventDestroyed ( );
	void UnbindTeamDataProvider ( );
	class UCurrentGameDataStore* GetCurrentGameDS ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATeamInfo::pClassPointer = NULL;

// Class Engine.Teleporter
// 0x0028 (0x035C - 0x0334)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                              		// 0x0334 (0x000C) [0x0000000000400021]              ( CPF_Edit | CPF_Net | CPF_NeedCtorLink )
	struct FName                                       ProductRequired;                                  		// 0x0340 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bChangesVelocity : 1;                             		// 0x0348 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bChangesYaw : 1;                                  		// 0x0348 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesX : 1;                                   		// 0x0348 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesY : 1;                                   		// 0x0348 (0x0004) [0x0000000000000021] [0x00000008] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesZ : 1;                                   		// 0x0348 (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      bEnabled : 1;                                     		// 0x0348 (0x0004) [0x0000000000000021] [0x00000020] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x0348 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FVector                                     TargetVelocity;                                   		// 0x034C (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LastFired;                                        		// 0x0358 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Teleporter" );

		return pClassPointer;
	};

	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventScriptPostTouchTeleporter ( class AActor* Other );
	void PostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	void eventPostBeginPlay ( );
	bool CanTeleport ( class AActor* A );
};

UClass* ATeleporter::pClassPointer = NULL;

// Class Engine.TeleportReachSpec
// 0x0000 (0x009C - 0x009C)
class UTeleportReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TeleportReachSpec" );

		return pClassPointer;
	};

};

UClass* UTeleportReachSpec::pClassPointer = NULL;

// Class Engine.Texture2DComposite
// 0x0010 (0x0100 - 0x00F0)
class UTexture2DComposite : public UTexture
{
public:
	TArray< struct FSourceTexture2DRegion >            SourceRegions;                                    		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxTextureSize;                                   		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Texture2DComposite" );

		return pClassPointer;
	};

	void ResetSourceRegions ( );
	void UpdateCompositeTexture ( int NumMipsToGenerate );
	bool SourceTexturesFullyStreamedIn ( );
};

UClass* UTexture2DComposite::pClassPointer = NULL;

// Class Engine.TextureCube
// 0x002C (0x011C - 0x00F0)
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x00F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SizeY;                                            		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x00F8 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NumMips;                                          		// 0x00FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsCubemapValid : 1;                              		// 0x0100 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	class UTexture2D*                                  FacePosX;                                         		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegX;                                         		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosY;                                         		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegY;                                         		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosZ;                                         		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegZ;                                         		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TextureCube" );

		return pClassPointer;
	};

};

UClass* UTextureCube::pClassPointer = NULL;

// Class Engine.TextureFlipBook
// 0x0040 (0x0190 - 0x0150)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0150 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              TimeIntoMovie;                                    		// 0x0154 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeSinceLastFrame;                               		// 0x0158 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              HorizontalScale;                                  		// 0x015C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              VerticalScale;                                    		// 0x0160 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bPaused : 1;                                      		// 0x0164 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStopped : 1;                                     		// 0x0164 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bLooping : 1;                                     		// 0x0164 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoPlay : 1;                                    		// 0x0164 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                HorizontalImages;                                 		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VerticalImages;                                   		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FBMethod;                                         		// 0x0170 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameTime;                                        		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                CurrentRow;                                       		// 0x017C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentColumn;                                    		// 0x0180 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetU;                                    		// 0x0184 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetV;                                    		// 0x0188 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x018C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TextureFlipBook" );

		return pClassPointer;
	};

	void SetCurrentFrame ( int Row, int Col );
	void Stop ( );
	void Pause ( );
	void Play ( );
};

UClass* UTextureFlipBook::pClassPointer = NULL;

// Class Engine.TextureMovie
// 0x0050 (0x0140 - 0x00F0)
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x00F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x00F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x00F8 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x00F9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x00FA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovieStreamSource;                                		// 0x00FB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DecoderClass;                                     		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCodecMovie*                                 Decoder;                                          		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      Paused : 1;                                       		// 0x0104 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      Stopped : 1;                                      		// 0x0104 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      Looping : 1;                                      		// 0x0104 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      AutoPlay : 1;                                     		// 0x0104 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAutoPlayInUIScene : 1;                           		// 0x0104 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FUntypedBulkData_Mirror                     Data;                                             		// 0x0108 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ReleaseCodecFence;                                		// 0x013C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TextureMovie" );

		return pClassPointer;
	};

	void Stop ( );
	void Pause ( );
	void Play ( );
};

UClass* UTextureMovie::pClassPointer = NULL;

// Class Engine.TextureRenderTarget
// 0x0004 (0x00F4 - 0x00F0)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                             		// 0x00F0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedsTwoCopies : 1;                              		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderOnce : 1;                                  		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TextureRenderTarget" );

		return pClassPointer;
	};

};

UClass* UTextureRenderTarget::pClassPointer = NULL;

// Class Engine.TextureRenderTarget2D
// 0x001C (0x0110 - 0x00F4)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x00F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SizeY;                                            		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Format;                                           		// 0x00FC (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x00FD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x00FE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ClearColor;                                       		// 0x0100 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TextureRenderTarget2D" );

		return pClassPointer;
	};

	class UTextureRenderTarget2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce );
};

UClass* UTextureRenderTarget2D::pClassPointer = NULL;

// Class Engine.TextureRenderTargetCube
// 0x0005 (0x00F9 - 0x00F4)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Format;                                           		// 0x00F8 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TextureRenderTargetCube" );

		return pClassPointer;
	};

};

UClass* UTextureRenderTargetCube::pClassPointer = NULL;

// Class Engine.Trigger
// 0x000C (0x0248 - 0x023C)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bRecentlyTriggered : 1;                           		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              AITriggerDelay;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Trigger" );

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	bool StopsProjectile ( class AProjectile* P );
	void UnTrigger ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATrigger::pClassPointer = NULL;

// Class Engine.TriggerVolume
// 0x0000 (0x0278 - 0x0278)
class ATriggerVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TriggerVolume" );

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

UClass* ATriggerVolume::pClassPointer = NULL;

// Class Engine.UberPostProcessEffect
// 0x0028 (0x00C0 - 0x0098)
class UUberPostProcessEffect : public UDOFAndBloomEffect
{
public:
	struct FVector                                     SceneShadows;                                     		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneHighLights;                                  		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneMidTones;                                    		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneDesaturation;                                		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UberPostProcessEffect" );

		return pClassPointer;
	};

};

UClass* UUberPostProcessEffect::pClassPointer = NULL;

// Class Engine.Vehicle
// 0x007C (0x04A0 - 0x0424)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                           		// 0x0424 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       LastDriver;                                       		// 0x0428 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDriving : 1;                                     		// 0x042C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bDriverIsVisible : 1;                             		// 0x042C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAttachDriver : 1;                                		// 0x042C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x042C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSeparateTurretFocus : 1;                         		// 0x042C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFollowLookDir : 1;                               		// 0x042C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasHandbrake : 1;                                		// 0x042C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bScriptedRise : 1;                                		// 0x042C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAvoidReversing : 1;                              		// 0x042C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRetryPathfindingWithDriver : 1;                  		// 0x042C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreStallZ : 1;                                		// 0x042C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                   		// 0x042C (0x0004) [0x0000000000000000] [0x00000800] 
	TArray< struct FVector >                           ExitPositions;                                    		// 0x0430 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ExitRadius;                                       		// 0x043C (0x0004) [0x0000000000000000]              
	struct FVector                                     ExitOffset;                                       		// 0x0440 (0x000C) [0x0000000000000000]              
	float                                              Steering;                                         		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Throttle;                                         		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rise;                                             		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Sprint;                                           		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetLocationAdjustment;                         		// 0x045C (0x000C) [0x0000000000000000]              
	float                                              DriverDamageMult;                                 		// 0x0468 (0x0004) [0x0000000000000000]              
	float                                              MomentumMult;                                     		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      CrushedDamageType;                                		// 0x0470 (0x0004) [0x0000000000000000]              
	float                                              MinCrushSpeed;                                    		// 0x0474 (0x0004) [0x0000000000000000]              
	float                                              ForceCrushPenetration;                            		// 0x0478 (0x0004) [0x0000000000000000]              
	unsigned char                                      StuckCount;                                       		// 0x047C (0x0001) [0x0000000000000000]              
	float                                              ThrottleTime;                                     		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              StuckTime;                                        		// 0x0484 (0x0004) [0x0000000000000000]              
	float                                              OldSteering;                                      		// 0x0488 (0x0004) [0x0000000000000000]              
	float                                              OnlySteeringStartTime;                            		// 0x048C (0x0004) [0x0000000000000000]              
	float                                              OldThrottle;                                      		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              AIMoveCheckTime;                                  		// 0x0494 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VehicleMovingTime;                                		// 0x0498 (0x0004) [0x0000000000000000]              
	float                                              TurnTime;                                         		// 0x049C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Vehicle" );

		return pClassPointer;
	};

	void NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDrivingStatusChanged ( );
	void HandleDeadVehicleDriver ( );
	void SetDriving ( unsigned long B );
	struct FVector GetEntryLocation ( );
	void CrushedBy ( class APawn* OtherPawn );
	bool eventEncroachingOn ( class AActor* Other );
	class AController* GetCollisionDamageInstigator ( );
	void eventEncroachedBy ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void DriverDied ( );
	bool eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nWeaponType );
	void ThrowActiveWeapon ( class UClass* DamageType );
	void AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void UnPossessed ( );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool FindAutoExit ( class APawn* ExitingDriver );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	void eventDriverLeft ( );
	void SetInputs ( float InForward, float InStrafe, float InUp, float InSprint );
	bool eventContinueOnFoot ( );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	void EntryAnnouncement ( class AController* C );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool TryToDrive ( class APawn* P );
	bool AnySeatAvailable ( );
	bool CanEnterVehicle ( class APawn* P );
	void Destroyed_HandleDriver ( );
	void eventDestroyed ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void eventPostBeginPlay ( );
	void SetBaseEyeheight ( );
	void PlayerChangedTeam ( );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void Suicide ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void NotifyTeamChanged ( );
};

UClass* AVehicle::pClassPointer = NULL;

// Class Engine.VehicleFeature
// 0x0000 (0x00CC - 0x00CC)
class UVehicleFeature : public URoad
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.VehicleFeature" );

		return pClassPointer;
	};

};

UClass* UVehicleFeature::pClassPointer = NULL;

// Class Engine.VoiceChannel
// 0x000C (0x0078 - 0x006C)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x006C (0x000C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.VoiceChannel" );

		return pClassPointer;
	};

};

UClass* UVoiceChannel::pClassPointer = NULL;

// Class Engine.VolumePathNode
// 0x0008 (0x033C - 0x0334)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                   		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartingHeight;                                   		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.VolumePathNode" );

		return pClassPointer;
	};

};

UClass* AVolumePathNode::pClassPointer = NULL;

// Class Engine.WallTransReachSpec
// 0x0000 (0x009C - 0x009C)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.WallTransReachSpec" );

		return pClassPointer;
	};

};

UClass* UWallTransReachSpec::pClassPointer = NULL;

// Class Engine.Weapon
// 0x00A4 (0x032C - 0x0288)
class AWeapon : public AInventory
{
public:
	unsigned char                                      CurrentFireMode;                                  		// 0x0288 (0x0001) [0x0000000000000000]              
	TArray< struct FName >                             FiringStatesArray;                                		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            WeaponFireTypes;                                  		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            WeaponProjectiles;                                		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    FireInterval;                                     		// 0x02B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    Spread;                                           		// 0x02BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    InstantHitDamage;                                 		// 0x02C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    InstantHitMomentum;                               		// 0x02D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            InstantHitDamageTypes;                            		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              EquipTime;                                        		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PutDownTime;                                      		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FireOffset;                                       		// 0x02F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWeaponPutDown : 1;                               		// 0x0300 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanThrow : 1;                                    		// 0x0300 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWasOptionalSet : 1;                              		// 0x0300 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWasDoNotActivate : 1;                            		// 0x0300 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInstantHit : 1;                                  		// 0x0300 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMeleeWeapon : 1;                                 		// 0x0300 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              WeaponRange;                                      		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMeshComponent*                              Mesh;                                             		// 0x0308 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              DefaultAnimSpeed;                                 		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x0310 (0x0004) [0x0000000040004000]              ( CPF_Config | CPF_EditInlineNotify )
	class AAIController*                               AIController;                                     		// 0x0314 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            ShouldFireOnRelease;                              		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AIRating;                                         		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              CachedMaxRange;                                   		// 0x0328 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Weapon" );

		return pClassPointer;
	};

	bool StillFiring ( unsigned char FireMode );
	bool ShouldRefire ( );
	void NotifyWeaponFinishedFiring ( unsigned char FireMode );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	bool TryPutDown ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	struct FVector eventGetMuzzleLoc ( );
	void CustomFire ( );
	class AProjectile* ProjectileFire ( );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact );
	void InstantFire ( );
	bool PassThroughDamage ( class AActor* HitActor );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList );
	class AActor* GetTraceOwner ( );
	float GetTraceRange ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	void FireAmmunition ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void SetCurrentFireMode ( unsigned char FiringModeNum );
	void SendToFiringState ( unsigned char FireModeNum );
	void ForceEndFire ( );
	void EndFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void ServerStartFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void WeaponCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	float AdjustFOVAngle ( float FOVAngle );
	void GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis );
	void DetachWeapon ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ClearFlashCount ( );
	void IncrementFlashCount ( );
	void WeaponEmpty ( );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void PutDownWeapon ( );
	void Activate ( );
	void TimeWeaponEquipping ( );
	void TimeWeaponPutDown ( );
	void RefireCheckTimer ( );
	void TimeWeaponFiring ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	void PlayFiringSound ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void StopWeaponAnimation ( );
	void PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh );
	void WeaponPlaySound ( class USoundCue* Sound, float NoiseLoudness );
	class UAnimNodeSequence* GetWeaponAnimNodeSeq ( );
	bool FireOnRelease ( );
	float SuggestDefenseStyle ( );
	float SuggestAttackStyle ( );
	bool CanAttack ( class AActor* Other );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	bool FocusOnLeader ( unsigned long bLeaderFiring );
	bool RecommendRangedAttack ( );
	float GetWeaponRating ( );
	float GetAIRating ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	float GetDamageRadius ( );
	float MaxRange ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	class UClass* GetProjectileClass ( );
	void ClearPendingFire ( int FireMode );
	void SetPendingFire ( int FireMode );
	bool PendingFire ( int FireMode );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void WeaponLog ( struct FString msg, struct FString FuncStr );
	void DumpWeaponDebugToLog ( );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	bool DenyClientWeaponSet ( );
	bool eventIsFiring ( );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DoOverridePrevWeapon ( );
	bool DoOverrideNextWeapon ( );
	void HolderDied ( );
	bool IsActiveWeapon ( );
	void ItemRemovedFromInvManager ( );
	void eventDestroyed ( );
};

UClass* AWeapon::pClassPointer = NULL;

// Class Engine.WindDirectionalSourceComponent
// 0x0017 (0x0070 - 0x0059)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneProxy;                                       		// 0x005C (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              Strength;                                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Phase;                                            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Frequency;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.WindDirectionalSourceComponent" );

		return pClassPointer;
	};

};

UClass* UWindDirectionalSourceComponent::pClassPointer = NULL;

// Class Engine.World
// 0x0260 (0x02A0 - 0x0040)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x260 ];                           		// 0x0040 (0x0260) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.World" );

		return pClassPointer;
	};

};

UClass* UWorld::pClassPointer = NULL;

// Class Engine.ZoneInfo
// 0x0010 (0x024C - 0x023C)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                            		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftKill;                                         		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      KillZDamageType;                                  		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftKillZ : 1;                                   		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ZoneInfo" );

		return pClassPointer;
	};

};

UClass* AZoneInfo::pClassPointer = NULL;

// Class Engine.WorldInfo
// 0x046C (0x06B8 - 0x024C)
class AWorldInfo : public AZoneInfo
{
public:
	struct FVector                                     m_DefaultMeshTranslation;                         		// 0x024C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_transientVFXManager;                            		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture*                                    DistrictHeightfield;                              		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HeightfieldScale;                                 		// 0x0260 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HeightfieldOffset;                                		// 0x026C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        DefaultPostProcessSettings;                       		// 0x0278 (0x010C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              SquintModeKernelSize;                             		// 0x0384 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                 		// 0x0388 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	struct FReverbSettings                             DefaultReverbSettings;                            		// 0x038C (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class AReverbVolume*                               HighestPriorityReverbVolume;                      		// 0x0398 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	TArray< class APortalVolume* >                     PortalVolumes;                                    		// 0x039C (0x000C) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x03A8 (0x000C) [0x0000000004420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMapHasPathingErrors : 1;                         		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPlayersOnly : 1;                                 		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDropDetail : 1;                                  		// 0x03B4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bAggressiveLOD : 1;                               		// 0x03B4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bStartup : 1;                                     		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bPathsRebuilt : 1;                                		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bHasPathNodes : 1;                                		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUseConsoleInput : 1;                             		// 0x03B4 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bPlayerCollidesLC : 1;                            		// 0x03B4 (0x0004) [0x0000000000000021] [0x00000800] ( CPF_Edit | CPF_Net )
	unsigned long                                      bLCCollidesLC : 1;                                		// 0x03B4 (0x0004) [0x0000000000000021] [0x00001000] ( CPF_Edit | CPF_Net )
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                 		// 0x03B4 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bNoPathWarnings : 1;                              		// 0x03B4 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bHighPriorityLoading : 1;                         		// 0x03B4 (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      bHighPriorityLoadingLocal : 1;                    		// 0x03B4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                		// 0x03B4 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      m_bEditorUpdateNightLights : 1;                   		// 0x03B4 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	class UBookMark*                                   BookMarks[ 0xA ];                                 		// 0x03B8 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClipPadEntry* >                     ClipPadEntries;                                   		// 0x03E0 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	float                                              TimeDilation;                                     		// 0x03EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DemoPlayTimeDilation;                             		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              TimeSeconds;                                      		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealTimeSeconds;                                  		// 0x03F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AudioTimeSeconds;                                 		// 0x03FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DeltaSeconds;                                     		// 0x0400 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RealDeltaSeconds;                                 		// 0x0404 (0x0004) [0x0000000000000000]              
	float                                              PauseDelay;                                       		// 0x0408 (0x0004) [0x0000000000000000]              
	float                                              RealTimeToUnPause;                                		// 0x040C (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      Pauser;                                           		// 0x0410 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     VisibleGroups;                                    		// 0x0414 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SelectedGroups;                                   		// 0x0420 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      WorldState;                                       		// 0x042C (0x0001) [0x0000000000000000]              
	unsigned char                                      NetMode;                                          		// 0x042D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eDistrictType;                                  		// 0x042E (0x0001) [0x0000000020000001]              ( CPF_Edit | CPF_Deprecated )
	unsigned char                                      m_ePhysCorrectMode;                               		// 0x042F (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eTimeOfDayMode;                                 		// 0x0430 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0434 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  WireframeTexture;                                 		// 0x0438 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  WhiteSquareTexture;                               		// 0x043C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  LargeVertex;                                      		// 0x0440 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  BSPVertex;                                        		// 0x0444 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DeferredExecs;                                    		// 0x0448 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AGameReplicationInfo*                        GRI;                                              		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ComputerName;                                     		// 0x0458 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EngineVersion;                                    		// 0x0464 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MinNetVersion;                                    		// 0x0470 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AGameInfo*                                   Game;                                             		// 0x047C (0x0004) [0x0000000000000000]              
	class UClass*                                      GameInfoClass;                                    		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StallZ;                                           		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldGravityZ;                                    		// 0x0488 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DefaultGravityZ;                                  		// 0x048C (0x0004) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	float                                              GlobalGravityZ;                                   		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPhysicsGravityScaling;                          		// 0x0494 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class ANavigationPoint*                            NavigationPointList;                              		// 0x0498 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AController*                                 ControllerList;                                   		// 0x049C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       PawnList;                                         		// 0x04A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACoverLink*                                  CoverList;                                        		// 0x04A4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MoveRepSize;                                      		// 0x04A8 (0x0004) [0x0000000000000000]              
	TArray< struct FNetViewer >                        ReplicationViewers;                               		// 0x04AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     NextURL;                                          		// 0x04B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              NextSwitchCountdown;                              		// 0x04C4 (0x0004) [0x0000000000000000]              
	int                                                PackedLightAndShadowMapTextureSize;               		// 0x04C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DefaultColorScale;                                		// 0x04CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            GameTypesSupportedOnThisMap;                      		// 0x04D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             PreparingLevelNames;                              		// 0x04E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             CommittedLevelNames;                              		// 0x04F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class USeqAct_CrossFadeMusicTracks*                LastMusicAction;                                  		// 0x04FC (0x0004) [0x0000000000000000]              
	struct FMusicTrackStruct                           LastMusicTrack;                                   		// 0x0500 (0x0024) [0x0000000000000000]              
	struct FString                                     Title;                                            		// 0x0524 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Author;                                           		// 0x0530 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMapInfo*                                    MyMapInfo;                                        		// 0x053C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     EmitterPoolClassPath;                             		// 0x0540 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AEmitterPool*                                MyEmitterPool;                                    		// 0x054C (0x0004) [0x0000000000000000]              
	float                                              MaxPhysicsDeltaTime;                              		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPhysXSceneProperties                       PhysicsProperties;                                		// 0x0554 (0x003C) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< struct FCompartmentRunList >               CompartmentRunFrames;                             		// 0x0590 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                  		// 0x059C (0x0004) [0x0000000000000000]              
	class UPhysicsLODVerticalDestructible*             DestructibleVertical;                             		// 0x05A0 (0x0004) [0x0000000000000000]              
	struct FPhysXVerticalProperties                    VerticalProperties;                               		// 0x05A4 (0x0018) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FEnumeratedName                             m_eDistrict;                                      		// 0x05BC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  m_MiniMapTexture;                                 		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_WorldCentreInCM;                                		// 0x05D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_WorldSizeInCM;                                  		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVolume*                                     m_WorldBounds;                                    		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AVolume* >                           m_aBotSpawnVolumes;                               		// 0x05E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fNightLightOnTime;                              		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fNightLightOffTime;                             		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fNightLightOnTransitionTime;                    		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fNightLightOffTransitionTime;                   		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTODOverride;                                   		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTODRate;                                       		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCachedNTOD;                                    		// 0x0608 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fCachedNightLightLevel;                         		// 0x060C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fPrevCachedNTOD;                                		// 0x0610 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ALight*                                      m_PrimaryLight;                                   		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ALight*                                      m_SkyLight;                                       		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      m_VFXLightCurve;                                  		// 0x061C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	class UcFeatureEmissiveManagerBase*                m_FeatureEmissiveManager;                         		// 0x0638 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UObject*                                     m_WeatherSettings;                                		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_EditorWeatherType;                              		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMap_Mirror                                 m_tJunctionMap;                                   		// 0x0644 (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FBuildingTypeArray >                BuildingTypes;                                    		// 0x0680 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVehicleRouteDetails >              VehicleRouteLookupTable;                          		// 0x068C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nNumberOfBlocks;                                		// 0x0698 (0x0004) [0x0000000000000000]              
	TArray< struct FBlockToBlockLUTEntry >             m_aBlockToBlockLUT;                               		// 0x069C (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nBitsToShiftB2BLUTIndex;                        		// 0x06A8 (0x0004) [0x0000000000000000]              
	TArray< struct FWithinABlockRoutes >               m_aWithinABlockRoutes;                            		// 0x06AC (0x000C) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.WorldInfo" );

		return pClassPointer;
	};

	void DoMemoryTracking ( );
	bool IsPlayingDemo ( );
	bool IsRecordingDemo ( );
	unsigned char GetDetailMode ( );
	struct FString GetMapName ( unsigned long bIncludePrefix );
	void SetMapInfo ( class UMapInfo* NewMapInfo );
	class UMapInfo* GetMapInfo ( );
	void SetSeamlessTravelMidpointPause ( unsigned long bNowPaused );
	bool IsInSeamlessTravel ( );
	void SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid );
	void SetWorldState ( unsigned char eNewState );
	void OnToggle ( class USeqAct_Toggle* Action );
	void CommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent );
	bool IsMapChangeReady ( );
	bool IsPreparingMapChange ( );
	void PrepareMapChange ( TArray< struct FName >* LevelNames );
	void NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents );
	void AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P );
	void AllControllers ( class UClass* BaseClass, class AController** C );
	void NavigationPointCheck ( struct FVector Point, struct FVector Extent, TArray< class ANavigationPoint* >* Navs, TArray< class UReachSpec* >* Specs );
	void RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N );
	void AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N );
	void Reset ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P );
	void eventServerTravel ( struct FString URL, unsigned long bAbsolute );
	class UClass* GetGameClass ( );
	struct FString GetAddressURL ( );
	void VerifyNavList ( );
	void ForceGarbageCollection ( unsigned long bFullPurge );
	bool IsConsoleBuild ( unsigned char ConsoleType );
	bool IsDemoBuild ( );
	struct FString GetLocalURL ( );
	void SetLevelRBGravity ( struct FVector NewGrav );
	class USequence* GetGameSequence ( );
	float GetGravityZ ( );
	bool IsServer ( );
};

UClass* AWorldInfo::pClassPointer = NULL;

// Class Engine.AIController
// 0x0018 (0x0334 - 0x031C)
class AAIController : public AController
{
public:
	unsigned long                                      bHunting : 1;                                     		// 0x031C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAdjustFromWalls : 1;                             		// 0x031C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bReverseScriptedRoute : 1;                        		// 0x031C (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              Skill;                                            		// 0x0320 (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedMoveTarget;                               		// 0x0324 (0x0004) [0x0000000000000000]              
	class ARoute*                                      ScriptedRoute;                                    		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                ScriptedRouteIndex;                               		// 0x032C (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedFocus;                                    		// 0x0330 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AIController" );

		return pClassPointer;
	};

	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool ShouldAutoReload ( );
	bool ShouldRefire ( );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void GetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSetTeam ( int inTeamIdx );
	bool PriorityObjective ( );
	struct FName GetOrders ( );
	class AActor* GetOrderObject ( );
	void SetOrders ( struct FName NewOrders, class AController* OrderGiver );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void Reset ( );
	void eventPreBeginPlay ( );
};

UClass* AAIController::pClassPointer = NULL;

// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CoverGroupRenderingComponent" );

		return pClassPointer;
	};

};

UClass* UCoverGroupRenderingComponent::pClassPointer = NULL;

// Class Engine.CoverMeshComponent
// 0x0024 (0x026C - 0x0248)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	TArray< struct FCoverMeshes >                      Meshes;                                           		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     LocationOffset;                                   		// 0x0254 (0x000C) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOn;                                     		// 0x0260 (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOff;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 Disabled;                                         		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CoverMeshComponent" );

		return pClassPointer;
	};

};

UClass* UCoverMeshComponent::pClassPointer = NULL;

// Class Engine.PathGoalEvaluator
// 0x000C (0x004C - 0x0040)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                    		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            GeneratedGoal;                                    		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxPathVisits;                                    		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PathGoalEvaluator" );

		return pClassPointer;
	};

};

UClass* UPathGoalEvaluator::pClassPointer = NULL;

// Class Engine.Goal_AtActor
// 0x000C (0x0058 - 0x004C)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Goal_AtActor" );

		return pClassPointer;
	};

	bool AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial );
};

UClass* UGoal_AtActor::pClassPointer = NULL;

// Class Engine.PathConstraint
// 0x0004 (0x0044 - 0x0040)
class UPathConstraint : public UObject
{
public:
	class UPathConstraint*                             NextConstraint;                                   		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PathConstraint" );

		return pClassPointer;
	};

};

UClass* UPathConstraint::pClassPointer = NULL;

// Class Engine.Path_AlongLine
// 0x000C (0x0050 - 0x0044)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x0044 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Path_AlongLine" );

		return pClassPointer;
	};

	bool AlongLine ( class APawn* P, struct FVector Dir );
};

UClass* UPath_AlongLine::pClassPointer = NULL;

// Class Engine.Path_TowardGoal
// 0x0004 (0x0048 - 0x0044)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Path_TowardGoal" );

		return pClassPointer;
	};

	bool TowardGoal ( class APawn* P, class AActor* Goal );
};

UClass* UPath_TowardGoal::pClassPointer = NULL;

// Class Engine.Path_WithinTraversalDist
// 0x000C (0x0050 - 0x0044)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Path_WithinTraversalDist" );

		return pClassPointer;
	};

	bool DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft );
};

UClass* UPath_WithinTraversalDist::pClassPointer = NULL;

// Class Engine.PathRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PathRenderingComponent" );

		return pClassPointer;
	};

};

UClass* UPathRenderingComponent::pClassPointer = NULL;

// Class Engine.RouteRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RouteRenderingComponent" );

		return pClassPointer;
	};

};

UClass* URouteRenderingComponent::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm
// 0x0012 (0x0052 - 0x0040)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNeedsSkeleton : 1;                               		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      TranslationCompressionFormat;                     		// 0x0050 (0x0001) [0x0000000000000000]              
	unsigned char                                      RotationCompressionFormat;                        		// 0x0051 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimationCompressionAlgorithm" );

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0000 (0x0052 - 0x0052)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly" );

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_BitwiseCompressOnly::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x000A (0x005C - 0x0052)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	int                                                MinKeys;                                          		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAtSecondKey : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey" );

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RemoveEverySecondKey::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveKeys
// 0x001A (0x006C - 0x0052)
class UAnimationCompressionAlgorithm_RemoveKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned long                                      bRemoveTrivialKeys : 1;                           		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRemoveRotationOnly : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipKeys : 1;                                    		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              MaxPosDiff;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinKeys;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DivideNumberOfKeysBy;                             		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StartAtKey;                                       		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimationCompressionAlgorithm_RemoveKeys" );

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RemoveKeys::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x000A (0x005C - 0x0052)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys" );

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RemoveTrivialKeys::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0000 (0x0052 - 0x0052)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimationCompressionAlgorithm_RevertToRaw" );

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RevertToRaw::pClassPointer = NULL;

// Class Engine.AnimNode
// 0x0088 (0x00C8 - 0x0040)
class UAnimNode : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x0040 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UAnimNodeBlendBase* >                ParentNodes;                                      		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       NodeName;                                         		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBoneAtom >                         CachedBoneAtoms;                                  		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBoneAtom                                   CachedRootMotionDelta;                            		// 0x0064 (0x0030) [0x0000000000002000]              ( CPF_Transient )
	int                                                bCachedHasRootMotion;                             		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRelevant : 1;                                    		// 0x0098 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bJustBecameRelevant : 1;                          		// 0x0098 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipTickWhenZeroWeight : 1;                      		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTickDuringPausedAnims : 1;                       		// 0x0098 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                NodeTickTag;                                      		// 0x009C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NodeCachedAtomsTag;                               		// 0x00A0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeTotalWeight;                                  		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TotalWeightAccumulator;                           		// 0x00A8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                DrawWidth;                                        		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                NodePosY;                                         		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                InstanceVersionNumber;                            		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SearchTag;                                        		// 0x00C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNode" );

		return pClassPointer;
	};

	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
};

UClass* UAnimNode::pClassPointer = NULL;

// Class Engine.AnimNodeBlendBase
// 0x0010 (0x00D8 - 0x00C8)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray< struct FAnimBlendChild >                   Children;                                         		// 0x00C8 (0x000C) [0x0000000004400048]              ( CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bFixNumChildren : 1;                              		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCauseParentAnimEnd : 1;                          		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseParentLoopingAnimEnd : 1;                   		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendBase" );

		return pClassPointer;
	};

	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
};

UClass* UAnimNodeBlendBase::pClassPointer = NULL;

// Class Engine.AnimNodeAimOffset
// 0x0048 (0x0120 - 0x00D8)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceAimDir : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBakeFromAnimations : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                PassThroughAtOrAboveLOD;                          		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForcedAimDir;                                     		// 0x00F0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      BoneToAimCpnt;                                    		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNodeAimOffset*                          TemplateNode;                                     		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAimOffsetProfile >                 Profiles;                                         		// 0x0110 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                CurrentProfileIndex;                              		// 0x011C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeAimOffset" );

		return pClassPointer;
	};

	void SetActiveProfileByIndex ( int ProfileIndex );
	void SetActiveProfileByName ( struct FName ProfileName );
};

UClass* UAnimNodeAimOffset::pClassPointer = NULL;

// Class Engine.AnimNodeBlend
// 0x000C (0x00E4 - 0x00D8)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                     		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              Child2WeightTarget;                               		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlend" );

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

UClass* UAnimNodeBlend::pClassPointer = NULL;

// Class Engine.AnimNodeBlendList
// 0x001C (0x00F4 - 0x00D8)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	TArray< float >                                    TargetWeight;                                     		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BlendTimeToGo;                                    		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayActiveChild : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SliderPosition;                                   		// 0x00F0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendList" );

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

UClass* UAnimNodeBlendList::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByBase
// 0x0018 (0x010C - 0x00F4)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	unsigned char                                      Type;                                             		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ActorTag;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ActorClass;                                       		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CachedBase;                                       		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendByBase" );

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendByBase::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByPhysics
// 0x0000 (0x00F4 - 0x00F4)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendByPhysics" );

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendByPhysics::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByPosture
// 0x0000 (0x00F4 - 0x00F4)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendByPosture" );

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendByPosture::pClassPointer = NULL;

// Class Engine.AnimNodeBlendBySpeed
// 0x0024 (0x0118 - 0x00F4)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                            		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                LastChannel;                                      		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              BlendUpTime;                                      		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownPerc;                                    		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Constraints;                                      		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUseAcceleration : 1;                             		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendBySpeed" );

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendBySpeed::pClassPointer = NULL;

// Class Engine.AnimNodeBlendDirectional
// 0x0010 (0x00E8 - 0x00D8)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardBias;                                      		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendDirectional" );

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendDirectional::pClassPointer = NULL;

// Class Engine.AnimNodeBlendMultiBone
// 0x0018 (0x00F0 - 0x00D8)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	TArray< struct FChildBoneBlendInfo >               BlendTargetList;                                  		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            SourceRequiredBones;                              		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendMultiBone" );

		return pClassPointer;
	};

	void SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease );
};

UClass* UAnimNodeBlendMultiBone::pClassPointer = NULL;

// Class Engine.AnimNodeBlendPerBone
// 0x0028 (0x010C - 0x00E4)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x00E4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             BranchStartBoneName;                              		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    Child2PerBoneWeight;                              		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            LocalToCompReqBones;                              		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeBlendPerBone" );

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendPerBone::pClassPointer = NULL;

// Class Engine.AnimNodeCrossfader
// 0x0010 (0x00F4 - 0x00E4)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                               		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontBlendOutOneShot : 1;                         		// 0x00EC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              PendingBlendOutTimeOneShot;                       		// 0x00F0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeCrossfader" );

		return pClassPointer;
	};

	class UAnimNodeSequence* GetActiveChild ( );
	struct FName GetAnimName ( );
	void BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate );
	void PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate );
};

UClass* UAnimNodeCrossfader::pClassPointer = NULL;

// Class Engine.AnimNodeMirror
// 0x0004 (0x00DC - 0x00D8)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bEnableMirroring : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeMirror" );

		return pClassPointer;
	};

};

UClass* UAnimNodeMirror::pClassPointer = NULL;

// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x00EC - 0x00E4)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CustomPendingBlendOutTime;                        		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodePlayCustomAnim" );

		return pClassPointer;
	};

	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	void PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
};

UClass* UAnimNodePlayCustomAnim::pClassPointer = NULL;

// Class Engine.AnimNodeRandom
// 0x0014 (0x0108 - 0x00F4)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray< struct FRandomAnimInfo >                   RandomInfo;                                       		// 0x00F4 (0x000C) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	class UAnimNodeSequence*                           PlayingSeqNode;                                   		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingChildIndex;                                		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeRandom" );

		return pClassPointer;
	};

};

UClass* UAnimNodeRandom::pClassPointer = NULL;

// Class Engine.AnimNodeScalePlayRate
// 0x0004 (0x00DC - 0x00D8)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                     		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeScalePlayRate" );

		return pClassPointer;
	};

};

UClass* UAnimNodeScalePlayRate::pClassPointer = NULL;

// Class Engine.AnimNodeScaleRateBySpeed
// 0x0004 (0x00E0 - 0x00DC)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                        		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeScaleRateBySpeed" );

		return pClassPointer;
	};

};

UClass* UAnimNodeScaleRateBySpeed::pClassPointer = NULL;

// Class Engine.AnimNodeSequence
// 0x004E (0x0116 - 0x00C8)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                      		// 0x00C8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Rate;                                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlaying : 1;                                     		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimEnd : 1;                           		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimPlay : 1;                          		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCauseParentAnimEnd : 1;                          		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCauseParentLoopingAnimEnd : 1;                   		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bZeroRootRotation : 1;                            		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bZeroRootTranslation : 1;                         		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNoNotifies : 1;                                  		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                  		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIsIssuingNotifies : 1;                           		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bForceAlwaysSlave : 1;                            		// 0x00D4 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bForceAlwaysMaster : 1;                           		// 0x00D4 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bSynchronize : 1;                                 		// 0x00D4 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowTimeLineSlider : 1;                          		// 0x00D4 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bLoopCameraAnim : 1;                              		// 0x00D4 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;            		// 0x00D4 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bRootBoneLockFinalFrame : 1;                      		// 0x00D4 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bUseRootMotionThreshold : 1;                      		// 0x00D4 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PreviousTime;                                     		// 0x00DC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimSequence*                               AnimSeq;                                          		// 0x00E0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimLinkupIndex;                                  		// 0x00E4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NotifyWeightThreshold;                            		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SynchGroupName;                                   		// 0x00EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SynchPosOffset;                                   		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DebugTrack;                                       		// 0x00F8 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DebugCarat;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	class UCameraAnim*                                 CameraAnim;                                       		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                         		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraAnimScale;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimPlayRate;                               		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneOption[ 0x3 ];                            		// 0x0110 (0x0003) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootRotationOption[ 0x3 ];                        		// 0x0113 (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeSequence" );

		return pClassPointer;
	};

	float GetTimeLeft ( );
	float GetAnimPlaybackLength ( );
	float GetGlobalPlayRate ( );
	float FindNormalizedPositionFromGroupRelativePosition ( float GroupRelativePosition );
	float GetNormalizedPosition ( );
	void SetPosition ( float NewTime, unsigned long bFireNotifies );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void SetAnim ( struct FName Sequence );
};

UClass* UAnimNodeSequence::pClassPointer = NULL;

// Class Engine.AnimNodeSequenceBlendBase
// 0x000E (0x0124 - 0x0116)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	TArray< struct FAnimBlendInfo >                    Anims;                                            		// 0x0118 (0x000C) [0x0000000004400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeSequenceBlendBase" );

		return pClassPointer;
	};

};

UClass* UAnimNodeSequenceBlendBase::pClassPointer = NULL;

// Class Engine.AnimNodeSequenceBlendByAim
// 0x0068 (0x018C - 0x0124)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   HorizontalRange;                                  		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   VerticalRange;                                    		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LU;                                      		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LC;                                      		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LD;                                      		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CU;                                      		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CC;                                      		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CD;                                      		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RU;                                      		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RC;                                      		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RD;                                      		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeSequenceBlendByAim" );

		return pClassPointer;
	};

};

UClass* UAnimNodeSequenceBlendByAim::pClassPointer = NULL;

// Class Engine.AnimNodeSlot
// 0x0024 (0x00FC - 0x00D8)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bEarlyAnimEndNotify : 1;                          		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              PendingBlendOutTime;                              		// 0x00DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CustomChildIndex;                                 		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TargetChildIndex;                                 		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< float >                                    TargetWeight;                                     		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BlendTimeToGo;                                    		// 0x00F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x00F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeSlot" );

		return pClassPointer;
	};

	void AddToSynchGroup ( struct FName GroupName );
	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	struct FName GetPlayedAnimation ( );
	void PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
};

UClass* UAnimNodeSlot::pClassPointer = NULL;

// Class Engine.AnimNodeSynch
// 0x000C (0x00E4 - 0x00D8)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	TArray< struct FSynchGroup >                       Groups;                                           		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNodeSynch" );

		return pClassPointer;
	};

	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetRelativePosition ( struct FName GroupName );
	void ForceRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetMasterNodeOfGroup ( struct FName GroupName );
	void RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
	void AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
};

UClass* UAnimNodeSynch::pClassPointer = NULL;

// Class Engine.AnimNotify
// 0x0000 (0x0040 - 0x0040)
class UAnimNotify : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNotify" );

		return pClassPointer;
	};

};

UClass* UAnimNotify::pClassPointer = NULL;

// Class Engine.AnimNotify_Footstep
// 0x0004 (0x0044 - 0x0040)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNotify_Footstep" );

		return pClassPointer;
	};

};

UClass* UAnimNotify_Footstep::pClassPointer = NULL;

// Class Engine.AnimNotify_Script
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNotify_Script" );

		return pClassPointer;
	};

};

UClass* UAnimNotify_Script::pClassPointer = NULL;

// Class Engine.AnimNotify_Scripted
// 0x0000 (0x0040 - 0x0040)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNotify_Scripted" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_Scripted::pClassPointer = NULL;

// Class Engine.AnimNotify_Sound
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNotify_Sound" );

		return pClassPointer;
	};

};

UClass* UAnimNotify_Sound::pClassPointer = NULL;

// Class Engine.AnimSequence
// 0x0090 (0x00D0 - 0x0040)
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                     		// 0x0040 (0x0008) [0x0000000000000000]              
	TArray< struct FAnimNotifyEvent >                  Notifies;                                         		// 0x0048 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	float                                              SequenceLength;                                   		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                NumFrames;                                        		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              RateScale;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoLoopingInterpolation : 1;                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FRawAnimSequenceTrack >             RawAnimData;                                      		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTranslationTrack >                 TranslationData;                                  		// 0x0070 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRotationTrack >                    RotationData;                                     		// 0x007C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UAnimationCompressionAlgorithm*              CompressionScheme;                                		// 0x0088 (0x0004) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	unsigned char                                      TranslationCompressionFormat;                     		// 0x008C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RotationCompressionFormat;                        		// 0x008D (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      CompressedTrackOffsets;                           		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            CompressedByteStream;                             		// 0x009C (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< unsigned long >                            TrackIsMissing;                                   		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       UnityCompressionBase;                             		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSequence*                               m_UnityCompressionBaseSequence;                   		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcBodySectionDescriptor*                     UnityCompressionBodySection;                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      m_anUnityCompressionTrackToBaseTrackLinkup;       		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimSequence" );

		return pClassPointer;
	};

};

UClass* UAnimSequence::pClassPointer = NULL;

// Class Engine.AnimSet
// 0x0055 (0x0095 - 0x0040)
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FName >                             TrackBoneNames;                                   		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSequence* >                     Sequences;                                        		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAnimSetMeshLinkup >                LinkupCache;                                      		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             UseTranslationBoneNames;                          		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       PreviewSkelMeshName;                              		// 0x0074 (0x0008) [0x0000000000000000]              
	TArray< struct FAimOffsetProfile >                 AimOffsetProfiles;                                		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          UnityCompressionBaseAnimSets;                     		// 0x0088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      AnimationCategory;                                		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimSet" );

		return pClassPointer;
	};

};

UClass* UAnimSet::pClassPointer = NULL;

// Class Engine.AnimTree
// 0x00B4 (0x018C - 0x00D8)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	TArray< struct FAnimGroup >                        AnimGroups;                                       		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             PrioritizedSkelBranches;                          		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            PriorityList;                                     		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcAnimConfigureNode*                         RootConfigureNode;                                		// 0x00FC (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UcAnimCameraNode*                            RootCameraNode;                                   		// 0x0100 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMorphNodeBase* >                    RootMorphNodes;                                   		// 0x0104 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FSkelControlListHead >              SkelControlLists;                                 		// 0x0110 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    pInstanceData;                                    		// 0x011C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ConfigureConnDrawY;                               		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                CameraConnDrawY;                                  		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                MorphConnDrawY;                                   		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      bBeingEdited : 1;                                 		// 0x012C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              PreviewPlayRate;                                  		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               PreviewSkelMesh;                                  		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SocketSkelMesh;                                   		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 SocketStaticMesh;                                 		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UcPlayerAnimSetup*                           PreviewAnimSetup;                                 		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          PreviewAnimSets;                                  		// 0x014C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMorphTargetSet* >                   PreviewMorphSets;                                 		// 0x0158 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     PreviewCamPos;                                    		// 0x0164 (0x000C) [0x0000000000000000]              
	struct FRotator                                    PreviewCamRot;                                    		// 0x0170 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviewFloorPos;                                  		// 0x017C (0x000C) [0x0000000000000000]              
	int                                                PreviewFloorYaw;                                  		// 0x0188 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimTree" );

		return pClassPointer;
	};

	int GetGroupIndex ( struct FName GroupName );
	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetGroupRelativePosition ( struct FName GroupName );
	void ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetGroupNotifyMaster ( struct FName GroupName );
	class UAnimNodeSequence* GetGroupSynchMaster ( struct FName GroupName );
	bool SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
	class UcAnimConfigureNode* FindConfigureNode ( struct FName sNodeName );
};

UClass* UAnimTree::pClassPointer = NULL;

// Class Engine.cAnimationCompressionAlgorithm_RemoveUnityCompressedTracks
// 0x0000 (0x0052 - 0x0052)
class UcAnimationCompressionAlgorithm_RemoveUnityCompressedTracks : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cAnimationCompressionAlgorithm_RemoveUnityCompressedTracks" );

		return pClassPointer;
	};

};

UClass* UcAnimationCompressionAlgorithm_RemoveUnityCompressedTracks::pClassPointer = NULL;

// Class Engine.cAnimCameraNode
// 0x0018 (0x0058 - 0x0040)
class UcAnimCameraNode : public UObject
{
public:
	struct FName                                       NodeName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                AnimTreeLinkIndex;                                		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                NodePositionX;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                NodePositionY;                                    		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cAnimCameraNode" );

		return pClassPointer;
	};

	bool IsActive ( class UAnimTree* AnimTree );
	bool LinkIsValid ( class UAnimTree* AnimTree );
};

UClass* UcAnimCameraNode::pClassPointer = NULL;

// Class Engine.cAnimConfigureNode
// 0x0018 (0x0058 - 0x0040)
class UcAnimConfigureNode : public UObject
{
public:
	struct FName                                       NodeName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nAnimTreeLinkIndex;                             		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nNodePosX;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nNodePosY;                                      		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_nDrawWidth;                                     		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cAnimConfigureNode" );

		return pClassPointer;
	};

	void SetDecision ( class UAnimTree* pAnimTree, int nDecision );
	int RetDecision ( class UAnimTree* pAnimTree );
	bool IsActive ( class UAnimTree* pAnimTree );
	bool LinkIsValid ( class UAnimTree* pAnimTree );
};

UClass* UcAnimConfigureNode::pClassPointer = NULL;

// Class Engine.cAnimNotifyLogical
// 0x0000 (0x0040 - 0x0040)
class UcAnimNotifyLogical : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cAnimNotifyLogical" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyLogical::pClassPointer = NULL;

// Class Engine.cBodySectionDescriptor
// 0x0028 (0x0068 - 0x0040)
class UcBodySectionDescriptor : public UObject
{
public:
	class USkeletalMesh*                               m_SkeletalMesh;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             m_asBranchStartBoneNames;                         		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             m_asIndividualBoneNames;                          		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned long >                            m_abBoneInBodySection;                            		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cBodySectionDescriptor" );

		return pClassPointer;
	};

};

UClass* UcBodySectionDescriptor::pClassPointer = NULL;

// Class Engine.cPlayerAnimSetup
// 0x001C (0x005C - 0x0040)
class UcPlayerAnimSetup : public UObject
{
public:
	class UAnimTree*                                   AnimTree;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          FallbackAnimSets;                                 		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cPlayerAnimSetup" );

		return pClassPointer;
	};

};

UClass* UcPlayerAnimSetup::pClassPointer = NULL;

// Class Engine.MorphNodeBase
// 0x0024 (0x0064 - 0x0040)
class UMorphNodeBase : public UObject
{
public:
	struct FName                                       NodeName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawSlider : 1;                                  		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x004C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                NodePosX;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                NodePosY;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MorphNodeBase" );

		return pClassPointer;
	};

};

UClass* UMorphNodeBase::pClassPointer = NULL;

// Class Engine.MorphNodePose
// 0x0010 (0x0074 - 0x0064)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                           		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MorphName;                                        		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Weight;                                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MorphNodePose" );

		return pClassPointer;
	};

	void SetMorphTarget ( struct FName MorphTargetName );
};

UClass* UMorphNodePose::pClassPointer = NULL;

// Class Engine.MorphNodeWeightBase
// 0x000C (0x0070 - 0x0064)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray< struct FMorphNodeConn >                    NodeConns;                                        		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MorphNodeWeightBase" );

		return pClassPointer;
	};

};

UClass* UMorphNodeWeightBase::pClassPointer = NULL;

// Class Engine.MorphNodeWeight
// 0x0004 (0x0074 - 0x0070)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MorphNodeWeight" );

		return pClassPointer;
	};

	void SetNodeWeight ( float NewWeight );
};

UClass* UMorphNodeWeight::pClassPointer = NULL;

// Class Engine.MorphTarget
// 0x0020 (0x0060 - 0x0040)
class UMorphTarget : public UObject
{
public:
	TArray< int >                                      MorphLODModels;                                   		// 0x0040 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      m_bStreamable : 1;                                		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_iHighestResidentLOD;                            		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_iHighestRequestedLOD;                           		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bRequestedJustChanged : 1;                      		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_iTotalLODs;                                     		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MorphTarget" );

		return pClassPointer;
	};

};

UClass* UMorphTarget::pClassPointer = NULL;

// Class Engine.MorphTargetSet
// 0x0010 (0x0050 - 0x0040)
class UMorphTargetSet : public UObject
{
public:
	TArray< class UMorphTarget* >                      Targets;                                          		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMesh*                               BaseSkelMesh;                                     		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MorphTargetSet" );

		return pClassPointer;
	};

	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
};

UClass* UMorphTargetSet::pClassPointer = NULL;

// Class Engine.MorphWeightSequence
// 0x0000 (0x0040 - 0x0040)
class UMorphWeightSequence : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MorphWeightSequence" );

		return pClassPointer;
	};

};

UClass* UMorphWeightSequence::pClassPointer = NULL;

// Class Engine.SkelControlBase
// 0x0058 (0x0098 - 0x0040)
class USkelControlBase : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x0040 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       ControlName;                                      		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ControlStrength;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrengthTarget;                                   		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitializedCachedNodeList : 1;                   		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPropagateSetActive : 1;                          		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreWhenNotRendered : 1;                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableEaseInOut : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	TArray< struct FName >                             StrengthAnimNodeNameList;                         		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimNode* >                         CachedNodeList;                                   		// 0x0070 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              BoneScale;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ControlTickTag;                                   		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                IgnoreAtOrAboveLOD;                               		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlBase*                            NextControl;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                ControlPosX;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                ControlPosY;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlBase" );

		return pClassPointer;
	};

	void SetSkelControlStrength ( float NewStrength, float InBlendTime );
	void SetSkelControlActive ( unsigned long bInActive );
};

UClass* USkelControlBase::pClassPointer = NULL;

// Class Engine.SkelControlLimb
// 0x0030 (0x00C8 - 0x0098)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                 		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointTargetLocationSpace;                         		// 0x00A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x00A6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointAxis;                                        		// 0x00A7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JointTargetLocation;                              		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JointTargetSpaceBoneName;                         		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertJointAxis : 1;                             		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bMaintainEffectorRelRot : 1;                      		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;               		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlLimb" );

		return pClassPointer;
	};

};

UClass* USkelControlLimb::pClassPointer = NULL;

// Class Engine.SkelControlFootPlacement
// 0x0024 (0x00EC - 0x00C8)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FootUpAxis;                                       		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    FootRotOffset;                                    		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertFootUpAxis : 1;                            		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientFootToGround : 1;                          		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                   		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              MaxUpAdjustment;                                  		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDownAdjustment;                                		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjust;                              		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlFootPlacement" );

		return pClassPointer;
	};

};

UClass* USkelControlFootPlacement::pClassPointer = NULL;

// Class Engine.SkelControlLookAt
// 0x0070 (0x0108 - 0x0098)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetLocationSpace;                              		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LookAtAxis;                                       		// 0x00A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UpAxis;                                           		// 0x00A6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AllowRotationSpace;                               		// 0x00A7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetSpaceBoneName;                              		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertLookAtAxis : 1;                            		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDefineUpAxis : 1;                                		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInvertUpAxis : 1;                                		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLimit : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLimitBasedOnRefPose : 1;                         		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNotifyBeyondLimit : 1;                           		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowLimit : 1;                                   		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowRotationX : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowRotationY : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAllowRotationZ : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              TargetLocationInterpSpeed;                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DesiredTargetLocation;                            		// 0x00B8 (0x000C) [0x0000000000000000]              
	float                                              MaxAngle;                                         		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeadZoneAngle;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AllowRotationOtherBoneName;                       		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtAlpha;                                      		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaTarget;                                		// 0x00D8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaBlendTimeToGo;                         		// 0x00DC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LimitLookDir;                                     		// 0x00E0 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseLookDir;                                      		// 0x00EC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseBonePos;                                      		// 0x00F8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastCalcTime;                                     		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlLookAt" );

		return pClassPointer;
	};

	bool CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst );
	void SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime );
	void InterpolateTargetLocation ( float DeltaTime );
	void SetTargetLocation ( struct FVector NewTargetLocation );
};

UClass* USkelControlLookAt::pClassPointer = NULL;

// Class Engine.SkelControlSingleBone
// 0x0030 (0x00C8 - 0x0098)
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                            		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAddTranslation : 1;                              		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyRotation : 1;                               		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAddRotation : 1;                                 		// 0x0098 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     BoneTranslation;                                  		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneTranslationSpace;                             		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotationSpace;                                		// 0x00A9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TranslationSpaceBoneName;                         		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    BoneRotation;                                     		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RotationSpaceBoneName;                            		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlSingleBone" );

		return pClassPointer;
	};

};

UClass* USkelControlSingleBone::pClassPointer = NULL;

// Class Engine.SkelControlSpline
// 0x0014 (0x00AC - 0x0098)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SplineBoneAxis;                                   		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotMode;                                      		// 0x009D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertSplineBoneAxis : 1;                        		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              EndSplineTension;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartSplineTension;                               		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlSpline" );

		return pClassPointer;
	};

};

UClass* USkelControlSpline::pClassPointer = NULL;

// Class Engine.SkelControlTrail
// 0x0024 (0x00BC - 0x0098)
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChainBoneAxis;                                    		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertChainBoneAxis : 1;                         		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLimitStretch : 1;                                		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHadValidStrength : 1;                            		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              TrailRelaxation;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StretchLimit;                                     		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThisTimstep;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           TrailBoneLocations;                               		// 0x00B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlTrail" );

		return pClassPointer;
	};

};

UClass* USkelControlTrail::pClassPointer = NULL;

// Class Engine.SkelControlWheel
// 0x0018 (0x00E0 - 0x00C8)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x00C8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WheelMaxRenderDisplacement;                       		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRoll;                                        		// 0x00D0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      WheelRollAxis;                                    		// 0x00D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WheelSteeringAxis;                                		// 0x00D5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSteering;                                    		// 0x00D8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkelControlWheel" );

		return pClassPointer;
	};

};

UClass* USkelControlWheel::pClassPointer = NULL;

// Class Engine.SkeletalMeshActor
// 0x0014 (0x0250 - 0x023C)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0240 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0244 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x0248 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x024C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkeletalMeshActor" );

		return pClassPointer;
	};

	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventOnSetMaterial ( class USeqAct_SetMaterial* Action );
	void eventOnSetSkeletalMesh ( class USeqAct_SetSkeletalMesh* Action );
	bool IsActorPlayingFaceFXAnim ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName );
	void eventFinishAnimControl ( );
	void eventSetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ASkeletalMeshActor::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorMAT
// 0x000C (0x025C - 0x0250)
class ASkeletalMeshActorMAT : public ASkeletalMeshActor
{
public:
	TArray< class UAnimNodeSlot* >                     SlotNodes;                                        		// 0x0250 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkeletalMeshActorMAT" );

		return pClassPointer;
	};

	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventFinishAnimControl ( );
	void eventSetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_FinishAnimControl ( );
	void MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void MAT_BeginAnimControl ( TArray< class UAnimSet* > InAnimSets );
};

UClass* ASkeletalMeshActorMAT::pClassPointer = NULL;

// Class Engine.ActorFactoryDecal
// 0x0004 (0x006C - 0x0068)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryDecal" );

		return pClassPointer;
	};

};

UClass* UActorFactoryDecal::pClassPointer = NULL;

// Class Engine.DecalActor
// 0x0004 (0x0240 - 0x023C)
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                            		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DecalActor" );

		return pClassPointer;
	};

};

UClass* ADecalActor::pClassPointer = NULL;

// Class Engine.DecalComponent
// 0x00F0 (0x02C8 - 0x01D8)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Width;                                            		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileX;                                            		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileY;                                            		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetX;                                          		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetY;                                          		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalRotation;                                    		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FieldOfView;                                      		// 0x01F8 (0x0004) [0x0000000000000000]              
	float                                              NearPlane;                                        		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Location;                                         		// 0x0204 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Orientation;                                      		// 0x0210 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitLocation;                                      		// 0x021C (0x000C) [0x0000000000000000]              
	struct FVector                                     HitNormal;                                        		// 0x0228 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitTangent;                                       		// 0x0234 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitBinormal;                                      		// 0x0240 (0x000C) [0x0000000000000000]              
	unsigned long                                      bNoClip : 1;                                      		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStaticDecal : 1;                                 		// 0x024C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bProjectOnBackfaces : 1;                          		// 0x024C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bProjectOnHidden : 1;                             		// 0x024C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bProjectOnBSP : 1;                                		// 0x024C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bProjectOnStaticMeshes : 1;                       		// 0x024C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x024C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x024C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bFlipBackfaceDirection : 1;                       		// 0x024C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bHasBeenAttached : 1;                             		// 0x024C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	class UPrimitiveComponent*                         HitComponent;                                     		// 0x0250 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       HitBone;                                          		// 0x0254 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitNodeIndex;                                     		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitLevelIndex;                                    		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      HitNodeIndices;                                   		// 0x0264 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDecalReceiver >                    DecalReceivers;                                   		// 0x0270 (0x000C) [0x0000000001602003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPointer >                          StaticReceivers;                                  		// 0x027C (0x000C) [0x0000000001203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0288 (0x0004) [0x0000000000203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPlane >                            Planes;                                           		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              DepthBias;                                        		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeScaleDepthBias;                              		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SortOrder;                                        		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackfaceAngle;                                    		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FilterMode;                                       		// 0x02A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Filter;                                           		// 0x02AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UPrimitiveComponent* >               ReceiverImages;                                   		// 0x02B8 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    m_State;                                          		// 0x02C4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DecalComponent" );

		return pClassPointer;
	};

	void ResetToDefaults ( );
};

UClass* UDecalComponent::pClassPointer = NULL;

// Class Engine.DecalMaterial
// 0x0000 (0x02D8 - 0x02D8)
class UDecalMaterial : public UMaterial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DecalMaterial" );

		return pClassPointer;
	};

};

UClass* UDecalMaterial::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeConstantDensityInfo
// 0x0004 (0x006C - 0x0068)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryFogVolumeConstantDensityInfo" );

		return pClassPointer;
	};

};

UClass* UActorFactoryFogVolumeConstantDensityInfo::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo
// 0x0004 (0x006C - 0x0068)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo" );

		return pClassPointer;
	};

};

UClass* UActorFactoryFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo
// 0x0004 (0x006C - 0x0068)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactoryFogVolumeSphericalDensityInfo" );

		return pClassPointer;
	};

};

UClass* UActorFactoryFogVolumeSphericalDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeDensityComponent
// 0x003F (0x0098 - 0x0059)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          FogMaterial;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                         		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0064 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectsTranslucency : 1;                         		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FLinearColor                                SimpleLightColor;                                 		// 0x0068 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ApproxFogLightColor;                              		// 0x0078 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartDistance;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            FogVolumeActors;                                  		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeDensityComponent" );

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};

UClass* UFogVolumeDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeConeDensityComponent
// 0x0028 (0x00C0 - 0x0098)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeVertex;                                       		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeAxis;                                         		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeMaxAngle;                                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewCone;                                      		// 0x00BC (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeConeDensityComponent" );

		return pClassPointer;
	};

};

UClass* UFogVolumeConeDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeDensityInfo
// 0x000C (0x0248 - 0x023C)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                 		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        AutomaticMeshComponent;                           		// 0x0240 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0244 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeDensityInfo" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AFogVolumeDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x0248 - 0x0248)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeConeDensityInfo" );

		return pClassPointer;
	};

};

UClass* AFogVolumeConeDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x009C - 0x0098)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeConstantDensityComponent" );

		return pClassPointer;
	};

};

UClass* UFogVolumeConstantDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x0248 - 0x0248)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeConstantDensityInfo" );

		return pClassPointer;
	};

};

UClass* AFogVolumeConstantDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0018 (0x00B0 - 0x0098)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x009C (0x0004) MISSED OFFSET
	struct FPlane                                      HalfspacePlane;                                   		// 0x00A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeLinearHalfspaceDensityComponent" );

		return pClassPointer;
	};

};

UClass* UFogVolumeLinearHalfspaceDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0248 - 0x0248)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeLinearHalfspaceDensityInfo" );

		return pClassPointer;
	};

};

UClass* AFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeSphericalDensityComponent
// 0x0018 (0x00B0 - 0x0098)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SphereCenter;                                     		// 0x009C (0x000C) [0x0000000000000000]              
	float                                              SphereRadius;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                              		// 0x00AC (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeSphericalDensityComponent" );

		return pClassPointer;
	};

};

UClass* UFogVolumeSphericalDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x0248 - 0x0248)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FogVolumeSphericalDensityInfo" );

		return pClassPointer;
	};

};

UClass* AFogVolumeSphericalDensityInfo::pClassPointer = NULL;

// Class Engine.InterpFilter
// 0x000C (0x004C - 0x0040)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                          		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpFilter" );

		return pClassPointer;
	};

};

UClass* UInterpFilter::pClassPointer = NULL;

// Class Engine.InterpFilter_Classes
// 0x0004 (0x0050 - 0x004C)
class UInterpFilter_Classes : public UInterpFilter
{
public:
	class UClass*                                      ClassToFilterBy;                                  		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpFilter_Classes" );

		return pClassPointer;
	};

};

UClass* UInterpFilter_Classes::pClassPointer = NULL;

// Class Engine.InterpFilter_Custom
// 0x000C (0x0058 - 0x004C)
class UInterpFilter_Custom : public UInterpFilter
{
public:
	TArray< class UInterpGroup* >                      GroupsToInclude;                                  		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpFilter_Custom" );

		return pClassPointer;
	};

};

UClass* UInterpFilter_Custom::pClassPointer = NULL;

// Class Engine.InterpGroup
// 0x002C (0x006C - 0x0040)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UInterpTrack* >                      InterpTracks;                                     		// 0x0044 (0x000C) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	struct FName                                       GroupName;                                        		// 0x0050 (0x0008) [0x0000000000000000]              
	struct FColor                                      GroupColor;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          GroupAnimSets;                                    		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCollapsed : 1;                                   		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVisible : 1;                                     		// 0x0068 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsFolder : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsParented : 1;                                  		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpGroup" );

		return pClassPointer;
	};

};

UClass* UInterpGroup::pClassPointer = NULL;

// Class Engine.InterpGroupDirector
// 0x0000 (0x006C - 0x006C)
class UInterpGroupDirector : public UInterpGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpGroupDirector" );

		return pClassPointer;
	};

};

UClass* UInterpGroupDirector::pClassPointer = NULL;

// Class Engine.InterpGroupInst
// 0x0018 (0x0058 - 0x0040)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                            		// 0x0040 (0x0004) [0x0000000000000000]              
	class AActor*                                      GroupActor;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	class UUIObject*                                   GroupUIObject;                                    		// 0x0048 (0x0004) [0x0000000000000000]              
	TArray< class UInterpTrackInst* >                  TrackInst;                                        		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpGroupInst" );

		return pClassPointer;
	};

};

UClass* UInterpGroupInst::pClassPointer = NULL;

// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0058 - 0x0058)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpGroupInstDirector" );

		return pClassPointer;
	};

};

UClass* UInterpGroupInstDirector::pClassPointer = NULL;

// Class Engine.InterpTrackFloatBase
// 0x0014 (0x0070 - 0x005C)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                       		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackFloatBase" );

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatBase::pClassPointer = NULL;

// Class Engine.InterpTrackAnimControl
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       SlotName;                                         		// 0x007C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FAnimControlTrackKey >              AnimSeqs;                                         		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackAnimControl" );

		return pClassPointer;
	};

};

UClass* UInterpTrackAnimControl::pClassPointer = NULL;

// Class Engine.InterpTrackVectorBase
// 0x0014 (0x0070 - 0x005C)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                      		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackVectorBase" );

		return pClassPointer;
	};

};

UClass* UInterpTrackVectorBase::pClassPointer = NULL;

// Class Engine.InterpTrackColorProp
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0070 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackColorProp" );

		return pClassPointer;
	};

};

UClass* UInterpTrackColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackColorScale
// 0x0000 (0x0070 - 0x0070)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackColorScale" );

		return pClassPointer;
	};

};

UClass* UInterpTrackColorScale::pClassPointer = NULL;

// Class Engine.InterpTrackDirector
// 0x000C (0x0068 - 0x005C)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray< struct FDirectorTrackCut >                 CutTrack;                                         		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackDirector" );

		return pClassPointer;
	};

};

UClass* UInterpTrackDirector::pClassPointer = NULL;

// Class Engine.InterpTrackEvent
// 0x0010 (0x006C - 0x005C)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray< struct FEventTrackKey >                    EventTrack;                                       		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackEvent" );

		return pClassPointer;
	};

};

UClass* UInterpTrackEvent::pClassPointer = NULL;

// Class Engine.InterpTrackFaceFX
// 0x001C (0x0078 - 0x005C)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray< class UFaceFXAnimSet* >                    FaceFXAnimSets;                                   		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FFaceFXTrackKey >                   FaceFXSeqs;                                       		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFaceFXAsset*                                CachedActorFXAsset;                               		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackFaceFX" );

		return pClassPointer;
	};

};

UClass* UInterpTrackFaceFX::pClassPointer = NULL;

// Class Engine.InterpTrackFade
// 0x0004 (0x0074 - 0x0070)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                 		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackFade" );

		return pClassPointer;
	};

};

UClass* UInterpTrackFade::pClassPointer = NULL;

// Class Engine.InterpTrackFloatMaterialParam
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackFloatMaterialParam" );

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackFloatParticleParam" );

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatParticleParam::pClassPointer = NULL;

// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0070 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackFloatProp" );

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatProp::pClassPointer = NULL;

// Class Engine.InterpTrackInst
// 0x0000 (0x0040 - 0x0040)
class UInterpTrackInst : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInst" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInst::pClassPointer = NULL;

// Class Engine.InterpTrackInstAnimControl
// 0x0004 (0x0044 - 0x0040)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstAnimControl" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstAnimControl::pClassPointer = NULL;

// Class Engine.InterpTrackInstProperty
// 0x0008 (0x0048 - 0x0040)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                           		// 0x0040 (0x0004) [0x0000000000000000]              
	class UObject*                                     PropertyOuterObjectInst;                          		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstProperty" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstProperty::pClassPointer = NULL;

// Class Engine.InterpTrackInstColorProp
// 0x0008 (0x0050 - 0x0048)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FColor                                      ResetColor;                                       		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstColorProp" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0040 - 0x0040)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstColorScale" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstColorScale::pClassPointer = NULL;

// Class Engine.InterpTrackInstDirector
// 0x0004 (0x0044 - 0x0040)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                    		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstDirector" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstDirector::pClassPointer = NULL;

// Class Engine.InterpTrackInstEvent
// 0x0004 (0x0044 - 0x0040)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstEvent" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstEvent::pClassPointer = NULL;

// Class Engine.InterpTrackInstFaceFX
// 0x0008 (0x0048 - 0x0040)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x0040 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              LastUpdatePosition;                               		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstFaceFX" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFaceFX::pClassPointer = NULL;

// Class Engine.InterpTrackInstFade
// 0x0000 (0x0040 - 0x0040)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstFade" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFade::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0004 (0x0044 - 0x0040)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstFloatMaterialParam" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFloatMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x0044 - 0x0040)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstFloatParticleParam" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFloatParticleParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatProp
// 0x0008 (0x0050 - 0x0048)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              ResetFloat;                                       		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstFloatProp" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFloatProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x0040 - 0x0040)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstMorphWeight" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstMorphWeight::pClassPointer = NULL;

// Class Engine.InterpTrackInstMove
// 0x0070 (0x00B0 - 0x0040)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                    		// 0x0040 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ResetRotation;                                    		// 0x004C (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0058 (0x0008) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                        		// 0x0060 (0x0040) [0x0000000000000000]              
	struct FQuat                                       InitialQuat;                                      		// 0x00A0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstMove" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstMove::pClassPointer = NULL;

// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x0040 - 0x0040)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstSkelControlScale" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstSkelControlScale::pClassPointer = NULL;

// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x0044 - 0x0040)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstSlomo" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstSlomo::pClassPointer = NULL;

// Class Engine.InterpTrackInstSound
// 0x0008 (0x0048 - 0x0040)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x0044 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstSound" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstSound::pClassPointer = NULL;

// Class Engine.InterpTrackInstToggle
// 0x0008 (0x0048 - 0x0040)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdatePosition;                               		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstToggle" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstToggle::pClassPointer = NULL;

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x000C (0x004C - 0x0040)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	struct FVector                                     ResetVector;                                      		// 0x0040 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstVectorMaterialParam" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstVectorMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstVectorProp
// 0x0010 (0x0058 - 0x0048)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                       		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FVector                                     ResetVector;                                      		// 0x004C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackInstVectorProp" );

		return pClassPointer;
	};

};

UClass* UInterpTrackInstVectorProp::pClassPointer = NULL;

// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                    		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackMorphWeight" );

		return pClassPointer;
	};

};

UClass* UInterpTrackMorphWeight::pClassPointer = NULL;

// Class Engine.InterpTrackMove
// 0x0042 (0x009E - 0x005C)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                         		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveVector                          EulerTrack;                                       		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       LookAtGroupName;                                  		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinCurveTension;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngCurveTension;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseQuatInterpolation : 1;                        		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowArrowAtKeys : 1;                             		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableMovement : 1;                             		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowTranslationOnCurveEd : 1;                    		// 0x0098 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowRotationOnCurveEd : 1;                       		// 0x0098 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHide3DTrack : 1;                                 		// 0x0098 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      MoveFrame;                                        		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RotMode;                                          		// 0x009D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackMove" );

		return pClassPointer;
	};

};

UClass* UInterpTrackMove::pClassPointer = NULL;

// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackSkelControlScale" );

		return pClassPointer;
	};

};

UClass* UInterpTrackSkelControlScale::pClassPointer = NULL;

// Class Engine.InterpTrackSlomo
// 0x0000 (0x0070 - 0x0070)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackSlomo" );

		return pClassPointer;
	};

};

UClass* UInterpTrackSlomo::pClassPointer = NULL;

// Class Engine.InterpTrackSound
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray< struct FSoundTrackKey >                    Sounds;                                           		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackSound" );

		return pClassPointer;
	};

};

UClass* UInterpTrackSound::pClassPointer = NULL;

// Class Engine.InterpTrackToggle
// 0x0010 (0x006C - 0x005C)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray< struct FToggleTrackKey >                   ToggleTrack;                                      		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActivateSystemEachUpdate : 1;                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackToggle" );

		return pClassPointer;
	};

};

UClass* UInterpTrackToggle::pClassPointer = NULL;

// Class Engine.InterpTrackVectorMaterialParam
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	struct FName                                       ParamName;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackVectorMaterialParam" );

		return pClassPointer;
	};

};

UClass* UInterpTrackVectorMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0070 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpTrackVectorProp" );

		return pClassPointer;
	};

};

UClass* UInterpTrackVectorProp::pClassPointer = NULL;

// Class Engine.MaterialExpressionAbs
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionAbs" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionAbs::pClassPointer = NULL;

// Class Engine.MaterialExpressionAdd
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionAdd" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionAdd::pClassPointer = NULL;

// Class Engine.MaterialExpressionAppendVector
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionAppendVector" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionAppendVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionBumpOffset
// 0x0040 (0x009C - 0x005C)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Height;                                           		// 0x0078 (0x001C) [0x0000000000000000]              
	float                                              HeightRatio;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferencePlane;                                   		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionBumpOffset" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBumpOffset::pClassPointer = NULL;

// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionCameraVector" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCameraVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionCameraWorldPosition" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCameraWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionCeil
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionCeil" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCeil::pClassPointer = NULL;

// Class Engine.MaterialExpressionClamp
// 0x0054 (0x00B0 - 0x005C)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Min;                                              		// 0x0078 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Max;                                              		// 0x0094 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionClamp" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionClamp::pClassPointer = NULL;

// Class Engine.MaterialExpressionComment
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                             		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                PosY;                                             		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                SizeY;                                            		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FString                                     Text;                                             		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionComment" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionComment::pClassPointer = NULL;

// Class Engine.MaterialExpressionComponentMask
// 0x0020 (0x007C - 0x005C)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	unsigned long                                      R : 1;                                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      G : 1;                                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      B : 1;                                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      A : 1;                                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionComponentMask" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionComponentMask::pClassPointer = NULL;

// Class Engine.MaterialExpressionCompound
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionCompound : public UMaterialExpression
{
public:
	TArray< class UMaterialExpression* >               MaterialExpressions;                              		// 0x005C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Caption;                                          		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bExpanded : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionCompound" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCompound::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant
// 0x0004 (0x0060 - 0x005C)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionConstant" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0064 - 0x005C)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionConstant2Vector" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant2Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x0068 - 0x005C)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionConstant3Vector" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant3Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x006C - 0x005C)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              A;                                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionConstant4Vector" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant4Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstantClamp
// 0x0024 (0x0080 - 0x005C)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	float                                              Min;                                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionConstantClamp" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstantClamp::pClassPointer = NULL;

// Class Engine.MaterialExpressionCosine
// 0x0020 (0x007C - 0x005C)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionCosine" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCosine::pClassPointer = NULL;

// Class Engine.MaterialExpressionCrossProduct
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionCrossProduct" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCrossProduct::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSample
// 0x0020 (0x007C - 0x005C)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Coordinates;                                      		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureSample" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0024 (0x00A0 - 0x007C)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Bias;                                             		// 0x0084 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDepthBiasBlend" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDepthBiasBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0040 (0x009C - 0x005C)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Alpha;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x0080 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDepthBiasedAlpha" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDepthBiasedAlpha::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x005C (0x00B8 - 0x005C)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            RGB;                                              		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x0080 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x009C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDepthBiasedBlend" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDepthBiasedBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                             		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDeriveNormalZ" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDeriveNormalZ::pClassPointer = NULL;

// Class Engine.MaterialExpressionDesaturation
// 0x0048 (0x00A4 - 0x005C)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Percent;                                          		// 0x0078 (0x001C) [0x0000000000000000]              
	struct FLinearColor                                LuminanceFactors;                                 		// 0x0094 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDesaturation" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDesaturation::pClassPointer = NULL;

// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDestColor" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDestColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x0060 - 0x005C)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDestDepth" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDestDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionDistanceFieldFilter
// 0x0044 (0x00A0 - 0x005C)
class UMaterialExpressionDistanceFieldFilter : public UMaterialExpression
{
public:
	struct FExpressionInput                            DistanceField;                                    		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Minification;                                     		// 0x0078 (0x001C) [0x0000000000000000]              
	float                                              DistanceThreshold;                                		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftEdgeEpsilon;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BorderSize;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDistanceFieldFilter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDistanceFieldFilter::pClassPointer = NULL;

// Class Engine.MaterialExpressionDivide
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDivide" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDivide::pClassPointer = NULL;

// Class Engine.MaterialExpressionDotProduct
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionDotProduct" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDotProduct::pClassPointer = NULL;

// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionFlipBookSample" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFlipBookSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionFloor
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionFloor" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFloor::pClassPointer = NULL;

// Class Engine.MaterialExpressionFluidNormal
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionFluidNormal" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFluidNormal::pClassPointer = NULL;

// Class Engine.MaterialExpressionFontSample
// 0x0008 (0x0064 - 0x005C)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FontTexturePage;                                  		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionFontSample" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFontSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0018 (0x007C - 0x0064)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x006C (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionFontSampleParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFontSampleParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionFrac
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionFrac" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFrac::pClassPointer = NULL;

// Class Engine.MaterialExpressionFresnel
// 0x0020 (0x007C - 0x005C)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Normal;                                           		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionFresnel" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFresnel::pClassPointer = NULL;

// Class Engine.MaterialExpressionGolemTextureSample
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionGolemTextureSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionGolemTextureSample" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionGolemTextureSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0018 (0x0094 - 0x007C)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x0084 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureSampleParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionGolemTextureSampleParameter2D
// 0x0000 (0x0094 - 0x0094)
class UMaterialExpressionGolemTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionGolemTextureSampleParameter2D" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionGolemTextureSampleParameter2D::pClassPointer = NULL;

// Class Engine.MaterialExpressionIf
// 0x008C (0x00E8 - 0x005C)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            AGreaterThanB;                                    		// 0x0094 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            AEqualsB;                                         		// 0x00B0 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            ALessThanB;                                       		// 0x00CC (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionIf" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionIf::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionLensFlareIntensity" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareIntensity::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionLensFlareOcclusion" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareOcclusion::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionLensFlareRadialDistance" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareRadialDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionLensFlareRayDistance" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareRayDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionLensFlareSourceDistance" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareSourceDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionLightVector" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLightVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0054 (0x00B0 - 0x005C)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x0094 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionLinearInterpolate" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLinearInterpolate::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionMeshEmitterVertexColor" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMeshEmitterVertexColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionMeshSubUV" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMeshSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionMultiply
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionMultiply" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMultiply::pClassPointer = NULL;

// Class Engine.MaterialExpressionNoOp
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionNoOp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionNoOp" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionNoOp::pClassPointer = NULL;

// Class Engine.MaterialExpressionNormalize
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                      		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionNormalize" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionNormalize::pClassPointer = NULL;

// Class Engine.MaterialExpressionOneMinus
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionOneMinus" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionOneMinus::pClassPointer = NULL;

// Class Engine.MaterialExpressionPanner
// 0x0040 (0x009C - 0x005C)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0078 (0x001C) [0x0000000000000000]              
	float                                              SpeedX;                                           		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedY;                                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionPanner" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPanner::pClassPointer = NULL;

// Class Engine.MaterialExpressionParameter
// 0x0018 (0x0074 - 0x005C)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x0064 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionParticleSubUV" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionParticleSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x0060 - 0x005C)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionPixelDepth" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPixelDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionPower
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Exponent;                                         		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionPower" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPower::pClassPointer = NULL;

// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionReflectionVector" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionReflectionVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionRotator
// 0x0044 (0x00A0 - 0x005C)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0078 (0x001C) [0x0000000000000000]              
	float                                              CenterX;                                          		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterY;                                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionRotator" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionRotator::pClassPointer = NULL;

// Class Engine.MaterialExpressionScalarParameter
// 0x0004 (0x0078 - 0x0074)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionScalarParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionScalarParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionSceneDepth
// 0x0020 (0x007C - 0x005C)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x005C (0x001C) [0x0000000000000000]              
	unsigned long                                      bNormalize : 1;                                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionSceneDepth" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSceneDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionSceneTexture
// 0x0024 (0x0080 - 0x005C)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x005C (0x001C) [0x0000000000000000]              
	unsigned char                                      SceneTextureType;                                 		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ScreenAlign : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionSceneTexture" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSceneTexture::pClassPointer = NULL;

// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x0060 - 0x005C)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                  		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionScreenPosition" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionScreenPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionSine
// 0x0020 (0x007C - 0x005C)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionSine" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSine::pClassPointer = NULL;

// Class Engine.MaterialExpressionSquareRoot
// 0x001C (0x0078 - 0x005C)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionSquareRoot" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSquareRoot::pClassPointer = NULL;

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0024 (0x0098 - 0x0074)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0074 (0x001C) [0x0000000000000000]              
	unsigned long                                      DefaultR : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DefaultG : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      DefaultB : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DefaultA : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FPointer                                    InstanceOverride;                                 		// 0x0094 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionStaticComponentMaskParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionStaticComponentMaskParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0040 (0x00B4 - 0x0074)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ExtendedCaptionDisplay : 1;                       		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FExpressionInput                            A;                                                		// 0x0078 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0094 (0x001C) [0x0000000000000000]              
	struct FPointer                                    InstanceOverride;                                 		// 0x00B0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionStaticSwitchParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionStaticSwitchParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionSubtract
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0078 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionSubtract" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSubtract::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x006C - 0x005C)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                  		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Tiling;                                           		// 0x0060 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              UTiling;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VTiling;                                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureCoordinate" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureCoordinate::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x0094 - 0x0094)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureSampleParameter2D" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameter2D::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameter3D
// 0x0000 (0x0094 - 0x0094)
class UMaterialExpressionTextureSampleParameter3D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureSampleParameter3D" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameter3D::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x0094 - 0x0094)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureSampleParameterCube" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterCube::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x0094 - 0x0094)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureSampleParameterMovie" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterMovie::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x0094 - 0x0094)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTextureSampleParameterSubUV" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionTime
// 0x0004 (0x0060 - 0x005C)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                 		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTime" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTime::pClassPointer = NULL;

// Class Engine.MaterialExpressionTransform
// 0x001D (0x0079 - 0x005C)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	unsigned char                                      TransformType;                                    		// 0x0078 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTransform" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTransform::pClassPointer = NULL;

// Class Engine.MaterialExpressionTransformPosition
// 0x001D (0x0079 - 0x005C)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	unsigned char                                      TransformType;                                    		// 0x0078 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionTransformPosition" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTransformPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x0084 - 0x0074)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                     		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionVectorParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionVectorParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionVertexColor" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionVertexColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialExpressionWorldPosition" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialInstance
// 0x0030 (0x009C - 0x006C)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Parent;                                           		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasStaticPermutationResource : 1;                		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStaticPermutationDirty : 1;                      		// 0x0074 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )
	unsigned long                                      ReentrantFlag : 1;                                		// 0x0074 (0x0004) [0x0000000000001002] [0x00000004] ( CPF_Const | CPF_Native )
	struct FPointer                                    StaticParameters[ 0x2 ];                          		// 0x0078 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    StaticPermutationResources[ 0x2 ];                		// 0x0080 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Resources[ 0x2 ];                                 		// 0x0088 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x0090 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialInstance" );

		return pClassPointer;
	};

	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

UClass* UMaterialInstance::pClassPointer = NULL;

// Class Engine.MaterialInstanceConstant
// 0x0030 (0x00CC - 0x009C)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray< struct FFontParameterValue >               FontParameterValues;                              		// 0x009C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FScalarParameterValue >             ScalarParameterValues;                            		// 0x00A8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTextureParameterValue >            TextureParameterValues;                           		// 0x00B4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVectorParameterValue >             VectorParameterValues;                            		// 0x00C0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialInstanceConstant" );

		return pClassPointer;
	};

	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

UClass* UMaterialInstanceConstant::pClassPointer = NULL;

// Class Engine.MaterialInstanceTimeVarying
// 0x0038 (0x00D4 - 0x009C)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Duration;                                         		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFontParameterValueOverTime >       FontParameterValues;                              		// 0x00A4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FScalarParameterValueOverTime >     ScalarParameterValues;                            		// 0x00B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTextureParameterValueOverTime >    TextureParameterValues;                           		// 0x00BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVectorParameterValueOverTime >     VectorParameterValues;                            		// 0x00C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.MaterialInstanceTimeVarying" );

		return pClassPointer;
	};

	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorStartTime ( struct FName ParameterName, float Value );
	void SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetDuration ( float Value );
	void SetScalarStartTime ( struct FName ParameterName, float Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

UClass* UMaterialInstanceTimeVarying::pClassPointer = NULL;

// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0071 - 0x0071)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionFloatParticleParameter" );

		return pClassPointer;
	};

};

UClass* UDistributionFloatParticleParameter::pClassPointer = NULL;

// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x00A3 - 0x00A3)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionVectorParticleParameter" );

		return pClassPointer;
	};

};

UClass* UDistributionVectorParticleParameter::pClassPointer = NULL;

// Class Engine.Emitter
// 0x0018 (0x0254 - 0x023C)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDestroyOnSystemFinish : 1;                       		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0240 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	TArray< int >                                      ParentIndices;                                    		// 0x0244 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Emitter" );

		return pClassPointer;
	};

	void OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void eventPostFactorySpawn ( class USequence* ParentSequence );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

UClass* AEmitter::pClassPointer = NULL;

// Class Engine.ParticleEmitter
// 0x0094 (0x00D4 - 0x0040)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                      		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseLocalSpace : 1;                                		// 0x0048 (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned long                                      KillOnDeactivate : 1;                             		// 0x0048 (0x0004) [0x0000000020000000] [0x00000002] ( CPF_Deprecated )
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x0048 (0x0004) [0x0000000020000000] [0x00000004] ( CPF_Deprecated )
	unsigned long                                      ScaleUV : 1;                                      		// 0x0048 (0x0004) [0x0000000020000000] [0x00000008] ( CPF_Deprecated )
	unsigned long                                      DirectUV : 1;                                     		// 0x0048 (0x0004) [0x0000000020000000] [0x00000010] ( CPF_Deprecated )
	unsigned long                                      bEnabled : 1;                                     		// 0x0048 (0x0004) [0x0000000020000000] [0x00000020] ( CPF_Deprecated )
	unsigned long                                      ConvertedModules : 1;                             		// 0x0048 (0x0004) [0x0000000000000000] [0x00000040] 
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x004C (0x001C) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )
	float                                              EmitterDuration;                                  		// 0x0068 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                EmitterLoops;                                     		// 0x006C (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      ParticleBurstMethod;                              		// 0x0070 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      InterpolationMethod;                              		// 0x0071 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      EmitterRenderMode;                                		// 0x0072 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x0074 (0x000C) [0x0000000022400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_Deprecated )
	int                                                SubImages_Horizontal;                             		// 0x0080 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                SubImages_Vertical;                               		// 0x0084 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              RandomImageTime;                                  		// 0x0088 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                RandomImageChanges;                               		// 0x008C (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                SubUVDataOffset;                                  		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      EmitterEditorColor;                               		// 0x0094 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	TArray< class UParticleLODLevel* >                 LODLevels;                                        		// 0x0098 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleModule* >                   Modules;                                          		// 0x00A4 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleModule*                             TypeDataModule;                                   		// 0x00B0 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModule* >                   SpawnModules;                                     		// 0x00B4 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   UpdateModules;                                    		// 0x00C0 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                PeakActiveParticles;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                InitialAllocationCount;                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleEmitter" );

		return pClassPointer;
	};

};

UClass* UParticleEmitter::pClassPointer = NULL;

// Class Engine.ParticleLODLevel
// 0x0068 (0x00A8 - 0x0040)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                            		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LevelSetting;                                     		// 0x0044 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bEnabled : 1;                                     		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x0048 (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleModuleRequired*                     RequiredModule;                                   		// 0x004C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleModule* >                   Modules;                                          		// 0x0050 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleModule*                             TypeDataModule;                                   		// 0x005C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleSpawn*                        SpawnModule;                                      		// 0x0060 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleEventGenerator*               EventGenerator;                                   		// 0x0064 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModuleSpawnBase* >          SpawningModules;                                  		// 0x0068 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   SpawnModules;                                     		// 0x0074 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   UpdateModules;                                    		// 0x0080 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleOrbit* >              OrbitModules;                                     		// 0x008C (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleEventReceiverBase* >  EventReceiverModules;                             		// 0x0098 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                PeakActiveParticles;                              		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleLODLevel" );

		return pClassPointer;
	};

};

UClass* UParticleLODLevel::pClassPointer = NULL;

// Class Engine.ParticleModule
// 0x0018 (0x0058 - 0x0040)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                 		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateModule : 1;                                		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCurvesAsColor : 1;                               		// 0x0040 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      b3DDrawMode : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSupported3DDrawMode : 1;                         		// 0x0040 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnabled : 1;                                     		// 0x0040 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bEditable : 1;                                    		// 0x0040 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      LODDuplicate : 1;                                 		// 0x0040 (0x0004) [0x0000000000000000] [0x00000080] 
	struct FColor                                      ModuleEditorColor;                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODValidity;                                      		// 0x0048 (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             IdenticalIgnoreProperties;                        		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModule" );

		return pClassPointer;
	};

};

UClass* UParticleModule::pClassPointer = NULL;

// Class Engine.ParticleModuleAccelerationBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleAccelerationBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleAccelerationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleAcceleration
// 0x001C (0x0074 - 0x0058)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                     		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleAcceleration" );

		return pClassPointer;
	};

};

UClass* UParticleModuleAcceleration::pClassPointer = NULL;

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x001C (0x0074 - 0x0058)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleAccelerationOverLifetime" );

		return pClassPointer;
	};

};

UClass* UParticleModuleAccelerationOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleAttractorBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorBase::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorLine
// 0x0050 (0x00A8 - 0x0058)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                        		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndPoint1;                                        		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Range;                                            		// 0x0070 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x008C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleAttractorLine" );

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorLine::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorParticle
// 0x004C (0x00A4 - 0x0058)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0058 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	struct FRawDistributionFloat                       Range;                                            		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bStrengthByDistance : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenewSource : 1;                                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInheritSourceVel : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      SelectionMethod;                                  		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSelIndex;                                     		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleAttractorParticle" );

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorParticle::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorPoint
// 0x0058 (0x00B0 - 0x0058)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                         		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Range;                                            		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x0090 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      StrengthByDistance : 1;                           		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideVelocity : 1;                            		// 0x00AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleAttractorPoint" );

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorPoint::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleBeamBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleBeamBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamBase::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamModifier
// 0x0068 (0x00C0 - 0x0058)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	unsigned char                                      ModifierType;                                     		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FBeamModifierOptions                        PositionOptions;                                  		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Position;                                         		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBeamModifierOptions                        TangentOptions;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Tangent;                                          		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsoluteTangent : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FBeamModifierOptions                        StrengthOptions;                                  		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00A4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleBeamModifier" );

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamModifier::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamNoise
// 0x00AC (0x0104 - 0x0058)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNRScaleEmitterTime : 1;                          		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSmooth : 1;                                      		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoiseLock : 1;                                   		// 0x0058 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bOscillate : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseNoiseTangents : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTargetNoise : 1;                                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bApplyNoiseScale : 1;                             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                Frequency;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Frequency_LowRange;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      NoiseRange;                                       		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       NoiseRangeScale;                                  		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      NoiseSpeed;                                       		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              NoiseLockRadius;                                  		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseLockTime;                                    		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseTension;                                     		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseTangentStrength;                             		// 0x00C4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                NoiseTessellation;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyDistance;                                		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseScale;                                       		// 0x00E8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleBeamNoise" );

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamNoise::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamSource
// 0x0064 (0x00BC - 0x0058)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceTangentMethod;                              		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSourceAbsolute : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockSource : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockSourceTangent : 1;                           		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      Source;                                           		// 0x0068 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      SourceTangent;                                    		// 0x0084 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x00A0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleBeamSource" );

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamSource::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamTarget
// 0x0068 (0x00C0 - 0x0058)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	unsigned char                                      TargetMethod;                                     		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetTangentMethod;                              		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetName;                                       		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Target;                                           		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bTargetAbsolute : 1;                              		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockTarget : 1;                                  		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockTargetTangent : 1;                           		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockTargetStength : 1;                           		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      TargetTangent;                                    		// 0x0084 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00A0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              LockRadius;                                       		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleBeamTarget" );

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamTarget::pClassPointer = NULL;

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleCollisionBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleCollisionBase::pClassPointer = NULL;

// Class Engine.ParticleModuleCollision
// 0x009C (0x00F4 - 0x0058)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      DampingFactorRotation;                            		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       MaxCollisions;                                    		// 0x0090 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      CollisionCompletionOption;                        		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyPhysics : 1;                                		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                    		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;           		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDropDetail : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionFloat                       ParticleMass;                                     		// 0x00B4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              DirScalar;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalFudgeFactor;                              		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       DelayAmount;                                      		// 0x00D8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleCollision" );

		return pClassPointer;
	};

};

UClass* UParticleModuleCollision::pClassPointer = NULL;

// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleColorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleColorBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleColorBase::pClassPointer = NULL;

// Class Engine.ParticleModuleColor
// 0x003C (0x0094 - 0x0058)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                       		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleColor" );

		return pClassPointer;
	};

};

UClass* UParticleModuleColor::pClassPointer = NULL;

// Class Engine.ParticleModuleColorByParameter
// 0x000C (0x0064 - 0x0058)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                       		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DefaultColor;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleColorByParameter" );

		return pClassPointer;
	};

};

UClass* UParticleModuleColorByParameter::pClassPointer = NULL;

// Class Engine.ParticleModuleColorOverLife
// 0x003C (0x0094 - 0x0058)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleColorOverLife" );

		return pClassPointer;
	};

};

UClass* UParticleModuleColorOverLife::pClassPointer = NULL;

// Class Engine.ParticleModuleColorScaleOverLife
// 0x003C (0x0094 - 0x0058)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bEmitterTime : 1;                                 		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleColorScaleOverLife" );

		return pClassPointer;
	};

};

UClass* UParticleModuleColorScaleOverLife::pClassPointer = NULL;

// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleEventBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleEventBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleEventBase::pClassPointer = NULL;

// Class Engine.ParticleModuleEventGenerator
// 0x000C (0x0064 - 0x0058)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray< struct FParticleEvent_GenerateInfo >       Events;                                           		// 0x0058 (0x000C) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleEventGenerator" );

		return pClassPointer;
	};

};

UClass* UParticleModuleEventGenerator::pClassPointer = NULL;

// Class Engine.ParticleModuleEventReceiverBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleEventReceiverBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleEventReceiverBase::pClassPointer = NULL;

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0048 (0x00A0 - 0x0058)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      EventGeneratorType;                               		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnCount;                                       		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bUseParticleTime : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsePSysLocation : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInheritVelocity : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionVector                      InheritVelocityScale;                             		// 0x0084 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleEventReceiverSpawn" );

		return pClassPointer;
	};

};

UClass* UParticleModuleEventReceiverSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleKillBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleKillBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleKillBase::pClassPointer = NULL;

// Class Engine.ParticleModuleKillBox
// 0x003C (0x0094 - 0x0058)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillInside : 1;                                  		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleKillBox" );

		return pClassPointer;
	};

};

UClass* UParticleModuleKillBox::pClassPointer = NULL;

// Class Engine.ParticleModuleKillHeight
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                           		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFloor : 1;                                       		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleKillHeight" );

		return pClassPointer;
	};

};

UClass* UParticleModuleKillHeight::pClassPointer = NULL;

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLifetimeBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLifetimeBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLifetime
// 0x001C (0x0074 - 0x0058)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLifetime" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleLocationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocationBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLocation
// 0x001C (0x0074 - 0x0058)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocation" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocation::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationDirect
// 0x0070 (0x00C8 - 0x0058)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                         		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LocationOffset;                                   		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ScaleFactor;                                      		// 0x0090 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      Direction;                                        		// 0x00AC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocationDirect" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationEmitter
// 0x0018 (0x0070 - 0x0058)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0058 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      SelectionMethod;                                  		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      InheritSourceVelocity : 1;                        		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritSourceRotation : 1;                       		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              InheritSourceVelocityScale;                       		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InheritSourceRotationScale;                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocationEmitter" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationEmitter::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0060 - 0x0058)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0058 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocationEmitterDirect" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationEmitterDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x003C (0x0094 - 0x0058)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Positive_Y : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Positive_Z : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Negative_X : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      Negative_Y : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      Negative_Z : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SurfaceOnly : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      Velocity : 1;                                     		// 0x0058 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FRawDistributionFloat                       VelocityScale;                                    		// 0x005C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0078 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocationPrimitiveBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x003D (0x00D1 - 0x0094)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                               		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x0098 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartHeight;                                      		// 0x00B4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      HeightAxis;                                       		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocationPrimitiveCylinder" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveCylinder::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x001C (0x00B0 - 0x0094)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x0094 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleLocationPrimitiveSphere" );

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveSphere::pClassPointer = NULL;

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleMaterialBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleMaterialBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMaterialByParameter
// 0x0018 (0x0070 - 0x0058)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray< struct FName >                             MaterialParameters;                               		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                DefaultMaterials;                                 		// 0x0064 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleMaterialByParameter" );

		return pClassPointer;
	};

};

UClass* UParticleModuleMaterialByParameter::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshMaterial
// 0x000C (0x0064 - 0x0058)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray< class UMaterialInterface* >                MeshMaterials;                                    		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleMeshMaterial" );

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshMaterial::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleRotationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleRotationBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotation
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleMeshRotation" );

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotation::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleRotationRateBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationRateBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRate
// 0x001C (0x0074 - 0x0058)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleMeshRotationRate" );

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotationRate::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x001C (0x0074 - 0x0058)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleMeshRotationRateMultiplyLife" );

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotationRateMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleOrbitBase
// 0x0004 (0x005C - 0x0058)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleOrbitBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleOrbitBase::pClassPointer = NULL;

// Class Engine.ParticleModuleOrbit
// 0x0064 (0x00C0 - 0x005C)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	unsigned char                                      ChainMode;                                        		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      OffsetAmount;                                     		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               OffsetOptions;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationAmount;                                   		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               RotationOptions;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationRateAmount;                               		// 0x00A0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               RotationRateOptions;                              		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleOrbit" );

		return pClassPointer;
	};

};

UClass* UParticleModuleOrbit::pClassPointer = NULL;

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleOrientationBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleOrientationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0060 - 0x0058)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	unsigned char                                      LockAxisFlags;                                    		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLocalSpaceAxes : 1;                           		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleOrientationAxisLock" );

		return pClassPointer;
	};

};

UClass* UParticleModuleOrientationAxisLock::pClassPointer = NULL;

// Class Engine.ParticleModuleRequired
// 0x005C (0x00B4 - 0x0058)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScreenAlignment;                                  		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleBurstMethod;                              		// 0x005D (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpolationMethod;                              		// 0x005E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EmitterRenderMode;                                		// 0x005F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillOnDeactivate : 1;                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRequiresSorting : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEmitterDurationUseRange : 1;                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDurationRecalcEachLoop : 1;                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bResetOnLoop : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDelayFirstLoopOnly : 1;                          		// 0x0060 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bScaleUV : 1;                                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDirectUV : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUseMaxDrawCount : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              EmitterDuration;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDurationLow;                               		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EmitterLoops;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x0070 (0x001C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x008C (0x000C) [0x0000000002400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )
	float                                              EmitterDelay;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Horizontal;                             		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Vertical;                               		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomImageTime;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                RandomImageChanges;                               		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxDrawCount;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EmitterEditorColor;                               		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleRequired" );

		return pClassPointer;
	};

};

UClass* UParticleModuleRequired::pClassPointer = NULL;

// Class Engine.ParticleModuleRotation
// 0x001C (0x0074 - 0x0058)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleRotation" );

		return pClassPointer;
	};

};

UClass* UParticleModuleRotation::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                 		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Scale : 1;                                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleRotationOverLifetime" );

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRate
// 0x001C (0x0074 - 0x0058)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleRotationRate" );

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationRate::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x001C (0x0074 - 0x0058)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                   		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleRotationRateMultiplyLife" );

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationRateMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleSizeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSizeBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSize
// 0x001C (0x0074 - 0x0058)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                        		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSize" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSize::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSizeMultiplyLife" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                               		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSizeMultiplyVelocity" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeMultiplyVelocity::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeScale
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                        		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      EnableX : 1;                                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableY : 1;                                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableZ : 1;                                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSizeScale" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeScale::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawnBase
// 0x0004 (0x005C - 0x0058)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessBurstList : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSpawnBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSpawnBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawn
// 0x0048 (0x00A4 - 0x005C)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                             		// 0x005C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       RateScale;                                        		// 0x0078 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      ParticleBurstMethod;                              		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x0098 (0x000C) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSpawn" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0028 (0x0084 - 0x005C)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnPerUnit;                                     		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              MovementTolerance;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSpawnPerUnit" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSpawnPerUnit::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSubUVBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUVBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUV
// 0x001C (0x0074 - 0x0058)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSubUV" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUV::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVDirect
// 0x0038 (0x0090 - 0x0058)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      SubUVSize;                                        		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSubUVDirect" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUVDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVSelect
// 0x001C (0x0074 - 0x0058)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                   		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleSubUVSelect" );

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUVSelect::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleTrailBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTrailBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailBase::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailSource
// 0x003C (0x0094 - 0x0058)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritRotation : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                SourceOffsetCount;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           SourceOffsetDefaults;                             		// 0x0088 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTrailSource" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailSource::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailSpawn
// 0x0008 (0x0060 - 0x0058)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                 		// 0x0058 (0x0004) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	float                                              MinSpawnVelocity;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTrailSpawn" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailTaper
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	unsigned char                                      TaperMethod;                                      		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x005C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTrailTaper" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailTaper::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataBase::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBeam
// 0x009C (0x00F4 - 0x0058)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EndPointMethod;                                   		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x005C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      EndPoint;                                         		// 0x0078 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                TessellationFactor;                               		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       EmitterStrength;                                  		// 0x0098 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00B4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      EndPointDirection;                                		// 0x00D0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                TextureTile;                                      		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataBeam" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataBeam::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBeam2
// 0x007C (0x00D4 - 0x0058)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TaperMethod;                                      		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextureTileDistance;                              		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxBeamCount;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InterpolationPoints;                              		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysOn : 1;                                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0074 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0074 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FName                                       BranchParentName;                                 		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperScale;                                       		// 0x00B8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataBeam2" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataBeam2::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataMesh
// 0x0009 (0x0061 - 0x0058)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                             		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CastShadows : 1;                                  		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DoCollisions : 1;                                 		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideMaterial : 1;                            		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      MeshAlignment;                                    		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataMesh" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataMesh::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0023 (0x0084 - 0x0061)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PhysXRotationMethod;                              		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidRotationCoefficient;                         		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    RenderInstance;                                   		// 0x0070 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataMeshPhysX" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataMeshPhysX::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataPhysX
// 0x0014 (0x006C - 0x0058)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x005C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataPhysX" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataPhysX::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataTrail
// 0x0030 (0x0088 - 0x0058)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                               		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Tapered : 1;                                      		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      SpawnByDistance : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                TessellationFactor;                               		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Tension;                                          		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     SpawnDistance;                                    		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataTrail" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataTrail::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataTrail2
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                               		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationFactorDistance;                       		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              TessellationStrength;                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                MaxTrailCount;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0074 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleTypeDataTrail2" );

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataTrail2::pClassPointer = NULL;

// Class Engine.ParticleModuleUberBase
// 0x000C (0x0064 - 0x0058)
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray< struct FName >                             RequiredModules;                                  		// 0x0058 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberBase::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCL
// 0x00A8 (0x010C - 0x0064)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0064 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x0080 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x009C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00B8 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D4 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00F0 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberLTISIVCL" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberLTISIVCL::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00C4 (0x0128 - 0x0064)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0064 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x0080 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x009C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00B8 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D4 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00F0 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x010C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberLTISIVCLIL" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberLTISIVCLIL::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x011C (0x0180 - 0x0064)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0064 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x0080 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x009C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00B8 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D4 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00F0 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x010C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0128 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      SizeLifeMultiplier;                               		// 0x0144 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	unsigned long                                      SizeMultiplyX : 1;                                		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SizeMultiplyY : 1;                                		// 0x0160 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      SizeMultiplyZ : 1;                                		// 0x0160 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0164 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberLTISIVCLILIRSSBLIRR::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainDrops
// 0x0088 (0x00EC - 0x0064)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMax;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMin;                                     		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMax;                                     		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMin;                                 		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMax;                                 		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMin;                           		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMax;                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ColorOverLife;                                    		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaOverLife;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	float                                              PC_VelocityScale;                                 		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PC_StartLocation;                                 		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartRadius;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartHeight;                                   		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PC_HeightAxis;                                    		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMin;                                 		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMax;                                 		// 0x00E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberRainDrops" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainDrops::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainImpacts
// 0x0120 (0x0184 - 0x0064)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00B8 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00BC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_VelocityScale;                                 		// 0x00D8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      PC_StartLocation;                                 		// 0x00F4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartRadius;                                   		// 0x0110 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartHeight;                                   		// 0x012C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      PC_HeightAxis;                                    		// 0x0148 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x014C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0168 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberRainImpacts" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainImpacts::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainSplashA
// 0x00AC (0x0110 - 0x0064)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00BC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00D8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00F4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberRainSplashA" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainSplashA::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainSplashB
// 0x00AC (0x0110 - 0x0064)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00B8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00D4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x00F4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleUberRainSplashB" );

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainSplashB::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityBase
// 0x0000 (0x0058 - 0x0058)
class UParticleModuleVelocityBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleVelocityBase" );

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocityBase::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocity
// 0x0038 (0x0090 - 0x0058)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0074 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleVelocity" );

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocity::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityInheritParent
// 0x001C (0x0074 - 0x0058)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                            		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleVelocityInheritParent" );

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocityInheritParent::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0020 (0x0078 - 0x0058)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                      		// 0x0058 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Absolute : 1;                                     		// 0x0074 (0x0004) [0x0000000000000009] [0x00000001] ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleModuleVelocityOverLifetime" );

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocityOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x00D4 - 0x00D4)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleSpriteEmitter" );

		return pClassPointer;
	};

};

UClass* UParticleSpriteEmitter::pClassPointer = NULL;

// Class Engine.ParticleSystem
// 0x00B4 (0x00F4 - 0x0040)
class UParticleSystem : public UObject
{
public:
	unsigned char                                      SystemUpdateMode;                                 		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODMethod;                                        		// 0x0041 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_FPS;                                   		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_Delta;                                 		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleEmitter* >                  Emitters;                                         		// 0x0050 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystemComponent*                    PreviewComponent;                                 		// 0x005C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x0060 (0x000C) [0x0000000000000000]              
	float                                              ThumbnailDistance;                                		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              ThumbnailWarmup;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLit : 1;                                         		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRegenerateLODDuplicate : 1;                      		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShouldResetPeakCounts : 1;                       		// 0x0074 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHasPhysics : 1;                                  		// 0x0074 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUseRealtimeThumbnail : 1;                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x0074 (0x0004) [0x0000000000000000] [0x00000040] 
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x0078 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              LODDistanceCheckTime;                             		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    LODDistances;                                     		// 0x0080 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	int                                                EditorLODSetting;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x0090 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondsBeforeInactive;                            		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FloorMesh;                                        		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     FloorPosition;                                    		// 0x00BC (0x000C) [0x0000000000000000]              
	struct FRotator                                    FloorRotation;                                    		// 0x00C8 (0x000C) [0x0000000000000000]              
	float                                              FloorScale;                                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FVector                                     FloorScale3D;                                     		// 0x00D8 (0x000C) [0x0000000000000000]              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             ContentTags;                                      		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleSystem" );

		return pClassPointer;
	};

	bool SetLODDistance ( int LODLevelIndex, float InDistance );
	void SetCurrentLODMethod ( unsigned char InMethod );
	float GetLODDistance ( int LODLevelIndex );
	int GetLODLevelCount ( );
	unsigned char GetCurrentLODMethod ( );
};

UClass* UParticleSystem::pClassPointer = NULL;

// Class Engine.ParticleSystemComponent
// 0x00B4 (0x028C - 0x01D8)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                         		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPointer >                          EmitterInstances;                                 		// 0x01DC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UStaticMeshComponent* >              SMComponents;                                     		// 0x01E8 (0x000C) [0x000000000468200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInterface* >                SMMaterialInterfaces;                             		// 0x01F4 (0x000C) [0x0000000000602002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bAutoActivate : 1;                                		// 0x0200 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWasCompleted : 1;                                		// 0x0200 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bSuppressSpawning : 1;                            		// 0x0200 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bWasDeactivated : 1;                              		// 0x0200 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bResetOnDetach : 1;                               		// 0x0200 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUpdateOnDedicatedServer : 1;                     		// 0x0200 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bJustAttached : 1;                                		// 0x0200 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      notCurrentlyRelevant : 1;                         		// 0x0200 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0200 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bWarmingUp : 1;                                   		// 0x0200 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsCachedInPool : 1;                              		// 0x0200 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOverrideLODMethod : 1;                           		// 0x0200 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;             		// 0x0200 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bUpdateComponentInTick : 1;                       		// 0x0200 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bDeferredBeamUpdate : 1;                          		// 0x0200 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForcedInActive : 1;                              		// 0x0200 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bIsWarmingUp : 1;                                 		// 0x0200 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bIsViewRelevanceDirty : 1;                        		// 0x0200 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bRecacheViewRelevance : 1;                        		// 0x0200 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x0204 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     OldPosition;                                      		// 0x0210 (0x000C) [0x0000000000000000]              
	struct FVector                                     PartSysVelocity;                                  		// 0x021C (0x000C) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                LODLevel;                                         		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              SecondsBeforeInactive;                            		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EditorLODLevel;                                   		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              AccumTickTime;                                    		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LODMethod;                                        		// 0x023C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMaterialViewRelevance >            CachedViewRelevanceFlags;                         		// 0x0240 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventSpawnData >           SpawnEvents;                                      		// 0x024C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventDeathData >           DeathEvents;                                      		// 0x0258 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventCollideData >         CollisionEvents;                                  		// 0x0264 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventKismetData >          KismetEvents;                                     		// 0x0270 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AccumulatedTick;                                  		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                     		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ParticleSystemComponent" );

		return pClassPointer;
	};

	void ResetToDefaults ( );
	void SetActive ( unsigned long bNowActive );
	void ClearParameter ( struct FName ParameterName, unsigned char ParameterType );
	bool GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial );
	bool GetActorParameter ( struct FName InName, class AActor** OutActor );
	bool GetColorParameter ( struct FName InName, struct FColor* OutColor );
	bool GetVectorParameter ( struct FName InName, struct FVector* OutVector );
	bool GetFloatParameter ( struct FName InName, float* OutFloat );
	void SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	int GetEditorLODLevel ( );
	int GetLODLevel ( );
	void SetEditorLODLevel ( int InLODLevel );
	void SetLODLevel ( int InLODLevel );
	void SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex );
	void SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex );
	void SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex );
	void SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex );
	void SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex );
	void SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex );
	void SetBeamDistance ( int EmitterIndex, float Distance );
	void SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint );
	void SetBeamTessellationFactor ( int EmitterIndex, float NewFactor );
	void SetBeamType ( int EmitterIndex, int NewMethod );
	void RewindEmitterInstances ( );
	void RewindEmitterInstance ( int EmitterIndex );
	void SetKillOnCompleted ( int EmitterIndex, unsigned long bKill );
	void SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill );
	bool GetSkipUpdateDynamicDataDuringTick ( );
	void SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick );
	void KillParticlesForced ( );
	void DeactivateSystem ( );
	void ActivateSystem ( unsigned long bFlagAsJustAttached );
	void SetTemplate ( class UParticleSystem* NewTemplate );
	void OnSystemFinished ( class UParticleSystemComponent* PSystem );
};

UClass* UParticleSystemComponent::pClassPointer = NULL;

// Class Engine.PhysXEmitterSpawnable
// 0x0008 (0x025C - 0x0254)
class APhysXEmitterSpawnable : public AEmitter
{
public:
	struct FPointer                                    VolumeFill;                                       		// 0x0254 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysXEmitterSpawnable" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
	void eventDestroyed ( );
	void Term ( );
};

UClass* APhysXEmitterSpawnable::pClassPointer = NULL;

// Class Engine.PhysXParticleSystem
// 0x0054 (0x0094 - 0x0040)
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles;                                     		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionDistance;                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithStaticShapes;                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithDynamicShapes;                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithStaticShapes;                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithDynamicShapes;                        		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDynamicCollision : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableGravity : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStaticCollision : 1;                             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTwoWayCollision : 1;                             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroy : 1;                                     		// 0x0058 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSyncFailed : 1;                                  		// 0x0058 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsInGame : 1;                                    		// 0x0058 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	float                                              MaxMotionDistance;                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Damping;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ExternalAcceleration;                             		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SimulationMethod;                                 		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PacketSizeMultiplier;                             		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestParticleDistance;                             		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestDensity;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KernelRadiusMultiplier;                           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Stiffness;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Viscosity;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionResponseCoefficient;                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CascadeScene;                                     		// 0x008C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PSys;                                             		// 0x0090 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysXParticleSystem" );

		return pClassPointer;
	};

};

UClass* UPhysXParticleSystem::pClassPointer = NULL;

// Class Engine.cAPBLockedBone
// 0x0010 (0x0050 - 0x0040)
class UcAPBLockedBone : public UObject
{
public:
	struct FName                                       sBoneName;                                        		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       sRedirectBoneName;                                		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cAPBLockedBone" );

		return pClassPointer;
	};

};

UClass* UcAPBLockedBone::pClassPointer = NULL;

// Class Engine.KActor
// 0x0084 (0x02F8 - 0x0274)
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0274 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0274 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCurrentSlide : 1;                                		// 0x0274 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSlideActive : 1;                                 		// 0x0274 (0x0004) [0x0000000000000000] [0x00000008] 
	class UParticleSystemComponent*                    ImpactEffectComponent;                            		// 0x0278 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent;                             		// 0x027C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent2;                            		// 0x0280 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastImpactTime;                                   		// 0x0284 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    SlideEffectComponent;                             		// 0x0288 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SlideSoundComponent;                              		// 0x028C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastSlideTime;                                    		// 0x0290 (0x0004) [0x0000000000000000]              
	struct FRigidBodyState                             RBState;                                          		// 0x0294 (0x003C) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x02D0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              DrawScaleX;                                       		// 0x02D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DrawScaleY;                                       		// 0x02D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DrawScaleZ;                                       		// 0x02DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     InitialLocation;                                  		// 0x02E0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    InitialRotation;                                  		// 0x02EC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.KActor" );

		return pClassPointer;
	};

	void Reset ( );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void ApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPhysicalCollisionProperties ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventPostBeginPlay ( );
	void ResolveRBState ( );
	class UPhysicalMaterial* GetKActorPhysMaterial ( );
};

UClass* AKActor::pClassPointer = NULL;

// Class Engine.KActorSpawnable
// 0x0000 (0x02F8 - 0x02F8)
class AKActorSpawnable : public AKActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.KActorSpawnable" );

		return pClassPointer;
	};

	void ResetComponents ( );
	void Recycle ( );
	void Initialize ( );
};

UClass* AKActorSpawnable::pClassPointer = NULL;

// Class Engine.KAsset
// 0x0010 (0x024C - 0x023C)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0240 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockPawns : 1;                                  		// 0x0240 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UPhysicsAsset*                               ReplicatedPhysAsset;                              		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.KAsset" );

		return pClassPointer;
	};

	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AKAsset::pClassPointer = NULL;

// Class Engine.PhysicalMaterial
// 0x0080 (0x00C0 - 0x0040)
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                    		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Friction;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Restitution;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceConeFriction : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAnisotropicFriction : 1;                   		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDestroyGrenades : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FVector                                     AnisoFrictionDir;                                 		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionV;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Density;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearDamping;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MagneticResponse;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindResponse;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             AudioMaterialType;                                		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                AudioMaterialNum;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     AudioFootstepMaterial;                            		// 0x0088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      CollisionType;                                    		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ImpactType;                                       		// 0x0095 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactThreshold;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactReFireDelay;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactEffect;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideThreshold;                                   		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideReFireDelay;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SlideEffect;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SlideSound;                                       		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           Parent;                                           		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                         		// 0x00BC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicalMaterial" );

		return pClassPointer;
	};

	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty ( class UClass* DesiredClass );
	int GetAudioMaterialNum ( );
};

UClass* UPhysicalMaterial::pClassPointer = NULL;

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0040 - 0x0040)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicalMaterialPropertyBase" );

		return pClassPointer;
	};

};

UClass* UPhysicalMaterialPropertyBase::pClassPointer = NULL;

// Class Engine.PhysicsAsset
// 0x002C (0x006C - 0x0040)
class UPhysicsAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                  		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class URB_BodySetup* >                     BodySetup;                                        		// 0x0044 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class URB_ConstraintSetup* >               ConstraintSetup;                                  		// 0x0050 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UPhysicsAssetInstance*                       DefaultInstance;                                  		// 0x005C (0x0004) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UcAPBLockedBone* >                   LockedBones;                                      		// 0x0060 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicsAsset" );

		return pClassPointer;
	};

};

UClass* UPhysicsAsset::pClassPointer = NULL;

// Class Engine.PhysicsAssetInstance
// 0x0078 (0x00B8 - 0x0040)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                RootBodyIndex;                                    		// 0x0044 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class URB_BodyInstance* >                  Bodies;                                           		// 0x0048 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class URB_ConstraintInstance* >            Constraints;                                      		// 0x0054 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FMap_Mirror                                 CollisionDisableTable;                            		// 0x0060 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LinearSpringScale;                                		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearDampingScale;                               		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearForceLimitScale;                            		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularSpringScale;                               		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularDampingScale;                              		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularForceLimitScale;                           		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bInitBodies : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicsAssetInstance" );

		return pClassPointer;
	};

	class URB_ConstraintInstance* FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset );
	class URB_BodyInstance* FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset );
	void SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh );
	void SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh );
	void SetNamedRBBoneSprings ( unsigned long bEnable, TArray< struct FName > BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp );
	void SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetNamedBodiesFixed ( unsigned long bNewFixed, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement );
	void SetAllBodiesFixed ( unsigned long bNewFixed );
	float GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh );
	void SetAllMotorsAngularDriveStrength ( float InAngularSpringStrength, float InAngularDampingStrength, float InAngularForceLimitStrength, class USkeletalMeshComponent* SkelMeshComp );
	void SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale );
	void SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale );
};

UClass* UPhysicsAssetInstance::pClassPointer = NULL;

// Class Engine.PhysicsLODVerticalDestructible
// 0x0008 (0x0048 - 0x0040)
class UPhysicsLODVerticalDestructible : public UObject
{
public:
	int                                                MaxDynamicChunkCount;                             		// 0x0040 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )
	float                                              DebrisLifetime;                                   		// 0x0044 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicsLODVerticalDestructible" );

		return pClassPointer;
	};

};

UClass* UPhysicsLODVerticalDestructible::pClassPointer = NULL;

// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x0044 - 0x0040)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                               		// 0x0040 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicsLODVerticalEmitter" );

		return pClassPointer;
	};

};

UClass* UPhysicsLODVerticalEmitter::pClassPointer = NULL;

// Class Engine.RB_BodyInstance
// 0x00B0 (0x00F0 - 0x0040)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x0040 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                BodyIndex;                                        		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Velocity;                                         		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviousVelocity;                                 		// 0x0054 (0x000C) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BodyData;                                         		// 0x0064 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpring;                                       		// 0x0068 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpringKinActor;                               		// 0x006C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableBoneSpringLinear : 1;                      		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableBoneSpringAngular : 1;                     		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableOnOverextension : 1;                      		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                  		// 0x0070 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTeleportOnOverextension : 1;                     		// 0x0070 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseKinActorForBoneSpring : 1;                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;          		// 0x0070 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bOnlyCollideWithPawns : 1;                        		// 0x0070 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableCollisionResponse : 1;                     		// 0x0070 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPushBody : 1;                                    		// 0x0070 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsTrigger : 1;                                   		// 0x0070 (0x0004) [0x0000000000000000] [0x00000400] 
	float                                              BoneLinearSpring;                                 		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneLinearDamping;                                		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularSpring;                                		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularDamping;                               		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverextensionThreshold;                           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomGravityFactor;                              		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastEffectPlayedTime;                             		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContactReportForceThreshold;                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRigidBodyState                             RBAbsorbState;                                    		// 0x0098 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              fAbsorbRemaining;                                 		// 0x00D4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FsAPBCollision                              APBCollision;                                     		// 0x00D8 (0x0014) [0x0000000000000000]              
	struct FPointer                                    BodyData_KinematicShadow;                         		// 0x00EC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_BodyInstance" );

		return pClassPointer;
	};

	void SetContactReportForceThreshold ( float Threshold );
	void EnableCollisionResponse ( unsigned long bEnableResponse );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	void SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget );
	void SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping );
	void EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget );
	struct FVector GetUnrealWorldAngularVelocity ( );
	struct FVector GetUnrealWorldVelocity ( );
	struct FMatrix GetUnrealWorldTM ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	bool IsValidBodyInstance ( );
	bool IsFixed ( );
	void SetFixed ( unsigned long bNewFixed );
	void SetAwake ( unsigned long bAwake );
	void SetGravityResponse ( unsigned long bGravityResponse );
	void SetIsTrigger ( unsigned long bNewIsTrigger );
	void SetAPBCollision ( struct FsAPBCollision newAPBCollision );
};

UClass* URB_BodyInstance::pClassPointer = NULL;

// Class Engine.RB_ConstraintSetup
// 0x00CC (0x010C - 0x0040)
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                        		// 0x0040 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ConstraintBone1;                                  		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ConstraintBone2;                                  		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Pos1;                                             		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PriAxis1;                                         		// 0x0064 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis1;                                         		// 0x0070 (0x000C) [0x0000000000000000]              
	struct FName                                       Pos2BaseBone;                                     		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Pos2;                                             		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PriAxis2;                                         		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis2;                                         		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot1;                                     		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot2;                                     		// 0x00B4 (0x000C) [0x0000000000000000]              
	unsigned long                                      bEnableProjection : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLinearLimitSoft : 1;                             		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLinearBreakable : 1;                             		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSwingLimited : 1;                                		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTwistLimited : 1;                                		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSwingLimitSoft : 1;                              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTwistLimitSoft : 1;                              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAngularBreakable : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsPulley : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMaintainMinDistance : 1;                         		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIsAnchor : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIsFixedWhenAnchored : 1;                         		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	struct FLinearDOFSetup                             LinearXSetup;                                     		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearYSetup;                                     		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearZSetup;                                     		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitStiffness;                             		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitDamping;                               		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearBreakThreshold;                             		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing1LimitAngle;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing2LimitAngle;                                 		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitAngle;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitStiffness;                              		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitDamping;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitStiffness;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitDamping;                                		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularBreakThreshold;                            		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PulleyRatio;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_ConstraintSetup" );

		return pClassPointer;
	};

};

UClass* URB_ConstraintSetup::pClassPointer = NULL;

// Class Engine.RB_BSJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_BSJointSetup" );

		return pClassPointer;
	};

};

UClass* URB_BSJointSetup::pClassPointer = NULL;

// Class Engine.RB_ConstraintActor
// 0x001C (0x0258 - 0x023C)
class ARB_ConstraintActor : public AActor
{
public:
	class AActor*                                      ConstraintActor1;                                 		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ConstraintActor2;                                 		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_ConstraintSetup*                         ConstraintSetup;                                  		// 0x0244 (0x0004) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	class URB_ConstraintInstance*                      ConstraintInstance;                               		// 0x0248 (0x0004) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	unsigned long                                      bDisableCollision : 1;                            		// 0x024C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateActor1RefFrame : 1;                        		// 0x024C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUpdateActor2RefFrame : 1;                        		// 0x024C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      PulleyPivotActor1;                                		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PulleyPivotActor2;                                		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_ConstraintActor" );

		return pClassPointer;
	};

	void OnDestroy ( class USeqAct_Destroy* Action );
	void TermConstraint ( );
	void InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold );
	void SetDisableCollision ( unsigned long NewDisableCollision );
};

UClass* ARB_ConstraintActor::pClassPointer = NULL;

// Class Engine.RB_ConstraintDrawComponent
// 0x0004 (0x01DC - 0x01D8)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                    		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_ConstraintDrawComponent" );

		return pClassPointer;
	};

};

UClass* URB_ConstraintDrawComponent::pClassPointer = NULL;

// Class Engine.RB_ConstraintInstance
// 0x0068 (0x00A8 - 0x0040)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x0044 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                ConstraintIndex;                                  		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x004C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x0050 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bLinearXPositionDrive : 1;                        		// 0x0050 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearXVelocityDrive : 1;                        		// 0x0050 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYPositionDrive : 1;                        		// 0x0050 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYVelocityDrive : 1;                        		// 0x0050 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZPositionDrive : 1;                        		// 0x0050 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZVelocityDrive : 1;                        		// 0x0050 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingPositionDrive : 1;                          		// 0x0050 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingVelocityDrive : 1;                          		// 0x0050 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistPositionDrive : 1;                          		// 0x0050 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistVelocityDrive : 1;                          		// 0x0050 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAngularSlerpDrive : 1;                           		// 0x0050 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTerminated : 1;                                  		// 0x0050 (0x0004) [0x0000000000000000] [0x00001000] 
	struct FPointer                                    ConstraintData;                                   		// 0x0054 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     LinearPositionTarget;                             		// 0x0058 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LinearVelocityTarget;                             		// 0x0064 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveSpring;                                		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveDamping;                               		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveForceLimit;                            		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FQuat                                       AngularPositionTarget;                            		// 0x007C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AngularVelocityTarget;                            		// 0x008C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveSpring;                               		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveDamping;                              		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveForceLimit;                           		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    DummyKinActor;                                    		// 0x00A4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_ConstraintInstance" );

		return pClassPointer;
	};

	void MoveKinActorTransform ( struct FMatrix* NewTM );
	void SetLinearLimitSize ( float NewLimitSize );
	void SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup );
	void SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetAngularVelocityTarget ( struct FVector InVelTarget );
	void SetAngularPositionTarget ( struct FQuat InPosTarget );
	void SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetLinearVelocityTarget ( struct FVector InVelTarget );
	void SetLinearPositionTarget ( struct FVector InPosTarget );
	void SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	void SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	struct FVector GetConstraintLocation ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	void TermConstraint ( );
	void InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 );
};

UClass* URB_ConstraintInstance::pClassPointer = NULL;

// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_DistanceJointSetup" );

		return pClassPointer;
	};

};

UClass* URB_DistanceJointSetup::pClassPointer = NULL;

// Class Engine.RB_Handle
// 0x0053 (0x00AC - 0x0059)
class URB_Handle : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                 		// 0x005C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       GrabbedBoneName;                                  		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x0068 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInHardware : 1;                                  		// 0x006C (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bRotationConstrained : 1;                         		// 0x006C (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInterpolating : 1;                               		// 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FPointer                                    HandleData;                                       		// 0x0070 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    KinActorData;                                     		// 0x0074 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              LinearDamping;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearStiffness;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularStiffness;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Destination;                                      		// 0x0088 (0x000C) [0x0000000000000000]              
	struct FVector                                     StepSize;                                         		// 0x0094 (0x000C) [0x0000000000000000]              
	struct FVector                                     Location;                                         		// 0x00A0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_Handle" );

		return pClassPointer;
	};

	struct FQuat GetOrientation ( );
	void SetOrientation ( struct FQuat NewOrientation );
	void UpdateSmoothLocation ( struct FVector* NewLocation );
	void SetSmoothLocation ( struct FVector NewLocation, float MoveTime );
	void SetLocation ( struct FVector NewLocation );
	void ReleaseComponent ( );
	void GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation );
};

UClass* URB_Handle::pClassPointer = NULL;

// Class Engine.RB_HingeSetup
// 0x0000 (0x010C - 0x010C)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_HingeSetup" );

		return pClassPointer;
	};

};

UClass* URB_HingeSetup::pClassPointer = NULL;

// Class Engine.RB_LineImpulseActor
// 0x0011 (0x024D - 0x023C)
class ARB_LineImpulseActor : public AActor
{
public:
	float                                              ImpulseStrength;                                  		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRange;                                     		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopAtFirstHit : 1;                              		// 0x0244 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UArrowComponent*                             Arrow;                                            		// 0x0248 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      ImpulseCount;                                     		// 0x024C (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_LineImpulseActor" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void FireLineImpulse ( );
};

UClass* ARB_LineImpulseActor::pClassPointer = NULL;

// Class Engine.RB_PrismaticSetup
// 0x0000 (0x010C - 0x010C)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_PrismaticSetup" );

		return pClassPointer;
	};

};

UClass* URB_PrismaticSetup::pClassPointer = NULL;

// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_PulleyJointSetup" );

		return pClassPointer;
	};

};

UClass* URB_PulleyJointSetup::pClassPointer = NULL;

// Class Engine.RB_RadialImpulseActor
// 0x0009 (0x0245 - 0x023C)
class ARB_RadialImpulseActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x023C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                 		// 0x0240 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      ImpulseCount;                                     		// 0x0244 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_RadialImpulseActor" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ARB_RadialImpulseActor::pClassPointer = NULL;

// Class Engine.RB_RadialImpulseComponent
// 0x0014 (0x01EC - 0x01D8)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      ImpulseFalloff;                                   		// 0x01D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseStrength;                                  		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRadius;                                    		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UDrawSphereComponent*                        PreviewSphere;                                    		// 0x01E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_RadialImpulseComponent" );

		return pClassPointer;
	};

	void FireImpulse ( struct FVector Origin );
};

UClass* URB_RadialImpulseComponent::pClassPointer = NULL;

// Class Engine.RB_SkelJointSetup
// 0x0000 (0x010C - 0x010C)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_SkelJointSetup" );

		return pClassPointer;
	};

};

UClass* URB_SkelJointSetup::pClassPointer = NULL;

// Class Engine.RB_Spring
// 0x0053 (0x00AC - 0x0059)
class URB_Spring : public UActorComponent
{
public:
	class UPrimitiveComponent*                         Component1;                                       		// 0x005C (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName1;                                        		// 0x0060 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UPrimitiveComponent*                         Component2;                                       		// 0x0068 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName2;                                        		// 0x006C (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x0074 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x0078 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableForceMassRatio : 1;                        		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FPointer                                    SpringData;                                       		// 0x007C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TimeSinceActivation;                              		// 0x0080 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              MinBodyMass;                                      		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SpringSaturateDist;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringMaxForce;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForceMassRatio;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                          		// 0x0094 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DampSaturateVel;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampMaxForce;                                     		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_Spring" );

		return pClassPointer;
	};

	void Clear ( );
	void SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 );
};

UClass* URB_Spring::pClassPointer = NULL;

// Class Engine.RB_StayUprightSetup
// 0x0000 (0x010C - 0x010C)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_StayUprightSetup" );

		return pClassPointer;
	};

};

UClass* URB_StayUprightSetup::pClassPointer = NULL;

// Class Engine.RB_Thruster
// 0x0008 (0x0244 - 0x023C)
class ARB_Thruster : public AActor
{
public:
	unsigned long                                      bThrustEnabled : 1;                               		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ThrustStrength;                                   		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_Thruster" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ARB_Thruster::pClassPointer = NULL;

// Class Engine.SVehicle
// 0x013C (0x05DC - 0x04A0)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                           		// 0x04A0 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	TArray< class USVehicleWheel* >                    Wheels;                                           		// 0x04A4 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     COMOffset;                                        		// 0x04B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InertiaTensorMultiplier;                          		// 0x04BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStayUpright : 1;                                 		// 0x04C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSuspensionAxis : 1;                           		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUpdateWheelShapes : 1;                           		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bVehicleOnGround : 1;                             		// 0x04C8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bVehicleOnWater : 1;                              		// 0x04C8 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIsInverted : 1;                                  		// 0x04C8 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bChassisTouchingGround : 1;                       		// 0x04C8 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;            		// 0x04C8 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bCanFlip : 1;                                     		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFlipRight : 1;                                   		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsUprighting : 1;                                		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOutputHandbrake : 1;                             		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHoldingDownHandbrake : 1;                        		// 0x04C8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bNonLocalVehicleReplication : 1;                		// 0x04C8 (0x0004) [0x0000000000001022] [0x00002000] ( CPF_Const | CPF_Net | CPF_Native )
	float                                              StayUprightRollResistAngle;                       		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightPitchResistAngle;                      		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightStiffness;                             		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightDamping;                               		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                       		// 0x04DC (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                    		// 0x04E0 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              HeavySuspensionShiftPercent;                      		// 0x04E4 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngularVelocity;                               		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOffGround;                                    		// 0x04F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UprightLiftStrength;                              		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTorqueStrength;                            		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTime;                                      		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightStartTime;                                 		// 0x0500 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             EngineSound;                                      		// 0x0504 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SquealSound;                                      		// 0x0508 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USoundCue*                                   CollisionSound;                                   		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnterVehicleSound;                                		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitVehicleSound;                                 		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionIntervalSecs;                            		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SquealThreshold;                                  		// 0x051C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SquealLatThreshold;                               		// 0x0520 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LatAngleVolumeMult;                               		// 0x0524 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStartOffsetSecs;                            		// 0x0528 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStopOffsetSecs;                             		// 0x052C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastCollisionSoundTime;                           		// 0x0530 (0x0004) [0x0000000000000000]              
	float                                              OutputBrake;                                      		// 0x0534 (0x0004) [0x0000000000000000]              
	float                                              OutputGas;                                        		// 0x0538 (0x0004) [0x0000000000000000]              
	int                                                OutputGear;                                       		// 0x053C (0x0004) [0x0000000000000000]              
	float                                              OutputSteering;                                   		// 0x0540 (0x0004) [0x0000000000000000]              
	float                                              OutputRise;                                       		// 0x0544 (0x0004) [0x0000000000000000]              
	float                                              OutputSprint;                                     		// 0x0548 (0x0004) [0x0000000000000000]              
	float                                              ForwardVel;                                       		// 0x054C (0x0004) [0x0000000000000000]              
	int                                                NumPoweredWheels;                                 		// 0x0550 (0x0004) [0x0000000000000000]              
	struct FVector                                     BaseOffset;                                       		// 0x0554 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CamDist;                                          		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DriverViewPitch;                                  		// 0x0564 (0x0004) [0x0000000000000000]              
	int                                                DriverViewYaw;                                    		// 0x0568 (0x0004) [0x0000000000000000]              
	struct FNonLocalVehicleState                       m_NonLocalVehicleState;                           		// 0x056C (0x001C) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	struct FVehicleState                               VState;                                           		// 0x0588 (0x004C) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x05D4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              RadialImpulseScaling;                             		// 0x05D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SVehicle" );

		return pClassPointer;
	};

	void GetSVehicleDebug ( TArray< struct FString >* DebugInfo );
	float HermiteEval ( float Slip );
	void DisplayWheelsDebug ( class AHUD* HUD, float YL );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	void eventSuspensionHeavyShift ( float Delta );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventDrivingStatusChanged ( );
	void VehiclePlayExitSound ( );
	void VehiclePlayEnterSound ( );
	void StopEngineSoundTimed ( );
	void StopEngineSound ( );
	void StartEngineSoundTimed ( );
	void StartEngineSound ( );
	bool HasWheelsOnGround ( );
	bool TryToDrive ( class APawn* P );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nWeaponType );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void StopVehicleSounds ( );
	void TurnOff ( );
	void eventDestroyed ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	void SetWheelCollision ( int WheelNum, unsigned long bCollision );
};

UClass* ASVehicle::pClassPointer = NULL;

// Class Engine.SVehicleSimBase
// 0x004B (0x00A4 - 0x0059)
class USVehicleSimBase : public UActorComponent
{
public:
	float                                              WheelSuspensionStiffness;                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionDamping;                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionBias;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumSlip;                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumValue;                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteSlip;                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteValue;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumSlip;                             		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumValue;                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteSlip;                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteValue;                           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelInertia;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWheelSpeedOverride : 1;                          		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampedFrictionModel : 1;                        		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoDrive : 1;                                   		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bWheelPropertiesDirty : 1;                      		// 0x008C (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              AutoDriveSteer;                                   		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTorqueMod1;                                    		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              m_fTorqueMod2;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              m_fTorqueMod3;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fTorqueMod4;                                    		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SVehicleSimBase" );

		return pClassPointer;
	};

	float GetLatAsymptoteValue ( );
	float GetLatAsymptoteSlip ( );
	float GetLatExtremumValue ( );
	float GetLatExtremumSlip ( );
	float GetLongAsymptoteValue ( );
	float GetLongAsymptoteSlip ( );
	float GetLongExtremumValue ( );
	float GetLongExtremumSlip ( );
};

UClass* USVehicleSimBase::pClassPointer = NULL;

// Class Engine.SVehicleSimCar
// 0x0038 (0x00DC - 0x00A4)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                               		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                               		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SteerSpeed;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteerAccel;                                       		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseThrottle;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineBrakeFactor;                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBrakeTorque;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsDriving : 1;                                   		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ActualSteering;                                   		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              TimeSinceThrottle;                                		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SVehicleSimCar" );

		return pClassPointer;
	};

};

UClass* USVehicleSimCar::pClassPointer = NULL;

// Class Engine.SVehicleSimTank
// 0x0030 (0x010C - 0x00DC)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                     		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              RightTrackVel;                                    		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              LeftTrackTorque;                                  		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              RightTrackTorque;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              MaxEngineTorque;                                  		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDamping;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InsideTrackTorqueFactor;                          		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringLatStiffnessFactor;                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceThrottle;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnMaxGripReduction;                             		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnGripScaleRate;                                		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTurnInPlaceOnSteer : 1;                          		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SVehicleSimTank" );

		return pClassPointer;
	};

};

UClass* USVehicleSimTank::pClassPointer = NULL;

// Class Engine.SVehicleWheel
// 0x0104 (0x0150 - 0x004C)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotorTorque;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrakeTorque;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChassisTorque;                                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPoweredWheel : 1;                                		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHoverWheel : 1;                                  		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCollidesVehicles : 1;                            		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCollidesPawns : 1;                               		// 0x005C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bAffectedByHandbrake : 1;                       		// 0x005C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bWheelPropertiesDirty : 1;                      		// 0x005C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsSquealing : 1;                                 		// 0x005C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bWheelOnGround : 1;                               		// 0x005C (0x0004) [0x0000000000000000] [0x00000080] 
	struct FName                                       m_SuspensionSkelControlName;                      		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_OrientationSkelControlName;                     		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vMeshOffset;                                    		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteerFactor;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SkelControlName;                                  		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlWheel*                           WheelControl;                                     		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoneOffset;                                       		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRadius;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravel;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionSpeed;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             WheelParticleSystem;                              		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Side;                                             		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongSlipFactor;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatSlipFactor;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLongSlipFactor;                          		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLatSlipFactor;                           		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactor;                                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WheelPosition;                                    		// 0x00C8 (0x000C) [0x0000000000000000]              
	float                                              SpinVel;                                          		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              LongSlipRatio;                                    		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              LatSlipAngle;                                     		// 0x00DC (0x0004) [0x0000000000000000]              
	struct FVector                                     ContactNormal;                                    		// 0x00E0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LongDirection;                                    		// 0x00EC (0x000C) [0x0000000000000000]              
	struct FVector                                     LatDirection;                                     		// 0x00F8 (0x000C) [0x0000000000000000]              
	float                                              ContactForce;                                     		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              LongImpulse;                                      		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              LatImpulse;                                       		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              DesiredSuspensionPosition;                        		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              SuspensionPosition;                               		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              CurrentRotation;                                  		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                ContactAudioMaterial;                             		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                ContactVFXMaterial;                               		// 0x0120 (0x0004) [0x0000000000000000]              
	struct FVector                                     ContactVFXPoint;                                  		// 0x0124 (0x000C) [0x0000000000000000]              
	class AEmitter*                                    ContactVFXEmitter;                                		// 0x0130 (0x0004) [0x0000000000000000]              
	class AEmitter*                                    ContactVFXEmitterFading;                          		// 0x0134 (0x0004) [0x0000000000000000]              
	struct FPointer                                    WheelShape;                                       		// 0x0138 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                WheelMaterialIndex;                               		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UClass*                                      WheelPSCClass;                                    		// 0x0140 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    WheelParticleComp;                                		// 0x0144 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       SlipParticleParamName;                            		// 0x0148 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SVehicleWheel" );

		return pClassPointer;
	};

	float GetParkedSlipFactor ( );
	float GetHandbrakeLatSlipFactor ( );
	float GetHandbrakeLongSlipFactor ( );
	float GetLatSlipFactor ( );
	float GetLongSlipFactor ( );
	float GetSuspensionTravel ( );
	float GetWheelRadius ( );
	float GetChassisTorque ( );
	float GetBrakeTorque ( );
	float GetMotorTorque ( );
	float GetSteerValue ( );
};

UClass* USVehicleWheel::pClassPointer = NULL;

// Class Engine.VehicleNetRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UVehicleNetRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.VehicleNetRenderingComponent" );

		return pClassPointer;
	};

};

UClass* UVehicleNetRenderingComponent::pClassPointer = NULL;

// Class Engine.ForceFieldShape
// 0x0000 (0x0040 - 0x0040)
class UForceFieldShape : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ForceFieldShape" );

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Dimension );
	void eventFillBySphere ( float Radius );
};

UClass* UForceFieldShape::pClassPointer = NULL;

// Class Engine.ForceFieldShapeBox
// 0x0004 (0x0044 - 0x0040)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                            		// 0x0040 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ForceFieldShapeBox" );

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	struct FVector eventGetRadii ( );
};

UClass* UForceFieldShapeBox::pClassPointer = NULL;

// Class Engine.ForceFieldShapeCapsule
// 0x0004 (0x0044 - 0x0040)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                            		// 0x0040 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ForceFieldShapeCapsule" );

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
	float eventGetHeight ( );
};

UClass* UForceFieldShapeCapsule::pClassPointer = NULL;

// Class Engine.ForceFieldShapeSphere
// 0x0004 (0x0044 - 0x0040)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                            		// 0x0040 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ForceFieldShapeSphere" );

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
};

UClass* UForceFieldShapeSphere::pClassPointer = NULL;

// Class Engine.NxForceField
// 0x003C (0x0278 - 0x023C)
class ANxForceField : public AActor
{
public:
	int                                                ExcludeChannel;                                   		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x0240 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x0248 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ForceField;                                       		// 0x024C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x0250 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x025C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0268 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    U2NRotation;                                      		// 0x0274 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxForceField" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ANxForceField::pClassPointer = NULL;

// Class Engine.NxCylindricalForceField
// 0x002C (0x02A4 - 0x0278)
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x029C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02A0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxCylindricalForceField" );

		return pClassPointer;
	};

};

UClass* ANxCylindricalForceField::pClassPointer = NULL;

// Class Engine.NxCylindricalForceFieldCapsule
// 0x0004 (0x02A8 - 0x02A4)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxCylindricalForceFieldCapsule" );

		return pClassPointer;
	};

};

UClass* ANxCylindricalForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxForceFieldGeneric
// 0x00B0 (0x0328 - 0x0278)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0278 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x027C (0x0004) [0x0000000004081008]              ( CPF_ExportObject | CPF_Native | CPF_Component | CPF_EditInline )
	float                                              RoughExtentX;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentY;                                     		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentZ;                                     		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x028C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0290 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x029C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x02A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0308 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0314 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x0324 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxForceFieldGeneric" );

		return pClassPointer;
	};

};

UClass* ANxForceFieldGeneric::pClassPointer = NULL;

// Class Engine.NxForceFieldRadial
// 0x001C (0x0294 - 0x0278)
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0278 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x027C (0x0004) [0x0000000004081008]              ( CPF_ExportObject | CPF_Native | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x028C (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    Kernel;                                           		// 0x0290 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxForceFieldRadial" );

		return pClassPointer;
	};

};

UClass* ANxForceFieldRadial::pClassPointer = NULL;

// Class Engine.NxForceFieldTornado
// 0x0038 (0x02B0 - 0x0278)
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0278 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x027C (0x0004) [0x0000000004081008]              ( CPF_ExportObject | CPF_Native | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x02A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02AC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxForceFieldTornado" );

		return pClassPointer;
	};

};

UClass* ANxForceFieldTornado::pClassPointer = NULL;

// Class Engine.NxGenericForceField
// 0x009C (0x0314 - 0x0278)
class ANxGenericForceField : public ANxForceField
{
public:
	unsigned char                                      Coordinates;                                      		// 0x0278 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x0288 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x0294 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x02F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0300 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x0310 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxGenericForceField" );

		return pClassPointer;
	};

};

UClass* ANxGenericForceField::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldBox
// 0x0010 (0x0324 - 0x0314)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                                  		// 0x0314 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     BoxExtent;                                        		// 0x0318 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxGenericForceFieldBox" );

		return pClassPointer;
	};

};

UClass* ANxGenericForceFieldBox::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldBrush
// 0x00CC (0x0344 - 0x0278)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int                                                ExcludeChannel;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x0280 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Coordinates;                                      		// 0x0281 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0284 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x0290 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x029C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0308 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ForceField;                                       		// 0x0318 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x031C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x0328 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0334 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    LinearKernel;                                     		// 0x0340 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxGenericForceFieldBrush" );

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

UClass* ANxGenericForceFieldBrush::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldCapsule
// 0x000C (0x0320 - 0x0314)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0314 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CapsuleHeight;                                    		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxGenericForceFieldCapsule" );

		return pClassPointer;
	};

};

UClass* ANxGenericForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxRadialForceField
// 0x0014 (0x028C - 0x0278)
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0278 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x0284 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    LinearKernel;                                     		// 0x0288 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxRadialForceField" );

		return pClassPointer;
	};

};

UClass* ANxRadialForceField::pClassPointer = NULL;

// Class Engine.NxRadialCustomForceField
// 0x0008 (0x0294 - 0x028C)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                             		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0290 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxRadialCustomForceField" );

		return pClassPointer;
	};

};

UClass* ANxRadialCustomForceField::pClassPointer = NULL;

// Class Engine.NxTornadoAngularForceField
// 0x0030 (0x02A8 - 0x0278)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x029C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02A4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxTornadoAngularForceField" );

		return pClassPointer;
	};

};

UClass* ANxTornadoAngularForceField::pClassPointer = NULL;

// Class Engine.NxTornadoAngularForceFieldCapsule
// 0x0004 (0x02AC - 0x02A8)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02A8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxTornadoAngularForceFieldCapsule" );

		return pClassPointer;
	};

};

UClass* ANxTornadoAngularForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxTornadoForceField
// 0x002C (0x02A4 - 0x0278)
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x029C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02A0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxTornadoForceField" );

		return pClassPointer;
	};

};

UClass* ANxTornadoForceField::pClassPointer = NULL;

// Class Engine.NxTornadoForceFieldCapsule
// 0x0004 (0x02A8 - 0x02A4)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.NxTornadoForceFieldCapsule" );

		return pClassPointer;
	};

};

UClass* ANxTornadoForceFieldCapsule::pClassPointer = NULL;

// Class Engine.RB_CylindricalForceActor
// 0x0030 (0x026C - 0x023C)
class ARB_CylindricalForceActor : public AActor
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                  		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x0264 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x0264 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x0264 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_CylindricalForceActor" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ARB_CylindricalForceActor::pClassPointer = NULL;

// Class Engine.RB_ForceFieldExcludeVolume
// 0x0004 (0x027C - 0x0278)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_ForceFieldExcludeVolume" );

		return pClassPointer;
	};

};

UClass* ARB_ForceFieldExcludeVolume::pClassPointer = NULL;

// Class Engine.RB_RadialForceActor
// 0x0020 (0x025C - 0x023C)
class ARB_RadialForceActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x023C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwirlStrength;                                    		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinTorque;                                       		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x0250 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	unsigned char                                      RadialForceMode;                                  		// 0x0251 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x0254 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x0254 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x0254 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x0254 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x0254 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct ANxGenericForceFieldBrush_FRBCollisionChannelContainer CollideWithChannels;                              		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_RadialForceActor" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ARB_RadialForceActor::pClassPointer = NULL;

// Class Engine.cDynamicFont
// 0x00A8 (0x01AC - 0x0104)
class UcDynamicFont : public UFont
{
public:
	int                                                m_nWidth;                                         		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHeight;                                        		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nNumTextures;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_nTextureWidth;                                  		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nTextureHeight;                                 		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bFillCacheWithNumbers : 1;                      		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCreateRGB : 1;                                 		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                m_nSlotWidth;                                     		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                m_nSlotHeight;                                    		// 0x0120 (0x0004) [0x0000000000000000]              
	struct FMap_Mirror                                 m_CacheMap;                                       		// 0x0124 (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FCacheSlot >                        m_CacheSlots;                                     		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_CacheQueue;                                     		// 0x016C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDelayedChar >                      m_DelayedChars;                                   		// 0x0178 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    m_pFace;                                          		// 0x0184 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UcDynamicFontData*                           m_pDynamicFontData;                               		// 0x0188 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPointer >                          m_aBatchedElements1;                              		// 0x018C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          m_aBatchedElements2;                              		// 0x0198 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    m_pCurBatchedElements;                            		// 0x01A4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                m_nCurBatchedElement;                             		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cDynamicFont" );

		return pClassPointer;
	};

};

UClass* UcDynamicFont::pClassPointer = NULL;

// Class Engine.cDynamicFontData
// 0x0010 (0x0050 - 0x0040)
class UcDynamicFontData : public UObject
{
public:
	TArray< unsigned char >                            m_TTFontData;                                     		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMissingCharacterGlyphIndex;                    		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cDynamicFontData" );

		return pClassPointer;
	};

};

UClass* UcDynamicFontData::pClassPointer = NULL;

// Class Engine.cDynamicFontManager
// 0x0010 (0x0050 - 0x0040)
class UcDynamicFontManager : public UObject
{
public:
	TArray< class UcDynamicFont* >                     m_UsedFonts;                                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pLibrary;                                       		// 0x004C (0x0004) [0x0000000000800000]              ( CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cDynamicFontManager" );

		return pClassPointer;
	};

};

UClass* UcDynamicFontManager::pClassPointer = NULL;

// Class Engine.cActorProxiesManager
// 0x00C0 (0x02FC - 0x023C)
class AcActorProxiesManager : public AActor
{
public:
	TArray< class UcActorProxy* >                      aAllProxies;                                      		// 0x023C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    pProxiesGrid;                                     		// 0x0248 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class UcActorProxy* >                      aDistanceVisibleProxies;                          		// 0x024C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class UcActorProxy* >                      aPendingVisibleProxies;                           		// 0x0258 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class UcActorProxy* >                      aNetworkReferencedProxies;                        		// 0x0264 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 aUniqueIDToProxy;                                 		// 0x0270 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PackageMap;                                       		// 0x02AC (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FStProxiesManagerParams                     stParams;                                         		// 0x02B0 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FStProxiesManagerParams                     stParams_replicated;                              		// 0x02C8 (0x0018) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     vViewLocation;                                    		// 0x02E0 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     vViewDirection;                                   		// 0x02EC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              fMaxDebugDistance;                                		// 0x02F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cActorProxiesManager" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void SetParameters ( struct FStProxiesManagerParams newParams );
	void CreateProxy ( class AActor* pActor );
};

UClass* AcActorProxiesManager::pClassPointer = NULL;

// Class Engine.cActorProxy
// 0x006C (0x00AC - 0x0040)
class UcActorProxy : public UObject
{
public:
	class UObject*                                     objArchetype;                                     		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nUniqueID;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FName                                       instanceName;                                     		// 0x0048 (0x0008) [0x0000000000000000]              
	int                                                instanceNetIndex;                                 		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FPointer                                    pInstanceLevel;                                   		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FVector                                     Location;                                         		// 0x0058 (0x000C) [0x0000000000000000]              
	struct FPointer                                    pCurrentGridCell;                                 		// 0x0064 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      RoleWhenInferred;                                 		// 0x0068 (0x0001) [0x0000000000000000]              
	class UcActorProxy*                                masterProxy;                                      		// 0x006C (0x0004) [0x0000000000000000]              
	TArray< class UcActorProxy* >                      childrenProxies;                                  		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      spawnedInstance;                                  		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              fTimeFirstVisible;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	class AActor*                                      debugActor;                                       		// 0x0084 (0x0004) [0x0000000000000000]              
	TArray< struct FStProxyReferencer >                aReferencers;                                     		// 0x0088 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                nCurrentFlags;                                    		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                nCurrentFlags_Children;                           		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FString                                     m_ActiveFeatureBuildingName;                      		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_ActiveFeatureBuilding;                          		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cActorProxy" );

		return pClassPointer;
	};

};

UClass* UcActorProxy::pClassPointer = NULL;

// Class Engine.Prefab
// 0x0020 (0x0060 - 0x0040)
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                    		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UObject* >                           PrefabArchetypes;                                 		// 0x0044 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	unsigned char                                      ScalingRule;                                      		// 0x0050 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class APrefabInstance*                             PrefabInstanceArchetype;                          		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UPrefabSequence*                             PrefabSequence;                                   		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  PrefabPreview;                                    		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Prefab" );

		return pClassPointer;
	};

};

UClass* UPrefab::pClassPointer = NULL;

// Class Engine.PrefabInstance
// 0x011C (0x0358 - 0x023C)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                   		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TemplateVersion;                                  		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ScalingRule;                                      		// 0x0244 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PrefabInstanceState;                              		// 0x0245 (0x0001) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0248 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0284 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceIndexMap
	class UPrefabSequence*                             SequenceInstance;                                 		// 0x02C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_PackageVersion;                                		// 0x02C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_LicenseePackageVersion;                        		// 0x02C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< unsigned char >                            PI_Bytes;                                         		// 0x02CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_CompleteObjects;                               		// 0x02D8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_ReferencedObjects;                             		// 0x02E4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           PI_SavedNames;                                    		// 0x02F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x02FC (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap
	struct FString                                     m_ActiveFeatureBuildingName;                      		// 0x0338 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_ActiveFeatureBuilding;                          		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_isPooled : 1;                                   		// 0x0348 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	TArray< class UObject* >                           PI_ReplacementObjects;                            		// 0x034C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PrefabInstance" );

		return pClassPointer;
	};

	void InstancePrefab ( class UPrefab* InPrefab, TArray< struct FstReplacement > aReplacements );
};

UClass* APrefabInstance::pClassPointer = NULL;

// Class Engine.SequenceObject
// 0x0050 (0x0090 - 0x0040)
class USequenceObject : public UObject
{
public:
	int                                                ObjInstanceVersion;                               		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USequence*                                   ParentSequence;                                   		// 0x0044 (0x0004) [0x0000000001000002]              ( CPF_Const )
	int                                                ObjPosX;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                ObjPosY;                                          		// 0x004C (0x0004) [0x0000000000000000]              
	struct FString                                     ObjName;                                          		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ObjCategory;                                      		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ObjRemoveInProject;                               		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      ObjColor;                                         		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     ObjComment;                                       		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDeletable : 1;                                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDrawFirst : 1;                                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDrawLast : 1;                                    		// 0x0084 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOutputObjCommentToScreen : 1;                    		// 0x0084 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSuppressAutoComment : 1;                         		// 0x0084 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                DrawWidth;                                        		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceObject" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsPastingIntoLevelSequenceAllowed ( );
	bool eventIsValidLevelSequenceObject ( );
	class AWorldInfo* GetWorldInfo ( );
	void ScriptLog ( struct FString LogText, unsigned long bWarning );
};

UClass* USequenceObject::pClassPointer = NULL;

// Class Engine.SequenceOp
// 0x0040 (0x00D0 - 0x0090)
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLatentExecution : 1;                             		// 0x0090 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAutoActivateOutputLinks : 1;                     		// 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FSeqOpInputLink >                   InputLinks;                                       		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqOpOutputLink >                  OutputLinks;                                      		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqVarLink >                       VariableLinks;                                    		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqEventLink >                     EventLinks;                                       		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerIndex;                                      		// 0x00C4 (0x0004) [0x0000000001002000]              ( CPF_Transient )
	int                                                ActivateCount;                                    		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SearchTag;                                        		// 0x00CC (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceOp" );

		return pClassPointer;
	};

	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateOutputLink ( int OutputIdx );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars );
	void GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData );
	void GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};

UClass* USequenceOp::pClassPointer = NULL;

// Class Engine.SequenceAction
// 0x0018 (0x00E8 - 0x00D0)
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                      		// 0x00D0 (0x0008) [0x0000000000000000]              
	unsigned long                                      bCallHandler : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UObject* >                           Targets;                                          		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceAction" );

		return pClassPointer;
	};

};

UClass* USequenceAction::pClassPointer = NULL;

// Class Engine.cSeqAct_GetSockets
// 0x0018 (0x0100 - 0x00E8)
class UcSeqAct_GetSockets : public USequenceAction
{
public:
	struct FString                                     SocketsSubName;                                   		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UcSocketAttachment* >                Sockets;                                          		// 0x00F4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cSeqAct_GetSockets" );

		return pClassPointer;
	};

};

UClass* UcSeqAct_GetSockets::pClassPointer = NULL;

// Class Engine.cSocketAttachment
// 0x0010 (0x0050 - 0x0040)
class UcSocketAttachment : public UObject
{
public:
	class AActor*                                      LinkedActor;                                      		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      LinkedSkeletalMeshComponent;                      		// 0x0044 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       LinkedBone;                                       		// 0x0048 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cSocketAttachment" );

		return pClassPointer;
	};

	void InitSocket ( class AActor* newLinkedActor, class USkeletalMeshComponent* newSkelComp, struct FName newLinkedBone );
};

UClass* UcSocketAttachment::pClassPointer = NULL;

// Class Engine.SequenceVariable
// 0x0014 (0x00A4 - 0x0090)
class USequenceVariable : public USequenceObject
{
public:
	struct FString                                     APBVarName;                                       		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       VarName;                                          		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceVariable" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USequenceVariable::pClassPointer = NULL;

// Class Engine.InterpData
// 0x003C (0x00E0 - 0x00A4)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                     		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              PathBuildTime;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	TArray< class UInterpGroup* >                      InterpGroups;                                     		// 0x00AC (0x000C) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x00B8 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UInterpFilter* >                     InterpFilters;                                    		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpFilter*                               SelectedFilter;                                   		// 0x00C8 (0x0004) [0x0000000000000000]              
	TArray< class UInterpFilter* >                     DefaultFilters;                                   		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              EdSectionStart;                                   		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              EdSectionEnd;                                     		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InterpData" );

		return pClassPointer;
	};

};

UClass* UInterpData::pClassPointer = NULL;

// Class Engine.Sequence
// 0x0054 (0x0124 - 0x00D0)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                          		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class USequenceObject* >                   SequenceObjects;                                  		// 0x00D4 (0x000C) [0x000000000040000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink )
	TArray< class USequenceOp* >                       ActiveSequenceOps;                                		// 0x00E0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USequence* >                         NestedSequences;                                  		// 0x00EC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USequenceEvent* >                    UnregisteredEvents;                               		// 0x00F8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FActivateOp >                       DelayedActivatedOps;                              		// 0x0104 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                DefaultViewX;                                     		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                DefaultViewY;                                     		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              DefaultViewZoom;                                  		// 0x011C (0x0004) [0x0000000000000000]              
	class UcVisualFXComponent*                         VFXComponentOwner;                                		// 0x0120 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Sequence" );

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bInEnabled );
	void Reset ( );
	void FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, TArray< class USequenceObject* >* OutputObjects );
};

UClass* USequence::pClassPointer = NULL;

// Class Engine.PrefabSequence
// 0x0004 (0x0128 - 0x0124)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                      		// 0x0124 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PrefabSequence" );

		return pClassPointer;
	};

	class APrefabInstance* GetOwnerPrefab ( );
	void SetOwnerPrefab ( class APrefabInstance* InOwner );
};

UClass* UPrefabSequence::pClassPointer = NULL;

// Class Engine.PrefabSequenceContainer
// 0x0000 (0x0124 - 0x0124)
class UPrefabSequenceContainer : public USequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PrefabSequenceContainer" );

		return pClassPointer;
	};

};

UClass* UPrefabSequenceContainer::pClassPointer = NULL;

// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ActivateRemoteEvent" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ActivateRemoteEvent::pClassPointer = NULL;

// Class Engine.SeqAct_Latent
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_Latent : public USequenceAction
{
public:
	TArray< class AActor* >                            LatentActors;                                     		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAborted : 1;                                     		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Latent" );

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void AbortFor ( class AActor* latentActor );
};

UClass* USeqAct_Latent::pClassPointer = NULL;

// Class Engine.SeqAct_ActorFactory
// 0x0044 (0x013C - 0x00F8)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsSpawning : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAttachToSpawnPoint : 1;                          		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCheckSpawnCollision : 1;                         		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class UActorFactory*                               Factory;                                          		// 0x00FC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      PointSelection;                                   		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           SpawnPoints;                                      		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SpawnLocations;                                   		// 0x0110 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SpawnOrientations;                                		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                SpawnCount;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnDelay;                                       		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSpawnIdx;                                     		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                SpawnedCount;                                     		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              RemainingDelay;                                   		// 0x0138 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ActorFactory" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ActorFactory::pClassPointer = NULL;

// Class Engine.SeqAct_ActorFactoryEx
// 0x0000 (0x013C - 0x013C)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ActorFactoryEx" );

		return pClassPointer;
	};

};

UClass* USeqAct_ActorFactoryEx::pClassPointer = NULL;

// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetSequenceVariable" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_SetSequenceVariable::pClassPointer = NULL;

// Class Engine.SeqAct_AddFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_AddFloat" );

		return pClassPointer;
	};

};

UClass* USeqAct_AddFloat::pClassPointer = NULL;

// Class Engine.SeqAct_AddInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_AddInt" );

		return pClassPointer;
	};

};

UClass* USeqAct_AddInt::pClassPointer = NULL;

// Class Engine.SeqAct_AIMoveToActor
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_AIMoveToActor" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_AIMoveToActor::pClassPointer = NULL;

// Class Engine.SeqAct_ApplySoundNode
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  ApplyNode;                                        		// 0x00EC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ApplySoundNode" );

		return pClassPointer;
	};

};

UClass* USeqAct_ApplySoundNode::pClassPointer = NULL;

// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_AttachToEvent" );

		return pClassPointer;
	};

};

UClass* USeqAct_AttachToEvent::pClassPointer = NULL;

// Class Engine.SeqAct_CameraFade
// 0x0024 (0x010C - 0x00E8)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   FadeAlpha;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTime;                                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPersistFade : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              FadeTimeRemaining;                                		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACamera* >                           CachedCameras;                                    		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CameraFade" );

		return pClassPointer;
	};

};

UClass* USeqAct_CameraFade::pClassPointer = NULL;

// Class Engine.SeqAct_CameraLookAt
// 0x0034 (0x011C - 0x00E8)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysFocus : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAdjustCamera : 1;                                		// 0x00E8 (0x0004) [0x0000000020000000] [0x00000004] ( CPF_Deprecated )
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreTrace : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectHead : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bToggleGodMode : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bLeaveCameraRotation : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUsedTimer : 1;                                   		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCheckLineOfSight : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	struct FVector2D                                   InterpSpeedRange;                                 		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   InFocusFOV;                                       		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FocusBoneName;                                    		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TextDisplay;                                      		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TotalTime;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraFOV;                                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemainingTime;                                    		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CameraLookAt" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_CameraLookAt::pClassPointer = NULL;

// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                            		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              FloatResult;                                      		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CastToFloat" );

		return pClassPointer;
	};

};

UClass* USeqAct_CastToFloat::pClassPointer = NULL;

// Class Engine.SeqAct_CastToInt
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Value;                                            		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CastToInt" );

		return pClassPointer;
	};

};

UClass* USeqAct_CastToInt::pClassPointer = NULL;

// Class Engine.SeqAct_CauseDamage
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_CauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CauseDamage" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_CauseDamage::pClassPointer = NULL;

// Class Engine.SeqAct_CauseDamageRadial
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_CauseDamageRadial : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDamageFalloff : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CauseDamageRadial" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_CauseDamageRadial::pClassPointer = NULL;

// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x00ED - 0x00E8)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                               		// 0x00E8 (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bBlockActors : 1;                                 		// 0x00E8 (0x0004) [0x0000000000020003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x00E8 (0x0004) [0x0000000000020003] [0x00000004] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      CollisionType;                                    		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ChangeCollision" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ChangeCollision::pClassPointer = NULL;

// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CommitMapChange" );

		return pClassPointer;
	};

};

UClass* USeqAct_CommitMapChange::pClassPointer = NULL;

// Class Engine.SeqAct_CrossFadeMusicTracks
// 0x0044 (0x013C - 0x00F8)
class USeqAct_CrossFadeMusicTracks : public USeqAct_Latent
{
public:
	struct FName                                       TrackBankName;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CurrTrackType;                                    		// 0x0100 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             CurrPlayingTrack;                                 		// 0x0108 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              AdjustVolumeDuration;                             		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeLevel;                                		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              NextTrackToPlayAt;                                		// 0x0114 (0x0004) [0x0000000000000000]              
	struct FMusicTrackStruct                           NextTrackToPlay;                                  		// 0x0118 (0x0024) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CrossFadeMusicTracks" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void StopAllMusicManagerSounds ( );
	void ClientSideCrossFadeTrackImmediately ( struct FMusicTrackStruct* TrackToPlay );
	void CrossFadeTrack ( struct FMusicTrackStruct* TrackToPlay );
};

UClass* USeqAct_CrossFadeMusicTracks::pClassPointer = NULL;

// Class Engine.SeqAct_CrowdSpawner
// 0x0118 (0x0210 - 0x00F8)
class USeqAct_CrowdSpawner : public USeqAct_Latent
{
public:
	unsigned long                                      bSpawningActive : 1;                              		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConformToBSP : 1;                                		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConformToWorld : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSpawnAtEdge : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDrawDebugInfo : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              SpawnRate;                                        		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnNum;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Remainder;                                        		// 0x0108 (0x0004) [0x0000000000000000]              
	class UClass*                                      AgentClass;                                       		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              AwareRadius;                                      		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvoidOtherStrength;                               		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvoidOtherRadius;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MatchVelStrength;                                 		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToPathStrength;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowPathStrength;                               		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PathDistance;                                     		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ToAttractorStrength;                              		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinVelDamping;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxVelDamping;                                    		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ActionDuration;                                   		// 0x0138 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       ActionInterval;                                   		// 0x0154 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetActionInterval;                             		// 0x0170 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FName >                             ActionAnimNames;                                  		// 0x018C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TargetActionAnimNames;                            		// 0x0198 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       SpawnAnimName;                                    		// 0x01A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             DeathAnimNames;                                   		// 0x01AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ActionBlendTime;                                  		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReActionDelay;                                    		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotateToTargetSpeed;                              		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedBlendStart;                                  		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedBlendEnd;                                    		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimVelRate;                                      		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYawRate;                                       		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               FlockMesh;                                        		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          FlockAnimSets;                                    		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       WalkAnimName;                                     		// 0x01E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RunAnimName;                                      		// 0x01EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   FlockAnimTree;                                    		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Health;                                           		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExplosiveDeathEffect;                             		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosiveDeathEffectScale;                        		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACrowdAgent* >                       SpawnedList;                                      		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_CrowdSpawner" );

		return pClassPointer;
	};

	class ACrowdAgent* eventSpawnAgent ( class AActor* SpawnLoc );
};

UClass* USeqAct_CrowdSpawner::pClassPointer = NULL;

// Class Engine.SeqAct_Delay
// 0x0014 (0x010C - 0x00F8)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              DefaultDuration;                                  		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Duration;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x0104 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RemainingTime;                                    		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Delay" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_Delay::pClassPointer = NULL;

// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentIdx;                                       		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SwitchDelay;                                      		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextLinkTime;                                     		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_DelaySwitch" );

		return pClassPointer;
	};

};

UClass* USeqAct_DelaySwitch::pClassPointer = NULL;

// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_DivideFloat" );

		return pClassPointer;
	};

};

UClass* USeqAct_DivideFloat::pClassPointer = NULL;

// Class Engine.SeqAct_DivideInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_DivideInt" );

		return pClassPointer;
	};

};

UClass* USeqAct_DivideInt::pClassPointer = NULL;

// Class Engine.SeqAct_FinishSequence
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                      		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_FinishSequence" );

		return pClassPointer;
	};

};

UClass* USeqAct_FinishSequence::pClassPointer = NULL;

// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ForceGarbageCollection" );

		return pClassPointer;
	};

};

UClass* USeqAct_ForceGarbageCollection::pClassPointer = NULL;

// Class Engine.SeqAct_ForceMaterialMipsResident
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_ForceMaterialMipsResident : public USeqAct_Latent
{
public:
	float                                              ForceDuration;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                ForceMaterials;                                   		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              RemainingTime;                                    		// 0x0108 (0x0004) [0x0000000000000000]              
	TArray< class UTexture2D* >                        ModifiedTextures;                                 		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ForceMaterialMipsResident" );

		return pClassPointer;
	};

};

UClass* USeqAct_ForceMaterialMipsResident::pClassPointer = NULL;

// Class Engine.SeqAct_Gate
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                AutoCloseCount;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Gate" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_Gate::pClassPointer = NULL;

// Class Engine.SeqAct_GetDistance
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                         		// 0x00E8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_GetDistance" );

		return pClassPointer;
	};

};

UClass* USeqAct_GetDistance::pClassPointer = NULL;

// Class Engine.SeqAct_GetProperty
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                     		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_GetProperty" );

		return pClassPointer;
	};

};

UClass* USeqAct_GetProperty::pClassPointer = NULL;

// Class Engine.SeqAct_GetVelocity
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              Velocity;                                         		// 0x00E8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_GetVelocity" );

		return pClassPointer;
	};

};

UClass* USeqAct_GetVelocity::pClassPointer = NULL;

// Class Engine.SeqAct_Interp
// 0x0074 (0x016C - 0x00F8)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00F8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorTransforms
	float                                              PlayRate;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Position;                                         		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              ForceStartPosition;                               		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0140 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPaused : 1;                                      		// 0x0140 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsBeingEdited : 1;                               		// 0x0140 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x0140 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRewindOnPlay : 1;                                		// 0x0140 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRewindOnStop : 1;                                		// 0x0140 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNoResetOnRewind : 1;                             		// 0x0140 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                      		// 0x0140 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bReversePlayback : 1;                             		// 0x0140 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bInterpForPathBuilding : 1;                       		// 0x0140 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bForceStartPos : 1;                               		// 0x0140 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x0140 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                      		// 0x0140 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIsSkippable : 1;                                 		// 0x0140 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	TArray< class ACoverLink* >                        LinkedCover;                                      		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UInterpData*                                 InterpData;                                       		// 0x0150 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UInterpGroupInst* >                  GroupInst;                                        		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      ReplicatedActorClass;                             		// 0x0160 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AMatineeActor*                               ReplicatedActor;                                  		// 0x0164 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PreferredSplitScreenNum;                          		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Interp" );

		return pClassPointer;
	};

	void Reset ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	void AddPlayerToDirectorTracks ( class APlayerController* PC );
	void Stop ( );
	void SetPosition ( float NewPosition, unsigned long bJump );
};

UClass* USeqAct_Interp::pClassPointer = NULL;

// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bObjectFound : 1;                                 		// 0x00E8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_IsInObjectList" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_IsInObjectList::pClassPointer = NULL;

// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_LevelStreamingBase" );

		return pClassPointer;
	};

};

UClass* USeqAct_LevelStreamingBase::pClassPointer = NULL;

// Class Engine.SeqAct_LevelStreaming
// 0x0010 (0x010C - 0x00FC)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LevelName;                                        		// 0x0100 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_LevelStreaming" );

		return pClassPointer;
	};

};

UClass* USeqAct_LevelStreaming::pClassPointer = NULL;

// Class Engine.SeqAct_LevelVisibility
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelName;                                        		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0104 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_LevelVisibility" );

		return pClassPointer;
	};

};

UClass* USeqAct_LevelVisibility::pClassPointer = NULL;

// Class Engine.SeqAct_Log
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncludeObjComment : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              TargetDuration;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetOffset;                                     		// 0x00F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Log" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_Log::pClassPointer = NULL;

// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                 		// 0x00E8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ModifyObjectList" );

		return pClassPointer;
	};

};

UClass* USeqAct_ModifyObjectList::pClassPointer = NULL;

// Class Engine.SeqAct_MultiLevelStreaming
// 0x0010 (0x010C - 0x00FC)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray< struct FLevelStreamingNameCombo >          Levels;                                           		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUnloadAllOtherLevels : 1;                        		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_MultiLevelStreaming" );

		return pClassPointer;
	};

};

UClass* USeqAct_MultiLevelStreaming::pClassPointer = NULL;

// Class Engine.SeqAct_MultiplyFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_MultiplyFloat" );

		return pClassPointer;
	};

};

UClass* USeqAct_MultiplyFloat::pClassPointer = NULL;

// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_MultiplyInt" );

		return pClassPointer;
	};

};

UClass* USeqAct_MultiplyInt::pClassPointer = NULL;

// Class Engine.SeqAct_ParticleEventGenerator
// 0x0048 (0x0130 - 0x00E8)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseEmitterLocation : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00EC (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             EventNames;                                       		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              EventTime;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FVector                                     EventLocation;                                    		// 0x0100 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventDirection;                                   		// 0x010C (0x000C) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x0118 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x0124 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ParticleEventGenerator" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ParticleEventGenerator::pClassPointer = NULL;

// Class Engine.SeqAct_PlayCameraAnim
// 0x001C (0x0114 - 0x00F8)
class USeqAct_PlayCameraAnim : public USeqAct_Latent
{
public:
	class UCameraAnim*                                 CameraAnim;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomStartTime : 1;                             		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x00FC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rate;                                             		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntensityScale;                                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimTimeRemaining;                                		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_PlayCameraAnim" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_PlayCameraAnim::pClassPointer = NULL;

// Class Engine.SeqAct_PlayFaceFXAnim
// 0x001C (0x0104 - 0x00E8)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_PlayFaceFXAnim" );

		return pClassPointer;
	};

};

UClass* USeqAct_PlayFaceFXAnim::pClassPointer = NULL;

// Class Engine.SeqAct_PlaySound
// 0x005C (0x0154 - 0x00F8)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraDelay;                                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundDuration;                                    		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeInTime;                                       		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMultiplier;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x0114 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FString                                     strWwiseEventPlay;                                		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     strWwiseEventStop;                                		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     strWwiseRTPCName1;                                		// 0x0130 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fWwiseRTPCValue1;                                 		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     strWwiseRTPCName2;                                		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fWwiseRTPCValue2;                                 		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_AKGameObjectID;                                 		// 0x0150 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_PlaySound" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_PlaySound::pClassPointer = NULL;

// Class Engine.SeqAct_Possess
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                    		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bKillOldPawn : 1;                                 		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTryToLeaveVehicle : 1;                           		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Possess" );

		return pClassPointer;
	};

};

UClass* USeqAct_Possess::pClassPointer = NULL;

// Class Engine.SeqAct_PrepareMapChange
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             InitiallyLoadedSecondaryLevelNames;               		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsHighPriority : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x010C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_PrepareMapChange" );

		return pClassPointer;
	};

};

UClass* USeqAct_PrepareMapChange::pClassPointer = NULL;

// Class Engine.SeqAct_Switch
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IncrementAmount;                                  		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoDisableLinks : 1;                            		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< int >                                      Indices;                                          		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Switch" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_Switch::pClassPointer = NULL;

// Class Engine.SeqAct_RandomSwitch
// 0x000C (0x010C - 0x0100)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray< int >                                      AutoDisabledIndices;                              		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_RandomSwitch" );

		return pClassPointer;
	};

};

UClass* USeqAct_RandomSwitch::pClassPointer = NULL;

// Class Engine.SeqAct_RangeSwitch
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	TArray< struct FSwitchRange >                      Ranges;                                           		// 0x00E8 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_RangeSwitch" );

		return pClassPointer;
	};

};

UClass* USeqAct_RangeSwitch::pClassPointer = NULL;

// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetBlockRigidBody" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetBlockRigidBody::pClassPointer = NULL;

// Class Engine.SeqAct_SetBool
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetBool" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetBool::pClassPointer = NULL;

// Class Engine.SeqAct_SetCameraTarget
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                     		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FViewTargetTransitionParams                 TransitionParams;                                 		// 0x00EC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetCameraTarget" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetCameraTarget::pClassPointer = NULL;

// Class Engine.SeqAct_SetDOFParams
// 0x0058 (0x0150 - 0x00F8)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ModulateBlurColor;                                		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              OldFalloffExponent;                               		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              OldBlurKernelSize;                                		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              OldMaxNearBlurAmount;                             		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              OldMaxFarBlurAmount;                              		// 0x0134 (0x0004) [0x0000000000000000]              
	struct FColor                                      OldModulateBlurColor;                             		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              OldFocusInnerRadius;                              		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              OldFocusDistance;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	struct FVector                                     OldFocusPosition;                                 		// 0x0144 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetDOFParams" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetDOFParams::pClassPointer = NULL;

// Class Engine.SeqAct_SetFloat
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                           		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              Value;                                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetFloat" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetFloat::pClassPointer = NULL;

// Class Engine.SeqAct_SetInt
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                           		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                Value;                                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetInt" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetInt::pClassPointer = NULL;

// Class Engine.SeqAct_SetMaterial
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialIndex;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetMaterial" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetMaterial::pClassPointer = NULL;

// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetMatInstScalarParam" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetMatInstScalarParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetMatInstTexParam
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    NewTexture;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetMatInstTexParam" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetMatInstTexParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetMatInstVectorParam
// 0x001C (0x0104 - 0x00E8)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                VectorValue;                                      		// 0x00F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetMatInstVectorParam" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetMatInstVectorParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              OldMotionBlurAmount;                              		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetMotionBlurParams" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetMotionBlurParams::pClassPointer = NULL;

// Class Engine.SeqAct_SetMusicTrack
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetMusicTrack : public USequenceAction
{
public:
	struct FName                                       TrackBankName;                                    		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetMusicTrack" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetMusicTrack::pClassPointer = NULL;

// Class Engine.SeqAct_SetObject
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Value;                                            		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetObject" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetObject::pClassPointer = NULL;

// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00E9 - 0x00E8)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	unsigned char                                      newPhysics;                                       		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetPhysics" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetPhysics::pClassPointer = NULL;

// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetRigidBodyIgnoreVehicles" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetRigidBodyIgnoreVehicles::pClassPointer = NULL;

// Class Engine.SeqAct_SetString
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                           		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Value;                                            		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetString" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetString::pClassPointer = NULL;

// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SubtractFloat" );

		return pClassPointer;
	};

};

UClass* USeqAct_SubtractFloat::pClassPointer = NULL;

// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SubtractInt" );

		return pClassPointer;
	};

};

UClass* USeqAct_SubtractInt::pClassPointer = NULL;

// Class Engine.SeqAct_Timer
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                   		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Time;                                             		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Timer" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_Timer::pClassPointer = NULL;

// Class Engine.SeqAct_Toggle
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_Toggle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Toggle" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_Toggle::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleDynamicChannel
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleDynamicChannel : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ToggleDynamicChannel" );

		return pClassPointer;
	};

};

UClass* USeqAct_ToggleDynamicChannel::pClassPointer = NULL;

// Class Engine.SeqAct_Trace
// 0x0030 (0x0118 - 0x00E8)
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTraceWorld : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     TraceExtent;                                      		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartOffset;                                      		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndOffset;                                        		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     HitObject;                                        		// 0x0110 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              Distance;                                         		// 0x0114 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Trace" );

		return pClassPointer;
	};

};

UClass* USeqAct_Trace::pClassPointer = NULL;

// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray< struct FName >                             LevelNames;                                       		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_WaitForLevelsVisible" );

		return pClassPointer;
	};

};

UClass* USeqAct_WaitForLevelsVisible::pClassPointer = NULL;

// Class Engine.SequenceCondition
// 0x0000 (0x00D0 - 0x00D0)
class USequenceCondition : public USequenceOp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceCondition" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USequenceCondition::pClassPointer = NULL;

// Class Engine.SeqCond_CompareBool
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_CompareBool : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_CompareBool" );

		return pClassPointer;
	};

};

UClass* USeqCond_CompareBool::pClassPointer = NULL;

// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x00D8 - 0x00D0)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_CompareFloat" );

		return pClassPointer;
	};

};

UClass* USeqCond_CompareFloat::pClassPointer = NULL;

// Class Engine.SeqCond_CompareInt
// 0x0008 (0x00D8 - 0x00D0)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_CompareInt" );

		return pClassPointer;
	};

};

UClass* USeqCond_CompareInt::pClassPointer = NULL;

// Class Engine.SeqCond_CompareObject
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_CompareObject : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_CompareObject" );

		return pClassPointer;
	};

};

UClass* USeqCond_CompareObject::pClassPointer = NULL;

// Class Engine.SeqCond_GetServerType
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_GetServerType : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_GetServerType" );

		return pClassPointer;
	};

};

UClass* USeqCond_GetServerType::pClassPointer = NULL;

// Class Engine.SeqCond_Increment
// 0x000C (0x00DC - 0x00D0)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueA;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_Increment" );

		return pClassPointer;
	};

};

UClass* USeqCond_Increment::pClassPointer = NULL;

// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x00DC - 0x00D0)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueA;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_IncrementFloat" );

		return pClassPointer;
	};

};

UClass* USeqCond_IncrementFloat::pClassPointer = NULL;

// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_IsInCombat" );

		return pClassPointer;
	};

};

UClass* USeqCond_IsInCombat::pClassPointer = NULL;

// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x00D4 - 0x00D0)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_IsLoggedIn" );

		return pClassPointer;
	};

	bool eventCheckLogins ( );
};

UClass* USeqCond_IsLoggedIn::pClassPointer = NULL;

// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_IsSameTeam" );

		return pClassPointer;
	};

};

UClass* USeqCond_IsSameTeam::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_SwitchBase" );

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

UClass* USeqCond_SwitchBase::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchClass
// 0x000C (0x00DC - 0x00D0)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchClassInfo >                  ClassArray;                                       		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_SwitchClass" );

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

UClass* USeqCond_SwitchClass::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchName
// 0x000C (0x00DC - 0x00D0)
class USeqCond_SwitchName : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchNameCase >                   SupportedValues;                                  		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_SwitchName" );

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

UClass* USeqCond_SwitchName::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchObject
// 0x0010 (0x00E0 - 0x00D0)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchObjectCase >                 SupportedValues;                                  		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      MetaClass;                                        		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqCond_SwitchObject" );

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

UClass* USeqCond_SwitchObject::pClassPointer = NULL;

// Class Engine.SequenceEvent
// 0x0030 (0x0100 - 0x00D0)
class USequenceEvent : public USequenceOp
{
public:
	class AActor*                                      Originator;                                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ActivationTime;                                   		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TriggerCount;                                     		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxTriggerCount;                                  		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReTriggerDelay;                                   		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRegistered : 1;                                  		// 0x00E8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      Priority;                                         		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxWidth;                                         		// 0x00F0 (0x0004) [0x0000000000000000]              
	TArray< struct FQueuedActivationInfo >             QueuedActivations;                                		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceEvent" );

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USequenceEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_AISeeEnemy
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_AISeeEnemy" );

		return pClassPointer;
	};

};

UClass* USeqEvent_AISeeEnemy::pClassPointer = NULL;

// Class Engine.SeqEvent_Console
// 0x0014 (0x0114 - 0x0100)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                 		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EventDesc;                                        		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_Console" );

		return pClassPointer;
	};

};

UClass* USeqEvent_Console::pClassPointer = NULL;

// Class Engine.SeqEvent_ConstraintBroken
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_ConstraintBroken" );

		return pClassPointer;
	};

};

UClass* USeqEvent_ConstraintBroken::pClassPointer = NULL;

// Class Engine.SeqEvent_Destroyed
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_Destroyed" );

		return pClassPointer;
	};

};

UClass* USeqEvent_Destroyed::pClassPointer = NULL;

// Class Engine.SeqEvent_GetInventory
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_GetInventory" );

		return pClassPointer;
	};

};

UClass* USeqEvent_GetInventory::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelBeginning
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_LevelBeginning" );

		return pClassPointer;
	};

};

UClass* USeqEvent_LevelBeginning::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelLoaded
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_LevelLoaded" );

		return pClassPointer;
	};

};

UClass* USeqEvent_LevelLoaded::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelStartup
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_LevelStartup" );

		return pClassPointer;
	};

};

UClass* USeqEvent_LevelStartup::pClassPointer = NULL;

// Class Engine.SeqEvent_Mover
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                     		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_Mover" );

		return pClassPointer;
	};

	void NotifyFinishedOpen ( );
	void NotifyDetached ( class AActor* Other );
	void NotifyAttached ( class AActor* Other );
	void NotifyEncroachingOn ( class AActor* Hit );
	void eventRegisterEvent ( );
};

UClass* USeqEvent_Mover::pClassPointer = NULL;

// Class Engine.SeqEvent_ParticleEvent
// 0x0034 (0x0134 - 0x0100)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	unsigned char                                      EventType;                                        		// 0x0100 (0x0001) [0x0000000000000000]              
	struct FVector                                     EventPosition;                                    		// 0x0104 (0x000C) [0x0000000000000000]              
	float                                              EventEmitterTime;                                 		// 0x0110 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x0114 (0x000C) [0x0000000000000000]              
	float                                              EventParticleTime;                                		// 0x0120 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x0124 (0x000C) [0x0000000000000000]              
	unsigned long                                      UseRelfectedImpactVector : 1;                     		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_ParticleEvent" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqEvent_ParticleEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_ProjectileLanded
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_ProjectileLanded" );

		return pClassPointer;
	};

};

UClass* USeqEvent_ProjectileLanded::pClassPointer = NULL;

// Class Engine.SeqEvent_RemoteEvent
// 0x000C (0x010C - 0x0100)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0100 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FName                                       EventName;                                        		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_RemoteEvent" );

		return pClassPointer;
	};

};

UClass* USeqEvent_RemoteEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_RigidBodyCollision
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                             		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_RigidBodyCollision" );

		return pClassPointer;
	};

};

UClass* USeqEvent_RigidBodyCollision::pClassPointer = NULL;

// Class Engine.SeqEvent_SeeDeath
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_SeeDeath" );

		return pClassPointer;
	};

};

UClass* USeqEvent_SeeDeath::pClassPointer = NULL;

// Class Engine.SeqEvent_SequenceActivated
// 0x000C (0x010C - 0x0100)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                       		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_SequenceActivated" );

		return pClassPointer;
	};

};

UClass* USeqEvent_SequenceActivated::pClassPointer = NULL;

// Class Engine.SeqEvent_TimeOfDay
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_TimeOfDay : public USequenceEvent
{
public:
	int                                                m_fTimeOfDay;                                     		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_TimeOfDay" );

		return pClassPointer;
	};

};

UClass* USeqEvent_TimeOfDay::pClassPointer = NULL;

// Class Engine.SeqEvent_Touch
// 0x0028 (0x0128 - 0x0100)
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bForceOverlapping : 1;                            		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseInstigator : 1;                               		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowDeadPawns : 1;                              		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class AActor* >                            TouchedList;                                      		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_Touch" );

		return pClassPointer;
	};

	void NotifyTouchingPawnDied ( class APawn* P );
	void eventToggled ( );
	bool CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
	bool CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
};

UClass* USeqEvent_Touch::pClassPointer = NULL;

// Class Engine.SeqEvent_Used
// 0x0018 (0x0118 - 0x0100)
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                               		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              InteractDistance;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     InteractText;                                     		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  InteractIcon;                                     		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_Used" );

		return pClassPointer;
	};

};

UClass* USeqEvent_Used::pClassPointer = NULL;

// Class Engine.SequenceFrame
// 0x0020 (0x00B0 - 0x0090)
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                            		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SizeY;                                            		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BorderWidth;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawBox : 1;                                     		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFilled : 1;                                      		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTileFill : 1;                                    		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FColor                                      BorderColor;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FillColor;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  FillTexture;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   FillMaterial;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceFrame" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USequenceFrame::pClassPointer = NULL;

// Class Engine.SequenceFrameWrapped
// 0x0000 (0x00B0 - 0x00B0)
class USequenceFrameWrapped : public USequenceFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SequenceFrameWrapped" );

		return pClassPointer;
	};

};

UClass* USequenceFrameWrapped::pClassPointer = NULL;

// Class Engine.SeqVar_Bool
// 0x0004 (0x00A8 - 0x00A4)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Bool" );

		return pClassPointer;
	};

};

UClass* USeqVar_Bool::pClassPointer = NULL;

// Class Engine.SeqVar_External
// 0x0010 (0x00B4 - 0x00A4)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x00A4 (0x0004) [0x0000000000000000]              
	struct FString                                     VariableLabel;                                    		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_External" );

		return pClassPointer;
	};

};

UClass* USeqVar_External::pClassPointer = NULL;

// Class Engine.SeqVar_Float
// 0x0004 (0x00A8 - 0x00A4)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Float" );

		return pClassPointer;
	};

};

UClass* USeqVar_Float::pClassPointer = NULL;

// Class Engine.SeqVar_Object
// 0x0010 (0x00B4 - 0x00A4)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            SupportedClasses;                                 		// 0x00A8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Object" );

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

UClass* USeqVar_Object::pClassPointer = NULL;

// Class Engine.SeqVar_Group
// 0x0018 (0x00CC - 0x00B4)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                        		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCachedList : 1;                                  		// 0x00BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class UObject* >                           Actors;                                           		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Group" );

		return pClassPointer;
	};

};

UClass* USeqVar_Group::pClassPointer = NULL;

// Class Engine.SeqVar_Int
// 0x0004 (0x00A8 - 0x00A4)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Int" );

		return pClassPointer;
	};

};

UClass* USeqVar_Int::pClassPointer = NULL;

// Class Engine.SeqVar_MusicTrack
// 0x0024 (0x00D8 - 0x00B4)
class USeqVar_MusicTrack : public USeqVar_Object
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                       		// 0x00B4 (0x0024) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_MusicTrack" );

		return pClassPointer;
	};

};

UClass* USeqVar_MusicTrack::pClassPointer = NULL;

// Class Engine.SeqVar_MusicTrackBank
// 0x000C (0x00C0 - 0x00B4)
class USeqVar_MusicTrackBank : public USeqVar_Object
{
public:
	TArray< struct FMusicTrackStruct >                 MusicTrackBank;                                   		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_MusicTrackBank" );

		return pClassPointer;
	};

};

UClass* USeqVar_MusicTrackBank::pClassPointer = NULL;

// Class Engine.SeqVar_Name
// 0x0008 (0x00AC - 0x00A4)
class USeqVar_Name : public USequenceVariable
{
public:
	struct FName                                       NameValue;                                        		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Name" );

		return pClassPointer;
	};

};

UClass* USeqVar_Name::pClassPointer = NULL;

// Class Engine.SeqVar_Named
// 0x0010 (0x00B4 - 0x00A4)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x00A4 (0x0004) [0x0000000000000000]              
	struct FName                                       FindVarName;                                      		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Named" );

		return pClassPointer;
	};

};

UClass* USeqVar_Named::pClassPointer = NULL;

// Class Engine.SeqVar_ObjectList
// 0x000C (0x00C0 - 0x00B4)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray< class UObject* >                           ObjList;                                          		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_ObjectList" );

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

UClass* USeqVar_ObjectList::pClassPointer = NULL;

// Class Engine.SeqVar_ObjectVolume
// 0x0020 (0x00D4 - 0x00B4)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                   		// 0x00B4 (0x0004) [0x0000000000000000]              
	TArray< class UObject* >                           ContainedObjects;                                 		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            ExcludeClassList;                                 		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCollidingOnly : 1;                               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_ObjectVolume" );

		return pClassPointer;
	};

};

UClass* USeqVar_ObjectVolume::pClassPointer = NULL;

// Class Engine.SeqVar_Player
// 0x0014 (0x00C8 - 0x00B4)
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray< class UObject* >                           Players;                                          		// 0x00B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bAllPlayers : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                PlayerIdx;                                        		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Player" );

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
};

UClass* USeqVar_Player::pClassPointer = NULL;

// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x00B0 - 0x00A8)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_RandomFloat" );

		return pClassPointer;
	};

};

UClass* USeqVar_RandomFloat::pClassPointer = NULL;

// Class Engine.SeqVar_RandomInt
// 0x0008 (0x00B0 - 0x00A8)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Max;                                              		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_RandomInt" );

		return pClassPointer;
	};

};

UClass* USeqVar_RandomInt::pClassPointer = NULL;

// Class Engine.SeqVar_String
// 0x000C (0x00B0 - 0x00A4)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                         		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_String" );

		return pClassPointer;
	};

};

UClass* USeqVar_String::pClassPointer = NULL;

// Class Engine.SeqVar_Union
// 0x0030 (0x00D4 - 0x00A4)
class USeqVar_Union : public USequenceVariable
{
public:
	TArray< class UClass* >                            SupportedVariableClasses;                         		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                IntValue;                                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BoolValue;                                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatValue;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     StringValue;                                      		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UObject*                                     ObjectValue;                                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FUniqueNetId                                NetIdValue;                                       		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Union" );

		return pClassPointer;
	};

};

UClass* USeqVar_Union::pClassPointer = NULL;

// Class Engine.SeqVar_Vector
// 0x000C (0x00B0 - 0x00A4)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                        		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_Vector" );

		return pClassPointer;
	};

};

UClass* USeqVar_Vector::pClassPointer = NULL;

// Class Engine.AmbientSound
// 0x0008 (0x0244 - 0x023C)
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                    		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x023C (0x0004) [0x0000000000000000] [0x00000002] 
	class UAudioComponent*                             AudioComponent;                                   		// 0x0240 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AmbientSound" );

		return pClassPointer;
	};

};

UClass* AAmbientSound::pClassPointer = NULL;

// Class Engine.AmbientSoundSimple
// 0x000C (0x0250 - 0x0244)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                		// 0x0244 (0x0004) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	class USoundCue*                                   SoundCueInstance;                                 		// 0x0248 (0x0004) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USoundNodeAmbient*                           SoundNodeInstance;                                		// 0x024C (0x0004) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AmbientSoundSimple" );

		return pClassPointer;
	};

};

UClass* AAmbientSoundSimple::pClassPointer = NULL;

// Class Engine.AmbientSoundNonLoop
// 0x0000 (0x0250 - 0x0250)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AmbientSoundNonLoop" );

		return pClassPointer;
	};

};

UClass* AAmbientSoundNonLoop::pClassPointer = NULL;

// Class Engine.DistributionFloatSoundParameter
// 0x0000 (0x0071 - 0x0071)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DistributionFloatSoundParameter" );

		return pClassPointer;
	};

};

UClass* UDistributionFloatSoundParameter::pClassPointer = NULL;

// Class Engine.SoundNodeAmbient
// 0x00B4 (0x0104 - 0x0050)
class USoundNodeAmbient : public USoundNode
{
public:
	unsigned char                                      DistanceModel;                                    		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MinRadius;                                        		// 0x0054 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       MaxRadius;                                        		// 0x0070 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       LPFMinRadius;                                     		// 0x008C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       LPFMaxRadius;                                     		// 0x00A8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bSpatialize : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttenuate : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                  		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class USoundNodeWave*                              Wave;                                             		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x00CC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x00E8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeAmbient" );

		return pClassPointer;
	};

};

UClass* USoundNodeAmbient::pClassPointer = NULL;

// Class Engine.SoundNodeAmbientNonLoop
// 0x0028 (0x012C - 0x0104)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	struct FRawDistributionFloat                       DelayTime;                                        		// 0x0104 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FAmbientSoundSlot >                 SoundSlots;                                       		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeAmbientNonLoop" );

		return pClassPointer;
	};

};

UClass* USoundNodeAmbientNonLoop::pClassPointer = NULL;

// Class Engine.SoundNodeAttenuation
// 0x007C (0x00CC - 0x0050)
class USoundNodeAttenuation : public USoundNode
{
public:
	unsigned char                                      DistanceModel;                                    		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       MinRadius;                                        		// 0x0054 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       MaxRadius;                                        		// 0x0070 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              dBAttenuationAtMax;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       LPFMinRadius;                                     		// 0x0090 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       LPFMaxRadius;                                     		// 0x00AC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bSpatialize : 1;                                  		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttenuate : 1;                                   		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                  		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeAttenuation" );

		return pClassPointer;
	};

};

UClass* USoundNodeAttenuation::pClassPointer = NULL;

// Class Engine.SoundNodeConcatenator
// 0x000C (0x005C - 0x0050)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray< float >                                    InputVolume;                                      		// 0x0050 (0x000C) [0x0000000000400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeConcatenator" );

		return pClassPointer;
	};

};

UClass* USoundNodeConcatenator::pClassPointer = NULL;

// Class Engine.SoundNodeDelay
// 0x001C (0x006C - 0x0050)
class USoundNodeDelay : public USoundNode
{
public:
	struct FRawDistributionFloat                       DelayDuration;                                    		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeDelay" );

		return pClassPointer;
	};

};

UClass* USoundNodeDelay::pClassPointer = NULL;

// Class Engine.SoundNodeDistanceCrossFade
// 0x000C (0x005C - 0x0050)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray< struct FDistanceDatum >                    CrossFadeInput;                                   		// 0x0050 (0x000C) [0x0000000000480049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeDistanceCrossFade" );

		return pClassPointer;
	};

};

UClass* USoundNodeDistanceCrossFade::pClassPointer = NULL;

// Class Engine.SoundNodeLooping
// 0x0020 (0x0070 - 0x0050)
class USoundNodeLooping : public USoundNode
{
public:
	unsigned long                                      bLoopIndefinitely : 1;                            		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       LoopCount;                                        		// 0x0054 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeLooping" );

		return pClassPointer;
	};

};

UClass* USoundNodeLooping::pClassPointer = NULL;

// Class Engine.SoundNodeMature
// 0x0000 (0x0050 - 0x0050)
class USoundNodeMature : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeMature" );

		return pClassPointer;
	};

};

UClass* USoundNodeMature::pClassPointer = NULL;

// Class Engine.SoundNodeMixer
// 0x000C (0x005C - 0x0050)
class USoundNodeMixer : public USoundNode
{
public:
	TArray< float >                                    InputVolume;                                      		// 0x0050 (0x000C) [0x0000000000400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeMixer" );

		return pClassPointer;
	};

};

UClass* USoundNodeMixer::pClassPointer = NULL;

// Class Engine.SoundNodeModulator
// 0x0038 (0x0088 - 0x0050)
class USoundNodeModulator : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeModulator" );

		return pClassPointer;
	};

};

UClass* USoundNodeModulator::pClassPointer = NULL;

// Class Engine.SoundNodeModulatorContinuous
// 0x0038 (0x0088 - 0x0050)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeModulatorContinuous" );

		return pClassPointer;
	};

};

UClass* USoundNodeModulatorContinuous::pClassPointer = NULL;

// Class Engine.SoundNodeOscillator
// 0x0074 (0x00C4 - 0x0050)
class USoundNodeOscillator : public USoundNode
{
public:
	struct FRawDistributionFloat                       Amplitude;                                        		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Frequency;                                        		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Offset;                                           		// 0x0088 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Center;                                           		// 0x00A4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bModulatePitch : 1;                               		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bModulateVolume : 1;                              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeOscillator" );

		return pClassPointer;
	};

};

UClass* USoundNodeOscillator::pClassPointer = NULL;

// Class Engine.SoundNodeRandom
// 0x0020 (0x0070 - 0x0050)
class USoundNodeRandom : public USoundNode
{
public:
	TArray< float >                                    Weights;                                          		// 0x0050 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	unsigned long                                      bRandomizeWithoutReplacement : 1;                 		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< unsigned long >                            HasBeenUsed;                                      		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumRandomUsed;                                    		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeRandom" );

		return pClassPointer;
	};

};

UClass* USoundNodeRandom::pClassPointer = NULL;

// Class Engine.Terrain
// 0x00EC (0x0328 - 0x023C)
class ATerrain : public AInfo
{
public:
	TArray< struct FTerrainHeight >                    Heights;                                          		// 0x023C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainInfoData >                  InfoData;                                         		// 0x0248 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainLayer >                     Layers;                                           		// 0x0254 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                NormalMapLayer;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainDecoLayer >                 DecoLayers;                                       		// 0x0264 (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FAlphaMap >                         AlphaMaps;                                        		// 0x0270 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTerrainComponent* >                 TerrainComponents;                                		// 0x027C (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                NumSectionsX;                                     		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSectionsY;                                     		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSize;                                      		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct ATerrain_FTerrainWeightedMaterial > WeightedMaterials;                                		// 0x0294 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTerrainWeightMapTexture* >          WeightedTextureMaps;                              		// 0x02A0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            CachedDisplacements;                              		// 0x02AC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              MaxCollisionDisplacement;                         		// 0x02B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaxTesselationLevel;                              		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinTessellationLevel;                             		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TesselationDistanceScale;                         		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TessellationCheckCount;                           		// 0x02C8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              TessellationCheckDistance;                        		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationCheckBorder;                          		// 0x02D0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                CollisionTesselationLevel;                        		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[ 0x2 ];                    		// 0x02D8 (0x0018) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                NumVerticesX;                                     		// 0x02F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumVerticesY;                                     		// 0x02F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumPatchesX;                                      		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumPatchesY;                                      		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxComponentSize;                                 		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StaticLightingResolution;                         		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsOverridingLightResolution : 1;                 		// 0x0308 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;            		// 0x0308 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCastShadow : 1;                                  		// 0x0308 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0308 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0308 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x0308 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                    		// 0x0308 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0308 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMorphingEnabled : 1;                             		// 0x0308 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMorphingGradientsEnabled : 1;                    		// 0x0308 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bLocked : 1;                                      		// 0x0308 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bHeightmapLocked : 1;                             		// 0x0308 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bShowingCollision : 1;                            		// 0x0308 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bShowWireframe : 1;                               		// 0x0308 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x030C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0310 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                EditorTessellationLevel;                          		// 0x0314 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FSelectedTerrainVertex >            SelectedVertices;                                 		// 0x0318 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FColor                                      WireframeColor;                                   		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Terrain" );

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void CalcLayerBounds ( );
};

UClass* ATerrain::pClassPointer = NULL;

// Class Engine.TerrainComponent
// 0x0094 (0x026C - 0x01D8)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x01D8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x01E4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    TerrainObject;                                    		// 0x01F0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SectionBaseX;                                     		// 0x01F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x01F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeX;                                     		// 0x01FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeY;                                     		// 0x0200 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeX;                                 		// 0x0204 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeY;                                 		// 0x0208 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    LightMap;                                         		// 0x020C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      PatchBounds;                                      		// 0x0210 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      PatchBatches;                                     		// 0x021C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      BatchMaterials;                                   		// 0x0228 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FullBatch;                                        		// 0x0234 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchBatchOffsets;                                		// 0x0238 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    WorkingOffsets;                                   		// 0x023C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchBatchTriangles;                              		// 0x0240 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchCachedTessellationValues;                    		// 0x0244 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    TesselationLevels;                                		// 0x0248 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTerrainBVTree                              BVTree;                                           		// 0x024C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           CollisionVertices;                                		// 0x0258 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    RBHeightfield;                                    		// 0x0264 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bDisplayCollisionLevel : 1;                       		// 0x0268 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TerrainComponent" );

		return pClassPointer;
	};

};

UClass* UTerrainComponent::pClassPointer = NULL;

// Class Engine.TerrainLayerSetup
// 0x000C (0x004C - 0x0040)
class UTerrainLayerSetup : public UObject
{
public:
	TArray< struct FTerrainFilteredMaterial >          Materials;                                        		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TerrainLayerSetup" );

		return pClassPointer;
	};

	void PostBeginPlay ( );
	void SetMaterials ( TArray< struct FTerrainFilteredMaterial > NewMaterials );
};

UClass* UTerrainLayerSetup::pClassPointer = NULL;

// Class Engine.TerrainMaterial
// 0x006C (0x00AC - 0x0040)
class UTerrainMaterial : public UObject
{
public:
	struct FMatrix                                     LocalToMapping;                                   		// 0x0040 (0x0040) [0x0000000000000000]              
	unsigned char                                      MappingType;                                      		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingScale;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingRotation;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanU;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanV;                                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DisplacementMap;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplacementScale;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainFoliageMesh >               FoliageMeshes;                                    		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TerrainMaterial" );

		return pClassPointer;
	};

};

UClass* UTerrainMaterial::pClassPointer = NULL;

// Class Engine.TerrainWeightMapTexture
// 0x0010 (0x0160 - 0x0150)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                    		// 0x0150 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPointer >                          WeightedMaterials;                                		// 0x0154 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TerrainWeightMapTexture" );

		return pClassPointer;
	};

};

UClass* UTerrainWeightMapTexture::pClassPointer = NULL;

// Class Engine.UIRoot
// 0x0000 (0x0040 - 0x0040)
class UUIRoot : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIRoot" );

		return pClassPointer;
	};

	struct FString ConvertWidgetIDToString ( class UUIObject* SourceWidget );
	bool GetDataStoreStringValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue );
	bool GetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue );
	bool SetDataStoreStringValue ( struct FString InDataStoreMarkup, struct FString InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer );
	bool SetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue );
	class UUIDataStore* StaticResolveDataStore ( struct FName DataStoreTag, class UUIScene* OwnerScene, class ULocalPlayer* InPlayerOwner );
	struct FMatrix GetPrimitiveTransform ( class UUIObject* Widget, unsigned long bIncludeAnchorPosition, unsigned long bIncudeRotation, unsigned long bIncludeScale );
	void SetMouseCaptureOverride ( unsigned long bCaptureMouse );
	bool GetCursorSize ( float* CursorXL, float* CursorYL );
	bool GetCursorPosition ( class UUIScene* Scene, int* CursorX, int* CursorY );
	unsigned char GetFaceOrientation ( unsigned char Face );
	class UGameUISceneClient* GetSceneClient ( );
	class UUIInteraction* GetCurrentUIController ( );
	bool IsConsole ( unsigned char ConsoleType );
	unsigned char GetInputPlatformType ( class ULocalPlayer* OwningPlayer );
};

UClass* UUIRoot::pClassPointer = NULL;

// Class Engine.Interaction
// 0x0030 (0x0070 - 0x0040)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;             		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;            		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;            		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInitialize__Delegate;                         		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Interaction" );

		return pClassPointer;
	};

	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyGameSessionEnded ( );
	void Initialized ( );
	void OnInitialize ( );
	void Init ( );
	void eventTick ( float DeltaTime );
	void eventChangedInputLanguage ( struct FString sInputLangId, unsigned long bHasIME, unsigned long bIMEActive );
	bool OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode );
	bool OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

UClass* UInteraction::pClassPointer = NULL;

// Class Engine.cDebugPageManager
// 0x0028 (0x0098 - 0x0070)
class UcDebugPageManager : public UInteraction
{
public:
	TArray< class UcDebugPage* >                       m_vDebugPages;                                    		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCurrentPageIndex;                              		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHaveDisabledHUD : 1;                           		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDebugPageVisible : 1;                            		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	class UCanvas*                                     m_Canvas;                                         		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nIndexHighlighted;                              		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nFirstIndexDisplayed;                           		// 0x008C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x0090 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cDebugPageManager" );

		return pClassPointer;
	};

	void IndexDown ( );
	void IndexUp ( );
	void DrawIndexPage ( );
	void DrawTitleBar ( );
	bool eventInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void eventDestroyed ( );
	void NotifyGameSessionEnded ( );
	void eventTick ( float fDeltaTime );
	void eventPostRender_DebugPages ( class UCanvas* Canvas );
	void DoLevelChangeCleanup ( );
	void ClearDebugPages ( );
	void RemoveDebugPage ( class UcDebugPage* PageToRemove );
	void AddDebugPage ( class UcDebugPage* PageToAdd );
};

UClass* UcDebugPageManager::pClassPointer = NULL;

// Class Engine.cDistrictVisualiser
// 0x00CC (0x013C - 0x0070)
class UcDistrictVisualiser : public UInteraction
{
public:
	float                                              MAX_ZOOM_LEVEL;                                   		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MOUSE_DRAG_SPEED;                                 		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MAX_DEBUG_TEXT_LINES;                             		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FMap_Mirror                                 m_tEntityTypes;                                   		// 0x007C (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_tEntities;                                      		// 0x00B8 (0x003C) [0x0000000000001000]              ( CPF_Native )
	class UcEntity*                                    m_pSelectedEntity;                                		// 0x00F4 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           OutputTextArr;                                    		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector2D                                   m_ratio2d;                                        		// 0x0104 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_mousePos;                                       		// 0x010C (0x0008) [0x0000000000000000]              
	float                                              m_fZoomLevel;                                     		// 0x0114 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   m_ViewportOffset;                                 		// 0x0118 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_mapCentre;                                      		// 0x0120 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bMouseKeyXPressed : 1;                          		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bShowDVis : 1;                                  		// 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              aMouseX;                                          		// 0x012C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseY;                                          		// 0x0130 (0x0004) [0x0000000000000004]              ( CPF_Input )
	struct FName                                       DVis_TOGGLE_KEY;                                  		// 0x0134 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cDistrictVisualiser" );

		return pClassPointer;
	};

	struct FVector2D GetVPToWRatio ( );
	float GetZoomLevel ( );
	struct FVector2D GetOffset ( );
	void ToggleEntityVisibility ( struct FString sKey );
	void OutputText ( struct FString Text );
	void OutputTextLine ( struct FString Text );
	void NativeOnClicked ( );
	bool eventInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool eventInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void Initialized ( );
	void RenderMap ( class UCanvas* Canvas );
	void PostRender ( class UCanvas* Canvas );
	void RemoveAllEntities ( );
	void Remove ( struct FString sType, class UObject* pObject );
	void Register ( struct FString sType, struct FtEntityType tType, class UcEntity* pEntity, class UTexture2D* pTexture );
};

UClass* UcDistrictVisualiser::pClassPointer = NULL;

// Class Engine.cEntity
// 0x001C (0x005C - 0x0040)
class UcEntity : public UObject
{
public:
	struct FString                                     m_sType;                                          		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     m_pObject;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSelected : 1;                                  		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    m_pfnRender;                                      		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pfnEntitySelected;                              		// 0x0058 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cEntity" );

		return pClassPointer;
	};

};

UClass* UcEntity::pClassPointer = NULL;

// Class Engine.Console
// 0x0144 (0x01B4 - 0x0070)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x0070 (0x0004) [0x0000000000000000]              
	class UUIScene*                                    LargeConsoleScene;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	class UUIScene*                                    MiniConsoleScene;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	class UUILabel*                                    ConsoleBufferText;                                		// 0x007C (0x0004) [0x0000000000000000]              
	class UConsoleEntry*                               MiniConsoleInput;                                 		// 0x0080 (0x0004) [0x0000000000000000]              
	class UConsoleEntry*                               LargeConsoleInput;                                		// 0x0084 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x0088 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x008C (0x0004) [0x0000000000000000]              
	struct FName                                       ConsoleKey;                                       		// 0x0090 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       TypeKey;                                          		// 0x0098 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxScrollbackSize;                                		// 0x00A0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FString >                           Scrollback;                                       		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SBHead;                                           		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                SBPos;                                            		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                HistoryTop;                                       		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryBot;                                       		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryCur;                                       		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     History[ 0x10 ];                                  		// 0x00C4 (0x00C0) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TypedStr;                                         		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TypedStrPos;                                      		// 0x0190 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCaptureKeyInput : 1;                             		// 0x0194 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x0194 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableUI : 1;                                    		// 0x0194 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      m_bIsTypingBarActive : 1;                         		// 0x0194 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bCompletionRunning : 1;                         		// 0x0194 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     m_sCompletionBase;                                		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCompletionIndex;                               		// 0x01A4 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           m_asCompletionsAvailable;                         		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Console" );

		return pClassPointer;
	};

	void FlushPlayerInput ( );
	bool IsUIMiniConsoleOpen ( );
	bool IsUIConsoleOpen ( );
	bool InputChar ( int ControllerId, struct FString Unicode );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	void StartTyping ( struct FString Text );
	void eventOutputText ( struct FString Text );
	void OutputTextLine ( struct FString Text );
	void ClearOutput ( );
	void eventConsoleCommand ( struct FString Command );
	void PurgeCommandFromHistory ( struct FString Command );
	void SetCursorPos ( int Position );
	void SetInputText ( struct FString Text );
	void CompletionStop ( unsigned long bReturnToBase );
	void CompletionAuto ( unsigned long bNext );
	void Initialized ( );
};

UClass* UConsole::pClassPointer = NULL;

// Class Engine.DataStoreClient
// 0x003C (0x007C - 0x0040)
class UDataStoreClient : public UUIRoot
{
public:
	TArray< struct FString >                           GlobalDataStoreClasses;                           		// 0x0040 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UUIDataStore* >                      GlobalDataStores;                                 		// 0x004C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           PlayerDataStoreClassNames;                        		// 0x0058 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            PlayerDataStoreClasses;                           		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPlayerDataStoreGroup >             PlayerDataStores;                                 		// 0x0070 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DataStoreClient" );

		return pClassPointer;
	};

	void DebugDumpDataStoreInfo ( unsigned long bVerbose );
	void eventNotifyGameSessionEnded ( );
	class UClass* FindDataStoreClass ( class UClass* RequiredMetaClass );
	int FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner );
	void GetAvailableDataStores ( class UUIScene* CurrentScene, TArray< class UUIDataStore* >* out_DataStores );
	bool UnregisterDataStore ( class UUIDataStore* DataStore );
	bool RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner );
	class UUIDataStore* CreateDataStore ( class UClass* DataStoreClass );
	class UUIDataStore* FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner );
};

UClass* UDataStoreClient::pClassPointer = NULL;

// Class Engine.Input
// 0x006C (0x00DC - 0x0070)
class UInput : public UInteraction
{
public:
	TArray< struct FKeyBind >                          Bindings;                                         		// 0x0070 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             PressedKeys;                                      		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      CurrentEvent;                                     		// 0x0088 (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDelta;                                     		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDeltaTime;                                 		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0094 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	TArray< struct FPointer >                          AxisArray;                                        		// 0x00D0 (0x000C) [0x0000000000101002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Input" );

		return pClassPointer;
	};

	struct FString GetBind ( struct FName Key );
	void ResetInput ( );
};

UClass* UInput::pClassPointer = NULL;

// Class Engine.PlayerInput
// 0x0084 (0x0160 - 0x00DC)
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                		// 0x00DC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bInvertMouse : 1;                                 		// 0x00DC (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInvertTurn : 1;                                  		// 0x00DC (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableMouseSmoothing : 1;                        		// 0x00DC (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableFOVScaling : 1;                            		// 0x00DC (0x0004) [0x0000000000000000] [0x00000010] 
	struct FName                                       LastAxisKeyName;                                  		// 0x00E0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              MouseSensitivity;                                 		// 0x00E8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              aBaseX;                                           		// 0x00EC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseY;                                           		// 0x00F0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseZ;                                           		// 0x00F4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseX;                                          		// 0x00F8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseY;                                          		// 0x00FC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aForward;                                         		// 0x0100 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aTurn;                                            		// 0x0104 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aStrafe;                                          		// 0x0108 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aUp;                                              		// 0x010C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLookUp;                                          		// 0x0110 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelX;                                       		// 0x0114 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelY;                                       		// 0x0118 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelZ;                                       		// 0x011C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3Gyro;                                         		// 0x0120 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              RawJoyUp;                                         		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyRight;                                      		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookRight;                                  		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookUp;                                     		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveForwardSpeed;                                 		// 0x0134 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MoveStrafeSpeed;                                  		// 0x0138 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookRightScale;                                   		// 0x013C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookUpScale;                                      		// 0x0140 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      bStrafe;                                          		// 0x0144 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bXAxis;                                           		// 0x0145 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bYAxis;                                           		// 0x0146 (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              ZeroTime[ 0x2 ];                                  		// 0x0148 (0x0008) [0x0000000000000000]              
	float                                              SmoothedMouse[ 0x2 ];                             		// 0x0150 (0x0008) [0x0000000000000000]              
	int                                                MouseSamples;                                     		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              MouseSamplingTotal;                               		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerInput" );

		return pClassPointer;
	};

	float SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );
	void ClearSmoothing ( );
	void SmartJump ( );
	void Jump ( );
	void ProcessInputMatching ( float DeltaTime );
	void eventPlayerInput ( float DeltaTime );
	void AdjustMouseSensitivity ( float FOVScale );
	void PostProcessInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void DrawHUD ( class AHUD* H );
	void SetSensitivity ( float F );
	bool InvertTurn ( );
};

UClass* UPlayerInput::pClassPointer = NULL;

// Class Engine.PlayerManagerInteraction
// 0x0000 (0x0070 - 0x0070)
class UPlayerManagerInteraction : public UInteraction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerManagerInteraction" );

		return pClassPointer;
	};

};

UClass* UPlayerManagerInteraction::pClassPointer = NULL;

// Class Engine.UIAnimation
// 0x0000 (0x0040 - 0x0040)
class UUIAnimation : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAnimation" );

		return pClassPointer;
	};

};

UClass* UUIAnimation::pClassPointer = NULL;

// Class Engine.UIScreenObject
// 0x0154 (0x0194 - 0x0040)
class UUIScreenObject : public UUIRoot
{
public:
	struct FUIScreenValue_Bounds                       Position;                                         		// 0x0040 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZDepth;                                           		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHidden : 1;                                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNeverFocus : 1;                                  		// 0x0060 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupports3DPrimitives : 1;                        		// 0x0060 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	TArray< class UUIObject* >                         Children;                                         		// 0x0064 (0x000C) [0x0000000001400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            DefaultStates;                                    		// 0x0070 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      InitialState;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< class UUIState* >                          InactiveStates;                                   		// 0x0080 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UUIState* >                          StateStack;                                       		// 0x008C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPlayerInteractionData >            FocusControls;                                    		// 0x0098 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUIFocusPropagationData >           FocusPropagation;                                 		// 0x00A4 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      PlayerInputMask;                                  		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Opacity;                                          		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIComp_Event*                               EventProvider;                                    		// 0x00B8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FEnumeratedName                             FocusedCue;                                       		// 0x00BC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             MouseEnterCue;                                    		// 0x00CC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             NavigateUpCue;                                    		// 0x00DC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             NavigateDownCue;                                  		// 0x00EC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             NavigateLeftCue;                                  		// 0x00FC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             NavigateRightCue;                                 		// 0x010C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __NotifyActiveSkinChanged__Delegate;              		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRawInputKey__Delegate;                        		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRawInputAxis__Delegate;                       		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProcessInputKey__Delegate;                    		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProcessInputAxis__Delegate;                   		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyPositionChanged__Delegate;                		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyResolutionChanged__Delegate;              		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyActiveStateChanged__Delegate;             		// 0x0170 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyVisibilityChanged__Delegate;              		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInitialSceneUpdate__Delegate;                 		// 0x0188 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIScreenObject" );

		return pClassPointer;
	};

	void LogCurrentState ( int Indent );
	void OnSetControllerId ( class UUIAction_SetControllerId* Action );
	void OnShowMembershipMarketplaceUI ( class UUIAction_ShowMembershipMarketplaceUI* Action );
	void OnShowContentMarketplaceUI ( class UUIAction_ShowContentMarketplaceUI* Action );
	void OnShowGamerCardUI ( class UUIAction_ShowGamerCardUI* Action );
	void OnShowFeedbackUI ( class UUIAction_ShowFeedbackUI* Action );
	void OnShowMessagesUI ( class UUIAction_ShowMessagesUI* Action );
	void OnShowFriendInviteUI ( class UUIAction_ShowFriendInviteUI* Action );
	void OnShowAchievementsUI ( class UUIAction_ShowAchievementsUI* Action );
	void OnShowPlayersUI ( class UUIAction_ShowPlayersUI* Action );
	void OnShowFriendsUI ( class UUIAction_ShowFriendsUI* Action );
	unsigned char GetNATType ( );
	bool CanPlayOnline ( int ControllerId );
	bool HasLinkConnection ( );
	unsigned char GetLoginStatus ( int ControllerId );
	int GetBestControllerId ( );
	void OnConsoleCommand ( class UUIAction_ConsoleCommand* Action );
	bool DisableWidget ( int PlayerIndex );
	bool EnableWidget ( int PlayerIndex );
	void OnChangeVisibility ( class UUIAction_ChangeVisibility* Action );
	class UUIScreenObject* GetParent ( );
	void eventGetSupportedUIActionKeyNames ( TArray< struct FName >* out_KeyNames );
	void eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse );
	void eventDisablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse );
	void eventEnablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse );
	bool IsHidden ( );
	bool IsVisible ( );
	void SetVisibility ( unsigned long bIsVisible );
	void PrivateSetVisibility ( unsigned long bVisible );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventPostInitialize ( );
	void eventInitialized ( );
	struct FString GetWidgetPathName ( );
	float GetAspectRatioAutoScaleFactor ( class UFont* BaseFont );
	struct FMatrix GetInverseCanvasToScreen ( );
	struct FMatrix GetCanvasToScreen ( );
	struct FVector PixelToCanvas ( struct FVector2D* PixelPosition );
	struct FVector ScreenToCanvas ( struct FVector4* ScreenPosition );
	struct FVector4 PixelToScreen ( struct FVector2D* PixelPosition );
	struct FVector2D ScreenToPixel ( struct FVector4* ScreenPosition );
	struct FVector4 CanvasToScreen ( struct FVector* CanvasPosition );
	struct FVector DeProject ( struct FVector* PixelPosition );
	struct FVector Project ( struct FVector* CanvasPosition );
	void GetDockedWidgets ( unsigned char SourceFace, unsigned char TargetFace, TArray< class UUIObject* >* out_DockedWidgets );
	struct FVector GetPositionVector ( unsigned long bIncludeParentPosition );
	float GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding );
	float GetPosition ( unsigned char Face, unsigned char OutputType, unsigned long bZeroOrigin, unsigned long bIgnoreDockPadding );
	void SetPosition ( float NewValue, unsigned char Face, unsigned char InputType, unsigned long bZeroOrigin );
	int GetBestPlayerIndex ( );
	int GetSupportedPlayerCount ( );
	int GetActivePlayerCount ( );
	bool AcceptsPlayerInput ( int PlayerIndex );
	bool IsPressed ( int PlayerIndex );
	bool IsActive ( int PlayerIndex );
	bool IsFocused ( int PlayerIndex );
	bool IsEnabled ( int PlayerIndex, unsigned long bCheckOwnerChain );
	void OverrideLastFocusedControl ( int PlayerIndex, class UUIObject* ChildToFocus );
	class UUIObject* GetLastFocusedControl ( unsigned long bRecurse, int PlayerIndex );
	class UUIObject* GetFocusedControl ( unsigned long bRecurse, int PlayerIndex );
	bool KillFocus ( class UUIScreenObject* Sender, int PlayerIndex );
	bool SetFocusToChild ( class UUIObject* ChildToFocus, int PlayerIndex );
	bool SetFocus ( class UUIScreenObject* Sender, int PlayerIndex );
	bool CanPropagateFocusFor ( class UUIObject* TestChild );
	bool CanAcceptFocus ( int PlayerIndex );
	bool IsNeverFocused ( );
	bool NavigateFocus ( class UUIScreenObject* Sender, unsigned char Direction, int PlayerIndex );
	bool PrevControlAPB ( class UUIScreenObject* pSender );
	bool NextControlAPB ( class UUIScreenObject* pSender );
	bool PrevControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool NextControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool FocusLastControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool FocusFirstControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool IsHoldingShift ( int ControllerId );
	bool IsHoldingAlt ( int ControllerId );
	bool IsHoldingCtrl ( int ControllerId );
	bool ConditionalPropagateEnabledState ( int PlayerIndex, unsigned long bForce );
	bool DeactivateStateByClass ( class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved );
	bool DeactivateState ( class UUIState* StateToRemove, int PlayerIndex );
	bool ActivateStateByClass ( class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded );
	bool ActivateState ( class UUIState* StateToActivate, int PlayerIndex );
	bool HasActiveStateOfClass ( class UClass* StateClass, int PlayerIndex, int* StateIndex );
	class UUIState* GetCurrentState ( int PlayerIndex );
	bool SetEnabled ( unsigned long bEnabled, int PlayerIndex );
	void FindEventsOfClass ( class UClass* EventClassToFind, class UUIState* LimitScope, unsigned long bExactClass, TArray< class UUIEvent* >* out_EventInstances );
	void ActivateEventByClass ( int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int > IndicesToActivate, TArray< class UUIEvent* >* out_ActivatedEvents );
	float GetViewportHeight ( );
	float GetViewportWidth ( );
	bool GetViewportSize ( struct FVector2D* out_ViewportSize );
	bool GetViewportOrigin ( struct FVector2D* out_ViewportOrigin );
	float GetViewportScale ( );
	bool GetViewportOffset ( struct FVector2D* out_ViewportOffset );
	void RebuildNavigationLinks ( );
	void RequestPrimitiveReview ( unsigned long bReinitializePrimitives, unsigned long bReviewPrimitiveUsage );
	void RequestFormattingUpdate ( );
	void RequestSceneUpdate ( unsigned long bDockingStackChanged, unsigned long bPositionsChanged, unsigned long bNavLinksOutdated, unsigned long bWidgetStylesChanged );
	int GetObjectCount ( );
	TArray< class UUIObject* > GetChildren ( unsigned long bRecurse, TArray< class UUIObject* > ExclusionSet );
	bool ContainsChildOfClass ( class UClass* SearchClass, unsigned long bRecurse );
	bool ContainsChild ( class UUIObject* Child, unsigned long bRecurse );
	int FindChildIndex ( struct FName WidgetName );
	class UUIObject* FindChildUsingID ( struct FWIDGET_ID WidgetID, unsigned long bRecurse );
	class UUIObject* FindChild ( struct FName WidgetName, unsigned long bRecurse );
	bool ReplaceChild ( class UUIObject* ExistingChild, class UUIObject* NewChild );
	TArray< class UUIObject* > RemoveChildren ( TArray< class UUIObject* > ChildrenToRemove );
	bool RemoveChild ( class UUIObject* ExistingChild, TArray< class UUIObject* > ExclusionSet );
	int InsertChild ( class UUIObject* NewChild, int InsertIndex, unsigned long bRenameExisting );
	void Initialize ( class UUIScene* inOwnerScene, class UUIObject* InOwner );
	class UUIObject* CreateWidget ( class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, struct FName WidgetName );
	bool PlayUISound ( struct FEnumeratedName SoundCueName, int PlayerIndex, struct FString ComponentName );
	class ULocalPlayer* GetPlayerOwner ( int PlayerIndex );
	void InitializePlayerTracking ( );
	void RemovePlayerData ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void CreatePlayerData ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	bool IsInitialized ( );
	void OnInitialSceneUpdate ( );
	void NotifyVisibilityChanged ( class UUIScreenObject* SourceWidget, unsigned long bIsVisible );
	void NotifyActiveStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState );
	void NotifyResolutionChanged ( struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize );
	void NotifyPositionChanged ( class UUIScreenObject* Sender );
	bool OnProcessInputAxis ( struct FSubscribedInputEventParameters* EventParms );
	bool OnProcessInputKey ( struct FSubscribedInputEventParameters* EventParms );
	bool OnRawInputAxis ( struct FInputEventParameters* EventParms );
	bool OnRawInputKey ( struct FInputEventParameters* EventParms );
	void NotifyActiveSkinChanged ( );
};

UClass* UUIScreenObject::pClassPointer = NULL;

// Class Engine.UIComponent
// 0x0000 (0x004C - 0x004C)
class UUIComponent : public UComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComponent" );

		return pClassPointer;
	};

};

UClass* UUIComponent::pClassPointer = NULL;

// Class Engine.UIComp_Event
// 0x0020 (0x006C - 0x004C)
class UUIComp_Event : public UUIComponent
{
public:
	TArray< struct FDefaultEventSpecification >        DefaultEvents;                                    		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUISequence*                                 EventContainer;                                   		// 0x0058 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UUIEvent_ProcessInput*                       InputProcessor;                                   		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DisabledEventAliases;                             		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_Event" );

		return pClassPointer;
	};

	void UnregisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex );
	void RegisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex );
};

UClass* UUIComp_Event::pClassPointer = NULL;

// Class Engine.UIEventContainer
// 0x0000 (0x0040 - 0x0040)
class UUIEventContainer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEventContainer" );

		return pClassPointer;
	};

	void RemoveSequenceObjects ( TArray< class USequenceObject* > ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events );
};

UClass* UUIEventContainer::pClassPointer = NULL;

// Class Engine.UIInputConfiguration
// 0x0018 (0x0058 - 0x0040)
class UUIInputConfiguration : public UUIRoot
{
public:
	TArray< struct FUIInputAliasClassMap >             WidgetInputAliases;                               		// 0x0040 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FUIAxisEmulationDefinition >        AxisEmulationDefinitions;                         		// 0x004C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIInputConfiguration" );

		return pClassPointer;
	};

	void LoadInputAliasClasses ( );
};

UClass* UUIInputConfiguration::pClassPointer = NULL;

// Class Engine.UIInteraction
// 0x0148 (0x01B8 - 0x0070)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0070 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;            		// 0x0074 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      SceneClientClass;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     SceneClientClassName;                             		// 0x007C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UGameUISceneClient*                          SceneClient;                                      		// 0x0088 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     UISkinName;                                       		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             UISoundCueNames;                                  		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             SupportedDoubleClickKeys;                         		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x00B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIInputConfiguration*                       UIInputConfig;                                    		// 0x00B4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00B8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.WidgetInputAliasLookupTable
	unsigned long                                      bProcessInput : 1;                                		// 0x00F4 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bConsumeInput : 1;                                		// 0x00F4 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDisableToolTips : 1;                             		// 0x00F4 (0x0004) [0x0000000000004002] [0x00000004] ( CPF_Const | CPF_Config )
	unsigned long                                      bFocusOnActive : 1;                               		// 0x00F4 (0x0004) [0x0000000000004002] [0x00000008] ( CPF_Const | CPF_Config )
	unsigned long                                      bCaptureUnprocessedInput : 1;                     		// 0x00F4 (0x0004) [0x0000000000004002] [0x00000010] ( CPF_Const | CPF_Config )
	unsigned long                                      bFocusedStateRules : 1;                           		// 0x00F4 (0x0004) [0x0000000000004002] [0x00000020] ( CPF_Const | CPF_Config )
	unsigned long                                      bIsUIPrimitiveSceneInitialized : 1;               		// 0x00F4 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	float                                              UIJoystickDeadZone;                               		// 0x00F8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              UIAxisMultiplier;                                 		// 0x00FC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              AxisRepeatDelay;                                  		// 0x0100 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MouseButtonRepeatDelay;                           		// 0x0104 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DoubleClickTriggerSeconds;                        		// 0x0108 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                DoubleClickPixelTolerance;                        		// 0x010C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ToolTipInitialDelaySeconds;                       		// 0x0110 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ToolTipExpirationSeconds;                         		// 0x0114 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                            		// 0x0118 (0x0010) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0128 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	struct FUIAxisEmulationData                        AxisInputEmulation[ 0x4 ];                        		// 0x0164 (0x0050) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    CanvasScene;                                      		// 0x01B4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIInteraction" );

		return pClassPointer;
	};

	void NotifyGameSessionEnded ( );
	unsigned char eventGetNATType ( );
	bool eventCanPlayOnline ( int ControllerId );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	bool eventHasLinkConnection ( );
	unsigned char eventGetLoginStatus ( int ControllerId );
	class UUIScene* FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner );
	bool CloseScene ( class UUIScene* Scene );
	bool MergeScene ( class UUIScene* SourceScene, class UUIScene* SceneTarget );
	bool OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene );
	class UUIScene* CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate );
	class UUIScene* GetTransientScene ( );
	void SetMousePosition ( int NewMouseX, int NewMouseY );
	class UUIObject* CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	bool PlayUISound ( struct FEnumeratedName SoundCueName, int PlayerIndex, struct FString ComponentName );
	bool IsMenuLevel ( struct FString MapName );
	class UDataStoreClient* GetDataStoreClient ( );
	int GetPlayerControllerId ( int PlayerIndex );
	int GetPlayerIndex ( int ControllerId );
	int GetPlayerCount ( );
};

UClass* UUIInteraction::pClassPointer = NULL;

// Class Engine.UILayerBase
// 0x0000 (0x0040 - 0x0040)
class UUILayerBase : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UILayerBase" );

		return pClassPointer;
	};

};

UClass* UUILayerBase::pClassPointer = NULL;

// Class Engine.UISceneClient
// 0x00B8 (0x00F8 - 0x0040)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    RenderViewport;                                   		// 0x0048 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UUISkin*                                     ActiveSkin;                                       		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FIntPoint                                   MousePosition;                                    		// 0x0050 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIObject*                                   ActiveControl;                                    		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x005C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UMaterialInstanceConstant*                   OpacityParameter;                                 		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       OpacityParameterName;                             		// 0x0064 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x006C (0x0004) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                   		// 0x0070 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     InvCanvasToScreen;                                		// 0x00B0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPostProcessChain*                           UIScenePostProcess;                               		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UISceneClient" );

		return pClassPointer;
	};

	class UUIScene* GetActiveScene ( );
	struct FMatrix GetInverseCanvasToScreen ( class UUIObject* Widget );
	struct FMatrix GetCanvasToScreen ( class UUIObject* Widget );
	void UpdateCanvasToScreen ( );
	bool ChangeMouseCursor ( struct FName CursorName );
	void SetMousePosition ( int NewMouseX, int NewMouseY );
	bool CloseScene ( class UUIScene* Scene );
	bool OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene );
	bool InitializeScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene );
	bool IsSceneInitialized ( class UUIScene* Scene );
	bool IsUIActive ( int Flags );
	bool ChangeActiveSkin ( class UUISkin* NewActiveSkin );
};

UClass* UUISceneClient::pClassPointer = NULL;

// Class Engine.UIState
// 0x002A (0x006A - 0x0040)
class UUIState : public UUIRoot
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                        		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIStateSequence*                            StateSequence;                                    		// 0x0044 (0x0004) [0x0000000005400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FInputKeyAction >                   StateInputActions;                                		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInputKeyAction >                   DisabledInputActions;                             		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       MouseCursorName;                                  		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlayerIndexMask;                                  		// 0x0068 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      StackPriority;                                    		// 0x0069 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIState" );

		return pClassPointer;
	};

	void RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events );
	bool eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex );
	void eventOnDeactivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPoppedState );
	void eventOnActivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPushedState );
	bool eventDeactivateState ( class UUIScreenObject* Target, int PlayerIndex );
	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
	bool IsActiveForPlayer ( int PlayerIndex );
	bool eventIsWidgetClassSupported ( class UClass* WidgetClass );
};

UClass* UUIState::pClassPointer = NULL;

// Class Engine.UIState_Disabled
// 0x0000 (0x006A - 0x006A)
class UUIState_Disabled : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIState_Disabled" );

		return pClassPointer;
	};

	bool eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex );
	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
};

UClass* UUIState_Disabled::pClassPointer = NULL;

// Class Engine.UIState_Enabled
// 0x0000 (0x006A - 0x006A)
class UUIState_Enabled : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIState_Enabled" );

		return pClassPointer;
	};

};

UClass* UUIState_Enabled::pClassPointer = NULL;

// Class Engine.UIString
// 0x00B0 (0x00F0 - 0x0040)
class UUIString : public UUIRoot
{
public:
	struct FString                                     m_InputString;                                    		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPointer >                          Nodes;                                            		// 0x004C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FUICombinedStyleData                        StringStyleData;                                  		// 0x0058 (0x0090) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   StringExtent;                                     		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIString" );

		return pClassPointer;
	};

	bool ContainsMarkup ( );
	void GetAutoScaleValue ( struct FVector2D BoundingRegionSize, struct FVector2D StringSize, struct FVector2D* out_AutoScalePercent );
	struct FString GetValue ( unsigned long bReturnProcessedText );
	bool SetValue ( struct FString InputString, unsigned long bIgnoreMarkup );
};

UClass* UUIString::pClassPointer = NULL;

// Class Engine.UIDataProvider
// 0x001C (0x005C - 0x0040)
class UUIDataProvider : public UUIRoot
{
public:
	unsigned char                                      WriteAccessType;                                  		// 0x0040 (0x0001) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   ProviderChangedNotifies;                          		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataProviderPropertyChange__Delegate;         		// 0x0050 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider" );

		return pClassPointer;
	};

	int ParseTagArrayDelimiter ( struct FName* FieldName );
	bool RemovePropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate );
	bool AddPropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate, unsigned long bAllowDuplicates );
	void eventNotifyPropertyChanged ( struct FName PropTag );
	bool eventIsCollectionDataType ( unsigned char FieldType );
	bool eventIsProviderDisabled ( );
	struct FString eventGenerateFillerData ( struct FString DataTag );
	struct FString eventGenerateScriptMarkupString ( struct FName DataTag );
	bool eventSetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventGetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventAllowPublishingToField ( struct FString FieldName, int ArrayIndex );
	void eventGetSupportedScriptFields ( TArray< struct FUIDataProviderField >* out_Fields );
	int ParseArrayDelimiter ( struct FString* DataTag );
	bool GetProviderFieldType ( struct FString DataTag, unsigned char* out_ProviderFieldType );
	void OnDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
};

UClass* UUIDataProvider::pClassPointer = NULL;

// Class Engine.UIDataStore
// 0x0020 (0x007C - 0x005C)
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                              		// 0x005C (0x0008) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   RefreshSubscriberNotifies;                        		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;              		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore" );

		return pClassPointer;
	};

	class UDataStoreClient* GetDataStoreClient ( );
	void OnCommit ( );
	void eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool NotifyGameSessionEnded ( );
	void eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber );
	void eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
};

UClass* UUIDataStore::pClassPointer = NULL;

// Class Engine.UISkin
// 0x015C (0x01D8 - 0x007C)
class UUISkin : public UUIDataStore
{
public:
	TArray< class UUIStyle* >                          Styles;                                           		// 0x007C (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FString >                           StyleGroups;                                      		// 0x0088 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FUISoundCue >                       SoundCues;                                        		// 0x0094 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00A0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleLookupTable
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00DC (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleNameMap
	struct FLookupMap_Mirror                           StyleGroupMap;                                    		// 0x0118 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x0160 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.CursorMap
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x019C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.SoundCueMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UISkin" );

		return pClassPointer;
	};

	void GetStyleGroups ( unsigned long bIncludeInheritedGroups, TArray< struct FString >* StyleGroupArray );
	int FindStyleGroupIndex ( struct FString StyleGroupName );
	struct FString GetStyleGroupAtIndex ( int Index );
	bool RenameStyleGroup ( struct FString OldStyleGroupName, struct FString NewStyleGroupName );
	bool RemoveStyleGroupName ( struct FString StyleGroupName );
	bool AddStyleGroupName ( struct FString StyleGroupName );
	bool IsInheritedGroupName ( struct FString StyleGroupName );
	void GetSkinSoundCues ( TArray< struct FUISoundCue >* out_SoundCues );
	bool GetUISoundCue ( struct FName SoundCueName, class USoundCue** out_UISoundCue );
	bool RemoveUISoundCue ( struct FName SoundCueName );
	bool AddUISoundCue ( struct FName SoundCueName, class USoundCue* SoundToPlay );
	class UUITexture* GetCursorResource ( struct FName CursorName );
	void GetAvailableStyles ( unsigned long bIncludeInheritedStyles, TArray< class UUIStyle* >* out_Styles );
};

UClass* UUISkin::pClassPointer = NULL;

// Class Engine.UIStyle
// 0x0070 (0x00B0 - 0x0040)
class UUIStyle : public UUIRoot
{
public:
	struct FSTYLE_ID                                   StyleID;                                          		// 0x0040 (0x0010) [0x0000000000000000]              
	struct FName                                       StyleTag;                                         		// 0x0050 (0x0008) [0x0000000000000000]              
	struct FString                                     StyleName;                                        		// 0x0058 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StyleGroupName;                                   		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      StyleDataClass;                                   		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0074 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIStyle.StateDataMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStyle" );

		return pClassPointer;
	};

	class UUIStyle_Data* eventGetDefaultStyle ( );
	class UUIStyle_Data* GetStyleForStateByClass ( class UClass* StateClass );
	class UUIStyle_Data* GetStyleForState ( class UUIState* StateObject );
};

UClass* UUIStyle::pClassPointer = NULL;

// Class Engine.UIObject
// 0x02D8 (0x046C - 0x0194)
class UUIObject : public UUIScreenObject
{
public:
	struct FWIDGET_ID                                  WidgetID;                                         		// 0x0194 (0x0010) [0x0000000001000000]              
	struct FName                                       WidgetTag;                                        		// 0x01A4 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UUIObject*                                   Owner;                                            		// 0x01AC (0x0004) [0x0000000000200002]              ( CPF_Const )
	class UUIScene*                                    OwnerScene;                                       		// 0x01B0 (0x0004) [0x0000000000200002]              ( CPF_Const )
	struct FUIStyleReference                           PrimaryStyle;                                     		// 0x01B4 (0x0020) [0x0000000000000000]              
	struct FUINavigationData                           NavigationTargets;                                		// 0x01D4 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	int                                                TabIndex;                                         		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FUIDockingSet                               DockTargets;                                      		// 0x01FC (0x0038) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              RenderBounds[ 0x4 ];                              		// 0x0234 (0x0010) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	struct FVector2D                                   RenderBoundsVertices[ 0x4 ];                      		// 0x0244 (0x0020) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0264 (0x000C) MISSED OFFSET
	struct FUIRotation                                 Rotation;                                         		// 0x0270 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RenderOffset;                                     		// 0x02E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                PrivateFlags;                                     		// 0x02EC (0x0004) [0x0000000000000000]              
	struct FUIDataStoreBinding                         ToolTip;                                          		// 0x02F0 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FUIDataStoreBinding                         ContextMenuData;                                  		// 0x0320 (0x0030) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FUIDataStoreBinding                         ActiveDisabledDataSource;                         		// 0x0350 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      ActiveDisabled : 1;                               		// 0x0380 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bEnableActiveCursorUpdates : 1;                   		// 0x0380 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSupportsPrimaryStyle : 1;                        		// 0x0380 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bEnableSceneUpdateNotifications : 1;              		// 0x0380 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDebugShowBounds : 1;                             		// 0x0380 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bPositionDirty : 1;                             		// 0x0380 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bShowWidgetHighlight : 1;                       		// 0x0380 (0x0004) [0x0000000000000000] [0x00000040] 
	class UUIObject*                                   AnimationParent;                                  		// 0x0384 (0x0004) [0x0000000000000000]              
	struct FVector                                     AnimationPosition;                                		// 0x0388 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUIAnimSeqRef >                     AnimStack;                                        		// 0x0394 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UUIStyleResolver* >                  StyleSubscribers;                                 		// 0x03A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FColor                                      DebugBoundsColor;                                 		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_ActiveCursor;                                   		// 0x03B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __OnCreate__Delegate;                             		// 0x03B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreSceneUpdate__Delegate;                     		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPostSceneUpdate__Delegate;                    		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnValueChanged__Delegate;                       		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRefreshSubscriberValue__Delegate;             		// 0x03E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPressed__Delegate;                            		// 0x03F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPressRepeat__Delegate;                        		// 0x0400 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPressRelease__Delegate;                       		// 0x040C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClicked__Delegate;                            		// 0x0418 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDoubleClick__Delegate;                        		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueryToolTip__Delegate;                       		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOpenContextMenu__Delegate;                    		// 0x043C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseContextMenu__Delegate;                   		// 0x0448 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnContextMenuItemSelected__Delegate;            		// 0x0454 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUIAnimEnd__Delegate;                          		// 0x0460 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIObject" );

		return pClassPointer;
	};

	void OnUIAnimEnd ( class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq );
	void eventUIAnimEnd ( int SeqIndex );
	void eventClearUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeq );
	void eventStopUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeq, unsigned long bFinalize );
	void eventPlayUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeqTemplate, float PlaybackRate, unsigned long bLoop, float InitialPosition );
	void AnimSetBottom ( float NewBottom );
	void AnimSetRight ( float NewRight );
	void AnimSetTop ( float NewTop );
	void AnimSetLeft ( float NewLeft );
	void AnimSetScale ( float NewScale );
	void AnimSetRotation ( struct FRotator NewRotation );
	void AnimSetRelPosition ( struct FVector NewPosition, struct FVector InitialPosition );
	void AnimSetPosition ( struct FVector NewPosition );
	void AnimSetColor ( struct FLinearColor NewColor );
	void AnimSetVisibility ( unsigned long bIsVisible );
	void AnimSetOpacity ( float NewOpacity );
	void OnSetDatastoreBinding ( class UUIAction_SetDatastoreBinding* Action );
	void LogRenderBounds ( int Indent );
	class UUIScreenObject* GetParent ( );
	class UUIObject* GetOwner ( );
	class UUIScene* GetScene ( );
	void TickAnim ( float DeltaTime );
	bool SetWidgetStyleByName ( struct FName StyleResolverTagToSet, struct FName StyleFriendlyName );
	int FindStyleSubscriberIndexById ( struct FName StyleSubscriberId );
	int FindStyleSubscriberIndex ( class UUIStyleResolver** Subscriber );
	void RemoveStyleSubscriber ( class UUIStyleResolver* Subscriber );
	void AddStyleSubscriber ( class UUIStyleResolver* Subscriber );
	float GetPositionExtent ( unsigned char Face, unsigned long bIncludeRotation );
	void GetPositionExtents ( unsigned long bIncludeRotation, float* MinX, float* MaxX, float* MinY, float* MaxY );
	bool NeedsActiveCursorUpdates ( );
	void SetActiveCursorUpdate ( unsigned long bShouldReceiveCursorUpdates );
	void SetPrivateBehavior ( int Behavior, unsigned long Value, unsigned long bRecurse );
	bool IsPrivateBehaviorSet ( int Behavior );
	bool CanAcceptFocus ( int PlayerIndex );
	bool SetForcedNavigationTarget ( unsigned char Face, class UUIObject* NavTarget, unsigned long bIsNullOverride );
	bool SetNavigationTarget ( unsigned char Face, class UUIObject* NewNavTarget );
	bool IsDockedTo ( class UUIScreenObject* TargetWidget, unsigned char SourceFace, unsigned char TargetFace );
	bool SetDockParameters ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType );
	bool SetDockPadding ( unsigned char SourceFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType );
	bool SetDockTarget ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace );
	bool IsContainedBy ( class UUIObject* TestWidget );
	void NotifyValueChanged ( int PlayerIndex, int NotifyFlags );
	struct FMatrix GetRotationMatrix ( unsigned long bIncludeParentRotations );
	struct FMatrix GenerateTransformMatrix ( unsigned long bIncludeParentTransforms );
	struct FVector GetAnchorPosition ( unsigned long bRelativeToWidget, unsigned long bPixelSpace );
	void UpdateRotationMatrix ( );
	void RotateWidget ( struct FRotator NewRotationAmount, unsigned long bAccumulateRotation );
	void SetAnchorPosition ( struct FVector NewAnchorPosition, unsigned char InputType );
	bool HasTransform ( unsigned long bIncludeParentTransforms );
	struct FString GetToolTipValue ( );
	struct FString GenerateSceneDataStoreMarkup ( struct FString Group );
	void ClearDefaultDataBinding ( int BindingIndex );
	void GetDefaultDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	bool ResolveDefaultDataBinding ( int BindingIndex );
	struct FString GetDefaultDataBinding ( int BindingIndex );
	void SetDefaultDataBinding ( struct FString MarkupText, int BindingIndex );
	void OnContextMenuItemSelected ( class UUIContextMenu* ContextMenu, int PlayerIndex, int ItemIndex );
	bool OnCloseContextMenu ( class UUIContextMenu* ContextMenu, int PlayerIndex );
	bool OnOpenContextMenu ( class UUIObject* Sender, int PlayerIndex, class UUIContextMenu** CustomContextMenu );
	bool OnQueryToolTip ( class UUIObject* Sender, class UUIToolTip** CustomToolTip );
	void OnDoubleClick ( class UUIScreenObject* EventObject, int PlayerIndex );
	bool OnClicked ( class UUIScreenObject* EventObject, int PlayerIndex );
	void OnPressRelease ( class UUIScreenObject* EventObject, int PlayerIndex );
	void OnPressRepeat ( class UUIScreenObject* EventObject, int PlayerIndex );
	void OnPressed ( class UUIScreenObject* EventObject, int PlayerIndex );
	bool OnRefreshSubscriberValue ( class UUIObject* Sender, int BindingIndex );
	void OnValueChanged ( class UUIObject* Sender, int PlayerIndex );
	void OnPostSceneUpdate ( class UUIObject* Sender );
	void OnPreSceneUpdate ( class UUIObject* Sender );
	void OnCreate ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer );
};

UClass* UUIObject::pClassPointer = NULL;

// Class Engine.ConsoleEntry
// 0x001C (0x0488 - 0x046C)
class UConsoleEntry : public UUIObject
{
public:
	class UUILabel*                                    ConsolePromptLabel;                               		// 0x046C (0x0004) [0x0000000000000000]              
	class UUIImage*                                    ConsolePromptBackground;                          		// 0x0470 (0x0004) [0x0000000000000000]              
	class UUIEditBox*                                  InputBox;                                         		// 0x0474 (0x0004) [0x0000000000000000]              
	class UUIImage*                                    LowerConsoleBorder;                               		// 0x0478 (0x0004) [0x0000000000000000]              
	class UUIImage*                                    UpperConsoleBorder;                               		// 0x047C (0x0004) [0x0000000000000000]              
	int                                                CursorPosition;                                   		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRenderCursor : 1;                                		// 0x0484 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ConsoleEntry" );

		return pClassPointer;
	};

	void SetValue ( struct FString NewValue );
	void SetupDockingLinks ( );
	void eventPostInitialize ( );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
};

UClass* UConsoleEntry::pClassPointer = NULL;

// Class Engine.UILabel
// 0x0040 (0x04AC - 0x046C)
class UUILabel : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                   		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIStringRenderer;                        		// 0x0470 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x0474 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x04A4 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           LabelBackground;                                  		// 0x04A8 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UILabel" );

		return pClassPointer;
	};

	void OnGetTextValue ( class UUIAction_GetTextValue* Action );
	void OnSetLabelText ( class UUIAction_SetLabelText* Action );
	void IgnoreMarkup ( unsigned long bShouldIgnoreMarkup );
	struct FString eventGetValue ( );
	void SetArrayValue ( TArray< struct FString > ValueArray );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
	void SetValue ( struct FString NewText );
};

UClass* UUILabel::pClassPointer = NULL;

// Class Engine.UIToolTip
// 0x002C (0x04D8 - 0x04AC)
class UUIToolTip : public UUILabel
{
public:
	unsigned long                                      bPendingPositionUpdate : 1;                       		// 0x04AC (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bResolveToolTipPosition : 1;                      		// 0x04AC (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bFollowCursor : 1;                                		// 0x04AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoHideOnInput : 1;                             		// 0x04AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              SecondsActive;                                    		// 0x04B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FScriptDelegate                             __ActivateToolTip__Delegate;                      		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DeactivateToolTip__Delegate;                    		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanShowToolTip__Delegate;                       		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIToolTip" );

		return pClassPointer;
	};

	void UpdateToolTipPosition ( );
	bool EndTracking ( );
	class UUIToolTip* BeginTracking ( );
	bool CanShowToolTip ( class UUIToolTip* Sender );
	bool DeactivateToolTip ( );
	class UUIToolTip* ActivateToolTip ( class UUIToolTip* Sender );
};

UClass* UUIToolTip::pClassPointer = NULL;

// Class Engine.cUIBaseToolTip
// 0x0004 (0x04DC - 0x04D8)
class UcUIBaseToolTip : public UUIToolTip
{
public:
	unsigned long                                      m_bUpdatePosition : 1;                            		// 0x04D8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cUIBaseToolTip" );

		return pClassPointer;
	};

	float GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding );
	void SetValue ( struct FString NewText );
};

UClass* UcUIBaseToolTip::pClassPointer = NULL;

// Class Engine.cUIDataStore_Localisation
// 0x0010 (0x008C - 0x007C)
class UcUIDataStore_Localisation : public UUIDataStore
{
public:
	struct FString                                     m_sInputLanguageId;                               		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bHasIME : 1;                                    		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIMEActive : 1;                                 		// 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cUIDataStore_Localisation" );

		return pClassPointer;
	};

	void SetInputLanguageId ( struct FString sInputLangId, unsigned long bHasIME, unsigned long bIMEActive );
};

UClass* UcUIDataStore_Localisation::pClassPointer = NULL;

// Class Engine.UIDataStore_GameState
// 0x000C (0x0088 - 0x007C)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;              		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_GameState" );

		return pClassPointer;
	};

	bool NotifyGameSessionEnded ( );
	void OnRefreshDataFieldValue ( );
};

UClass* UUIDataStore_GameState::pClassPointer = NULL;

// Class Engine.CurrentGameDataStore
// 0x003C (0x00C4 - 0x0088)
class UCurrentGameDataStore : public UUIDataStore_GameState
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0088 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FGameDataProviderTypes                      ProviderTypes;                                    		// 0x008C (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UGameInfoDataProvider*                       GameData;                                         		// 0x0098 (0x0004) [0x0000000000000000]              
	TArray< class UPlayerDataProvider* >               PlayerData;                                       		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTeamDataProvider* >                 TeamData;                                         		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bRefreshPlayerDataProviders : 1;                  		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRefreshTeamDataProviders : 1;                    		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __OnAddTeamProvider__Delegate;                    		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CurrentGameDataStore" );

		return pClassPointer;
	};

	void OnAddTeamProvider ( class UTeamDataProvider* Provider );
	bool NotifyGameSessionEnded ( );
	void RefreshTeamDataProviders ( );
	void RefreshPlayerDataProviders ( );
	void NotifyTeamChange ( );
	void NotifyPlayersChanged ( );
	void Timer ( );
	void TeamDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void PlayerDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void ClearDataProviders ( );
	class UTeamDataProvider* GetTeamDataProvider ( class ATeamInfo* TI );
	class UPlayerDataProvider* GetPlayerDataProvider ( class APlayerReplicationInfo* PRI );
	int FindTeamDataProviderIndex ( class ATeamInfo* TI );
	int FindPlayerDataProviderIndex ( class APlayerReplicationInfo* PRI );
	void RemoveTeamDataProvider ( class ATeamInfo* TI );
	void AddTeamDataProvider ( class ATeamInfo* TI );
	void RemovePlayerDataProvider ( class APlayerReplicationInfo* PRI );
	void AddPlayerDataProvider ( class APlayerReplicationInfo* PRI );
	void CreateGameDataProvider ( class AGameReplicationInfo* GRI );
};

UClass* UCurrentGameDataStore::pClassPointer = NULL;

// Class Engine.UIPropertyDataProvider
// 0x0018 (0x0074 - 0x005C)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	TArray< class UClass* >                            ComplexPropertyTypes;                             		// 0x005C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;        		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIPropertyDataProvider" );

		return pClassPointer;
	};

	bool eventGetCustomPropertyValue ( int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue );
	bool CanSupportComplexPropertyType ( class UProperty* UnsupportedProperty );
};

UClass* UUIPropertyDataProvider::pClassPointer = NULL;

// Class Engine.UIDynamicDataProvider
// 0x000C (0x0080 - 0x0074)
class UUIDynamicDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0074 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      DataClass;                                        		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UObject*                                     DataSource;                                       		// 0x007C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDynamicDataProvider" );

		return pClassPointer;
	};

	bool CleanupDataProvider ( );
	class UObject* GetDataSource ( );
	bool eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass );
	void eventProviderInstanceUnbound ( class UObject* DataSourceInstance );
	void eventProviderInstanceBound ( class UObject* DataSourceInstance );
	bool UnbindProviderInstance ( );
	bool BindProviderInstance ( class UObject* DataSourceInstance );
};

UClass* UUIDynamicDataProvider::pClassPointer = NULL;

// Class Engine.InventoryDataProvider
// 0x0000 (0x0080 - 0x0080)
class UInventoryDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.InventoryDataProvider" );

		return pClassPointer;
	};

};

UClass* UInventoryDataProvider::pClassPointer = NULL;

// Class Engine.WeaponDataProvider
// 0x0000 (0x0080 - 0x0080)
class UWeaponDataProvider : public UInventoryDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.WeaponDataProvider" );

		return pClassPointer;
	};

};

UClass* UWeaponDataProvider::pClassPointer = NULL;

// Class Engine.CurrentWeaponDataProvider
// 0x0000 (0x0080 - 0x0080)
class UCurrentWeaponDataProvider : public UWeaponDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CurrentWeaponDataProvider" );

		return pClassPointer;
	};

};

UClass* UCurrentWeaponDataProvider::pClassPointer = NULL;

// Class Engine.GameInfoDataProvider
// 0x0004 (0x0084 - 0x0080)
class UGameInfoDataProvider : public UUIDynamicDataProvider
{
public:
	class AGameReplicationInfo*                        GameDataSource;                                   		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameInfoDataProvider" );

		return pClassPointer;
	};

	void eventProviderInstanceBound ( class UObject* DataSourceInstance );
};

UClass* UGameInfoDataProvider::pClassPointer = NULL;

// Class Engine.GameUISceneClient
// 0x00D8 (0x01D0 - 0x00F8)
class UGameUISceneClient : public UUISceneClient
{
public:
	TArray< class UUIScene* >                          ActiveScenes;                                     		// 0x00F8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UUITexture*                                  CurrentMouseCursor;                               		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bUseHardwareCursor : 1;                         		// 0x0108 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bRenderCursor : 1;                                		// 0x0108 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bIgnoreCharacterAll : 1;                          		// 0x0108 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUpdateInputProcessingStatus : 1;                 		// 0x0108 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateCursorRenderStatus : 1;                    		// 0x0108 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bEnableDebugInput : 1;                            		// 0x0108 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bRenderDebugInfo : 1;                             		// 0x0108 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bRenderDebugInfoAtTop : 1;                        		// 0x0108 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderActiveControlInfo : 1;                     		// 0x0108 (0x0004) [0x0000000000044000] [0x00000100] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderFocusedControlInfo : 1;                    		// 0x0108 (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderTargetControlInfo : 1;                     		// 0x0108 (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bSelectVisibleTargetsOnly : 1;                    		// 0x0108 (0x0004) [0x0000000000044000] [0x00000800] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInteractiveMode : 1;                             		// 0x0108 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisplayFullPaths : 1;                            		// 0x0108 (0x0004) [0x0000000000044000] [0x00002000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowWidgetPath : 1;                              		// 0x0108 (0x0004) [0x0000000000044000] [0x00004000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowRenderBounds : 1;                            		// 0x0108 (0x0004) [0x0000000000044000] [0x00008000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowCurrentState : 1;                            		// 0x0108 (0x0004) [0x0000000000044000] [0x00010000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowMousePos : 1;                                		// 0x0108 (0x0004) [0x0000000000044000] [0x00020000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRestrictActiveControlToFocusedScene : 1;         		// 0x0108 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bKillRestoreMenuProgression : 1;                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bOverrideEmulateButtonPress : 1;                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	int                                                m_nHardwareCurrentMouseCursor;                    		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LatestDeltaTime;                                  		// 0x0110 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FDouble                                     DoubleClickStartTime;                             		// 0x0114 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FIntPoint                                   DoubleClickStartPosition;                         		// 0x011C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UTexture*                                    DefaultUITexture[ 0x3 ];                          		// 0x0124 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMap_Mirror                                 InitialPressedKeys;                               		// 0x0130 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                IgnoreCharacterRepeat;                            		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OverlaySceneAlphaModulation;                      		// 0x0170 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UUIScreenObject*                             DebugTarget;                                      		// 0x0174 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UUIAnimationSeq* >                   AnimSequencePool;                                 		// 0x0178 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UUIObject* >                         AnimSubscribers;                                  		// 0x0184 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FUIDragState                                DragState;                                        		// 0x0190 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fUIScale;                                         		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            aPropagatedEventClasses;                          		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameUISceneClient" );

		return pClassPointer;
	};

	class UUIAnimationSeq* AnimLookupSequence ( struct FName SequenceName );
	void AnimUnSubscribe ( class UUIObject* Target );
	void AnimSubscribe ( class UUIObject* Target );
	float GetUIScale ( );
	void SetUIScale ( float fNewUIScale );
	void ShowMenuProgression ( );
	void ShowDataStores ( unsigned long bVerbose );
	void RefreshFormatting ( );
	void ShowDataStoreField ( struct FString DataStoreMarkup );
	void CloseMenu ( struct FName SceneName );
	void OpenMenu ( struct FString MenuPath, int PlayerIndex );
	void CreateMenu ( class UClass* SceneClass, int PlayerIndex );
	void ToggleDebugInput ( unsigned long bEnable );
	void ShowMenuStates ( );
	void ShowRenderBounds ( );
	void ShowDockingStacks ( );
	void RestoreMenuProgression ( class UUIScene* BaseScene );
	void ClearMenuProgression ( );
	void SaveMenuProgression ( );
	class UUIScene* GetActiveScene ( );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyGameSessionEnded ( );
	void NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	bool eventCanShowToolTips ( );
	void eventConditionalPause ( unsigned long bDesiredPauseState );
	bool SetActiveControl ( class UUIObject* NewActiveControl );
	bool CanUnpauseInternalUI ( );
	void RequestCursorRenderUpdate ( );
	void RequestInputProcessingUpdate ( );
	class UUIScene* FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner );
	class UUIObject* CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner );
	class UUIScene* CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate );
	class UUIScene* GetTransientScene ( );
	unsigned char GetCurrentNetMode ( );
};

UClass* UGameUISceneClient::pClassPointer = NULL;

// Class Engine.PickupDataProvider
// 0x0000 (0x0080 - 0x0080)
class UPickupDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PickupDataProvider" );

		return pClassPointer;
	};

};

UClass* UPickupDataProvider::pClassPointer = NULL;

// Class Engine.PlayerDataProvider
// 0x0000 (0x0080 - 0x0080)
class UPlayerDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerDataProvider" );

		return pClassPointer;
	};

};

UClass* UPlayerDataProvider::pClassPointer = NULL;

// Class Engine.PlayerOwnerDataProvider
// 0x0004 (0x0084 - 0x0080)
class UPlayerOwnerDataProvider : public UPlayerDataProvider
{
public:
	class UPlayerDataProvider*                         PlayerData;                                       		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerOwnerDataProvider" );

		return pClassPointer;
	};

	bool CleanupDataProvider ( );
	void SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData );
};

UClass* UPlayerOwnerDataProvider::pClassPointer = NULL;

// Class Engine.PlayerOwnerDataStore
// 0x0030 (0x00B8 - 0x0088)
class UPlayerOwnerDataStore : public UUIDataStore_GameState
{
public:
	struct FPlayerDataProviderTypes                    ProviderTypes;                                    		// 0x0088 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UPlayerOwnerDataProvider*                    PlayerData;                                       		// 0x0098 (0x0004) [0x0000000000000000]              
	class UCurrentWeaponDataProvider*                  CurrentWeapon;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	TArray< class UWeaponDataProvider* >               WeaponList;                                       		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UPowerupDataProvider* >              PowerupList;                                      		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerOwnerDataStore" );

		return pClassPointer;
	};

	bool NotifyGameSessionEnded ( );
	void ClearDataProviders ( );
	void SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData );
};

UClass* UPlayerOwnerDataStore::pClassPointer = NULL;

// Class Engine.UISettingsProvider
// 0x0008 (0x007C - 0x0074)
class UUISettingsProvider : public UUIPropertyDataProvider
{
public:
	struct FName                                       ProviderTag;                                      		// 0x0074 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UISettingsProvider" );

		return pClassPointer;
	};

	bool CleanupDataProvider ( );
	bool OnModifiedProperty ( struct FName PropertyName, class UUIObject* Widget );
	void SavePropertyValue ( struct FName PropertyName, class UUIObject* Widget );
	void LoadPropertyValue ( struct FName PropertyName, class UUIObject* Widget );
};

UClass* UUISettingsProvider::pClassPointer = NULL;

// Class Engine.UIDataStore_Settings
// 0x0000 (0x007C - 0x007C)
class UUIDataStore_Settings : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Settings" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_Settings::pClassPointer = NULL;

// Class Engine.UIDataStore_PlayerSettings
// 0x0028 (0x00A4 - 0x007C)
class UUIDataStore_PlayerSettings : public UUIDataStore_Settings
{
public:
	TArray< struct FString >                           PlayerSettingsProviderClassNames;                 		// 0x007C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            PlayerSettingsProviderClasses;                    		// 0x0088 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UPlayerSettingsProvider* >           PlayerSettings;                                   		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PlayerIndex;                                      		// 0x00A0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_PlayerSettings" );

		return pClassPointer;
	};

	bool NotifyGameSessionEnded ( );
	void ClearDataProviders ( );
	class ULocalPlayer* GetPlayerOwner ( );
};

UClass* UUIDataStore_PlayerSettings::pClassPointer = NULL;

// Class Engine.PlayerSettingsProvider
// 0x0000 (0x007C - 0x007C)
class UPlayerSettingsProvider : public UUISettingsProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PlayerSettingsProvider" );

		return pClassPointer;
	};

	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UPlayerSettingsProvider::pClassPointer = NULL;

// Class Engine.PowerupDataProvider
// 0x0000 (0x0080 - 0x0080)
class UPowerupDataProvider : public UInventoryDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PowerupDataProvider" );

		return pClassPointer;
	};

	bool eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass );
};

UClass* UPowerupDataProvider::pClassPointer = NULL;

// Class Engine.SceneDataStore
// 0x0010 (0x008C - 0x007C)
class USceneDataStore : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0080 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIScene*                                    OwnerScene;                                       		// 0x0084 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIDynamicFieldProvider*                     SceneDataProvider;                                		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SceneDataStore" );

		return pClassPointer;
	};

	int FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind );
	bool GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value );
	bool ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag );
	bool ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue );
	bool ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue );
	bool RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag );
	bool RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove );
	bool InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue );
	bool SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* CollectionValues );
	bool GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* out_DataValueArray );
	bool ClearFields ( unsigned long bReinitializeRuntimeFields );
	int FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields );
	bool RemoveField ( struct FName FieldName );
	bool AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition );
};

UClass* USceneDataStore::pClassPointer = NULL;

// Class Engine.UIDataStore_SessionSettings
// 0x0024 (0x00A0 - 0x007C)
class UUIDataStore_SessionSettings : public UUIDataStore_Settings
{
public:
	TArray< struct FString >                           SessionSettingsProviderClassNames;                		// 0x007C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            SessionSettingsProviderClasses;                   		// 0x0088 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USessionSettingsProvider* >          SessionSettings;                                  		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_SessionSettings" );

		return pClassPointer;
	};

	bool NotifyGameSessionEnded ( );
	void ClearDataProviders ( );
};

UClass* UUIDataStore_SessionSettings::pClassPointer = NULL;

// Class Engine.SessionSettingsProvider
// 0x000C (0x0088 - 0x007C)
class USessionSettingsProvider : public UUISettingsProvider
{
public:
	class UClass*                                      ProviderClientClass;                              		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ProviderClientMetaClass;                          		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ProviderClient;                                   		// 0x0084 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SessionSettingsProvider" );

		return pClassPointer;
	};

	bool CleanupDataProvider ( );
	bool eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass );
	void eventProviderClientUnbound ( class UClass* DataSourceClass );
	void eventProviderClientBound ( class UClass* DataSourceClass );
	bool UnbindProviderClient ( );
	bool BindProviderClient ( class UClass* DataSourceClass );
};

UClass* USessionSettingsProvider::pClassPointer = NULL;

// Class Engine.TeamDataProvider
// 0x0018 (0x0098 - 0x0080)
class UTeamDataProvider : public UUIDynamicDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0080 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       PlayerListFieldName;                              		// 0x0084 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UPlayerDataProvider* >               Players;                                          		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TeamDataProvider" );

		return pClassPointer;
	};

	void RegeneratePlayerLists ( TArray< class UPlayerDataProvider* > AllPlayers );
};

UClass* UTeamDataProvider::pClassPointer = NULL;

// Class Engine.UIAnimationSeq
// 0x001C (0x005C - 0x0040)
class UUIAnimationSeq : public UUIAnimation
{
public:
	struct FName                                       SeqName;                                          		// 0x0040 (0x0008) [0x0000000000000000]              
	float                                              SeqDuration;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	TArray< struct FUIAnimTrack >                      Tracks;                                           		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAbsolutePositioning : 1;                         		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAnimationSeq" );

		return pClassPointer;
	};

	void ApplyAnimation ( class UUIObject* TargetWidget, int TrackIndex, float Position, int LFI, int NFI, struct FUIAnimSeqRef AnimRefInst );
};

UClass* UUIAnimationSeq::pClassPointer = NULL;

// Class Engine.UIButton
// 0x0018 (0x0484 - 0x046C)
class UUIButton : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0470 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	struct FEnumeratedName                             ClickedCue;                                       		// 0x0474 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIButton" );

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void OnSetImage ( class UcUIAction_SetImage* Action );
	void SetImage ( class USurface* NewImage );
};

UClass* UUIButton::pClassPointer = NULL;

// Class Engine.UILabelButton
// 0x0038 (0x04BC - 0x0484)
class UUILabelButton : public UUIButton
{
public:
	struct FPointer                                    VfTable_IUIStringRenderer;                        		// 0x0484 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIDataStoreBinding                         CaptionDataSource;                                		// 0x0488 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x04B8 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UILabelButton" );

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
	void OnGetTextValue ( class UUIAction_GetTextValue* Action );
	void OnSetLabelText ( class UUIAction_SetLabelText* Action );
	struct FString eventGetCaption ( );
	void SetCaption ( struct FString NewText );
};

UClass* UUILabelButton::pClassPointer = NULL;

// Class Engine.UICalloutButton
// 0x001D (0x04D9 - 0x04BC)
class UUICalloutButton : public UUILabelButton
{
public:
	struct FString                                     DefaultMarkupStringTemplate;                      		// 0x04BC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FName                                       CalloutDataStoreTag;                              		// 0x04C8 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FName                                       InputAliasTag;                                    		// 0x04D0 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      IconAlignment;                                    		// 0x04D8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UICalloutButton" );

		return pClassPointer;
	};

	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy ( unsigned long bCreateIfNecessary );
	bool VerifyDefaultMarkupString ( );
	class UUICalloutButtonPanel* GetPanelOwner ( );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventPostInitialize ( );
	struct FString eventGenerateCompleteCaptionMarkup ( struct FName InputAlias );
	struct FString eventGetCalloutMarkupString ( struct FName AlternateInputAlias );
	struct FName eventGetCalloutDataStoreName ( );
	bool eventSetInputAlias ( struct FName NewInputAlias );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool UnsubscribeFromInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy );
	bool SubscribeToInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy );
	void SetInputTag ( struct FName NewInputAlias );
	class UUIDataStore_InputAlias* GetCalloutDataStore ( class ULocalPlayer* AlternatePlayer );
};

UClass* UUICalloutButton::pClassPointer = NULL;

// Class Engine.UIContainer
// 0x0004 (0x0470 - 0x046C)
class UUIContainer : public UUIObject
{
public:
	class UUIComp_AutoAlignment*                       AutoAlignment;                                    		// 0x046C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIContainer" );

		return pClassPointer;
	};

};

UClass* UUIContainer::pClassPointer = NULL;

// Class Engine.UICalloutButtonPanel
// 0x0070 (0x04E0 - 0x0470)
class UUICalloutButtonPanel : public UUIContainer
{
public:
	class UUICalloutButton*                            ButtonTemplate;                                   		// 0x0470 (0x0004) [0x0000000004220001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	TArray< class UUICalloutButton* >                  CalloutButtons;                                   		// 0x0474 (0x000C) [0x0000000004422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      ButtonBarOrientation;                             		// 0x0480 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ButtonLayout;                                     		// 0x0481 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       ButtonPadding[ 0x2 ];                             		// 0x0484 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0494 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UICalloutButtonPanel.ButtonInputKeyMappings
	TArray< struct FName >                             CalloutButtonAliases;                             		// 0x04D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bGeneratingInitialButtons : 1;                    		// 0x04DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRefreshButtonDocking : 1;                        		// 0x04DC (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UICalloutButtonPanel" );

		return pClassPointer;
	};

	void InitializeInputProxy ( );
	void ConfigureChildButton ( class UUICalloutButton* ChildButton );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventPostInitialize ( );
	bool eventCanButtonAcceptFocus ( struct FName InputAliasTag, int PlayerIndex );
	bool eventContainsButton ( struct FName ButtonInputAlias );
	int eventFindButtonIndex ( struct FName ButtonInputAlias );
	class UUICalloutButton* eventFindButton ( struct FName ButtonInputAlias );
	bool eventEnableButton ( struct FName ButtonInputAlias, int PlayerIndex, unsigned long bEnableButton, unsigned long bUpdateButtonVisibility );
	bool eventShowButton ( struct FName ButtonInputAlias, unsigned long bShowButton );
	bool eventSetButtonCallback ( struct FName ButtonInputAlias, struct FScriptDelegate NewClickHandler );
	bool eventSetButtonInputAlias ( struct FName ButtonInputAlias, struct FName NewButtonInputAlias );
	bool eventSetButtonCaption ( struct FName ButtonInputAlias, struct FString NewButtonCaption );
	bool eventRemoveButtonByAlias ( struct FName ButtonInputAlias );
	bool eventRemoveButton ( class UUICalloutButton* ButtonToRemove );
	int eventInsertButton ( class UUICalloutButton* NewButton );
	void RequestButtonDockingUpdate ( unsigned long bImmediately );
	int FindBestInsertionIndex ( class UUICalloutButton* ButtonToInsert, unsigned long bSearchChildrenArray );
	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy ( unsigned long bCreateIfNecessary );
	class UUICalloutButton* CreateCalloutButton ( struct FName ButtonInputAlias, struct FName ButtonName, unsigned long bInsertChild );
	void GetAvailableCalloutButtonAliases ( class ULocalPlayer* PlayerOwner, TArray< struct FName >* AvailableAliases );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventSynchronizeInputAliases ( );
	void PopulateCalloutButtonArray ( );
};

UClass* UUICalloutButtonPanel::pClassPointer = NULL;

// Class Engine.UICheckbox
// 0x0058 (0x04DC - 0x0484)
class UUICheckbox : public UUIButton
{
public:
	struct FEnumeratedName                             CheckedCue;                                       		// 0x0484 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             UncheckedCue;                                     		// 0x0494 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FUIDataStoreBinding                         ValueDataSource;                                  		// 0x04A4 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawImage*                           CheckedImageComponent;                            		// 0x04D4 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	unsigned long                                      bIsChecked : 1;                                   		// 0x04D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRadioButtonBehaviour : 1;                        		// 0x04D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UICheckbox" );

		return pClassPointer;
	};

	void OnSetBoolValue ( class UUIAction_SetBoolValue* Action );
	void SetValue ( unsigned long bShouldBeChecked, int PlayerIndex );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	bool IsChecked ( );
	void SetCheckImage ( class USurface* NewImage );
};

UClass* UUICheckbox::pClassPointer = NULL;

// Class Engine.UIComboBox
// 0x009C (0x0508 - 0x046C)
class UUIComboBox : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      ComboEditboxClass;                                		// 0x0470 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ComboButtonClass;                                 		// 0x0474 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ComboListClass;                                   		// 0x0478 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UUIEditBox*                                  ComboEditbox;                                     		// 0x047C (0x0004) [0x0000000006000003]              ( CPF_Edit | CPF_Const | CPF_NoClear | CPF_EditInline )
	class UUIToggleButton*                             ComboButton;                                      		// 0x0480 (0x0004) [0x0000000006000003]              ( CPF_Edit | CPF_Const | CPF_NoClear | CPF_EditInline )
	class UUIList*                                     ComboList;                                        		// 0x0484 (0x0004) [0x0000000006000003]              ( CPF_Edit | CPF_Const | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawCaption*                         CaptionRenderComponent;                           		// 0x0488 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUIComp_DrawImage*                           BackgroundRenderComponent;                        		// 0x048C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FUIDataStoreBinding                         CaptionDataSource;                                		// 0x0490 (0x0030) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FEnumeratedName                             OpenList;                                         		// 0x04C0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DecrementCue;                                     		// 0x04D0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDockListToButton : 1;                            		// 0x04E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FScriptDelegate                             __CreateCustomComboEditbox__Delegate;             		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CreateCustomComboButton__Delegate;              		// 0x04F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CreateCustomComboList__Delegate;                		// 0x04FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComboBox" );

		return pClassPointer;
	};

	void OnGetTextValue ( class UUIAction_GetTextValue* Action );
	void ListItemSelected ( class UUIList* Sender, int PlayerIndex );
	void SelectedItemChanged ( class UUIObject* Sender, int PlayerIndex );
	void EditboxTextChanged ( class UUIObject* Sender, int PlayerIndex );
	bool ShowListClickHandler ( class UUIScreenObject* EventObject, int PlayerIndex );
	void ButtonPressed ( class UUIScreenObject* EventObject, int PlayerIndex );
	void EditboxPressed ( class UUIScreenObject* EventObject, int PlayerIndex );
	void SetListDocking ( unsigned long bDockToButton );
	bool IsListDockedToButton ( );
	void SetEditboxText ( struct FString NewText, int PlayerIndex, unsigned long bListItemsOnly, unsigned long bSkipNotification );
	void eventHideList ( int PlayerIndex );
	void eventShowList ( int PlayerIndex );
	void SetVisibility ( unsigned long bIsVisible );
	void eventPostInitialize ( );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	class UUIList* CreateCustomComboList ( class UUIComboBox* ListOwner );
	class UUIToggleButton* CreateCustomComboButton ( class UUIComboBox* ButtonOwner );
	class UUIEditBox* CreateCustomComboEditbox ( class UUIComboBox* EditboxOwner );
};

UClass* UUIComboBox::pClassPointer = NULL;

// Class Engine.UIComp_AutoAlignment
// 0x0002 (0x004E - 0x004C)
class UUIComp_AutoAlignment : public UUIComponent
{
public:
	unsigned char                                      HorzAlignment;                                    		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VertAlignment;                                    		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_AutoAlignment" );

		return pClassPointer;
	};

};

UClass* UUIComp_AutoAlignment::pClassPointer = NULL;

// Class Engine.UIList
// 0x02A0 (0x070C - 0x046C)
class UUIList : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIScreenValue_Extent                       RowHeight;                                        		// 0x0470 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       MinColumnSize;                                    		// 0x0478 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       ColumnWidth;                                      		// 0x0480 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       HeaderCellPadding;                                		// 0x0488 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       HeaderElementSpacing;                             		// 0x0490 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       CellSpacing;                                      		// 0x0498 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       CellPadding;                                      		// 0x04A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Index;                                            		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TopIndex;                                         		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ToolTipIndex;                                     		// 0x04B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ToolTipColumnIndex;                               		// 0x04B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      ToolTipOverColumnHeader : 1;                      		// 0x04B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnableMultiSelect : 1;                           		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableVerticalScrollbar : 1;                     		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAlwaysShowVerticalScrollbar : 1;                 		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInitializeScrollbars : 1;                        		// 0x04B8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bAllowDisabledItemSelection : 1;                  		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDisableItemSelection : 1;                        		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bConsumeMouseInput : 1;                           		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bAllowDragAndDropReordering : 1;                		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bInsertBetween : 1;                             		// 0x04B8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bSingleClickSubmission : 1;                       		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bCtrlAlwaysOn : 1;                                		// 0x04B8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUpdateItemUnderCursor : 1;                       		// 0x04B8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bHoverStateOverridesSelected : 1;                 		// 0x04B8 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bRowBasedHotTracking : 1;                         		// 0x04B8 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bRowBasedSelection : 1;                           		// 0x04B8 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bAllowColumnResizing : 1;                         		// 0x04B8 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bDisplayDataBindings : 1;                         		// 0x04B8 (0x0004) [0x0000000000002001] [0x00020000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bSortingList : 1;                                 		// 0x04B8 (0x0004) [0x0000000000002002] [0x00040000] ( CPF_Const | CPF_Transient )
	int                                                MaxVisibleItems;                                  		// 0x04BC (0x0004) [0x0000000000222001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	int                                                ColumnCount;                                      		// 0x04C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RowCount;                                         		// 0x04C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ColumnAutoSizeMode;                               		// 0x04C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RowAutoSizeMode;                                  		// 0x04C9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CellLinkType;                                     		// 0x04CA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WrapType;                                         		// 0x04CB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Position                     m_DragAndDropDeadzone;                            		// 0x04CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue                              m_InsertMarkerSize;                               		// 0x04D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStyleReference                           m_InsertMarkerStyle;                              		// 0x04E0 (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           m_BackgroundStyle;                                		// 0x0500 (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           m_CellStyle;                                      		// 0x0520 (0x0020) [0x0000000000000000]              
	int                                                m_nInsertPosition;                                		// 0x0540 (0x0004) [0x0000000000000000]              
	struct FUIScreenValue_Position                     m_StartMousePosition;                             		// 0x0544 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAutoScrollStart;                               		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAutoScrollAmount;                              		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FEnumeratedName                             DragCue;                                          		// 0x0558 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DropCue;                                          		// 0x0568 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DropFailedCue;                                    		// 0x0578 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDraggedAlpha;                                    		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       ScrollbarDockingOffsetTop;                        		// 0x058C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       ScrollbarDockingOffsetBottom;                     		// 0x0594 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIScrollbar*                                VerticalScrollbar;                                		// 0x059C (0x0004) [0x0000000000000000]              
	struct FUIStyleReference                           ColumnHeaderStyle;                                		// 0x05A0 (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           ColumnHeaderBackgroundStyle[ 0x3 ];               		// 0x05C0 (0x0060) [0x0000000000000000]              
	int                                                ResizeColumn;                                     		// 0x0620 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SetIndexMutex;                                    		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ValueChangeNotificationMutex;                     		// 0x0628 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x062C (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIListElementProvider*                      DataProvider;                                     		// 0x065C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0660 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< int >                                      Items;                                            		// 0x0664 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      SelectedItems;                                    		// 0x0670 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UUIComp_ListElementSorter*                   SortComponent;                                    		// 0x067C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUIComp_ListPresenterBase*                   CellDataComponent;                                		// 0x0680 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FEnumeratedName                             SubmitDataSuccessCue;                             		// 0x0684 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             SubmitDataFailedCue;                              		// 0x0694 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DecrementIndexCue;                                		// 0x06A4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             IncrementIndexCue;                                		// 0x06B4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             SortAscendingCue;                                 		// 0x06C4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             SortDescendingCue;                                		// 0x06D4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             ClickedCue;                                       		// 0x06E4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __OnSubmitSelection__Delegate;                    		// 0x06F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnListElementsSorted__Delegate;                 		// 0x0700 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIList" );

		return pClassPointer;
	};

	void OnChildRepositioned ( class UUIScreenObject* Sender );
	void OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState );
	void ClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex );
	bool ShouldRenderColumnHeaders ( );
	void EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders );
	bool eventIsValueChangeNotificationEnabled ( );
	void eventDisableValueChangeNotification ( );
	void eventEnableValueChangeNotification ( );
	bool eventIsSetIndexEnabled ( );
	void eventDisableSetIndex ( );
	void eventEnableSetIndex ( );
	void eventDecrementAllMutexes ( unsigned long bDispatchUpdates );
	void eventIncrementAllMutexes ( );
	bool eventAllMutexesDisabled ( );
	void eventPostInitialize ( );
	void eventInitialized ( );
	void OnGetTextValue ( class UUIAction_GetTextValue* Action );
	void OnSetListIndex ( class UUIAction_SetListIndex* Action );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	bool IsElementAutoSizingEnabled ( );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	bool IsHotTrackingEnabled ( );
	void SetHotTracking ( unsigned long bShouldUpdateItemUnderCursor );
	bool CanSelectElement ( int ElementIndex );
	bool IsElementEnabled ( int ElementIndex );
	bool SetTopIndex ( int NewTopIndex, unsigned long bClampValue );
	bool SetIndex ( int NewIndex, unsigned long bClampValue, unsigned long bSkipNotification );
	int FindItemIndex ( struct FString ItemValue, int CellIndex );
	struct FString GetElementValue ( int ElementIndex, int CellIndex );
	int GetCurrentItem ( );
	void SelectElement ( int ElementIndex, unsigned long bSelected );
	TArray< int > GetSelectedItems ( );
	int GetResizeColumn ( struct FCellHitDetectionInfo* ClickedCell );
	int CalculateIndexFromCursorLocation ( unsigned long bRequireValidIndex );
	struct FVector2D GetClientRegion ( unsigned long bColHeader );
	float GetRowHeight ( int RowIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue );
	float GetColumnWidth ( int ColumnIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue );
	void SetRowCount ( int NewRowCount );
	void SetColumnCount ( int NewColumnCount );
	int GetTotalColumnCount ( );
	int GetTotalRowCount ( );
	int GetMaxNumVisibleColumns ( );
	int GetMaxNumVisibleRows ( );
	int GetMaxVisibleElementCount ( );
	int GetItemCount ( );
	int RemoveElement ( int ElementToRemove );
	bool ScrollVerticalPage ( int nPageChange );
	bool ScrollVertical ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed );
	bool IsHoldingCtrl ( int ControllerId );
	void OnListElementsSorted ( class UUIList* Sender );
	void OnSubmitSelection ( class UUIList* Sender, int PlayerIndex );
};

UClass* UUIList::pClassPointer = NULL;

// Class Engine.UIComp_ListComponentBase
// 0x0000 (0x004C - 0x004C)
class UUIComp_ListComponentBase : public UUIComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ListComponentBase" );

		return pClassPointer;
	};

};

UClass* UUIComp_ListComponentBase::pClassPointer = NULL;

// Class Engine.UIComp_ListPresenterBase
// 0x0004 (0x0050 - 0x004C)
class UUIComp_ListPresenterBase : public UUIComp_ListComponentBase
{
public:
	unsigned long                                      bReapplyFormatting : 1;                           		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ListPresenterBase" );

		return pClassPointer;
	};

	struct FString GetElementValue ( int ElementIndex, int CellIndex );
	void EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders );
	bool ShouldRenderColumnHeaders ( );
	bool ShouldAdjustListBounds ( unsigned char Orientation );
	void CalculateAutoSizeColumnWidth ( int ColIndex, unsigned long bReturnUnformattedValue, float* out_ColWidth, float* out_StylePadding );
	void CalculateAutoSizeRowHeight ( int RowIndex, unsigned long bReturnUnformattedValue, float* out_RowHeight, float* out_StylePadding );
	class UUIListElementCellProvider* GetCellSchemaProvider ( );
};

UClass* UUIComp_ListPresenterBase::pClassPointer = NULL;

// Class Engine.UIComp_ListPresenter
// 0x00FC (0x014C - 0x0050)
class UUIComp_ListPresenter : public UUIComp_ListPresenterBase
{
public:
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;               		// 0x0050 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIElementCellSchema                        ElementSchema;                                    		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FUIListItem >                       ListItems;                                        		// 0x0060 (0x000C) [0x0000000005522001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UUITexture*                                  ColumnHeaderBackground[ 0x3 ];                    		// 0x006C (0x000C) [0x0000000014400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	class UUITexture*                                  ListItemOverlay[ 0x6 ];                           		// 0x0078 (0x0018) [0x0000000014400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	struct FTextureCoordinates                         ColumnHeaderBackgroundCoordinates[ 0x3 ];         		// 0x0090 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UUITexture*                                  m_InsertMarker;                                   		// 0x00C0 (0x0004) [0x0000000014400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	struct FTextureCoordinates                         ListItemOverlayCoordinates[ 0x6 ];                		// 0x00C4 (0x0060) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisplayColumnHeaders : 1;                        		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FColor >                            RowBackgroundColors;                              		// 0x0128 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UUIListString* >                     m_ListStringPool;                                 		// 0x0134 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UUITexture* >                        m_TexturePool;                                    		// 0x0140 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ListPresenter" );

		return pClassPointer;
	};

	int FindElementIndex ( int DataSourceIndex );
};

UClass* UUIComp_ListPresenter::pClassPointer = NULL;

// Class Engine.UIComp_ListPresenterCascade
// 0x0000 (0x014C - 0x014C)
class UUIComp_ListPresenterCascade : public UUIComp_ListPresenter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ListPresenterCascade" );

		return pClassPointer;
	};

};

UClass* UUIComp_ListPresenterCascade::pClassPointer = NULL;

// Class Engine.UIContextMenu
// 0x0014 (0x0720 - 0x070C)
class UUIContextMenu : public UUIList
{
public:
	class UUIObject*                                   InvokingWidget;                                   		// 0x070C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FContextMenuItem >                  MenuItems;                                        		// 0x0710 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bResolvePosition : 1;                             		// 0x071C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIContextMenu" );

		return pClassPointer;
	};

	int eventFindMenuItemIndex ( class UUIObject* Widget, struct FString ItemToFind );
	bool eventGetMenuItem ( class UUIObject* Widget, int IndexToGet, struct FString* out_MenuItem );
	bool eventGetAllMenuItems ( class UUIObject* Widget, TArray< struct FString >* out_MenuItems );
	bool eventRemoveMenuItemAtIndex ( class UUIObject* Widget, int IndexToRemove );
	bool eventRemoveMenuItem ( class UUIObject* Widget, struct FString ItemToRemove );
	bool eventClearMenuItems ( class UUIObject* Widget );
	bool eventInsertMenuItem ( class UUIObject* Widget, struct FString Item, int InsertIndex, unsigned long bAllowDuplicates );
	bool eventSetMenuItems ( class UUIObject* Widget, TArray< struct FString > NewMenuItems, unsigned long bClearExisting, int InsertIndex );
	bool Close ( int PlayerIndex );
	bool Open ( int PlayerIndex );
	bool IsActiveContextMenu ( );
};

UClass* UUIContextMenu::pClassPointer = NULL;

// Class Engine.UIComp_ContextMenuListPresenter
// 0x0000 (0x014C - 0x014C)
class UUIComp_ContextMenuListPresenter : public UUIComp_ListPresenterCascade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ContextMenuListPresenter" );

		return pClassPointer;
	};

};

UClass* UUIComp_ContextMenuListPresenter::pClassPointer = NULL;

// Class Engine.UIComp_DrawComponents
// 0x0024 (0x0070 - 0x004C)
class UUIComp_DrawComponents : public UUIComponent
{
public:
	unsigned char                                      FadeType;                                         		// 0x004C (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FadeAlpha;                                        		// 0x0050 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FadeTarget;                                       		// 0x0054 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FadeTime;                                         		// 0x0058 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeRate;                                         		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnFadeComplete__Delegate;                       		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_DrawComponents" );

		return pClassPointer;
	};

	void OnFadeComplete ( class UUIComp_DrawComponents* Sender );
	void ResetFade ( );
	void Pulse ( float MaxAlpha, float MinAlpha, float PulseRate );
	void Fade ( float FromAlpha, float ToAlpha, float TargetFadeTime );
};

UClass* UUIComp_DrawComponents::pClassPointer = NULL;

// Class Engine.UIComp_DrawString
// 0x00F4 (0x0164 - 0x0070)
class UUIComp_DrawString : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                         		// 0x0070 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIDataStoreSubscriber*                      SubscriberOwner;                                  		// 0x0074 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0078 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FName                                       StyleResolverTag;                                 		// 0x007C (0x0008) [0x0000000000000000]              
	class UUIString*                                   ValueString;                                      		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      StringClass;                                      		// 0x0088 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FAutoSizeData                               AutoSizeParameters[ 0x2 ];                        		// 0x008C (0x0038) [0x0000000000000001]              ( CPF_Edit )
	struct FUIRenderingSubregion                       ClampRegion[ 0x2 ];                               		// 0x00C4 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	struct FUITextStyleOverride                        TextStyleCustomization;                           		// 0x00F4 (0x004C) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStyleReference                           StringStyle;                                      		// 0x0140 (0x0020) [0x0000000000000000]              
	unsigned long                                      bIgnoreMarkup : 1;                                		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRefreshString : 1;                               		// 0x0160 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bReapplyFormatting : 1;                           		// 0x0160 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_DrawString" );

		return pClassPointer;
	};

	void eventSetAutoSizePadding ( unsigned char Orientation, float NearValue, float FarValue, unsigned char NearScaleType, unsigned char FarScaleType );
	void eventEnableAutoSizing ( unsigned char Orientation, unsigned long bShouldEnable );
	bool IsAutoSizeEnabled ( unsigned char Orientation );
	void SetAutoSizeExtent ( unsigned char Orientation, float MinValue, float MaxValue, unsigned char MinScaleType, unsigned char MaxScaleType );
	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
	bool GetFinalStringStyle ( struct FUICombinedStyleData* FinalStyleData );
	class UUIStyle_Combo* GetAppliedStringStyle ( class UUIState* DesiredMenuState );
	unsigned char GetWrapMode ( );
	void DisableCustomSpacingAdjust ( );
	void DisableCustomScale ( );
	void DisableCustomAutoScaling ( );
	void DisableCustomClipAlignment ( );
	void DisableCustomClipMode ( );
	void DisableCustomAlignment ( );
	void DisableCustomAttributes ( );
	void DisableCustomFont ( );
	void DisableCustomPadding ( );
	void DisableCustomOpacity ( );
	void DisableCustomColor ( );
	void SetSpacingAdjust ( unsigned char Orientation, float NewSpacingAdjust );
	void SetScale ( unsigned char Orientation, float NewScale );
	void SetAutoScaling ( unsigned char NewAutoScaleMode, float NewMinScaleValue );
	void SetClipAlignment ( unsigned char NewClipAlignment );
	void SetWrapMode ( unsigned char NewClipMode );
	void SetAlignment ( unsigned char Orientation, unsigned char NewAlignment );
	void SetAttributes ( struct FUITextAttributes NewAttributes );
	void SetFont ( class UFont* NewFont );
	void SetPadding ( float HorizontalPadding, float VerticalPadding );
	void SetOpacity ( float NewOpacity );
	void SetColor ( struct FLinearColor NewColor );
	void SetSubregionAlignment ( unsigned char Orientation, unsigned char NewValue );
	void SetSubregionOffset ( unsigned char Orientation, float NewValue, unsigned char EvalType );
	void SetSubregionSize ( unsigned char Orientation, float NewValue, unsigned char EvalType );
	void EnableSubregion ( unsigned char Orientation, unsigned long bShouldEnable );
	unsigned char GetSubregionAlignment ( unsigned char Orientation );
	float GetSubregionOffset ( unsigned char Orientation, unsigned char OutputType );
	float GetSubregionSize ( unsigned char Orientation, unsigned char OutputType );
	bool IsSubregionEnabled ( unsigned char Orientation );
	void RefreshValue ( );
	struct FString GetValue ( unsigned long bReturnProcessedText );
	void SetValue ( struct FString NewText );
};

UClass* UUIComp_DrawString::pClassPointer = NULL;

// Class Engine.UIComp_DrawCaption
// 0x0000 (0x0164 - 0x0164)
class UUIComp_DrawCaption : public UUIComp_DrawString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_DrawCaption" );

		return pClassPointer;
	};

};

UClass* UUIComp_DrawCaption::pClassPointer = NULL;

// Class Engine.UIComp_DrawImage
// 0x0088 (0x00F8 - 0x0070)
class UUIComp_DrawImage : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                         		// 0x0070 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;               		// 0x0074 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       StyleResolverTag;                                 		// 0x0078 (0x0008) [0x0000000000000000]              
	class UUITexture*                                  ImageRef;                                         		// 0x0080 (0x0004) [0x0000000014400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	struct FUIImageStyleOverride                       StyleCustomization;                               		// 0x0084 (0x0054) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStyleReference                           ImageStyle;                                       		// 0x00D8 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_DrawImage" );

		return pClassPointer;
	};

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
	class USurface* GetImage ( );
	void DisableCustomFormatting ( );
	void DisableCustomPadding ( );
	void DisableCustomOpacity ( );
	void DisableCustomColor ( );
	void DisableCustomCoordinates ( );
	void SetFormatting ( unsigned char Orientation, struct FUIImageAdjustmentData NewFormattingData );
	void SetPadding ( float HorizontalPadding, float VerticalPadding );
	void SetOpacity ( float NewOpacity );
	void SetColor ( struct FLinearColor NewColor );
	void SetCoordinates ( struct FTextureCoordinates NewCoordinates );
	void SetImage ( class USurface* NewImage );
	class UUIStyle_Image* GetAppliedImageStyle ( class UUIState* DesiredMenuState );
};

UClass* UUIComp_DrawImage::pClassPointer = NULL;

// Class Engine.UIEditBox
// 0x0064 (0x04D0 - 0x046C)
class UUIEditBox : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x0470 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawStringEditbox*                   StringRenderComponent;                            		// 0x04A0 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x04A4 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     InitialValue;                                     		// 0x04A8 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bReadOnly : 1;                                    		// 0x04B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPasswordMode : 1;                                		// 0x04B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bMultiLine : 1;                                   		// 0x04B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bScrollBar : 1;                                   		// 0x04B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                MaxCharacters;                                    		// 0x04B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterSet;                                     		// 0x04BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UUIScrollbar*                                ScrollBar;                                        		// 0x04C0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnSubmitText__Delegate;                         		// 0x04C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEditBox" );

		return pClassPointer;
	};

	void OnGetTextValue ( class UUIAction_GetTextValue* Action );
	void OnSetLabelText ( class UUIAction_SetLabelText* Action );
	void IgnoreMarkup ( unsigned long bShouldIgnoreMarkup );
	void RefreshMaxCharacters ( );
	void SetReadOnly ( unsigned long bShouldBeReadOnly );
	bool IsReadOnly ( );
	void eventInitialized ( );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	int CalculateCaretPositionFromCursorLocation ( int PlayerIndex );
	struct FString GetValue ( unsigned long bReturnUserText );
	void SetValue ( struct FString NewText, int PlayerIndex, unsigned long bSkipNotification );
	void SetBackgroundImage ( class USurface* NewImage );
	bool OnSubmitText ( class UUIEditBox* Sender, int PlayerIndex );
	void OnScrollBarSpaceClicked ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex );
	bool OnScrollBarMoved ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed );
};

UClass* UUIEditBox::pClassPointer = NULL;

// Class Engine.UIComp_DrawStringEditbox
// 0x0070 (0x01D4 - 0x0164)
class UUIComp_DrawStringEditbox : public UUIComp_DrawString
{
public:
	struct FString                                     UserText;                                         		// 0x0164 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FUIStringCaretParameters                    StringCaret;                                      		// 0x0170 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStringSelectionRegion                    SelectionRegion;                                  		// 0x018C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SelectionTextColor;                               		// 0x0194 (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                SelectionBackgroundColor;                         		// 0x01A4 (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FPointer                                    CaretNode;                                        		// 0x01B4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FirstCharacterPosition;                           		// 0x01B8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bRecalculateFirstCharacter : 1;                   		// 0x01BC (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	float                                              CaretOffsetX;                                     		// 0x01C0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              CaretOffsetY;                                     		// 0x01C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FWrappedStringElement >             WrappedText;                                      		// 0x01C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_DrawStringEditbox" );

		return pClassPointer;
	};

	struct FString GetSelectedText ( );
	bool GetSelectionRange ( int* out_StartIndex, int* out_EndIndex );
	bool ClearSelection ( );
	bool SetSelectionEnd ( int EndIndex );
	bool SetSelectionStart ( int StartIndex );
	bool SetSelectionRange ( int StartIndex, int EndIndex );
	int GetUserTextLength ( );
	bool SetUserText ( struct FString NewValue );
};

UClass* UUIComp_DrawStringEditbox::pClassPointer = NULL;

// Class Engine.UIComp_DrawStringSlider
// 0x0000 (0x0164 - 0x0164)
class UUIComp_DrawStringSlider : public UUIComp_DrawString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_DrawStringSlider" );

		return pClassPointer;
	};

};

UClass* UUIComp_DrawStringSlider::pClassPointer = NULL;

// Class Engine.UIComp_ListElementSorter
// 0x0020 (0x006C - 0x004C)
class UUIComp_ListElementSorter : public UUIComp_ListComponentBase
{
public:
	unsigned long                                      bAllowCompoundSorting : 1;                        		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReversePrimarySorting : 1;                       		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bReverseSecondarySorting : 1;                     		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                InitialSortColumn;                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InitialSecondarySortColumn;                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PrimarySortColumn;                                		// 0x0058 (0x0004) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	int                                                SecondarySortColumn;                              		// 0x005C (0x0004) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	struct FScriptDelegate                             __OverrideListSort__Delegate;                     		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ListElementSorter" );

		return pClassPointer;
	};

	bool ResortItems ( unsigned long bCaseSensitive );
	bool SortItems ( int ColumnIndex, unsigned long bSecondarySort, unsigned long bCaseSensitive );
	void ResetSortColumns ( unsigned long bResort );
	bool OverrideListSort ( class UUIList* Sender, struct FName CollectionFieldName, struct FUIListSortingParameters* SortParameters, TArray< int >* OrderedIndices );
};

UClass* UUIComp_ListElementSorter::pClassPointer = NULL;

// Class Engine.UIComp_ListPresenterTree
// 0x0000 (0x014C - 0x014C)
class UUIComp_ListPresenterTree : public UUIComp_ListPresenter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ListPresenterTree" );

		return pClassPointer;
	};

};

UClass* UUIComp_ListPresenterTree::pClassPointer = NULL;

// Class Engine.UIObjectList
// 0x0000 (0x070C - 0x070C)
class UUIObjectList : public UUIList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIObjectList" );

		return pClassPointer;
	};

};

UClass* UUIObjectList::pClassPointer = NULL;

// Class Engine.UIComp_ObjectListPresenter
// 0x0000 (0x014C - 0x014C)
class UUIComp_ObjectListPresenter : public UUIComp_ListPresenter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIComp_ObjectListPresenter" );

		return pClassPointer;
	};

};

UClass* UUIComp_ObjectListPresenter::pClassPointer = NULL;

// Class Engine.UIConfigProvider
// 0x0000 (0x005C - 0x005C)
class UUIConfigProvider : public UUIDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIConfigProvider" );

		return pClassPointer;
	};

};

UClass* UUIConfigProvider::pClassPointer = NULL;

// Class Engine.UIConfigFileProvider
// 0x0018 (0x0074 - 0x005C)
class UUIConfigFileProvider : public UUIConfigProvider
{
public:
	TArray< class UUIConfigSectionProvider* >          Sections;                                         		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ConfigFileName;                                   		// 0x0068 (0x000C) [0x0000000000C02000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIConfigFileProvider" );

		return pClassPointer;
	};

};

UClass* UUIConfigFileProvider::pClassPointer = NULL;

// Class Engine.UIConfigSectionProvider
// 0x000C (0x0068 - 0x005C)
class UUIConfigSectionProvider : public UUIConfigProvider
{
public:
	struct FString                                     SectionName;                                      		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIConfigSectionProvider" );

		return pClassPointer;
	};

};

UClass* UUIConfigSectionProvider::pClassPointer = NULL;

// Class Engine.UICustomSkin
// 0x003C (0x0214 - 0x01D8)
class UUICustomSkin : public UUISkin
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01D8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UICustomSkin.WidgetStyleMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UICustomSkin" );

		return pClassPointer;
	};

};

UClass* UUICustomSkin::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlinePlayerDataBase
// 0x0004 (0x0060 - 0x005C)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	class ULocalPlayer*                                Player;                                           		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_OnlinePlayerDataBase" );

		return pClassPointer;
	};

	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlinePlayerDataBase::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineClanMates
// 0x0004 (0x0064 - 0x0060)
class UUIDataProvider_OnlineClanMates : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_OnlineClanMates" );

		return pClassPointer;
	};

	void OnClanMatesReadComplete ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlineClanMates::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineFriendMessages
// 0x0058 (0x00B8 - 0x0060)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FOnlineFriendMessage >              Messages;                                         		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SendingPlayerNameCol;                             		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsFriendInviteCol;                               		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasAcceptedCol;                                  		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasDeniedCol;                                    		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessageCol;                                       		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LastInviteFrom;                                   		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_OnlineFriendMessages" );

		return pClassPointer;
	};

	void OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName );
	void OnLoginChange ( );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	void ReadMessages ( );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlineFriendMessages::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineFriends
// 0x0064 (0x00C4 - 0x0060)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FOnlineFriend >                     FriendsList;                                      		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NickNameCol;                                      		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PresenceInfoCol;                                  		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsOnlineCol;                                     		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingCol;                                    		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingThisGameCol;                            		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsJoinableCol;                                   		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasVoiceSupportCol;                              		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_OnlineFriends" );

		return pClassPointer;
	};

	void eventRefreshFriendsList ( );
	void OnLoginChange ( );
	void OnFriendsReadComplete ( unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlineFriends::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlinePlayers
// 0x0004 (0x0064 - 0x0060)
class UUIDataProvider_OnlinePlayers : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_OnlinePlayers" );

		return pClassPointer;
	};

	void OnPlayersReadComplete ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlinePlayers::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineProfileSettings
// 0x001C (0x007C - 0x0060)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlineProfileSettings*                      Profile;                                          		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FName                                       ProviderName;                                     		// 0x0064 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bWasErrorLastRead : 1;                            		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInitializeFromDefaults : 1;                      		// 0x006C (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	TArray< struct FProfileSettingsArrayProvider >     ProfileSettingsArrayProviders;                    		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_OnlineProfileSettings" );

		return pClassPointer;
	};

	bool eventSaveProfileData ( );
	void OnLoginChange ( );
	void OnReadProfileComplete ( unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlineProfileSettings::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineProfileSettingsArray
// 0x0030 (0x008C - 0x005C)
class UUIDataProvider_OnlineProfileSettingsArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x005C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UOnlineProfileSettings*                      ProfileSettings;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                ProfileSettingId;                                 		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FName                                       ProfileSettingsName;                              		// 0x006C (0x0008) [0x0000000000000000]              
	struct FString                                     ColumnHeaderText;                                 		// 0x0074 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             Values;                                           		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_OnlineProfileSettingsArray" );

		return pClassPointer;
	};

};

UClass* UUIDataProvider_OnlineProfileSettingsArray::pClassPointer = NULL;

// Class Engine.UIDataProvider_Settings
// 0x0014 (0x0094 - 0x0080)
class UUIDataProvider_Settings : public UUIDynamicDataProvider
{
public:
	class USettings*                                   Settings;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	TArray< struct FSettingsArrayProvider >            SettingsArrayProviders;                           		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsAListRow : 1;                                  		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_Settings" );

		return pClassPointer;
	};

};

UClass* UUIDataProvider_Settings::pClassPointer = NULL;

// Class Engine.UIDataProvider_SettingsArray
// 0x0030 (0x008C - 0x005C)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x005C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USettings*                                   Settings;                                         		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                SettingsId;                                       		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FName                                       SettingsName;                                     		// 0x006C (0x0008) [0x0000000000000000]              
	struct FString                                     ColumnHeaderText;                                 		// 0x0074 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FIdToStringMapping >                Values;                                           		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataProvider_SettingsArray" );

		return pClassPointer;
	};

};

UClass* UUIDataProvider_SettingsArray::pClassPointer = NULL;

// Class Engine.UIDataStore_Color
// 0x0000 (0x007C - 0x007C)
class UUIDataStore_Color : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Color" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_Color::pClassPointer = NULL;

// Class Engine.UIDataStore_Fonts
// 0x0000 (0x007C - 0x007C)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Fonts" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_Fonts::pClassPointer = NULL;

// Class Engine.UIDataStore_GameResource
// 0x004C (0x00C8 - 0x007C)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FGameResourceDataProvider >         ElementProviderTypes;                             		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            ListElementProviders;                             		// 0x008C (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_GameResource" );

		return pClassPointer;
	};

	int FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor );
	bool GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue );
	bool GetResourceProviderFields ( struct FName ProviderTag, TArray< struct FName >* ProviderFieldTags );
	bool GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceDataProvider* >* out_Providers );
	int GetProviderCount ( struct FName ProviderTag );
	struct FName GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex );
	int FindProviderTypeIndex ( struct FName ProviderTag );
};

UClass* UUIDataStore_GameResource::pClassPointer = NULL;

// Class Engine.UIDataStore_Gamma
// 0x0000 (0x007C - 0x007C)
class UUIDataStore_Gamma : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Gamma" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_Gamma::pClassPointer = NULL;

// Class Engine.UIDataStore_Images
// 0x0000 (0x007C - 0x007C)
class UUIDataStore_Images : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Images" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_Images::pClassPointer = NULL;

// Class Engine.UIDataStore_StringBase
// 0x0000 (0x007C - 0x007C)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_StringBase" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_StringBase::pClassPointer = NULL;

// Class Engine.UIDataStore_InputAlias
// 0x0048 (0x00C4 - 0x007C)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIDataStoreInputAlias >            InputAliases;                                     		// 0x007C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0088 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIDataStore_InputAlias.InputAliasLookupMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_InputAlias" );

		return pClassPointer;
	};

	bool HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform );
	int FindInputAliasIndex ( struct FName DesiredAlias );
	bool GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	bool GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	struct FName GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FName GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform );
};

UClass* UUIDataStore_InputAlias::pClassPointer = NULL;

// Class Engine.UIDataStore_Remote
// 0x0000 (0x007C - 0x007C)
class UUIDataStore_Remote : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Remote" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_Remote::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlineGameSearch
// 0x0030 (0x00AC - 0x007C)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0080 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       SearchResultsName;                                		// 0x0084 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x008C (0x0004) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0090 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0094 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FGameSearchCfg >                    GameSearchCfgList;                                		// 0x0098 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                SelectedIndex;                                    		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                ActiveSearchIndex;                                		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_OnlineGameSearch" );

		return pClassPointer;
	};

	void ClearAllSearchResults ( );
	void eventMoveToPrevious ( unsigned long bInvalidateExistingSearchResults );
	void eventMoveToNext ( unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByName ( struct FName SearchName, unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByIndex ( int NewIndex, unsigned long bInvalidateExistingSearchResults );
	int FindSearchConfigurationIndex ( struct FName SearchTag );
	class UOnlineGameSearch* eventGetActiveGameSearch ( );
	class UOnlineGameSearch* eventGetCurrentGameSearch ( );
	void BuildSearchResults ( );
	bool eventShowHostGamercard ( unsigned char ControllerIndex, int ListIndex );
	bool eventGetSearchResultFromIndex ( int ListIndex, struct FOnlineGameSearchResult* Result );
	void OnSearchComplete ( unsigned long bWasSuccessful );
	bool OverrideQuerySubmission ( unsigned char ControllerId, class UOnlineGameSearch* Search );
	bool eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults );
	bool InvalidateCurrentSearchResults ( );
	void eventInit ( );
};

UClass* UUIDataStore_OnlineGameSearch::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlineGameSettings
// 0x0014 (0x0090 - 0x007C)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	TArray< struct FGameSettingsCfg >                  GameSettingsCfgList;                              		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      SettingsProviderClass;                            		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SelectedIndex;                                    		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_OnlineGameSettings" );

		return pClassPointer;
	};

	void eventMoveToPrevious ( );
	void eventMoveToNext ( );
	void eventSetCurrentByName ( struct FName SettingsName );
	void eventSetCurrentByIndex ( int NewIndex );
	class UUIDataProvider_Settings* eventGetCurrentProvider ( );
	class UOnlineGameSettings* eventGetCurrentGameSettings ( );
	bool eventCreateGame ( unsigned char ControllerIndex );
};

UClass* UUIDataStore_OnlineGameSettings::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlinePlayerData
// 0x0080 (0x00FC - 0x007C)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlinePlayers*               PlayersProvider;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlineClanMates*             ClanMatesProvider;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	class ULocalPlayer*                                Player;                                           		// 0x008C (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerNick;                                       		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumNewDownloads;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                NumTotalDownloads;                                		// 0x00A0 (0x0004) [0x0000000000000000]              
	struct FString                                     ProfileSettingsClassName;                         		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      ProfileSettingsClass;                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                           		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FString                                     FriendsProviderClassName;                         		// 0x00BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      FriendsProviderClass;                             		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     PlayersProviderClassName;                         		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      PlayersProviderClass;                             		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanMatesProviderClassName;                       		// 0x00DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      ClanMatesProviderClass;                           		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FString                                     FriendMessagesProviderClassName;                  		// 0x00EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      FriendMessagesProviderClass;                      		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_OnlinePlayerData" );

		return pClassPointer;
	};

	bool eventSaveProfileData ( );
	void OnDownloadableContentQueryDone ( unsigned long bWasSuccessful );
	void OnProviderChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void eventRegisterDelegates ( );
	void OnPlayerDataChange ( );
	void OnLoginChange ( );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataStore_OnlinePlayerData::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlineStats
// 0x0070 (0x00EC - 0x007C)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0080 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UClass* >                            StatsReadClasses;                                 		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       StatsReadName;                                    		// 0x0090 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPlayerNickMetaData                         PlayerNickData;                                   		// 0x0098 (0x0014) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FRankMetaData                               RankNameMetaData;                                 		// 0x00AC (0x0014) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FName                                       TotalRowsName;                                    		// 0x00C0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UOnlineStatsRead* >                  StatsReadObjects;                                 		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineStatsRead*                            StatsRead;                                        		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentReadType;                                  		// 0x00D8 (0x0001) [0x0000000000000000]              
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x00DC (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x00E4 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_OnlineStats" );

		return pClassPointer;
	};

	void SortResultsByRank ( );
	void OnReadComplete ( unsigned long bWasSuccessful );
	bool eventShowGamercard ( unsigned char ConrollerIndex, int ListIndex );
	bool eventRefreshStats ( unsigned char ControllerIndex );
	void SetStatsReadInfo ( );
	void eventInit ( );
};

UClass* UUIDataStore_OnlineStats::pClassPointer = NULL;

// Class Engine.UIDataStore_Registry
// 0x0004 (0x0080 - 0x007C)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class UUIDynamicFieldProvider*                     RegistryDataProvider;                             		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Registry" );

		return pClassPointer;
	};

	class UUIDynamicFieldProvider* GetDataProvider ( );
};

UClass* UUIDataStore_Registry::pClassPointer = NULL;

// Class Engine.UIDataStore_StringAliasMap
// 0x004C (0x00C8 - 0x007C)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIMenuInputMap >                   MenuInputMapArray;                                		// 0x007C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMap_Mirror                                 MenuInputSets;                                    		// 0x0088 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                PlayerIndex;                                      		// 0x00C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_StringAliasMap" );

		return pClassPointer;
	};

	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
	int FindMappingWithFieldName ( struct FString FieldName, struct FString SetName );
	class ULocalPlayer* GetPlayerOwner ( );
};

UClass* UUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class Engine.UIDataStore_Strings
// 0x000C (0x0088 - 0x007C)
class UUIDataStore_Strings : public UUIDataStore_StringBase
{
public:
	TArray< class UUIConfigFileProvider* >             LocFileProviders;                                 		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStore_Strings" );

		return pClassPointer;
	};

};

UClass* UUIDataStore_Strings::pClassPointer = NULL;

// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x0040 - 0x0040)
class UUIDataStoreSubscriber : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStoreSubscriber" );

		return pClassPointer;
	};

	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
};

UClass* UUIDataStoreSubscriber::pClassPointer = NULL;

// Class Engine.UIDataStorePublisher
// 0x0000 (0x0040 - 0x0040)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDataStorePublisher" );

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
};

UClass* UUIDataStorePublisher::pClassPointer = NULL;

// Class Engine.UIDynamicFieldProvider
// 0x0090 (0x00EC - 0x005C)
class UUIDynamicFieldProvider : public UUIDataProvider
{
public:
	TArray< struct FUIProviderScriptFieldValue >       PersistentDataFields;                             		// 0x005C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FUIProviderScriptFieldValue >       RuntimeDataFields;                                		// 0x0068 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FMap_Mirror                                 PersistentCollectionData;                         		// 0x0074 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 RuntimeCollectionData;                            		// 0x00B0 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIDynamicFieldProvider" );

		return pClassPointer;
	};

	int FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind );
	bool GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value );
	bool ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag );
	bool ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue );
	bool ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue );
	bool RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag );
	bool RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove );
	bool InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue );
	bool SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* CollectionValues );
	bool GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* out_DataValueArray );
	bool GetCollectionValueSchema ( struct FName FieldName, unsigned long bPersistent, TArray< struct FName >* out_CellTagArray );
	void SavePersistentProviderData ( );
	bool SetField ( struct FName FieldName, unsigned long bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue );
	bool GetField ( struct FName FieldName, struct FUIProviderScriptFieldValue* out_Field );
	bool ClearFields ( unsigned long bReinitializeRuntimeFields );
	int FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields );
	bool RemoveField ( struct FName FieldName );
	bool AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition );
	void InitializeRuntimeFields ( );
};

UClass* UUIDynamicFieldProvider::pClassPointer = NULL;

// Class Engine.UIEditboxString
// 0x0000 (0x00F0 - 0x00F0)
class UUIEditboxString : public UUIString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEditboxString" );

		return pClassPointer;
	};

};

UClass* UUIEditboxString::pClassPointer = NULL;

// Class Engine.UIFrameBox
// 0x0054 (0x04C4 - 0x0470)
class UUIFrameBox : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent[ 0x9 ];                  		// 0x0470 (0x0024) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	struct FCornerSizes                                BackgroundCornerSizes;                            		// 0x0494 (0x0030) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIFrameBox" );

		return pClassPointer;
	};

	void SetBackgroundImage ( unsigned char ImageToSet, class USurface* NewImage );
};

UClass* UUIFrameBox::pClassPointer = NULL;

// Class Engine.UIImage
// 0x00C4 (0x0530 - 0x046C)
class UUIImage : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIDataStoreBinding                         ImageDataSource;                                  		// 0x0470 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawImage*                           ImageComponent;                                   		// 0x04A0 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	unsigned long                                      AllowDragAndDrop : 1;                             		// 0x04A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MonitorDragAndDropDeadzone : 1;                   		// 0x04A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FUIScreenValue_Position                     DragAndDropDeadzone;                              		// 0x04A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Position                     DragAndDropStartMousePosition;                    		// 0x04B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FUIStyleReference                           DraggingStyle;                                    		// 0x04C0 (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           DropOntoStyle;                                    		// 0x04E0 (0x0020) [0x0000000000000000]              
	struct FEnumeratedName                             DragCue;                                          		// 0x0500 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DropCue;                                          		// 0x0510 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DropFailedCue;                                    		// 0x0520 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIImage" );

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void OnSetImage ( class UcUIAction_SetImage* Action );
	void SetValue ( class USurface* NewImage );
};

UClass* UUIImage::pClassPointer = NULL;

// Class Engine.UIListElementCellProvider
// 0x0000 (0x0040 - 0x0040)
class UUIListElementCellProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIListElementCellProvider" );

		return pClassPointer;
	};

};

UClass* UUIListElementCellProvider::pClassPointer = NULL;

// Class Engine.UIListElementProvider
// 0x0000 (0x0040 - 0x0040)
class UUIListElementProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIListElementProvider" );

		return pClassPointer;
	};

};

UClass* UUIListElementProvider::pClassPointer = NULL;

// Class Engine.UIListString
// 0x0000 (0x00F0 - 0x00F0)
class UUIListString : public UUIString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIListString" );

		return pClassPointer;
	};

};

UClass* UUIListString::pClassPointer = NULL;

// Class Engine.UIMeshWidget
// 0x0004 (0x0470 - 0x046C)
class UUIMeshWidget : public UUIObject
{
public:
	class UStaticMeshComponent*                        Mesh;                                             		// 0x046C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIMeshWidget" );

		return pClassPointer;
	};

};

UClass* UUIMeshWidget::pClassPointer = NULL;

// Class Engine.UINavigationList
// 0x0000 (0x070C - 0x070C)
class UUINavigationList : public UUIList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UINavigationList" );

		return pClassPointer;
	};

};

UClass* UUINavigationList::pClassPointer = NULL;

// Class Engine.UINumericEditBox
// 0x0098 (0x0568 - 0x04D0)
class UUINumericEditBox : public UUIEditBox
{
public:
	struct FUIStyleReference                           IncrementStyle;                                   		// 0x04D0 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStyleReference                           DecrementStyle;                                   		// 0x04F0 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	class UUINumericEditBoxButton*                     IncrementButton;                                  		// 0x0510 (0x0004) [0x0000000000000000]              
	class UUINumericEditBoxButton*                     DecrementButton;                                  		// 0x0514 (0x0004) [0x0000000000000000]              
	struct FUIRangeData                                NumericValue;                                     		// 0x0518 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	int                                                DecimalPlaces;                                    		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Bounds                       IncButton_Position;                               		// 0x0530 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Bounds                       DecButton_Position;                               		// 0x054C (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UINumericEditBox" );

		return pClassPointer;
	};

	float GetNumericValue ( );
	bool SetNumericValue ( float NewValue, unsigned long bForceRefreshString );
	void eventPostInitialize ( );
	void eventInitialized ( );
	void DecrementValue ( class UUIScreenObject* Sender, int PlayerIndex );
	void IncrementValue ( class UUIScreenObject* Sender, int PlayerIndex );
};

UClass* UUINumericEditBox::pClassPointer = NULL;

// Class Engine.UINumericEditBoxButton
// 0x0000 (0x0484 - 0x0484)
class UUINumericEditBoxButton : public UUIButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UINumericEditBoxButton" );

		return pClassPointer;
	};

};

UClass* UUINumericEditBoxButton::pClassPointer = NULL;

// Class Engine.UIOptionListBase
// 0x00CC (0x0538 - 0x046C)
class UUIOptionListBase : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIStyleReference                           DecrementStyle;                                   		// 0x0470 (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           IncrementStyle;                                   		// 0x0490 (0x0020) [0x0000000000000000]              
	class UUIOptionListButton*                         DecrementButton;                                  		// 0x04B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UUIOptionListButton*                         IncrementButton;                                  		// 0x04B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      OptionListButtonClass;                            		// 0x04B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FUIScreenValue_Extent                       ButtonSpacing;                                    		// 0x04BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x04C4 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x04C8 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	struct FEnumeratedName                             IncrementCue;                                     		// 0x04CC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DecrementCue;                                     		// 0x04DC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWrapOptions : 1;                                 		// 0x04EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x04F0 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __CreateCustomDecrementButton__Delegate;          		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CreateCustomIncrementButton__Delegate;          		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIOptionListBase" );

		return pClassPointer;
	};

	bool OnButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	void InitializeInternalControls ( );
	void eventInitialized ( );
	void Created ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer );
	void OnMoveSelectionRight ( int PlayerIndex );
	void OnMoveSelectionLeft ( int PlayerIndex );
	bool HasNextValue ( );
	bool HasPrevValue ( );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	class UUIOptionListButton* CreateCustomIncrementButton ( class UUIOptionListBase* ButtonOwner );
	class UUIOptionListButton* CreateCustomDecrementButton ( class UUIOptionListBase* ButtonOwner );
};

UClass* UUIOptionListBase::pClassPointer = NULL;

// Class Engine.UINumericOptionList
// 0x0014 (0x054C - 0x0538)
class UUINumericOptionList : public UUIOptionListBase
{
public:
	struct FUIRangeData                                RangeValue;                                       		// 0x0538 (0x0014) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UINumericOptionList" );

		return pClassPointer;
	};

	float GetValue ( unsigned long bPercentageValue );
	bool SetValue ( float NewValue, unsigned long bPercentageValue );
};

UClass* UUINumericOptionList::pClassPointer = NULL;

// Class Engine.UIOptionList
// 0x000C (0x0544 - 0x0538)
class UUIOptionList : public UUIOptionListBase
{
public:
	int                                                CurrentIndex;                                     		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIListElementProvider*                      DataProvider;                                     		// 0x053C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0540 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIOptionList" );

		return pClassPointer;
	};

	void OnSetListIndex ( class UUIAction_SetListIndex* Action );
	void SetCurrentIndex ( int NewIndex );
	int GetCurrentIndex ( );
	void SetNextValue ( );
	void SetPrevValue ( );
	bool GetListValue ( int ListIndex, struct FString* OutValue );
};

UClass* UUIOptionList::pClassPointer = NULL;

// Class Engine.UIOptionListButton
// 0x0000 (0x0484 - 0x0484)
class UUIOptionListButton : public UUIButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIOptionListButton" );

		return pClassPointer;
	};

	void UpdateButtonState ( int PlayerIndex );
};

UClass* UUIOptionListButton::pClassPointer = NULL;

// Class Engine.UIPanel
// 0x0008 (0x0478 - 0x0470)
class UUIPanel : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0470 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnforceClipping : 1;                             		// 0x0474 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIPanel" );

		return pClassPointer;
	};

	void OnSetImage ( class UcUIAction_SetImage* Action );
	void SetBackgroundImage ( class USurface* NewImage );
};

UClass* UUIPanel::pClassPointer = NULL;

// Class Engine.UIPrefab
// 0x0010 (0x047C - 0x046C)
class UUIPrefab : public UUIObject
{
public:
	int                                                PrefabVersion;                                    		// 0x046C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                InternalPrefabVersion;                            		// 0x0470 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  PrefabPreview;                                    		// 0x0474 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ModificationCounter;                              		// 0x0478 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIPrefab" );

		return pClassPointer;
	};

};

UClass* UUIPrefab::pClassPointer = NULL;

// Class Engine.UIPrefabInstance
// 0x00BC (0x0528 - 0x046C)
class UUIPrefabInstance : public UUIObject
{
public:
	class UUIPrefab*                                   SourcePrefab;                                     		// 0x046C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PrefabInstanceVersion;                            		// 0x0470 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0474 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.ArchetypeToInstanceMap
	int                                                PI_PackageVersion;                                		// 0x04B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_LicenseePackageVersion;                        		// 0x04B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_DataOffset;                                    		// 0x04B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< unsigned char >                            PI_Bytes;                                         		// 0x04BC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_CompleteObjects;                               		// 0x04C8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_ReferencedObjects;                             		// 0x04D4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           PI_SavedNames;                                    		// 0x04E0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x04EC (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.PI_ObjectMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIPrefabInstance" );

		return pClassPointer;
	};

	void DetachFromSourcePrefab ( );
};

UClass* UUIPrefabInstance::pClassPointer = NULL;

// Class Engine.UIScene
// 0x0128 (0x02BC - 0x0194)
class UUIScene : public UUIScreenObject
{
public:
	unsigned char                                      SceneLayer;                                       		// 0x0194 (0x0001) [0x0000000000000000]              
	unsigned char                                      SceneInputMode;                                   		// 0x0195 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SceneRenderMode;                                  		// 0x0196 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             APBSceneLayer;                                    		// 0x0198 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                nAPBSceneLayerOrdinal;                            		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SceneTag;                                         		// 0x01AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUISceneClient*                              SceneClient;                                      		// 0x01B4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USceneDataStore*                             SceneData;                                        		// 0x01B8 (0x0004) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class ULocalPlayer*                                PlayerOwner;                                      		// 0x01BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIToolTip*                                  ActiveToolTip;                                    		// 0x01C0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIToolTip*                                  StandardToolTip;                                  		// 0x01C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UClass*                                      DefaultToolTipClass;                              		// 0x01C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UUIContextMenu*                              ActiveContextMenu;                                		// 0x01CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIContextMenu*                              StandardContextMenu;                              		// 0x01D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UClass*                                      DefaultContextMenuClass;                          		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FUIDockingNode >                    DockingStack;                                     		// 0x01D8 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UUIObject* >                         RenderStack;                                      		// 0x01E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UUITickableObject* >                 TickableObjects;                                  		// 0x01F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FMap_Mirror                                 InputSubscriptions;                               		// 0x01FC (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                LastPlayerIndex;                                  		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUpdateDockingStack : 1;                          		// 0x023C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUpdateScenePositions : 1;                        		// 0x023C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUpdateNavigationLinks : 1;                       		// 0x023C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUpdatePrimitiveUsage : 1;                        		// 0x023C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bRefreshWidgetStyles : 1;                         		// 0x023C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRefreshStringFormatting : 1;                     		// 0x023C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bPerformedInitialUpdate : 1;                      		// 0x023C (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	unsigned long                                      bResolvingScenePositions : 1;                     		// 0x023C (0x0004) [0x0000000000002002] [0x00000080] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUsesPrimitives : 1;                              		// 0x023C (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDisplayCursor : 1;                               		// 0x023C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bRenderParentScenes : 1;                          		// 0x023C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bAlwaysRenderScene : 1;                           		// 0x023C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPauseGameWhileActive : 1;                        		// 0x023C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bExemptFromAutoClose : 1;                         		// 0x023C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bCloseOnLevelChange : 1;                          		// 0x023C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bClosePreDisconnect : 1;                          		// 0x023C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bSaveSceneValuesOnClose : 1;                      		// 0x023C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bEnableScenePostProcessing : 1;                   		// 0x023C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bEnableSceneDepthTesting : 1;                     		// 0x023C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bRequiresNetwork : 1;                             		// 0x023C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bRequiresOnlineService : 1;                       		// 0x023C (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bMenuLevelRestoresScene : 1;                      		// 0x023C (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bFlushPlayerKeyboardInput : 1;                    		// 0x023C (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bFlushPlayerMouseInput : 1;                       		// 0x023C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bFlushPlayerInput : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x023C (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bPassUnhandledInputToGame : 1;                    		// 0x023C (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bNeedsUICompositeTexture : 1;                     		// 0x023C (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bBlocksMusicTrackActions : 1;                     		// 0x023C (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	class UTexture2D*                                  ScenePreview;                                     		// 0x0240 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   CurrentViewportSize;                              		// 0x0244 (0x0008) [0x0000000000000000]              
	TArray< class UUIEditBox* >                        TabbingWidgets;                                   		// 0x024C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FEnumeratedName                             SceneOpenedCue;                                   		// 0x0258 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             SceneClosedCue;                                   		// 0x0268 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUILayerBase*                                SceneLayerRoot;                                   		// 0x0278 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIScene*                                    m_ToolTipParent;                                  		// 0x027C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __GetSceneInputMode__Delegate;                    		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSceneActivated__Delegate;                     		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSceneDeactivated__Delegate;                   		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTopSceneChanged__Delegate;                    		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ShouldModulateBackgroundAlpha__Delegate;        		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIScene" );

		return pClassPointer;
	};

	void AnimEnd ( class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq );
	void LogCurrentState ( int Indent );
	void LogRenderBounds ( int Indent );
	void eventLogDockingStack ( );
	bool eventCloseScene ( class UUIScene* SceneToClose, unsigned long bSkipKismetNotify, unsigned long bSkipAnimation );
	class UUIScene* OpenScene ( class UUIScene* SceneToOpen, unsigned long bSkipAnimation, struct FScriptDelegate SceneActivatedDelegate, struct FScriptDelegate SceneDeactivatedDelegate );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyGameSessionEnded ( );
	void NotifyPreClientTravel ( struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamless );
	void SceneCreated ( class UUIScene* CreatedScene );
	void SetVisibility ( unsigned long bIsVisible );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse );
	void eventCalculateInputMask ( );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	bool SetActiveContextMenu ( class UUIContextMenu* NewContextMenu, int PlayerIndex );
	class UUIContextMenu* GetActiveContextMenu ( );
	bool SetActiveToolTip ( class UUIToolTip* NewToolTip );
	class UUIToolTip* GetActiveToolTip ( );
	class UUIContextMenu* GetDefaultContextMenu ( );
	class UUIToolTip* GetDefaultToolTip ( );
	bool IsSceneActive ( unsigned long bTopmostScene );
	class AWorldInfo* GetWorldInfo ( );
	void SetSceneInputMode ( unsigned char NewInputMode );
	class UUIScene* GetPreviousScene ( unsigned long bRequireMatchingPlayerOwner );
	class UUIDataStore* ResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner );
	void UnbindSubscribers ( );
	void SaveSceneDataValues ( unsigned long bUnbindSubscribers );
	void LoadSceneDataValues ( );
	class USceneDataStore* GetSceneDataStore ( );
	int FindTickableObjectIndex ( class UUITickableObject* ObjectToFind );
	bool UnregisterTickableObject ( class UUITickableObject* ObjectToRemove );
	bool RegisterTickableObject ( class UUITickableObject* ObjectToRegister, int InsertIndex );
	void ResolveScenePositions ( );
	void RebuildDockingStack ( );
	void ForceImmediateSceneUpdate ( );
	bool ShouldModulateBackgroundAlpha ( float* AlphaModulationPercent );
	void OnTopSceneChanged ( class UUIScene* NewTopScene );
	void OnSceneDeactivated ( class UUIScene* DeactivatedScene );
	void OnSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation );
	unsigned char GetSceneInputMode ( );
};

UClass* UUIScene::pClassPointer = NULL;

// Class Engine.UIPrefabScene
// 0x0004 (0x02C0 - 0x02BC)
class UUIPrefabScene : public UUIScene
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x02BC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIPrefabScene" );

		return pClassPointer;
	};

};

UClass* UUIPrefabScene::pClassPointer = NULL;

// Class Engine.UIProgressBar
// 0x008D (0x04F9 - 0x046C)
class UUIProgressBar : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0470 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           FillImageComponent;                               		// 0x0474 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           OverlayImageComponent;                            		// 0x0478 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	unsigned long                                      bDrawOverlay : 1;                                 		// 0x047C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReverseDirection : 1;                            		// 0x047C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseUVExtents : 1;                                		// 0x047C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x0480 (0x0030) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FUIRangeData                                ProgressBarValue;                                 		// 0x04B0 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FUIDataStoreBinding                         PivotPointDataSource;                             		// 0x04C4 (0x0030) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	float                                              m_fPivotPoint;                                    		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ProgressBarOrientation;                           		// 0x04F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIProgressBar" );

		return pClassPointer;
	};

	void OnSetImage ( class UcUIAction_SetImage* Action );
	void SetOverlayImage ( class USurface* NewImage );
	void SetFillImage ( class USurface* NewImage );
	void SetBackgroundImage ( class USurface* NewImage );
	float GetValue ( unsigned long bPercentageValue );
	bool SetValue ( float NewValue, unsigned long bPercentageValue );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void OnGetProgressBarValue ( class UUIAction_GetProgressBarValue* Action );
	void OnSetProgressBarValue ( class UUIAction_SetProgressBarValue* Action );
};

UClass* UUIProgressBar::pClassPointer = NULL;

// Class Engine.UIResourceDataProvider
// 0x0008 (0x007C - 0x0074)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0074 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bDataBindingPropertiesOnly : 1;                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIResourceDataProvider" );

		return pClassPointer;
	};

};

UClass* UUIResourceDataProvider::pClassPointer = NULL;

// Class Engine.UISafeRegionPanel
// 0x0014 (0x0484 - 0x0470)
class UUISafeRegionPanel : public UUIContainer
{
public:
	unsigned char                                      RegionType;                                       		// 0x0470 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    RegionPercentages;                                		// 0x0474 (0x000C) [0x0000000004404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bForce4x3AspectRatio : 1;                         		// 0x0480 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFullRegionIn4x3 : 1;                          		// 0x0480 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UISafeRegionPanel" );

		return pClassPointer;
	};

};

UClass* UUISafeRegionPanel::pClassPointer = NULL;

// Class Engine.UIScrollbar
// 0x00D0 (0x053C - 0x046C)
class UUIScrollbar : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x046C (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIScrollbarButton*                          IncrementButton;                                  		// 0x0470 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UUIScrollbarButton*                          DecrementButton;                                  		// 0x0474 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UUIScrollbarMarkerButton*                    MarkerButton;                                     		// 0x0478 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FUIStyleReference                           IncrementStyle;                                   		// 0x047C (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           DecrementStyle;                                   		// 0x049C (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           MarkerStyle;                                      		// 0x04BC (0x0020) [0x0000000000000000]              
	float                                              NudgeValue;                                       		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NudgeMultiplier;                                  		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NudgePercent;                                     		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MarkerPosPercent;                                 		// 0x04E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MarkerSizePercent;                                		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUIScreenValue_Extent                       BarWidth;                                         		// 0x04F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       MinimumMarkerSize;                                		// 0x04F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScrollbarOrientation;                             		// 0x0500 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAddCornerPadding : 1;                            		// 0x0504 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitializeMarker : 1;                            		// 0x0504 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FUIScreenValue_Position                     MousePosition;                                    		// 0x0508 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FUIScreenValue_Position                     MouseMarkerOffset;                                		// 0x0514 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MousePositionDelta;                               		// 0x0520 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnScrollActivity__Delegate;                     		// 0x0524 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedScrollZone__Delegate;                  		// 0x0530 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIScrollbar" );

		return pClassPointer;
	};

	float GetMarkerSizePercent ( );
	float GetMarkerPosPercent ( );
	float GetNudgePercent ( );
	float GetNudgeValue ( );
	void eventPostInitialize ( );
	void eventInitialized ( );
	void DragScroll ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex );
	void DragScrollEnd ( class UUIScreenObject* Sender, int PlayerIndex );
	void DragScrollBegin ( class UUIScreenObject* Sender, int PlayerIndex );
	void ScrollDecrement ( class UUIScreenObject* Sender, int PlayerIndex );
	void ScrollIncrement ( class UUIScreenObject* Sender, int PlayerIndex );
	void EnableCornerPadding ( unsigned long FlagValue );
	void SetNudgeSizePixels ( float NudgePixels );
	void SetNudgeSizePercent ( float NudgePercentage );
	void SetMarkerPosition ( float PositionPercentage );
	void SetMarkerSize ( float SizePercentage );
	float GetScrollZoneWidth ( );
	float GetScrollZoneExtent ( float* ScrollZoneStart );
	float GetMarkerButtonPosition ( );
	void OnClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex );
	bool OnScrollActivity ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed );
};

UClass* UUIScrollbar::pClassPointer = NULL;

// Class Engine.UIScrollbarButton
// 0x0000 (0x0484 - 0x0484)
class UUIScrollbarButton : public UUIButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIScrollbarButton" );

		return pClassPointer;
	};

};

UClass* UUIScrollbarButton::pClassPointer = NULL;

// Class Engine.UIScrollbarMarkerButton
// 0x0010 (0x0494 - 0x0484)
class UUIScrollbarMarkerButton : public UUIScrollbarButton
{
public:
	unsigned char                                      ScrollbarOrientation;                             		// 0x0484 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnButtonDragged__Delegate;                      		// 0x0488 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIScrollbarMarkerButton" );

		return pClassPointer;
	};

	void OnButtonDragged ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex );
};

UClass* UUIScrollbarMarkerButton::pClassPointer = NULL;

// Class Engine.UIScrollFrame
// 0x0038 (0x04A8 - 0x0470)
class UUIScrollFrame : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           StaticBackgroundImage;                            		// 0x0470 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUIScrollbar*                                ScrollbarHorizontal;                              		// 0x0474 (0x0004) [0x0000000000200002]              ( CPF_Const )
	class UUIScrollbar*                                ScrollbarVertical;                                		// 0x0478 (0x0004) [0x0000000000200002]              ( CPF_Const )
	unsigned long                                      IgnoreInvisibleChildren : 1;                      		// 0x047C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AlwaysShowHorizontalScrollbar : 1;                		// 0x047C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      AlwaysShowVerticalScrollbar : 1;                  		// 0x047C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRefreshScrollbars : 1;                           		// 0x047C (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRecalculateClientRegion : 1;                     		// 0x047C (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	struct FUIScreenValue_Extent                       HorizontalClientRegion;                           		// 0x0480 (0x0008) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	struct FUIScreenValue_Extent                       VerticalClientRegion;                             		// 0x0488 (0x0008) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	struct FVector2D                                   ClientRegionPosition;                             		// 0x0490 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              FrameBounds[ 0x4 ];                               		// 0x0498 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIScrollFrame" );

		return pClassPointer;
	};

	void OnApplyScrolling ( class UUIAction_ApplyScrolling* Action );
	void eventScrollZoneClicked ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex );
	void OnChildRepositioned ( class UUIScreenObject* Sender );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	float GetVisibleRegionPercentage ( unsigned char Orientation );
	void GetClipRegion ( float* MinX, float* MinY, float* MaxX, float* MaxY );
	struct FVector2D GetClientRegionSizeVector ( );
	struct FVector2D GetClientRegionPositionVector ( );
	float GetClientRegionSize ( unsigned char Orientation );
	float GetClientRegionPosition ( unsigned char Orientation );
	bool SetClientRegionPositionVector ( struct FVector2D NewPosition );
	bool SetClientRegionPosition ( unsigned char Orientation, float NewPosition );
	bool ScrollRegion ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed );
	void ReapplyFormatting ( unsigned long bImmediately );
	void RefreshScrollbars ( unsigned long bImmediately );
};

UClass* UUIScrollFrame::pClassPointer = NULL;

// Class Engine.UISlider
// 0x0098 (0x0504 - 0x046C)
class UUISlider : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x046C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0470 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           SliderBarImageComponent;                          		// 0x0474 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           MarkerImageComponent;                             		// 0x0478 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x047C (0x0030) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class UUIComp_DrawStringSlider*                    CaptionRenderComponent;                           		// 0x04AC (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FUIRangeData                                SliderValue;                                      		// 0x04B0 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRenderCaption : 1;                               		// 0x04C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      SliderOrientation;                                		// 0x04C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       BarSize;                                          		// 0x04CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       MarkerHeight;                                     		// 0x04D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       MarkerWidth;                                      		// 0x04DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             IncrementCue;                                     		// 0x04E4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             DecrementCue;                                     		// 0x04F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UISlider" );

		return pClassPointer;
	};

	void OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState );
	void SetMarkerImage ( class USurface* NewImage );
	void SetBarImage ( class USurface* NewImage );
	void SetBackgroundImage ( class USurface* NewImage );
	float GetValue ( unsigned long bPercentageValue );
	bool SetValue ( float NewValue, unsigned long bPercentageValue );
	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
};

UClass* UUISlider::pClassPointer = NULL;

// Class Engine.UIState_Active
// 0x0000 (0x006A - 0x006A)
class UUIState_Active : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIState_Active" );

		return pClassPointer;
	};

};

UClass* UUIState_Active::pClassPointer = NULL;

// Class Engine.UIState_Focused
// 0x0000 (0x006A - 0x006A)
class UUIState_Focused : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIState_Focused" );

		return pClassPointer;
	};

	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
};

UClass* UUIState_Focused::pClassPointer = NULL;

// Class Engine.UIState_Pressed
// 0x0000 (0x006A - 0x006A)
class UUIState_Pressed : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIState_Pressed" );

		return pClassPointer;
	};

};

UClass* UUIState_Pressed::pClassPointer = NULL;

// Class Engine.UIState_TargetedTab
// 0x0000 (0x006A - 0x006A)
class UUIState_TargetedTab : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIState_TargetedTab" );

		return pClassPointer;
	};

	bool eventIsWidgetClassSupported ( class UClass* WidgetClass );
};

UClass* UUIState_TargetedTab::pClassPointer = NULL;

// Class Engine.UIStringRenderer
// 0x0000 (0x0040 - 0x0040)
class UUIStringRenderer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStringRenderer" );

		return pClassPointer;
	};

	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
};

UClass* UUIStringRenderer::pClassPointer = NULL;

// Class Engine.UIStyle_Data
// 0x0028 (0x0068 - 0x0040)
class UUIStyle_Data : public UUIRoot
{
public:
	struct FString                                     UIEditorControlClass;                             		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FLinearColor                                StyleColor;                                       		// 0x004C (0x0010) [0x0000000000000000]              
	float                                              StylePadding[ 0x2 ];                              		// 0x005C (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirty : 1;                                       		// 0x0064 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStyle_Data" );

		return pClassPointer;
	};

};

UClass* UUIStyle_Data::pClassPointer = NULL;

// Class Engine.UIStyle_Combo
// 0x0040 (0x00A8 - 0x0068)
class UUIStyle_Combo : public UUIStyle_Data
{
public:
	struct FStyleDataReference                         ImageStyle;                                       		// 0x0068 (0x0020) [0x0000000000000000]              
	struct FStyleDataReference                         TextStyle;                                        		// 0x0088 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStyle_Combo" );

		return pClassPointer;
	};

};

UClass* UUIStyle_Combo::pClassPointer = NULL;

// Class Engine.UIStyle_Image
// 0x0034 (0x009C - 0x0068)
class UUIStyle_Image : public UUIStyle_Data
{
public:
	class USurface*                                    DefaultImage;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         Coordinates;                                      		// 0x006C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FUIImageAdjustmentData                      AdjustmentType[ 0x2 ];                            		// 0x007C (0x0020) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStyle_Image" );

		return pClassPointer;
	};

};

UClass* UUIStyle_Image::pClassPointer = NULL;

// Class Engine.UIStyle_Text
// 0x0024 (0x008C - 0x0068)
class UUIStyle_Text : public UUIStyle_Data
{
public:
	class UFont*                                       StyleFont;                                        		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FUITextAttributes                           Attributes;                                       		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      Alignment[ 0x2 ];                                 		// 0x0070 (0x0002) [0x0000000000000000]              
	unsigned char                                      ClipMode;                                         		// 0x0072 (0x0001) [0x0000000000000000]              
	unsigned char                                      ClipAlignment;                                    		// 0x0073 (0x0001) [0x0000000000000000]              
	struct FTextAutoScaleValue                         AutoScaling;                                      		// 0x0074 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Scale;                                            		// 0x007C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   SpacingAdjust;                                    		// 0x0084 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStyle_Text" );

		return pClassPointer;
	};

};

UClass* UUIStyle_Text::pClassPointer = NULL;

// Class Engine.UIStyleResolver
// 0x0000 (0x0040 - 0x0040)
class UUIStyleResolver : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStyleResolver" );

		return pClassPointer;
	};

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
};

UClass* UUIStyleResolver::pClassPointer = NULL;

// Class Engine.UITabButton
// 0x0048 (0x0504 - 0x04BC)
class UUITabButton : public UUILabelButton
{
public:
	struct FUIDataStoreBinding                         OverlayImageDataSource;                           		// 0x04BC (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawImage*                           OverlayImageComponent;                            		// 0x04EC (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUITabPage*                                  TabPage;                                          		// 0x04F0 (0x0004) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	unsigned long                                      bOverrideParentStyle : 1;                         		// 0x04F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FScriptDelegate                             __IsActivationAllowed__Delegate;                  		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UITabButton" );

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState );
	class UUITabPage* GetTabPage ( );
	bool IsTargeted ( int PlayerIndex, int* StateIndex );
	bool CanActivateButton ( int PlayerIndex );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	bool IsActivationAllowed ( class UUITabButton* Sender, int PlayerIndex );
};

UClass* UUITabButton::pClassPointer = NULL;

// Class Engine.UITabControl
// 0x00CC (0x0538 - 0x046C)
class UUITabControl : public UUIObject
{
public:
	TArray< class UUITabPage* >                        Pages;                                            		// 0x046C (0x000C) [0x0000000004420041]              ( CPF_Edit | CPF_EditConstArray | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UUITabPage*                                  ActivePage;                                       		// 0x0478 (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	class UUITabPage*                                  PendingPage;                                      		// 0x047C (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	unsigned char                                      TabDockFace;                                      		// 0x0480 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TabSizeMode;                                      		// 0x0481 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TabButtonLengthConst;                             		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       TabButtonSize;                                    		// 0x0488 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       TabButtonPadding[ 0x2 ];                          		// 0x0490 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FUIStyleReference                           TabButtonBackgroundStyle;                         		// 0x04A0 (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           TabButtonCaptionStyle;                            		// 0x04C0 (0x0020) [0x0000000000000000]              
	struct FUIStyleReference                           TabButtonImageOverlayStyle;                       		// 0x04E0 (0x0020) [0x0000000000000000]              
	unsigned long                                      bAllowPagePreviews : 1;                           		// 0x0500 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUpdateLayout : 1;                                		// 0x0500 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FEnumeratedName                             ActivateTabCue;                                   		// 0x0504 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __OnPageActivated__Delegate;                      		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPageInserted__Delegate;                       		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPageRemoved__Delegate;                        		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UITabControl" );

		return pClassPointer;
	};

	void TabButtonClicked ( class UUIScreenObject* EventObject, int PlayerIndex );
	bool ProcessInputKey ( struct FInputEventParameters* EventParms );
	int FindPageIndexByPageRef ( class UUITabPage* SearchPage );
	int FindPageIndexByButton ( class UUITabButton* SearchButton );
	int FindPageIndexByCaption ( struct FString PageCaption, unsigned long bMarkupString );
	bool ActivateBestTab ( int PlayerIndex, unsigned long bFocusPage, int StartIndex );
	bool ActivatePageByCaption ( struct FString PageCaption, int PlayerIndex, unsigned long bFocusPage );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventPostInitialize ( );
	bool eventEnableTabPage ( class UUITabPage* PageToEnable, int PlayerIndex, unsigned long bEnablePage, unsigned long bActivatePage, unsigned long bFocusPage );
	bool eventActivatePreviousPage ( int PlayerIndex, unsigned long bFocusPage, unsigned long bAllowWrapping );
	bool eventActivateNextPage ( int PlayerIndex, unsigned long bFocusPage, unsigned long bAllowWrapping );
	bool eventActivatePage ( class UUITabPage* PageToActivate, int PlayerIndex, unsigned long bFocusPage );
	bool eventReplacePage ( class UUITabPage* ExistingPage, class UUITabPage* NewPage, int PlayerIndex, unsigned long bFocusPage );
	bool eventRemovePage ( class UUITabPage* PageToRemove, int PlayerIndex );
	bool eventInsertPage ( class UUITabPage* PageToInsert, int PlayerIndex, int InsertIndex, unsigned long bActivateImmediately );
	void eventPrivateActivatePage ( class UUITabPage* PageToActivate, int PlayerIndex );
	bool MovePageRight ( int PageIndex );
	bool MovePageLeft ( int PageIndex );
	class UUITabPage* CreateTabPage ( class UClass* TabPageClass, class UUITabPage* PagePrefab );
	class UUITabButton* FindTargetedTab ( int PlayerIndex );
	class UUITabPage* GetPageAtIndex ( int PageIndex );
	int GetPageCount ( );
	void RequestLayoutUpdate ( );
	void OnPageRemoved ( class UUITabControl* Sender, class UUITabPage* OldPage, int PlayerIndex );
	void OnPageInserted ( class UUITabControl* Sender, class UUITabPage* NewPage, int PlayerIndex );
	void OnPageActivated ( class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex );
};

UClass* UUITabControl::pClassPointer = NULL;

// Class Engine.UITabPage
// 0x009C (0x050C - 0x0470)
class UUITabPage : public UUIContainer
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                   		// 0x0470 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      ButtonClass;                                      		// 0x0474 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UUITabButton*                                TabButton;                                        		// 0x0478 (0x0004) [0x0000000000000000]              
	struct FUIDataStoreBinding                         ButtonCaption;                                    		// 0x047C (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FUIDataStoreBinding                         ButtonToolTip;                                    		// 0x04AC (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FUIDataStoreBinding                         PageDescription;                                  		// 0x04DC (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UITabPage" );

		return pClassPointer;
	};

	bool IsActivePage ( );
	void SetTabCaption ( struct FString NewButtonMarkup );
	void OnActiveStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState );
	bool CanActivatePage ( int PlayerIndex );
	void AddedToTabControl ( class UUITabControl* TabControl );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	class UUITabButton* GetTabButton ( class UUITabControl* TabControl );
	class UUITabControl* GetOwnerTabControl ( );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	bool eventLinkToTabButton ( class UUITabButton* NewButton, class UUITabControl* TabControl );
	class UUITabButton* eventCreateTabButton ( class UUITabControl* TabControl );
	bool eventActivatePage ( int PlayerIndex, unsigned long bActivate, unsigned long bTakeFocus );
};

UClass* UUITabPage::pClassPointer = NULL;

// Class Engine.UITexture
// 0x0094 (0x00D4 - 0x0040)
class UUITexture : public UUIRoot
{
public:
	struct FUICombinedStyleData                        ImageStyleData;                                   		// 0x0040 (0x0090) [0x0000000000002000]              ( CPF_Transient )
	class USurface*                                    ImageTexture;                                     		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UITexture" );

		return pClassPointer;
	};

	class USurface* GetSurface ( );
	bool HasValidStyleData ( );
	void SetImageStyle ( class UUIStyle_Image* NewImageStyle );
};

UClass* UUITexture::pClassPointer = NULL;

// Class Engine.UITickableObject
// 0x0000 (0x0040 - 0x0040)
class UUITickableObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UITickableObject" );

		return pClassPointer;
	};

};

UClass* UUITickableObject::pClassPointer = NULL;

// Class Engine.UIToggleButton
// 0x003C (0x04F8 - 0x04BC)
class UUIToggleButton : public UUILabelButton
{
public:
	struct FUIDataStoreBinding                         ValueDataSource;                                  		// 0x04BC (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsChecked : 1;                                   		// 0x04EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UUIComp_DrawString*                          CheckedStringRenderComponent;                     		// 0x04F0 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           CheckedBackgroundImageComponent;                  		// 0x04F4 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIToggleButton" );

		return pClassPointer;
	};

	void OnSetBoolValue ( class UUIAction_SetBoolValue* Action );
	bool ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex );
	void SetValue ( unsigned long bShouldBeChecked, int PlayerIndex );
	bool IsChecked ( );
	void SetCaption ( struct FString NewText );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
};

UClass* UUIToggleButton::pClassPointer = NULL;

// Class Engine.SeqVar_UIRange
// 0x0014 (0x00B8 - 0x00A4)
class USeqVar_UIRange : public USequenceVariable
{
public:
	struct FUIRangeData                                RangeValue;                                       		// 0x00A4 (0x0014) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_UIRange" );

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

UClass* USeqVar_UIRange::pClassPointer = NULL;

// Class Engine.SeqVar_UniqueNetId
// 0x0008 (0x00AC - 0x00A4)
class USeqVar_UniqueNetId : public USequenceVariable
{
public:
	struct FUniqueNetId                                NetIdValue;                                       		// 0x00A4 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqVar_UniqueNetId" );

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

UClass* USeqVar_UniqueNetId::pClassPointer = NULL;

// Class Engine.UIAction
// 0x0008 (0x00F0 - 0x00E8)
class UUIAction : public USequenceAction
{
public:
	int                                                GamepadID;                                        		// 0x00E8 (0x0004) [0x0000000001002000]              ( CPF_Transient )
	unsigned long                                      bAutoTargetOwner : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction" );

		return pClassPointer;
	};

	bool eventHasDynamicOutputLinks ( );
	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsValidLevelSequenceObject ( );
	class UUIScene* GetOwnerScene ( );
	class UUIScreenObject* GetOwner ( );
};

UClass* UUIAction::pClassPointer = NULL;

// Class Engine.UIAction_ActivateLevelEvent
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_ActivateLevelEvent : public UUIAction
{
public:
	struct FName                                       EventName;                                        		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ActivateLevelEvent" );

		return pClassPointer;
	};

};

UClass* UUIAction_ActivateLevelEvent::pClassPointer = NULL;

// Class Engine.UIAction_ChangeState
// 0x000C (0x00FC - 0x00F0)
class UUIAction_ChangeState : public UUIAction
{
public:
	class UClass*                                      StateType;                                        		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUIState*                                    TargetState;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStateChangeFailed : 1;                           		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ChangeState" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_ChangeState::pClassPointer = NULL;

// Class Engine.UIAction_ActivateState
// 0x0000 (0x00FC - 0x00FC)
class UUIAction_ActivateState : public UUIAction_ChangeState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ActivateState" );

		return pClassPointer;
	};

};

UClass* UUIAction_ActivateState::pClassPointer = NULL;

// Class Engine.UIAction_DataStore
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_DataStore : public UUIAction
{
public:
	int                                                BindingIndex;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_DataStore" );

		return pClassPointer;
	};

};

UClass* UUIAction_DataStore::pClassPointer = NULL;

// Class Engine.UIAction_DataStoreField
// 0x0010 (0x0104 - 0x00F4)
class UUIAction_DataStoreField : public UUIAction_DataStore
{
public:
	class UUIScene*                                    TargetScene;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DataFieldMarkupString;                            		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_DataStoreField" );

		return pClassPointer;
	};

};

UClass* UUIAction_DataStoreField::pClassPointer = NULL;

// Class Engine.UIAction_AddDataField
// 0x0005 (0x0109 - 0x0104)
class UUIAction_AddDataField : public UUIAction_DataStoreField
{
public:
	unsigned long                                      bPersistentField : 1;                             		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      FieldType;                                        		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_AddDataField" );

		return pClassPointer;
	};

};

UClass* UUIAction_AddDataField::pClassPointer = NULL;

// Class Engine.UIAction_Scene
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_Scene : public UUIAction
{
public:
	class UUIScene*                                    Scene;                                            		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_Scene" );

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

UClass* UUIAction_Scene::pClassPointer = NULL;

// Class Engine.UIAction_CloseScene
// 0x0000 (0x00F4 - 0x00F4)
class UUIAction_CloseScene : public UUIAction_Scene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_CloseScene" );

		return pClassPointer;
	};

};

UClass* UUIAction_CloseScene::pClassPointer = NULL;

// Class Engine.UIAction_CreateOnlineGame
// 0x0014 (0x0104 - 0x00F0)
class UUIAction_CreateOnlineGame : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                    		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MapName;                                          		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_CreateOnlineGame" );

		return pClassPointer;
	};

};

UClass* UUIAction_CreateOnlineGame::pClassPointer = NULL;

// Class Engine.UIAction_DeactivateState
// 0x0000 (0x00FC - 0x00FC)
class UUIAction_DeactivateState : public UUIAction_ChangeState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_DeactivateState" );

		return pClassPointer;
	};

};

UClass* UUIAction_DeactivateState::pClassPointer = NULL;

// Class Engine.UIAction_DisplaySurvey
// 0x0018 (0x0108 - 0x00F0)
class UUIAction_DisplaySurvey : public UUIAction
{
public:
	struct FString                                     QuestionId;                                       		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     QuestionContext;                                  		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_DisplaySurvey" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_DisplaySurvey::pClassPointer = NULL;

// Class Engine.UIAction_FindOnlineGames
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_FindOnlineGames : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                    		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_FindOnlineGames" );

		return pClassPointer;
	};

};

UClass* UUIAction_FindOnlineGames::pClassPointer = NULL;

// Class Engine.UIAction_FocusActions
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_FocusActions : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_FocusActions" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_FocusActions::pClassPointer = NULL;

// Class Engine.UIAction_GetCellValue
// 0x0044 (0x0138 - 0x00F4)
class UUIAction_GetCellValue : public UUIAction_DataStore
{
public:
	int                                                CollectionIndex;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CellFieldName;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CellFieldMarkup;                                  		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CellFieldStringValue;                             		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USurface*                                    CellFieldImageValue;                              		// 0x0118 (0x0004) [0x0000000000000000]              
	struct FUIRangeData                                CellFieldRangeValue;                              		// 0x011C (0x0014) [0x0000000000000000]              
	struct FUniqueNetId                                CellFieldNetIdValue;                              		// 0x0130 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetCellValue" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_GetCellValue::pClassPointer = NULL;

// Class Engine.UIAction_GetDatafieldValue
// 0x003C (0x0140 - 0x0104)
class UUIAction_GetDatafieldValue : public UUIAction_DataStoreField
{
public:
	struct FString                                     DataFieldStringValue;                             		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USurface*                                    DataFieldImageValue;                              		// 0x0110 (0x0004) [0x0000000000000000]              
	TArray< int >                                      DataFieldArrayValue;                              		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUIRangeData                                DataFieldRangeValue;                              		// 0x0120 (0x0014) [0x0000000000000000]              
	struct FUniqueNetId                                DataFieldNetIdValue;                              		// 0x0134 (0x0008) [0x0000000000000000]              
	class UObject*                                     DataFieldObjectValue;                             		// 0x013C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetDatafieldValue" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_GetDatafieldValue::pClassPointer = NULL;

// Class Engine.UIAction_GetFocused
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_GetFocused : public UUIAction_FocusActions
{
public:
	class UUIScreenObject*                             FocusedChild;                                     		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRecursiveSearch : 1;                             		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetFocused" );

		return pClassPointer;
	};

};

UClass* UUIAction_GetFocused::pClassPointer = NULL;

// Class Engine.UIAction_GetLastFocused
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_GetLastFocused : public UUIAction_FocusActions
{
public:
	class UUIScreenObject*                             LastFocused;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRecursiveSearch : 1;                             		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetLastFocused" );

		return pClassPointer;
	};

};

UClass* UUIAction_GetLastFocused::pClassPointer = NULL;

// Class Engine.UIAction_GetValue
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_GetValue : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetValue" );

		return pClassPointer;
	};

};

UClass* UUIAction_GetValue::pClassPointer = NULL;

// Class Engine.UIAction_GetListIndex
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_GetListIndex : public UUIAction_GetValue
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetListIndex" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_GetListIndex::pClassPointer = NULL;

// Class Engine.UIAction_GetListItemCount
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_GetListItemCount : public UUIAction
{
public:
	int                                                ItemCount;                                        		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetListItemCount" );

		return pClassPointer;
	};

};

UClass* UUIAction_GetListItemCount::pClassPointer = NULL;

// Class Engine.UIAction_GetLoggedInPlayerCount
// 0x0010 (0x0100 - 0x00F0)
class UUIAction_GetLoggedInPlayerCount : public UUIAction
{
public:
	int                                                TotalLoggedIn;                                    		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                NumOnlineEnabled;                                 		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                NumLocalOnly;                                     		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayers;                                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetLoggedInPlayerCount" );

		return pClassPointer;
	};

	void eventGetLoginStatus ( );
};

UClass* UUIAction_GetLoggedInPlayerCount::pClassPointer = NULL;

// Class Engine.UIAction_GetNATType
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_GetNATType : public UUIAction
{
public:
	unsigned long                                      bAlwaysOpen : 1;                                  		// 0x00F0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetNATType" );

		return pClassPointer;
	};

	bool eventGetNATType ( unsigned char* OutNATType );
};

UClass* UUIAction_GetNATType::pClassPointer = NULL;

// Class Engine.UIAction_GetPrivilegeLevel
// 0x0005 (0x00F5 - 0x00F0)
class UUIAction_GetPrivilegeLevel : public UUIAction
{
public:
	int                                                PlayerID;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PrivMode;                                         		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetPrivilegeLevel" );

		return pClassPointer;
	};

	unsigned char eventGetPrivilegeLevel ( int ControllerId );
};

UClass* UUIAction_GetPrivilegeLevel::pClassPointer = NULL;

// Class Engine.UIAction_JoinOnlineGame
// 0x0010 (0x0100 - 0x00F0)
class UUIAction_JoinOnlineGame : public UUIAction
{
public:
	struct FOnlineGameSearchResult                     PendingGameJoin;                                  		// 0x00F0 (0x0008) [0x0000000000000000]              
	class AWorldInfo*                                  CachedWorldInfo;                                  		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsDone : 1;                                      		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bResult : 1;                                      		// 0x00FC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_JoinOnlineGame" );

		return pClassPointer;
	};

	struct FString BuildJoinURL ( struct FString ResolvedConnectionURL );
	void OnJoinGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void eventJoinOnlineGame ( unsigned char ControllerId, struct FOnlineGameSearchResult GameToJoin, class AWorldInfo* InWorldInfo );
};

UClass* UUIAction_JoinOnlineGame::pClassPointer = NULL;

// Class Engine.UIAction_MoveListItem
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_MoveListItem : public UUIAction
{
public:
	int                                                ElementIndex;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MoveCount;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_MoveListItem" );

		return pClassPointer;
	};

};

UClass* UUIAction_MoveListItem::pClassPointer = NULL;

// Class Engine.UIAction_OpenScene
// 0x0044 (0x0138 - 0x00F4)
class UUIAction_OpenScene : public UUIAction_Scene
{
public:
	class UUIScene*                                    OpenedScene;                                      		// 0x00F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      AllowMultipleCopies : 1;                          		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     m_sCallbackDataStoreTag;                          		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sCallbackFunction_Activated;                    		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sCallbackFunction_Deactivated;                  		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSceneActivatedCallback__Delegate;             		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSceneDeactivatedCallback__Delegate;           		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_OpenScene" );

		return pClassPointer;
	};

	void OnSceneDeactivatedCallback ( );
	void OnSceneActivatedCallback ( );
	void AssociateCallbacks ( );
};

UClass* UUIAction_OpenScene::pClassPointer = NULL;

// Class Engine.UIAction_PlayUISoundCue
// 0x0010 (0x0100 - 0x00F0)
class UUIAction_PlayUISoundCue : public UUIAction
{
public:
	struct FEnumeratedName                             SoundCueName;                                     		// 0x00F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_PlayUISoundCue" );

		return pClassPointer;
	};

};

UClass* UUIAction_PlayUISoundCue::pClassPointer = NULL;

// Class Engine.UIAction_PublishValue
// 0x0000 (0x00F4 - 0x00F4)
class UUIAction_PublishValue : public UUIAction_DataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_PublishValue" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIAction_PublishValue::pClassPointer = NULL;

// Class Engine.UIAction_RefreshBindingValue
// 0x0000 (0x00F4 - 0x00F4)
class UUIAction_RefreshBindingValue : public UUIAction_DataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_RefreshBindingValue" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIAction_RefreshBindingValue::pClassPointer = NULL;

// Class Engine.UIAction_RefreshStats
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_RefreshStats : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_RefreshStats" );

		return pClassPointer;
	};

};

UClass* UUIAction_RefreshStats::pClassPointer = NULL;

// Class Engine.UIAction_SaveProfileSettings
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_SaveProfileSettings : public UUIAction
{
public:
	unsigned long                                      bIsDone : 1;                                      		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWroteProfile : 1;                                		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SaveProfileSettings" );

		return pClassPointer;
	};

	void OnProfileWriteComplete ( unsigned long bWasSuccessful );
	void eventClearDelegate ( );
	void eventRegisterDelegate ( );
};

UClass* UUIAction_SaveProfileSettings::pClassPointer = NULL;

// Class Engine.UIAction_SetDatafieldValue
// 0x0038 (0x013C - 0x0104)
class UUIAction_SetDatafieldValue : public UUIAction_DataStoreField
{
public:
	struct FString                                     DataFieldStringValue;                             		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USurface*                                    DataFieldImageValue;                              		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      DataFieldArrayValue;                              		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FUIRangeData                                DataFieldRangeValue;                              		// 0x0120 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCommitValueImmediately : 1;                      		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UObject*                                     DataFieldObjectValue;                             		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetDatafieldValue" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_SetDatafieldValue::pClassPointer = NULL;

// Class Engine.UIAction_SetFocus
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_SetFocus : public UUIAction_FocusActions
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetFocus" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_SetFocus::pClassPointer = NULL;

// Class Engine.UIAction_ShowDeviceSelectionUI
// 0x0018 (0x0108 - 0x00F0)
class UUIAction_ShowDeviceSelectionUI : public UUIAction
{
public:
	int                                                SizeNeeded;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceShowUI : 1;                                 		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsDone : 1;                                      		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bResult : 1;                                      		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                DeviceID;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DeviceName;                                       		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowDeviceSelectionUI" );

		return pClassPointer;
	};

	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	void eventSelectDevice ( );
	void WriteToVariables ( );
};

UClass* UUIAction_ShowDeviceSelectionUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowGamercardForServerHost
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ShowGamercardForServerHost : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowGamercardForServerHost" );

		return pClassPointer;
	};

};

UClass* UUIAction_ShowGamercardForServerHost::pClassPointer = NULL;

// Class Engine.UIAction_ShowKeyboardUI
// 0x0040 (0x0130 - 0x00F0)
class UUIAction_ShowKeyboardUI : public UUIAction
{
public:
	struct FString                                     TitleText;                                        		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DefaultText;                                      		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionText;                                  		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShouldValidate : 1;                              		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsPassword : 1;                                  		// 0x0114 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsDone : 1;                                      		// 0x0114 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     StringReturnValue;                                		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TempStringReturnValue;                            		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowKeyboardUI" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void OnKeyboardInputDone ( unsigned long bWasSuccessful );
	void eventReadKeyboardInput ( );
};

UClass* UUIAction_ShowKeyboardUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowLoginUI
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_ShowLoginUI : public UUIAction
{
public:
	unsigned long                                      bIsDone : 1;                                      		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowOnlineOnly : 1;                              		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowLoginUI" );

		return pClassPointer;
	};

	void OnLoginCancelled ( );
	void OnLoginChanged ( );
	void eventShowUI ( );
};

UClass* UUIAction_ShowLoginUI::pClassPointer = NULL;

// Class Engine.UICond_IsFocused
// 0x0000 (0x00D0 - 0x00D0)
class UUICond_IsFocused : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UICond_IsFocused" );

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

UClass* UUICond_IsFocused::pClassPointer = NULL;

// Class Engine.UIEvent
// 0x0018 (0x0118 - 0x0100)
class UUIEvent : public USequenceEvent
{
public:
	class UUIScreenObject*                             EventOwner;                                       		// 0x0100 (0x0004) [0x0000000001000000]              
	class UObject*                                     EventActivator;                                   		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShouldRegisterEvent : 1;                         		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPropagateEvent : 1;                              		// 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FScriptDelegate                             __AllowEventActivation__Delegate;                 		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventShouldAlwaysInstance ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsValidLevelSequenceObject ( );
	bool ActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
	bool ConditionalActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
	bool CanBeActivated ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
	class UUIScene* GetOwnerScene ( );
	class UUIScreenObject* GetOwner ( );
	bool AllowEventActivation ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate );
};

UClass* UUIEvent::pClassPointer = NULL;

// Class Engine.UIEvent_CalloutButtonInputProxy
// 0x0004 (0x011C - 0x0118)
class UUIEvent_CalloutButtonInputProxy : public UUIEvent
{
public:
	class UUICalloutButtonPanel*                       ButtonPanel;                                      		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_CalloutButtonInputProxy" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	int FindButtonAliasIndex ( struct FName ButtonAliasName );
	bool ChangeButtonAlias ( struct FName CurrentAliasName, struct FName NewAliasName );
	bool UnregisterButtonAlias ( struct FName ButtonAliasName );
	bool RegisterButtonAlias ( struct FName ButtonAliasName );
};

UClass* UUIEvent_CalloutButtonInputProxy::pClassPointer = NULL;

// Class Engine.UIEvent_ValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_ValueChanged : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_ValueChanged" );

		return pClassPointer;
	};

};

UClass* UUIEvent_ValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_CheckValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_CheckValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_CheckValueChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_CheckValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_ComboboxValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_ComboboxValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_ComboboxValueChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_ComboboxValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_DynamicButton_OnMouseEnter
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_DynamicButton_OnMouseEnter : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_DynamicButton_OnMouseEnter" );

		return pClassPointer;
	};

};

UClass* UUIEvent_DynamicButton_OnMouseEnter::pClassPointer = NULL;

// Class Engine.UIEvent_DynamicButton_OnMouseLeave
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_DynamicButton_OnMouseLeave : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_DynamicButton_OnMouseLeave" );

		return pClassPointer;
	};

};

UClass* UUIEvent_DynamicButton_OnMouseLeave::pClassPointer = NULL;

// Class Engine.UIEvent_ListIndexChanged
// 0x0008 (0x0120 - 0x0118)
class UUIEvent_ListIndexChanged : public UUIEvent_ValueChanged
{
public:
	int                                                PreviousIndex;                                    		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentIndex;                                     		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_ListIndexChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_ListIndexChanged::pClassPointer = NULL;

// Class Engine.UIEvent_MetaObject
// 0x0004 (0x011C - 0x0118)
class UUIEvent_MetaObject : public UUIEvent
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0118 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_MetaObject" );

		return pClassPointer;
	};

	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_MetaObject::pClassPointer = NULL;

// Class Engine.UIEvent_NumericOptionListValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_NumericOptionListValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_NumericOptionListValueChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_NumericOptionListValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_OnClick
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnClick : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnClick" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnClick::pClassPointer = NULL;

// Class Engine.UIEvent_OnDoubleClick
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnDoubleClick : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnDoubleClick" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnDoubleClick::pClassPointer = NULL;

// Class Engine.UIEvent_State
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_State : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_State" );

		return pClassPointer;
	};

};

UClass* UUIEvent_State::pClassPointer = NULL;

// Class Engine.UIEvent_OnEnterState
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnEnterState : public UUIEvent_State
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnEnterState" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnEnterState::pClassPointer = NULL;

// Class Engine.UIEvent_OnFocusChanged
// 0x0008 (0x0120 - 0x0118)
class UUIEvent_OnFocusChanged : public UUIEvent
{
public:
	class UObject*                                     m_pOldFocussedWidget;                             		// 0x0118 (0x0004) [0x0000000000000000]              
	class UObject*                                     m_pNewFocussedWidget;                             		// 0x011C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnFocusChanged" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnFocusChanged::pClassPointer = NULL;

// Class Engine.UIEvent_OnLeaveState
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnLeaveState : public UUIEvent_State
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnLeaveState" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnLeaveState::pClassPointer = NULL;

// Class Engine.UIEvent_OnListCellClicked
// 0x0018 (0x0130 - 0x0118)
class UUIEvent_OnListCellClicked : public UUIEvent
{
public:
	struct FString                                     m_sCellName;                                      		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nRow;                                           		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_nColumn;                                        		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSortRowIndex : 1;                              		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnListCellClicked" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnListCellClicked::pClassPointer = NULL;

// Class Engine.UIEvent_OnListCellDoubleClicked
// 0x0000 (0x0130 - 0x0130)
class UUIEvent_OnListCellDoubleClicked : public UUIEvent_OnListCellClicked
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnListCellDoubleClicked" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnListCellDoubleClicked::pClassPointer = NULL;

// Class Engine.UIEvent_OnListCellMouseOver
// 0x0018 (0x0130 - 0x0118)
class UUIEvent_OnListCellMouseOver : public UUIEvent
{
public:
	struct FString                                     m_sCellName;                                      		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nRow;                                           		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_nColumn;                                        		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSortRowIndex : 1;                              		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnListCellMouseOver" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnListCellMouseOver::pClassPointer = NULL;

// Class Engine.UIEvent_OnListSelectionChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnListSelectionChanged : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnListSelectionChanged" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnListSelectionChanged::pClassPointer = NULL;

// Class Engine.UIEvent_OnScrollDown
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnScrollDown : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnScrollDown" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnScrollDown::pClassPointer = NULL;

// Class Engine.UIEvent_OnScrollUp
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OnScrollUp : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OnScrollUp" );

		return pClassPointer;
	};

};

UClass* UUIEvent_OnScrollUp::pClassPointer = NULL;

// Class Engine.UIEvent_OptionListValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_OptionListValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_OptionListValueChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_OptionListValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_ProcessInput
// 0x003C (0x0154 - 0x0118)
class UUIEvent_ProcessInput : public UUIEvent
{
public:
	struct FMultiMap_Mirror                            ActionMap;                                        		// 0x0118 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_ProcessInput" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_ProcessInput::pClassPointer = NULL;

// Class Engine.UIEvent_ProgressBarValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_ProgressBarValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_ProgressBarValueChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_ProgressBarValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_Scene
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_Scene : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_Scene" );

		return pClassPointer;
	};

};

UClass* UUIEvent_Scene::pClassPointer = NULL;

// Class Engine.UIEvent_ScrollbarPositionChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_ScrollbarPositionChanged : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_ScrollbarPositionChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_ScrollbarPositionChanged::pClassPointer = NULL;

// Class Engine.UIEvent_SliderValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_SliderValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_SliderValueChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_SliderValueChanged::pClassPointer = NULL;

// Class Engine.UIEvent_SubmitData
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_SubmitData : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_SubmitData" );

		return pClassPointer;
	};

};

UClass* UUIEvent_SubmitData::pClassPointer = NULL;

// Class Engine.UIEvent_SubmitListData
// 0x0004 (0x011C - 0x0118)
class UUIEvent_SubmitListData : public UUIEvent_SubmitData
{
public:
	int                                                SelectedItem;                                     		// 0x0118 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_SubmitListData" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_SubmitListData::pClassPointer = NULL;

// Class Engine.UIEvent_SubmitTextData
// 0x0010 (0x0128 - 0x0118)
class UUIEvent_SubmitTextData : public UUIEvent_SubmitData
{
public:
	struct FString                                     Value;                                            		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bClearValue : 1;                                  		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_SubmitTextData" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_SubmitTextData::pClassPointer = NULL;

// Class Engine.UIEvent_TabControl
// 0x0004 (0x011C - 0x0118)
class UUIEvent_TabControl : public UUIEvent
{
public:
	class UUITabControl*                               OwnerTabControl;                                  		// 0x0118 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_TabControl" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_TabControl::pClassPointer = NULL;

// Class Engine.UIEvent_TextValueChanged
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_TextValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_TextValueChanged" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIEvent_TextValueChanged::pClassPointer = NULL;

// Class Engine.UISequence
// 0x0010 (0x0134 - 0x0124)
class UUISequence : public USequence
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                        		// 0x0124 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UUIEvent* >                          UIEvents;                                         		// 0x0128 (0x000C) [0x0000000001502002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UISequence" );

		return pClassPointer;
	};

	void RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events );
	class UUIScreenObject* GetOwner ( );
};

UClass* UUISequence::pClassPointer = NULL;

// Class Engine.UIStateSequence
// 0x0000 (0x0134 - 0x0134)
class UUIStateSequence : public UUISequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIStateSequence" );

		return pClassPointer;
	};

	class UUIState* GetOwnerState ( );
};

UClass* UUIStateSequence::pClassPointer = NULL;

// Class Engine.Scene
// 0x0000 (0x0040 - 0x0040)
class UScene : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Scene" );

		return pClassPointer;
	};

};

UClass* UScene::pClassPointer = NULL;

// Class Engine.SoundNodeWave
// 0x015C (0x01AC - 0x0050)
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                               		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceRealtimeDecompression : 1;                  		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDynamicResource : 1;                             		// 0x0054 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bOneTimeUse : 1;                                  		// 0x0054 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseTTS : 1;                                      		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bMature : 1;                                      		// 0x0054 (0x0004) [0x0000000000008003] [0x00000010] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned long                                      bAlwaysLocalise : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bManualWordWrap : 1;                              		// 0x0054 (0x0004) [0x0000000000008003] [0x00000040] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned char                                      TTSSpeaker;                                       		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DecompressionType;                                		// 0x0059 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     SpokenText;                                       		// 0x005C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              Volume;                                           		// 0x0068 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Pitch;                                            		// 0x006C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Duration;                                         		// 0x0070 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                NumChannels;                                      		// 0x0074 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                SampleRate;                                       		// 0x0078 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                SampleDataSize;                                   		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ChannelOffsets;                                   		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ChannelSizes;                                     		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FUntypedBulkData_Mirror                     RawData;                                          		// 0x0098 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    RawPCMData;                                       		// 0x00CC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VorbisDecompressor;                               		// 0x00D0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            PCMData;                                          		// 0x00D4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                 		// 0x00E0 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                            		// 0x0114 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                		// 0x0148 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ResourceID;                                       		// 0x017C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResourceSize;                                     		// 0x0180 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ResourceData;                                     		// 0x0184 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSubtitleCue >                      Subtitles;                                        		// 0x0188 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FMatureTimings >                    BleepTimings;                                     		// 0x0194 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Comment;                                          		// 0x01A0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SoundNodeWave" );

		return pClassPointer;
	};

};

UClass* USoundNodeWave::pClassPointer = NULL;

// Class Engine.FoliageComponent
// 0x007C (0x0254 - 0x01D8)
class UFoliageComponent : public UPrimitiveComponent
{
public:
	TArray< struct FGatheredFoliageInstance >          Instances;                                        		// 0x01D8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             StaticallyRelevantLights;                         		// 0x01E4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             StaticallyIrrelevantLights;                       		// 0x01F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              DirectionalStaticLightingScale[ 0x3 ];            		// 0x01FC (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SimpleStaticLightingScale[ 0x3 ];                 		// 0x0208 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       ShadowMapGuid;                                    		// 0x0214 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UStaticMesh*                                 InstanceStaticMesh;                               		// 0x0224 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          Material;                                         		// 0x0228 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDrawRadius;                                    		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              MinTransitionRadius;                              		// 0x0230 (0x0004) [0x0000000000000000]              
	float                                              MinThinningRadius;                                		// 0x0234 (0x0004) [0x0000000000000000]              
	struct FVector                                     MinScale;                                         		// 0x0238 (0x000C) [0x0000000000000000]              
	struct FVector                                     MaxScale;                                         		// 0x0244 (0x000C) [0x0000000000000000]              
	float                                              SwayScale;                                        		// 0x0250 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FoliageComponent" );

		return pClassPointer;
	};

};

UClass* UFoliageComponent::pClassPointer = NULL;

// Class Engine.FoliageFactory
// 0x0028 (0x02A0 - 0x0278)
class AFoliageFactory : public AVolume
{
public:
	TArray< struct FFoliageMesh >                      Meshes;                                           		// 0x0278 (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	float                                              VolumeFalloffRadius;                              		// 0x0284 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VolumeFalloffExponent;                            		// 0x0288 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityUpFacing;                           		// 0x028C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityDownFacing;                         		// 0x0290 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensitySideFacing;                         		// 0x0294 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FacingFalloffExponent;                            		// 0x0298 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxInstanceCount;                                 		// 0x029C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FoliageFactory" );

		return pClassPointer;
	};

};

UClass* AFoliageFactory::pClassPointer = NULL;

// Class Engine.FluidInfluenceActor
// 0x000C (0x0248 - 0x023C)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                    		// 0x023C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            Sprite;                                           		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFluidInfluenceComponent*                    InfluenceComponent;                               		// 0x0244 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FluidInfluenceActor" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* AFluidInfluenceActor::pClassPointer = NULL;

// Class Engine.FluidInfluenceComponent
// 0x0058 (0x0230 - 0x01D8)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RaindropFillEntireFluid : 1;                      		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AFluidSurfaceActor*                          FluidActor;                                       		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InfluenceType;                                    		// 0x01E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveStrength;                                     		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveFrequency;                                    		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WavePhase;                                        		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveRadius;                                       		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropAreaRadius;                               		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRadius;                                   		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropStrength;                                 		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRate;                                     		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSpeed;                                        		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlowNumRipples;                                   		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSideMotionRadius;                             		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowWaveRadius;                                   		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowStrength;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowFrequency;                                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereOuterRadius;                                		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereInnerRadius;                                		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereStrength;                                   		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentAngle;                                     		// 0x0228 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentTimer;                                     		// 0x022C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FluidInfluenceComponent" );

		return pClassPointer;
	};

};

UClass* UFluidInfluenceComponent::pClassPointer = NULL;

// Class Engine.FluidSurfaceActor
// 0x0004 (0x0240 - 0x023C)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                   		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FluidSurfaceActor" );

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AFluidSurfaceActor::pClassPointer = NULL;

// Class Engine.FluidSurfaceComponent
// 0x007C (0x0254 - 0x01D8)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                    		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapResolution;                               		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableVertexAnimation : 1;                        		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableDetailAnimation : 1;                        		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPause : 1;                                       		// 0x01E0 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowNormals : 1;                                 		// 0x01E0 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowDetailPosition : 1;                          		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bShowDetailFluid : 1;                             		// 0x01E0 (0x0004) [0x0000000000002001] [0x00000020] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bVisualizeDetailNormal : 1;                       		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowMainFluid : 1;                               		// 0x01E0 (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bTestRipple : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bTestRippleCenterOnDetail : 1;                    		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	float                                              GridSpacing;                                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GPUTessellationFactor;                            		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidDamping;                                     		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidHeightScale;                                 		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidUpdateRate;                                  		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactForce;                                      		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ContinuousForce;                                  		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightingContrast;                                 		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      DetailTarget;                                     		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DetailResolution;                                 		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailSize;                                       		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailDamping;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTransfer;                                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailHeightScale;                                		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailUpdateRate;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalLength;                                     		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleSpeed;                                  		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleFrequency;                              		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleRadius;                                 		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidWidth;                                       		// 0x0230 (0x0004) [0x0000000000000000]              
	float                                              FluidHeight;                                      		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              TestRippleTime;                                   		// 0x0238 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              TestRippleAngle;                                  		// 0x023C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< unsigned char >                            ClampMap;                                         		// 0x0240 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct UFluidSurfaceComponent_FLightMapRef         LightMap;                                         		// 0x024C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    FluidSimulation;                                  		// 0x0250 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FluidSurfaceComponent" );

		return pClassPointer;
	};

	void SetDetailPosition ( struct FVector WorldPos );
	void ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse );
};

UClass* UFluidSurfaceComponent::pClassPointer = NULL;

// Class Engine.SpeedTree
// 0x0088 (0x00C8 - 0x0040)
class USpeedTree : public UObject
{
public:
	struct FPointer                                    SRH;                                              		// 0x0040 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	int                                                RandomSeed;                                       		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Sink;                                             		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafStaticShadowOpacity;                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BranchMaterial;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafMaterial;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBendAngle;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchExponent;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafExponent;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Response;                                         		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResponseLimiter;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Gusting_MinStrength;                              		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Gusting_MaxStrength;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Gusting_Frequency;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Gusting_MinDuration;                              		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Gusting_MaxDuration;                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchHorizontal_LowWindAngle;                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchHorizontal_LowWindSpeed;                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchHorizontal_HighWindAngle;                   		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchHorizontal_HighWindSpeed;                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchVertical_LowWindAngle;                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchVertical_LowWindSpeed;                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchVertical_HighWindAngle;                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchVertical_HighWindSpeed;                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRocking_LowWindAngle;                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRocking_LowWindSpeed;                         		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRocking_HighWindAngle;                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRocking_HighWindSpeed;                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRustling_LowWindAngle;                        		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRustling_LowWindSpeed;                        		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRustling_HighWindAngle;                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafRustling_HighWindSpeed;                       		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpeedTree" );

		return pClassPointer;
	};

};

UClass* USpeedTree::pClassPointer = NULL;

// Class Engine.SpeedTreeActor
// 0x0004 (0x0240 - 0x023C)
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpeedTreeActor" );

		return pClassPointer;
	};

};

UClass* ASpeedTreeActor::pClassPointer = NULL;

// Class Engine.SpeedTreeActorFactory
// 0x0004 (0x006C - 0x0068)
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpeedTreeActorFactory" );

		return pClassPointer;
	};

};

UClass* USpeedTreeActorFactory::pClassPointer = NULL;

// Class Engine.SpeedTreeComponent
// 0x008C (0x0264 - 0x01D8)
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	class USpeedTree*                                  SpeedTree;                                        		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseLeaves : 1;                                   		// 0x01DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseBranches : 1;                                 		// 0x01DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseFronds : 1;                                   		// 0x01DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseBillboards : 1;                               		// 0x01DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              LodNearDistance;                                  		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodFarDistance;                                   		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodLevelOverride;                                 		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BranchMaterial;                                   		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafMaterial;                                     		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  SpeedTreeIcon;                                    		// 0x01FC (0x0004) [0x0000000000000000]              
	TArray< struct FSpeedTreeStaticLight >             StaticLights;                                     		// 0x0200 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct USpeedTreeComponent_FLightMapRef            BranchAndFrondLightMap;                           		// 0x020C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct USpeedTreeComponent_FLightMapRef            LeafMeshLightMap;                                 		// 0x0210 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct USpeedTreeComponent_FLightMapRef            LeafCardLightMap;                                 		// 0x0214 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct USpeedTreeComponent_FLightMapRef            BillboardLightMap;                                		// 0x0218 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x021C (0x0004) MISSED OFFSET
	struct FMatrix                                     RotationOnlyMatrix;                               		// 0x0220 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              WindMatrixOffset;                                 		// 0x0260 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpeedTreeComponent" );

		return pClassPointer;
	};

};

UClass* USpeedTreeComponent::pClassPointer = NULL;

// Class Engine.SpeedTreeComponentFactory
// 0x0004 (0x0048 - 0x0044)
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x0044 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SpeedTreeComponentFactory" );

		return pClassPointer;
	};

};

UClass* USpeedTreeComponentFactory::pClassPointer = NULL;

// Class Engine.LensFlare
// 0x01BC (0x01FC - 0x0040)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                    		// 0x0040 (0x0140) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMesh*                                 SourceMesh;                                       		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceDPG;                                        		// 0x0184 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ReflectionsDPG;                                   		// 0x0185 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FLensFlareElement >                 Reflections;                                      		// 0x0188 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              OuterCone;                                        		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerCone;                                        		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeFudgeFactor;                                  		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ScreenPercentageMap;                              		// 0x01A4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRenderDebugLines : 1;                            		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x01C4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x01E0 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                ReflectionCount;                                  		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x01E8 (0x000C) [0x0000000000000000]              
	float                                              ThumbnailDistance;                                		// 0x01F4 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x01F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LensFlare" );

		return pClassPointer;
	};

};

UClass* ULensFlare::pClassPointer = NULL;

// Class Engine.LensFlareComponent
// 0x0038 (0x0210 - 0x01D8)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                         		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x01DC (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x01E0 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightRadiusComponent*                   PreviewRadius;                                    		// 0x01E4 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bAutoActivate : 1;                                		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsActive : 1;                                    		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasTranslucency : 1;                             		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasUnlitTranslucency : 1;                        		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasUnlitDistortion : 1;                          		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	float                                              OuterCone;                                        		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InnerCone;                                        		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConeFudgeFactor;                                  		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Radius;                                           		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SourceColor;                                      		// 0x01FC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x020C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LensFlareComponent" );

		return pClassPointer;
	};

	void SetIsActive ( unsigned long bInIsActive );
	void SetSourceColor ( struct FLinearColor InSourceColor );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

UClass* ULensFlareComponent::pClassPointer = NULL;

// Class Engine.LensFlareSource
// 0x0008 (0x0244 - 0x023C)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0240 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LensFlareSource" );

		return pClassPointer;
	};

	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FLinearColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void OnToggle ( class USeqAct_Toggle* Action );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

UClass* ALensFlareSource::pClassPointer = NULL;

// Class Engine.AudioDevice
// 0x0114 (0x0158 - 0x0044)
class UAudioDevice : public USubsystem
{
public:
	int                                                MaxChannels;                                      		// 0x0044 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      UseEffectsProcessing : 1;                         		// 0x0048 (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bGameWasTicking : 1;                              		// 0x0048 (0x0004) [0x0000000000001002] [0x00000002] ( CPF_Const | CPF_Native )
	unsigned long                                      bTestLowPassFilter : 1;                           		// 0x0048 (0x0004) [0x0000000000001002] [0x00000004] ( CPF_Const | CPF_Native )
	unsigned long                                      bDisableLowPassFilter : 1;                        		// 0x0048 (0x0004) [0x0000000000001002] [0x00000008] ( CPF_Const | CPF_Native )
	unsigned long                                      bTestEQFilter : 1;                                		// 0x0048 (0x0004) [0x0000000000001002] [0x00000010] ( CPF_Const | CPF_Native )
	unsigned long                                      bDisableEQFilter : 1;                             		// 0x0048 (0x0004) [0x0000000000001002] [0x00000020] ( CPF_Const | CPF_Native )
	TArray< class UAudioComponent* >                   AudioComponents;                                  		// 0x004C (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FPointer >                          Sources;                                          		// 0x0058 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FPointer >                          FreeSources;                                      		// 0x0064 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 WaveInstanceSourceMap;                            		// 0x0070 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FListener >                         Listeners;                                        		// 0x00AC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FQWord                                      CurrentTick;                                      		// 0x00B8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 NameToSoundGroupIndexMap;                         		// 0x00C0 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       SourceSoundGroups;                                		// 0x00FC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       CurrentSoundGroups;                               		// 0x0108 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       DestinationSoundGroups;                           		// 0x0114 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSoundGroup >                       SoundGroups;                                      		// 0x0120 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSoundGroupEffect >                 SoundGroupEffects;                                		// 0x012C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FPointer                                    Effects;                                          		// 0x0138 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      CurrentMode;                                      		// 0x013C (0x0001) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeStartTime;                               		// 0x0140 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeEndTime;                                 		// 0x0148 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    TextToSpeech;                                     		// 0x0150 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TransientMasterVolume;                            		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AudioDevice" );

		return pClassPointer;
	};

	void SetSoundMode ( unsigned char NewSoundMode, float FadeTime );
};

UClass* UAudioDevice::pClassPointer = NULL;

// Class Engine.cToDManagerBase
// 0x0000 (0x023C - 0x023C)
class AcToDManagerBase : public AReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cToDManagerBase" );

		return pClassPointer;
	};

};

UClass* AcToDManagerBase::pClassPointer = NULL;

// Class Engine.LocalMessage
// 0x0014 (0x0054 - 0x0040)
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                   		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsUnique : 1;                                    		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsPartiallyUnique : 1;                           		// 0x0040 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsConsoleMessage : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBeep : 1;                                        		// 0x0040 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCountInstances : 1;                              		// 0x0040 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              Lifetime;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              PosY;                                             		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                FontSize;                                         		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.LocalMessage" );

		return pClassPointer;
	};

	bool PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 );
	bool IsKeyObjectiveMessage ( int Switch );
	bool IsConsoleMessage ( int Switch );
	float GetLifeTime ( int Switch );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
	float GetPos ( int Switch, class AHUD* myHUD );
	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* ULocalMessage::pClassPointer = NULL;

// Class Engine.SeqAct_Destroy
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_Destroy : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Destroy" );

		return pClassPointer;
	};

};

UClass* USeqAct_Destroy::pClassPointer = NULL;

// Class Engine.SeqAct_HealDamage
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_HealDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HealAmount;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_HealDamage" );

		return pClassPointer;
	};

};

UClass* USeqAct_HealDamage::pClassPointer = NULL;

// Class Engine.SeqAct_Teleport
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_Teleport" );

		return pClassPointer;
	};

};

UClass* USeqAct_Teleport::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleHidden
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ToggleHidden" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_ToggleHidden::pClassPointer = NULL;

// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x010C - 0x00E8)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeOffset;                                   		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_AttachToActor" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_AttachToActor::pClassPointer = NULL;

// Class Engine.SeqAct_MakeNoise
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_MakeNoise : public USequenceAction
{
public:
	float                                              Loudness;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_MakeNoise" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_MakeNoise::pClassPointer = NULL;

// Class Engine.SeqEvent_TakeDamage
// 0x0024 (0x0124 - 0x0100)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageThreshold;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageTypes;                                      		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoreDamageTypes;                                		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CurrentDamage;                                    		// 0x0120 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_TakeDamage" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Reset ( );
	void HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* InDamageType, int inAmount );
	bool IsValidDamageType ( class UClass* InDamageType );
};

UClass* USeqEvent_TakeDamage::pClassPointer = NULL;

// Class Engine.OnlineAccountInterface
// 0x000C (0x004C - 0x0040)
class UOnlineAccountInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineAccountCompleted__Delegate;       		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineAccountInterface" );

		return pClassPointer;
	};

	bool GetLocalAccountNames ( TArray< struct FString >* Accounts );
	bool DeleteLocalAccount ( struct FString UserName, struct FString Password );
	bool RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password );
	bool CreateLocalAccount ( struct FString UserName, struct FString Password );
	void ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus );
	bool CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey );
};

UClass* UOnlineAccountInterface::pClassPointer = NULL;

// Class Engine.OnlinePlayerInterface
// 0x00B4 (0x00F4 - 0x0040)
class UOnlinePlayerInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLoginChange__Delegate;                        		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginCancelled__Delegate;                     		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMutingChange__Delegate;                       		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendsChange__Delegate;                      		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginFailed__Delegate;                        		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLogoutCompleted__Delegate;                    		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;        		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;       		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadFriendsComplete__Delegate;                		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnKeyboardInputComplete__Delegate;              		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddFriendByNameComplete__Delegate;            		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendInviteReceived__Delegate;               		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedGameInvite__Delegate;                 		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinFriendGameComplete__Delegate;             		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendMessageReceived__Delegate;              		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlinePlayerInterface" );

		return pClassPointer;
	};

	bool DeleteMessage ( unsigned char LocalUserNum, int MessageIndex );
	void ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void GetFriendMessages ( unsigned char LocalUserNum, TArray< struct FOnlineFriendMessage >* FriendMessages );
	void ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void OnJoinFriendGameComplete ( unsigned long bWasSuccessful );
	bool JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend );
	void ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName );
	bool SendGameInviteToFriends ( unsigned char LocalUserNum, TArray< struct FUniqueNetId > Friends, struct FString Text );
	bool SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text );
	bool SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message );
	void ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	bool RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend );
	bool DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	bool AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	void ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void OnAddFriendByNameComplete ( unsigned long bWasSuccessful );
	bool AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message );
	bool AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message );
	void OnKeyboardInputComplete ( unsigned long bWasSuccessful );
	struct FString GetKeyboardInputResults ( unsigned char* bWasCanceled );
	void ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	bool ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength );
	void SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, TArray< struct FLocalizedStringSetting >* LocalizedStringSettings, TArray< struct FSettingsProperty >* Properties );
	unsigned char GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, TArray< struct FOnlineFriend >* Friends );
	void ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void OnReadFriendsComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt );
	void ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void OnWriteProfileSettingsComplete ( unsigned long bWasSuccessful );
	bool WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	class UOnlineProfileSettings* GetProfileSettings ( unsigned char LocalUserNum );
	void ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void OnReadProfileSettingsComplete ( unsigned long bWasSuccessful );
	bool ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	void ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum );
	void AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum );
	bool ShowFriendsUI ( unsigned char LocalUserNum );
	bool IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool AreAnyFriends ( unsigned char LocalUserNum, TArray< struct FFriendsQuery >* Query );
	bool IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	unsigned char CanShowPresenceInformation ( unsigned char LocalUserNum );
	unsigned char CanViewPlayerProfiles ( unsigned char LocalUserNum );
	unsigned char CanPurchaseContent ( unsigned char LocalUserNum );
	unsigned char CanDownloadUserContent ( unsigned char LocalUserNum );
	unsigned char CanCommunicate ( unsigned char LocalUserNum );
	unsigned char CanPlayOnline ( unsigned char LocalUserNum );
	struct FString GetPlayerNickname ( unsigned char LocalUserNum );
	bool GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID );
	unsigned char GetLoginStatus ( unsigned char LocalUserNum );
	void ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	bool Logout ( unsigned char LocalUserNum );
	void ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	bool AutoLogin ( );
	bool Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly );
	bool ShowLoginUI ( unsigned long bShowOnlineOnly );
	void OnFriendsChange ( );
	void OnMutingChange ( );
	void OnLoginCancelled ( );
	void OnLoginChange ( );
};

UClass* UOnlinePlayerInterface::pClassPointer = NULL;

// Class Engine.OnlinePlayerInterfaceEx
// 0x0024 (0x0064 - 0x0040)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:
	struct FScriptDelegate                             __OnDeviceSelectionComplete__Delegate;            		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnlockAchievementComplete__Delegate;          		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProfileDataChanged__Delegate;                 		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlinePlayerInterfaceEx" );

		return pClassPointer;
	};

	bool ShowPlayersUI ( unsigned char LocalUserNum );
	bool ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	void ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void OnProfileDataChanged ( );
	bool UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId );
	void OnUnlockAchievementComplete ( unsigned long bWasSuccessful );
	void ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	bool UnlockAchievement ( unsigned char LocalUserNum, int AchievementId );
	bool IsDeviceValid ( int DeviceID );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	int GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName );
	void ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	bool ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShowUI );
	bool ShowMembershipMarketplaceUI ( unsigned char LocalUserNum );
	bool ShowContentMarketplaceUI ( unsigned char LocalUserNum );
	bool ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText );
	bool ShowAchievementsUI ( unsigned char LocalUserNum );
	bool ShowMessagesUI ( unsigned char LocalUserNum );
	bool ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
};

UClass* UOnlinePlayerInterfaceEx::pClassPointer = NULL;

// Class Engine.OnlineSystemInterface
// 0x0048 (0x0088 - 0x0040)
class UOnlineSystemInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLinkStatusChange__Delegate;                   		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnExternalUIChange__Delegate;                   		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnControllerChange__Delegate;                   		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnConnectionStatusChange__Delegate;             		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStorageDeviceChange__Delegate;                		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineSystemInterface" );

		return pClassPointer;
	};

	unsigned char GetTitleFileState ( struct FString Filename );
	bool GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents );
	void ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	bool ReadTitleFile ( struct FString FileToRead );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void OnStorageDeviceChange ( );
	unsigned char GetNATType ( );
	void ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	bool IsControllerConnected ( int ControllerId );
	void ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void OnControllerChange ( int ControllerId, unsigned long bIsConnected );
	void SetNetworkNotificationPosition ( unsigned char NewPos );
	unsigned char GetNetworkNotificationPosition ( );
	void ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void OnExternalUIChange ( unsigned long bIsOpening );
	void ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void OnLinkStatusChange ( unsigned long bIsConnected );
	bool HasLinkConnection ( );
};

UClass* UOnlineSystemInterface::pClassPointer = NULL;

// Class Engine.OnlineGameInterface
// 0x0090 (0x00D0 - 0x0040)
class UOnlineGameInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineGameComplete__Delegate;           		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateOnlineGameComplete__Delegate;           		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDestroyOnlineGameComplete__Delegate;          		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFindOnlineGamesComplete__Delegate;            		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCancelFindOnlineGamesComplete__Delegate;      		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinOnlineGameComplete__Delegate;             		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRegisterPlayerComplete__Delegate;             		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnregisterPlayerComplete__Delegate;           		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStartOnlineGameComplete__Delegate;            		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnEndOnlineGameComplete__Delegate;              		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnArbitrationRegistrationComplete__Delegate;    		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGameInviteAccepted__Delegate;                 		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineGameInterface" );

		return pClassPointer;
	};

	bool RecalculateSkillRating ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	bool AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName );
	void OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings );
	void ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	TArray< struct FOnlineArbitrationRegistrant > GetArbitratedPlayers ( struct FName SessionName );
	void ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RegisterForArbitration ( struct FName SessionName );
	void ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool EndOnlineGame ( struct FName SessionName );
	void ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool StartOnlineGame ( struct FName SessionName );
	void ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void OnUnregisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID );
	void ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void OnRegisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited );
	bool GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo );
	void ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame );
	bool QueryNonAdvertisedData ( int StartAt, int NumberToQuery );
	bool FreeSearchResults ( class UOnlineGameSearch* Search );
	class UOnlineGameSearch* GetGameSearch ( );
	bool BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo );
	void ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool CancelFindOnlineGames ( );
	void ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void OnFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings );
	void ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool DestroyOnlineGame ( struct FName SessionName );
	class UOnlineGameSettings* GetGameSettings ( struct FName SessionName );
	void ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData );
	void ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings );
};

UClass* UOnlineGameInterface::pClassPointer = NULL;

// Class Engine.OnlineContentInterface
// 0x0024 (0x0064 - 0x0040)
class UOnlineContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnContentChange__Delegate;                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadContentComplete__Delegate;                		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueryAvailableDownloadsComplete__Delegate;    		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineContentInterface" );

		return pClassPointer;
	};

	void GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads );
	void ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful );
	bool QueryAvailableDownloads ( unsigned char LocalUserNum );
	unsigned char GetContentList ( unsigned char LocalUserNum, TArray< struct FOnlineContent >* ContentList );
	bool ReadContentList ( unsigned char LocalUserNum );
	void ClearReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate );
	void AddReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate );
	void OnReadContentComplete ( unsigned long bWasSuccessful );
	void ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void OnContentChange ( );
};

UClass* UOnlineContentInterface::pClassPointer = NULL;

// Class Engine.OnlineVoiceInterface
// 0x0018 (0x0058 - 0x0040)
class UOnlineVoiceInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnPlayerTalking__Delegate;                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineVoiceInterface" );

		return pClassPointer;
	};

	bool UnmuteAll ( unsigned char LocalUserNum );
	bool MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends );
	bool SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj );
	bool SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId );
	void ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void OnRecognitionComplete ( );
	bool GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words );
	bool StopSpeechRecognition ( unsigned char LocalUserNum );
	bool StartSpeechRecognition ( unsigned char LocalUserNum );
	void StopNetworkedVoice ( unsigned char LocalUserNum );
	void StartNetworkedVoice ( unsigned char LocalUserNum );
	void ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void OnPlayerTalking ( struct FUniqueNetId Player );
	bool UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority );
	bool IsHeadsetPresent ( unsigned char LocalUserNum );
	bool IsRemotePlayerTalking ( struct FUniqueNetId PlayerID );
	bool IsLocalPlayerTalking ( unsigned char LocalUserNum );
	bool UnregisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool RegisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool UnregisterLocalTalker ( unsigned char LocalUserNum );
	bool RegisterLocalTalker ( unsigned char LocalUserNum );
};

UClass* UOnlineVoiceInterface::pClassPointer = NULL;

// Class Engine.OnlineStatsInterface
// 0x0024 (0x0064 - 0x0040)
class UOnlineStatsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadOnlineStatsComplete__Delegate;            		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFlushOnlineStatsComplete__Delegate;           		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRegisterHostStatGuidComplete__Delegate;       		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineStatsInterface" );

		return pClassPointer;
	};

	bool RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid );
	struct FString GetClientStatGuid ( );
	void ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	bool RegisterHostStatGuid ( struct FString* HostStatGuid );
	struct FString GetHostStatGuid ( );
	bool WriteOnlinePlayerScores ( struct FName SessionName, TArray< struct FOnlinePlayerScore >* PlayerScores );
	void ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool FlushOnlineStats ( struct FName SessionName );
	bool WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite );
	void FreeStats ( class UOnlineStatsRead* StatsRead );
	void OnReadOnlineStatsComplete ( unsigned long bWasSuccessful );
	void ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	bool ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows );
	bool ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead );
	bool ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead );
	bool ReadOnlineStats ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players );
};

UClass* UOnlineStatsInterface::pClassPointer = NULL;

// Class Engine.OnlineNewsInterface
// 0x0018 (0x0058 - 0x0040)
class UOnlineNewsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadGameNewsCompleted__Delegate;              		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadContentAnnouncementsCompleted__Delegate;  		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineNewsInterface" );

		return pClassPointer;
	};

	struct FString GetContentAnnouncements ( unsigned char LocalUserNum );
	void ClearReadContentAnnouncementsCompletedDelegate ( struct FScriptDelegate ReadContentAnnouncementsDelegate );
	void AddReadContentAnnouncementsCompletedDelegate ( struct FScriptDelegate ReadContentAnnouncementsDelegate );
	void OnReadContentAnnouncementsCompleted ( unsigned long bWasSuccessful );
	bool ReadContentAnnouncements ( unsigned char LocalUserNum );
	struct FString GetGameNews ( unsigned char LocalUserNum );
	void ClearReadGameNewsCompletedDelegate ( struct FScriptDelegate ReadGameNewsDelegate );
	void AddReadGameNewsCompletedDelegate ( struct FScriptDelegate ReadGameNewsDelegate );
	void OnReadGameNewsCompleted ( unsigned long bWasSuccessful );
	bool ReadGameNews ( unsigned char LocalUserNum );
};

UClass* UOnlineNewsInterface::pClassPointer = NULL;

// Class Engine.AccessControl
// 0x00D4 (0x0310 - 0x023C)
class AAccessControl : public AInfo
{
public:
	TArray< struct FString >                           IPPolicies;                                       		// 0x023C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      BannedIDs;                                        		// 0x0248 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     IPBanned;                                         		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WrongPassword;                                    		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NeedPassword;                                     		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SessionBanned;                                    		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickedMsg;                                        		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultKickReason;                                		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IdleKickReason;                                   		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      AdminClass;                                       		// 0x02A8 (0x0004) [0x0000000000000000]              
	struct FString                                     AdminPassword;                                    		// 0x02AC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     GamePassword;                                     		// 0x02B8 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ACDisplayText[ 0x3 ];                             		// 0x02C4 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ACDescText[ 0x3 ];                                		// 0x02E8 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bDontAddDefaultAdmin : 1;                         		// 0x030C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AccessControl" );

		return pClassPointer;
	};

	bool IsIDBanned ( struct FUniqueNetId* NetID );
	bool CheckIPPolicy ( struct FString Address );
	void eventPreLogin ( struct FString Options, struct FString Address, unsigned long bSpectator, struct FString* OutError );
	bool ValidLogin ( struct FString UserName, struct FString Password );
	bool ParseAdminOptions ( struct FString Options );
	void AdminExited ( class APlayerController* P );
	void AdminEntered ( class APlayerController* P );
	bool AdminLogout ( class APlayerController* P );
	bool AdminLogin ( class APlayerController* P, struct FString Password );
	bool KickPlayer ( class APlayerController* C, struct FString KickReason );
	void KickBan ( struct FString Target );
	void Kick ( struct FString Target );
	class AController* GetControllerFromString ( struct FString Target );
	bool RequiresPassword ( );
	void SetGamePassword ( struct FString P );
	bool SetAdminPassword ( struct FString P );
	bool IsAdmin ( class APlayerController* P );
};

UClass* AAccessControl::pClassPointer = NULL;

// Class Engine.Admin
// 0x0000 (0x0584 - 0x0584)
class AAdmin : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Admin" );

		return pClassPointer;
	};

	void ServerSwitch ( struct FString URL );
	void Switch ( struct FString URL );
	void ServerRestartMap ( );
	void RestartMap ( );
	void PlayerList ( );
	void ServerKick ( struct FString S );
	void Kick ( struct FString S );
	void ServerKickBan ( struct FString S );
	void KickBan ( struct FString S );
	void ServerAdmin ( struct FString CommandLine );
	void Admin ( struct FString CommandLine );
	void eventPostBeginPlay ( );
};

UClass* AAdmin::pClassPointer = NULL;

// Class Engine.EmitterSpawnable
// 0x0008 (0x025C - 0x0254)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USequence*                                   OwningSequence;                                   		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.EmitterSpawnable" );

		return pClassPointer;
	};

	void eventPostFactorySpawn ( class USequence* ParentSequence );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

UClass* AEmitterSpawnable::pClassPointer = NULL;

// Class Engine.KAssetSpawnable
// 0x0000 (0x024C - 0x024C)
class AKAssetSpawnable : public AKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.KAssetSpawnable" );

		return pClassPointer;
	};

};

UClass* AKAssetSpawnable::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x0250 - 0x0250)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkeletalMeshActorSpawnable" );

		return pClassPointer;
	};

};

UClass* ASkeletalMeshActorSpawnable::pClassPointer = NULL;

// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x0078 - 0x0078)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ActorFactorySkeletalMeshMAT" );

		return pClassPointer;
	};

};

UClass* UActorFactorySkeletalMeshMAT::pClassPointer = NULL;

// Class Engine.SeqEvent_Death
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_Death : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_Death" );

		return pClassPointer;
	};

};

UClass* USeqEvent_Death::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ToggleGodMode" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_ToggleGodMode::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleAffectedByHitEffects
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ToggleAffectedByHitEffects" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_ToggleAffectedByHitEffects::pClassPointer = NULL;

// Class Engine.CoverReplicator
// 0x000C (0x0248 - 0x023C)
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray< struct FCoverReplicationInfo >             CoverReplicationData;                             		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.CoverReplicator" );

		return pClassPointer;
	};

	void ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendManualCoverTypeSlots ( int Index );
	void NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, TArray< int >* SlotIndices );
	void ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone );
	void ServerSendAdjustedSlots ( int Index );
	void NotifyAutoAdjustSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone );
	void ServerSendDisabledSlots ( int Index );
	void NotifyDisabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone );
	void ServerSendEnabledSlots ( int Index );
	void NotifyEnabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendInitialCoverReplicationInfo ( int Index );
	void ReplicateInitialCoverInfo ( );
	void PurgeOldEntries ( );
};

UClass* ACoverReplicator::pClassPointer = NULL;

// Class Engine.DebugCameraController
// 0x0010 (0x0594 - 0x0584)
class ADebugCameraController : public APlayerController
{
public:
	class APlayerController*                           OryginalControllerRef;                            		// 0x0584 (0x0004) [0x0000000000000000]              
	class UPlayer*                                     OryginalPlayer;                                   		// 0x0588 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsFrozenRendering : 1;                           		// 0x058C (0x0004) [0x0000000000000000] [0x00000001] 
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0590 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DebugCameraController" );

		return pClassPointer;
	};

	void DisableDebugCamera ( );
	void NormalSpeed ( );
	void MoreSpeed ( );
	void SetFreezeRendering ( );
	void OnDeactivate ( class APlayerController* PC );
	void OnActivate ( class APlayerController* PC );
	void eventPostBeginPlay ( );
};

UClass* ADebugCameraController::pClassPointer = NULL;

// Class Engine.GameMessage
// 0x0114 (0x0168 - 0x0054)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                               		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeftMessage;                                      		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedTeamMessage;                                		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedPlaceMessage;                               		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedSpawnMessage;                               		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnteredMessage;                                   		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxedOutMessage;                                  		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ArbitrationMessage;                               		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OvertimeMessage;                                  		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GlobalNameChange;                                 		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessage;                                   		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessageTrailer;                            		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoNameChange;                                     		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteStarted;                                      		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VotePassed;                                       		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MustHaveStats;                                    		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBeSpectator;                                  		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBePlayer;                                     		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BecameSpectator;                                  		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewPlayerMessage;                                 		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickWarning;                                      		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewSpecMessage;                                   		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpecEnteredMessage;                               		// 0x015C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameMessage" );

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UGameMessage::pClassPointer = NULL;

// Class Engine.Scoreboard
// 0x0004 (0x04C4 - 0x04C0)
class AScoreboard : public AHUD
{
public:
	unsigned long                                      bDisplayMessages : 1;                             		// 0x04C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Scoreboard" );

		return pClassPointer;
	};

	void ChangeState ( unsigned long bIsVisible );
	void UpdateScoreBoard ( );
	bool UpdateGRI ( );
	void DrawHUD ( );
};

UClass* AScoreboard::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggleTurning : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ToggleInput" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_ToggleInput::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleHUD
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ToggleHUD" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_ToggleHUD::pClassPointer = NULL;

// Class Engine.SeqAct_ForceFeedback
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x00E8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ForceFeedback" );

		return pClassPointer;
	};

};

UClass* USeqAct_ForceFeedback::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableTurning : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHidePlayer : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHideHUD : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ToggleCinematicMode" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_ToggleCinematicMode::pClassPointer = NULL;

// Class Engine.SeqAct_ConsoleCommand
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                          		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           Commands;                                         		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ConsoleCommand" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void VersionUpdated ( int OldVersion, int NewVersion );
};

UClass* USeqAct_ConsoleCommand::pClassPointer = NULL;

// Class Engine.AmbientSoundSimpleToggleable
// 0x0014 (0x0264 - 0x0250)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	unsigned long                                      bCurrentlyPlaying : 1;                            		// 0x0250 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bFadeOnToggle : 1;                                		// 0x0250 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              FadeInDuration;                                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInVolumeLevel;                                		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutDuration;                                  		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutVolumeLevel;                               		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AmbientSoundSimpleToggleable" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void StopPlaying ( );
	void StartPlaying ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AAmbientSoundSimpleToggleable::pClassPointer = NULL;

// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x0024 (0x0064 - 0x0040)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     GroupName;                                        		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AnimName;                                         		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bOverridePlayingAnim : 1;                         		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PlayFrequency;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNotify_PlayFaceFXAnim" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_PlayFaceFXAnim::pClassPointer = NULL;

// Class Engine.AnimNotify_ViewShake
// 0x004C (0x008C - 0x0040)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              ShakeRadius;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotAmplitude;                                     		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotFrequency;                                     		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocAmplitude;                                     		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocFrequency;                                     		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVAmplitude;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVFrequency;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseBoneLocation : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.AnimNotify_ViewShake" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_ViewShake::pClassPointer = NULL;

// Class Engine.cAPBVisualServerHUD
// 0x0020 (0x0060 - 0x0040)
class UcAPBVisualServerHUD : public UObject
{
public:
	unsigned long                                      m_bShowHUD : 1;                                   		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fSizeX;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              m_fSizeY;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              m_fCenterX;                                       		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              m_fCenterY;                                       		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              m_fRatioX;                                        		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_fRatioY;                                        		// 0x0058 (0x0004) [0x0000000000000000]              
	class UCanvas*                                     m_Canvas;                                         		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cAPBVisualServerHUD" );

		return pClassPointer;
	};

	void eventPostRender ( );
	void PreCalcValues ( );
	void DrawHUD ( );
};

UClass* UcAPBVisualServerHUD::pClassPointer = NULL;

// Class Engine.ColorScaleVolume
// 0x0010 (0x0288 - 0x0278)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                       		// 0x0278 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpTime;                                       		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ColorScaleVolume" );

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AColorScaleVolume::pClassPointer = NULL;

// Class Engine.UIAction_ChangeVisibility
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_ChangeVisibility : public UUIAction
{
public:
	unsigned long                                      bVisible : 1;                                     		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ChangeVisibility" );

		return pClassPointer;
	};

};

UClass* UUIAction_ChangeVisibility::pClassPointer = NULL;

// Class Engine.UIAction_ConsoleCommand
// 0x000C (0x00FC - 0x00F0)
class UUIAction_ConsoleCommand : public UUIAction
{
public:
	struct FString                                     Command;                                          		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ConsoleCommand" );

		return pClassPointer;
	};

};

UClass* UUIAction_ConsoleCommand::pClassPointer = NULL;

// Class Engine.UIAction_ShowFriendsUI
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ShowFriendsUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowFriendsUI" );

		return pClassPointer;
	};

};

UClass* UUIAction_ShowFriendsUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowPlayersUI
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ShowPlayersUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowPlayersUI" );

		return pClassPointer;
	};

};

UClass* UUIAction_ShowPlayersUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowAchievementsUI
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ShowAchievementsUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowAchievementsUI" );

		return pClassPointer;
	};

};

UClass* UUIAction_ShowAchievementsUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowFriendInviteUI
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_ShowFriendInviteUI : public UUIAction
{
public:
	struct FUniqueNetId                                RemotePlayerNetId;                                		// 0x00F0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowFriendInviteUI" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_ShowFriendInviteUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowMessagesUI
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ShowMessagesUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowMessagesUI" );

		return pClassPointer;
	};

};

UClass* UUIAction_ShowMessagesUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowFeedbackUI
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_ShowFeedbackUI : public UUIAction
{
public:
	struct FUniqueNetId                                RemotePlayerNetId;                                		// 0x00F0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowFeedbackUI" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_ShowFeedbackUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowGamerCardUI
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_ShowGamerCardUI : public UUIAction
{
public:
	struct FUniqueNetId                                RemotePlayerNetId;                                		// 0x00F0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowGamerCardUI" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIAction_ShowGamerCardUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowContentMarketplaceUI
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ShowContentMarketplaceUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowContentMarketplaceUI" );

		return pClassPointer;
	};

};

UClass* UUIAction_ShowContentMarketplaceUI::pClassPointer = NULL;

// Class Engine.UIAction_ShowMembershipMarketplaceUI
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_ShowMembershipMarketplaceUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ShowMembershipMarketplaceUI" );

		return pClassPointer;
	};

};

UClass* UUIAction_ShowMembershipMarketplaceUI::pClassPointer = NULL;

// Class Engine.UIAction_SetControllerId
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_SetControllerId : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetControllerId" );

		return pClassPointer;
	};

};

UClass* UUIAction_SetControllerId::pClassPointer = NULL;

// Class Engine.UIAction_SetDatastoreBinding
// 0x000C (0x0100 - 0x00F4)
class UUIAction_SetDatastoreBinding : public UUIAction_DataStore
{
public:
	struct FString                                     NewMarkup;                                        		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetDatastoreBinding" );

		return pClassPointer;
	};

};

UClass* UUIAction_SetDatastoreBinding::pClassPointer = NULL;

// Class Engine.UIEvent_Initialized
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_Initialized : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_Initialized" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UUIEvent_Initialized::pClassPointer = NULL;

// Class Engine.UIAction_SetValue
// 0x0000 (0x00F0 - 0x00F0)
class UUIAction_SetValue : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetValue" );

		return pClassPointer;
	};

};

UClass* UUIAction_SetValue::pClassPointer = NULL;

// Class Engine.UIAction_SetLabelText
// 0x000C (0x00FC - 0x00F0)
class UUIAction_SetLabelText : public UUIAction_SetValue
{
public:
	struct FString                                     NewText;                                          		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetLabelText" );

		return pClassPointer;
	};

};

UClass* UUIAction_SetLabelText::pClassPointer = NULL;

// Class Engine.UIAction_GetTextValue
// 0x000C (0x00FC - 0x00F0)
class UUIAction_GetTextValue : public UUIAction_GetValue
{
public:
	struct FString                                     StringValue;                                      		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetTextValue" );

		return pClassPointer;
	};

};

UClass* UUIAction_GetTextValue::pClassPointer = NULL;

// Class Engine.cUIAction_SetImage
// 0x0008 (0x00F8 - 0x00F0)
class UcUIAction_SetImage : public UUIAction_SetValue
{
public:
	class UObject*                                     m_NewImage;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     m_SecondaryImage;                                 		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.cUIAction_SetImage" );

		return pClassPointer;
	};

};

UClass* UcUIAction_SetImage::pClassPointer = NULL;

// Class Engine.SeqAct_ModifyCover
// 0x000D (0x00F5 - 0x00E8)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray< int >                                      Slots;                                            		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ManualCoverType;                                  		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ModifyCover" );

		return pClassPointer;
	};

};

UClass* USeqAct_ModifyCover::pClassPointer = NULL;

// Class Engine.DebugCameraHUD
// 0x0000 (0x04C0 - 0x04C0)
class ADebugCameraHUD : public AHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DebugCameraHUD" );

		return pClassPointer;
	};

	void eventPostRender ( );
	void eventPostBeginPlay ( );
};

UClass* ADebugCameraHUD::pClassPointer = NULL;

// Class Engine.DebugCameraInput
// 0x0000 (0x0160 - 0x0160)
class UDebugCameraInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DebugCameraInput" );

		return pClassPointer;
	};

};

UClass* UDebugCameraInput::pClassPointer = NULL;

// Class Engine.DecalLifetime
// 0x0000 (0x0040 - 0x0040)
class UDecalLifetime : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DecalLifetime" );

		return pClassPointer;
	};

};

UClass* UDecalLifetime::pClassPointer = NULL;

// Class Engine.DecalLifetimeAge
// 0x0000 (0x0040 - 0x0040)
class UDecalLifetimeAge : public UDecalLifetime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DecalLifetimeAge" );

		return pClassPointer;
	};

};

UClass* UDecalLifetimeAge::pClassPointer = NULL;

// Class Engine.VolumeTimer
// 0x0004 (0x0240 - 0x023C)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                		// 0x023C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.VolumeTimer" );

		return pClassPointer;
	};

	void eventTimer ( );
	void eventPostBeginPlay ( );
};

UClass* AVolumeTimer::pClassPointer = NULL;

// Class Engine.SeqAct_SetDamageInstigator
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetDamageInstigator" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetDamageInstigator::pClassPointer = NULL;

// Class Engine.DialogueManager
// 0x0000 (0x023C - 0x023C)
class ADialogueManager : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DialogueManager" );

		return pClassPointer;
	};

	bool TriggerDialogueEvent ( class UClass* InEventClass, class AActor* InInstigator, class AActor* InOriginator );
};

UClass* ADialogueManager::pClassPointer = NULL;

// Class Engine.DmgType_Crushed
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Crushed : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DmgType_Crushed" );

		return pClassPointer;
	};

};

UClass* UDmgType_Crushed::pClassPointer = NULL;

// Class Engine.DmgType_Suicided
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Suicided : public UKillZDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DmgType_Suicided" );

		return pClassPointer;
	};

};

UClass* UDmgType_Suicided::pClassPointer = NULL;

// Class Engine.DmgType_Telefragged
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Telefragged : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DmgType_Telefragged" );

		return pClassPointer;
	};

};

UClass* UDmgType_Telefragged::pClassPointer = NULL;

// Class Engine.DynamicPhysicsVolume
// 0x0000 (0x02B4 - 0x02B4)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicPhysicsVolume" );

		return pClassPointer;
	};

};

UClass* ADynamicPhysicsVolume::pClassPointer = NULL;

// Class Engine.SeqAct_SetStaticMesh
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetStaticMesh : public USequenceAction
{
public:
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetStaticMesh" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetStaticMesh::pClassPointer = NULL;

// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x0274 - 0x0274)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicSMActor_Spawnable" );

		return pClassPointer;
	};

};

UClass* ADynamicSMActor_Spawnable::pClassPointer = NULL;

// Class Engine.DynamicTriggerVolume
// 0x0000 (0x0278 - 0x0278)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.DynamicTriggerVolume" );

		return pClassPointer;
	};

};

UClass* ADynamicTriggerVolume::pClassPointer = NULL;

// Class Engine.SeqAct_SetParticleSysParam
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x00E8 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bOverrideScalar : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetParticleSysParam" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetParticleSysParam::pClassPointer = NULL;

// Class Engine.FailedConnect
// 0x0030 (0x0084 - 0x0054)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[ 0x4 ];                               		// 0x0054 (0x0030) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.FailedConnect" );

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFailSwitch ( struct FString FailString );
};

UClass* UFailedConnect::pClassPointer = NULL;

// Class Engine.GameRules
// 0x0004 (0x0240 - 0x023C)
class AGameRules : public AInfo
{
public:
	class AGameRules*                                  NextGameRules;                                    		// 0x023C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.GameRules" );

		return pClassPointer;
	};

	void NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	bool PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool HandleRestartGame ( );
	struct FString GetRules ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void AddGameRules ( class AGameRules* GR );
};

UClass* AGameRules::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelReset
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_LevelReset : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_LevelReset" );

		return pClassPointer;
	};

};

UClass* USeqEvent_LevelReset::pClassPointer = NULL;

// Class Engine.SeqEvent_PlayerSpawned
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                       		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_PlayerSpawned" );

		return pClassPointer;
	};

};

UClass* USeqEvent_PlayerSpawned::pClassPointer = NULL;

// Class Engine.UIEvent_SceneDeactivated
// 0x0000 (0x0118 - 0x0118)
class UUIEvent_SceneDeactivated : public UUIEvent_Scene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_SceneDeactivated" );

		return pClassPointer;
	};

};

UClass* UUIEvent_SceneDeactivated::pClassPointer = NULL;

// Class Engine.UIEvent_SceneActivated
// 0x0004 (0x011C - 0x0118)
class UUIEvent_SceneActivated : public UUIEvent_Scene
{
public:
	unsigned long                                      bInitialActivation : 1;                           		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_SceneActivated" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventDeactivated ( );
};

UClass* UUIEvent_SceneActivated::pClassPointer = NULL;

// Class Engine.HeightFog
// 0x0008 (0x0244 - 0x023C)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                        		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0240 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.HeightFog" );

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AHeightFog::pClassPointer = NULL;

// Class Engine.OnlineCommunityContentInterface
// 0x0030 (0x0070 - 0x0040)
class UOnlineCommunityContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadContentListComplete__Delegate;            		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadFriendsContentListComplete__Delegate;     		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUploadContentComplete__Delegate;              		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDownloadContentComplete__Delegate;            		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineCommunityContentInterface" );

		return pClassPointer;
	};

	void RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate );
	bool GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* File, TArray< unsigned char >* Payload );
	void ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded );
	bool DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload );
	void ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile );
	bool UploadContent ( unsigned char PlayerNum, int GameSpecificContentType, TArray< unsigned char >* Payload );
	bool GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void OnReadFriendsContentListComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, TArray< struct FOnlineFriend >* Friends );
	bool GetContentList ( unsigned char PlayerNum, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void OnReadContentListComplete ( unsigned long bWasSuccessful );
	bool ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead );
	void Exit ( );
	bool Init ( );
};

UClass* UOnlineCommunityContentInterface::pClassPointer = NULL;

// Class Engine.OnlineEventsInterface
// 0x0000 (0x0040 - 0x0040)
class UOnlineEventsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.OnlineEventsInterface" );

		return pClassPointer;
	};

	void SaveLog ( );
	void UploadLog ( );
	void EndEvent ( );
	void AddParamString ( struct FString ParamName, struct FString ParamValue );
	void AddParamFloat ( struct FString ParamName, float ParamValue );
	void AddParamInt ( struct FString ParamName, int ParamValue );
	void BeginEvent ( struct FString EventName );
	void EndLog ( );
	void BeginLog ( );
	bool Init ( int MaxNumEvents );
};

UClass* UOnlineEventsInterface::pClassPointer = NULL;

// Class Engine.SeqAct_AssignController
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_AssignController" );

		return pClassPointer;
	};

};

UClass* USeqAct_AssignController::pClassPointer = NULL;

// Class Engine.SeqAct_GiveInventory
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	unsigned long                                      bClearExisting : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_GiveInventory" );

		return pClassPointer;
	};

};

UClass* USeqAct_GiveInventory::pClassPointer = NULL;

// Class Engine.PhysicalMaterialSDD
// 0x0000 (0x0040 - 0x0040)
class UPhysicalMaterialSDD : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.PhysicalMaterialSDD" );

		return pClassPointer;
	};

	unsigned char CastYesNoEither ( int I );
	unsigned char CastWorldFaction ( int I );
	unsigned char CastWitnessingFunctionality ( int I );
	unsigned char CastWeaponImpactClass ( int I );
	unsigned char CastWeaponFiringState ( int I );
	unsigned char CastWeaponClass ( int I );
	unsigned char CastWarningPromptGroup ( int I );
	unsigned char CastVIPAssignmentMethod ( int I );
	unsigned char CastVehicleUICategory ( int I );
	unsigned char CastVehicleTempSetup ( int I );
	unsigned char CastVehicleSpecificationMethod ( int I );
	unsigned char CastVehicleSetupType ( int I );
	unsigned char CastVehiclePositionIndex ( int I );
	unsigned char CastVehicleModelClass ( int I );
	unsigned char CastVehicleInteractionAnimation ( int I );
	unsigned char CastVehicleGear ( int I );
	unsigned char CastVehicleDriveType ( int I );
	unsigned char CastVehicleDistricts ( int I );
	unsigned char CastVehicleDamageVFXState ( int I );
	unsigned char CastVehicleColour ( int I );
	unsigned char CastVehicleBatch ( int I );
	unsigned char CastTutorialType ( int I );
	unsigned char CastTutorialPosition ( int I );
	unsigned char CastTutorialBypassBehaviour ( int I );
	unsigned char CastTTIPlayerAnimType ( int I );
	unsigned char CastTTINPCEndingType ( int I );
	unsigned char CastTrackedActivityUnitConversion ( int I );
	unsigned char CastTrackedActivityOperation ( int I );
	unsigned char CastTrackedActivityFixed ( int I );
	unsigned char CastTimeofDayPeriod ( int I );
	unsigned char CastTimeOfDayAvailability ( int I );
	unsigned char CastTESProjectionInfo ( int I );
	unsigned char CastTaskTargetSpecificationMethod ( int I );
	unsigned char CastTaskTargetGraffiti ( int I );
	unsigned char CastTaskTargetClass ( int I );
	unsigned char CastTaskTargetCategory ( int I );
	unsigned char CastTaskOperationCategory ( int I );
	unsigned char CastTaskObjectiveStage ( int I );
	unsigned char CastTaskMemberRequirement ( int I );
	unsigned char CastTaskItemVisibility ( int I );
	unsigned char CastTaskItemSpecificationMethod ( int I );
	unsigned char CastTaskItemSize ( int I );
	unsigned char CastTaskItemBatch ( int I );
	unsigned char CastTaskItemAnimationType ( int I );
	unsigned char CastSpawnDestroyData ( int I );
	unsigned char CastSpawnConstant ( int I );
	unsigned char CastRCEType ( int I );
	unsigned char CastPvPType ( int I );
	unsigned char CastPvPRule ( int I );
	unsigned char CastPrimitiveType ( int I );
	unsigned char CastPopulation ( int I );
	unsigned char CastPlayerRadarPings ( int I );
	unsigned char CastPedestrianTTIReaction ( int I );
	unsigned char CastPedestrianTempSetup ( int I );
	unsigned char CastPedestrianPaletteType ( int I );
	unsigned char CastPawnHitReactionType ( int I );
	unsigned char CastPawnHitReaction_Vector2D ( int I );
	unsigned char CastPawnHitReaction_SpringList ( int I );
	unsigned char CastPawnHitReaction_Float ( int I );
	unsigned char CastPawnHitReaction_ConstrainedBoneList ( int I );
	unsigned char CastPawnHitReaction_Bool ( int I );
	unsigned char CastPawnHitReaction_BoneRemapTable ( int I );
	unsigned char CastPawnHitReaction_BoneList ( int I );
	unsigned char CastOrganisation ( int I );
	unsigned char CastOpenWorldConstant ( int I );
	unsigned char CastOnFootDeathAnimation ( int I );
	unsigned char CastNPCWorldEvent ( int I );
	unsigned char CastNPCReaction ( int I );
	unsigned char CastNPCEvent ( int I );
	unsigned char CastNPCCategory ( int I );
	unsigned char CastNameQuery ( int I );
	unsigned char CastModifierStatus ( int I );
	unsigned char CastModifierClass ( int I );
	unsigned char CastModifierCategory ( int I );
	unsigned char CastMissionUITrackedValueDisplay ( int I );
	unsigned char CastMissionUITrackedValue ( int I );
	unsigned char CastMissionResultReason ( int I );
	unsigned char CastMissionEnforcerDispatchTypes ( int I );
	unsigned char CastMissionCriminalDispatchTypes ( int I );
	unsigned char CastMedalCategory ( int I );
	unsigned char CastMarketplaceTimeLeft ( int I );
	unsigned char CastMarketplaceSort ( int I );
	unsigned char CastMarketplaceSearch ( int I );
	unsigned char CastMarketplaceListType ( int I );
	unsigned char CastMarketplaceInfo ( int I );
	unsigned char CastMarketplaceDuration ( int I );
	unsigned char CastMarketplaceConstant ( int I );
	unsigned char CastMarketplaceCashType ( int I );
	unsigned char CastMarketplaceAuctionType ( int I );
	unsigned char CastMailSort ( int I );
	unsigned char CastMailInfo ( int I );
	unsigned char CastMailDuration ( int I );
	unsigned char CastMailDetach ( int I );
	unsigned char CastMailConstant ( int I );
	unsigned char CastLocaleTypePriority ( int I );
	unsigned char CastLoadingScreenHintDomain ( int I );
	unsigned char CastLoadingMovieTransitionType ( int I );
	unsigned char CastLoadingMovieTip ( int I );
	unsigned char CastLeagueScope ( int I );
	unsigned char CastLeagueRewardType ( int I );
	unsigned char CastLeaguePeriod ( int I );
	unsigned char CastLeagueParticipants ( int I );
	unsigned char CastLeagueEntity ( int I );
	unsigned char CastLeagueCycle ( int I );
	unsigned char CastLeagueActivity ( int I );
	unsigned char CastInventoryItemSubCategory ( int I );
	unsigned char CastInventoryItemCategoryLimited ( int I );
	unsigned char CastInventoryItemCategory ( int I );
	unsigned char CastInteractiveActorType ( int I );
	unsigned char CastInteractiveActorCategory ( int I );
	unsigned char CastHUDZoneNotifier ( int I );
	unsigned char CastHUDWSCharInfo ( int I );
	unsigned char CastHUDReticule ( int I );
	unsigned char CastHUDPopUpItemRule ( int I );
	unsigned char CastHUDMessageType ( int I );
	unsigned char CastHUDMessageRank ( int I );
	unsigned char CastHUDMarkerUsage ( int I );
	unsigned char CastHUDMarkerState ( int I );
	unsigned char CastHUDMarkerCategory ( int I );
	unsigned char CastHUDInfoBrowser ( int I );
	unsigned char CastHudGroupState ( int I );
	unsigned char CastHUDConstantBool ( int I );
	unsigned char CastHUDConstant ( int I );
	unsigned char CastHUDCeremonyMsgType ( int I );
	unsigned char CastHostingConfigFileType ( int I );
	unsigned char CastHostingConfigFileCharacterPersistentId ( int I );
	unsigned char CastHostingConfigFileAccountPersistentId ( int I );
	unsigned char CastHostingConfigFile ( int I );
	unsigned char CastHeatFunctionality ( int I );
	unsigned char CastHeatConstant ( int I );
	unsigned char CastH2HAttackDir ( int I );
	unsigned char CastGraffitiInteractionType ( int I );
	unsigned char CastGenericVFXEvent ( int I );
	unsigned char CastGameplayVehicleHealthRange ( int I );
	unsigned char CastGameplayState ( int I );
	unsigned char CastGameplayObjectFixed ( int I );
	unsigned char CastGameplayEventMutuallyExclusiveGroup ( int I );
	unsigned char CastGameplayEventCategory ( int I );
	unsigned char CastGameplayEvent_VehicleHealth ( int I );
	unsigned char CastFXMaterialImpact ( int I );
	unsigned char CastFireOffset ( int I );
	unsigned char CastFeedbackMessage ( int I );
	unsigned char CastFaction ( int I );
	unsigned char CastFacialHairRandomGeneration ( int I );
	unsigned char CastErrorCode ( int I );
	unsigned char CastEncumbrance ( int I );
	unsigned char CastDistrictTypeInfo ( int I );
	unsigned char CastDistrictFirstEntry ( int I );
	unsigned char CastDisplayPointType ( int I );
	unsigned char CastDisplayPointActivationType ( int I );
	unsigned char CastDirection ( int I );
	unsigned char CastDifficultyRating ( int I );
	unsigned char CastDesignerConstant ( int I );
	unsigned char CastDeployedUsableArray ( int I );
	unsigned char CastCustomisedAssetPriority ( int I );
	unsigned char CastCSAType ( int I );
	unsigned char CastCSAState ( int I );
	unsigned char CastCSALineCheckType ( int I );
	unsigned char CastCSAInputType ( int I );
	unsigned char CastCSAEndPoint ( int I );
	unsigned char CastCSAAutoRouteType ( int I );
	unsigned char CastCSAAnimType ( int I );
	unsigned char CastCSAAnimEvent ( int I );
	unsigned char CastCSAAlignmentType ( int I );
	unsigned char CastCSA_IATState ( int I );
	unsigned char CastCrimeType ( int I );
	unsigned char CastCrimeTargetZone ( int I );
	unsigned char CastCrimeTargetType ( int I );
	unsigned char CastCrimeTargetEnvironmental ( int I );
	unsigned char CastCrimeTargetCategory ( int I );
	unsigned char CastContextSensitiveActionBase ( int I );
	unsigned char CastContactType ( int I );
	unsigned char CastClanRank ( int I );
	unsigned char CastChatState ( int I );
	unsigned char CastChatConstant ( int I );
	unsigned char CastCharacterVOIPStatus ( int I );
	unsigned char CastCharacterStatus ( int I );
	unsigned char CastCameraShakePresetExported ( int I );
	unsigned char CastCameraMode ( int I );
	unsigned char CastCameraConstant ( int I );
	unsigned char CastAPBViewportType ( int I );
	unsigned char CastAPBPawnConstant ( int I );
	unsigned char CastActivityMessageScope ( int I );
	unsigned char CastActivityMessageRelevance ( int I );
	unsigned char CastActivityMessageParameterConversion ( int I );
	unsigned char CastActivityMessageLocation ( int I );
	unsigned char CastActivityMessageExclude ( int I );
};

UClass* UPhysicalMaterialSDD::pClassPointer = NULL;

// Class Engine.SeqEvent_PickupStatusChange
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_PickupStatusChange" );

		return pClassPointer;
	};

};

UClass* USeqEvent_PickupStatusChange::pClassPointer = NULL;

// Class Engine.RB_BSJointActor
// 0x0000 (0x0258 - 0x0258)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_BSJointActor" );

		return pClassPointer;
	};

};

UClass* ARB_BSJointActor::pClassPointer = NULL;

// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x0258 - 0x0258)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_ConstraintActorSpawnable" );

		return pClassPointer;
	};

};

UClass* ARB_ConstraintActorSpawnable::pClassPointer = NULL;

// Class Engine.RB_HingeActor
// 0x0000 (0x0258 - 0x0258)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_HingeActor" );

		return pClassPointer;
	};

};

UClass* ARB_HingeActor::pClassPointer = NULL;

// Class Engine.RB_PrismaticActor
// 0x0000 (0x0258 - 0x0258)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_PrismaticActor" );

		return pClassPointer;
	};

};

UClass* ARB_PrismaticActor::pClassPointer = NULL;

// Class Engine.RB_PulleyJointActor
// 0x0000 (0x0258 - 0x0258)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.RB_PulleyJointActor" );

		return pClassPointer;
	};

};

UClass* ARB_PulleyJointActor::pClassPointer = NULL;

// Class Engine.ScriptConsoleEntry
// 0x000C (0x0484 - 0x0478)
class UScriptConsoleEntry : public UUIPanel
{
public:
	class UUIEditBox*                                  InputBox;                                         		// 0x0478 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UUIImage*                                    UpperConsoleBorder;                               		// 0x047C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UUIImage*                                    LowerConsoleBorder;                               		// 0x0480 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.ScriptConsoleEntry" );

		return pClassPointer;
	};

	void OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer );
	void SetValue ( struct FString NewValue );
	void eventPostInitialize ( );
	void eventInitialized ( );
};

UClass* UScriptConsoleEntry::pClassPointer = NULL;

// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_AIAbortMoveToActor" );

		return pClassPointer;
	};

};

UClass* USeqAct_AIAbortMoveToActor::pClassPointer = NULL;

// Class Engine.SeqAct_ControlMovieTexture
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_ControlMovieTexture" );

		return pClassPointer;
	};

	void eventActivated ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* USeqAct_ControlMovieTexture::pClassPointer = NULL;

// Class Engine.SeqAct_SetSkeletalMesh
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetSkeletalMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetSkeletalMesh" );

		return pClassPointer;
	};

};

UClass* USeqAct_SetSkeletalMesh::pClassPointer = NULL;

// Class Engine.SeqAct_SetVector
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                     		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_SetVector" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetVector::pClassPointer = NULL;

// Class Engine.SeqAct_UpdateDynamicCover
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_UpdateDynamicCover : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqAct_UpdateDynamicCover" );

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_UpdateDynamicCover::pClassPointer = NULL;

// Class Engine.SeqEvent_LOS
// 0x000C (0x010C - 0x0100)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                             		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TriggerDistance;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SeqEvent_LOS" );

		return pClassPointer;
	};

};

UClass* USeqEvent_LOS::pClassPointer = NULL;

// Class Engine.UISettingsClient
// 0x0000 (0x0040 - 0x0040)
class UUISettingsClient : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UISettingsClient" );

		return pClassPointer;
	};

};

UClass* UUISettingsClient::pClassPointer = NULL;

// Class Engine.SessionSettingsProvider_GameInfo
// 0x0000 (0x0088 - 0x0088)
class USessionSettingsProvider_GameInfo : public USessionSettingsProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SessionSettingsProvider_GameInfo" );

		return pClassPointer;
	};

};

UClass* USessionSettingsProvider_GameInfo::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x025C - 0x025C)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.SkeletalMeshActorMATSpawnable" );

		return pClassPointer;
	};

};

UClass* ASkeletalMeshActorMATSpawnable::pClassPointer = NULL;

// Class Engine.TargetPoint
// 0x0000 (0x023C - 0x023C)
class ATargetPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TargetPoint" );

		return pClassPointer;
	};

};

UClass* ATargetPoint::pClassPointer = NULL;

// Class Engine.Trigger_Dynamic
// 0x0000 (0x0248 - 0x0248)
class ATrigger_Dynamic : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Trigger_Dynamic" );

		return pClassPointer;
	};

};

UClass* ATrigger_Dynamic::pClassPointer = NULL;

// Class Engine.Trigger_LOS
// 0x0000 (0x0248 - 0x0248)
class ATrigger_LOS : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.Trigger_LOS" );

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* ATrigger_LOS::pClassPointer = NULL;

// Class Engine.TriggeredPath
// 0x0008 (0x033C - 0x0334)
class ATriggeredPath : public ANavigationPoint
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0334 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      MyTrigger;                                        		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TriggeredPath" );

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ATriggeredPath::pClassPointer = NULL;

// Class Engine.TriggerStreamingLevel
// 0x000C (0x0254 - 0x0248)
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray< struct FLevelStreamingData >               Levels;                                           		// 0x0248 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.TriggerStreamingLevel" );

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATriggerStreamingLevel::pClassPointer = NULL;

// Class Engine.UIAction_TabControl
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_TabControl : public UUIAction
{
public:
	class UUITabControl*                               TabControl;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_TabControl" );

		return pClassPointer;
	};

};

UClass* UUIAction_TabControl::pClassPointer = NULL;

// Class Engine.UIAction_ActivatePage
// 0x0008 (0x00FC - 0x00F4)
class UUIAction_ActivatePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToActivate;                                   		// 0x00F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bActivate : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ActivatePage" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_ActivatePage::pClassPointer = NULL;

// Class Engine.UIAction_ApplyScrolling
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_ApplyScrolling : public UUIAction
{
public:
	unsigned char                                      ScrollOrientation;                                		// 0x00F0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIncreaseScroll : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFullPage : 1;                                    		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ApplyScrolling" );

		return pClassPointer;
	};

};

UClass* UUIAction_ApplyScrolling::pClassPointer = NULL;

// Class Engine.UIAction_EnablePage
// 0x0008 (0x00FC - 0x00F4)
class UUIAction_EnablePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToEnable;                                     		// 0x00F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnable : 1;                                      		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_EnablePage" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_EnablePage::pClassPointer = NULL;

// Class Engine.UIAction_GetPageReference
// 0x0008 (0x00FC - 0x00F4)
class UUIAction_GetPageReference : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageReference;                                    		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                PageIndex;                                        		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetPageReference" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_GetPageReference::pClassPointer = NULL;

// Class Engine.UIAction_FindPageByCaption
// 0x0010 (0x010C - 0x00FC)
class UUIAction_FindPageByCaption : public UUIAction_GetPageReference
{
public:
	struct FString                                     SearchCaption;                                    		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bMarkupString : 1;                                		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_FindPageByCaption" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_FindPageByCaption::pClassPointer = NULL;

// Class Engine.UIAction_FindPageByIndex
// 0x0004 (0x0100 - 0x00FC)
class UUIAction_FindPageByIndex : public UUIAction_GetPageReference
{
public:
	int                                                SearchIndex;                                      		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_FindPageByIndex" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_FindPageByIndex::pClassPointer = NULL;

// Class Engine.UIAction_GetActivePage
// 0x0000 (0x00FC - 0x00FC)
class UUIAction_GetActivePage : public UUIAction_GetPageReference
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetActivePage" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_GetActivePage::pClassPointer = NULL;

// Class Engine.UIAction_GetPageCount
// 0x0000 (0x00F4 - 0x00F4)
class UUIAction_GetPageCount : public UUIAction_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetPageCount" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_GetPageCount::pClassPointer = NULL;

// Class Engine.UIAction_GetProgressBarValue
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_GetProgressBarValue : public UUIAction_GetValue
{
public:
	float                                              Value;                                            		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPercentageValue : 1;                             		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_GetProgressBarValue" );

		return pClassPointer;
	};

};

UClass* UUIAction_GetProgressBarValue::pClassPointer = NULL;

// Class Engine.UIAction_InsertPage
// 0x0014 (0x0108 - 0x00F4)
class UUIAction_InsertPage : public UUIAction_TabControl
{
public:
	class UClass*                                      TabPageClass;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InsertIndex;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFocusPage : 1;                                   		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UUITabPage*                                  PageToInsert;                                     		// 0x0100 (0x0004) [0x0000000000000000]              
	class UUITabPage*                                  PagePrefab;                                       		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_InsertPage" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_InsertPage::pClassPointer = NULL;

// Class Engine.UIAction_PlaySound
// 0x0000 (0x0154 - 0x0154)
class UUIAction_PlaySound : public USeqAct_PlaySound
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_PlaySound" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UUIAction_PlaySound::pClassPointer = NULL;

// Class Engine.UIAction_RemovePage
// 0x0004 (0x00F8 - 0x00F4)
class UUIAction_RemovePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToRemove;                                     		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_RemovePage" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_RemovePage::pClassPointer = NULL;

// Class Engine.UIAction_ReplacePage
// 0x0014 (0x0108 - 0x00F4)
class UUIAction_ReplacePage : public UUIAction_TabControl
{
public:
	class UClass*                                      TabPageClass;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UUITabPage*                                  PageToRemove;                                     		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFocusPage : 1;                                   		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UUITabPage*                                  PageToInsert;                                     		// 0x0100 (0x0004) [0x0000000000000000]              
	class UUITabPage*                                  PagePrefab;                                       		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_ReplacePage" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UUIAction_ReplacePage::pClassPointer = NULL;

// Class Engine.UIAction_SetBoolValue
// 0x0004 (0x00F4 - 0x00F0)
class UUIAction_SetBoolValue : public UUIAction_SetValue
{
public:
	unsigned long                                      bNewValue : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetBoolValue" );

		return pClassPointer;
	};

};

UClass* UUIAction_SetBoolValue::pClassPointer = NULL;

// Class Engine.UIAction_SetListIndex
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_SetListIndex : public UUIAction_SetValue
{
public:
	int                                                NewIndex;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClampInvalidValues : 1;                          		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActivateListChangeEvent : 1;                     		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetListIndex" );

		return pClassPointer;
	};

};

UClass* UUIAction_SetListIndex::pClassPointer = NULL;

// Class Engine.UIAction_SetProgressBarValue
// 0x0008 (0x00F8 - 0x00F0)
class UUIAction_SetProgressBarValue : public UUIAction_SetValue
{
public:
	float                                              NewValue;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPercentageValue : 1;                             		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIAction_SetProgressBarValue" );

		return pClassPointer;
	};

};

UClass* UUIAction_SetProgressBarValue::pClassPointer = NULL;

// Class Engine.UICond_SwitchWidget
// 0x0000 (0x00E0 - 0x00E0)
class UUICond_SwitchWidget : public USeqCond_SwitchObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UICond_SwitchWidget" );

		return pClassPointer;
	};

	bool eventIsValidLevelSequenceObject ( );
};

UClass* UUICond_SwitchWidget::pClassPointer = NULL;

// Class Engine.UIEvent_TabPageActivated
// 0x0000 (0x011C - 0x011C)
class UUIEvent_TabPageActivated : public UUIEvent_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_TabPageActivated" );

		return pClassPointer;
	};

};

UClass* UUIEvent_TabPageActivated::pClassPointer = NULL;

// Class Engine.UIEvent_TabPageEnabled
// 0x0000 (0x011C - 0x011C)
class UUIEvent_TabPageEnabled : public UUIEvent_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_TabPageEnabled" );

		return pClassPointer;
	};

};

UClass* UUIEvent_TabPageEnabled::pClassPointer = NULL;

// Class Engine.UIEvent_TabPageInserted
// 0x0004 (0x0120 - 0x011C)
class UUIEvent_TabPageInserted : public UUIEvent_TabControl
{
public:
	int                                                InsertedIndex;                                    		// 0x011C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_TabPageInserted" );

		return pClassPointer;
	};

};

UClass* UUIEvent_TabPageInserted::pClassPointer = NULL;

// Class Engine.UIEvent_TabPageRemoved
// 0x0000 (0x011C - 0x011C)
class UUIEvent_TabPageRemoved : public UUIEvent_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIEvent_TabPageRemoved" );

		return pClassPointer;
	};

};

UClass* UUIEvent_TabPageRemoved::pClassPointer = NULL;

// Class Engine.UIGameInfoSummary
// 0x004C (0x00C8 - 0x007C)
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassName;                                        		// 0x007C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameAcronym;                                      		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MapPrefix;                                        		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bIsTeamGame : 1;                                  		// 0x00A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00A0 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	struct FString                                     GameSettingsClassName;                            		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameName;                                         		// 0x00B0 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00BC (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIGameInfoSummary" );

		return pClassPointer;
	};

	bool eventIsProviderDisabled ( );
};

UClass* UUIGameInfoSummary::pClassPointer = NULL;

// Class Engine.UIMapSummary
// 0x0030 (0x00AC - 0x007C)
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                          		// 0x007C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ScreenshotPathName;                               		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DisplayName;                                      		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIMapSummary" );

		return pClassPointer;
	};

};

UClass* UUIMapSummary::pClassPointer = NULL;

// Class Engine.UIScriptConsoleScene
// 0x000C (0x02C8 - 0x02BC)
class UUIScriptConsoleScene : public UUIScene
{
public:
	class UUILabel*                                    BufferText;                                       		// 0x02BC (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UUIImage*                                    BufferBackground;                                 		// 0x02C0 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UScriptConsoleEntry*                         CommandRegion;                                    		// 0x02C4 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.UIScriptConsoleScene" );

		return pClassPointer;
	};

	void OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer );
	void eventPostInitialize ( );
	void eventInitialized ( );
};

UClass* UUIScriptConsoleScene::pClassPointer = NULL;

// Class Engine.WaterVolume
// 0x0014 (0x02C8 - 0x02B4)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                       		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitSound;                                        		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      EntryActor;                                       		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ExitActor;                                        		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnEntryActor;                                   		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.WaterVolume" );

		return pClassPointer;
	};

	void PlayExitSplash ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void PlayEntrySplash ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AWaterVolume::pClassPointer = NULL;

// Class Engine.WindDirectionalSource
// 0x0004 (0x0240 - 0x023C)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                        		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class Engine.WindDirectionalSource" );

		return pClassPointer;
	};

};

UClass* AWindDirectionalSource::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif