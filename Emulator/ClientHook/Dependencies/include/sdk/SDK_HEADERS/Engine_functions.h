/*
#############################################################################################
# All Points Bulletin Reloaded (1.6) SDK
# Generated with TheFeckless UE3 SDK Generator v1.2_Beta-Rev.39
# ========================================================================================= #
# File: Engine_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net	
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function Engine.cBlobShadowComponent.RecalcLocalToWorld
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcBlobShadowComponent::RecalcLocalToWorld ( )
{
	static UFunction* pFnRecalcLocalToWorld = NULL;

	if ( ! pFnRecalcLocalToWorld )
		pFnRecalcLocalToWorld = UObject::FindObject< UFunction > ( "Function Engine.cBlobShadowComponent.RecalcLocalToWorld" );

	UcBlobShadowComponent_execRecalcLocalToWorld_Parms RecalcLocalToWorld_Parms;

	pFnRecalcLocalToWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalcLocalToWorld, &RecalcLocalToWorld_Parms, NULL );

	pFnRecalcLocalToWorld->FunctionFlags |= 0x400;
};

// Function Engine.cBlobShadowComponent.SetTranslation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Translation                    ( CPF_Parm )

void UcBlobShadowComponent::SetTranslation ( struct FVector Translation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = UObject::FindObject< UFunction > ( "Function Engine.cBlobShadowComponent.SetTranslation" );

	UcBlobShadowComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.Translation, &Translation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.cBlobShadowComponent.SetScale3D
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Scale3D                        ( CPF_Parm )

void UcBlobShadowComponent::SetScale3D ( struct FVector Scale3D )
{
	static UFunction* pFnSetScale3D = NULL;

	if ( ! pFnSetScale3D )
		pFnSetScale3D = UObject::FindObject< UFunction > ( "Function Engine.cBlobShadowComponent.SetScale3D" );

	UcBlobShadowComponent_execSetScale3D_Parms SetScale3D_Parms;
	memcpy ( &SetScale3D_Parms.Scale3D, &Scale3D, 0xC );

	pFnSetScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale3D, &SetScale3D_Parms, NULL );

	pFnSetScale3D->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.ForceUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTransformOnly                 ( CPF_Parm )

void UActorComponent::ForceUpdate ( unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdate = NULL;

	if ( ! pFnForceUpdate )
		pFnForceUpdate = UObject::FindObject< UFunction > ( "Function Engine.ActorComponent.ForceUpdate" );

	UActorComponent_execForceUpdate_Parms ForceUpdate_Parms;
	ForceUpdate_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdate, &ForceUpdate_Parms, NULL );

	pFnForceUpdate->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetComponentRBFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFixed                         ( CPF_Parm )

void UActorComponent::SetComponentRBFixed ( unsigned long bFixed )
{
	static UFunction* pFnSetComponentRBFixed = NULL;

	if ( ! pFnSetComponentRBFixed )
		pFnSetComponentRBFixed = UObject::FindObject< UFunction > ( "Function Engine.ActorComponent.SetComponentRBFixed" );

	UActorComponent_execSetComponentRBFixed_Parms SetComponentRBFixed_Parms;
	SetComponentRBFixed_Parms.bFixed = bFixed;

	pFnSetComponentRBFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponentRBFixed, &SetComponentRBFixed_Parms, NULL );

	pFnSetComponentRBFixed->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void UActorComponent::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = UObject::FindObject< UFunction > ( "Function Engine.ActorComponent.SetTickGroup" );

	UActorComponent_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.OcclusionChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNowOccluded                   ( CPF_Parm )

void UAudioComponent::eventOcclusionChanged ( unsigned long bNowOccluded )
{
	static UFunction* pFnOcclusionChanged = NULL;

	if ( ! pFnOcclusionChanged )
		pFnOcclusionChanged = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.OcclusionChanged" );

	UAudioComponent_eventOcclusionChanged_Parms OcclusionChanged_Parms;
	OcclusionChanged_Parms.bNowOccluded = bNowOccluded;

	this->ProcessEvent ( pFnOcclusionChanged, &OcclusionChanged_Parms, NULL );
};

// Function Engine.AudioComponent.OnAudioFinished
// [0x00120000] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void UAudioComponent::OnAudioFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnOnAudioFinished = NULL;

	if ( ! pFnOnAudioFinished )
		pFnOnAudioFinished = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.OnAudioFinished" );

	UAudioComponent_execOnAudioFinished_Parms OnAudioFinished_Parms;
	OnAudioFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnOnAudioFinished, &OnAudioFinished_Parms, NULL );
};

// Function Engine.AudioComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.ResetToDefaults" );

	UAudioComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetWaveParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// class USoundNodeWave*          InWave                         ( CPF_Parm )

void UAudioComponent::SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave )
{
	static UFunction* pFnSetWaveParameter = NULL;

	if ( ! pFnSetWaveParameter )
		pFnSetWaveParameter = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.SetWaveParameter" );

	UAudioComponent_execSetWaveParameter_Parms SetWaveParameter_Parms;
	memcpy ( &SetWaveParameter_Parms.InName, &InName, 0x8 );
	SetWaveParameter_Parms.InWave = InWave;

	pFnSetWaveParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWaveParameter, &SetWaveParameter_Parms, NULL );

	pFnSetWaveParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// float                          InFloat                        ( CPF_Parm )

void UAudioComponent::SetFloatParameter ( struct FName InName, float InFloat )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.SetFloatParameter" );

	UAudioComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.InName, &InName, 0x8 );
	SetFloatParameter_Parms.InFloat = InFloat;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.AdjustVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          AdjustVolumeDuration           ( CPF_Parm )
// float                          AdjustVolumeLevel              ( CPF_Parm )

void UAudioComponent::AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel )
{
	static UFunction* pFnAdjustVolume = NULL;

	if ( ! pFnAdjustVolume )
		pFnAdjustVolume = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.AdjustVolume" );

	UAudioComponent_execAdjustVolume_Parms AdjustVolume_Parms;
	AdjustVolume_Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	AdjustVolume_Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	pFnAdjustVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustVolume, &AdjustVolume_Parms, NULL );

	pFnAdjustVolume->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeOut
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeOutDuration                ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeOut ( float FadeOutDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.FadeOut" );

	UAudioComponent_execFadeOut_Parms FadeOut_Parms;
	FadeOut_Parms.FadeOutDuration = FadeOutDuration;
	FadeOut_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );

	pFnFadeOut->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeInDuration                 ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeIn ( float FadeInDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeIn = NULL;

	if ( ! pFnFadeIn )
		pFnFadeIn = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.FadeIn" );

	UAudioComponent_execFadeIn_Parms FadeIn_Parms;
	FadeIn_Parms.FadeInDuration = FadeInDuration;
	FadeIn_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeIn, &FadeIn_Parms, NULL );

	pFnFadeIn->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.IsPlaying
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAudioComponent::IsPlaying ( )
{
	static UFunction* pFnIsPlaying = NULL;

	if ( ! pFnIsPlaying )
		pFnIsPlaying = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.IsPlaying" );

	UAudioComponent_execIsPlaying_Parms IsPlaying_Parms;

	pFnIsPlaying->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlaying, &IsPlaying_Parms, NULL );

	pFnIsPlaying->FunctionFlags |= 0x400;

	return IsPlaying_Parms.ReturnValue;
};

// Function Engine.AudioComponent.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.Stop" );

	UAudioComponent_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.Play
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = UObject::FindObject< UFunction > ( "Function Engine.AudioComponent.Play" );

	UAudioComponent_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.CylinderComponent.SetCylinderSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UCylinderComponent::SetCylinderSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCylinderSize = NULL;

	if ( ! pFnSetCylinderSize )
		pFnSetCylinderSize = UObject::FindObject< UFunction > ( "Function Engine.CylinderComponent.SetCylinderSize" );

	UCylinderComponent_execSetCylinderSize_Parms SetCylinderSize_Parms;
	SetCylinderSize_Parms.NewRadius = NewRadius;
	SetCylinderSize_Parms.NewHeight = NewHeight;

	pFnSetCylinderSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCylinderSize, &SetCylinderSize_Parms, NULL );

	pFnSetCylinderSize->FunctionFlags |= 0x400;
};

// Function Engine.CylinderComponent.UpdateCosmeticCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UCylinderComponent::UpdateCosmeticCollision ( )
{
	static UFunction* pFnUpdateCosmeticCollision = NULL;

	if ( ! pFnUpdateCosmeticCollision )
		pFnUpdateCosmeticCollision = UObject::FindObject< UFunction > ( "Function Engine.CylinderComponent.UpdateCosmeticCollision" );

	UCylinderComponent_execUpdateCosmeticCollision_Parms UpdateCosmeticCollision_Parms;

	pFnUpdateCosmeticCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCosmeticCollision, &UpdateCosmeticCollision_Parms, NULL );

	pFnUpdateCosmeticCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.GetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator UPrimitiveComponent::GetRotation ( )
{
	static UFunction* pFnGetRotation = NULL;

	if ( ! pFnGetRotation )
		pFnGetRotation = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.GetRotation" );

	UPrimitiveComponent_execGetRotation_Parms GetRotation_Parms;

	pFnGetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotation, &GetRotation_Parms, NULL );

	pFnGetRotation->FunctionFlags |= 0x400;

	return GetRotation_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetPosition
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UPrimitiveComponent::GetPosition ( )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.GetPosition" );

	UPrimitiveComponent_execGetPosition_Parms GetPosition_Parms;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetAbsolute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewAbsoluteTranslation         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteRotation            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteScale               ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale )
{
	static UFunction* pFnSetAbsolute = NULL;

	if ( ! pFnSetAbsolute )
		pFnSetAbsolute = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetAbsolute" );

	UPrimitiveComponent_execSetAbsolute_Parms SetAbsolute_Parms;
	SetAbsolute_Parms.NewAbsoluteTranslation = NewAbsoluteTranslation;
	SetAbsolute_Parms.NewAbsoluteRotation = NewAbsoluteRotation;
	SetAbsolute_Parms.NewAbsoluteScale = NewAbsoluteScale;

	pFnSetAbsolute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAbsolute, &SetAbsolute_Parms, NULL );

	pFnSetAbsolute->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale3D
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void UPrimitiveComponent::SetScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetScale3D = NULL;

	if ( ! pFnSetScale3D )
		pFnSetScale3D = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetScale3D" );

	UPrimitiveComponent_execSetScale3D_Parms SetScale3D_Parms;
	memcpy ( &SetScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale3D, &SetScale3D_Parms, NULL );

	pFnSetScale3D->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void UPrimitiveComponent::SetScale ( float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetScale" );

	UPrimitiveComponent_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void UPrimitiveComponent::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRotation" );

	UPrimitiveComponent_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTranslation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPrimitiveComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetTranslation" );

	UPrimitiveComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetActorCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewCollideActors               ( CPF_Parm )
// unsigned long                  NewBlockActors                 ( CPF_Parm )
// unsigned long                  NewAlwaysCheckCollision        ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision )
{
	static UFunction* pFnSetActorCollision = NULL;

	if ( ! pFnSetActorCollision )
		pFnSetActorCollision = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetActorCollision" );

	UPrimitiveComponent_execSetActorCollision_Parms SetActorCollision_Parms;
	SetActorCollision_Parms.NewCollideActors = NewCollideActors;
	SetActorCollision_Parms.NewBlockActors = NewBlockActors;
	SetActorCollision_Parms.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	pFnSetActorCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorCollision, &SetActorCollision_Parms, NULL );

	pFnSetActorCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTraceBlocking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewBlockZeroExtent             ( CPF_Parm )
// unsigned long                  NewBlockNonZeroExtent          ( CPF_Parm )

void UPrimitiveComponent::SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent )
{
	static UFunction* pFnSetTraceBlocking = NULL;

	if ( ! pFnSetTraceBlocking )
		pFnSetTraceBlocking = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetTraceBlocking" );

	UPrimitiveComponent_execSetTraceBlocking_Parms SetTraceBlocking_Parms;
	SetTraceBlocking_Parms.NewBlockZeroExtent = NewBlockZeroExtent;
	SetTraceBlocking_Parms.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	pFnSetTraceBlocking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTraceBlocking, &SetTraceBlocking_Parms, NULL );

	pFnSetTraceBlocking->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewUseViewOwnerDepthPriorityGroup ( CPF_Parm )
// unsigned char                  NewViewOwnerDepthPriorityGroup ( CPF_Parm )

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup )
{
	static UFunction* pFnSetViewOwnerDepthPriorityGroup = NULL;

	if ( ! pFnSetViewOwnerDepthPriorityGroup )
		pFnSetViewOwnerDepthPriorityGroup = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup" );

	UPrimitiveComponent_execSetViewOwnerDepthPriorityGroup_Parms SetViewOwnerDepthPriorityGroup_Parms;
	SetViewOwnerDepthPriorityGroup_Parms.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	SetViewOwnerDepthPriorityGroup_Parms.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewOwnerDepthPriorityGroup, &SetViewOwnerDepthPriorityGroup_Parms, NULL );

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewDepthPriorityGroup          ( CPF_Parm )

void UPrimitiveComponent::SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup )
{
	static UFunction* pFnSetDepthPriorityGroup = NULL;

	if ( ! pFnSetDepthPriorityGroup )
		pFnSetDepthPriorityGroup = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetDepthPriorityGroup" );

	UPrimitiveComponent_execSetDepthPriorityGroup_Parms SetDepthPriorityGroup_Parms;
	SetDepthPriorityGroup_Parms.NewDepthPriorityGroup = NewDepthPriorityGroup;

	pFnSetDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDepthPriorityGroup, &SetDepthPriorityGroup_Parms, NULL );

	pFnSetDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetCastShadow
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewCastShadow                 ( CPF_Parm )

void UPrimitiveComponent::SetCastShadow ( unsigned long bNewCastShadow )
{
	static UFunction* pFnSetCastShadow = NULL;

	if ( ! pFnSetCastShadow )
		pFnSetCastShadow = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetCastShadow" );

	UPrimitiveComponent_execSetCastShadow_Parms SetCastShadow_Parms;
	SetCastShadow_Parms.bNewCastShadow = bNewCastShadow;

	pFnSetCastShadow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCastShadow, &SetCastShadow_Parms, NULL );

	pFnSetCastShadow->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightingChannels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLightingChannelContainer NewLightingChannels            ( CPF_Parm )

void UPrimitiveComponent::SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels )
{
	static UFunction* pFnSetLightingChannels = NULL;

	if ( ! pFnSetLightingChannels )
		pFnSetLightingChannels = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetLightingChannels" );

	UPrimitiveComponent_execSetLightingChannels_Parms SetLightingChannels_Parms;
	memcpy ( &SetLightingChannels_Parms.NewLightingChannels, &NewLightingChannels, 0x4 );

	pFnSetLightingChannels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightingChannels, &SetLightingChannels_Parms, NULL );

	pFnSetLightingChannels->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.RetCullDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UPrimitiveComponent::RetCullDistance ( )
{
	static UFunction* pFnRetCullDistance = NULL;

	if ( ! pFnRetCullDistance )
		pFnRetCullDistance = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.RetCullDistance" );

	UPrimitiveComponent_execRetCullDistance_Parms RetCullDistance_Parms;

	pFnRetCullDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetCullDistance, &RetCullDistance_Parms, NULL );

	pFnRetCullDistance->FunctionFlags |= 0x400;

	return RetCullDistance_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetCullDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewCullDistance                ( CPF_Parm )

void UPrimitiveComponent::SetCullDistance ( float NewCullDistance )
{
	static UFunction* pFnSetCullDistance = NULL;

	if ( ! pFnSetCullDistance )
		pFnSetCullDistance = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetCullDistance" );

	UPrimitiveComponent_execSetCullDistance_Parms SetCullDistance_Parms;
	SetCullDistance_Parms.NewCullDistance = NewCullDistance;

	pFnSetCullDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCullDistance, &SetCullDistance_Parms, NULL );

	pFnSetCullDistance->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightEnvironment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULightEnvironmentComponent* NewLightEnvironment            ( CPF_Parm | CPF_EditInline )

void UPrimitiveComponent::SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment )
{
	static UFunction* pFnSetLightEnvironment = NULL;

	if ( ! pFnSetLightEnvironment )
		pFnSetLightEnvironment = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetLightEnvironment" );

	UPrimitiveComponent_execSetLightEnvironment_Parms SetLightEnvironment_Parms;
	SetLightEnvironment_Parms.NewLightEnvironment = NewLightEnvironment;

	pFnSetLightEnvironment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightEnvironment, &SetLightEnvironment_Parms, NULL );

	pFnSetLightEnvironment->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetShadowParent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     NewShadowParent                ( CPF_Parm | CPF_EditInline )

void UPrimitiveComponent::SetShadowParent ( class UPrimitiveComponent* NewShadowParent )
{
	static UFunction* pFnSetShadowParent = NULL;

	if ( ! pFnSetShadowParent )
		pFnSetShadowParent = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetShadowParent" );

	UPrimitiveComponent_execSetShadowParent_Parms SetShadowParent_Parms;
	SetShadowParent_Parms.NewShadowParent = NewShadowParent;

	pFnSetShadowParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowParent, &SetShadowParent_Parms, NULL );

	pFnSetShadowParent->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewIgnoreOwnerHidden          ( CPF_Parm )

void UPrimitiveComponent::SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden )
{
	static UFunction* pFnSetIgnoreOwnerHidden = NULL;

	if ( ! pFnSetIgnoreOwnerHidden )
		pFnSetIgnoreOwnerHidden = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden" );

	UPrimitiveComponent_execSetIgnoreOwnerHidden_Parms SetIgnoreOwnerHidden_Parms;
	SetIgnoreOwnerHidden_Parms.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	pFnSetIgnoreOwnerHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIgnoreOwnerHidden, &SetIgnoreOwnerHidden_Parms, NULL );

	pFnSetIgnoreOwnerHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void UPrimitiveComponent::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetOnlyOwnerSee" );

	UPrimitiveComponent_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOwnerNoSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOwnerNoSee                 ( CPF_Parm )

void UPrimitiveComponent::SetOwnerNoSee ( unsigned long bNewOwnerNoSee )
{
	static UFunction* pFnSetOwnerNoSee = NULL;

	if ( ! pFnSetOwnerNoSee )
		pFnSetOwnerNoSee = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetOwnerNoSee" );

	UPrimitiveComponent_execSetOwnerNoSee_Parms SetOwnerNoSee_Parms;
	SetOwnerNoSee_Parms.bNewOwnerNoSee = bNewOwnerNoSee;

	pFnSetOwnerNoSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerNoSee, &SetOwnerNoSee_Parms, NULL );

	pFnSetOwnerNoSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewHidden                      ( CPF_Parm )

void UPrimitiveComponent::SetHidden ( unsigned long NewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetHidden" );

	UPrimitiveComponent_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.NewHidden = NewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRigidBodyAwake
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAwake                         ( CPF_Parm )

void UPrimitiveComponent::SetRigidBodyAwake ( unsigned long bAwake )
{
	static UFunction* pFnSetRigidBodyAwake = NULL;

	if ( ! pFnSetRigidBodyAwake )
		pFnSetRigidBodyAwake = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRigidBodyAwake" );

	UPrimitiveComponent_execSetRigidBodyAwake_Parms SetRigidBodyAwake_Parms;
	SetRigidBodyAwake_Parms.bAwake = bAwake;

	pFnSetRigidBodyAwake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRigidBodyAwake, &SetRigidBodyAwake_Parms, NULL );

	pFnSetRigidBodyAwake->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRigidBodyGravityResponse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bGravityResponse               ( CPF_Parm )

void UPrimitiveComponent::SetRigidBodyGravityResponse ( unsigned long bGravityResponse )
{
	static UFunction* pFnSetRigidBodyGravityResponse = NULL;

	if ( ! pFnSetRigidBodyGravityResponse )
		pFnSetRigidBodyGravityResponse = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRigidBodyGravityResponse" );

	UPrimitiveComponent_execSetRigidBodyGravityResponse_Parms SetRigidBodyGravityResponse_Parms;
	SetRigidBodyGravityResponse_Parms.bGravityResponse = bGravityResponse;

	pFnSetRigidBodyGravityResponse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRigidBodyGravityResponse, &SetRigidBodyGravityResponse_Parms, NULL );

	pFnSetRigidBodyGravityResponse->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRigidBodyIsTrigger
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewIsTrigger                  ( CPF_Parm )

void UPrimitiveComponent::SetRigidBodyIsTrigger ( unsigned long bNewIsTrigger )
{
	static UFunction* pFnSetRigidBodyIsTrigger = NULL;

	if ( ! pFnSetRigidBodyIsTrigger )
		pFnSetRigidBodyIsTrigger = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRigidBodyIsTrigger" );

	UPrimitiveComponent_execSetRigidBodyIsTrigger_Parms SetRigidBodyIsTrigger_Parms;
	SetRigidBodyIsTrigger_Parms.bNewIsTrigger = bNewIsTrigger;

	pFnSetRigidBodyIsTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRigidBodyIsTrigger, &SetRigidBodyIsTrigger_Parms, NULL );

	pFnSetRigidBodyIsTrigger->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetAPBCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FsAPBCollision          newAPBCollision                ( CPF_Parm )

void UPrimitiveComponent::SetAPBCollision ( struct FsAPBCollision newAPBCollision )
{
	static UFunction* pFnSetAPBCollision = NULL;

	if ( ! pFnSetAPBCollision )
		pFnSetAPBCollision = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetAPBCollision" );

	UPrimitiveComponent_execSetAPBCollision_Parms SetAPBCollision_Parms;
	memcpy ( &SetAPBCollision_Parms.newAPBCollision, &newAPBCollision, 0x14 );

	pFnSetAPBCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAPBCollision, &SetAPBCollision_Parms, NULL );

	pFnSetAPBCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  InDomGroup                     ( CPF_Parm )

void UPrimitiveComponent::SetRBDominanceGroup ( unsigned char InDomGroup )
{
	static UFunction* pFnSetRBDominanceGroup = NULL;

	if ( ! pFnSetRBDominanceGroup )
		pFnSetRBDominanceGroup = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRBDominanceGroup" );

	UPrimitiveComponent_execSetRBDominanceGroup_Parms SetRBDominanceGroup_Parms;
	SetRBDominanceGroup_Parms.InDomGroup = InDomGroup;

	pFnSetRBDominanceGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBDominanceGroup, &SetRBDominanceGroup_Parms, NULL );

	pFnSetRBDominanceGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.GetRootBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance ( )
{
	static UFunction* pFnGetRootBodyInstance = NULL;

	if ( ! pFnGetRootBodyInstance )
		pFnGetRootBodyInstance = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.GetRootBodyInstance" );

	UPrimitiveComponent_execGetRootBodyInstance_Parms GetRootBodyInstance_Parms;

	pFnGetRootBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRootBodyInstance, &GetRootBodyInstance_Parms, NULL );

	pFnGetRootBodyInstance->FunctionFlags |= 0x400;

	return GetRootBodyInstance_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void UPrimitiveComponent::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetPhysMaterialOverride" );

	UPrimitiveComponent_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.InitRBPhys
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UPrimitiveComponent::InitRBPhys ( )
{
	static UFunction* pFnInitRBPhys = NULL;

	if ( ! pFnInitRBPhys )
		pFnInitRBPhys = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.InitRBPhys" );

	UPrimitiveComponent_execInitRBPhys_Parms InitRBPhys_Parms;

	pFnInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRBPhys, &InitRBPhys_Parms, NULL );

	pFnInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewNotifyRigidBodyCollision   ( CPF_Parm )

void UPrimitiveComponent::SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision )
{
	static UFunction* pFnSetNotifyRigidBodyCollision = NULL;

	if ( ! pFnSetNotifyRigidBodyCollision )
		pFnSetNotifyRigidBodyCollision = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision" );

	UPrimitiveComponent_execSetNotifyRigidBodyCollision_Parms SetNotifyRigidBodyCollision_Parms;
	SetNotifyRigidBodyCollision_Parms.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNotifyRigidBodyCollision, &SetNotifyRigidBodyCollision_Parms, NULL );

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )

void UPrimitiveComponent::SetRBChannel ( unsigned char Channel )
{
	static UFunction* pFnSetRBChannel = NULL;

	if ( ! pFnSetRBChannel )
		pFnSetRBChannel = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRBChannel" );

	UPrimitiveComponent_execSetRBChannel_Parms SetRBChannel_Parms;
	SetRBChannel_Parms.Channel = Channel;

	pFnSetRBChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBChannel, &SetRBChannel_Parms, NULL );

	pFnSetRBChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )
// unsigned long                  bNewCollides                   ( CPF_Parm )

void UPrimitiveComponent::SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides )
{
	static UFunction* pFnSetRBCollidesWithChannel = NULL;

	if ( ! pFnSetRBCollidesWithChannel )
		pFnSetRBCollidesWithChannel = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRBCollidesWithChannel" );

	UPrimitiveComponent_execSetRBCollidesWithChannel_Parms SetRBCollidesWithChannel_Parms;
	SetRBCollidesWithChannel_Parms.Channel = Channel;
	SetRBCollidesWithChannel_Parms.bNewCollides = bNewCollides;

	pFnSetRBCollidesWithChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBCollidesWithChannel, &SetRBCollidesWithChannel_Parms, NULL );

	pFnSetRBCollidesWithChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void UPrimitiveComponent::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetBlockRigidBody" );

	UPrimitiveComponent_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool UPrimitiveComponent::RigidBodyIsAwake ( struct FName BoneName )
{
	static UFunction* pFnRigidBodyIsAwake = NULL;

	if ( ! pFnRigidBodyIsAwake )
		pFnRigidBodyIsAwake = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.RigidBodyIsAwake" );

	UPrimitiveComponent_execRigidBodyIsAwake_Parms RigidBodyIsAwake_Parms;
	memcpy ( &RigidBodyIsAwake_Parms.BoneName, &BoneName, 0x8 );

	pFnRigidBodyIsAwake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRigidBodyIsAwake, &RigidBodyIsAwake_Parms, NULL );

	pFnRigidBodyIsAwake->FunctionFlags |= 0x400;

	return RigidBodyIsAwake_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::PutRigidBodyToSleep ( struct FName BoneName )
{
	static UFunction* pFnPutRigidBodyToSleep = NULL;

	if ( ! pFnPutRigidBodyToSleep )
		pFnPutRigidBodyToSleep = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.PutRigidBodyToSleep" );

	UPrimitiveComponent_execPutRigidBodyToSleep_Parms PutRigidBodyToSleep_Parms;
	memcpy ( &PutRigidBodyToSleep_Parms.BoneName, &BoneName, 0x8 );

	pFnPutRigidBodyToSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPutRigidBodyToSleep, &PutRigidBodyToSleep_Parms, NULL );

	pFnPutRigidBodyToSleep->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.WakeRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::WakeRigidBody ( struct FName BoneName )
{
	static UFunction* pFnWakeRigidBody = NULL;

	if ( ! pFnWakeRigidBody )
		pFnWakeRigidBody = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.WakeRigidBody" );

	UPrimitiveComponent_execWakeRigidBody_Parms WakeRigidBody_Parms;
	memcpy ( &WakeRigidBody_Parms.BoneName, &BoneName, 0x8 );

	pFnWakeRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWakeRigidBody, &WakeRigidBody_Parms, NULL );

	pFnWakeRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                NewRot                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBRotation ( struct FRotator NewRot, struct FName BoneName )
{
	static UFunction* pFnSetRBRotation = NULL;

	if ( ! pFnSetRBRotation )
		pFnSetRBRotation = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRBRotation" );

	UPrimitiveComponent_execSetRBRotation_Parms SetRBRotation_Parms;
	memcpy ( &SetRBRotation_Parms.NewRot, &NewRot, 0xC );
	memcpy ( &SetRBRotation_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBRotation, &SetRBRotation_Parms, NULL );

	pFnSetRBRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewPos                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBPosition ( struct FVector NewPos, struct FName BoneName )
{
	static UFunction* pFnSetRBPosition = NULL;

	if ( ! pFnSetRBPosition )
		pFnSetRBPosition = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRBPosition" );

	UPrimitiveComponent_execSetRBPosition_Parms SetRBPosition_Parms;
	memcpy ( &SetRBPosition_Parms.NewPos, &NewPos, 0xC );
	memcpy ( &SetRBPosition_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBPosition, &SetRBPosition_Parms, NULL );

	pFnSetRBPosition->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewAngVel                      ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBAngularVelocity = NULL;

	if ( ! pFnSetRBAngularVelocity )
		pFnSetRBAngularVelocity = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRBAngularVelocity" );

	UPrimitiveComponent_execSetRBAngularVelocity_Parms SetRBAngularVelocity_Parms;
	memcpy ( &SetRBAngularVelocity_Parms.NewAngVel, &NewAngVel, 0xC );
	SetRBAngularVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBAngularVelocity, &SetRBAngularVelocity_Parms, NULL );

	pFnSetRBAngularVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewVel                         ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBLinearVelocity = NULL;

	if ( ! pFnSetRBLinearVelocity )
		pFnSetRBLinearVelocity = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.SetRBLinearVelocity" );

	UPrimitiveComponent_execSetRBLinearVelocity_Parms SetRBLinearVelocity_Parms;
	memcpy ( &SetRBLinearVelocity_Parms.NewVel, &NewVel, 0xC );
	SetRBLinearVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBLinearVelocity, &SetRBLinearVelocity_Parms, NULL );

	pFnSetRBLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialForce
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )

void UPrimitiveComponent::AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff )
{
	static UFunction* pFnAddRadialForce = NULL;

	if ( ! pFnAddRadialForce )
		pFnAddRadialForce = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.AddRadialForce" );

	UPrimitiveComponent_execAddRadialForce_Parms AddRadialForce_Parms;
	memcpy ( &AddRadialForce_Parms.Origin, &Origin, 0xC );
	AddRadialForce_Parms.Radius = Radius;
	AddRadialForce_Parms.Strength = Strength;
	AddRadialForce_Parms.Falloff = Falloff;

	pFnAddRadialForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialForce, &AddRadialForce_Parms, NULL );

	pFnAddRadialForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddForce
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Force                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName )
{
	static UFunction* pFnAddForce = NULL;

	if ( ! pFnAddForce )
		pFnAddForce = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.AddForce" );

	UPrimitiveComponent_execAddForce_Parms AddForce_Parms;
	memcpy ( &AddForce_Parms.Force, &Force, 0xC );
	memcpy ( &AddForce_Parms.Position, &Position, 0xC );
	memcpy ( &AddForce_Parms.BoneName, &BoneName, 0x8 );

	pFnAddForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddForce, &AddForce_Parms, NULL );

	pFnAddForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialImpulse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange )
{
	static UFunction* pFnAddRadialImpulse = NULL;

	if ( ! pFnAddRadialImpulse )
		pFnAddRadialImpulse = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.AddRadialImpulse" );

	UPrimitiveComponent_execAddRadialImpulse_Parms AddRadialImpulse_Parms;
	memcpy ( &AddRadialImpulse_Parms.Origin, &Origin, 0xC );
	AddRadialImpulse_Parms.Radius = Radius;
	AddRadialImpulse_Parms.Strength = Strength;
	AddRadialImpulse_Parms.Falloff = Falloff;
	AddRadialImpulse_Parms.bVelChange = bVelChange;

	pFnAddRadialImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialImpulse, &AddRadialImpulse_Parms, NULL );

	pFnAddRadialImpulse->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddImpulse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange )
{
	static UFunction* pFnAddImpulse = NULL;

	if ( ! pFnAddImpulse )
		pFnAddImpulse = UObject::FindObject< UFunction > ( "Function Engine.PrimitiveComponent.AddImpulse" );

	UPrimitiveComponent_execAddImpulse_Parms AddImpulse_Parms;
	memcpy ( &AddImpulse_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &AddImpulse_Parms.Position, &Position, 0xC );
	memcpy ( &AddImpulse_Parms.BoneName, &BoneName, 0x8 );
	AddImpulse_Parms.bVelChange = bVelChange;

	pFnAddImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddImpulse, &AddImpulse_Parms, NULL );

	pFnAddImpulse->FunctionFlags |= 0x400;
};

// Function Engine.cVisualFXComponent.CheckComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USequence*               Sequence                       ( CPF_Parm )

void UcVisualFXComponent::CheckComplete ( class USequence* Sequence )
{
	static UFunction* pFnCheckComplete = NULL;

	if ( ! pFnCheckComplete )
		pFnCheckComplete = UObject::FindObject< UFunction > ( "Function Engine.cVisualFXComponent.CheckComplete" );

	UcVisualFXComponent_execCheckComplete_Parms CheckComplete_Parms;
	CheckComplete_Parms.Sequence = Sequence;

	pFnCheckComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckComplete, &CheckComplete_Parms, NULL );

	pFnCheckComplete->FunctionFlags |= 0x400;
};

// Function Engine.cVisualFXComponent.SetVFXActors
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bHasVFX                        ( CPF_Parm )

void UcVisualFXComponent::SetVFXActors ( unsigned long bHasVFX )
{
	static UFunction* pFnSetVFXActors = NULL;

	if ( ! pFnSetVFXActors )
		pFnSetVFXActors = UObject::FindObject< UFunction > ( "Function Engine.cVisualFXComponent.SetVFXActors" );

	UcVisualFXComponent_execSetVFXActors_Parms SetVFXActors_Parms;
	SetVFXActors_Parms.bHasVFX = bHasVFX;

	pFnSetVFXActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVFXActors, &SetVFXActors_Parms, NULL );

	pFnSetVFXActors->FunctionFlags |= 0x400;
};

// Function Engine.LightEnvironmentComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewEnabled                    ( CPF_Parm )

void ULightEnvironmentComponent::SetEnabled ( unsigned long bNewEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function Engine.LightEnvironmentComponent.SetEnabled" );

	ULightEnvironmentComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bNewEnabled = bNewEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceTimeVarying* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceTimeVarying = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceTimeVarying )
		pFnCreateAndSetMaterialInstanceTimeVarying = UObject::FindObject< UFunction > ( "Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying" );

	UMeshComponent_execCreateAndSetMaterialInstanceTimeVarying_Parms CreateAndSetMaterialInstanceTimeVarying_Parms;
	CreateAndSetMaterialInstanceTimeVarying_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceTimeVarying, &CreateAndSetMaterialInstanceTimeVarying_Parms, NULL );

	return CreateAndSetMaterialInstanceTimeVarying_Parms.ReturnValue;
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceConstant = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceConstant )
		pFnCreateAndSetMaterialInstanceConstant = UObject::FindObject< UFunction > ( "Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant" );

	UMeshComponent_execCreateAndSetMaterialInstanceConstant_Parms CreateAndSetMaterialInstanceConstant_Parms;
	CreateAndSetMaterialInstanceConstant_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceConstant, &CreateAndSetMaterialInstanceConstant_Parms, NULL );

	return CreateAndSetMaterialInstanceConstant_Parms.ReturnValue;
};

// Function Engine.MeshComponent.GetNumElements
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UMeshComponent::GetNumElements ( )
{
	static UFunction* pFnGetNumElements = NULL;

	if ( ! pFnGetNumElements )
		pFnGetNumElements = UObject::FindObject< UFunction > ( "Function Engine.MeshComponent.GetNumElements" );

	UMeshComponent_execGetNumElements_Parms GetNumElements_Parms;

	pFnGetNumElements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumElements, &GetNumElements_Parms, NULL );

	pFnGetNumElements->FunctionFlags |= 0x400;

	return GetNumElements_Parms.ReturnValue;
};

// Function Engine.MeshComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ElementIndex                   ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void UMeshComponent::SetMaterial ( int ElementIndex, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = UObject::FindObject< UFunction > ( "Function Engine.MeshComponent.SetMaterial" );

	UMeshComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.ElementIndex = ElementIndex;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInterface* UMeshComponent::GetMaterial ( int ElementIndex )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = UObject::FindObject< UFunction > ( "Function Engine.MeshComponent.GetMaterial" );

	UMeshComponent_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.ElementIndex = ElementIndex;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    OtherSMC                       ( CPF_Parm | CPF_EditInline )
// unsigned long                  bDisabled                      ( CPF_Parm )

void UStaticMeshComponent::DisableRBCollisionWithSMC ( class UStaticMeshComponent* OtherSMC, unsigned long bDisabled )
{
	static UFunction* pFnDisableRBCollisionWithSMC = NULL;

	if ( ! pFnDisableRBCollisionWithSMC )
		pFnDisableRBCollisionWithSMC = UObject::FindObject< UFunction > ( "Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC" );

	UStaticMeshComponent_execDisableRBCollisionWithSMC_Parms DisableRBCollisionWithSMC_Parms;
	DisableRBCollisionWithSMC_Parms.OtherSMC = OtherSMC;
	DisableRBCollisionWithSMC_Parms.bDisabled = bDisabled;

	pFnDisableRBCollisionWithSMC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableRBCollisionWithSMC, &DisableRBCollisionWithSMC_Parms, NULL );

	pFnDisableRBCollisionWithSMC->FunctionFlags |= 0x400;
};

// Function Engine.StaticMeshComponent.SetStaticMesh
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             NewMesh                        ( CPF_Parm )

bool UStaticMeshComponent::SetStaticMesh ( class UStaticMesh* NewMesh )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = UObject::FindObject< UFunction > ( "Function Engine.StaticMeshComponent.SetStaticMesh" );

	UStaticMeshComponent_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;

	pFnSetStaticMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );

	pFnSetStaticMesh->FunctionFlags |= 0x400;

	return SetStaticMesh_Parms.ReturnValue;
};

// Function Engine.Engine.AddOverlayWrapped
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// float                          WrapWidth                      ( CPF_Parm )

void UEngine::AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth )
{
	static UFunction* pFnAddOverlayWrapped = NULL;

	if ( ! pFnAddOverlayWrapped )
		pFnAddOverlayWrapped = UObject::FindObject< UFunction > ( "Function Engine.Engine.AddOverlayWrapped" );

	UEngine_execAddOverlayWrapped_Parms AddOverlayWrapped_Parms;
	AddOverlayWrapped_Parms.Font = Font;
	memcpy ( &AddOverlayWrapped_Parms.Text, &Text, 0xC );
	AddOverlayWrapped_Parms.X = X;
	AddOverlayWrapped_Parms.Y = Y;
	AddOverlayWrapped_Parms.ScaleX = ScaleX;
	AddOverlayWrapped_Parms.ScaleY = ScaleY;
	AddOverlayWrapped_Parms.WrapWidth = WrapWidth;

	pFnAddOverlayWrapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlayWrapped, &AddOverlayWrapped_Parms, NULL );

	pFnAddOverlayWrapped->FunctionFlags |= 0x400;
};

// Function Engine.Engine.AddOverlay
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// unsigned long                  bIsCentered                    ( CPF_Parm )

void UEngine::AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered )
{
	static UFunction* pFnAddOverlay = NULL;

	if ( ! pFnAddOverlay )
		pFnAddOverlay = UObject::FindObject< UFunction > ( "Function Engine.Engine.AddOverlay" );

	UEngine_execAddOverlay_Parms AddOverlay_Parms;
	AddOverlay_Parms.Font = Font;
	memcpy ( &AddOverlay_Parms.Text, &Text, 0xC );
	AddOverlay_Parms.X = X;
	AddOverlay_Parms.Y = Y;
	AddOverlay_Parms.ScaleX = ScaleX;
	AddOverlay_Parms.ScaleY = ScaleY;
	AddOverlay_Parms.bIsCentered = bIsCentered;

	pFnAddOverlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlay, &AddOverlay_Parms, NULL );

	pFnAddOverlay->FunctionFlags |= 0x400;
};

// Function Engine.Engine.GetGEngine
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UEngine*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UEngine* UEngine::GetGEngine ( )
{
	static UFunction* pFnGetGEngine = NULL;

	if ( ! pFnGetGEngine )
		pFnGetGEngine = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetGEngine" );

	UEngine_execGetGEngine_Parms GetGEngine_Parms;

	pFnGetGEngine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGEngine, &GetGEngine_Parms, NULL );

	pFnGetGEngine->FunctionFlags |= 0x400;

	return GetGEngine_Parms.ReturnValue;
};

// Function Engine.Engine.RemoveAllOverlays
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UEngine::RemoveAllOverlays ( )
{
	static UFunction* pFnRemoveAllOverlays = NULL;

	if ( ! pFnRemoveAllOverlays )
		pFnRemoveAllOverlays = UObject::FindObject< UFunction > ( "Function Engine.Engine.RemoveAllOverlays" );

	UEngine_execRemoveAllOverlays_Parms RemoveAllOverlays_Parms;

	pFnRemoveAllOverlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllOverlays, &RemoveAllOverlays_Parms, NULL );

	pFnRemoveAllOverlays->FunctionFlags |= 0x400;
};

// Function Engine.Engine.StopMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bDelayStopUntilGameHasRendered ( CPF_Parm )

void UEngine::StopMovie ( unsigned long bDelayStopUntilGameHasRendered )
{
	static UFunction* pFnStopMovie = NULL;

	if ( ! pFnStopMovie )
		pFnStopMovie = UObject::FindObject< UFunction > ( "Function Engine.Engine.StopMovie" );

	UEngine_execStopMovie_Parms StopMovie_Parms;
	StopMovie_Parms.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	pFnStopMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMovie, &StopMovie_Parms, NULL );

	pFnStopMovie->FunctionFlags |= 0x400;
};

// Function Engine.Engine.PlayLoadMapMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::PlayLoadMapMovie ( )
{
	static UFunction* pFnPlayLoadMapMovie = NULL;

	if ( ! pFnPlayLoadMapMovie )
		pFnPlayLoadMapMovie = UObject::FindObject< UFunction > ( "Function Engine.Engine.PlayLoadMapMovie" );

	UEngine_execPlayLoadMapMovie_Parms PlayLoadMapMovie_Parms;

	pFnPlayLoadMapMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayLoadMapMovie, &PlayLoadMapMovie_Parms, NULL );

	pFnPlayLoadMapMovie->FunctionFlags |= 0x400;

	return PlayLoadMapMovie_Parms.ReturnValue;
};

// Function Engine.Engine.GetLastMovieName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngine::GetLastMovieName ( )
{
	static UFunction* pFnGetLastMovieName = NULL;

	if ( ! pFnGetLastMovieName )
		pFnGetLastMovieName = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetLastMovieName" );

	UEngine_execGetLastMovieName_Parms GetLastMovieName_Parms;

	pFnGetLastMovieName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastMovieName, &GetLastMovieName_Parms, NULL );

	pFnGetLastMovieName->FunctionFlags |= 0x400;

	return GetLastMovieName_Parms.ReturnValue;
};

// Function Engine.Engine.GetAudioDevice
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioDevice*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAudioDevice* UEngine::GetAudioDevice ( )
{
	static UFunction* pFnGetAudioDevice = NULL;

	if ( ! pFnGetAudioDevice )
		pFnGetAudioDevice = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetAudioDevice" );

	UEngine_execGetAudioDevice_Parms GetAudioDevice_Parms;

	pFnGetAudioDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAudioDevice, &GetAudioDevice_Parms, NULL );

	pFnGetAudioDevice->FunctionFlags |= 0x400;

	return GetAudioDevice_Parms.ReturnValue;
};

// Function Engine.Engine.IsSplitScreen
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsSplitScreen ( )
{
	static UFunction* pFnIsSplitScreen = NULL;

	if ( ! pFnIsSplitScreen )
		pFnIsSplitScreen = UObject::FindObject< UFunction > ( "Function Engine.Engine.IsSplitScreen" );

	UEngine_execIsSplitScreen_Parms IsSplitScreen_Parms;

	pFnIsSplitScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSplitScreen, &IsSplitScreen_Parms, NULL );

	pFnIsSplitScreen->FunctionFlags |= 0x400;

	return IsSplitScreen_Parms.ReturnValue;
};

// Function Engine.Engine.GetAdditionalFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AdditionalFontIndex            ( CPF_Parm )

class UFont* UEngine::GetAdditionalFont ( int AdditionalFontIndex )
{
	static UFunction* pFnGetAdditionalFont = NULL;

	if ( ! pFnGetAdditionalFont )
		pFnGetAdditionalFont = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetAdditionalFont" );

	UEngine_execGetAdditionalFont_Parms GetAdditionalFont_Parms;
	GetAdditionalFont_Parms.AdditionalFontIndex = AdditionalFontIndex;

	pFnGetAdditionalFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdditionalFont, &GetAdditionalFont_Parms, NULL );

	pFnGetAdditionalFont->FunctionFlags |= 0x400;

	return GetAdditionalFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetLargeFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetLargeFont ( )
{
	static UFunction* pFnGetLargeFont = NULL;

	if ( ! pFnGetLargeFont )
		pFnGetLargeFont = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetLargeFont" );

	UEngine_execGetLargeFont_Parms GetLargeFont_Parms;

	pFnGetLargeFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLargeFont, &GetLargeFont_Parms, NULL );

	pFnGetLargeFont->FunctionFlags |= 0x400;

	return GetLargeFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetMediumFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetMediumFont ( )
{
	static UFunction* pFnGetMediumFont = NULL;

	if ( ! pFnGetMediumFont )
		pFnGetMediumFont = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetMediumFont" );

	UEngine_execGetMediumFont_Parms GetMediumFont_Parms;

	pFnGetMediumFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMediumFont, &GetMediumFont_Parms, NULL );

	pFnGetMediumFont->FunctionFlags |= 0x400;

	return GetMediumFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetSmallFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetSmallFont ( )
{
	static UFunction* pFnGetSmallFont = NULL;

	if ( ! pFnGetSmallFont )
		pFnGetSmallFont = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetSmallFont" );

	UEngine_execGetSmallFont_Parms GetSmallFont_Parms;

	pFnGetSmallFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSmallFont, &GetSmallFont_Parms, NULL );

	pFnGetSmallFont->FunctionFlags |= 0x400;

	return GetSmallFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetTinyFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetTinyFont ( )
{
	static UFunction* pFnGetTinyFont = NULL;

	if ( ! pFnGetTinyFont )
		pFnGetTinyFont = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetTinyFont" );

	UEngine_execGetTinyFont_Parms GetTinyFont_Parms;

	pFnGetTinyFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTinyFont, &GetTinyFont_Parms, NULL );

	pFnGetTinyFont->FunctionFlags |= 0x400;

	return GetTinyFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetCurrentWorldInfo
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* UEngine::GetCurrentWorldInfo ( )
{
	static UFunction* pFnGetCurrentWorldInfo = NULL;

	if ( ! pFnGetCurrentWorldInfo )
		pFnGetCurrentWorldInfo = UObject::FindObject< UFunction > ( "Function Engine.Engine.GetCurrentWorldInfo" );

	UEngine_execGetCurrentWorldInfo_Parms GetCurrentWorldInfo_Parms;

	pFnGetCurrentWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentWorldInfo, &GetCurrentWorldInfo_Parms, NULL );

	pFnGetCurrentWorldInfo->FunctionFlags |= 0x400;

	return GetCurrentWorldInfo_Parms.ReturnValue;
};

// Function Engine.Engine.ReportScriptVersion
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UEngine::eventReportScriptVersion ( )
{
	static UFunction* pFnReportScriptVersion = NULL;

	if ( ! pFnReportScriptVersion )
		pFnReportScriptVersion = UObject::FindObject< UFunction > ( "Function Engine.Engine.ReportScriptVersion" );

	UEngine_eventReportScriptVersion_Parms ReportScriptVersion_Parms;

	this->ProcessEvent ( pFnReportScriptVersion, &ReportScriptVersion_Parms, NULL );
};

// Function Engine.Engine.OnBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UEngine::eventOnBeginPlay ( )
{
	static UFunction* pFnOnBeginPlay = NULL;

	if ( ! pFnOnBeginPlay )
		pFnOnBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Engine.OnBeginPlay" );

	UEngine_eventOnBeginPlay_Parms OnBeginPlay_Parms;

	this->ProcessEvent ( pFnOnBeginPlay, &OnBeginPlay_Parms, NULL );
};

// Function Engine.Engine.OnWorldCleanup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UEngine::OnWorldCleanup ( )
{
	static UFunction* pFnOnWorldCleanup = NULL;

	if ( ! pFnOnWorldCleanup )
		pFnOnWorldCleanup = UObject::FindObject< UFunction > ( "Function Engine.Engine.OnWorldCleanup" );

	UEngine_execOnWorldCleanup_Parms OnWorldCleanup_Parms;

	pFnOnWorldCleanup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnWorldCleanup, &OnWorldCleanup_Parms, NULL );

	pFnOnWorldCleanup->FunctionFlags |= 0x400;
};

// Function Engine.Engine.OnConnectFailed
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            nError                         ( CPF_Parm )

void UEngine::eventOnConnectFailed ( int nError )
{
	static UFunction* pFnOnConnectFailed = NULL;

	if ( ! pFnOnConnectFailed )
		pFnOnConnectFailed = UObject::FindObject< UFunction > ( "Function Engine.Engine.OnConnectFailed" );

	UEngine_eventOnConnectFailed_Parms OnConnectFailed_Parms;
	OnConnectFailed_Parms.nError = nError;

	this->ProcessEvent ( pFnOnConnectFailed, &OnConnectFailed_Parms, NULL );
};

// Function Engine.Engine.OnConnectSuccess
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UEngine::eventOnConnectSuccess ( )
{
	static UFunction* pFnOnConnectSuccess = NULL;

	if ( ! pFnOnConnectSuccess )
		pFnOnConnectSuccess = UObject::FindObject< UFunction > ( "Function Engine.Engine.OnConnectSuccess" );

	UEngine_eventOnConnectSuccess_Parms OnConnectSuccess_Parms;

	this->ProcessEvent ( pFnOnConnectSuccess, &OnConnectSuccess_Parms, NULL );
};

// Function Engine.GameEngine.GetOnlineSubsystem
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UOnlineSubsystem*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineSubsystem* UGameEngine::GetOnlineSubsystem ( )
{
	static UFunction* pFnGetOnlineSubsystem = NULL;

	if ( ! pFnGetOnlineSubsystem )
		pFnGetOnlineSubsystem = UObject::FindObject< UFunction > ( "Function Engine.GameEngine.GetOnlineSubsystem" );

	UGameEngine_execGetOnlineSubsystem_Parms GetOnlineSubsystem_Parms;

	pFnGetOnlineSubsystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOnlineSubsystem, &GetOnlineSubsystem_Parms, NULL );

	pFnGetOnlineSubsystem->FunctionFlags |= 0x400;

	return GetOnlineSubsystem_Parms.ReturnValue;
};

// Function Engine.Actor.SourceActorAllowCameraBlockingTest
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::SourceActorAllowCameraBlockingTest ( )
{
	static UFunction* pFnSourceActorAllowCameraBlockingTest = NULL;

	if ( ! pFnSourceActorAllowCameraBlockingTest )
		pFnSourceActorAllowCameraBlockingTest = UObject::FindObject< UFunction > ( "Function Engine.Actor.SourceActorAllowCameraBlockingTest" );

	AActor_execSourceActorAllowCameraBlockingTest_Parms SourceActorAllowCameraBlockingTest_Parms;

	pFnSourceActorAllowCameraBlockingTest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSourceActorAllowCameraBlockingTest, &SourceActorAllowCameraBlockingTest_Parms, NULL );

	pFnSourceActorAllowCameraBlockingTest->FunctionFlags |= 0x400;

	return SourceActorAllowCameraBlockingTest_Parms.ReturnValue;
};

// Function Engine.Actor.DEBUGBREAKPOINT2
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AActor::DEBUGBREAKPOINT2 ( )
{
	static UFunction* pFnDEBUGBREAKPOINT2 = NULL;

	if ( ! pFnDEBUGBREAKPOINT2 )
		pFnDEBUGBREAKPOINT2 = UObject::FindObject< UFunction > ( "Function Engine.Actor.DEBUGBREAKPOINT2" );

	AActor_execDEBUGBREAKPOINT2_Parms DEBUGBREAKPOINT2_Parms;

	pFnDEBUGBREAKPOINT2->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDEBUGBREAKPOINT2, &DEBUGBREAKPOINT2_Parms, NULL );

	pFnDEBUGBREAKPOINT2->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DEBUGBREAKPOINT
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AActor::DEBUGBREAKPOINT ( )
{
	static UFunction* pFnDEBUGBREAKPOINT = NULL;

	if ( ! pFnDEBUGBREAKPOINT )
		pFnDEBUGBREAKPOINT = UObject::FindObject< UFunction > ( "Function Engine.Actor.DEBUGBREAKPOINT" );

	AActor_execDEBUGBREAKPOINT_Parms DEBUGBREAKPOINT_Parms;

	pFnDEBUGBREAKPOINT->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDEBUGBREAKPOINT, &DEBUGBREAKPOINT_Parms, NULL );

	pFnDEBUGBREAKPOINT->FunctionFlags |= 0x400;
};

// Function Engine.Actor.OnRigidBodySpringOverextension
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class URB_BodyInstance*        BodyInstance                   ( CPF_Parm )

void AActor::eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance )
{
	static UFunction* pFnOnRigidBodySpringOverextension = NULL;

	if ( ! pFnOnRigidBodySpringOverextension )
		pFnOnRigidBodySpringOverextension = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnRigidBodySpringOverextension" );

	AActor_eventOnRigidBodySpringOverextension_Parms OnRigidBodySpringOverextension_Parms;
	OnRigidBodySpringOverextension_Parms.BodyInstance = BodyInstance;

	this->ProcessEvent ( pFnOnRigidBodySpringOverextension, &OnRigidBodySpringOverextension_Parms, NULL );
};

// Function Engine.Actor.GetPackageGuid
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FGuid                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PackageName                    ( CPF_Parm )

struct FGuid AActor::GetPackageGuid ( struct FName PackageName )
{
	static UFunction* pFnGetPackageGuid = NULL;

	if ( ! pFnGetPackageGuid )
		pFnGetPackageGuid = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetPackageGuid" );

	AActor_execGetPackageGuid_Parms GetPackageGuid_Parms;
	memcpy ( &GetPackageGuid_Parms.PackageName, &PackageName, 0x8 );

	pFnGetPackageGuid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPackageGuid, &GetPackageGuid_Parms, NULL );

	pFnGetPackageGuid->FunctionFlags |= 0x400;

	return GetPackageGuid_Parms.ReturnValue;
};

// Function Engine.Actor.PostInitAnimTree
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function Engine.Actor.PostInitAnimTree" );

	AActor_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.Actor.RootMotionExtracted
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )
// struct FBoneAtom               ExtractedRootMotionDelta       ( CPF_Parm | CPF_OutParm )

void AActor::eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta )
{
	static UFunction* pFnRootMotionExtracted = NULL;

	if ( ! pFnRootMotionExtracted )
		pFnRootMotionExtracted = UObject::FindObject< UFunction > ( "Function Engine.Actor.RootMotionExtracted" );

	AActor_eventRootMotionExtracted_Parms RootMotionExtracted_Parms;
	RootMotionExtracted_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionExtracted, &RootMotionExtracted_Parms, NULL );

	if ( ExtractedRootMotionDelta )
		memcpy ( ExtractedRootMotionDelta, &RootMotionExtracted_Parms.ExtractedRootMotionDelta, 0x30 );
};

// Function Engine.Actor.RootMotionModeChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnRootMotionModeChanged = NULL;

	if ( ! pFnRootMotionModeChanged )
		pFnRootMotionModeChanged = UObject::FindObject< UFunction > ( "Function Engine.Actor.RootMotionModeChanged" );

	AActor_eventRootMotionModeChanged_Parms RootMotionModeChanged_Parms;
	RootMotionModeChanged_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionModeChanged, &RootMotionModeChanged_Parms, NULL );
};

// Function Engine.Actor.PostRenderFor
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = UObject::FindObject< UFunction > ( "Function Engine.Actor.PostRenderFor" );

	AActor_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function Engine.Actor.NativePostRenderFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnNativePostRenderFor = NULL;

	if ( ! pFnNativePostRenderFor )
		pFnNativePostRenderFor = UObject::FindObject< UFunction > ( "Function Engine.Actor.NativePostRenderFor" );

	AActor_execNativePostRenderFor_Parms NativePostRenderFor_Parms;
	NativePostRenderFor_Parms.PC = PC;
	NativePostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &NativePostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &NativePostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	pFnNativePostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostRenderFor, &NativePostRenderFor_Parms, NULL );

	pFnNativePostRenderFor->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHUDLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewHUDLocation                 ( CPF_Parm )

void AActor::SetHUDLocation ( struct FVector NewHUDLocation )
{
	static UFunction* pFnSetHUDLocation = NULL;

	if ( ! pFnSetHUDLocation )
		pFnSetHUDLocation = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetHUDLocation" );

	AActor_execSetHUDLocation_Parms SetHUDLocation_Parms;
	memcpy ( &SetHUDLocation_Parms.NewHUDLocation, &NewHUDLocation, 0xC );

	pFnSetHUDLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHUDLocation, &SetHUDLocation_Parms, NULL );

	pFnSetHUDLocation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.OnRanOver
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ASVehicle*               Vehicle                        ( CPF_Parm )
// class UPrimitiveComponent*     RunOverComponent               ( CPF_Parm | CPF_EditInline )
// int                            WheelIndex                     ( CPF_Parm )

void AActor::eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex )
{
	static UFunction* pFnOnRanOver = NULL;

	if ( ! pFnOnRanOver )
		pFnOnRanOver = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnRanOver" );

	AActor_eventOnRanOver_Parms OnRanOver_Parms;
	OnRanOver_Parms.Vehicle = Vehicle;
	OnRanOver_Parms.RunOverComponent = RunOverComponent;
	OnRanOver_Parms.WheelIndex = WheelIndex;

	this->ProcessEvent ( pFnOnRanOver, &OnRanOver_Parms, NULL );
};

// Function Engine.Actor.RigidBodyCollision
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AActor::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = UObject::FindObject< UFunction > ( "Function Engine.Actor.RigidBodyCollision" );

	AActor_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function Engine.Actor.InterpolationChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = UObject::FindObject< UFunction > ( "Function Engine.Actor.InterpolationChanged" );

	AActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.Actor.InterpolationFinished
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = UObject::FindObject< UFunction > ( "Function Engine.Actor.InterpolationFinished" );

	AActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Actor.InterpolationStarted
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = UObject::FindObject< UFunction > ( "Function Engine.Actor.InterpolationStarted" );

	AActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Actor.PickedUpBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AActor::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = UObject::FindObject< UFunction > ( "Function Engine.Actor.PickedUpBy" );

	AActor_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.Actor.SpawnedByKismet
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = UObject::FindObject< UFunction > ( "Function Engine.Actor.SpawnedByKismet" );

	AActor_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Actor.GetTargetLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AActor::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetTargetLocation" );

	AActor_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.FindGoodEndView
// [0x00420102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FRotator                GoodRotation                   ( CPF_Parm | CPF_OutParm )

void AActor::FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation )
{
	static UFunction* pFnFindGoodEndView = NULL;

	if ( ! pFnFindGoodEndView )
		pFnFindGoodEndView = UObject::FindObject< UFunction > ( "Function Engine.Actor.FindGoodEndView" );

	AActor_execFindGoodEndView_Parms FindGoodEndView_Parms;
	FindGoodEndView_Parms.PC = PC;

	this->ProcessEvent ( pFnFindGoodEndView, &FindGoodEndView_Parms, NULL );

	if ( GoodRotation )
		memcpy ( GoodRotation, &FindGoodEndView_Parms.GoodRotation, 0xC );
};

// Function Engine.Actor.NotifyLocalPlayerTeamReceived
// [0x00020100] 
// Parameters infos:

void AActor::NotifyLocalPlayerTeamReceived ( )
{
	static UFunction* pFnNotifyLocalPlayerTeamReceived = NULL;

	if ( ! pFnNotifyLocalPlayerTeamReceived )
		pFnNotifyLocalPlayerTeamReceived = UObject::FindObject< UFunction > ( "Function Engine.Actor.NotifyLocalPlayerTeamReceived" );

	AActor_execNotifyLocalPlayerTeamReceived_Parms NotifyLocalPlayerTeamReceived_Parms;

	this->ProcessEvent ( pFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Parms, NULL );
};

// Function Engine.Actor.GetLocationStringFor
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AActor::GetLocationStringFor ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetLocationStringFor = NULL;

	if ( ! pFnGetLocationStringFor )
		pFnGetLocationStringFor = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetLocationStringFor" );

	AActor_execGetLocationStringFor_Parms GetLocationStringFor_Parms;
	GetLocationStringFor_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetLocationStringFor, &GetLocationStringFor_Parms, NULL );

	return GetLocationStringFor_Parms.ReturnValue;
};

// Function Engine.Actor.ScriptGetTeamNum
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::eventScriptGetTeamNum ( )
{
	static UFunction* pFnScriptGetTeamNum = NULL;

	if ( ! pFnScriptGetTeamNum )
		pFnScriptGetTeamNum = UObject::FindObject< UFunction > ( "Function Engine.Actor.ScriptGetTeamNum" );

	AActor_eventScriptGetTeamNum_Parms ScriptGetTeamNum_Parms;

	this->ProcessEvent ( pFnScriptGetTeamNum, &ScriptGetTeamNum_Parms, NULL );

	return ScriptGetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetTeamNum" );

	AActor_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.PawnBaseDied
// [0x00020000] 
// Parameters infos:

void AActor::PawnBaseDied ( )
{
	static UFunction* pFnPawnBaseDied = NULL;

	if ( ! pFnPawnBaseDied )
		pFnPawnBaseDied = UObject::FindObject< UFunction > ( "Function Engine.Actor.PawnBaseDied" );

	AActor_execPawnBaseDied_Parms PawnBaseDied_Parms;

	this->ProcessEvent ( pFnPawnBaseDied, &PawnBaseDied_Parms, NULL );
};

// Function Engine.Actor.IsPlayerOwned
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsPlayerOwned ( )
{
	static UFunction* pFnIsPlayerOwned = NULL;

	if ( ! pFnIsPlayerOwned )
		pFnIsPlayerOwned = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsPlayerOwned" );

	AActor_execIsPlayerOwned_Parms IsPlayerOwned_Parms;

	pFnIsPlayerOwned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerOwned, &IsPlayerOwned_Parms, NULL );

	pFnIsPlayerOwned->FunctionFlags |= 0x400;

	return IsPlayerOwned_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorEyesViewPoint
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AActor::GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetActorEyesViewPoint" );

	AActor_execGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	pFnGetActorEyesViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	pFnGetActorEyesViewPoint->FunctionFlags |= 0x400;

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Actor.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsStationary" );

	AActor_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorFaceFXAsset
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* AActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetActorFaceFXAsset" );

	AActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.Actor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsActorPlayingFaceFXAnim" );

	AActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.SetSkelControlScale
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AActor::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetSkelControlScale" );

	AActor_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Actor.SetMorphWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void AActor::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetMorphWeight" );

	AActor_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Actor.StopActorFaceFXAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.Actor.StopActorFaceFXAnim" );

	AActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.Actor.PlayActorFaceFXAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )

bool AActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.Actor.PlayActorFaceFXAnim" );

	AActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.FinishAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = UObject::FindObject< UFunction > ( "Function Engine.Actor.FinishAnimControl" );

	AActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Actor.SetAnimWeights
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void AActor::eventSetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnSetAnimWeights = NULL;

	if ( ! pFnSetAnimWeights )
		pFnSetAnimWeights = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetAnimWeights" );

	AActor_eventSetAnimWeights_Parms SetAnimWeights_Parms;
	memcpy ( &SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	this->ProcessEvent ( pFnSetAnimWeights, &SetAnimWeights_Parms, NULL );
};

// Function Engine.Actor.SetAnimPosition
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void AActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetAnimPosition" );

	AActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Actor.BeginAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )

void AActor::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = UObject::FindObject< UFunction > ( "Function Engine.Actor.BeginAnimControl" );

	AActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Actor.OnAnimPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void AActor::eventOnAnimPlay ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnAnimPlay" );

	AActor_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.SeqNode = SeqNode;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function Engine.Actor.OnAnimEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void AActor::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnAnimEnd" );

	AActor_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Engine.Actor.OnMakeNoise
// [0x00020102] 
// Parameters infos:
// class USeqAct_MakeNoise*       Action                         ( CPF_Parm )

void AActor::OnMakeNoise ( class USeqAct_MakeNoise* Action )
{
	static UFunction* pFnOnMakeNoise = NULL;

	if ( ! pFnOnMakeNoise )
		pFnOnMakeNoise = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnMakeNoise" );

	AActor_execOnMakeNoise_Parms OnMakeNoise_Parms;
	OnMakeNoise_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMakeNoise, &OnMakeNoise_Parms, NULL );
};

// Function Engine.Actor.DoKismetAttachment
// [0x00820102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = UObject::FindObject< UFunction > ( "Function Engine.Actor.DoKismetAttachment" );

	AActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Actor.OnAttachToActor
// [0x00020102] 
// Parameters infos:
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::OnAttachToActor ( class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnOnAttachToActor = NULL;

	if ( ! pFnOnAttachToActor )
		pFnOnAttachToActor = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnAttachToActor" );

	AActor_execOnAttachToActor_Parms OnAttachToActor_Parms;
	OnAttachToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAttachToActor, &OnAttachToActor_Parms, NULL );
};

// Function Engine.Actor.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AActor::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnToggleHidden" );

	AActor_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Actor.OnChangeCollision
// [0x00020002] 
// Parameters infos:
// class USeqAct_ChangeCollision* Action                         ( CPF_Parm )

void AActor::OnChangeCollision ( class USeqAct_ChangeCollision* Action )
{
	static UFunction* pFnOnChangeCollision = NULL;

	if ( ! pFnOnChangeCollision )
		pFnOnChangeCollision = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnChangeCollision" );

	AActor_execOnChangeCollision_Parms OnChangeCollision_Parms;
	OnChangeCollision_Parms.Action = Action;

	this->ProcessEvent ( pFnOnChangeCollision, &OnChangeCollision_Parms, NULL );
};

// Function Engine.Actor.OnSetPhysics
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetPhysics*      Action                         ( CPF_Parm )

void AActor::OnSetPhysics ( class USeqAct_SetPhysics* Action )
{
	static UFunction* pFnOnSetPhysics = NULL;

	if ( ! pFnOnSetPhysics )
		pFnOnSetPhysics = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnSetPhysics" );

	AActor_execOnSetPhysics_Parms OnSetPhysics_Parms;
	OnSetPhysics_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPhysics, &OnSetPhysics_Parms, NULL );
};

// Function Engine.Actor.OnSetBlockRigidBody
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetBlockRigidBody* Action                         ( CPF_Parm )

void AActor::OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action )
{
	static UFunction* pFnOnSetBlockRigidBody = NULL;

	if ( ! pFnOnSetBlockRigidBody )
		pFnOnSetBlockRigidBody = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnSetBlockRigidBody" );

	AActor_execOnSetBlockRigidBody_Parms OnSetBlockRigidBody_Parms;
	OnSetBlockRigidBody_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetBlockRigidBody, &OnSetBlockRigidBody_Parms, NULL );
};

// Function Engine.Actor.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AActor::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnTeleport" );

	AActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Actor.OnHealDamage
// [0x00020002] 
// Parameters infos:
// class USeqAct_HealDamage*      Action                         ( CPF_Parm )

void AActor::OnHealDamage ( class USeqAct_HealDamage* Action )
{
	static UFunction* pFnOnHealDamage = NULL;

	if ( ! pFnOnHealDamage )
		pFnOnHealDamage = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnHealDamage" );

	AActor_execOnHealDamage_Parms OnHealDamage_Parms;
	OnHealDamage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnHealDamage, &OnHealDamage_Parms, NULL );
};

// Function Engine.Actor.OnCauseDamage
// [0x00020102] 
// Parameters infos:
// class USeqAct_CauseDamage*     Action                         ( CPF_Parm )

void AActor::OnCauseDamage ( class USeqAct_CauseDamage* Action )
{
	static UFunction* pFnOnCauseDamage = NULL;

	if ( ! pFnOnCauseDamage )
		pFnOnCauseDamage = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnCauseDamage" );

	AActor_execOnCauseDamage_Parms OnCauseDamage_Parms;
	OnCauseDamage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnCauseDamage, &OnCauseDamage_Parms, NULL );
};

// Function Engine.Actor.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function Engine.Actor.ShutDown" );

	AActor_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.Actor.SetNetUpdateTime
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewUpdateTime                  ( CPF_Parm )

void AActor::SetNetUpdateTime ( float NewUpdateTime )
{
	static UFunction* pFnSetNetUpdateTime = NULL;

	if ( ! pFnSetNetUpdateTime )
		pFnSetNetUpdateTime = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetNetUpdateTime" );

	AActor_execSetNetUpdateTime_Parms SetNetUpdateTime_Parms;
	SetNetUpdateTime_Parms.NewUpdateTime = NewUpdateTime;

	pFnSetNetUpdateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetUpdateTime, &SetNetUpdateTime_Parms, NULL );

	pFnSetNetUpdateTime->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ForceNetRelevant
// [0x00020002] 
// Parameters infos:

void AActor::ForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = UObject::FindObject< UFunction > ( "Function Engine.Actor.ForceNetRelevant" );

	AActor_execForceNetRelevant_Parms ForceNetRelevant_Parms;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );
};

// Function Engine.Actor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void AActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = UObject::FindObject< UFunction > ( "Function Engine.Actor.OnDestroy" );

	AActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.Actor.ClearLatentAction
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UClass*                  actionClass                    ( CPF_Parm )
// unsigned long                  bAborted                       ( CPF_OptionalParm | CPF_Parm )
// class USeqAct_Latent*          exceptionAction                ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction )
{
	static UFunction* pFnClearLatentAction = NULL;

	if ( ! pFnClearLatentAction )
		pFnClearLatentAction = UObject::FindObject< UFunction > ( "Function Engine.Actor.ClearLatentAction" );

	AActor_execClearLatentAction_Parms ClearLatentAction_Parms;
	ClearLatentAction_Parms.actionClass = actionClass;
	ClearLatentAction_Parms.bAborted = bAborted;
	ClearLatentAction_Parms.exceptionAction = exceptionAction;

	this->ProcessEvent ( pFnClearLatentAction, &ClearLatentAction_Parms, NULL );
};

// Function Engine.Actor.FindEventsOfClass
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EventClass                     ( CPF_Parm )
// unsigned long                  bIncludeDisabled               ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > out_EventList                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList )
{
	static UFunction* pFnFindEventsOfClass = NULL;

	if ( ! pFnFindEventsOfClass )
		pFnFindEventsOfClass = UObject::FindObject< UFunction > ( "Function Engine.Actor.FindEventsOfClass" );

	AActor_execFindEventsOfClass_Parms FindEventsOfClass_Parms;
	FindEventsOfClass_Parms.EventClass = EventClass;
	FindEventsOfClass_Parms.bIncludeDisabled = bIncludeDisabled;

	this->ProcessEvent ( pFnFindEventsOfClass, &FindEventsOfClass_Parms, NULL );

	if ( out_EventList )
		memcpy ( out_EventList, &FindEventsOfClass_Parms.out_EventList, 0xC );

	return FindEventsOfClass_Parms.ReturnValue;
};

// Function Engine.Actor.ActivateEventClass
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InClass                        ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > EventList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class USequenceEvent* > ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents )
{
	static UFunction* pFnActivateEventClass = NULL;

	if ( ! pFnActivateEventClass )
		pFnActivateEventClass = UObject::FindObject< UFunction > ( "Function Engine.Actor.ActivateEventClass" );

	AActor_execActivateEventClass_Parms ActivateEventClass_Parms;
	ActivateEventClass_Parms.InClass = InClass;
	ActivateEventClass_Parms.InInstigator = InInstigator;
	ActivateEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnActivateEventClass, &ActivateEventClass_Parms, NULL );

	if ( EventList )
		memcpy ( EventList, &ActivateEventClass_Parms.EventList, 0xC );

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &ActivateEventClass_Parms.ActivateIndices, 0xC );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &ActivateEventClass_Parms.ActivatedEvents, 0xC );

	return ActivateEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.TriggerEventClass
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// int                            ActivateIndex                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents )
{
	static UFunction* pFnTriggerEventClass = NULL;

	if ( ! pFnTriggerEventClass )
		pFnTriggerEventClass = UObject::FindObject< UFunction > ( "Function Engine.Actor.TriggerEventClass" );

	AActor_execTriggerEventClass_Parms TriggerEventClass_Parms;
	TriggerEventClass_Parms.InEventClass = InEventClass;
	TriggerEventClass_Parms.InInstigator = InInstigator;
	TriggerEventClass_Parms.ActivateIndex = ActivateIndex;
	TriggerEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnTriggerEventClass, &TriggerEventClass_Parms, NULL );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &TriggerEventClass_Parms.ActivatedEvents, 0xC );

	return TriggerEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.APBTriggerEvent
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// TArray< struct FString >       aLinksToActivate               ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< class USequenceVariable* > aVariablesToUpdate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool AActor::APBTriggerEvent ( class UClass* InEventClass, class AActor* InInstigator, TArray< struct FString > aLinksToActivate, TArray< class USequenceVariable* > aVariablesToUpdate, unsigned long bTest )
{
	static UFunction* pFnAPBTriggerEvent = NULL;

	if ( ! pFnAPBTriggerEvent )
		pFnAPBTriggerEvent = UObject::FindObject< UFunction > ( "Function Engine.Actor.APBTriggerEvent" );

	AActor_execAPBTriggerEvent_Parms APBTriggerEvent_Parms;
	APBTriggerEvent_Parms.InEventClass = InEventClass;
	APBTriggerEvent_Parms.InInstigator = InInstigator;
	memcpy ( &APBTriggerEvent_Parms.aLinksToActivate, &aLinksToActivate, 0xC );
	memcpy ( &APBTriggerEvent_Parms.aVariablesToUpdate, &aVariablesToUpdate, 0xC );
	APBTriggerEvent_Parms.bTest = bTest;

	pFnAPBTriggerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAPBTriggerEvent, &APBTriggerEvent_Parms, NULL );

	pFnAPBTriggerEvent->FunctionFlags |= 0x400;

	return APBTriggerEvent_Parms.ReturnValue;
};

// Function Engine.Actor.TimeSince
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Time                           ( CPF_Parm )

float AActor::TimeSince ( float Time )
{
	static UFunction* pFnTimeSince = NULL;

	if ( ! pFnTimeSince )
		pFnTimeSince = UObject::FindObject< UFunction > ( "Function Engine.Actor.TimeSince" );

	AActor_execTimeSince_Parms TimeSince_Parms;
	TimeSince_Parms.Time = Time;

	this->ProcessEvent ( pFnTimeSince, &TimeSince_Parms, NULL );

	return TimeSince_Parms.ReturnValue;
};

// Function Engine.Actor.EffectIsRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = UObject::FindObject< UFunction > ( "Function Engine.Actor.EffectIsRelevant" );

	AActor_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Actor.CheckMaxEffectDistance
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance )
{
	static UFunction* pFnCheckMaxEffectDistance = NULL;

	if ( ! pFnCheckMaxEffectDistance )
		pFnCheckMaxEffectDistance = UObject::FindObject< UFunction > ( "Function Engine.Actor.CheckMaxEffectDistance" );

	AActor_execCheckMaxEffectDistance_Parms CheckMaxEffectDistance_Parms;
	CheckMaxEffectDistance_Parms.P = P;
	memcpy ( &CheckMaxEffectDistance_Parms.SpawnLocation, &SpawnLocation, 0xC );
	CheckMaxEffectDistance_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnCheckMaxEffectDistance, &CheckMaxEffectDistance_Parms, NULL );

	return CheckMaxEffectDistance_Parms.ReturnValue;
};

// Function Engine.Actor.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = UObject::FindObject< UFunction > ( "Function Engine.Actor.CanSplash" );

	AActor_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Actor.PlayTeleportEffect
// [0x00020000] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void AActor::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = UObject::FindObject< UFunction > ( "Function Engine.Actor.PlayTeleportEffect" );

	AActor_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Actor.IsInPain
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsInPain ( )
{
	static UFunction* pFnIsInPain = NULL;

	if ( ! pFnIsInPain )
		pFnIsInPain = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsInPain" );

	AActor_execIsInPain_Parms IsInPain_Parms;

	this->ProcessEvent ( pFnIsInPain, &IsInPain_Parms, NULL );

	return IsInPain_Parms.ReturnValue;
};

// Function Engine.Actor.IsInVolume
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVolume*                 aVolume                        ( CPF_Parm )

bool AActor::IsInVolume ( class AVolume* aVolume )
{
	static UFunction* pFnIsInVolume = NULL;

	if ( ! pFnIsInVolume )
		pFnIsInVolume = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsInVolume" );

	AActor_execIsInVolume_Parms IsInVolume_Parms;
	IsInVolume_Parms.aVolume = aVolume;

	this->ProcessEvent ( pFnIsInVolume, &IsInVolume_Parms, NULL );

	return IsInVolume_Parms.ReturnValue;
};

// Function Engine.Actor.Reset
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.Actor.Reset" );

	AActor_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Actor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* AActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetFaceFXAudioComponent" );

	AActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.ModifyHearSoundComponent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void AActor::eventModifyHearSoundComponent ( class UAudioComponent* AC )
{
	static UFunction* pFnModifyHearSoundComponent = NULL;

	if ( ! pFnModifyHearSoundComponent )
		pFnModifyHearSoundComponent = UObject::FindObject< UFunction > ( "Function Engine.Actor.ModifyHearSoundComponent" );

	AActor_eventModifyHearSoundComponent_Parms ModifyHearSoundComponent_Parms;
	ModifyHearSoundComponent_Parms.AC = AC;

	this->ProcessEvent ( pFnModifyHearSoundComponent, &ModifyHearSoundComponent_Parms, NULL );
};

// Function Engine.Actor.GetPhysicsName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetPhysicsName ( )
{
	static UFunction* pFnGetPhysicsName = NULL;

	if ( ! pFnGetPhysicsName )
		pFnGetPhysicsName = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetPhysicsName" );

	AActor_execGetPhysicsName_Parms GetPhysicsName_Parms;

	this->ProcessEvent ( pFnGetPhysicsName, &GetPhysicsName_Parms, NULL );

	return GetPhysicsName_Parms.ReturnValue;
};

// Function Engine.Actor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.Actor.DisplayDebug" );

	AActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Actor.GetDebugName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetDebugName ( )
{
	static UFunction* pFnGetDebugName = NULL;

	if ( ! pFnGetDebugName )
		pFnGetDebugName = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetDebugName" );

	AActor_execGetDebugName_Parms GetDebugName_Parms;

	this->ProcessEvent ( pFnGetDebugName, &GetDebugName_Parms, NULL );

	return GetDebugName_Parms.ReturnValue;
};

// Function Engine.Actor.SetGRI
// [0x00020000] 
// Parameters infos:
// class AGameReplicationInfo*    GRI                            ( CPF_Parm )

void AActor::SetGRI ( class AGameReplicationInfo* GRI )
{
	static UFunction* pFnSetGRI = NULL;

	if ( ! pFnSetGRI )
		pFnSetGRI = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetGRI" );

	AActor_execSetGRI_Parms SetGRI_Parms;
	SetGRI_Parms.GRI = GRI;

	this->ProcessEvent ( pFnSetGRI, &SetGRI_Parms, NULL );
};

// Function Engine.Actor.MatchStarting
// [0x00020000] 
// Parameters infos:

void AActor::MatchStarting ( )
{
	static UFunction* pFnMatchStarting = NULL;

	if ( ! pFnMatchStarting )
		pFnMatchStarting = UObject::FindObject< UFunction > ( "Function Engine.Actor.MatchStarting" );

	AActor_execMatchStarting_Parms MatchStarting_Parms;

	this->ProcessEvent ( pFnMatchStarting, &MatchStarting_Parms, NULL );
};

// Function Engine.Actor.GetLocalString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetLocalString" );

	AActor_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Actor.ReplaceText
// [0x00422002] 
// Parameters infos:
// struct FString                 Replace                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 With                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AActor::ReplaceText ( struct FString Replace, struct FString With, struct FString* Text )
{
	static UFunction* pFnReplaceText = NULL;

	if ( ! pFnReplaceText )
		pFnReplaceText = UObject::FindObject< UFunction > ( "Function Engine.Actor.ReplaceText" );

	AActor_execReplaceText_Parms ReplaceText_Parms;
	memcpy ( &ReplaceText_Parms.Replace, &Replace, 0xC );
	memcpy ( &ReplaceText_Parms.With, &With, 0xC );

	this->ProcessEvent ( pFnReplaceText, &ReplaceText_Parms, NULL );

	if ( Text )
		memcpy ( Text, &ReplaceText_Parms.Text, 0xC );
};

// Function Engine.Actor.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetHumanReadableName" );

	AActor_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Actor.GetItemName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 FullName                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString AActor::GetItemName ( struct FString FullName )
{
	static UFunction* pFnGetItemName = NULL;

	if ( ! pFnGetItemName )
		pFnGetItemName = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetItemName" );

	AActor_execGetItemName_Parms GetItemName_Parms;
	memcpy ( &GetItemName_Parms.FullName, &FullName, 0xC );

	this->ProcessEvent ( pFnGetItemName, &GetItemName_Parms, NULL );

	return GetItemName_Parms.ReturnValue;
};

// Function Engine.Actor.CalcCamera
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool AActor::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = UObject::FindObject< UFunction > ( "Function Engine.Actor.CalcCamera" );

	AActor_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	pFnCalcCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	pFnCalcCamera->FunctionFlags |= 0x400;

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.Actor.CheckForErrors
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = UObject::FindObject< UFunction > ( "Function Engine.Actor.CheckForErrors" );

	AActor_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.Actor.DebugFreezeGame
// [0x00020002] 
// Parameters infos:

void AActor::DebugFreezeGame ( )
{
	static UFunction* pFnDebugFreezeGame = NULL;

	if ( ! pFnDebugFreezeGame )
		pFnDebugFreezeGame = UObject::FindObject< UFunction > ( "Function Engine.Actor.DebugFreezeGame" );

	AActor_execDebugFreezeGame_Parms DebugFreezeGame_Parms;

	this->ProcessEvent ( pFnDebugFreezeGame, &DebugFreezeGame_Parms, NULL );
};

// Function Engine.Actor.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetGravityZ" );

	AActor_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.Actor.CheckHitInfo
// [0x00C20903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     FallBackComponent              ( CPF_Parm | CPF_EditInline )
// struct FVector                 Dir                            ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitLocation                ( CPF_Parm | CPF_OutParm )

void AActor::eventCheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation )
{
	static UFunction* pFnCheckHitInfo = NULL;

	if ( ! pFnCheckHitInfo )
		pFnCheckHitInfo = UObject::FindObject< UFunction > ( "Function Engine.Actor.CheckHitInfo" );

	AActor_eventCheckHitInfo_Parms CheckHitInfo_Parms;
	CheckHitInfo_Parms.FallBackComponent = FallBackComponent;
	memcpy ( &CheckHitInfo_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnCheckHitInfo, &CheckHitInfo_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &CheckHitInfo_Parms.HitInfo, 0x1C );

	if ( out_HitLocation )
		memcpy ( out_HitLocation, &CheckHitInfo_Parms.out_HitLocation, 0xC );
};

// Function Engine.Actor.TakeRadiusDamage
// [0x00820102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function Engine.Actor.TakeRadiusDamage" );

	AActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Actor.HealDamage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool AActor::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = UObject::FindObject< UFunction > ( "Function Engine.Actor.HealDamage" );

	AActor_execHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Actor.KilledBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void AActor::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = UObject::FindObject< UFunction > ( "Function Engine.Actor.KilledBy" );

	AActor_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Actor.HurtRadius
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AActor::HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = UObject::FindObject< UFunction > ( "Function Engine.Actor.HurtRadius" );

	AActor_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.BaseDamage = BaseDamage;
	HurtRadius_Parms.DamageRadius = DamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Actor.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool AActor::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = UObject::FindObject< UFunction > ( "Function Engine.Actor.StopsProjectile" );

	AActor_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Actor.NotifySkelControlBeyondLimit
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkelControlLookAt*      LookAt                         ( CPF_Parm )

void AActor::eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt )
{
	static UFunction* pFnNotifySkelControlBeyondLimit = NULL;

	if ( ! pFnNotifySkelControlBeyondLimit )
		pFnNotifySkelControlBeyondLimit = UObject::FindObject< UFunction > ( "Function Engine.Actor.NotifySkelControlBeyondLimit" );

	AActor_eventNotifySkelControlBeyondLimit_Parms NotifySkelControlBeyondLimit_Parms;
	NotifySkelControlBeyondLimit_Parms.LookAt = LookAt;

	this->ProcessEvent ( pFnNotifySkelControlBeyondLimit, &NotifySkelControlBeyondLimit_Parms, NULL );
};

// Function Engine.Actor.ConstraintBrokenNotify
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ConOwner                       ( CPF_Parm )
// class URB_ConstraintSetup*     ConSetup                       ( CPF_Parm )
// class URB_ConstraintInstance*  ConInstance                    ( CPF_Parm )

void AActor::eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance )
{
	static UFunction* pFnConstraintBrokenNotify = NULL;

	if ( ! pFnConstraintBrokenNotify )
		pFnConstraintBrokenNotify = UObject::FindObject< UFunction > ( "Function Engine.Actor.ConstraintBrokenNotify" );

	AActor_eventConstraintBrokenNotify_Parms ConstraintBrokenNotify_Parms;
	ConstraintBrokenNotify_Parms.ConOwner = ConOwner;
	ConstraintBrokenNotify_Parms.ConSetup = ConSetup;
	ConstraintBrokenNotify_Parms.ConInstance = ConInstance;

	this->ProcessEvent ( pFnConstraintBrokenNotify, &ConstraintBrokenNotify_Parms, NULL );
};

// Function Engine.Actor.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetInitialState" );

	AActor_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.Actor.PostBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Actor.PostBeginPlay" );

	AActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedTeamMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeamMessage = NULL;

	if ( ! pFnBroadcastLocalizedTeamMessage )
		pFnBroadcastLocalizedTeamMessage = UObject::FindObject< UFunction > ( "Function Engine.Actor.BroadcastLocalizedTeamMessage" );

	AActor_eventBroadcastLocalizedTeamMessage_Parms BroadcastLocalizedTeamMessage_Parms;
	BroadcastLocalizedTeamMessage_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeamMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedTeamMessage_Parms.Switch = Switch;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeamMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeamMessage, &BroadcastLocalizedTeamMessage_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedMessage = NULL;

	if ( ! pFnBroadcastLocalizedMessage )
		pFnBroadcastLocalizedMessage = UObject::FindObject< UFunction > ( "Function Engine.Actor.BroadcastLocalizedMessage" );

	AActor_eventBroadcastLocalizedMessage_Parms BroadcastLocalizedMessage_Parms;
	BroadcastLocalizedMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedMessage_Parms.Switch = Switch;
	BroadcastLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedMessage, &BroadcastLocalizedMessage_Parms, NULL );
};

// Function Engine.Actor.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Actor.PreBeginPlay" );

	AActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Actor.FindActorsOfClass
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ActorClass                     ( CPF_Parm )
// TArray< class AActor* >        out_Actors                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors )
{
	static UFunction* pFnFindActorsOfClass = NULL;

	if ( ! pFnFindActorsOfClass )
		pFnFindActorsOfClass = UObject::FindObject< UFunction > ( "Function Engine.Actor.FindActorsOfClass" );

	AActor_execFindActorsOfClass_Parms FindActorsOfClass_Parms;
	FindActorsOfClass_Parms.ActorClass = ActorClass;

	this->ProcessEvent ( pFnFindActorsOfClass, &FindActorsOfClass_Parms, NULL );

	if ( out_Actors )
		memcpy ( out_Actors, &FindActorsOfClass_Parms.out_Actors, 0xC );

	return FindActorsOfClass_Parms.ReturnValue;
};

// Function Engine.Actor.LocalPlayerControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm | CPF_OutParm )

void AActor::LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC )
{
	static UFunction* pFnLocalPlayerControllers = NULL;

	if ( ! pFnLocalPlayerControllers )
		pFnLocalPlayerControllers = UObject::FindObject< UFunction > ( "Function Engine.Actor.LocalPlayerControllers" );

	AActor_execLocalPlayerControllers_Parms LocalPlayerControllers_Parms;
	LocalPlayerControllers_Parms.BaseClass = BaseClass;

	pFnLocalPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLocalPlayerControllers, &LocalPlayerControllers_Parms, NULL );

	pFnLocalPlayerControllers->FunctionFlags |= 0x400;

	if ( PC )
		*PC = LocalPlayerControllers_Parms.PC;
};

// Function Engine.Actor.AllOwnedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void AActor::AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAllOwnedComponents = NULL;

	if ( ! pFnAllOwnedComponents )
		pFnAllOwnedComponents = UObject::FindObject< UFunction > ( "Function Engine.Actor.AllOwnedComponents" );

	AActor_execAllOwnedComponents_Parms AllOwnedComponents_Parms;
	AllOwnedComponents_Parms.BaseClass = BaseClass;

	pFnAllOwnedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllOwnedComponents, &AllOwnedComponents_Parms, NULL );

	pFnAllOwnedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AllOwnedComponents_Parms.OutComponent;
};

// Function Engine.Actor.ComponentList
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         out_Component                  ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void AActor::ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component )
{
	static UFunction* pFnComponentList = NULL;

	if ( ! pFnComponentList )
		pFnComponentList = UObject::FindObject< UFunction > ( "Function Engine.Actor.ComponentList" );

	AActor_execComponentList_Parms ComponentList_Parms;
	ComponentList_Parms.BaseClass = BaseClass;

	pFnComponentList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComponentList, &ComponentList_Parms, NULL );

	pFnComponentList->FunctionFlags |= 0x400;

	if ( out_Component )
		*out_Component = ComponentList_Parms.out_Component;
};

// Function Engine.Actor.OverlappingActors
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  out_Actor                      ( CPF_Parm | CPF_OutParm )

void AActor::OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor )
{
	static UFunction* pFnOverlappingActors = NULL;

	if ( ! pFnOverlappingActors )
		pFnOverlappingActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.OverlappingActors" );

	AActor_execOverlappingActors_Parms OverlappingActors_Parms;
	OverlappingActors_Parms.BaseClass = BaseClass;
	OverlappingActors_Parms.Radius = Radius;
	memcpy ( &OverlappingActors_Parms.Loc, &Loc, 0xC );
	OverlappingActors_Parms.bIgnoreHidden = bIgnoreHidden;

	pFnOverlappingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverlappingActors, &OverlappingActors_Parms, NULL );

	pFnOverlappingActors->FunctionFlags |= 0x400;

	if ( out_Actor )
		*out_Actor = OverlappingActors_Parms.out_Actor;
};

// Function Engine.Actor.VisibleCollidingActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0138]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** Actor )
{
	static UFunction* pFnVisibleCollidingActors = NULL;

	if ( ! pFnVisibleCollidingActors )
		pFnVisibleCollidingActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.VisibleCollidingActors" );

	AActor_execVisibleCollidingActors_Parms VisibleCollidingActors_Parms;
	VisibleCollidingActors_Parms.BaseClass = BaseClass;
	VisibleCollidingActors_Parms.Radius = Radius;
	memcpy ( &VisibleCollidingActors_Parms.Loc, &Loc, 0xC );
	VisibleCollidingActors_Parms.bIgnoreHidden = bIgnoreHidden;

	unsigned long NativeIndex = pFnVisibleCollidingActors->iNative;
	pFnVisibleCollidingActors->iNative = 0;

	pFnVisibleCollidingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleCollidingActors, &VisibleCollidingActors_Parms, NULL );

	pFnVisibleCollidingActors->FunctionFlags |= 0x400;

	pFnVisibleCollidingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleCollidingActors_Parms.Actor;
};

// Function Engine.Actor.VisibleActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0137]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor )
{
	static UFunction* pFnVisibleActors = NULL;

	if ( ! pFnVisibleActors )
		pFnVisibleActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.VisibleActors" );

	AActor_execVisibleActors_Parms VisibleActors_Parms;
	VisibleActors_Parms.BaseClass = BaseClass;
	VisibleActors_Parms.Radius = Radius;
	memcpy ( &VisibleActors_Parms.Loc, &Loc, 0xC );

	unsigned long NativeIndex = pFnVisibleActors->iNative;
	pFnVisibleActors->iNative = 0;

	pFnVisibleActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleActors, &VisibleActors_Parms, NULL );

	pFnVisibleActors->FunctionFlags |= 0x400;

	pFnVisibleActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleActors_Parms.Actor;
};

// Function Engine.Actor.RadiusActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0136]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::RadiusActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor )
{
	static UFunction* pFnRadiusActors = NULL;

	if ( ! pFnRadiusActors )
		pFnRadiusActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.RadiusActors" );

	AActor_execRadiusActors_Parms RadiusActors_Parms;
	RadiusActors_Parms.BaseClass = BaseClass;
	RadiusActors_Parms.Radius = Radius;
	memcpy ( &RadiusActors_Parms.Loc, &Loc, 0xC );

	unsigned long NativeIndex = pFnRadiusActors->iNative;
	pFnRadiusActors->iNative = 0;

	pFnRadiusActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRadiusActors, &RadiusActors_Parms, NULL );

	pFnRadiusActors->FunctionFlags |= 0x400;

	pFnRadiusActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = RadiusActors_Parms.Actor;
};

// Function Engine.Actor.TraceActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0135]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Start                          ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLoc                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNorm                        ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceActors = NULL;

	if ( ! pFnTraceActors )
		pFnTraceActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.TraceActors" );

	AActor_execTraceActors_Parms TraceActors_Parms;
	TraceActors_Parms.BaseClass = BaseClass;
	memcpy ( &TraceActors_Parms.End, &End, 0xC );
	memcpy ( &TraceActors_Parms.Start, &Start, 0xC );
	memcpy ( &TraceActors_Parms.Extent, &Extent, 0xC );
	TraceActors_Parms.ExtraTraceFlags = ExtraTraceFlags;

	unsigned long NativeIndex = pFnTraceActors->iNative;
	pFnTraceActors->iNative = 0;

	pFnTraceActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceActors, &TraceActors_Parms, NULL );

	pFnTraceActors->FunctionFlags |= 0x400;

	pFnTraceActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TraceActors_Parms.Actor;

	if ( HitLoc )
		memcpy ( HitLoc, &TraceActors_Parms.HitLoc, 0xC );

	if ( HitNorm )
		memcpy ( HitNorm, &TraceActors_Parms.HitNorm, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceActors_Parms.HitInfo, 0x1C );
};

// Function Engine.Actor.TouchingActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0133]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::TouchingActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnTouchingActors = NULL;

	if ( ! pFnTouchingActors )
		pFnTouchingActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.TouchingActors" );

	AActor_execTouchingActors_Parms TouchingActors_Parms;
	TouchingActors_Parms.BaseClass = BaseClass;

	unsigned long NativeIndex = pFnTouchingActors->iNative;
	pFnTouchingActors->iNative = 0;

	pFnTouchingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchingActors, &TouchingActors_Parms, NULL );

	pFnTouchingActors->FunctionFlags |= 0x400;

	pFnTouchingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TouchingActors_Parms.Actor;
};

// Function Engine.Actor.BasedActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0132]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::BasedActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnBasedActors = NULL;

	if ( ! pFnBasedActors )
		pFnBasedActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.BasedActors" );

	AActor_execBasedActors_Parms BasedActors_Parms;
	BasedActors_Parms.BaseClass = BaseClass;

	unsigned long NativeIndex = pFnBasedActors->iNative;
	pFnBasedActors->iNative = 0;

	pFnBasedActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBasedActors, &BasedActors_Parms, NULL );

	pFnBasedActors->FunctionFlags |= 0x400;

	pFnBasedActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = BasedActors_Parms.Actor;
};

// Function Engine.Actor.ChildActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0131]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::ChildActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnChildActors = NULL;

	if ( ! pFnChildActors )
		pFnChildActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.ChildActors" );

	AActor_execChildActors_Parms ChildActors_Parms;
	ChildActors_Parms.BaseClass = BaseClass;

	unsigned long NativeIndex = pFnChildActors->iNative;
	pFnChildActors->iNative = 0;

	pFnChildActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChildActors, &ChildActors_Parms, NULL );

	pFnChildActors->FunctionFlags |= 0x400;

	pFnChildActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = ChildActors_Parms.Actor;
};

// Function Engine.Actor.DynamicActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0139]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::DynamicActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnDynamicActors = NULL;

	if ( ! pFnDynamicActors )
		pFnDynamicActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.DynamicActors" );

	AActor_execDynamicActors_Parms DynamicActors_Parms;
	DynamicActors_Parms.BaseClass = BaseClass;

	unsigned long NativeIndex = pFnDynamicActors->iNative;
	pFnDynamicActors->iNative = 0;

	pFnDynamicActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDynamicActors, &DynamicActors_Parms, NULL );

	pFnDynamicActors->FunctionFlags |= 0x400;

	pFnDynamicActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = DynamicActors_Parms.Actor;
};

// Function Engine.Actor.AllActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0130]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::AllActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnAllActors = NULL;

	if ( ! pFnAllActors )
		pFnAllActors = UObject::FindObject< UFunction > ( "Function Engine.Actor.AllActors" );

	AActor_execAllActors_Parms AllActors_Parms;
	AllActors_Parms.BaseClass = BaseClass;

	unsigned long NativeIndex = pFnAllActors->iNative;
	pFnAllActors->iNative = 0;

	pFnAllActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllActors, &AllActors_Parms, NULL );

	pFnAllActors->FunctionFlags |= 0x400;

	pFnAllActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = AllActors_Parms.Actor;
};

// Function Engine.Actor.GetURLMap
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0223]
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetURLMap ( )
{
	static UFunction* pFnGetURLMap = NULL;

	if ( ! pFnGetURLMap )
		pFnGetURLMap = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetURLMap" );

	AActor_execGetURLMap_Parms GetURLMap_Parms;

	unsigned long NativeIndex = pFnGetURLMap->iNative;
	pFnGetURLMap->iNative = 0;

	pFnGetURLMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetURLMap, &GetURLMap_Parms, NULL );

	pFnGetURLMap->FunctionFlags |= 0x400;

	pFnGetURLMap->iNative = NativeIndex;

	return GetURLMap_Parms.ReturnValue;
};

// Function Engine.Actor.PostTeleport
// [0x00020000] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void AActor::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = UObject::FindObject< UFunction > ( "Function Engine.Actor.PostTeleport" );

	AActor_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.Actor.PreTeleport
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeleporter*             InTeleporter                   ( CPF_Parm )

bool AActor::PreTeleport ( class ATeleporter* InTeleporter )
{
	static UFunction* pFnPreTeleport = NULL;

	if ( ! pFnPreTeleport )
		pFnPreTeleport = UObject::FindObject< UFunction > ( "Function Engine.Actor.PreTeleport" );

	AActor_execPreTeleport_Parms PreTeleport_Parms;
	PreTeleport_Parms.InTeleporter = InTeleporter;

	this->ProcessEvent ( pFnPreTeleport, &PreTeleport_Parms, NULL );

	return PreTeleport_Parms.ReturnValue;
};

// Function Engine.Actor.GetDestination
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

struct FVector AActor::GetDestination ( class AController* C )
{
	static UFunction* pFnGetDestination = NULL;

	if ( ! pFnGetDestination )
		pFnGetDestination = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetDestination" );

	AActor_execGetDestination_Parms GetDestination_Parms;
	GetDestination_Parms.C = C;

	pFnGetDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDestination, &GetDestination_Parms, NULL );

	pFnGetDestination->FunctionFlags |= 0x400;

	return GetDestination_Parms.ReturnValue;
};

// Function Engine.Actor.SuggestTossVelocity
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// float                          TossSpeed                      ( CPF_Parm )
// float                          BaseTossZ                      ( CPF_OptionalParm | CPF_Parm )
// float                          DesiredZPct                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 CollisionSize                  ( CPF_OptionalParm | CPF_Parm )
// float                          TerminalVelocity               ( CPF_OptionalParm | CPF_Parm )
// float                          OverrideGravityZ               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 TossVelocity                   ( CPF_Parm | CPF_OutParm )

bool AActor::SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, struct FVector* TossVelocity )
{
	static UFunction* pFnSuggestTossVelocity = NULL;

	if ( ! pFnSuggestTossVelocity )
		pFnSuggestTossVelocity = UObject::FindObject< UFunction > ( "Function Engine.Actor.SuggestTossVelocity" );

	AActor_execSuggestTossVelocity_Parms SuggestTossVelocity_Parms;
	memcpy ( &SuggestTossVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestTossVelocity_Parms.Start, &Start, 0xC );
	SuggestTossVelocity_Parms.TossSpeed = TossSpeed;
	SuggestTossVelocity_Parms.BaseTossZ = BaseTossZ;
	SuggestTossVelocity_Parms.DesiredZPct = DesiredZPct;
	memcpy ( &SuggestTossVelocity_Parms.CollisionSize, &CollisionSize, 0xC );
	SuggestTossVelocity_Parms.TerminalVelocity = TerminalVelocity;
	SuggestTossVelocity_Parms.OverrideGravityZ = OverrideGravityZ;

	pFnSuggestTossVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestTossVelocity, &SuggestTossVelocity_Parms, NULL );

	pFnSuggestTossVelocity->FunctionFlags |= 0x400;

	if ( TossVelocity )
		memcpy ( TossVelocity, &SuggestTossVelocity_Parms.TossVelocity, 0xC );

	return SuggestTossVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.PlayerCanSeeMe
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0214]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::PlayerCanSeeMe ( )
{
	static UFunction* pFnPlayerCanSeeMe = NULL;

	if ( ! pFnPlayerCanSeeMe )
		pFnPlayerCanSeeMe = UObject::FindObject< UFunction > ( "Function Engine.Actor.PlayerCanSeeMe" );

	AActor_execPlayerCanSeeMe_Parms PlayerCanSeeMe_Parms;

	unsigned long NativeIndex = pFnPlayerCanSeeMe->iNative;
	pFnPlayerCanSeeMe->iNative = 0;

	pFnPlayerCanSeeMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayerCanSeeMe, &PlayerCanSeeMe_Parms, NULL );

	pFnPlayerCanSeeMe->FunctionFlags |= 0x400;

	pFnPlayerCanSeeMe->iNative = NativeIndex;

	return PlayerCanSeeMe_Parms.ReturnValue;
};

// Function Engine.Actor.MakeNoise
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0200]
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void AActor::MakeNoise ( float Loudness, struct FName NoiseType )
{
	static UFunction* pFnMakeNoise = NULL;

	if ( ! pFnMakeNoise )
		pFnMakeNoise = UObject::FindObject< UFunction > ( "Function Engine.Actor.MakeNoise" );

	AActor_execMakeNoise_Parms MakeNoise_Parms;
	MakeNoise_Parms.Loudness = Loudness;
	memcpy ( &MakeNoise_Parms.NoiseType, &NoiseType, 0x8 );

	unsigned long NativeIndex = pFnMakeNoise->iNative;
	pFnMakeNoise->iNative = 0;

	pFnMakeNoise->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeNoise, &MakeNoise_Parms, NULL );

	pFnMakeNoise->FunctionFlags |= 0x400;

	pFnMakeNoise->iNative = NativeIndex;
};

// Function Engine.Actor.PlaySound
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bNotReplicated                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToOwner                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToRelevant               ( CPF_OptionalParm | CPF_Parm )

void AActor::PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = UObject::FindObject< UFunction > ( "Function Engine.Actor.PlaySound" );

	AActor_execPlaySound_Parms PlaySound_Parms;
	PlaySound_Parms.InSoundCue = InSoundCue;
	PlaySound_Parms.bNotReplicated = bNotReplicated;
	PlaySound_Parms.bNoRepToOwner = bNoRepToOwner;
	PlaySound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	memcpy ( &PlaySound_Parms.SoundLocation, &SoundLocation, 0xC );
	PlaySound_Parms.bNoRepToRelevant = bNoRepToRelevant;

	pFnPlaySound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );

	pFnPlaySound->FunctionFlags |= 0x400;
};

// Function Engine.Actor.CreateAudioComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bPlay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAttachToSelf                  ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* AActor::CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf )
{
	static UFunction* pFnCreateAudioComponent = NULL;

	if ( ! pFnCreateAudioComponent )
		pFnCreateAudioComponent = UObject::FindObject< UFunction > ( "Function Engine.Actor.CreateAudioComponent" );

	AActor_execCreateAudioComponent_Parms CreateAudioComponent_Parms;
	CreateAudioComponent_Parms.InSoundCue = InSoundCue;
	CreateAudioComponent_Parms.bPlay = bPlay;
	CreateAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	CreateAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &CreateAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );
	CreateAudioComponent_Parms.bAttachToSelf = bAttachToSelf;

	pFnCreateAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateAudioComponent, &CreateAudioComponent_Parms, NULL );

	pFnCreateAudioComponent->FunctionFlags |= 0x400;

	return CreateAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerRate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TimerFuncName                  ( CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerRate ( struct FName TimerFuncName, class UObject* inObj )
{
	static UFunction* pFnGetTimerRate = NULL;

	if ( ! pFnGetTimerRate )
		pFnGetTimerRate = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetTimerRate" );

	AActor_execGetTimerRate_Parms GetTimerRate_Parms;
	memcpy ( &GetTimerRate_Parms.TimerFuncName, &TimerFuncName, 0x8 );
	GetTimerRate_Parms.inObj = inObj;

	pFnGetTimerRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerRate, &GetTimerRate_Parms, NULL );

	pFnGetTimerRate->FunctionFlags |= 0x400;

	return GetTimerRate_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerCount ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnGetTimerCount = NULL;

	if ( ! pFnGetTimerCount )
		pFnGetTimerCount = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetTimerCount" );

	AActor_execGetTimerCount_Parms GetTimerCount_Parms;
	memcpy ( &GetTimerCount_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	GetTimerCount_Parms.inObj = inObj;

	pFnGetTimerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerCount, &GetTimerCount_Parms, NULL );

	pFnGetTimerCount->FunctionFlags |= 0x400;

	return GetTimerCount_Parms.ReturnValue;
};

// Function Engine.Actor.IsTimerActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

bool AActor::IsTimerActive ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnIsTimerActive = NULL;

	if ( ! pFnIsTimerActive )
		pFnIsTimerActive = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsTimerActive" );

	AActor_execIsTimerActive_Parms IsTimerActive_Parms;
	memcpy ( &IsTimerActive_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	IsTimerActive_Parms.inObj = inObj;

	pFnIsTimerActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTimerActive, &IsTimerActive_Parms, NULL );

	pFnIsTimerActive->FunctionFlags |= 0x400;

	return IsTimerActive_Parms.ReturnValue;
};

// Function Engine.Actor.PauseTimer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnPauseTimer = NULL;

	if ( ! pFnPauseTimer )
		pFnPauseTimer = UObject::FindObject< UFunction > ( "Function Engine.Actor.PauseTimer" );

	AActor_execPauseTimer_Parms PauseTimer_Parms;
	PauseTimer_Parms.bPause = bPause;
	memcpy ( &PauseTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	PauseTimer_Parms.inObj = inObj;

	pFnPauseTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPauseTimer, &PauseTimer_Parms, NULL );

	pFnPauseTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ClearTimer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   inTimerFunc                    ( CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearTimer ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnClearTimer = NULL;

	if ( ! pFnClearTimer )
		pFnClearTimer = UObject::FindObject< UFunction > ( "Function Engine.Actor.ClearTimer" );

	AActor_execClearTimer_Parms ClearTimer_Parms;
	memcpy ( &ClearTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	ClearTimer_Parms.inObj = inObj;

	pFnClearTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearTimer, &ClearTimer_Parms, NULL );

	pFnClearTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetTimer
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0118]
// Parameters infos:
// float                          InRate                         ( CPF_Parm )
// unsigned long                  inbLoop                        ( CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnSetTimer = NULL;

	if ( ! pFnSetTimer )
		pFnSetTimer = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetTimer" );

	AActor_execSetTimer_Parms SetTimer_Parms;
	SetTimer_Parms.InRate = InRate;
	SetTimer_Parms.inbLoop = inbLoop;
	memcpy ( &SetTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	SetTimer_Parms.inObj = inObj;

	unsigned long NativeIndex = pFnSetTimer->iNative;
	pFnSetTimer->iNative = 0;

	pFnSetTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTimer, &SetTimer_Parms, NULL );

	pFnSetTimer->FunctionFlags |= 0x400;

	pFnSetTimer->iNative = NativeIndex;
};

// Function Engine.Actor.TornOff
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = UObject::FindObject< UFunction > ( "Function Engine.Actor.TornOff" );

	AActor_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Actor.Destroy
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0117]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::Destroy ( )
{
	static UFunction* pFnDestroy = NULL;

	if ( ! pFnDestroy )
		pFnDestroy = UObject::FindObject< UFunction > ( "Function Engine.Actor.Destroy" );

	AActor_execDestroy_Parms Destroy_Parms;

	unsigned long NativeIndex = pFnDestroy->iNative;
	pFnDestroy->iNative = 0;

	pFnDestroy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroy, &Destroy_Parms, NULL );

	pFnDestroy->FunctionFlags |= 0x400;

	pFnDestroy->iNative = NativeIndex;

	return Destroy_Parms.ReturnValue;
};

// Function Engine.Actor.Spawn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SpawnClass                     ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   SpawnTag                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  ActorTemplate                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* AActor::Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail )
{
	static UFunction* pFnSpawn = NULL;

	if ( ! pFnSpawn )
		pFnSpawn = UObject::FindObject< UFunction > ( "Function Engine.Actor.Spawn" );

	AActor_execSpawn_Parms Spawn_Parms;
	Spawn_Parms.SpawnClass = SpawnClass;
	Spawn_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &Spawn_Parms.SpawnTag, &SpawnTag, 0x8 );
	memcpy ( &Spawn_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &Spawn_Parms.SpawnRotation, &SpawnRotation, 0xC );
	Spawn_Parms.ActorTemplate = ActorTemplate;
	Spawn_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawn, &Spawn_Parms, NULL );

	pFnSpawn->FunctionFlags |= 0x400;

	return Spawn_Parms.ReturnValue;
};

// Function Engine.Actor.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void AActor::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetBoundingCylinder" );

	AActor_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Actor.GetComponentsBoundingBox
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FBox                    ActorBox                       ( CPF_Parm | CPF_OutParm )

void AActor::GetComponentsBoundingBox ( struct FBox* ActorBox )
{
	static UFunction* pFnGetComponentsBoundingBox = NULL;

	if ( ! pFnGetComponentsBoundingBox )
		pFnGetComponentsBoundingBox = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetComponentsBoundingBox" );

	AActor_execGetComponentsBoundingBox_Parms GetComponentsBoundingBox_Parms;

	pFnGetComponentsBoundingBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComponentsBoundingBox, &GetComponentsBoundingBox_Parms, NULL );

	pFnGetComponentsBoundingBox->FunctionFlags |= 0x400;

	if ( ActorBox )
		memcpy ( ActorBox, &GetComponentsBoundingBox_Parms.ActorBox, 0x1C );
};

// Function Engine.Actor.IsOverlapping
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool AActor::IsOverlapping ( class AActor* A )
{
	static UFunction* pFnIsOverlapping = NULL;

	if ( ! pFnIsOverlapping )
		pFnIsOverlapping = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsOverlapping" );

	AActor_execIsOverlapping_Parms IsOverlapping_Parms;
	IsOverlapping_Parms.A = A;

	pFnIsOverlapping->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOverlapping, &IsOverlapping_Parms, NULL );

	pFnIsOverlapping->FunctionFlags |= 0x400;

	return IsOverlapping_Parms.ReturnValue;
};

// Function Engine.Actor.ContainsPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Spot                           ( CPF_Parm )

bool AActor::ContainsPoint ( struct FVector Spot )
{
	static UFunction* pFnContainsPoint = NULL;

	if ( ! pFnContainsPoint )
		pFnContainsPoint = UObject::FindObject< UFunction > ( "Function Engine.Actor.ContainsPoint" );

	AActor_execContainsPoint_Parms ContainsPoint_Parms;
	memcpy ( &ContainsPoint_Parms.Spot, &Spot, 0xC );

	pFnContainsPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsPoint, &ContainsPoint_Parms, NULL );

	pFnContainsPoint->FunctionFlags |= 0x400;

	return ContainsPoint_Parms.ReturnValue;
};

// Function Engine.Actor.FindSpot
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 BoxExtent                      ( CPF_Parm )
// struct FVector                 SpotLocation                   ( CPF_Parm | CPF_OutParm )

bool AActor::FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation )
{
	static UFunction* pFnFindSpot = NULL;

	if ( ! pFnFindSpot )
		pFnFindSpot = UObject::FindObject< UFunction > ( "Function Engine.Actor.FindSpot" );

	AActor_execFindSpot_Parms FindSpot_Parms;
	memcpy ( &FindSpot_Parms.BoxExtent, &BoxExtent, 0xC );

	pFnFindSpot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSpot, &FindSpot_Parms, NULL );

	pFnFindSpot->FunctionFlags |= 0x400;

	if ( SpotLocation )
		memcpy ( SpotLocation, &FindSpot_Parms.SpotLocation, 0xC );

	return FindSpot_Parms.ReturnValue;
};

// Function Engine.Actor.FastTrace
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0224]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoxExtent                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceBullet                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet )
{
	static UFunction* pFnFastTrace = NULL;

	if ( ! pFnFastTrace )
		pFnFastTrace = UObject::FindObject< UFunction > ( "Function Engine.Actor.FastTrace" );

	AActor_execFastTrace_Parms FastTrace_Parms;
	memcpy ( &FastTrace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &FastTrace_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &FastTrace_Parms.BoxExtent, &BoxExtent, 0xC );
	FastTrace_Parms.bTraceBullet = bTraceBullet;

	unsigned long NativeIndex = pFnFastTrace->iNative;
	pFnFastTrace->iNative = 0;

	pFnFastTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastTrace, &FastTrace_Parms, NULL );

	pFnFastTrace->FunctionFlags |= 0x400;

	pFnFastTrace->iNative = NativeIndex;

	return FastTrace_Parms.ReturnValue;
};

// Function Engine.Actor.PointCheckComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm | CPF_EditInline )
// struct FVector                 PointLocation                  ( CPF_Parm )
// struct FVector                 PointExtent                    ( CPF_Parm )

bool AActor::PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent )
{
	static UFunction* pFnPointCheckComponent = NULL;

	if ( ! pFnPointCheckComponent )
		pFnPointCheckComponent = UObject::FindObject< UFunction > ( "Function Engine.Actor.PointCheckComponent" );

	AActor_execPointCheckComponent_Parms PointCheckComponent_Parms;
	PointCheckComponent_Parms.InComponent = InComponent;
	memcpy ( &PointCheckComponent_Parms.PointLocation, &PointLocation, 0xC );
	memcpy ( &PointCheckComponent_Parms.PointExtent, &PointExtent, 0xC );

	pFnPointCheckComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointCheckComponent, &PointCheckComponent_Parms, NULL );

	pFnPointCheckComponent->FunctionFlags |= 0x400;

	return PointCheckComponent_Parms.ReturnValue;
};

// Function Engine.Actor.TraceComponent
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm | CPF_EditInline )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool AActor::TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceComponent = NULL;

	if ( ! pFnTraceComponent )
		pFnTraceComponent = UObject::FindObject< UFunction > ( "Function Engine.Actor.TraceComponent" );

	AActor_execTraceComponent_Parms TraceComponent_Parms;
	TraceComponent_Parms.InComponent = InComponent;
	memcpy ( &TraceComponent_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &TraceComponent_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &TraceComponent_Parms.Extent, &Extent, 0xC );

	pFnTraceComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceComponent, &TraceComponent_Parms, NULL );

	pFnTraceComponent->FunctionFlags |= 0x400;

	if ( HitLocation )
		memcpy ( HitLocation, &TraceComponent_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &TraceComponent_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceComponent_Parms.HitInfo, 0x1C );

	return TraceComponent_Parms.ReturnValue;
};

// Function Engine.Actor.Trace
// [0x00420401] ( FUNC_Final | FUNC_Native ) iNative [0x0115]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceActors                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

class AActor* AActor::Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTrace = NULL;

	if ( ! pFnTrace )
		pFnTrace = UObject::FindObject< UFunction > ( "Function Engine.Actor.Trace" );

	AActor_execTrace_Parms Trace_Parms;
	memcpy ( &Trace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &Trace_Parms.TraceStart, &TraceStart, 0xC );
	Trace_Parms.bTraceActors = bTraceActors;
	memcpy ( &Trace_Parms.Extent, &Extent, 0xC );
	Trace_Parms.ExtraTraceFlags = ExtraTraceFlags;

	unsigned long NativeIndex = pFnTrace->iNative;
	pFnTrace->iNative = 0;

	pFnTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrace, &Trace_Parms, NULL );

	pFnTrace->FunctionFlags |= 0x400;

	pFnTrace->iNative = NativeIndex;

	if ( HitLocation )
		memcpy ( HitLocation, &Trace_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &Trace_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &Trace_Parms.HitInfo, 0x1C );

	return Trace_Parms.ReturnValue;
};

// Function Engine.Actor.OutsideWorldBounds
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = UObject::FindObject< UFunction > ( "Function Engine.Actor.OutsideWorldBounds" );

	AActor_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Actor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = UObject::FindObject< UFunction > ( "Function Engine.Actor.FellOutOfWorld" );

	AActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Actor.UsedBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   User                           ( CPF_Parm )

bool AActor::UsedBy ( class APawn* User )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function Engine.Actor.UsedBy" );

	AActor_execUsedBy_Parms UsedBy_Parms;
	UsedBy_Parms.User = User;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );

	return UsedBy_Parms.ReturnValue;
};

// Function Engine.Actor.OverRotated
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                out_Desired                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Actual                     ( CPF_Parm | CPF_OutParm )

bool AActor::eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual )
{
	static UFunction* pFnOverRotated = NULL;

	if ( ! pFnOverRotated )
		pFnOverRotated = UObject::FindObject< UFunction > ( "Function Engine.Actor.OverRotated" );

	AActor_eventOverRotated_Parms OverRotated_Parms;

	this->ProcessEvent ( pFnOverRotated, &OverRotated_Parms, NULL );

	if ( out_Desired )
		memcpy ( out_Desired, &OverRotated_Parms.out_Desired, 0xC );

	if ( out_Actual )
		memcpy ( out_Actual, &OverRotated_Parms.out_Actual, 0xC );

	return OverRotated_Parms.ReturnValue;
};

// Function Engine.Actor.ClampRotation
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                rBase                          ( CPF_Parm )
// struct FRotator                rUpperLimits                   ( CPF_Parm )
// struct FRotator                rLowerLimits                   ( CPF_Parm )
// struct FRotator                out_Rot                        ( CPF_Parm | CPF_OutParm )

bool AActor::ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot )
{
	static UFunction* pFnClampRotation = NULL;

	if ( ! pFnClampRotation )
		pFnClampRotation = UObject::FindObject< UFunction > ( "Function Engine.Actor.ClampRotation" );

	AActor_execClampRotation_Parms ClampRotation_Parms;
	memcpy ( &ClampRotation_Parms.rBase, &rBase, 0xC );
	memcpy ( &ClampRotation_Parms.rUpperLimits, &rUpperLimits, 0xC );
	memcpy ( &ClampRotation_Parms.rLowerLimits, &rLowerLimits, 0xC );

	pFnClampRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClampRotation, &ClampRotation_Parms, NULL );

	pFnClampRotation->FunctionFlags |= 0x400;

	if ( out_Rot )
		memcpy ( out_Rot, &ClampRotation_Parms.out_Rot, 0xC );

	return ClampRotation_Parms.ReturnValue;
};

// Function Engine.Actor.RanInto
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = UObject::FindObject< UFunction > ( "Function Engine.Actor.RanInto" );

	AActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.Actor.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = UObject::FindObject< UFunction > ( "Function Engine.Actor.EncroachedBy" );

	AActor_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Actor.EncroachingOn
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = UObject::FindObject< UFunction > ( "Function Engine.Actor.EncroachingOn" );

	AActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Actor.CollisionChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = UObject::FindObject< UFunction > ( "Function Engine.Actor.CollisionChanged" );

	AActor_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Actor.SpecialHandling
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* AActor::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = UObject::FindObject< UFunction > ( "Function Engine.Actor.SpecialHandling" );

	AActor_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Actor.Detach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = UObject::FindObject< UFunction > ( "Function Engine.Actor.Detach" );

	AActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.Actor.Attach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = UObject::FindObject< UFunction > ( "Function Engine.Actor.Attach" );

	AActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.Actor.BaseChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = UObject::FindObject< UFunction > ( "Function Engine.Actor.BaseChange" );

	AActor_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Actor.Bump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function Engine.Actor.Bump" );

	AActor_eventBump_Parms Bump_Parms;
	Bump_Parms.Other = Other;
	Bump_Parms.OtherComp = OtherComp;
	memcpy ( &Bump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function Engine.Actor.UnTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function Engine.Actor.UnTouch" );

	AActor_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.Actor.PostTouch
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::PostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = UObject::FindObject< UFunction > ( "Function Engine.Actor.PostTouch" );

	AActor_execPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	pFnPostTouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );

	pFnPostTouch->FunctionFlags |= 0x400;
};

// Function Engine.Actor.Touch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.Actor.Touch" );

	AActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Actor.PhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AActor::eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnPhysicsVolumeChange = NULL;

	if ( ! pFnPhysicsVolumeChange )
		pFnPhysicsVolumeChange = UObject::FindObject< UFunction > ( "Function Engine.Actor.PhysicsVolumeChange" );

	AActor_eventPhysicsVolumeChange_Parms PhysicsVolumeChange_Parms;
	PhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnPhysicsVolumeChange, &PhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Actor.Falling
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AActor::Falling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = UObject::FindObject< UFunction > ( "Function Engine.Actor.Falling" );

	AActor_execFalling_Parms Falling_Parms;

	pFnFalling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );

	pFnFalling->FunctionFlags |= 0x400;
};

// Function Engine.Actor.Timer
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function Engine.Actor.Timer" );

	AActor_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.Actor.ServerIllegalLocation_APB
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AActor::ServerIllegalLocation_APB ( )
{
	static UFunction* pFnServerIllegalLocation_APB = NULL;

	if ( ! pFnServerIllegalLocation_APB )
		pFnServerIllegalLocation_APB = UObject::FindObject< UFunction > ( "Function Engine.Actor.ServerIllegalLocation_APB" );

	AActor_execServerIllegalLocation_APB_Parms ServerIllegalLocation_APB_Parms;

	pFnServerIllegalLocation_APB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerIllegalLocation_APB, &ServerIllegalLocation_APB_Parms, NULL );

	pFnServerIllegalLocation_APB->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ClientIllegalLocation_APB
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AActor::ClientIllegalLocation_APB ( )
{
	static UFunction* pFnClientIllegalLocation_APB = NULL;

	if ( ! pFnClientIllegalLocation_APB )
		pFnClientIllegalLocation_APB = UObject::FindObject< UFunction > ( "Function Engine.Actor.ClientIllegalLocation_APB" );

	AActor_execClientIllegalLocation_APB_Parms ClientIllegalLocation_APB_Parms;

	pFnClientIllegalLocation_APB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientIllegalLocation_APB, &ClientIllegalLocation_APB_Parms, NULL );

	pFnClientIllegalLocation_APB->FunctionFlags |= 0x400;
};

// Function Engine.Actor.InIllegalLocation_APB
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sErrorMessage                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void AActor::InIllegalLocation_APB ( struct FString sErrorMessage )
{
	static UFunction* pFnInIllegalLocation_APB = NULL;

	if ( ! pFnInIllegalLocation_APB )
		pFnInIllegalLocation_APB = UObject::FindObject< UFunction > ( "Function Engine.Actor.InIllegalLocation_APB" );

	AActor_execInIllegalLocation_APB_Parms InIllegalLocation_APB_Parms;
	memcpy ( &InIllegalLocation_APB_Parms.sErrorMessage, &sErrorMessage, 0xC );

	pFnInIllegalLocation_APB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInIllegalLocation_APB, &InIllegalLocation_APB_Parms, NULL );

	pFnInIllegalLocation_APB->FunctionFlags |= 0x400;
};

// Function Engine.Actor.IsNonSpatiallyRelevant
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsNonSpatiallyRelevant ( )
{
	static UFunction* pFnIsNonSpatiallyRelevant = NULL;

	if ( ! pFnIsNonSpatiallyRelevant )
		pFnIsNonSpatiallyRelevant = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsNonSpatiallyRelevant" );

	AActor_execIsNonSpatiallyRelevant_Parms IsNonSpatiallyRelevant_Parms;

	pFnIsNonSpatiallyRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNonSpatiallyRelevant, &IsNonSpatiallyRelevant_Parms, NULL );

	pFnIsNonSpatiallyRelevant->FunctionFlags |= 0x400;

	return IsNonSpatiallyRelevant_Parms.ReturnValue;
};

// Function Engine.Actor.IsAlwaysRelevant_APB
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsAlwaysRelevant_APB ( )
{
	static UFunction* pFnIsAlwaysRelevant_APB = NULL;

	if ( ! pFnIsAlwaysRelevant_APB )
		pFnIsAlwaysRelevant_APB = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsAlwaysRelevant_APB" );

	AActor_execIsAlwaysRelevant_APB_Parms IsAlwaysRelevant_APB_Parms;

	pFnIsAlwaysRelevant_APB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAlwaysRelevant_APB, &IsAlwaysRelevant_APB_Parms, NULL );

	pFnIsAlwaysRelevant_APB->FunctionFlags |= 0x400;

	return IsAlwaysRelevant_APB_Parms.ReturnValue;
};

// Function Engine.Actor.SetAlwaysRelevant_APB
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewAlwaysRelevant             ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void AActor::SetAlwaysRelevant_APB ( unsigned long bNewAlwaysRelevant, unsigned long bForce )
{
	static UFunction* pFnSetAlwaysRelevant_APB = NULL;

	if ( ! pFnSetAlwaysRelevant_APB )
		pFnSetAlwaysRelevant_APB = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetAlwaysRelevant_APB" );

	AActor_execSetAlwaysRelevant_APB_Parms SetAlwaysRelevant_APB_Parms;
	SetAlwaysRelevant_APB_Parms.bNewAlwaysRelevant = bNewAlwaysRelevant;
	SetAlwaysRelevant_APB_Parms.bForce = bForce;

	pFnSetAlwaysRelevant_APB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAlwaysRelevant_APB, &SetAlwaysRelevant_APB_Parms, NULL );

	pFnSetAlwaysRelevant_APB->FunctionFlags |= 0x400;
};

// Function Engine.Actor.IsUsingGrid
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsUsingGrid ( )
{
	static UFunction* pFnIsUsingGrid = NULL;

	if ( ! pFnIsUsingGrid )
		pFnIsUsingGrid = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsUsingGrid" );

	AActor_execIsUsingGrid_Parms IsUsingGrid_Parms;

	pFnIsUsingGrid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsingGrid, &IsUsingGrid_Parms, NULL );

	pFnIsUsingGrid->FunctionFlags |= 0x400;

	return IsUsingGrid_Parms.ReturnValue;
};

// Function Engine.Actor.SetUseGrid
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bNewUseGrid                    ( CPF_Parm )

void AActor::SetUseGrid ( unsigned long bNewUseGrid )
{
	static UFunction* pFnSetUseGrid = NULL;

	if ( ! pFnSetUseGrid )
		pFnSetUseGrid = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetUseGrid" );

	AActor_execSetUseGrid_Parms SetUseGrid_Parms;
	SetUseGrid_Parms.bNewUseGrid = bNewUseGrid;

	pFnSetUseGrid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseGrid, &SetUseGrid_Parms, NULL );

	pFnSetUseGrid->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetStasis
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewStasis                     ( CPF_Parm )
// unsigned long                  bSimpleWakeUpEvent             ( CPF_OptionalParm | CPF_Parm )

void AActor::SetStasis ( unsigned long bNewStasis, unsigned long bSimpleWakeUpEvent )
{
	static UFunction* pFnSetStasis = NULL;

	if ( ! pFnSetStasis )
		pFnSetStasis = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetStasis" );

	AActor_execSetStasis_Parms SetStasis_Parms;
	SetStasis_Parms.bNewStasis = bNewStasis;
	SetStasis_Parms.bSimpleWakeUpEvent = bSimpleWakeUpEvent;

	pFnSetStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStasis, &SetStasis_Parms, NULL );

	pFnSetStasis->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetAPBCollision
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FsAPBCollision          newAPBCollision                ( CPF_Parm )

void AActor::SetAPBCollision ( struct FsAPBCollision newAPBCollision )
{
	static UFunction* pFnSetAPBCollision = NULL;

	if ( ! pFnSetAPBCollision )
		pFnSetAPBCollision = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetAPBCollision" );

	AActor_execSetAPBCollision_Parms SetAPBCollision_Parms;
	memcpy ( &SetAPBCollision_Parms.newAPBCollision, &newAPBCollision, 0x14 );

	pFnSetAPBCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAPBCollision, &SetAPBCollision_Parms, NULL );

	pFnSetAPBCollision->FunctionFlags |= 0x400;
};

// Function Engine.Actor.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AActor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function Engine.Actor.Tick" );

	AActor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Actor.LostChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventLostChild ( class AActor* Other )
{
	static UFunction* pFnLostChild = NULL;

	if ( ! pFnLostChild )
		pFnLostChild = UObject::FindObject< UFunction > ( "Function Engine.Actor.LostChild" );

	AActor_eventLostChild_Parms LostChild_Parms;
	LostChild_Parms.Other = Other;

	this->ProcessEvent ( pFnLostChild, &LostChild_Parms, NULL );
};

// Function Engine.Actor.GainedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventGainedChild ( class AActor* Other )
{
	static UFunction* pFnGainedChild = NULL;

	if ( ! pFnGainedChild )
		pFnGainedChild = UObject::FindObject< UFunction > ( "Function Engine.Actor.GainedChild" );

	AActor_eventGainedChild_Parms GainedChild_Parms;
	GainedChild_Parms.Other = Other;

	this->ProcessEvent ( pFnGainedChild, &GainedChild_Parms, NULL );
};

// Function Engine.Actor.Destroyed
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.Actor.Destroyed" );

	AActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Actor.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void AActor::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetTickGroup" );

	AActor_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ExComponent                    ( CPF_Parm | CPF_EditInline )

void AActor::DetachComponent ( class UActorComponent* ExComponent )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = UObject::FindObject< UFunction > ( "Function Engine.Actor.DetachComponent" );

	AActor_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.ExComponent = ExComponent;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.AttachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         NewComponent                   ( CPF_Parm | CPF_EditInline )

void AActor::AttachComponent ( class UActorComponent* NewComponent )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = UObject::FindObject< UFunction > ( "Function Engine.Actor.AttachComponent" );

	AActor_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.NewComponent = NewComponent;

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.UnClock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::UnClock ( float* Time )
{
	static UFunction* pFnUnClock = NULL;

	if ( ! pFnUnClock )
		pFnUnClock = UObject::FindObject< UFunction > ( "Function Engine.Actor.UnClock" );

	AActor_execUnClock_Parms UnClock_Parms;

	pFnUnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnClock, &UnClock_Parms, NULL );

	pFnUnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = UnClock_Parms.Time;
};

// Function Engine.Actor.Clock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::Clock ( float* Time )
{
	static UFunction* pFnClock = NULL;

	if ( ! pFnClock )
		pFnClock = UObject::FindObject< UFunction > ( "Function Engine.Actor.Clock" );

	AActor_execClock_Parms Clock_Parms;

	pFnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClock, &Clock_Parms, NULL );

	pFnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = Clock_Parms.Time;
};

// Function Engine.Actor.SetPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F82]
// Parameters infos:
// unsigned char                  newPhysics                     ( CPF_Parm )

void AActor::SetPhysics ( unsigned char newPhysics )
{
	static UFunction* pFnSetPhysics = NULL;

	if ( ! pFnSetPhysics )
		pFnSetPhysics = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetPhysics" );

	AActor_execSetPhysics_Parms SetPhysics_Parms;
	SetPhysics_Parms.newPhysics = newPhysics;

	unsigned long NativeIndex = pFnSetPhysics->iNative;
	pFnSetPhysics->iNative = 0;

	pFnSetPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysics, &SetPhysics_Parms, NULL );

	pFnSetPhysics->FunctionFlags |= 0x400;

	pFnSetPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void AActor::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetOnlyOwnerSee" );

	AActor_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHidden                     ( CPF_Parm )

void AActor::SetHidden ( unsigned long bNewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetHidden" );

	AActor_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.bNewHidden = bNewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ChartData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 DataName                       ( CPF_Parm | CPF_NeedCtorLink )
// float                          DataValue                      ( CPF_Parm )

void AActor::ChartData ( struct FString DataName, float DataValue )
{
	static UFunction* pFnChartData = NULL;

	if ( ! pFnChartData )
		pFnChartData = UObject::FindObject< UFunction > ( "Function Engine.Actor.ChartData" );

	AActor_execChartData_Parms ChartData_Parms;
	memcpy ( &ChartData_Parms.DataName, &DataName, 0xC );
	ChartData_Parms.DataValue = DataValue;

	pFnChartData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChartData, &ChartData_Parms, NULL );

	pFnChartData->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCone
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// struct FVector                 Direction                      ( CPF_Parm )
// float                          Length                         ( CPF_Parm )
// float                          AngleWidth                     ( CPF_Parm )
// float                          AngleHeight                    ( CPF_Parm )
// int                            NumSides                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCone = NULL;

	if ( ! pFnDrawDebugCone )
		pFnDrawDebugCone = UObject::FindObject< UFunction > ( "Function Engine.Actor.DrawDebugCone" );

	AActor_execDrawDebugCone_Parms DrawDebugCone_Parms;
	memcpy ( &DrawDebugCone_Parms.Origin, &Origin, 0xC );
	memcpy ( &DrawDebugCone_Parms.Direction, &Direction, 0xC );
	DrawDebugCone_Parms.Length = Length;
	DrawDebugCone_Parms.AngleWidth = AngleWidth;
	DrawDebugCone_Parms.AngleHeight = AngleHeight;
	DrawDebugCone_Parms.NumSides = NumSides;
	memcpy ( &DrawDebugCone_Parms.DrawColor, &DrawColor, 0x4 );
	DrawDebugCone_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCone, &DrawDebugCone_Parms, NULL );

	pFnDrawDebugCone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCylinder
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCylinder = NULL;

	if ( ! pFnDrawDebugCylinder )
		pFnDrawDebugCylinder = UObject::FindObject< UFunction > ( "Function Engine.Actor.DrawDebugCylinder" );

	AActor_execDrawDebugCylinder_Parms DrawDebugCylinder_Parms;
	memcpy ( &DrawDebugCylinder_Parms.Start, &Start, 0xC );
	memcpy ( &DrawDebugCylinder_Parms.End, &End, 0xC );
	DrawDebugCylinder_Parms.Radius = Radius;
	DrawDebugCylinder_Parms.Segments = Segments;
	DrawDebugCylinder_Parms.R = R;
	DrawDebugCylinder_Parms.G = G;
	DrawDebugCylinder_Parms.B = B;
	DrawDebugCylinder_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCylinder, &DrawDebugCylinder_Parms, NULL );

	pFnDrawDebugCylinder->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugSphere
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugSphere = NULL;

	if ( ! pFnDrawDebugSphere )
		pFnDrawDebugSphere = UObject::FindObject< UFunction > ( "Function Engine.Actor.DrawDebugSphere" );

	AActor_execDrawDebugSphere_Parms DrawDebugSphere_Parms;
	memcpy ( &DrawDebugSphere_Parms.Center, &Center, 0xC );
	DrawDebugSphere_Parms.Radius = Radius;
	DrawDebugSphere_Parms.Segments = Segments;
	DrawDebugSphere_Parms.R = R;
	DrawDebugSphere_Parms.G = G;
	DrawDebugSphere_Parms.B = B;
	DrawDebugSphere_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugSphere->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugSphere, &DrawDebugSphere_Parms, NULL );

	pFnDrawDebugSphere->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCoordinateSystem
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 AxisLoc                        ( CPF_Parm )
// struct FRotator                AxisRot                        ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCoordinateSystem = NULL;

	if ( ! pFnDrawDebugCoordinateSystem )
		pFnDrawDebugCoordinateSystem = UObject::FindObject< UFunction > ( "Function Engine.Actor.DrawDebugCoordinateSystem" );

	AActor_execDrawDebugCoordinateSystem_Parms DrawDebugCoordinateSystem_Parms;
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisLoc, &AxisLoc, 0xC );
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisRot, &AxisRot, 0xC );
	DrawDebugCoordinateSystem_Parms.Scale = Scale;
	DrawDebugCoordinateSystem_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCoordinateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCoordinateSystem, &DrawDebugCoordinateSystem_Parms, NULL );

	pFnDrawDebugCoordinateSystem->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugBox
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugBox = NULL;

	if ( ! pFnDrawDebugBox )
		pFnDrawDebugBox = UObject::FindObject< UFunction > ( "Function Engine.Actor.DrawDebugBox" );

	AActor_execDrawDebugBox_Parms DrawDebugBox_Parms;
	memcpy ( &DrawDebugBox_Parms.Center, &Center, 0xC );
	memcpy ( &DrawDebugBox_Parms.Extent, &Extent, 0xC );
	DrawDebugBox_Parms.R = R;
	DrawDebugBox_Parms.G = G;
	DrawDebugBox_Parms.B = B;
	DrawDebugBox_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugBox, &DrawDebugBox_Parms, NULL );

	pFnDrawDebugBox->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugLine
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 LineStart                      ( CPF_Parm )
// struct FVector                 LineEnd                        ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugLine = NULL;

	if ( ! pFnDrawDebugLine )
		pFnDrawDebugLine = UObject::FindObject< UFunction > ( "Function Engine.Actor.DrawDebugLine" );

	AActor_execDrawDebugLine_Parms DrawDebugLine_Parms;
	memcpy ( &DrawDebugLine_Parms.LineStart, &LineStart, 0xC );
	memcpy ( &DrawDebugLine_Parms.LineEnd, &LineEnd, 0xC );
	DrawDebugLine_Parms.R = R;
	DrawDebugLine_Parms.G = G;
	DrawDebugLine_Parms.B = B;
	DrawDebugLine_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugLine, &DrawDebugLine_Parms, NULL );

	pFnDrawDebugLine->FunctionFlags |= 0x400;
};

// Function Engine.Actor.FlushPersistentDebugLines
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AActor::FlushPersistentDebugLines ( )
{
	static UFunction* pFnFlushPersistentDebugLines = NULL;

	if ( ! pFnFlushPersistentDebugLines )
		pFnFlushPersistentDebugLines = UObject::FindObject< UFunction > ( "Function Engine.Actor.FlushPersistentDebugLines" );

	AActor_execFlushPersistentDebugLines_Parms FlushPersistentDebugLines_Parms;

	pFnFlushPersistentDebugLines->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushPersistentDebugLines, &FlushPersistentDebugLines_Parms, NULL );

	pFnFlushPersistentDebugLines->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetForcedInitialReplicatedProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UProperty*               PropToReplicate                ( CPF_Parm )
// unsigned long                  bAdd                           ( CPF_Parm )

void AActor::SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd )
{
	static UFunction* pFnSetForcedInitialReplicatedProperty = NULL;

	if ( ! pFnSetForcedInitialReplicatedProperty )
		pFnSetForcedInitialReplicatedProperty = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetForcedInitialReplicatedProperty" );

	AActor_execSetForcedInitialReplicatedProperty_Parms SetForcedInitialReplicatedProperty_Parms;
	SetForcedInitialReplicatedProperty_Parms.PropToReplicate = PropToReplicate;
	SetForcedInitialReplicatedProperty_Parms.bAdd = bAdd;

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForcedInitialReplicatedProperty, &SetForcedInitialReplicatedProperty_Parms, NULL );

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ReplicatedArrayEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )
// int                            nElement                       ( CPF_Parm )

void AActor::eventReplicatedArrayEvent ( struct FName VarName, int nElement )
{
	static UFunction* pFnReplicatedArrayEvent = NULL;

	if ( ! pFnReplicatedArrayEvent )
		pFnReplicatedArrayEvent = UObject::FindObject< UFunction > ( "Function Engine.Actor.ReplicatedArrayEvent" );

	AActor_eventReplicatedArrayEvent_Parms ReplicatedArrayEvent_Parms;
	memcpy ( &ReplicatedArrayEvent_Parms.VarName, &VarName, 0x8 );
	ReplicatedArrayEvent_Parms.nElement = nElement;

	this->ProcessEvent ( pFnReplicatedArrayEvent, &ReplicatedArrayEvent_Parms, NULL );
};

// Function Engine.Actor.CallSuperReplicated
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AActor::eventCallSuperReplicated ( struct FName VarName )
{
	static UFunction* pFnCallSuperReplicated = NULL;

	if ( ! pFnCallSuperReplicated )
		pFnCallSuperReplicated = UObject::FindObject< UFunction > ( "Function Engine.Actor.CallSuperReplicated" );

	AActor_eventCallSuperReplicated_Parms CallSuperReplicated_Parms;
	memcpy ( &CallSuperReplicated_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnCallSuperReplicated, &CallSuperReplicated_Parms, NULL );
};

// Function Engine.Actor.ReplicatedEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.Actor.ReplicatedEvent" );

	AActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Actor.IsOwnedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsOwnedBy ( class AActor* TestActor )
{
	static UFunction* pFnIsOwnedBy = NULL;

	if ( ! pFnIsOwnedBy )
		pFnIsOwnedBy = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsOwnedBy" );

	AActor_execIsOwnedBy_Parms IsOwnedBy_Parms;
	IsOwnedBy_Parms.TestActor = TestActor;

	pFnIsOwnedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOwnedBy, &IsOwnedBy_Parms, NULL );

	pFnIsOwnedBy->FunctionFlags |= 0x400;

	return IsOwnedBy_Parms.ReturnValue;
};

// Function Engine.Actor.GetBaseMost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AActor::GetBaseMost ( )
{
	static UFunction* pFnGetBaseMost = NULL;

	if ( ! pFnGetBaseMost )
		pFnGetBaseMost = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetBaseMost" );

	AActor_execGetBaseMost_Parms GetBaseMost_Parms;

	pFnGetBaseMost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseMost, &GetBaseMost_Parms, NULL );

	pFnGetBaseMost->FunctionFlags |= 0x400;

	return GetBaseMost_Parms.ReturnValue;
};

// Function Engine.Actor.IsBasedOn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsBasedOn ( class AActor* TestActor )
{
	static UFunction* pFnIsBasedOn = NULL;

	if ( ! pFnIsBasedOn )
		pFnIsBasedOn = UObject::FindObject< UFunction > ( "Function Engine.Actor.IsBasedOn" );

	AActor_execIsBasedOn_Parms IsBasedOn_Parms;
	IsBasedOn_Parms.TestActor = TestActor;

	pFnIsBasedOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBasedOn, &IsBasedOn_Parms, NULL );

	pFnIsBasedOn->FunctionFlags |= 0x400;

	return IsBasedOn_Parms.ReturnValue;
};

// Function Engine.Actor.FindBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AActor::FindBase ( )
{
	static UFunction* pFnFindBase = NULL;

	if ( ! pFnFindBase )
		pFnFindBase = UObject::FindObject< UFunction > ( "Function Engine.Actor.FindBase" );

	AActor_execFindBase_Parms FindBase_Parms;

	pFnFindBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBase, &FindBase_Parms, NULL );

	pFnFindBase->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0110]
// Parameters infos:
// class AActor*                  NewOwner                       ( CPF_Parm )

void AActor::SetOwner ( class AActor* NewOwner )
{
	static UFunction* pFnSetOwner = NULL;

	if ( ! pFnSetOwner )
		pFnSetOwner = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetOwner" );

	AActor_execSetOwner_Parms SetOwner_Parms;
	SetOwner_Parms.NewOwner = NewOwner;

	unsigned long NativeIndex = pFnSetOwner->iNative;
	pFnSetOwner->iNative = 0;

	pFnSetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwner, &SetOwner_Parms, NULL );

	pFnSetOwner->FunctionFlags |= 0x400;

	pFnSetOwner->iNative = NativeIndex;
};

// Function Engine.Actor.SetBase
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x012A]
// Parameters infos:
// class AActor*                  NewBase                        ( CPF_Parm )
// struct FVector                 NewFloor                       ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// struct FName                   AttachName                     ( CPF_OptionalParm | CPF_Parm )

void AActor::SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName )
{
	static UFunction* pFnSetBase = NULL;

	if ( ! pFnSetBase )
		pFnSetBase = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetBase" );

	AActor_execSetBase_Parms SetBase_Parms;
	SetBase_Parms.NewBase = NewBase;
	memcpy ( &SetBase_Parms.NewFloor, &NewFloor, 0xC );
	SetBase_Parms.SkelComp = SkelComp;
	memcpy ( &SetBase_Parms.AttachName, &AttachName, 0x8 );

	unsigned long NativeIndex = pFnSetBase->iNative;
	pFnSetBase->iNative = 0;

	pFnSetBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBase, &SetBase_Parms, NULL );

	pFnSetBase->FunctionFlags |= 0x400;

	pFnSetBase->iNative = NativeIndex;
};

// Function Engine.Actor.GetTerminalVelocity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetTerminalVelocity ( )
{
	static UFunction* pFnGetTerminalVelocity = NULL;

	if ( ! pFnGetTerminalVelocity )
		pFnGetTerminalVelocity = UObject::FindObject< UFunction > ( "Function Engine.Actor.GetTerminalVelocity" );

	AActor_execGetTerminalVelocity_Parms GetTerminalVelocity_Parms;

	pFnGetTerminalVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTerminalVelocity, &GetTerminalVelocity_Parms, NULL );

	pFnGetTerminalVelocity->FunctionFlags |= 0x400;

	return GetTerminalVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.AutonomousPhysicsPhysNone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaSeconds                  ( CPF_Parm )

void AActor::AutonomousPhysicsPhysNone ( float fDeltaSeconds )
{
	static UFunction* pFnAutonomousPhysicsPhysNone = NULL;

	if ( ! pFnAutonomousPhysicsPhysNone )
		pFnAutonomousPhysicsPhysNone = UObject::FindObject< UFunction > ( "Function Engine.Actor.AutonomousPhysicsPhysNone" );

	AActor_execAutonomousPhysicsPhysNone_Parms AutonomousPhysicsPhysNone_Parms;
	AutonomousPhysicsPhysNone_Parms.fDeltaSeconds = fDeltaSeconds;

	pFnAutonomousPhysicsPhysNone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutonomousPhysicsPhysNone, &AutonomousPhysicsPhysNone_Parms, NULL );

	pFnAutonomousPhysicsPhysNone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.AutonomousPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F83]
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void AActor::AutonomousPhysics ( float DeltaSeconds )
{
	static UFunction* pFnAutonomousPhysics = NULL;

	if ( ! pFnAutonomousPhysics )
		pFnAutonomousPhysics = UObject::FindObject< UFunction > ( "Function Engine.Actor.AutonomousPhysics" );

	AActor_execAutonomousPhysics_Parms AutonomousPhysics_Parms;
	AutonomousPhysics_Parms.DeltaSeconds = DeltaSeconds;

	unsigned long NativeIndex = pFnAutonomousPhysics->iNative;
	pFnAutonomousPhysics->iNative = 0;

	pFnAutonomousPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutonomousPhysics, &AutonomousPhysics_Parms, NULL );

	pFnAutonomousPhysics->FunctionFlags |= 0x400;

	pFnAutonomousPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.MoveSmooth
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F81]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::MoveSmooth ( struct FVector Delta )
{
	static UFunction* pFnMoveSmooth = NULL;

	if ( ! pFnMoveSmooth )
		pFnMoveSmooth = UObject::FindObject< UFunction > ( "Function Engine.Actor.MoveSmooth" );

	AActor_execMoveSmooth_Parms MoveSmooth_Parms;
	memcpy ( &MoveSmooth_Parms.Delta, &Delta, 0xC );

	unsigned long NativeIndex = pFnMoveSmooth->iNative;
	pFnMoveSmooth->iNative = 0;

	pFnMoveSmooth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveSmooth, &MoveSmooth_Parms, NULL );

	pFnMoveSmooth->FunctionFlags |= 0x400;

	pFnMoveSmooth->iNative = NativeIndex;

	return MoveSmooth_Parms.ReturnValue;
};

// Function Engine.Actor.SetHardAttach
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHardAttach                 ( CPF_OptionalParm | CPF_Parm )

void AActor::SetHardAttach ( unsigned long bNewHardAttach )
{
	static UFunction* pFnSetHardAttach = NULL;

	if ( ! pFnSetHardAttach )
		pFnSetHardAttach = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetHardAttach" );

	AActor_execSetHardAttach_Parms SetHardAttach_Parms;
	SetHardAttach_Parms.bNewHardAttach = bNewHardAttach;

	pFnSetHardAttach->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHardAttach, &SetHardAttach_Parms, NULL );

	pFnSetHardAttach->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetRelativeLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetRelativeLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetRelativeLocation = NULL;

	if ( ! pFnSetRelativeLocation )
		pFnSetRelativeLocation = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetRelativeLocation" );

	AActor_execSetRelativeLocation_Parms SetRelativeLocation_Parms;
	memcpy ( &SetRelativeLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetRelativeLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeLocation, &SetRelativeLocation_Parms, NULL );

	pFnSetRelativeLocation->FunctionFlags |= 0x400;

	return SetRelativeLocation_Parms.ReturnValue;
};

// Function Engine.Actor.SetRelativeRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRelativeRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRelativeRotation = NULL;

	if ( ! pFnSetRelativeRotation )
		pFnSetRelativeRotation = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetRelativeRotation" );

	AActor_execSetRelativeRotation_Parms SetRelativeRotation_Parms;
	memcpy ( &SetRelativeRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRelativeRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeRotation, &SetRelativeRotation_Parms, NULL );

	pFnSetRelativeRotation->FunctionFlags |= 0x400;

	return SetRelativeRotation_Parms.ReturnValue;
};

// Function Engine.Actor.CancelInteractionWithProp
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UActorComponent*         pr_pProp                       ( CPF_Parm | CPF_EditInline )

void AActor::CancelInteractionWithProp ( class UActorComponent* pr_pProp )
{
	static UFunction* pFnCancelInteractionWithProp = NULL;

	if ( ! pFnCancelInteractionWithProp )
		pFnCancelInteractionWithProp = UObject::FindObject< UFunction > ( "Function Engine.Actor.CancelInteractionWithProp" );

	AActor_execCancelInteractionWithProp_Parms CancelInteractionWithProp_Parms;
	CancelInteractionWithProp_Parms.pr_pProp = pr_pProp;

	pFnCancelInteractionWithProp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelInteractionWithProp, &CancelInteractionWithProp_Parms, NULL );

	pFnCancelInteractionWithProp->FunctionFlags |= 0x400;
};

// Function Engine.Actor.RotateActorFast
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                pr_rRotation                   ( CPF_Parm )

void AActor::RotateActorFast ( struct FRotator pr_rRotation )
{
	static UFunction* pFnRotateActorFast = NULL;

	if ( ! pFnRotateActorFast )
		pFnRotateActorFast = UObject::FindObject< UFunction > ( "Function Engine.Actor.RotateActorFast" );

	AActor_execRotateActorFast_Parms RotateActorFast_Parms;
	memcpy ( &RotateActorFast_Parms.pr_rRotation, &pr_rRotation, 0xC );

	pFnRotateActorFast->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRotateActorFast, &RotateActorFast_Parms, NULL );

	pFnRotateActorFast->FunctionFlags |= 0x400;
};

// Function Engine.Actor.MoveActorFast
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 pr_vLocation                   ( CPF_Parm )
// struct FRotator                pr_rRotation                   ( CPF_Parm )
// struct FVector                 pr_vMoveBy                     ( CPF_Parm )

void AActor::MoveActorFast ( struct FVector pr_vLocation, struct FRotator pr_rRotation, struct FVector pr_vMoveBy )
{
	static UFunction* pFnMoveActorFast = NULL;

	if ( ! pFnMoveActorFast )
		pFnMoveActorFast = UObject::FindObject< UFunction > ( "Function Engine.Actor.MoveActorFast" );

	AActor_execMoveActorFast_Parms MoveActorFast_Parms;
	memcpy ( &MoveActorFast_Parms.pr_vLocation, &pr_vLocation, 0xC );
	memcpy ( &MoveActorFast_Parms.pr_rRotation, &pr_rRotation, 0xC );
	memcpy ( &MoveActorFast_Parms.pr_vMoveBy, &pr_vMoveBy, 0xC );

	pFnMoveActorFast->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveActorFast, &MoveActorFast_Parms, NULL );

	pFnMoveActorFast->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetZone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRefresh                  ( CPF_Parm )

void AActor::SetZone ( unsigned long bForceRefresh )
{
	static UFunction* pFnSetZone = NULL;

	if ( ! pFnSetZone )
		pFnSetZone = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetZone" );

	AActor_execSetZone_Parms SetZone_Parms;
	SetZone_Parms.bForceRefresh = bForceRefresh;

	pFnSetZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetZone, &SetZone_Parms, NULL );

	pFnSetZone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.MovingWhichWay
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Amount                         ( CPF_Parm | CPF_OutParm )

unsigned char AActor::MovingWhichWay ( float* Amount )
{
	static UFunction* pFnMovingWhichWay = NULL;

	if ( ! pFnMovingWhichWay )
		pFnMovingWhichWay = UObject::FindObject< UFunction > ( "Function Engine.Actor.MovingWhichWay" );

	AActor_execMovingWhichWay_Parms MovingWhichWay_Parms;

	pFnMovingWhichWay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovingWhichWay, &MovingWhichWay_Parms, NULL );

	pFnMovingWhichWay->FunctionFlags |= 0x400;

	if ( Amount )
		*Amount = MovingWhichWay_Parms.Amount;

	return MovingWhichWay_Parms.ReturnValue;
};

// Function Engine.Actor.SetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x012B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetRotation" );

	AActor_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	unsigned long NativeIndex = pFnSetRotation->iNative;
	pFnSetRotation->iNative = 0;

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;

	pFnSetRotation->iNative = NativeIndex;

	return SetRotation_Parms.ReturnValue;
};

// Function Engine.Actor.SetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetLocation" );

	AActor_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	unsigned long NativeIndex = pFnSetLocation->iNative;
	pFnSetLocation->iNative = 0;

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;

	pFnSetLocation->iNative = NativeIndex;

	return SetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.Move
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010A]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::Move ( struct FVector Delta )
{
	static UFunction* pFnMove = NULL;

	if ( ! pFnMove )
		pFnMove = UObject::FindObject< UFunction > ( "Function Engine.Actor.Move" );

	AActor_execMove_Parms Move_Parms;
	memcpy ( &Move_Parms.Delta, &Delta, 0xC );

	unsigned long NativeIndex = pFnMove->iNative;
	pFnMove->iNative = 0;

	pFnMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMove, &Move_Parms, NULL );

	pFnMove->FunctionFlags |= 0x400;

	pFnMove->iNative = NativeIndex;

	return Move_Parms.ReturnValue;
};

// Function Engine.Actor.SetDrawScale3D
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void AActor::SetDrawScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetDrawScale3D = NULL;

	if ( ! pFnSetDrawScale3D )
		pFnSetDrawScale3D = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetDrawScale3D" );

	AActor_execSetDrawScale3D_Parms SetDrawScale3D_Parms;
	memcpy ( &SetDrawScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetDrawScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale3D, &SetDrawScale3D_Parms, NULL );

	pFnSetDrawScale3D->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetDrawScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void AActor::SetDrawScale ( float NewScale )
{
	static UFunction* pFnSetDrawScale = NULL;

	if ( ! pFnSetDrawScale )
		pFnSetDrawScale = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetDrawScale" );

	AActor_execSetDrawScale_Parms SetDrawScale_Parms;
	SetDrawScale_Parms.NewScale = NewScale;

	pFnSetDrawScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale, &SetDrawScale_Parms, NULL );

	pFnSetDrawScale->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionType
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewCollisionType               ( CPF_Parm )

void AActor::SetCollisionType ( unsigned char NewCollisionType )
{
	static UFunction* pFnSetCollisionType = NULL;

	if ( ! pFnSetCollisionType )
		pFnSetCollisionType = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetCollisionType" );

	AActor_execSetCollisionType_Parms SetCollisionType_Parms;
	SetCollisionType_Parms.NewCollisionType = NewCollisionType;

	pFnSetCollisionType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionType, &SetCollisionType_Parms, NULL );

	pFnSetCollisionType->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionSize
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x011B]
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void AActor::SetCollisionSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCollisionSize = NULL;

	if ( ! pFnSetCollisionSize )
		pFnSetCollisionSize = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetCollisionSize" );

	AActor_execSetCollisionSize_Parms SetCollisionSize_Parms;
	SetCollisionSize_Parms.NewRadius = NewRadius;
	SetCollisionSize_Parms.NewHeight = NewHeight;

	unsigned long NativeIndex = pFnSetCollisionSize->iNative;
	pFnSetCollisionSize->iNative = 0;

	pFnSetCollisionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionSize, &SetCollisionSize_Parms, NULL );

	pFnSetCollisionSize->FunctionFlags |= 0x400;

	pFnSetCollisionSize->iNative = NativeIndex;
};

// Function Engine.Actor.SetCollision
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0106]
// Parameters infos:
// unsigned long                  bNewColActors                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewBlockActors                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewIgnoreEncroachers          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers )
{
	static UFunction* pFnSetCollision = NULL;

	if ( ! pFnSetCollision )
		pFnSetCollision = UObject::FindObject< UFunction > ( "Function Engine.Actor.SetCollision" );

	AActor_execSetCollision_Parms SetCollision_Parms;
	SetCollision_Parms.bNewColActors = bNewColActors;
	SetCollision_Parms.bNewBlockActors = bNewBlockActors;
	SetCollision_Parms.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	unsigned long NativeIndex = pFnSetCollision->iNative;
	pFnSetCollision->iNative = 0;

	pFnSetCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollision, &SetCollision_Parms, NULL );

	pFnSetCollision->FunctionFlags |= 0x400;

	pFnSetCollision->iNative = NativeIndex;
};

// Function Engine.Actor.FinishAnim
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x0105]
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void AActor::FinishAnim ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnFinishAnim = NULL;

	if ( ! pFnFinishAnim )
		pFnFinishAnim = UObject::FindObject< UFunction > ( "Function Engine.Actor.FinishAnim" );

	AActor_execFinishAnim_Parms FinishAnim_Parms;
	FinishAnim_Parms.SeqNode = SeqNode;

	unsigned long NativeIndex = pFnFinishAnim->iNative;
	pFnFinishAnim->iNative = 0;

	pFnFinishAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishAnim, &FinishAnim_Parms, NULL );

	pFnFinishAnim->FunctionFlags |= 0x400;

	pFnFinishAnim->iNative = NativeIndex;
};

// Function Engine.Actor.Sleep
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x0100]
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )

void AActor::Sleep ( float Seconds )
{
	static UFunction* pFnSleep = NULL;

	if ( ! pFnSleep )
		pFnSleep = UObject::FindObject< UFunction > ( "Function Engine.Actor.Sleep" );

	AActor_execSleep_Parms Sleep_Parms;
	Sleep_Parms.Seconds = Seconds;

	unsigned long NativeIndex = pFnSleep->iNative;
	pFnSleep->iNative = 0;

	pFnSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSleep, &Sleep_Parms, NULL );

	pFnSleep->FunctionFlags |= 0x400;

	pFnSleep->iNative = NativeIndex;
};

// Function Engine.Actor.ConsoleCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = UObject::FindObject< UFunction > ( "Function Engine.Actor.ConsoleCommand" );

	AActor_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.Actor.ForceUpdateComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCollisionUpdate               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTransformOnly                 ( CPF_OptionalParm | CPF_Parm )

void AActor::ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdateComponents = NULL;

	if ( ! pFnForceUpdateComponents )
		pFnForceUpdateComponents = UObject::FindObject< UFunction > ( "Function Engine.Actor.ForceUpdateComponents" );

	AActor_execForceUpdateComponents_Parms ForceUpdateComponents_Parms;
	ForceUpdateComponents_Parms.bCollisionUpdate = bCollisionUpdate;
	ForceUpdateComponents_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdateComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdateComponents, &ForceUpdateComponents_Parms, NULL );

	pFnForceUpdateComponents->FunctionFlags |= 0x400;
};

// Function Engine.ReachSpec.IsBlockedFor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool UReachSpec::IsBlockedFor ( class APawn* P )
{
	static UFunction* pFnIsBlockedFor = NULL;

	if ( ! pFnIsBlockedFor )
		pFnIsBlockedFor = UObject::FindObject< UFunction > ( "Function Engine.ReachSpec.IsBlockedFor" );

	UReachSpec_execIsBlockedFor_Parms IsBlockedFor_Parms;
	IsBlockedFor_Parms.P = P;

	this->ProcessEvent ( pFnIsBlockedFor, &IsBlockedFor_Parms, NULL );

	return IsBlockedFor_Parms.ReturnValue;
};

// Function Engine.ReachSpec.CostFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int UReachSpec::CostFor ( class APawn* P )
{
	static UFunction* pFnCostFor = NULL;

	if ( ! pFnCostFor )
		pFnCostFor = UObject::FindObject< UFunction > ( "Function Engine.ReachSpec.CostFor" );

	UReachSpec_execCostFor_Parms CostFor_Parms;
	CostFor_Parms.P = P;

	pFnCostFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCostFor, &CostFor_Parms, NULL );

	pFnCostFor->FunctionFlags |= 0x400;

	return CostFor_Parms.ReturnValue;
};

// Function Engine.Camera.GetViewTarget
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ACamera::GetViewTarget ( )
{
	static UFunction* pFnGetViewTarget = NULL;

	if ( ! pFnGetViewTarget )
		pFnGetViewTarget = UObject::FindObject< UFunction > ( "Function Engine.Camera.GetViewTarget" );

	ACamera_execGetViewTarget_Parms GetViewTarget_Parms;

	pFnGetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewTarget, &GetViewTarget_Parms, NULL );

	pFnGetViewTarget->FunctionFlags |= 0x400;

	return GetViewTarget_Parms.ReturnValue;
};

// Function Engine.Camera.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACamera::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.Camera.DisplayDebug" );

	ACamera_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Camera.ApplyCameraModifiers
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ACamera::ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiers = NULL;

	if ( ! pFnApplyCameraModifiers )
		pFnApplyCameraModifiers = UObject::FindObject< UFunction > ( "Function Engine.Camera.ApplyCameraModifiers" );

	ACamera_execApplyCameraModifiers_Parms ApplyCameraModifiers_Parms;
	ApplyCameraModifiers_Parms.DeltaTime = DeltaTime;

	pFnApplyCameraModifiers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyCameraModifiers, &ApplyCameraModifiers_Parms, NULL );

	pFnApplyCameraModifiers->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiers_Parms.OutPOV, 0x1C );
};

// Function Engine.Camera.SetViewTarget
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

bool ACamera::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = UObject::FindObject< UFunction > ( "Function Engine.Camera.SetViewTarget" );

	ACamera_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;

	return SetViewTarget_Parms.ReturnValue;
};

// Function Engine.Camera.UpdateCamera
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACamera::UpdateCamera ( float DeltaTime )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = UObject::FindObject< UFunction > ( "Function Engine.Camera.UpdateCamera" );

	ACamera_execUpdateCamera_Parms UpdateCamera_Parms;
	UpdateCamera_Parms.DeltaTime = DeltaTime;

	pFnUpdateCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );

	pFnUpdateCamera->FunctionFlags |= 0x400;
};

// Function Engine.Camera.SetDesiredColorScale
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewColorScale                  ( CPF_Parm )
// float                          InterpTime                     ( CPF_Parm )

void ACamera::SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime )
{
	static UFunction* pFnSetDesiredColorScale = NULL;

	if ( ! pFnSetDesiredColorScale )
		pFnSetDesiredColorScale = UObject::FindObject< UFunction > ( "Function Engine.Camera.SetDesiredColorScale" );

	ACamera_execSetDesiredColorScale_Parms SetDesiredColorScale_Parms;
	memcpy ( &SetDesiredColorScale_Parms.NewColorScale, &NewColorScale, 0xC );
	SetDesiredColorScale_Parms.InterpTime = InterpTime;

	pFnSetDesiredColorScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDesiredColorScale, &SetDesiredColorScale_Parms, NULL );

	pFnSetDesiredColorScale->FunctionFlags |= 0x400;
};

// Function Engine.Camera.SetFOV
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void ACamera::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function Engine.Camera.SetFOV" );

	ACamera_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	pFnSetFOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );

	pFnSetFOV->FunctionFlags |= 0x400;
};

// Function Engine.Camera.GetFOVAngle
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ACamera::GetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = UObject::FindObject< UFunction > ( "Function Engine.Camera.GetFOVAngle" );

	ACamera_execGetFOVAngle_Parms GetFOVAngle_Parms;

	pFnGetFOVAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	pFnGetFOVAngle->FunctionFlags |= 0x400;

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.AnimatedCamera.StopCameraAnim
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         AnimInst                       ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void AAnimatedCamera::StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate )
{
	static UFunction* pFnStopCameraAnim = NULL;

	if ( ! pFnStopCameraAnim )
		pFnStopCameraAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimatedCamera.StopCameraAnim" );

	AAnimatedCamera_execStopCameraAnim_Parms StopCameraAnim_Parms;
	StopCameraAnim_Parms.AnimInst = AnimInst;
	StopCameraAnim_Parms.bImmediate = bImmediate;

	pFnStopCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCameraAnim, &StopCameraAnim_Parms, NULL );

	pFnStopCameraAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimatedCamera.StopAllCameraAnimsByType
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void AAnimatedCamera::StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate )
{
	static UFunction* pFnStopAllCameraAnimsByType = NULL;

	if ( ! pFnStopAllCameraAnimsByType )
		pFnStopAllCameraAnimsByType = UObject::FindObject< UFunction > ( "Function Engine.AnimatedCamera.StopAllCameraAnimsByType" );

	AAnimatedCamera_execStopAllCameraAnimsByType_Parms StopAllCameraAnimsByType_Parms;
	StopAllCameraAnimsByType_Parms.Anim = Anim;
	StopAllCameraAnimsByType_Parms.bImmediate = bImmediate;

	pFnStopAllCameraAnimsByType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllCameraAnimsByType, &StopAllCameraAnimsByType_Parms, NULL );

	pFnStopAllCameraAnimsByType->FunctionFlags |= 0x400;
};

// Function Engine.AnimatedCamera.PlayCameraAnim
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCameraAnim*             Anim                           ( CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

class UCameraAnimInst* AAnimatedCamera::PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration )
{
	static UFunction* pFnPlayCameraAnim = NULL;

	if ( ! pFnPlayCameraAnim )
		pFnPlayCameraAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimatedCamera.PlayCameraAnim" );

	AAnimatedCamera_execPlayCameraAnim_Parms PlayCameraAnim_Parms;
	PlayCameraAnim_Parms.Anim = Anim;
	PlayCameraAnim_Parms.Rate = Rate;
	PlayCameraAnim_Parms.Scale = Scale;
	PlayCameraAnim_Parms.BlendInTime = BlendInTime;
	PlayCameraAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCameraAnim_Parms.bLoop = bLoop;
	PlayCameraAnim_Parms.bRandomStartTime = bRandomStartTime;
	PlayCameraAnim_Parms.Duration = Duration;

	pFnPlayCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCameraAnim, &PlayCameraAnim_Parms, NULL );

	pFnPlayCameraAnim->FunctionFlags |= 0x400;

	return PlayCameraAnim_Parms.ReturnValue;
};

// Function Engine.AnimatedCamera.ApplyCameraModifiersNative
// [0x00440501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void AAnimatedCamera::ApplyCameraModifiersNative ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiersNative = NULL;

	if ( ! pFnApplyCameraModifiersNative )
		pFnApplyCameraModifiersNative = UObject::FindObject< UFunction > ( "Function Engine.AnimatedCamera.ApplyCameraModifiersNative" );

	AAnimatedCamera_execApplyCameraModifiersNative_Parms ApplyCameraModifiersNative_Parms;
	ApplyCameraModifiersNative_Parms.DeltaTime = DeltaTime;

	pFnApplyCameraModifiersNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyCameraModifiersNative, &ApplyCameraModifiersNative_Parms, NULL );

	pFnApplyCameraModifiersNative->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiersNative_Parms.OutPOV, 0x1C );
};

// Function Engine.AnimatedCamera.ApplyCameraModifiers
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void AAnimatedCamera::ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiers = NULL;

	if ( ! pFnApplyCameraModifiers )
		pFnApplyCameraModifiers = UObject::FindObject< UFunction > ( "Function Engine.AnimatedCamera.ApplyCameraModifiers" );

	AAnimatedCamera_execApplyCameraModifiers_Parms ApplyCameraModifiers_Parms;
	ApplyCameraModifiers_Parms.DeltaTime = DeltaTime;

	pFnApplyCameraModifiers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyCameraModifiers, &ApplyCameraModifiers_Parms, NULL );

	pFnApplyCameraModifiers->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiers_Parms.OutPOV, 0x1C );
};

// Function Engine.AnimatedCamera.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAnimatedCamera::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.AnimatedCamera.Destroyed" );

	AAnimatedCamera_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.AnimatedCamera.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAnimatedCamera::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.AnimatedCamera.PostBeginPlay" );

	AAnimatedCamera_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Volume.ProcessActorSetVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVolume::eventProcessActorSetVolume ( class AActor* Other )
{
	static UFunction* pFnProcessActorSetVolume = NULL;

	if ( ! pFnProcessActorSetVolume )
		pFnProcessActorSetVolume = UObject::FindObject< UFunction > ( "Function Engine.Volume.ProcessActorSetVolume" );

	AVolume_eventProcessActorSetVolume_Parms ProcessActorSetVolume_Parms;
	ProcessActorSetVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnProcessActorSetVolume, &ProcessActorSetVolume_Parms, NULL );
};

// Function Engine.Volume.CollisionChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVolume::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = UObject::FindObject< UFunction > ( "Function Engine.Volume.CollisionChanged" );

	AVolume_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Volume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.Volume.OnToggle" );

	AVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Volume.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVolume::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.Volume.DisplayDebug" );

	AVolume_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Volume.GetLocationStringFor
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AVolume::GetLocationStringFor ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetLocationStringFor = NULL;

	if ( ! pFnGetLocationStringFor )
		pFnGetLocationStringFor = UObject::FindObject< UFunction > ( "Function Engine.Volume.GetLocationStringFor" );

	AVolume_execGetLocationStringFor_Parms GetLocationStringFor_Parms;
	GetLocationStringFor_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetLocationStringFor, &GetLocationStringFor_Parms, NULL );

	return GetLocationStringFor_Parms.ReturnValue;
};

// Function Engine.Volume.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Volume.PostBeginPlay" );

	AVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Volume.Encompasses
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVolume::Encompasses ( class AActor* Other )
{
	static UFunction* pFnEncompasses = NULL;

	if ( ! pFnEncompasses )
		pFnEncompasses = UObject::FindObject< UFunction > ( "Function Engine.Volume.Encompasses" );

	AVolume_execEncompasses_Parms Encompasses_Parms;
	Encompasses_Parms.Other = Other;

	pFnEncompasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncompasses, &Encompasses_Parms, NULL );

	pFnEncompasses->FunctionFlags |= 0x400;

	return Encompasses_Parms.ReturnValue;
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalizedTeam = NULL;

	if ( ! pFnAllowBroadcastLocalizedTeam )
		pFnAllowBroadcastLocalizedTeam = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam" );

	ABroadcastHandler_eventAllowBroadcastLocalizedTeam_Parms AllowBroadcastLocalizedTeam_Parms;
	AllowBroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	AllowBroadcastLocalizedTeam_Parms.Sender = Sender;
	AllowBroadcastLocalizedTeam_Parms.Message = Message;
	AllowBroadcastLocalizedTeam_Parms.Switch = Switch;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalizedTeam, &AllowBroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalized = NULL;

	if ( ! pFnAllowBroadcastLocalized )
		pFnAllowBroadcastLocalized = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.AllowBroadcastLocalized" );

	ABroadcastHandler_eventAllowBroadcastLocalized_Parms AllowBroadcastLocalized_Parms;
	AllowBroadcastLocalized_Parms.Sender = Sender;
	AllowBroadcastLocalized_Parms.Message = Message;
	AllowBroadcastLocalized_Parms.Switch = Switch;
	AllowBroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalized, &AllowBroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastTeam
// [0x00020002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.BroadcastTeam" );

	ABroadcastHandler_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.Broadcast
// [0x00020002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::Broadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.Broadcast" );

	ABroadcastHandler_execBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0xC );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastLocalized
// [0x00020002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.BroadcastLocalized" );

	ABroadcastHandler_execBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Receiver = Receiver;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerReplicationInfo*  SenderPRI                      ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventBroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastText = NULL;

	if ( ! pFnBroadcastText )
		pFnBroadcastText = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.BroadcastText" );

	ABroadcastHandler_eventBroadcastText_Parms BroadcastText_Parms;
	BroadcastText_Parms.SenderPRI = SenderPRI;
	BroadcastText_Parms.Receiver = Receiver;
	memcpy ( &BroadcastText_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastText_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastText, &BroadcastText_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowsBroadcast
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  broadcaster                    ( CPF_Parm )
// int                            InLen                          ( CPF_Parm )

bool ABroadcastHandler::AllowsBroadcast ( class AActor* broadcaster, int InLen )
{
	static UFunction* pFnAllowsBroadcast = NULL;

	if ( ! pFnAllowsBroadcast )
		pFnAllowsBroadcast = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.AllowsBroadcast" );

	ABroadcastHandler_execAllowsBroadcast_Parms AllowsBroadcast_Parms;
	AllowsBroadcast_Parms.broadcaster = broadcaster;
	AllowsBroadcast_Parms.InLen = InLen;

	this->ProcessEvent ( pFnAllowsBroadcast, &AllowsBroadcast_Parms, NULL );

	return AllowsBroadcast_Parms.ReturnValue;
};

// Function Engine.BroadcastHandler.UpdateSentText
// [0x00020002] 
// Parameters infos:

void ABroadcastHandler::UpdateSentText ( )
{
	static UFunction* pFnUpdateSentText = NULL;

	if ( ! pFnUpdateSentText )
		pFnUpdateSentText = UObject::FindObject< UFunction > ( "Function Engine.BroadcastHandler.UpdateSentText" );

	ABroadcastHandler_execUpdateSentText_Parms UpdateSentText_Parms;

	this->ProcessEvent ( pFnUpdateSentText, &UpdateSentText_Parms, NULL );
};

// Function Engine.CameraActor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACameraActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.CameraActor.DisplayDebug" );

	ACameraActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.CameraAnimInst.ApplyTransientScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Scalar                         ( CPF_Parm )

void UCameraAnimInst::ApplyTransientScaling ( float Scalar )
{
	static UFunction* pFnApplyTransientScaling = NULL;

	if ( ! pFnApplyTransientScaling )
		pFnApplyTransientScaling = UObject::FindObject< UFunction > ( "Function Engine.CameraAnimInst.ApplyTransientScaling" );

	UCameraAnimInst_execApplyTransientScaling_Parms ApplyTransientScaling_Parms;
	ApplyTransientScaling_Parms.Scalar = Scalar;

	pFnApplyTransientScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyTransientScaling, &ApplyTransientScaling_Parms, NULL );

	pFnApplyTransientScaling->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Stop ( unsigned long bImmediate )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = UObject::FindObject< UFunction > ( "Function Engine.CameraAnimInst.Stop" );

	UCameraAnimInst_execStop_Parms Stop_Parms;
	Stop_Parms.bImmediate = bImmediate;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.AdvanceAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_Parm )

void UCameraAnimInst::AdvanceAnim ( float DeltaTime, unsigned long bJump )
{
	static UFunction* pFnAdvanceAnim = NULL;

	if ( ! pFnAdvanceAnim )
		pFnAdvanceAnim = UObject::FindObject< UFunction > ( "Function Engine.CameraAnimInst.AdvanceAnim" );

	UCameraAnimInst_execAdvanceAnim_Parms AdvanceAnim_Parms;
	AdvanceAnim_Parms.DeltaTime = DeltaTime;
	AdvanceAnim_Parms.bJump = bJump;

	pFnAdvanceAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdvanceAnim, &AdvanceAnim_Parms, NULL );

	pFnAdvanceAnim->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Play
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// class AActor*                  CamActor                       ( CPF_Parm )
// float                          InRate                         ( CPF_Parm )
// float                          InScale                        ( CPF_Parm )
// float                          InBlendInTime                  ( CPF_Parm )
// float                          InBlendOutTime                 ( CPF_Parm )
// unsigned long                  bInLoop                        ( CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = UObject::FindObject< UFunction > ( "Function Engine.CameraAnimInst.Play" );

	UCameraAnimInst_execPlay_Parms Play_Parms;
	Play_Parms.Anim = Anim;
	Play_Parms.CamActor = CamActor;
	Play_Parms.InRate = InRate;
	Play_Parms.InScale = InScale;
	Play_Parms.InBlendInTime = InBlendInTime;
	Play_Parms.InBlendOutTime = InBlendOutTime;
	Play_Parms.bInLoop = bInLoop;
	Play_Parms.bRandomStartTime = bRandomStartTime;
	Play_Parms.Duration = Duration;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTextureDoubleLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Spacing                        ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// struct FColor                  AltLineColor                   ( CPF_Parm )
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture2D* Tex, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureDoubleLine = NULL;

	if ( ! pFnDrawTextureDoubleLine )
		pFnDrawTextureDoubleLine = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTextureDoubleLine" );

	UCanvas_execDrawTextureDoubleLine_Parms DrawTextureDoubleLine_Parms;
	memcpy ( &DrawTextureDoubleLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureDoubleLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureDoubleLine_Parms.Perc = Perc;
	DrawTextureDoubleLine_Parms.Spacing = Spacing;
	DrawTextureDoubleLine_Parms.Width = Width;
	memcpy ( &DrawTextureDoubleLine_Parms.LineColor, &LineColor, 0x4 );
	memcpy ( &DrawTextureDoubleLine_Parms.AltLineColor, &AltLineColor, 0x4 );
	DrawTextureDoubleLine_Parms.Tex = Tex;
	DrawTextureDoubleLine_Parms.U = U;
	DrawTextureDoubleLine_Parms.V = V;
	DrawTextureDoubleLine_Parms.UL = UL;
	DrawTextureDoubleLine_Parms.VL = VL;

	pFnDrawTextureDoubleLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureDoubleLine, &DrawTextureDoubleLine_Parms, NULL );

	pFnDrawTextureDoubleLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTextureLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// class UTexture2D*              LineTexture                    ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture2D* LineTexture, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureLine = NULL;

	if ( ! pFnDrawTextureLine )
		pFnDrawTextureLine = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTextureLine" );

	UCanvas_execDrawTextureLine_Parms DrawTextureLine_Parms;
	memcpy ( &DrawTextureLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureLine_Parms.Perc = Perc;
	DrawTextureLine_Parms.Width = Width;
	memcpy ( &DrawTextureLine_Parms.LineColor, &LineColor, 0x4 );
	DrawTextureLine_Parms.LineTexture = LineTexture;
	DrawTextureLine_Parms.U = U;
	DrawTextureLine_Parms.V = V;
	DrawTextureLine_Parms.UL = UL;
	DrawTextureLine_Parms.VL = VL;

	pFnDrawTextureLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureLine, &DrawTextureLine_Parms, NULL );

	pFnDrawTextureLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          Y1                             ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void UCanvas::Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = UObject::FindObject< UFunction > ( "Function Engine.Canvas.Draw2DLine" );

	UCanvas_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedMaterialTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedMaterialTile = NULL;

	if ( ! pFnDrawRotatedMaterialTile )
		pFnDrawRotatedMaterialTile = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawRotatedMaterialTile" );

	UCanvas_execDrawRotatedMaterialTile_Parms DrawRotatedMaterialTile_Parms;
	DrawRotatedMaterialTile_Parms.Mat = Mat;
	memcpy ( &DrawRotatedMaterialTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedMaterialTile_Parms.XL = XL;
	DrawRotatedMaterialTile_Parms.YL = YL;
	DrawRotatedMaterialTile_Parms.U = U;
	DrawRotatedMaterialTile_Parms.V = V;
	DrawRotatedMaterialTile_Parms.UL = UL;
	DrawRotatedMaterialTile_Parms.VL = VL;
	DrawRotatedMaterialTile_Parms.AnchorX = AnchorX;
	DrawRotatedMaterialTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedMaterialTile, &DrawRotatedMaterialTile_Parms, NULL );

	pFnDrawRotatedMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              Tex                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedTile ( class UTexture2D* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedTile = NULL;

	if ( ! pFnDrawRotatedTile )
		pFnDrawRotatedTile = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawRotatedTile" );

	UCanvas_execDrawRotatedTile_Parms DrawRotatedTile_Parms;
	DrawRotatedTile_Parms.Tex = Tex;
	memcpy ( &DrawRotatedTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedTile_Parms.XL = XL;
	DrawRotatedTile_Parms.YL = YL;
	DrawRotatedTile_Parms.U = U;
	DrawRotatedTile_Parms.V = V;
	DrawRotatedTile_Parms.UL = UL;
	DrawRotatedTile_Parms.VL = VL;
	DrawRotatedTile_Parms.AnchorX = AnchorX;
	DrawRotatedTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedTile, &DrawRotatedTile_Parms, NULL );

	pFnDrawRotatedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.SetDrawColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned char                  A                              ( CPF_OptionalParm | CPF_Parm )

void UCanvas::SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pFnSetDrawColor = NULL;

	if ( ! pFnSetDrawColor )
		pFnSetDrawColor = UObject::FindObject< UFunction > ( "Function Engine.Canvas.SetDrawColor" );

	UCanvas_execSetDrawColor_Parms SetDrawColor_Parms;
	SetDrawColor_Parms.R = R;
	SetDrawColor_Parms.G = G;
	SetDrawColor_Parms.B = B;
	SetDrawColor_Parms.A = A;

	pFnSetDrawColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawColor, &SetDrawColor_Parms, NULL );

	pFnSetDrawColor->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawBox
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )

void UCanvas::DrawBox ( float Width, float Height )
{
	static UFunction* pFnDrawBox = NULL;

	if ( ! pFnDrawBox )
		pFnDrawBox = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawBox" );

	UCanvas_execDrawBox_Parms DrawBox_Parms;
	DrawBox_Parms.Width = Width;
	DrawBox_Parms.Height = Height;

	this->ProcessEvent ( pFnDrawBox, &DrawBox_Parms, NULL );
};

// Function Engine.Canvas.DrawRect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          RectX                          ( CPF_Parm )
// float                          RectY                          ( CPF_Parm )
// class UTexture2D*              Tex                            ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRect ( float RectX, float RectY, class UTexture2D* Tex )
{
	static UFunction* pFnDrawRect = NULL;

	if ( ! pFnDrawRect )
		pFnDrawRect = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawRect" );

	UCanvas_execDrawRect_Parms DrawRect_Parms;
	DrawRect_Parms.RectX = RectX;
	DrawRect_Parms.RectY = RectY;
	DrawRect_Parms.Tex = Tex;

	this->ProcessEvent ( pFnDrawRect, &DrawRect_Parms, NULL );
};

// Function Engine.Canvas.DrawIconSection
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          UStartPct                      ( CPF_Parm )
// float                          VStartPct                      ( CPF_Parm )
// float                          UEndPct                        ( CPF_Parm )
// float                          VEndPct                        ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawIconSection ( struct FCanvasIcon Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale )
{
	static UFunction* pFnDrawIconSection = NULL;

	if ( ! pFnDrawIconSection )
		pFnDrawIconSection = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawIconSection" );

	UCanvas_execDrawIconSection_Parms DrawIconSection_Parms;
	memcpy ( &DrawIconSection_Parms.Icon, &Icon, 0x14 );
	DrawIconSection_Parms.X = X;
	DrawIconSection_Parms.Y = Y;
	DrawIconSection_Parms.UStartPct = UStartPct;
	DrawIconSection_Parms.VStartPct = VStartPct;
	DrawIconSection_Parms.UEndPct = UEndPct;
	DrawIconSection_Parms.VEndPct = VEndPct;
	DrawIconSection_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawIconSection, &DrawIconSection_Parms, NULL );
};

// Function Engine.Canvas.DrawIcon
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale )
{
	static UFunction* pFnDrawIcon = NULL;

	if ( ! pFnDrawIcon )
		pFnDrawIcon = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawIcon" );

	UCanvas_execDrawIcon_Parms DrawIcon_Parms;
	memcpy ( &DrawIcon_Parms.Icon, &Icon, 0x14 );
	DrawIcon_Parms.X = X;
	DrawIcon_Parms.Y = Y;
	DrawIcon_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawIcon, &DrawIcon_Parms, NULL );
};

// Function Engine.Canvas.MakeIcon
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTexture2D*              Texture                        ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

struct FCanvasIcon UCanvas::MakeIcon ( class UTexture2D* Texture, float U, float V, float UL, float VL )
{
	static UFunction* pFnMakeIcon = NULL;

	if ( ! pFnMakeIcon )
		pFnMakeIcon = UObject::FindObject< UFunction > ( "Function Engine.Canvas.MakeIcon" );

	UCanvas_execMakeIcon_Parms MakeIcon_Parms;
	MakeIcon_Parms.Texture = Texture;
	MakeIcon_Parms.U = U;
	MakeIcon_Parms.V = V;
	MakeIcon_Parms.UL = UL;
	MakeIcon_Parms.VL = VL;

	this->ProcessEvent ( pFnMakeIcon, &MakeIcon_Parms, NULL );

	return MakeIcon_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawTexture
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void UCanvas::DrawTexture ( class UTexture2D* Tex, float Scale )
{
	static UFunction* pFnDrawTexture = NULL;

	if ( ! pFnDrawTexture )
		pFnDrawTexture = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTexture" );

	UCanvas_execDrawTexture_Parms DrawTexture_Parms;
	DrawTexture_Parms.Tex = Tex;
	DrawTexture_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawTexture, &DrawTexture_Parms, NULL );
};

// Function Engine.Canvas.SetClip
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetClip ( float X, float Y )
{
	static UFunction* pFnSetClip = NULL;

	if ( ! pFnSetClip )
		pFnSetClip = UObject::FindObject< UFunction > ( "Function Engine.Canvas.SetClip" );

	UCanvas_execSetClip_Parms SetClip_Parms;
	SetClip_Parms.X = X;
	SetClip_Parms.Y = Y;

	this->ProcessEvent ( pFnSetClip, &SetClip_Parms, NULL );
};

// Function Engine.Canvas.SetOrigin
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetOrigin ( float X, float Y )
{
	static UFunction* pFnSetOrigin = NULL;

	if ( ! pFnSetOrigin )
		pFnSetOrigin = UObject::FindObject< UFunction > ( "Function Engine.Canvas.SetOrigin" );

	UCanvas_execSetOrigin_Parms SetOrigin_Parms;
	SetOrigin_Parms.X = X;
	SetOrigin_Parms.Y = Y;

	this->ProcessEvent ( pFnSetOrigin, &SetOrigin_Parms, NULL );
};

// Function Engine.Canvas.SetPos
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          PosX                           ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )

void UCanvas::SetPos ( float PosX, float PosY )
{
	static UFunction* pFnSetPos = NULL;

	if ( ! pFnSetPos )
		pFnSetPos = UObject::FindObject< UFunction > ( "Function Engine.Canvas.SetPos" );

	UCanvas_execSetPos_Parms SetPos_Parms;
	SetPos_Parms.PosX = PosX;
	SetPos_Parms.PosY = PosY;

	pFnSetPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPos, &SetPos_Parms, NULL );

	pFnSetPos->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Reset
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bKeepOrigin                    ( CPF_OptionalParm | CPF_Parm )

void UCanvas::eventReset ( unsigned long bKeepOrigin )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.Canvas.Reset" );

	UCanvas_eventReset_Parms Reset_Parms;
	Reset_Parms.bKeepOrigin = bKeepOrigin;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Canvas.DrawColorizedTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_Parm )

void UCanvas::DrawColorizedTile ( class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor )
{
	static UFunction* pFnDrawColorizedTile = NULL;

	if ( ! pFnDrawColorizedTile )
		pFnDrawColorizedTile = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawColorizedTile" );

	UCanvas_execDrawColorizedTile_Parms DrawColorizedTile_Parms;
	DrawColorizedTile_Parms.Tex = Tex;
	DrawColorizedTile_Parms.XL = XL;
	DrawColorizedTile_Parms.YL = YL;
	DrawColorizedTile_Parms.U = U;
	DrawColorizedTile_Parms.V = V;
	DrawColorizedTile_Parms.UL = UL;
	DrawColorizedTile_Parms.VL = VL;
	memcpy ( &DrawColorizedTile_Parms.LColor, &LColor, 0x10 );

	pFnDrawColorizedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawColorizedTile, &DrawColorizedTile_Parms, NULL );

	pFnDrawColorizedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTileStretched
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          Left                           ( CPF_Parm )
// float                          Top                            ( CPF_Parm )
// float                          AWidth                         ( CPF_Parm )
// float                          AHeight                        ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LDrawColor                     ( CPF_Parm )
// unsigned long                  bStretchHorizontally           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStretchVertically             ( CPF_OptionalParm | CPF_Parm )
// float                          ScalingFactor                  ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTileStretched ( class UTexture2D* Tex, float Left, float Top, float AWidth, float AHeight, float U, float V, float UL, float VL, struct FLinearColor LDrawColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor )
{
	static UFunction* pFnDrawTileStretched = NULL;

	if ( ! pFnDrawTileStretched )
		pFnDrawTileStretched = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTileStretched" );

	UCanvas_execDrawTileStretched_Parms DrawTileStretched_Parms;
	DrawTileStretched_Parms.Tex = Tex;
	DrawTileStretched_Parms.Left = Left;
	DrawTileStretched_Parms.Top = Top;
	DrawTileStretched_Parms.AWidth = AWidth;
	DrawTileStretched_Parms.AHeight = AHeight;
	DrawTileStretched_Parms.U = U;
	DrawTileStretched_Parms.V = V;
	DrawTileStretched_Parms.UL = UL;
	DrawTileStretched_Parms.VL = VL;
	memcpy ( &DrawTileStretched_Parms.LDrawColor, &LDrawColor, 0x10 );
	DrawTileStretched_Parms.bStretchHorizontally = bStretchHorizontally;
	DrawTileStretched_Parms.bStretchVertically = bStretchVertically;
	DrawTileStretched_Parms.ScalingFactor = ScalingFactor;

	pFnDrawTileStretched->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTileStretched, &DrawTileStretched_Parms, NULL );

	pFnDrawTileStretched->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PopTransform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UCanvas::PopTransform ( )
{
	static UFunction* pFnPopTransform = NULL;

	if ( ! pFnPopTransform )
		pFnPopTransform = UObject::FindObject< UFunction > ( "Function Engine.Canvas.PopTransform" );

	UCanvas_execPopTransform_Parms PopTransform_Parms;

	pFnPopTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopTransform, &PopTransform_Parms, NULL );

	pFnPopTransform->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PushTranslationMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 TranslationVector              ( CPF_Parm )

void UCanvas::PushTranslationMatrix ( struct FVector TranslationVector )
{
	static UFunction* pFnPushTranslationMatrix = NULL;

	if ( ! pFnPushTranslationMatrix )
		pFnPushTranslationMatrix = UObject::FindObject< UFunction > ( "Function Engine.Canvas.PushTranslationMatrix" );

	UCanvas_execPushTranslationMatrix_Parms PushTranslationMatrix_Parms;
	memcpy ( &PushTranslationMatrix_Parms.TranslationVector, &TranslationVector, 0xC );

	pFnPushTranslationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushTranslationMatrix, &PushTranslationMatrix_Parms, NULL );

	pFnPushTranslationMatrix->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Project
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Location                       ( CPF_Parm )

struct FVector UCanvas::Project ( struct FVector Location )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = UObject::FindObject< UFunction > ( "Function Engine.Canvas.Project" );

	UCanvas_execProject_Parms Project_Parms;
	memcpy ( &Project_Parms.Location, &Location, 0xC );

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	return Project_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawTileClipped
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x01D4]
// Parameters infos:
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTileClipped ( class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTileClipped = NULL;

	if ( ! pFnDrawTileClipped )
		pFnDrawTileClipped = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTileClipped" );

	UCanvas_execDrawTileClipped_Parms DrawTileClipped_Parms;
	DrawTileClipped_Parms.Tex = Tex;
	DrawTileClipped_Parms.XL = XL;
	DrawTileClipped_Parms.YL = YL;
	DrawTileClipped_Parms.U = U;
	DrawTileClipped_Parms.V = V;
	DrawTileClipped_Parms.UL = UL;
	DrawTileClipped_Parms.VL = VL;

	unsigned long NativeIndex = pFnDrawTileClipped->iNative;
	pFnDrawTileClipped->iNative = 0;

	pFnDrawTileClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTileClipped, &DrawTileClipped_Parms, NULL );

	pFnDrawTileClipped->FunctionFlags |= 0x400;

	pFnDrawTileClipped->iNative = NativeIndex;
};

// Function Engine.Canvas.DrawTextRA
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTextRA ( struct FString Text, unsigned long CR )
{
	static UFunction* pFnDrawTextRA = NULL;

	if ( ! pFnDrawTextRA )
		pFnDrawTextRA = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTextRA" );

	UCanvas_execDrawTextRA_Parms DrawTextRA_Parms;
	memcpy ( &DrawTextRA_Parms.Text, &Text, 0xC );
	DrawTextRA_Parms.CR = CR;

	this->ProcessEvent ( pFnDrawTextRA, &DrawTextRA_Parms, NULL );
};

// Function Engine.Canvas.DrawTextClipped
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  bCheckHotKey                   ( CPF_OptionalParm | CPF_Parm )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTextClipped ( struct FString Text, unsigned long bCheckHotKey, float XScale, float YScale )
{
	static UFunction* pFnDrawTextClipped = NULL;

	if ( ! pFnDrawTextClipped )
		pFnDrawTextClipped = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTextClipped" );

	UCanvas_execDrawTextClipped_Parms DrawTextClipped_Parms;
	memcpy ( &DrawTextClipped_Parms.Text, &Text, 0xC );
	DrawTextClipped_Parms.bCheckHotKey = bCheckHotKey;
	DrawTextClipped_Parms.XScale = XScale;
	DrawTextClipped_Parms.YScale = YScale;

	pFnDrawTextClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextClipped, &DrawTextClipped_Parms, NULL );

	pFnDrawTextClipped->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawText
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale )
{
	static UFunction* pFnDrawText = NULL;

	if ( ! pFnDrawText )
		pFnDrawText = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawText" );

	UCanvas_execDrawText_Parms DrawText_Parms;
	memcpy ( &DrawText_Parms.Text, &Text, 0xC );
	DrawText_Parms.CR = CR;
	DrawText_Parms.XScale = XScale;
	DrawText_Parms.YScale = YScale;

	pFnDrawText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawText, &DrawText_Parms, NULL );

	pFnDrawText->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.TextSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::TextSize ( struct FString String, float* XL, float* YL )
{
	static UFunction* pFnTextSize = NULL;

	if ( ! pFnTextSize )
		pFnTextSize = UObject::FindObject< UFunction > ( "Function Engine.Canvas.TextSize" );

	UCanvas_execTextSize_Parms TextSize_Parms;
	memcpy ( &TextSize_Parms.String, &String, 0xC );

	pFnTextSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTextSize, &TextSize_Parms, NULL );

	pFnTextSize->FunctionFlags |= 0x400;

	if ( XL )
		*XL = TextSize_Parms.XL;

	if ( YL )
		*YL = TextSize_Parms.YL;
};

// Function Engine.Canvas.StrLen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::StrLen ( struct FString String, float* XL, float* YL )
{
	static UFunction* pFnStrLen = NULL;

	if ( ! pFnStrLen )
		pFnStrLen = UObject::FindObject< UFunction > ( "Function Engine.Canvas.StrLen" );

	UCanvas_execStrLen_Parms StrLen_Parms;
	memcpy ( &StrLen_Parms.String, &String, 0xC );

	pFnStrLen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStrLen, &StrLen_Parms, NULL );

	pFnStrLen->FunctionFlags |= 0x400;

	if ( XL )
		*XL = StrLen_Parms.XL;

	if ( YL )
		*YL = StrLen_Parms.YL;
};

// Function Engine.Canvas.DrawMaterialTileClipped
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawMaterialTileClipped ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawMaterialTileClipped = NULL;

	if ( ! pFnDrawMaterialTileClipped )
		pFnDrawMaterialTileClipped = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawMaterialTileClipped" );

	UCanvas_execDrawMaterialTileClipped_Parms DrawMaterialTileClipped_Parms;
	DrawMaterialTileClipped_Parms.Mat = Mat;
	DrawMaterialTileClipped_Parms.XL = XL;
	DrawMaterialTileClipped_Parms.YL = YL;
	DrawMaterialTileClipped_Parms.U = U;
	DrawMaterialTileClipped_Parms.V = V;
	DrawMaterialTileClipped_Parms.UL = UL;
	DrawMaterialTileClipped_Parms.VL = VL;

	pFnDrawMaterialTileClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMaterialTileClipped, &DrawMaterialTileClipped_Parms, NULL );

	pFnDrawMaterialTileClipped->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawMaterialTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawMaterialTile = NULL;

	if ( ! pFnDrawMaterialTile )
		pFnDrawMaterialTile = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawMaterialTile" );

	UCanvas_execDrawMaterialTile_Parms DrawMaterialTile_Parms;
	DrawMaterialTile_Parms.Mat = Mat;
	DrawMaterialTile_Parms.XL = XL;
	DrawMaterialTile_Parms.YL = YL;
	DrawMaterialTile_Parms.U = U;
	DrawMaterialTile_Parms.V = V;
	DrawMaterialTile_Parms.UL = UL;
	DrawMaterialTile_Parms.VL = VL;

	pFnDrawMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMaterialTile, &DrawMaterialTile_Parms, NULL );

	pFnDrawMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawQuad
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U1                             ( CPF_Parm )
// float                          v1                             ( CPF_Parm )
// float                          U2                             ( CPF_Parm )
// float                          v2                             ( CPF_Parm )
// float                          U3                             ( CPF_Parm )
// float                          V3                             ( CPF_Parm )
// float                          U4                             ( CPF_Parm )
// float                          V4                             ( CPF_Parm )

void UCanvas::DrawQuad ( class UTexture2D* Tex, float XL, float YL, float U1, float v1, float U2, float v2, float U3, float V3, float U4, float V4 )
{
	static UFunction* pFnDrawQuad = NULL;

	if ( ! pFnDrawQuad )
		pFnDrawQuad = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawQuad" );

	UCanvas_execDrawQuad_Parms DrawQuad_Parms;
	DrawQuad_Parms.Tex = Tex;
	DrawQuad_Parms.XL = XL;
	DrawQuad_Parms.YL = YL;
	DrawQuad_Parms.U1 = U1;
	DrawQuad_Parms.v1 = v1;
	DrawQuad_Parms.U2 = U2;
	DrawQuad_Parms.v2 = v2;
	DrawQuad_Parms.U3 = U3;
	DrawQuad_Parms.V3 = V3;
	DrawQuad_Parms.U4 = U4;
	DrawQuad_Parms.V4 = V4;

	pFnDrawQuad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawQuad, &DrawQuad_Parms, NULL );

	pFnDrawQuad->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawLine2D
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )

void UCanvas::DrawLine2D ( float XL, float YL )
{
	static UFunction* pFnDrawLine2D = NULL;

	if ( ! pFnDrawLine2D )
		pFnDrawLine2D = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawLine2D" );

	UCanvas_execDrawLine2D_Parms DrawLine2D_Parms;
	DrawLine2D_Parms.XL = XL;
	DrawLine2D_Parms.YL = YL;

	pFnDrawLine2D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawLine2D, &DrawLine2D_Parms, NULL );

	pFnDrawLine2D->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTile ( class UTexture2D* Tex, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTile = NULL;

	if ( ! pFnDrawTile )
		pFnDrawTile = UObject::FindObject< UFunction > ( "Function Engine.Canvas.DrawTile" );

	UCanvas_execDrawTile_Parms DrawTile_Parms;
	DrawTile_Parms.Tex = Tex;
	DrawTile_Parms.XL = XL;
	DrawTile_Parms.YL = YL;
	DrawTile_Parms.U = U;
	DrawTile_Parms.V = V;
	DrawTile_Parms.UL = UL;
	DrawTile_Parms.VL = VL;

	pFnDrawTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTile, &DrawTile_Parms, NULL );

	pFnDrawTile->FunctionFlags |= 0x400;
};

// Function Engine.cBuildManagerBase.SetThumbTimeBudget
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UcBuildManagerBase::SetThumbTimeBudget ( )
{
	static UFunction* pFnSetThumbTimeBudget = NULL;

	if ( ! pFnSetThumbTimeBudget )
		pFnSetThumbTimeBudget = UObject::FindObject< UFunction > ( "Function Engine.cBuildManagerBase.SetThumbTimeBudget" );

	UcBuildManagerBase_execSetThumbTimeBudget_Parms SetThumbTimeBudget_Parms;

	pFnSetThumbTimeBudget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetThumbTimeBudget, &SetThumbTimeBudget_Parms, NULL );

	pFnSetThumbTimeBudget->FunctionFlags |= 0x400;
};

// Function Engine.cBuildManagerBase.SetIngameTimeBudget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAction                        ( CPF_Parm )

void UcBuildManagerBase::SetIngameTimeBudget ( unsigned long bAction )
{
	static UFunction* pFnSetIngameTimeBudget = NULL;

	if ( ! pFnSetIngameTimeBudget )
		pFnSetIngameTimeBudget = UObject::FindObject< UFunction > ( "Function Engine.cBuildManagerBase.SetIngameTimeBudget" );

	UcBuildManagerBase_execSetIngameTimeBudget_Parms SetIngameTimeBudget_Parms;
	SetIngameTimeBudget_Parms.bAction = bAction;

	pFnSetIngameTimeBudget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIngameTimeBudget, &SetIngameTimeBudget_Parms, NULL );

	pFnSetIngameTimeBudget->FunctionFlags |= 0x400;
};

// Function Engine.cBuildManagerBase.SetIdleTimeBudget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bStreamWithTimeReserve         ( CPF_Parm )

void UcBuildManagerBase::SetIdleTimeBudget ( unsigned long bStreamWithTimeReserve )
{
	static UFunction* pFnSetIdleTimeBudget = NULL;

	if ( ! pFnSetIdleTimeBudget )
		pFnSetIdleTimeBudget = UObject::FindObject< UFunction > ( "Function Engine.cBuildManagerBase.SetIdleTimeBudget" );

	UcBuildManagerBase_execSetIdleTimeBudget_Parms SetIdleTimeBudget_Parms;
	SetIdleTimeBudget_Parms.bStreamWithTimeReserve = bStreamWithTimeReserve;

	pFnSetIdleTimeBudget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIdleTimeBudget, &SetIdleTimeBudget_Parms, NULL );

	pFnSetIdleTimeBudget->FunctionFlags |= 0x400;
};

// Function Engine.cBuildManagerBase.NotifyActorIrrelevant
// [0x00020000] 
// Parameters infos:
// class AActor*                  pActor                         ( CPF_Parm )

void UcBuildManagerBase::NotifyActorIrrelevant ( class AActor* pActor )
{
	static UFunction* pFnNotifyActorIrrelevant = NULL;

	if ( ! pFnNotifyActorIrrelevant )
		pFnNotifyActorIrrelevant = UObject::FindObject< UFunction > ( "Function Engine.cBuildManagerBase.NotifyActorIrrelevant" );

	UcBuildManagerBase_execNotifyActorIrrelevant_Parms NotifyActorIrrelevant_Parms;
	NotifyActorIrrelevant_Parms.pActor = pActor;

	this->ProcessEvent ( pFnNotifyActorIrrelevant, &NotifyActorIrrelevant_Parms, NULL );
};

// Function Engine.cConsoleCmdDebugPage.ActivateItem
// [0x00080000] 
// Parameters infos:

void UcConsoleCmdDebugPage::ActivateItem ( )
{
	static UFunction* pFnActivateItem = NULL;

	if ( ! pFnActivateItem )
		pFnActivateItem = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCmdDebugPage.ActivateItem" );

	UcConsoleCmdDebugPage_execActivateItem_Parms ActivateItem_Parms;

	this->ProcessEvent ( pFnActivateItem, &ActivateItem_Parms, NULL );
};

// Function Engine.cConsoleCmdDebugPage.MoveToNextItem
// [0x00080002] 
// Parameters infos:

void UcConsoleCmdDebugPage::MoveToNextItem ( )
{
	static UFunction* pFnMoveToNextItem = NULL;

	if ( ! pFnMoveToNextItem )
		pFnMoveToNextItem = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCmdDebugPage.MoveToNextItem" );

	UcConsoleCmdDebugPage_execMoveToNextItem_Parms MoveToNextItem_Parms;

	this->ProcessEvent ( pFnMoveToNextItem, &MoveToNextItem_Parms, NULL );
};

// Function Engine.cConsoleCmdDebugPage.MoveToPrevItem
// [0x00080002] 
// Parameters infos:

void UcConsoleCmdDebugPage::MoveToPrevItem ( )
{
	static UFunction* pFnMoveToPrevItem = NULL;

	if ( ! pFnMoveToPrevItem )
		pFnMoveToPrevItem = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCmdDebugPage.MoveToPrevItem" );

	UcConsoleCmdDebugPage_execMoveToPrevItem_Parms MoveToPrevItem_Parms;

	this->ProcessEvent ( pFnMoveToPrevItem, &MoveToPrevItem_Parms, NULL );
};

// Function Engine.cConsoleCmdDebugPage.DrawPage
// [0x00080002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UcConsoleCmdDebugPage::DrawPage ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawPage = NULL;

	if ( ! pFnDrawPage )
		pFnDrawPage = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCmdDebugPage.DrawPage" );

	UcConsoleCmdDebugPage_execDrawPage_Parms DrawPage_Parms;
	DrawPage_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawPage, &DrawPage_Parms, NULL );
};

// Function Engine.cConsoleCmdDebugPage.Clear
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UcConsoleCmdDebugPage::eventClear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCmdDebugPage.Clear" );

	UcConsoleCmdDebugPage_eventClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	return Clear_Parms.ReturnValue;
};

// Function Engine.cConsoleCmdDebugPage.AddItem
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 r_ItemName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 r_UsageString                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 r_HelpString                   ( CPF_Parm | CPF_NeedCtorLink )

int UcConsoleCmdDebugPage::eventAddItem ( struct FString r_ItemName, struct FString r_UsageString, struct FString r_HelpString )
{
	static UFunction* pFnAddItem = NULL;

	if ( ! pFnAddItem )
		pFnAddItem = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCmdDebugPage.AddItem" );

	UcConsoleCmdDebugPage_eventAddItem_Parms AddItem_Parms;
	memcpy ( &AddItem_Parms.r_ItemName, &r_ItemName, 0xC );
	memcpy ( &AddItem_Parms.r_UsageString, &r_UsageString, 0xC );
	memcpy ( &AddItem_Parms.r_HelpString, &r_HelpString, 0xC );

	this->ProcessEvent ( pFnAddItem, &AddItem_Parms, NULL );

	return AddItem_Parms.ReturnValue;
};

// Function Engine.cConsoleCmdDebugPage.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 r_Obj                          ( CPF_Parm )

int UcConsoleCmdDebugPage::eventInit ( class UObject* r_Obj )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCmdDebugPage.Init" );

	UcConsoleCmdDebugPage_eventInit_Parms Init_Parms;
	Init_Parms.r_Obj = r_Obj;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	return Init_Parms.ReturnValue;
};

// Function Engine.cConsoleCommand.ExecCommand_DelegateToCommandPointer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_Parm )
// TArray< struct FString >       arguments                      ( CPF_Parm | CPF_NeedCtorLink )
// class UcConsoleCommandManager* manager                        ( CPF_Parm )

bool UcConsoleCommand::ExecCommand_DelegateToCommandPointer ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager )
{
	static UFunction* pFnExecCommand_DelegateToCommandPointer = NULL;

	if ( ! pFnExecCommand_DelegateToCommandPointer )
		pFnExecCommand_DelegateToCommandPointer = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommand.ExecCommand_DelegateToCommandPointer" );

	UcConsoleCommand_execExecCommand_DelegateToCommandPointer_Parms ExecCommand_DelegateToCommandPointer_Parms;
	ExecCommand_DelegateToCommandPointer_Parms.eMode = eMode;
	memcpy ( &ExecCommand_DelegateToCommandPointer_Parms.arguments, &arguments, 0xC );
	ExecCommand_DelegateToCommandPointer_Parms.manager = manager;

	pFnExecCommand_DelegateToCommandPointer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExecCommand_DelegateToCommandPointer, &ExecCommand_DelegateToCommandPointer_Parms, NULL );

	pFnExecCommand_DelegateToCommandPointer->FunctionFlags |= 0x400;

	return ExecCommand_DelegateToCommandPointer_Parms.ReturnValue;
};

// Function Engine.cConsoleCommand.ExecCommand
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_Parm )
// TArray< struct FString >       arguments                      ( CPF_Parm | CPF_NeedCtorLink )
// class UcConsoleCommandManager* manager                        ( CPF_Parm )

bool UcConsoleCommand::ExecCommand ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager )
{
	static UFunction* pFnExecCommand = NULL;

	if ( ! pFnExecCommand )
		pFnExecCommand = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommand.ExecCommand" );

	UcConsoleCommand_execExecCommand_Parms ExecCommand_Parms;
	ExecCommand_Parms.eMode = eMode;
	memcpy ( &ExecCommand_Parms.arguments, &arguments, 0xC );
	ExecCommand_Parms.manager = manager;

	this->ProcessEvent ( pFnExecCommand, &ExecCommand_Parms, NULL );

	return ExecCommand_Parms.ReturnValue;
};

// Function Engine.cConsoleCommandManager.SendToServer
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 arguments                      ( CPF_Parm | CPF_NeedCtorLink )

void UcConsoleCommandManager::eventSendToServer ( struct FString arguments )
{
	static UFunction* pFnSendToServer = NULL;

	if ( ! pFnSendToServer )
		pFnSendToServer = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.SendToServer" );

	UcConsoleCommandManager_eventSendToServer_Parms SendToServer_Parms;
	memcpy ( &SendToServer_Parms.arguments, &arguments, 0xC );

	this->ProcessEvent ( pFnSendToServer, &SendToServer_Parms, NULL );
};

// Function Engine.cConsoleCommandManager.SendToAllClients
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 arguments                      ( CPF_Parm | CPF_NeedCtorLink )

void UcConsoleCommandManager::eventSendToAllClients ( struct FString arguments )
{
	static UFunction* pFnSendToAllClients = NULL;

	if ( ! pFnSendToAllClients )
		pFnSendToAllClients = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.SendToAllClients" );

	UcConsoleCommandManager_eventSendToAllClients_Parms SendToAllClients_Parms;
	memcpy ( &SendToAllClients_Parms.arguments, &arguments, 0xC );

	this->ProcessEvent ( pFnSendToAllClients, &SendToAllClients_Parms, NULL );
};

// Function Engine.cConsoleCommandManager.GetEngine
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UEngine*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UEngine* UcConsoleCommandManager::GetEngine ( )
{
	static UFunction* pFnGetEngine = NULL;

	if ( ! pFnGetEngine )
		pFnGetEngine = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.GetEngine" );

	UcConsoleCommandManager_execGetEngine_Parms GetEngine_Parms;

	pFnGetEngine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEngine, &GetEngine_Parms, NULL );

	pFnGetEngine->FunctionFlags |= 0x400;

	return GetEngine_Parms.ReturnValue;
};

// Function Engine.cConsoleCommandManager.GetCompletion
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 cmdStart                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       completions                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UcConsoleCommandManager::GetCompletion ( struct FString cmdStart, TArray< struct FString >* completions )
{
	static UFunction* pFnGetCompletion = NULL;

	if ( ! pFnGetCompletion )
		pFnGetCompletion = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.GetCompletion" );

	UcConsoleCommandManager_execGetCompletion_Parms GetCompletion_Parms;
	memcpy ( &GetCompletion_Parms.cmdStart, &cmdStart, 0xC );

	pFnGetCompletion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCompletion, &GetCompletion_Parms, NULL );

	pFnGetCompletion->FunctionFlags |= 0x400;

	if ( completions )
		memcpy ( completions, &GetCompletion_Parms.completions, 0xC );
};

// Function Engine.cConsoleCommandManager.LocalExec
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 arguments                      ( CPF_Parm | CPF_NeedCtorLink )

bool UcConsoleCommandManager::LocalExec ( struct FString arguments )
{
	static UFunction* pFnLocalExec = NULL;

	if ( ! pFnLocalExec )
		pFnLocalExec = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.LocalExec" );

	UcConsoleCommandManager_execLocalExec_Parms LocalExec_Parms;
	memcpy ( &LocalExec_Parms.arguments, &arguments, 0xC );

	pFnLocalExec->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLocalExec, &LocalExec_Parms, NULL );

	pFnLocalExec->FunctionFlags |= 0x400;

	return LocalExec_Parms.ReturnValue;
};

// Function Engine.cConsoleCommandManager.SafeStrToFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 str                            ( CPF_Parm | CPF_NeedCtorLink )
// int                            bIsSafe                        ( CPF_Parm | CPF_OutParm )

float UcConsoleCommandManager::SafeStrToFloat ( struct FString str, int* bIsSafe )
{
	static UFunction* pFnSafeStrToFloat = NULL;

	if ( ! pFnSafeStrToFloat )
		pFnSafeStrToFloat = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.SafeStrToFloat" );

	UcConsoleCommandManager_execSafeStrToFloat_Parms SafeStrToFloat_Parms;
	memcpy ( &SafeStrToFloat_Parms.str, &str, 0xC );

	pFnSafeStrToFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSafeStrToFloat, &SafeStrToFloat_Parms, NULL );

	pFnSafeStrToFloat->FunctionFlags |= 0x400;

	if ( bIsSafe )
		*bIsSafe = SafeStrToFloat_Parms.bIsSafe;

	return SafeStrToFloat_Parms.ReturnValue;
};

// Function Engine.cConsoleCommandManager.SafeStrToInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 str                            ( CPF_Parm | CPF_NeedCtorLink )
// int                            bIsSafe                        ( CPF_Parm | CPF_OutParm )

int UcConsoleCommandManager::SafeStrToInt ( struct FString str, int* bIsSafe )
{
	static UFunction* pFnSafeStrToInt = NULL;

	if ( ! pFnSafeStrToInt )
		pFnSafeStrToInt = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.SafeStrToInt" );

	UcConsoleCommandManager_execSafeStrToInt_Parms SafeStrToInt_Parms;
	memcpy ( &SafeStrToInt_Parms.str, &str, 0xC );

	pFnSafeStrToInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSafeStrToInt, &SafeStrToInt_Parms, NULL );

	pFnSafeStrToInt->FunctionFlags |= 0x400;

	if ( bIsSafe )
		*bIsSafe = SafeStrToInt_Parms.bIsSafe;

	return SafeStrToInt_Parms.ReturnValue;
};

// Function Engine.cConsoleCommandManager.SafeStrToBool
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 str                            ( CPF_Parm | CPF_NeedCtorLink )
// int                            bIsSafe                        ( CPF_Parm | CPF_OutParm )

bool UcConsoleCommandManager::SafeStrToBool ( struct FString str, int* bIsSafe )
{
	static UFunction* pFnSafeStrToBool = NULL;

	if ( ! pFnSafeStrToBool )
		pFnSafeStrToBool = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.SafeStrToBool" );

	UcConsoleCommandManager_execSafeStrToBool_Parms SafeStrToBool_Parms;
	memcpy ( &SafeStrToBool_Parms.str, &str, 0xC );

	pFnSafeStrToBool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSafeStrToBool, &SafeStrToBool_Parms, NULL );

	pFnSafeStrToBool->FunctionFlags |= 0x400;

	if ( bIsSafe )
		*bIsSafe = SafeStrToBool_Parms.bIsSafe;

	return SafeStrToBool_Parms.ReturnValue;
};

// Function Engine.cConsoleCommandManager.Print
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UcConsoleCommandManager::Print ( struct FString Text )
{
	static UFunction* pFnPrint = NULL;

	if ( ! pFnPrint )
		pFnPrint = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.Print" );

	UcConsoleCommandManager_execPrint_Parms Print_Parms;
	memcpy ( &Print_Parms.Text, &Text, 0xC );

	pFnPrint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrint, &Print_Parms, NULL );

	pFnPrint->FunctionFlags |= 0x400;
};

// Function Engine.cConsoleCommandManager.DestroyCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 cmdName                        ( CPF_Parm | CPF_NeedCtorLink )

void UcConsoleCommandManager::DestroyCommand ( struct FString cmdName )
{
	static UFunction* pFnDestroyCommand = NULL;

	if ( ! pFnDestroyCommand )
		pFnDestroyCommand = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.DestroyCommand" );

	UcConsoleCommandManager_execDestroyCommand_Parms DestroyCommand_Parms;
	memcpy ( &DestroyCommand_Parms.cmdName, &cmdName, 0xC );

	pFnDestroyCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyCommand, &DestroyCommand_Parms, NULL );

	pFnDestroyCommand->FunctionFlags |= 0x400;
};

// Function Engine.cConsoleCommandManager.CreateCommandScript
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 cmdName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 cmdUsage                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 cmdHelp                        ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  tObjectClass                   ( CPF_Parm )
// int                            cmdFlags                       ( CPF_Parm )
// struct FScriptDelegate         cmdDelegate                    ( CPF_Parm | CPF_NeedCtorLink )

void UcConsoleCommandManager::CreateCommandScript ( struct FString cmdName, struct FString cmdUsage, struct FString cmdHelp, class UClass* tObjectClass, int cmdFlags, struct FScriptDelegate cmdDelegate )
{
	static UFunction* pFnCreateCommandScript = NULL;

	if ( ! pFnCreateCommandScript )
		pFnCreateCommandScript = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.CreateCommandScript" );

	UcConsoleCommandManager_execCreateCommandScript_Parms CreateCommandScript_Parms;
	memcpy ( &CreateCommandScript_Parms.cmdName, &cmdName, 0xC );
	memcpy ( &CreateCommandScript_Parms.cmdUsage, &cmdUsage, 0xC );
	memcpy ( &CreateCommandScript_Parms.cmdHelp, &cmdHelp, 0xC );
	CreateCommandScript_Parms.tObjectClass = tObjectClass;
	CreateCommandScript_Parms.cmdFlags = cmdFlags;
	memcpy ( &CreateCommandScript_Parms.cmdDelegate, &cmdDelegate, 0xC );

	pFnCreateCommandScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateCommandScript, &CreateCommandScript_Parms, NULL );

	pFnCreateCommandScript->FunctionFlags |= 0x400;
};

// Function Engine.cConsoleCommandManager.ExecCommand
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_Parm )
// TArray< struct FString >       arguments                      ( CPF_Parm | CPF_NeedCtorLink )
// class UcConsoleCommandManager* manager                        ( CPF_Parm )

bool UcConsoleCommandManager::ExecCommand ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager )
{
	static UFunction* pFnExecCommand = NULL;

	if ( ! pFnExecCommand )
		pFnExecCommand = UObject::FindObject< UFunction > ( "Function Engine.cConsoleCommandManager.ExecCommand" );

	UcConsoleCommandManager_execExecCommand_Parms ExecCommand_Parms;
	ExecCommand_Parms.eMode = eMode;
	memcpy ( &ExecCommand_Parms.arguments, &arguments, 0xC );
	ExecCommand_Parms.manager = manager;

	this->ProcessEvent ( pFnExecCommand, &ExecCommand_Parms, NULL );

	return ExecCommand_Parms.ReturnValue;
};

// Function Engine.cDebugPage.UnRegisterDebugPage
// [0x00020102] 
// Parameters infos:

void UcDebugPage::UnRegisterDebugPage ( )
{
	static UFunction* pFnUnRegisterDebugPage = NULL;

	if ( ! pFnUnRegisterDebugPage )
		pFnUnRegisterDebugPage = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.UnRegisterDebugPage" );

	UcDebugPage_execUnRegisterDebugPage_Parms UnRegisterDebugPage_Parms;

	this->ProcessEvent ( pFnUnRegisterDebugPage, &UnRegisterDebugPage_Parms, NULL );
};

// Function Engine.cDebugPage.RegisterDebugPage
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UcDebugPageManager*      theManager                     ( CPF_Parm )

void UcDebugPage::eventRegisterDebugPage ( class UcDebugPageManager* theManager )
{
	static UFunction* pFnRegisterDebugPage = NULL;

	if ( ! pFnRegisterDebugPage )
		pFnRegisterDebugPage = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.RegisterDebugPage" );

	UcDebugPage_eventRegisterDebugPage_Parms RegisterDebugPage_Parms;
	RegisterDebugPage_Parms.theManager = theManager;

	this->ProcessEvent ( pFnRegisterDebugPage, &RegisterDebugPage_Parms, NULL );
};

// Function Engine.cDebugPage.UnRegisterDebugPage_native
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UcDebugPage::UnRegisterDebugPage_native ( )
{
	static UFunction* pFnUnRegisterDebugPage_native = NULL;

	if ( ! pFnUnRegisterDebugPage_native )
		pFnUnRegisterDebugPage_native = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.UnRegisterDebugPage_native" );

	UcDebugPage_execUnRegisterDebugPage_native_Parms UnRegisterDebugPage_native_Parms;

	pFnUnRegisterDebugPage_native->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnRegisterDebugPage_native, &UnRegisterDebugPage_native_Parms, NULL );

	pFnUnRegisterDebugPage_native->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.SetDebugPageCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sNewPageCategory               ( CPF_Parm | CPF_NeedCtorLink )

void UcDebugPage::SetDebugPageCategory ( struct FString sNewPageCategory )
{
	static UFunction* pFnSetDebugPageCategory = NULL;

	if ( ! pFnSetDebugPageCategory )
		pFnSetDebugPageCategory = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.SetDebugPageCategory" );

	UcDebugPage_execSetDebugPageCategory_Parms SetDebugPageCategory_Parms;
	memcpy ( &SetDebugPageCategory_Parms.sNewPageCategory, &sNewPageCategory, 0xC );

	pFnSetDebugPageCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDebugPageCategory, &SetDebugPageCategory_Parms, NULL );

	pFnSetDebugPageCategory->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.RetDebugPageCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UcDebugPage::RetDebugPageCategory ( )
{
	static UFunction* pFnRetDebugPageCategory = NULL;

	if ( ! pFnRetDebugPageCategory )
		pFnRetDebugPageCategory = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.RetDebugPageCategory" );

	UcDebugPage_execRetDebugPageCategory_Parms RetDebugPageCategory_Parms;

	pFnRetDebugPageCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetDebugPageCategory, &RetDebugPageCategory_Parms, NULL );

	pFnRetDebugPageCategory->FunctionFlags |= 0x400;

	return RetDebugPageCategory_Parms.ReturnValue;
};

// Function Engine.cDebugPage.SetDebugPageName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sNewPageName                   ( CPF_Parm | CPF_NeedCtorLink )

void UcDebugPage::SetDebugPageName ( struct FString sNewPageName )
{
	static UFunction* pFnSetDebugPageName = NULL;

	if ( ! pFnSetDebugPageName )
		pFnSetDebugPageName = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.SetDebugPageName" );

	UcDebugPage_execSetDebugPageName_Parms SetDebugPageName_Parms;
	memcpy ( &SetDebugPageName_Parms.sNewPageName, &sNewPageName, 0xC );

	pFnSetDebugPageName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDebugPageName, &SetDebugPageName_Parms, NULL );

	pFnSetDebugPageName->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.RetDebugPageName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UcDebugPage::RetDebugPageName ( )
{
	static UFunction* pFnRetDebugPageName = NULL;

	if ( ! pFnRetDebugPageName )
		pFnRetDebugPageName = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.RetDebugPageName" );

	UcDebugPage_execRetDebugPageName_Parms RetDebugPageName_Parms;

	pFnRetDebugPageName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetDebugPageName, &RetDebugPageName_Parms, NULL );

	pFnRetDebugPageName->FunctionFlags |= 0x400;

	return RetDebugPageName_Parms.ReturnValue;
};

// Function Engine.cDebugPage.CallNativePageRefresh
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPage::CallNativePageRefresh ( )
{
	static UFunction* pFnCallNativePageRefresh = NULL;

	if ( ! pFnCallNativePageRefresh )
		pFnCallNativePageRefresh = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativePageRefresh" );

	UcDebugPage_execCallNativePageRefresh_Parms CallNativePageRefresh_Parms;

	pFnCallNativePageRefresh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativePageRefresh, &CallNativePageRefresh_Parms, NULL );

	pFnCallNativePageRefresh->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativeLostFocus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPage::CallNativeLostFocus ( )
{
	static UFunction* pFnCallNativeLostFocus = NULL;

	if ( ! pFnCallNativeLostFocus )
		pFnCallNativeLostFocus = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativeLostFocus" );

	UcDebugPage_execCallNativeLostFocus_Parms CallNativeLostFocus_Parms;

	pFnCallNativeLostFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativeLostFocus, &CallNativeLostFocus_Parms, NULL );

	pFnCallNativeLostFocus->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativePageEnter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPage::CallNativePageEnter ( )
{
	static UFunction* pFnCallNativePageEnter = NULL;

	if ( ! pFnCallNativePageEnter )
		pFnCallNativePageEnter = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativePageEnter" );

	UcDebugPage_execCallNativePageEnter_Parms CallNativePageEnter_Parms;

	pFnCallNativePageEnter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativePageEnter, &CallNativePageEnter_Parms, NULL );

	pFnCallNativePageEnter->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativePageRight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPage::CallNativePageRight ( )
{
	static UFunction* pFnCallNativePageRight = NULL;

	if ( ! pFnCallNativePageRight )
		pFnCallNativePageRight = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativePageRight" );

	UcDebugPage_execCallNativePageRight_Parms CallNativePageRight_Parms;

	pFnCallNativePageRight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativePageRight, &CallNativePageRight_Parms, NULL );

	pFnCallNativePageRight->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativePageLeft
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPage::CallNativePageLeft ( )
{
	static UFunction* pFnCallNativePageLeft = NULL;

	if ( ! pFnCallNativePageLeft )
		pFnCallNativePageLeft = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativePageLeft" );

	UcDebugPage_execCallNativePageLeft_Parms CallNativePageLeft_Parms;

	pFnCallNativePageLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativePageLeft, &CallNativePageLeft_Parms, NULL );

	pFnCallNativePageLeft->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativePageDown
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPage::CallNativePageDown ( )
{
	static UFunction* pFnCallNativePageDown = NULL;

	if ( ! pFnCallNativePageDown )
		pFnCallNativePageDown = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativePageDown" );

	UcDebugPage_execCallNativePageDown_Parms CallNativePageDown_Parms;

	pFnCallNativePageDown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativePageDown, &CallNativePageDown_Parms, NULL );

	pFnCallNativePageDown->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativePageUp
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPage::CallNativePageUp ( )
{
	static UFunction* pFnCallNativePageUp = NULL;

	if ( ! pFnCallNativePageUp )
		pFnCallNativePageUp = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativePageUp" );

	UcDebugPage_execCallNativePageUp_Parms CallNativePageUp_Parms;

	pFnCallNativePageUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativePageUp, &CallNativePageUp_Parms, NULL );

	pFnCallNativePageUp->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativeRender
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UcDebugPage::CallNativeRender ( class UCanvas* Canvas )
{
	static UFunction* pFnCallNativeRender = NULL;

	if ( ! pFnCallNativeRender )
		pFnCallNativeRender = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativeRender" );

	UcDebugPage_execCallNativeRender_Parms CallNativeRender_Parms;
	CallNativeRender_Parms.Canvas = Canvas;

	pFnCallNativeRender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativeRender, &CallNativeRender_Parms, NULL );

	pFnCallNativeRender->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.CallNativeTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UcDebugPage::CallNativeTick ( float fDeltaTime )
{
	static UFunction* pFnCallNativeTick = NULL;

	if ( ! pFnCallNativeTick )
		pFnCallNativeTick = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.CallNativeTick" );

	UcDebugPage_execCallNativeTick_Parms CallNativeTick_Parms;
	CallNativeTick_Parms.fDeltaTime = fDeltaTime;

	pFnCallNativeTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallNativeTick, &CallNativeTick_Parms, NULL );

	pFnCallNativeTick->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPage.DebugPageRefresh
// [0x00120000] 
// Parameters infos:

void UcDebugPage::DebugPageRefresh ( )
{
	static UFunction* pFnDebugPageRefresh = NULL;

	if ( ! pFnDebugPageRefresh )
		pFnDebugPageRefresh = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.DebugPageRefresh" );

	UcDebugPage_execDebugPageRefresh_Parms DebugPageRefresh_Parms;

	this->ProcessEvent ( pFnDebugPageRefresh, &DebugPageRefresh_Parms, NULL );
};

// Function Engine.cDebugPage.LostFocus
// [0x00120000] 
// Parameters infos:

void UcDebugPage::LostFocus ( )
{
	static UFunction* pFnLostFocus = NULL;

	if ( ! pFnLostFocus )
		pFnLostFocus = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.LostFocus" );

	UcDebugPage_execLostFocus_Parms LostFocus_Parms;

	this->ProcessEvent ( pFnLostFocus, &LostFocus_Parms, NULL );
};

// Function Engine.cDebugPage.DebugPageEnter
// [0x00120000] 
// Parameters infos:

void UcDebugPage::DebugPageEnter ( )
{
	static UFunction* pFnDebugPageEnter = NULL;

	if ( ! pFnDebugPageEnter )
		pFnDebugPageEnter = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.DebugPageEnter" );

	UcDebugPage_execDebugPageEnter_Parms DebugPageEnter_Parms;

	this->ProcessEvent ( pFnDebugPageEnter, &DebugPageEnter_Parms, NULL );
};

// Function Engine.cDebugPage.DebugPageRight
// [0x00120000] 
// Parameters infos:

void UcDebugPage::DebugPageRight ( )
{
	static UFunction* pFnDebugPageRight = NULL;

	if ( ! pFnDebugPageRight )
		pFnDebugPageRight = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.DebugPageRight" );

	UcDebugPage_execDebugPageRight_Parms DebugPageRight_Parms;

	this->ProcessEvent ( pFnDebugPageRight, &DebugPageRight_Parms, NULL );
};

// Function Engine.cDebugPage.DebugPageLeft
// [0x00120000] 
// Parameters infos:

void UcDebugPage::DebugPageLeft ( )
{
	static UFunction* pFnDebugPageLeft = NULL;

	if ( ! pFnDebugPageLeft )
		pFnDebugPageLeft = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.DebugPageLeft" );

	UcDebugPage_execDebugPageLeft_Parms DebugPageLeft_Parms;

	this->ProcessEvent ( pFnDebugPageLeft, &DebugPageLeft_Parms, NULL );
};

// Function Engine.cDebugPage.DebugPageDown
// [0x00120000] 
// Parameters infos:

void UcDebugPage::DebugPageDown ( )
{
	static UFunction* pFnDebugPageDown = NULL;

	if ( ! pFnDebugPageDown )
		pFnDebugPageDown = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.DebugPageDown" );

	UcDebugPage_execDebugPageDown_Parms DebugPageDown_Parms;

	this->ProcessEvent ( pFnDebugPageDown, &DebugPageDown_Parms, NULL );
};

// Function Engine.cDebugPage.DebugPageUp
// [0x00120000] 
// Parameters infos:

void UcDebugPage::DebugPageUp ( )
{
	static UFunction* pFnDebugPageUp = NULL;

	if ( ! pFnDebugPageUp )
		pFnDebugPageUp = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.DebugPageUp" );

	UcDebugPage_execDebugPageUp_Parms DebugPageUp_Parms;

	this->ProcessEvent ( pFnDebugPageUp, &DebugPageUp_Parms, NULL );
};

// Function Engine.cDebugPage.RenderDebugPage
// [0x00120000] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UcDebugPage::RenderDebugPage ( class UCanvas* Canvas )
{
	static UFunction* pFnRenderDebugPage = NULL;

	if ( ! pFnRenderDebugPage )
		pFnRenderDebugPage = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.RenderDebugPage" );

	UcDebugPage_execRenderDebugPage_Parms RenderDebugPage_Parms;
	RenderDebugPage_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnRenderDebugPage, &RenderDebugPage_Parms, NULL );
};

// Function Engine.cDebugPage.TickDebugPage
// [0x00120000] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UcDebugPage::TickDebugPage ( float fDeltaTime )
{
	static UFunction* pFnTickDebugPage = NULL;

	if ( ! pFnTickDebugPage )
		pFnTickDebugPage = UObject::FindObject< UFunction > ( "Function Engine.cDebugPage.TickDebugPage" );

	UcDebugPage_execTickDebugPage_Parms TickDebugPage_Parms;
	TickDebugPage_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickDebugPage, &TickDebugPage_Parms, NULL );
};

// Function Engine.cEngineClientServerDebugManager.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   sVariableName                  ( CPF_Parm )

void AcEngineClientServerDebugManager::eventReplicatedEvent ( struct FName sVariableName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.cEngineClientServerDebugManager.ReplicatedEvent" );

	AcEngineClientServerDebugManager_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.sVariableName, &sVariableName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.cEngineConsoleCommands.RegisterEngineConsoleCommands_Script
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UcConsoleCommandManager* manager                        ( CPF_Parm )

void UcEngineConsoleCommands::eventRegisterEngineConsoleCommands_Script ( class UcConsoleCommandManager* manager )
{
	static UFunction* pFnRegisterEngineConsoleCommands_Script = NULL;

	if ( ! pFnRegisterEngineConsoleCommands_Script )
		pFnRegisterEngineConsoleCommands_Script = UObject::FindObject< UFunction > ( "Function Engine.cEngineConsoleCommands.RegisterEngineConsoleCommands_Script" );

	UcEngineConsoleCommands_eventRegisterEngineConsoleCommands_Script_Parms RegisterEngineConsoleCommands_Script_Parms;
	RegisterEngineConsoleCommands_Script_Parms.manager = manager;

	this->ProcessEvent ( pFnRegisterEngineConsoleCommands_Script, &RegisterEngineConsoleCommands_Script_Parms, NULL );
};

// Function Engine.cEngineConsoleCommands.Command_Echo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_Parm )
// TArray< struct FString >       arguments                      ( CPF_Parm | CPF_NeedCtorLink )
// class UcConsoleCommandManager* manager                        ( CPF_Parm )

bool UcEngineConsoleCommands::Command_Echo ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager )
{
	static UFunction* pFnCommand_Echo = NULL;

	if ( ! pFnCommand_Echo )
		pFnCommand_Echo = UObject::FindObject< UFunction > ( "Function Engine.cEngineConsoleCommands.Command_Echo" );

	UcEngineConsoleCommands_execCommand_Echo_Parms Command_Echo_Parms;
	Command_Echo_Parms.eMode = eMode;
	memcpy ( &Command_Echo_Parms.arguments, &arguments, 0xC );
	Command_Echo_Parms.manager = manager;

	this->ProcessEvent ( pFnCommand_Echo, &Command_Echo_Parms, NULL );

	return Command_Echo_Parms.ReturnValue;
};

// Function Engine.Controller.SendMessage
// [0x00020000] 
// Parameters infos:
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// float                          Wait                           ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AController::SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType )
{
	static UFunction* pFnSendMessage = NULL;

	if ( ! pFnSendMessage )
		pFnSendMessage = UObject::FindObject< UFunction > ( "Function Engine.Controller.SendMessage" );

	AController_execSendMessage_Parms SendMessage_Parms;
	SendMessage_Parms.Recipient = Recipient;
	memcpy ( &SendMessage_Parms.MessageType, &MessageType, 0x8 );
	SendMessage_Parms.Wait = Wait;
	SendMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSendMessage, &SendMessage_Parms, NULL );
};

// Function Engine.Controller.CurrentLevelUnloaded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventCurrentLevelUnloaded ( )
{
	static UFunction* pFnCurrentLevelUnloaded = NULL;

	if ( ! pFnCurrentLevelUnloaded )
		pFnCurrentLevelUnloaded = UObject::FindObject< UFunction > ( "Function Engine.Controller.CurrentLevelUnloaded" );

	AController_eventCurrentLevelUnloaded_Parms CurrentLevelUnloaded_Parms;

	this->ProcessEvent ( pFnCurrentLevelUnloaded, &CurrentLevelUnloaded_Parms, NULL );
};

// Function Engine.Controller.GetRouteGoalAfter
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            RouteIdx                       ( CPF_Parm )

class AActor* AController::GetRouteGoalAfter ( int RouteIdx )
{
	static UFunction* pFnGetRouteGoalAfter = NULL;

	if ( ! pFnGetRouteGoalAfter )
		pFnGetRouteGoalAfter = UObject::FindObject< UFunction > ( "Function Engine.Controller.GetRouteGoalAfter" );

	AController_execGetRouteGoalAfter_Parms GetRouteGoalAfter_Parms;
	GetRouteGoalAfter_Parms.RouteIdx = RouteIdx;

	this->ProcessEvent ( pFnGetRouteGoalAfter, &GetRouteGoalAfter_Parms, NULL );

	return GetRouteGoalAfter_Parms.ReturnValue;
};

// Function Engine.Controller.IsInCombat
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventIsInCombat ( )
{
	static UFunction* pFnIsInCombat = NULL;

	if ( ! pFnIsInCombat )
		pFnIsInCombat = UObject::FindObject< UFunction > ( "Function Engine.Controller.IsInCombat" );

	AController_eventIsInCombat_Parms IsInCombat_Parms;

	this->ProcessEvent ( pFnIsInCombat, &IsInCombat_Parms, NULL );

	return IsInCombat_Parms.ReturnValue;
};

// Function Engine.Controller.IsSpectating
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventIsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = UObject::FindObject< UFunction > ( "Function Engine.Controller.IsSpectating" );

	AController_eventIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.Controller.GetKillerController
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AController* AController::GetKillerController ( )
{
	static UFunction* pFnGetKillerController = NULL;

	if ( ! pFnGetKillerController )
		pFnGetKillerController = UObject::FindObject< UFunction > ( "Function Engine.Controller.GetKillerController" );

	AController_execGetKillerController_Parms GetKillerController_Parms;

	this->ProcessEvent ( pFnGetKillerController, &GetKillerController_Parms, NULL );

	return GetKillerController_Parms.ReturnValue;
};

// Function Engine.Controller.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AController::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = UObject::FindObject< UFunction > ( "Function Engine.Controller.OnToggleHidden" );

	AController_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Controller.OnCauseDamage
// [0x00020102] 
// Parameters infos:
// class USeqAct_CauseDamage*     Action                         ( CPF_Parm )

void AController::OnCauseDamage ( class USeqAct_CauseDamage* Action )
{
	static UFunction* pFnOnCauseDamage = NULL;

	if ( ! pFnOnCauseDamage )
		pFnOnCauseDamage = UObject::FindObject< UFunction > ( "Function Engine.Controller.OnCauseDamage" );

	AController_execOnCauseDamage_Parms OnCauseDamage_Parms;
	OnCauseDamage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnCauseDamage, &OnCauseDamage_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverClaimViolation
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewClaim                       ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool AController::NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverClaimViolation = NULL;

	if ( ! pFnNotifyCoverClaimViolation )
		pFnNotifyCoverClaimViolation = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyCoverClaimViolation" );

	AController_execNotifyCoverClaimViolation_Parms NotifyCoverClaimViolation_Parms;
	NotifyCoverClaimViolation_Parms.NewClaim = NewClaim;
	NotifyCoverClaimViolation_Parms.Link = Link;
	NotifyCoverClaimViolation_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverClaimViolation, &NotifyCoverClaimViolation_Parms, NULL );

	return NotifyCoverClaimViolation_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyCoverAdjusted
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyCoverAdjusted ( )
{
	static UFunction* pFnNotifyCoverAdjusted = NULL;

	if ( ! pFnNotifyCoverAdjusted )
		pFnNotifyCoverAdjusted = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyCoverAdjusted" );

	AController_eventNotifyCoverAdjusted_Parms NotifyCoverAdjusted_Parms;

	this->ProcessEvent ( pFnNotifyCoverAdjusted, &NotifyCoverAdjusted_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverDisabled
// [0x00020100] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

void AController::NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverDisabled = NULL;

	if ( ! pFnNotifyCoverDisabled )
		pFnNotifyCoverDisabled = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyCoverDisabled" );

	AController_execNotifyCoverDisabled_Parms NotifyCoverDisabled_Parms;
	NotifyCoverDisabled_Parms.Link = Link;
	NotifyCoverDisabled_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverDisabled, &NotifyCoverDisabled_Parms, NULL );
};

// Function Engine.Controller.OnToggleAffectedByHitEffects
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleAffectedByHitEffects* inAction                       ( CPF_Parm )

void AController::OnToggleAffectedByHitEffects ( class USeqAct_ToggleAffectedByHitEffects* inAction )
{
	static UFunction* pFnOnToggleAffectedByHitEffects = NULL;

	if ( ! pFnOnToggleAffectedByHitEffects )
		pFnOnToggleAffectedByHitEffects = UObject::FindObject< UFunction > ( "Function Engine.Controller.OnToggleAffectedByHitEffects" );

	AController_execOnToggleAffectedByHitEffects_Parms OnToggleAffectedByHitEffects_Parms;
	OnToggleAffectedByHitEffects_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleAffectedByHitEffects, &OnToggleAffectedByHitEffects_Parms, NULL );
};

// Function Engine.Controller.OnToggleGodMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleGodMode*   inAction                       ( CPF_Parm )

void AController::OnToggleGodMode ( class USeqAct_ToggleGodMode* inAction )
{
	static UFunction* pFnOnToggleGodMode = NULL;

	if ( ! pFnOnToggleGodMode )
		pFnOnToggleGodMode = UObject::FindObject< UFunction > ( "Function Engine.Controller.OnToggleGodMode" );

	AController_execOnToggleGodMode_Parms OnToggleGodMode_Parms;
	OnToggleGodMode_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleGodMode, &OnToggleGodMode_Parms, NULL );
};

// Function Engine.Controller.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AController::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = UObject::FindObject< UFunction > ( "Function Engine.Controller.OnTeleport" );

	AController_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Controller.OnMakeNoise
// [0x00020102] 
// Parameters infos:
// class USeqAct_MakeNoise*       Action                         ( CPF_Parm )

void AController::OnMakeNoise ( class USeqAct_MakeNoise* Action )
{
	static UFunction* pFnOnMakeNoise = NULL;

	if ( ! pFnOnMakeNoise )
		pFnOnMakeNoise = UObject::FindObject< UFunction > ( "Function Engine.Controller.OnMakeNoise" );

	AController_execOnMakeNoise_Parms OnMakeNoise_Parms;
	OnMakeNoise_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMakeNoise, &OnMakeNoise_Parms, NULL );
};

// Function Engine.Controller.IsDead
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsDead ( )
{
	static UFunction* pFnIsDead = NULL;

	if ( ! pFnIsDead )
		pFnIsDead = UObject::FindObject< UFunction > ( "Function Engine.Controller.IsDead" );

	AController_execIsDead_Parms IsDead_Parms;

	this->ProcessEvent ( pFnIsDead, &IsDead_Parms, NULL );

	return IsDead_Parms.ReturnValue;
};

// Function Engine.Controller.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AController::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function Engine.Controller.GetHumanReadableName" );

	AController_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Controller.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.Controller.DisplayDebug" );

	AController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Controller.StopLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AController::StopLatentExecution ( )
{
	static UFunction* pFnStopLatentExecution = NULL;

	if ( ! pFnStopLatentExecution )
		pFnStopLatentExecution = UObject::FindObject< UFunction > ( "Function Engine.Controller.StopLatentExecution" );

	AController_execStopLatentExecution_Parms StopLatentExecution_Parms;

	pFnStopLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopLatentExecution, &StopLatentExecution_Parms, NULL );

	pFnStopLatentExecution->FunctionFlags |= 0x400;
};

// Function Engine.Controller.InLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LatentActionNumber             ( CPF_Parm )

bool AController::InLatentExecution ( int LatentActionNumber )
{
	static UFunction* pFnInLatentExecution = NULL;

	if ( ! pFnInLatentExecution )
		pFnInLatentExecution = UObject::FindObject< UFunction > ( "Function Engine.Controller.InLatentExecution" );

	AController_execInLatentExecution_Parms InLatentExecution_Parms;
	InLatentExecution_Parms.LatentActionNumber = LatentActionNumber;

	pFnInLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInLatentExecution, &InLatentExecution_Parms, NULL );

	pFnInLatentExecution->FunctionFlags |= 0x400;

	return InLatentExecution_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyMissedJump
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyMissedJump ( )
{
	static UFunction* pFnNotifyMissedJump = NULL;

	if ( ! pFnNotifyMissedJump )
		pFnNotifyMissedJump = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyMissedJump" );

	AController_eventNotifyMissedJump_Parms NotifyMissedJump_Parms;

	this->ProcessEvent ( pFnNotifyMissedJump, &NotifyMissedJump_Parms, NULL );
};

// Function Engine.Controller.NotifyJumpApex
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyJumpApex ( )
{
	static UFunction* pFnNotifyJumpApex = NULL;

	if ( ! pFnNotifyJumpApex )
		pFnNotifyJumpApex = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyJumpApex" );

	AController_eventNotifyJumpApex_Parms NotifyJumpApex_Parms;

	this->ProcessEvent ( pFnNotifyJumpApex, &NotifyJumpApex_Parms, NULL );
};

// Function Engine.Controller.NotifyBump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::eventNotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyBump" );

	AController_eventNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyPhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AController::eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnNotifyPhysicsVolumeChange = NULL;

	if ( ! pFnNotifyPhysicsVolumeChange )
		pFnNotifyPhysicsVolumeChange = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyPhysicsVolumeChange" );

	AController_eventNotifyPhysicsVolumeChange_Parms NotifyPhysicsVolumeChange_Parms;
	NotifyPhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnNotifyPhysicsVolumeChange, &NotifyPhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Controller.LandingShake
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::LandingShake ( )
{
	static UFunction* pFnLandingShake = NULL;

	if ( ! pFnLandingShake )
		pFnLandingShake = UObject::FindObject< UFunction > ( "Function Engine.Controller.LandingShake" );

	AController_execLandingShake_Parms LandingShake_Parms;

	this->ProcessEvent ( pFnLandingShake, &LandingShake_Parms, NULL );

	return LandingShake_Parms.ReturnValue;
};

// Function Engine.Controller.IsAimingAt
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ATarget                        ( CPF_Parm )
// float                          Epsilon                        ( CPF_Parm )

bool AController::IsAimingAt ( class AActor* ATarget, float Epsilon )
{
	static UFunction* pFnIsAimingAt = NULL;

	if ( ! pFnIsAimingAt )
		pFnIsAimingAt = UObject::FindObject< UFunction > ( "Function Engine.Controller.IsAimingAt" );

	AController_execIsAimingAt_Parms IsAimingAt_Parms;
	IsAimingAt_Parms.ATarget = ATarget;
	IsAimingAt_Parms.Epsilon = Epsilon;

	this->ProcessEvent ( pFnIsAimingAt, &IsAimingAt_Parms, NULL );

	return IsAimingAt_Parms.ReturnValue;
};

// Function Engine.Controller.GetActorEyesViewPoint
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AController::GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = UObject::FindObject< UFunction > ( "Function Engine.Controller.GetActorEyesViewPoint" );

	AController_execGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	pFnGetActorEyesViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	pFnGetActorEyesViewPoint->FunctionFlags |= 0x400;

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Controller.RetCameraLocationAndReticuleDirection
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 CameraLocationOut              ( CPF_Parm | CPF_OutParm )
// struct FVector                 ReticuleDirectionOut           ( CPF_Parm | CPF_OutParm )

void AController::RetCameraLocationAndReticuleDirection ( struct FVector* CameraLocationOut, struct FVector* ReticuleDirectionOut )
{
	static UFunction* pFnRetCameraLocationAndReticuleDirection = NULL;

	if ( ! pFnRetCameraLocationAndReticuleDirection )
		pFnRetCameraLocationAndReticuleDirection = UObject::FindObject< UFunction > ( "Function Engine.Controller.RetCameraLocationAndReticuleDirection" );

	AController_execRetCameraLocationAndReticuleDirection_Parms RetCameraLocationAndReticuleDirection_Parms;

	pFnRetCameraLocationAndReticuleDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetCameraLocationAndReticuleDirection, &RetCameraLocationAndReticuleDirection_Parms, NULL );

	pFnRetCameraLocationAndReticuleDirection->FunctionFlags |= 0x400;

	if ( CameraLocationOut )
		memcpy ( CameraLocationOut, &RetCameraLocationAndReticuleDirection_Parms.CameraLocationOut, 0xC );

	if ( ReticuleDirectionOut )
		memcpy ( ReticuleDirectionOut, &RetCameraLocationAndReticuleDirection_Parms.ReticuleDirectionOut, 0xC );
};

// Function Engine.Controller.GetPlayerViewPoint
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AController::GetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = UObject::FindObject< UFunction > ( "Function Engine.Controller.GetPlayerViewPoint" );

	AController_execGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	pFnGetPlayerViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	pFnGetPlayerViewPoint->FunctionFlags |= 0x400;

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Controller.HandlePathObstruction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  BlockedBy                      ( CPF_Parm )

bool AController::eventHandlePathObstruction ( class AActor* BlockedBy )
{
	static UFunction* pFnHandlePathObstruction = NULL;

	if ( ! pFnHandlePathObstruction )
		pFnHandlePathObstruction = UObject::FindObject< UFunction > ( "Function Engine.Controller.HandlePathObstruction" );

	AController_eventHandlePathObstruction_Parms HandlePathObstruction_Parms;
	HandlePathObstruction_Parms.BlockedBy = BlockedBy;

	this->ProcessEvent ( pFnHandlePathObstruction, &HandlePathObstruction_Parms, NULL );

	return HandlePathObstruction_Parms.ReturnValue;
};

// Function Engine.Controller.UnderLift
// [0x00020000] 
// Parameters infos:
// class ALiftCenter*             Lift                           ( CPF_Parm )

void AController::UnderLift ( class ALiftCenter* Lift )
{
	static UFunction* pFnUnderLift = NULL;

	if ( ! pFnUnderLift )
		pFnUnderLift = UObject::FindObject< UFunction > ( "Function Engine.Controller.UnderLift" );

	AController_execUnderLift_Parms UnderLift_Parms;
	UnderLift_Parms.Lift = Lift;

	this->ProcessEvent ( pFnUnderLift, &UnderLift_Parms, NULL );
};

// Function Engine.Controller.MoverFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventMoverFinished ( )
{
	static UFunction* pFnMoverFinished = NULL;

	if ( ! pFnMoverFinished )
		pFnMoverFinished = UObject::FindObject< UFunction > ( "Function Engine.Controller.MoverFinished" );

	AController_eventMoverFinished_Parms MoverFinished_Parms;

	this->ProcessEvent ( pFnMoverFinished, &MoverFinished_Parms, NULL );

	return MoverFinished_Parms.ReturnValue;
};

// Function Engine.Controller.WaitForMover
// [0x00020002] 
// Parameters infos:
// class AInterpActor*            M                              ( CPF_Parm )

void AController::WaitForMover ( class AInterpActor* M )
{
	static UFunction* pFnWaitForMover = NULL;

	if ( ! pFnWaitForMover )
		pFnWaitForMover = UObject::FindObject< UFunction > ( "Function Engine.Controller.WaitForMover" );

	AController_execWaitForMover_Parms WaitForMover_Parms;
	WaitForMover_Parms.M = M;

	this->ProcessEvent ( pFnWaitForMover, &WaitForMover_Parms, NULL );
};

// Function Engine.Controller.AllowDetourTo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        N                              ( CPF_Parm )

bool AController::eventAllowDetourTo ( class ANavigationPoint* N )
{
	static UFunction* pFnAllowDetourTo = NULL;

	if ( ! pFnAllowDetourTo )
		pFnAllowDetourTo = UObject::FindObject< UFunction > ( "Function Engine.Controller.AllowDetourTo" );

	AController_eventAllowDetourTo_Parms AllowDetourTo_Parms;
	AllowDetourTo_Parms.N = N;

	this->ProcessEvent ( pFnAllowDetourTo, &AllowDetourTo_Parms, NULL );

	return AllowDetourTo_Parms.ReturnValue;
};

// Function Engine.Controller.LongFall
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventLongFall ( )
{
	static UFunction* pFnLongFall = NULL;

	if ( ! pFnLongFall )
		pFnLongFall = UObject::FindObject< UFunction > ( "Function Engine.Controller.LongFall" );

	AController_eventLongFall_Parms LongFall_Parms;

	this->ProcessEvent ( pFnLongFall, &LongFall_Parms, NULL );
};

// Function Engine.Controller.WaitForLanding
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x020F]
// Parameters infos:
// float                          waitDuration                   ( CPF_OptionalParm | CPF_Parm )

void AController::WaitForLanding ( float waitDuration )
{
	static UFunction* pFnWaitForLanding = NULL;

	if ( ! pFnWaitForLanding )
		pFnWaitForLanding = UObject::FindObject< UFunction > ( "Function Engine.Controller.WaitForLanding" );

	AController_execWaitForLanding_Parms WaitForLanding_Parms;
	WaitForLanding_Parms.waitDuration = waitDuration;

	unsigned long NativeIndex = pFnWaitForLanding->iNative;
	pFnWaitForLanding->iNative = 0;

	pFnWaitForLanding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWaitForLanding, &WaitForLanding_Parms, NULL );

	pFnWaitForLanding->FunctionFlags |= 0x400;

	pFnWaitForLanding->iNative = NativeIndex;
};

// Function Engine.Controller.PickWallAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020E]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::PickWallAdjust ( struct FVector HitNormal )
{
	static UFunction* pFnPickWallAdjust = NULL;

	if ( ! pFnPickWallAdjust )
		pFnPickWallAdjust = UObject::FindObject< UFunction > ( "Function Engine.Controller.PickWallAdjust" );

	AController_execPickWallAdjust_Parms PickWallAdjust_Parms;
	memcpy ( &PickWallAdjust_Parms.HitNormal, &HitNormal, 0xC );

	unsigned long NativeIndex = pFnPickWallAdjust->iNative;
	pFnPickWallAdjust->iNative = 0;

	pFnPickWallAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickWallAdjust, &PickWallAdjust_Parms, NULL );

	pFnPickWallAdjust->FunctionFlags |= 0x400;

	pFnPickWallAdjust->iNative = NativeIndex;

	return PickWallAdjust_Parms.ReturnValue;
};

// Function Engine.Controller.MoveUnreachable
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 AttemptedDest                  ( CPF_Parm )
// class AActor*                  AttemptedTarget                ( CPF_Parm )

void AController::eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = UObject::FindObject< UFunction > ( "Function Engine.Controller.MoveUnreachable" );

	AController_eventMoveUnreachable_Parms MoveUnreachable_Parms;
	memcpy ( &MoveUnreachable_Parms.AttemptedDest, &AttemptedDest, 0xC );
	MoveUnreachable_Parms.AttemptedTarget = AttemptedTarget;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function Engine.Controller.ActorReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0208]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )

bool AController::ActorReachable ( class AActor* anActor )
{
	static UFunction* pFnActorReachable = NULL;

	if ( ! pFnActorReachable )
		pFnActorReachable = UObject::FindObject< UFunction > ( "Function Engine.Controller.ActorReachable" );

	AController_execActorReachable_Parms ActorReachable_Parms;
	ActorReachable_Parms.anActor = anActor;

	unsigned long NativeIndex = pFnActorReachable->iNative;
	pFnActorReachable->iNative = 0;

	pFnActorReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorReachable, &ActorReachable_Parms, NULL );

	pFnActorReachable->FunctionFlags |= 0x400;

	pFnActorReachable->iNative = NativeIndex;

	return ActorReachable_Parms.ReturnValue;
};

// Function Engine.Controller.PointReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0209]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )

bool AController::PointReachable ( struct FVector aPoint )
{
	static UFunction* pFnPointReachable = NULL;

	if ( ! pFnPointReachable )
		pFnPointReachable = UObject::FindObject< UFunction > ( "Function Engine.Controller.PointReachable" );

	AController_execPointReachable_Parms PointReachable_Parms;
	memcpy ( &PointReachable_Parms.aPoint, &aPoint, 0xC );

	unsigned long NativeIndex = pFnPointReachable->iNative;
	pFnPointReachable->iNative = 0;

	pFnPointReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointReachable, &PointReachable_Parms, NULL );

	pFnPointReachable->FunctionFlags |= 0x400;

	pFnPointReachable->iNative = NativeIndex;

	return PointReachable_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToIntercept
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  InRouteGoal                    ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToIntercept = NULL;

	if ( ! pFnFindPathToIntercept )
		pFnFindPathToIntercept = UObject::FindObject< UFunction > ( "Function Engine.Controller.FindPathToIntercept" );

	AController_execFindPathToIntercept_Parms FindPathToIntercept_Parms;
	FindPathToIntercept_Parms.P = P;
	FindPathToIntercept_Parms.InRouteGoal = InRouteGoal;
	FindPathToIntercept_Parms.bWeightDetours = bWeightDetours;
	FindPathToIntercept_Parms.MaxPathLength = MaxPathLength;
	FindPathToIntercept_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathToIntercept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToIntercept, &FindPathToIntercept_Parms, NULL );

	pFnFindPathToIntercept->FunctionFlags |= 0x400;

	return FindPathToIntercept_Parms.ReturnValue;
};

// Function Engine.Controller.FindRandomDest
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020D]
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* AController::FindRandomDest ( )
{
	static UFunction* pFnFindRandomDest = NULL;

	if ( ! pFnFindRandomDest )
		pFnFindRandomDest = UObject::FindObject< UFunction > ( "Function Engine.Controller.FindRandomDest" );

	AController_execFindRandomDest_Parms FindRandomDest_Parms;

	unsigned long NativeIndex = pFnFindRandomDest->iNative;
	pFnFindRandomDest->iNative = 0;

	pFnFindRandomDest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindRandomDest, &FindRandomDest_Parms, NULL );

	pFnFindRandomDest->FunctionFlags |= 0x400;

	pFnFindRandomDest->iNative = NativeIndex;

	return FindRandomDest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTowardNearest
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalClass                      ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTowardNearest = NULL;

	if ( ! pFnFindPathTowardNearest )
		pFnFindPathTowardNearest = UObject::FindObject< UFunction > ( "Function Engine.Controller.FindPathTowardNearest" );

	AController_execFindPathTowardNearest_Parms FindPathTowardNearest_Parms;
	FindPathTowardNearest_Parms.GoalClass = GoalClass;
	FindPathTowardNearest_Parms.bWeightDetours = bWeightDetours;
	FindPathTowardNearest_Parms.MaxPathLength = MaxPathLength;
	FindPathTowardNearest_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathTowardNearest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTowardNearest, &FindPathTowardNearest_Parms, NULL );

	pFnFindPathTowardNearest->FunctionFlags |= 0x400;

	return FindPathTowardNearest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToward
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0205]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToward = NULL;

	if ( ! pFnFindPathToward )
		pFnFindPathToward = UObject::FindObject< UFunction > ( "Function Engine.Controller.FindPathToward" );

	AController_execFindPathToward_Parms FindPathToward_Parms;
	FindPathToward_Parms.anActor = anActor;
	FindPathToward_Parms.bWeightDetours = bWeightDetours;
	FindPathToward_Parms.MaxPathLength = MaxPathLength;
	FindPathToward_Parms.bReturnPartial = bReturnPartial;

	unsigned long NativeIndex = pFnFindPathToward->iNative;
	pFnFindPathToward->iNative = 0;

	pFnFindPathToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToward, &FindPathToward_Parms, NULL );

	pFnFindPathToward->FunctionFlags |= 0x400;

	pFnFindPathToward->iNative = NativeIndex;

	return FindPathToward_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTo
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0206]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTo = NULL;

	if ( ! pFnFindPathTo )
		pFnFindPathTo = UObject::FindObject< UFunction > ( "Function Engine.Controller.FindPathTo" );

	AController_execFindPathTo_Parms FindPathTo_Parms;
	memcpy ( &FindPathTo_Parms.aPoint, &aPoint, 0xC );
	FindPathTo_Parms.MaxPathLength = MaxPathLength;
	FindPathTo_Parms.bReturnPartial = bReturnPartial;

	unsigned long NativeIndex = pFnFindPathTo->iNative;
	pFnFindPathTo->iNative = 0;

	pFnFindPathTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTo, &FindPathTo_Parms, NULL );

	pFnFindPathTo->FunctionFlags |= 0x400;

	pFnFindPathTo->iNative = NativeIndex;

	return FindPathTo_Parms.ReturnValue;
};

// Function Engine.Controller.FinishRotation
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x01FC]
// Parameters infos:

void AController::FinishRotation ( )
{
	static UFunction* pFnFinishRotation = NULL;

	if ( ! pFnFinishRotation )
		pFnFinishRotation = UObject::FindObject< UFunction > ( "Function Engine.Controller.FinishRotation" );

	AController_execFinishRotation_Parms FinishRotation_Parms;

	unsigned long NativeIndex = pFnFinishRotation->iNative;
	pFnFinishRotation->iNative = 0;

	pFnFinishRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishRotation, &FinishRotation_Parms, NULL );

	pFnFinishRotation->FunctionFlags |= 0x400;

	pFnFinishRotation->iNative = NativeIndex;
};

// Function Engine.Controller.SetupSpecialPathAbilities
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventSetupSpecialPathAbilities ( )
{
	static UFunction* pFnSetupSpecialPathAbilities = NULL;

	if ( ! pFnSetupSpecialPathAbilities )
		pFnSetupSpecialPathAbilities = UObject::FindObject< UFunction > ( "Function Engine.Controller.SetupSpecialPathAbilities" );

	AController_eventSetupSpecialPathAbilities_Parms SetupSpecialPathAbilities_Parms;

	this->ProcessEvent ( pFnSetupSpecialPathAbilities, &SetupSpecialPathAbilities_Parms, NULL );
};

// Function Engine.Controller.MoveToward
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x01F6]
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseStrafing                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveToward = NULL;

	if ( ! pFnMoveToward )
		pFnMoveToward = UObject::FindObject< UFunction > ( "Function Engine.Controller.MoveToward" );

	AController_execMoveToward_Parms MoveToward_Parms;
	MoveToward_Parms.NewTarget = NewTarget;
	MoveToward_Parms.ViewFocus = ViewFocus;
	MoveToward_Parms.DestinationOffset = DestinationOffset;
	MoveToward_Parms.bUseStrafing = bUseStrafing;
	MoveToward_Parms.bShouldWalk = bShouldWalk;

	unsigned long NativeIndex = pFnMoveToward->iNative;
	pFnMoveToward->iNative = 0;

	pFnMoveToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToward, &MoveToward_Parms, NULL );

	pFnMoveToward->FunctionFlags |= 0x400;

	pFnMoveToward->iNative = NativeIndex;
};

// Function Engine.Controller.MoveTo
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x01F4]
// Parameters infos:
// struct FVector                 NewDestination                 ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveTo = NULL;

	if ( ! pFnMoveTo )
		pFnMoveTo = UObject::FindObject< UFunction > ( "Function Engine.Controller.MoveTo" );

	AController_execMoveTo_Parms MoveTo_Parms;
	memcpy ( &MoveTo_Parms.NewDestination, &NewDestination, 0xC );
	MoveTo_Parms.ViewFocus = ViewFocus;
	MoveTo_Parms.bShouldWalk = bShouldWalk;

	unsigned long NativeIndex = pFnMoveTo->iNative;
	pFnMoveTo->iNative = 0;

	pFnMoveTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveTo, &MoveTo_Parms, NULL );

	pFnMoveTo->FunctionFlags |= 0x400;

	pFnMoveTo->iNative = NativeIndex;
};

// Function Engine.Controller.EnemyNotVisible
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventEnemyNotVisible ( )
{
	static UFunction* pFnEnemyNotVisible = NULL;

	if ( ! pFnEnemyNotVisible )
		pFnEnemyNotVisible = UObject::FindObject< UFunction > ( "Function Engine.Controller.EnemyNotVisible" );

	AController_eventEnemyNotVisible_Parms EnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnemyNotVisible, &EnemyNotVisible_Parms, NULL );
};

// Function Engine.Controller.SeeMonster
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeeMonster ( class APawn* Seen )
{
	static UFunction* pFnSeeMonster = NULL;

	if ( ! pFnSeeMonster )
		pFnSeeMonster = UObject::FindObject< UFunction > ( "Function Engine.Controller.SeeMonster" );

	AController_eventSeeMonster_Parms SeeMonster_Parms;
	SeeMonster_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeeMonster, &SeeMonster_Parms, NULL );
};

// Function Engine.Controller.SeePlayer
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeePlayer ( class APawn* Seen )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function Engine.Controller.SeePlayer" );

	AController_eventSeePlayer_Parms SeePlayer_Parms;
	SeePlayer_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function Engine.Controller.HearNoise
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// class AActor*                  NoiseMaker                     ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void AController::eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = UObject::FindObject< UFunction > ( "Function Engine.Controller.HearNoise" );

	AController_eventHearNoise_Parms HearNoise_Parms;
	HearNoise_Parms.Loudness = Loudness;
	HearNoise_Parms.NoiseMaker = NoiseMaker;
	memcpy ( &HearNoise_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function Engine.Controller.PickTarget
// [0x00420401] ( FUNC_Final | FUNC_Native ) iNative [0x0213]
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TargetClass                    ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )
// struct FVector                 projStart                      ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// float                          bestAim                        ( CPF_Parm | CPF_OutParm )
// float                          bestDist                       ( CPF_Parm | CPF_OutParm )

class APawn* AController::PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist )
{
	static UFunction* pFnPickTarget = NULL;

	if ( ! pFnPickTarget )
		pFnPickTarget = UObject::FindObject< UFunction > ( "Function Engine.Controller.PickTarget" );

	AController_execPickTarget_Parms PickTarget_Parms;
	PickTarget_Parms.TargetClass = TargetClass;
	memcpy ( &PickTarget_Parms.FireDir, &FireDir, 0xC );
	memcpy ( &PickTarget_Parms.projStart, &projStart, 0xC );
	PickTarget_Parms.MaxRange = MaxRange;

	unsigned long NativeIndex = pFnPickTarget->iNative;
	pFnPickTarget->iNative = 0;

	pFnPickTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickTarget, &PickTarget_Parms, NULL );

	pFnPickTarget->FunctionFlags |= 0x400;

	pFnPickTarget->iNative = NativeIndex;

	if ( bestAim )
		*bestAim = PickTarget_Parms.bestAim;

	if ( bestDist )
		*bestDist = PickTarget_Parms.bestDist;

	return PickTarget_Parms.ReturnValue;
};

// Function Engine.Controller.CanSeeByPoints
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0219]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewLocation                   ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// struct FRotator                ViewRotation                   ( CPF_Parm )

bool AController::CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation )
{
	static UFunction* pFnCanSeeByPoints = NULL;

	if ( ! pFnCanSeeByPoints )
		pFnCanSeeByPoints = UObject::FindObject< UFunction > ( "Function Engine.Controller.CanSeeByPoints" );

	AController_execCanSeeByPoints_Parms CanSeeByPoints_Parms;
	memcpy ( &CanSeeByPoints_Parms.ViewLocation, &ViewLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.TestLocation, &TestLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.ViewRotation, &ViewRotation, 0xC );

	unsigned long NativeIndex = pFnCanSeeByPoints->iNative;
	pFnCanSeeByPoints->iNative = 0;

	pFnCanSeeByPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSeeByPoints, &CanSeeByPoints_Parms, NULL );

	pFnCanSeeByPoints->FunctionFlags |= 0x400;

	pFnCanSeeByPoints->iNative = NativeIndex;

	return CanSeeByPoints_Parms.ReturnValue;
};

// Function Engine.Controller.CanSee
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0215]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool AController::CanSee ( class APawn* Other )
{
	static UFunction* pFnCanSee = NULL;

	if ( ! pFnCanSee )
		pFnCanSee = UObject::FindObject< UFunction > ( "Function Engine.Controller.CanSee" );

	AController_execCanSee_Parms CanSee_Parms;
	CanSee_Parms.Other = Other;

	unsigned long NativeIndex = pFnCanSee->iNative;
	pFnCanSee->iNative = 0;

	pFnCanSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSee, &CanSee_Parms, NULL );

	pFnCanSee->FunctionFlags |= 0x400;

	pFnCanSee->iNative = NativeIndex;

	return CanSee_Parms.ReturnValue;
};

// Function Engine.Controller.LineOfSightTo
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0202]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 chkLocation                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTryAlternateTargetLoc         ( CPF_OptionalParm | CPF_Parm )

bool AController::LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = UObject::FindObject< UFunction > ( "Function Engine.Controller.LineOfSightTo" );

	AController_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;
	memcpy ( &LineOfSightTo_Parms.chkLocation, &chkLocation, 0xC );
	LineOfSightTo_Parms.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	unsigned long NativeIndex = pFnLineOfSightTo->iNative;
	pFnLineOfSightTo->iNative = 0;

	pFnLineOfSightTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	pFnLineOfSightTo->FunctionFlags |= 0x400;

	pFnLineOfSightTo->iNative = NativeIndex;

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Controller.ReceiveProjectileWarning
// [0x00020000] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::ReceiveProjectileWarning ( class AProjectile* Proj )
{
	static UFunction* pFnReceiveProjectileWarning = NULL;

	if ( ! pFnReceiveProjectileWarning )
		pFnReceiveProjectileWarning = UObject::FindObject< UFunction > ( "Function Engine.Controller.ReceiveProjectileWarning" );

	AController_execReceiveProjectileWarning_Parms ReceiveProjectileWarning_Parms;
	ReceiveProjectileWarning_Parms.Proj = Proj;

	this->ProcessEvent ( pFnReceiveProjectileWarning, &ReceiveProjectileWarning_Parms, NULL );
};

// Function Engine.Controller.ReceiveWarning
// [0x00020000] 
// Parameters infos:
// class APawn*                   Shooter                        ( CPF_Parm )
// float                          projSpeed                      ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )

void AController::ReceiveWarning ( class APawn* Shooter, float projSpeed, struct FVector FireDir )
{
	static UFunction* pFnReceiveWarning = NULL;

	if ( ! pFnReceiveWarning )
		pFnReceiveWarning = UObject::FindObject< UFunction > ( "Function Engine.Controller.ReceiveWarning" );

	AController_execReceiveWarning_Parms ReceiveWarning_Parms;
	ReceiveWarning_Parms.Shooter = Shooter;
	ReceiveWarning_Parms.projSpeed = projSpeed;
	memcpy ( &ReceiveWarning_Parms.FireDir, &FireDir, 0xC );

	this->ProcessEvent ( pFnReceiveWarning, &ReceiveWarning_Parms, NULL );
};

// Function Engine.Controller.CheckNearMiss
// [0x00020000] 
// Parameters infos:
// class APawn*                   Shooter                        ( CPF_Parm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 WeapLoc                        ( CPF_Parm )
// struct FVector                 LineDir                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  InDamageType                   ( CPF_Parm )

void AController::CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation, class UClass* InDamageType )
{
	static UFunction* pFnCheckNearMiss = NULL;

	if ( ! pFnCheckNearMiss )
		pFnCheckNearMiss = UObject::FindObject< UFunction > ( "Function Engine.Controller.CheckNearMiss" );

	AController_execCheckNearMiss_Parms CheckNearMiss_Parms;
	CheckNearMiss_Parms.Shooter = Shooter;
	CheckNearMiss_Parms.W = W;
	memcpy ( &CheckNearMiss_Parms.WeapLoc, &WeapLoc, 0xC );
	memcpy ( &CheckNearMiss_Parms.LineDir, &LineDir, 0xC );
	memcpy ( &CheckNearMiss_Parms.HitLocation, &HitLocation, 0xC );
	CheckNearMiss_Parms.InDamageType = InDamageType;

	this->ProcessEvent ( pFnCheckNearMiss, &CheckNearMiss_Parms, NULL );
};

// Function Engine.Controller.RoundHasEnded
// [0x00020002] 
// Parameters infos:
// class AActor*                  EndRoundFocus                  ( CPF_OptionalParm | CPF_Parm )

void AController::RoundHasEnded ( class AActor* EndRoundFocus )
{
	static UFunction* pFnRoundHasEnded = NULL;

	if ( ! pFnRoundHasEnded )
		pFnRoundHasEnded = UObject::FindObject< UFunction > ( "Function Engine.Controller.RoundHasEnded" );

	AController_execRoundHasEnded_Parms RoundHasEnded_Parms;
	RoundHasEnded_Parms.EndRoundFocus = EndRoundFocus;

	this->ProcessEvent ( pFnRoundHasEnded, &RoundHasEnded_Parms, NULL );
};

// Function Engine.Controller.StopFiring
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventStopFiring ( )
{
	static UFunction* pFnStopFiring = NULL;

	if ( ! pFnStopFiring )
		pFnStopFiring = UObject::FindObject< UFunction > ( "Function Engine.Controller.StopFiring" );

	AController_eventStopFiring_Parms StopFiring_Parms;

	this->ProcessEvent ( pFnStopFiring, &StopFiring_Parms, NULL );
};

// Function Engine.Controller.FireWeaponAt
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inActor                        ( CPF_Parm )

bool AController::FireWeaponAt ( class AActor* inActor )
{
	static UFunction* pFnFireWeaponAt = NULL;

	if ( ! pFnFireWeaponAt )
		pFnFireWeaponAt = UObject::FindObject< UFunction > ( "Function Engine.Controller.FireWeaponAt" );

	AController_execFireWeaponAt_Parms FireWeaponAt_Parms;
	FireWeaponAt_Parms.inActor = inActor;

	this->ProcessEvent ( pFnFireWeaponAt, &FireWeaponAt_Parms, NULL );

	return FireWeaponAt_Parms.ReturnValue;
};

// Function Engine.Controller.WarnProjExplode
// [0x00020000] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::WarnProjExplode ( class AProjectile* Proj )
{
	static UFunction* pFnWarnProjExplode = NULL;

	if ( ! pFnWarnProjExplode )
		pFnWarnProjExplode = UObject::FindObject< UFunction > ( "Function Engine.Controller.WarnProjExplode" );

	AController_execWarnProjExplode_Parms WarnProjExplode_Parms;
	WarnProjExplode_Parms.Proj = Proj;

	this->ProcessEvent ( pFnWarnProjExplode, &WarnProjExplode_Parms, NULL );
};

// Function Engine.Controller.NotifyProjLanded
// [0x00020002] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::NotifyProjLanded ( class AProjectile* Proj )
{
	static UFunction* pFnNotifyProjLanded = NULL;

	if ( ! pFnNotifyProjLanded )
		pFnNotifyProjLanded = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyProjLanded" );

	AController_execNotifyProjLanded_Parms NotifyProjLanded_Parms;
	NotifyProjLanded_Parms.Proj = Proj;

	this->ProcessEvent ( pFnNotifyProjLanded, &NotifyProjLanded_Parms, NULL );
};

// Function Engine.Controller.NotifyKilled
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )

void AController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyKilled" );

	AController_execNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.Controller.GameHasEnded
// [0x00020002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void AController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = UObject::FindObject< UFunction > ( "Function Engine.Controller.GameHasEnded" );

	AController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.Controller.SetCharacter
// [0x00020000] 
// Parameters infos:
// struct FString                 inCharacter                    ( CPF_Parm | CPF_NeedCtorLink )

void AController::SetCharacter ( struct FString inCharacter )
{
	static UFunction* pFnSetCharacter = NULL;

	if ( ! pFnSetCharacter )
		pFnSetCharacter = UObject::FindObject< UFunction > ( "Function Engine.Controller.SetCharacter" );

	AController_execSetCharacter_Parms SetCharacter_Parms;
	memcpy ( &SetCharacter_Parms.inCharacter, &inCharacter, 0xC );

	this->ProcessEvent ( pFnSetCharacter, &SetCharacter_Parms, NULL );
};

// Function Engine.Controller.ServerGivePawn
// [0x00020000] 
// Parameters infos:

void AController::ServerGivePawn ( )
{
	static UFunction* pFnServerGivePawn = NULL;

	if ( ! pFnServerGivePawn )
		pFnServerGivePawn = UObject::FindObject< UFunction > ( "Function Engine.Controller.ServerGivePawn" );

	AController_execServerGivePawn_Parms ServerGivePawn_Parms;

	this->ProcessEvent ( pFnServerGivePawn, &ServerGivePawn_Parms, NULL );
};

// Function Engine.Controller.ServerRestartPlayer
// [0x002200C0] 
// Parameters infos:

void AController::ServerRestartPlayer ( )
{
	static UFunction* pFnServerRestartPlayer = NULL;

	if ( ! pFnServerRestartPlayer )
		pFnServerRestartPlayer = UObject::FindObject< UFunction > ( "Function Engine.Controller.ServerRestartPlayer" );

	AController_execServerRestartPlayer_Parms ServerRestartPlayer_Parms;

	this->ProcessEvent ( pFnServerRestartPlayer, &ServerRestartPlayer_Parms, NULL );
};

// Function Engine.Controller.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AController::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function Engine.Controller.GetTeamNum" );

	AController_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Controller.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void AController::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = UObject::FindObject< UFunction > ( "Function Engine.Controller.InitPlayerReplicationInfo" );

	AController_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function Engine.Controller.NotifyTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function Engine.Controller.NotifyTakeHit" );

	AController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Controller.EnemyJustTeleported
// [0x00020002] 
// Parameters infos:

void AController::EnemyJustTeleported ( )
{
	static UFunction* pFnEnemyJustTeleported = NULL;

	if ( ! pFnEnemyJustTeleported )
		pFnEnemyJustTeleported = UObject::FindObject< UFunction > ( "Function Engine.Controller.EnemyJustTeleported" );

	AController_execEnemyJustTeleported_Parms EnemyJustTeleported_Parms;

	this->ProcessEvent ( pFnEnemyJustTeleported, &EnemyJustTeleported_Parms, NULL );
};

// Function Engine.Controller.BeyondFogDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewPoint                      ( CPF_Parm )
// struct FVector                 OtherPoint                     ( CPF_Parm )

bool AController::BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint )
{
	static UFunction* pFnBeyondFogDistance = NULL;

	if ( ! pFnBeyondFogDistance )
		pFnBeyondFogDistance = UObject::FindObject< UFunction > ( "Function Engine.Controller.BeyondFogDistance" );

	AController_execBeyondFogDistance_Parms BeyondFogDistance_Parms;
	memcpy ( &BeyondFogDistance_Parms.ViewPoint, &ViewPoint, 0xC );
	memcpy ( &BeyondFogDistance_Parms.OtherPoint, &OtherPoint, 0xC );

	pFnBeyondFogDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeyondFogDistance, &BeyondFogDistance_Parms, NULL );

	pFnBeyondFogDistance->FunctionFlags |= 0x400;

	return BeyondFogDistance_Parms.ReturnValue;
};

// Function Engine.Controller.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = UObject::FindObject< UFunction > ( "Function Engine.Controller.Restart" );

	AController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Controller.CleanupPRI
// [0x00020002] 
// Parameters infos:

void AController::CleanupPRI ( )
{
	static UFunction* pFnCleanupPRI = NULL;

	if ( ! pFnCleanupPRI )
		pFnCleanupPRI = UObject::FindObject< UFunction > ( "Function Engine.Controller.CleanupPRI" );

	AController_execCleanupPRI_Parms CleanupPRI_Parms;

	this->ProcessEvent ( pFnCleanupPRI, &CleanupPRI_Parms, NULL );
};

// Function Engine.Controller.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.Controller.Destroyed" );

	AController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Controller.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )

void AController::PawnDied ( class APawn* inPawn )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function Engine.Controller.PawnDied" );

	AController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.Controller.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = UObject::FindObject< UFunction > ( "Function Engine.Controller.UnPossess" );

	AController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.Controller.UpdateSex
// [0x00020002] 
// Parameters infos:

void AController::UpdateSex ( )
{
	static UFunction* pFnUpdateSex = NULL;

	if ( ! pFnUpdateSex )
		pFnUpdateSex = UObject::FindObject< UFunction > ( "Function Engine.Controller.UpdateSex" );

	AController_execUpdateSex_Parms UpdateSex_Parms;

	this->ProcessEvent ( pFnUpdateSex, &UpdateSex_Parms, NULL );
};

// Function Engine.Controller.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function Engine.Controller.Possess" );

	AController_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.Controller.OnPossess
// [0x00020002] 
// Parameters infos:
// class USeqAct_Possess*         inAction                       ( CPF_Parm )

void AController::OnPossess ( class USeqAct_Possess* inAction )
{
	static UFunction* pFnOnPossess = NULL;

	if ( ! pFnOnPossess )
		pFnOnPossess = UObject::FindObject< UFunction > ( "Function Engine.Controller.OnPossess" );

	AController_execOnPossess_Parms OnPossess_Parms;
	OnPossess_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPossess, &OnPossess_Parms, NULL );
};

// Function Engine.Controller.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.Controller.ReplicatedEvent" );

	AController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Controller.ClientSetRotation
// [0x010201C2] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// unsigned long                  bResetCamera                   ( CPF_OptionalParm | CPF_Parm )

void AController::ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = UObject::FindObject< UFunction > ( "Function Engine.Controller.ClientSetRotation" );

	AController_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );
	ClientSetRotation_Parms.bResetCamera = bResetCamera;

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Controller.ClientSetLocation
// [0x010201C2] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void AController::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnClientSetLocation = NULL;

	if ( ! pFnClientSetLocation )
		pFnClientSetLocation = UObject::FindObject< UFunction > ( "Function Engine.Controller.ClientSetLocation" );

	AController_execClientSetLocation_Parms ClientSetLocation_Parms;
	memcpy ( &ClientSetLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ClientSetLocation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetLocation, &ClientSetLocation_Parms, NULL );
};

// Function Engine.Controller.Reset
// [0x00020002] 
// Parameters infos:

void AController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.Controller.Reset" );

	AController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Controller.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Controller.PostBeginPlay" );

	AController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Controller.RouteCache_RemoveIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            InIndex                        ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_RemoveIndex ( int InIndex, int Count )
{
	static UFunction* pFnRouteCache_RemoveIndex = NULL;

	if ( ! pFnRouteCache_RemoveIndex )
		pFnRouteCache_RemoveIndex = UObject::FindObject< UFunction > ( "Function Engine.Controller.RouteCache_RemoveIndex" );

	AController_execRouteCache_RemoveIndex_Parms RouteCache_RemoveIndex_Parms;
	RouteCache_RemoveIndex_Parms.InIndex = InIndex;
	RouteCache_RemoveIndex_Parms.Count = Count;

	pFnRouteCache_RemoveIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveIndex, &RouteCache_RemoveIndex_Parms, NULL );

	pFnRouteCache_RemoveIndex->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_RemoveItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_RemoveItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_RemoveItem = NULL;

	if ( ! pFnRouteCache_RemoveItem )
		pFnRouteCache_RemoveItem = UObject::FindObject< UFunction > ( "Function Engine.Controller.RouteCache_RemoveItem" );

	AController_execRouteCache_RemoveItem_Parms RouteCache_RemoveItem_Parms;
	RouteCache_RemoveItem_Parms.Nav = Nav;

	pFnRouteCache_RemoveItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveItem, &RouteCache_RemoveItem_Parms, NULL );

	pFnRouteCache_RemoveItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_InsertItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )
// int                            Idx                            ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_InsertItem ( class ANavigationPoint* Nav, int Idx )
{
	static UFunction* pFnRouteCache_InsertItem = NULL;

	if ( ! pFnRouteCache_InsertItem )
		pFnRouteCache_InsertItem = UObject::FindObject< UFunction > ( "Function Engine.Controller.RouteCache_InsertItem" );

	AController_execRouteCache_InsertItem_Parms RouteCache_InsertItem_Parms;
	RouteCache_InsertItem_Parms.Nav = Nav;
	RouteCache_InsertItem_Parms.Idx = Idx;

	pFnRouteCache_InsertItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_InsertItem, &RouteCache_InsertItem_Parms, NULL );

	pFnRouteCache_InsertItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_AddItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_AddItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_AddItem = NULL;

	if ( ! pFnRouteCache_AddItem )
		pFnRouteCache_AddItem = UObject::FindObject< UFunction > ( "Function Engine.Controller.RouteCache_AddItem" );

	AController_execRouteCache_AddItem_Parms RouteCache_AddItem_Parms;
	RouteCache_AddItem_Parms.Nav = Nav;

	pFnRouteCache_AddItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_AddItem, &RouteCache_AddItem_Parms, NULL );

	pFnRouteCache_AddItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_Empty
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::RouteCache_Empty ( )
{
	static UFunction* pFnRouteCache_Empty = NULL;

	if ( ! pFnRouteCache_Empty )
		pFnRouteCache_Empty = UObject::FindObject< UFunction > ( "Function Engine.Controller.RouteCache_Empty" );

	AController_execRouteCache_Empty_Parms RouteCache_Empty_Parms;

	pFnRouteCache_Empty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_Empty, &RouteCache_Empty_Parms, NULL );

	pFnRouteCache_Empty->FunctionFlags |= 0x400;
};

// Function Engine.Controller.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = UObject::FindObject< UFunction > ( "Function Engine.Controller.IsLocalPlayerController" );

	AController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetGameModeURLString
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bIsSessionHost                 ( CPF_Parm )

struct FString APlayerController::GetGameModeURLString ( unsigned long bIsSessionHost )
{
	static UFunction* pFnGetGameModeURLString = NULL;

	if ( ! pFnGetGameModeURLString )
		pFnGetGameModeURLString = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetGameModeURLString" );

	APlayerController_execGetGameModeURLString_Parms GetGameModeURLString_Parms;
	GetGameModeURLString_Parms.bIsSessionHost = bIsSessionHost;

	this->ProcessEvent ( pFnGetGameModeURLString, &GetGameModeURLString_Parms, NULL );

	return GetGameModeURLString_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyModeURLString
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bIsPartyLeader                 ( CPF_Parm )

struct FString APlayerController::GetPartyModeURLString ( unsigned long bIsPartyLeader )
{
	static UFunction* pFnGetPartyModeURLString = NULL;

	if ( ! pFnGetPartyModeURLString )
		pFnGetPartyModeURLString = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetPartyModeURLString" );

	APlayerController_execGetPartyModeURLString_Parms GetPartyModeURLString_Parms;
	GetPartyModeURLString_Parms.bIsPartyLeader = bIsPartyLeader;

	this->ProcessEvent ( pFnGetPartyModeURLString, &GetPartyModeURLString_Parms, NULL );

	return GetPartyModeURLString_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyGameTypeName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPartyGameTypeName ( )
{
	static UFunction* pFnGetPartyGameTypeName = NULL;

	if ( ! pFnGetPartyGameTypeName )
		pFnGetPartyGameTypeName = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetPartyGameTypeName" );

	APlayerController_execGetPartyGameTypeName_Parms GetPartyGameTypeName_Parms;

	this->ProcessEvent ( pFnGetPartyGameTypeName, &GetPartyGameTypeName_Parms, NULL );

	return GetPartyGameTypeName_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyMapName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPartyMapName ( )
{
	static UFunction* pFnGetPartyMapName = NULL;

	if ( ! pFnGetPartyMapName )
		pFnGetPartyMapName = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetPartyMapName" );

	APlayerController_execGetPartyMapName_Parms GetPartyMapName_Parms;

	this->ProcessEvent ( pFnGetPartyMapName, &GetPartyMapName_Parms, NULL );

	return GetPartyMapName_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientReturnToParty
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientReturnToParty ( )
{
	static UFunction* pFnClientReturnToParty = NULL;

	if ( ! pFnClientReturnToParty )
		pFnClientReturnToParty = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientReturnToParty" );

	APlayerController_execClientReturnToParty_Parms ClientReturnToParty_Parms;

	this->ProcessEvent ( pFnClientReturnToParty, &ClientReturnToParty_Parms, NULL );
};

// Function Engine.PlayerController.OnJoinTravelToSessionComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinTravelToSessionComplete = NULL;

	if ( ! pFnOnJoinTravelToSessionComplete )
		pFnOnJoinTravelToSessionComplete = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnJoinTravelToSessionComplete" );

	APlayerController_execOnJoinTravelToSessionComplete_Parms OnJoinTravelToSessionComplete_Parms;
	memcpy ( &OnJoinTravelToSessionComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinTravelToSessionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinTravelToSessionComplete, &OnJoinTravelToSessionComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientTravelToSession
// [0x018201C2] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void APlayerController::ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnClientTravelToSession = NULL;

	if ( ! pFnClientTravelToSession )
		pFnClientTravelToSession = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientTravelToSession" );

	APlayerController_execClientTravelToSession_Parms ClientTravelToSession_Parms;
	memcpy ( &ClientTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	ClientTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &ClientTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x40 );

	this->ProcessEvent ( pFnClientTravelToSession, &ClientTravelToSession_Parms, NULL );
};

// Function Engine.PlayerController.ShowSurvey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 QuestionId                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Context                        ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ShowSurvey ( struct FString QuestionId, struct FString Context )
{
	static UFunction* pFnShowSurvey = NULL;

	if ( ! pFnShowSurvey )
		pFnShowSurvey = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ShowSurvey" );

	APlayerController_execShowSurvey_Parms ShowSurvey_Parms;
	memcpy ( &ShowSurvey_Parms.QuestionId, &QuestionId, 0xC );
	memcpy ( &ShowSurvey_Parms.Context, &Context, 0xC );

	pFnShowSurvey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowSurvey, &ShowSurvey_Parms, NULL );

	pFnShowSurvey->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientShowSurvey
// [0x010201C2] 
// Parameters infos:
// struct FString                 QuestionId                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Context                        ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientShowSurvey ( struct FString QuestionId, struct FString Context )
{
	static UFunction* pFnClientShowSurvey = NULL;

	if ( ! pFnClientShowSurvey )
		pFnClientShowSurvey = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientShowSurvey" );

	APlayerController_execClientShowSurvey_Parms ClientShowSurvey_Parms;
	memcpy ( &ClientShowSurvey_Parms.QuestionId, &QuestionId, 0xC );
	memcpy ( &ClientShowSurvey_Parms.Context, &Context, 0xC );

	this->ProcessEvent ( pFnClientShowSurvey, &ClientShowSurvey_Parms, NULL );
};

// Function Engine.PlayerController.PathClear
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::PathClear ( )
{
	static UFunction* pFnPathClear = NULL;

	if ( ! pFnPathClear )
		pFnPathClear = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PathClear" );

	APlayerController_execPathClear_Parms PathClear_Parms;

	this->ProcessEvent ( pFnPathClear, &PathClear_Parms, NULL );
};

// Function Engine.PlayerController.PathChild
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathChild ( int Cnt )
{
	static UFunction* pFnPathChild = NULL;

	if ( ! pFnPathChild )
		pFnPathChild = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PathChild" );

	APlayerController_execPathChild_Parms PathChild_Parms;
	PathChild_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathChild, &PathChild_Parms, NULL );
};

// Function Engine.PlayerController.PathStep
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathStep ( int Cnt )
{
	static UFunction* pFnPathStep = NULL;

	if ( ! pFnPathStep )
		pFnPathStep = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PathStep" );

	APlayerController_execPathStep_Parms PathStep_Parms;
	PathStep_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathStep, &PathStep_Parms, NULL );
};

// Function Engine.PlayerController.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::eventSoakPause ( class APawn* P )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SoakPause" );

	APlayerController_eventSoakPause_Parms SoakPause_Parms;
	SoakPause_Parms.P = P;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
// [0x00020002] 
// Parameters infos:

void APlayerController::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IncrementNumberOfMatchesPlayed" );

	APlayerController_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.PlayerController.MovementKeyIsUpOnServer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::MovementKeyIsUpOnServer ( )
{
	static UFunction* pFnMovementKeyIsUpOnServer = NULL;

	if ( ! pFnMovementKeyIsUpOnServer )
		pFnMovementKeyIsUpOnServer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.MovementKeyIsUpOnServer" );

	APlayerController_execMovementKeyIsUpOnServer_Parms MovementKeyIsUpOnServer_Parms;

	pFnMovementKeyIsUpOnServer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovementKeyIsUpOnServer, &MovementKeyIsUpOnServer_Parms, NULL );

	pFnMovementKeyIsUpOnServer->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.MovementKeyIsDownOnServer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::MovementKeyIsDownOnServer ( )
{
	static UFunction* pFnMovementKeyIsDownOnServer = NULL;

	if ( ! pFnMovementKeyIsDownOnServer )
		pFnMovementKeyIsDownOnServer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.MovementKeyIsDownOnServer" );

	APlayerController_execMovementKeyIsDownOnServer_Parms MovementKeyIsDownOnServer_Parms;

	pFnMovementKeyIsDownOnServer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovementKeyIsDownOnServer, &MovementKeyIsDownOnServer_Parms, NULL );

	pFnMovementKeyIsDownOnServer->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.CanViewUserCreatedContent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanViewUserCreatedContent ( )
{
	static UFunction* pFnCanViewUserCreatedContent = NULL;

	if ( ! pFnCanViewUserCreatedContent )
		pFnCanViewUserCreatedContent = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CanViewUserCreatedContent" );

	APlayerController_execCanViewUserCreatedContent_Parms CanViewUserCreatedContent_Parms;

	this->ProcessEvent ( pFnCanViewUserCreatedContent, &CanViewUserCreatedContent_Parms, NULL );

	return CanViewUserCreatedContent_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerRegisterClientStatGuid
// [0x002200C0] 
// Parameters infos:
// struct FString                 StatGuid                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerRegisterClientStatGuid ( struct FString StatGuid )
{
	static UFunction* pFnServerRegisterClientStatGuid = NULL;

	if ( ! pFnServerRegisterClientStatGuid )
		pFnServerRegisterClientStatGuid = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerRegisterClientStatGuid" );

	APlayerController_execServerRegisterClientStatGuid_Parms ServerRegisterClientStatGuid_Parms;
	memcpy ( &ServerRegisterClientStatGuid_Parms.StatGuid, &StatGuid, 0xC );

	this->ProcessEvent ( pFnServerRegisterClientStatGuid, &ServerRegisterClientStatGuid_Parms, NULL );
};

// Function Engine.PlayerController.OnRegisterHostStatGuidComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnRegisterHostStatGuidComplete" );

	APlayerController_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterHostStatGuid
// [0x010201C2] 
// Parameters infos:
// struct FString                 StatGuid                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientRegisterHostStatGuid ( struct FString StatGuid )
{
	static UFunction* pFnClientRegisterHostStatGuid = NULL;

	if ( ! pFnClientRegisterHostStatGuid )
		pFnClientRegisterHostStatGuid = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientRegisterHostStatGuid" );

	APlayerController_execClientRegisterHostStatGuid_Parms ClientRegisterHostStatGuid_Parms;
	memcpy ( &ClientRegisterHostStatGuid_Parms.StatGuid, &StatGuid, 0xC );

	this->ProcessEvent ( pFnClientRegisterHostStatGuid, &ClientRegisterHostStatGuid_Parms, NULL );
};

// Function Engine.PlayerController.EnableDebugCamera
// [0x00820002] 
// Parameters infos:

void APlayerController::EnableDebugCamera ( )
{
	static UFunction* pFnEnableDebugCamera = NULL;

	if ( ! pFnEnableDebugCamera )
		pFnEnableDebugCamera = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.EnableDebugCamera" );

	APlayerController_execEnableDebugCamera_Parms EnableDebugCamera_Parms;

	this->ProcessEvent ( pFnEnableDebugCamera, &EnableDebugCamera_Parms, NULL );
};

// Function Engine.PlayerController.RemoveDebugText
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AActor*                  SrcActor                       ( CPF_Parm )

void APlayerController::eventRemoveDebugText ( class AActor* SrcActor )
{
	static UFunction* pFnRemoveDebugText = NULL;

	if ( ! pFnRemoveDebugText )
		pFnRemoveDebugText = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.RemoveDebugText" );

	APlayerController_eventRemoveDebugText_Parms RemoveDebugText_Parms;
	RemoveDebugText_Parms.SrcActor = SrcActor;

	this->ProcessEvent ( pFnRemoveDebugText, &RemoveDebugText_Parms, NULL );
};

// Function Engine.PlayerController.CommandManagerBridge_Server
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// struct FString                 str                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::CommandManagerBridge_Server ( struct FString str )
{
	static UFunction* pFnCommandManagerBridge_Server = NULL;

	if ( ! pFnCommandManagerBridge_Server )
		pFnCommandManagerBridge_Server = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CommandManagerBridge_Server" );

	APlayerController_execCommandManagerBridge_Server_Parms CommandManagerBridge_Server_Parms;
	memcpy ( &CommandManagerBridge_Server_Parms.str, &str, 0xC );

	pFnCommandManagerBridge_Server->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCommandManagerBridge_Server, &CommandManagerBridge_Server_Parms, NULL );

	pFnCommandManagerBridge_Server->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.CommandManagerBridge_Client
// [0x010205C0] ( FUNC_Native )
// Parameters infos:
// struct FString                 str                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::CommandManagerBridge_Client ( struct FString str )
{
	static UFunction* pFnCommandManagerBridge_Client = NULL;

	if ( ! pFnCommandManagerBridge_Client )
		pFnCommandManagerBridge_Client = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CommandManagerBridge_Client" );

	APlayerController_execCommandManagerBridge_Client_Parms CommandManagerBridge_Client_Parms;
	memcpy ( &CommandManagerBridge_Client_Parms.str, &str, 0xC );

	pFnCommandManagerBridge_Client->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCommandManagerBridge_Client, &CommandManagerBridge_Client_Parms, NULL );

	pFnCommandManagerBridge_Client->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.AddDebugText
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 DebugText                      ( CPF_Parm | CPF_NeedCtorLink )
// class AActor*                  SrcActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Offset                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 DesiredOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  TextColor                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverwriteCheck            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck )
{
	static UFunction* pFnAddDebugText = NULL;

	if ( ! pFnAddDebugText )
		pFnAddDebugText = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AddDebugText" );

	APlayerController_eventAddDebugText_Parms AddDebugText_Parms;
	memcpy ( &AddDebugText_Parms.DebugText, &DebugText, 0xC );
	AddDebugText_Parms.SrcActor = SrcActor;
	AddDebugText_Parms.Duration = Duration;
	memcpy ( &AddDebugText_Parms.Offset, &Offset, 0xC );
	memcpy ( &AddDebugText_Parms.DesiredOffset, &DesiredOffset, 0xC );
	memcpy ( &AddDebugText_Parms.TextColor, &TextColor, 0x4 );
	AddDebugText_Parms.bSkipOverwriteCheck = bSkipOverwriteCheck;

	this->ProcessEvent ( pFnAddDebugText, &AddDebugText_Parms, NULL );
};

// Function Engine.PlayerController.DrawDebugTextList
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// float                          RenderDelta                    ( CPF_Parm )

void APlayerController::DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta )
{
	static UFunction* pFnDrawDebugTextList = NULL;

	if ( ! pFnDrawDebugTextList )
		pFnDrawDebugTextList = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.DrawDebugTextList" );

	APlayerController_execDrawDebugTextList_Parms DrawDebugTextList_Parms;
	DrawDebugTextList_Parms.Canvas = Canvas;
	DrawDebugTextList_Parms.RenderDelta = RenderDelta;

	this->ProcessEvent ( pFnDrawDebugTextList, &DrawDebugTextList_Parms, NULL );
};

// Function Engine.PlayerController.SendToConsole
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::SendToConsole ( struct FString Command )
{
	static UFunction* pFnSendToConsole = NULL;

	if ( ! pFnSendToConsole )
		pFnSendToConsole = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SendToConsole" );

	APlayerController_execSendToConsole_Parms SendToConsole_Parms;
	memcpy ( &SendToConsole_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnSendToConsole, &SendToConsole_Parms, NULL );
};

// Function Engine.PlayerController.ConsoleKey
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )

void APlayerController::ConsoleKey ( struct FName Key )
{
	static UFunction* pFnConsoleKey = NULL;

	if ( ! pFnConsoleKey )
		pFnConsoleKey = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ConsoleKey" );

	APlayerController_execConsoleKey_Parms ConsoleKey_Parms;
	memcpy ( &ConsoleKey_Parms.Key, &Key, 0x8 );

	this->ProcessEvent ( pFnConsoleKey, &ConsoleKey_Parms, NULL );
};

// Function Engine.PlayerController.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void APlayerController::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnDestroy" );

	APlayerController_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdjustMusicTrackVolume
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    ( CPF_Parm )
// float                          AdjustVolumeDuration           ( CPF_Parm )
// float                          AdjustVolumeLevel              ( CPF_Parm )

void APlayerController::eventClientAdjustMusicTrackVolume ( class USeqAct_CrossFadeMusicTracks* MusicAction, float AdjustVolumeDuration, float AdjustVolumeLevel )
{
	static UFunction* pFnClientAdjustMusicTrackVolume = NULL;

	if ( ! pFnClientAdjustMusicTrackVolume )
		pFnClientAdjustMusicTrackVolume = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientAdjustMusicTrackVolume" );

	APlayerController_eventClientAdjustMusicTrackVolume_Parms ClientAdjustMusicTrackVolume_Parms;
	ClientAdjustMusicTrackVolume_Parms.MusicAction = MusicAction;
	ClientAdjustMusicTrackVolume_Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	ClientAdjustMusicTrackVolume_Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	this->ProcessEvent ( pFnClientAdjustMusicTrackVolume, &ClientAdjustMusicTrackVolume_Parms, NULL );
};

// Function Engine.PlayerController.ClientFadeOutMusicTrack
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    ( CPF_Parm )
// float                          FadeOutTime                    ( CPF_Parm )
// float                          FadeOutVolumeLevel             ( CPF_Parm )

void APlayerController::eventClientFadeOutMusicTrack ( class USeqAct_CrossFadeMusicTracks* MusicAction, float FadeOutTime, float FadeOutVolumeLevel )
{
	static UFunction* pFnClientFadeOutMusicTrack = NULL;

	if ( ! pFnClientFadeOutMusicTrack )
		pFnClientFadeOutMusicTrack = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientFadeOutMusicTrack" );

	APlayerController_eventClientFadeOutMusicTrack_Parms ClientFadeOutMusicTrack_Parms;
	ClientFadeOutMusicTrack_Parms.MusicAction = MusicAction;
	ClientFadeOutMusicTrack_Parms.FadeOutTime = FadeOutTime;
	ClientFadeOutMusicTrack_Parms.FadeOutVolumeLevel = FadeOutVolumeLevel;

	this->ProcessEvent ( pFnClientFadeOutMusicTrack, &ClientFadeOutMusicTrack_Parms, NULL );
};

// Function Engine.PlayerController.ClientCrossFadeMusicTrack_PlayTrack
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    ( CPF_Parm )
// struct FMusicTrackStruct       MusicTrack                     ( CPF_Parm )

void APlayerController::eventClientCrossFadeMusicTrack_PlayTrack ( class USeqAct_CrossFadeMusicTracks* MusicAction, struct FMusicTrackStruct MusicTrack )
{
	static UFunction* pFnClientCrossFadeMusicTrack_PlayTrack = NULL;

	if ( ! pFnClientCrossFadeMusicTrack_PlayTrack )
		pFnClientCrossFadeMusicTrack_PlayTrack = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientCrossFadeMusicTrack_PlayTrack" );

	APlayerController_eventClientCrossFadeMusicTrack_PlayTrack_Parms ClientCrossFadeMusicTrack_PlayTrack_Parms;
	ClientCrossFadeMusicTrack_PlayTrack_Parms.MusicAction = MusicAction;
	memcpy ( &ClientCrossFadeMusicTrack_PlayTrack_Parms.MusicTrack, &MusicTrack, 0x24 );

	this->ProcessEvent ( pFnClientCrossFadeMusicTrack_PlayTrack, &ClientCrossFadeMusicTrack_PlayTrack_Parms, NULL );
};

// Function Engine.PlayerController.ServerSendMusicInfo
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerSendMusicInfo ( )
{
	static UFunction* pFnServerSendMusicInfo = NULL;

	if ( ! pFnServerSendMusicInfo )
		pFnServerSendMusicInfo = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerSendMusicInfo" );

	APlayerController_execServerSendMusicInfo_Parms ServerSendMusicInfo_Parms;

	this->ProcessEvent ( pFnServerSendMusicInfo, &ServerSendMusicInfo_Parms, NULL );
};

// Function Engine.PlayerController.ClientStartNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStartNetworkedVoice ( )
{
	static UFunction* pFnClientStartNetworkedVoice = NULL;

	if ( ! pFnClientStartNetworkedVoice )
		pFnClientStartNetworkedVoice = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientStartNetworkedVoice" );

	APlayerController_execClientStartNetworkedVoice_Parms ClientStartNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStartNetworkedVoice, &ClientStartNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStopNetworkedVoice ( )
{
	static UFunction* pFnClientStopNetworkedVoice = NULL;

	if ( ! pFnClientStopNetworkedVoice )
		pFnClientStopNetworkedVoice = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientStopNetworkedVoice" );

	APlayerController_execClientStopNetworkedVoice_Parms ClientStopNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStopNetworkedVoice, &ClientStopNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHostUniqueId
// [0x010201C0] 
// Parameters infos:
// struct FUniqueNetId            InHostId                       ( CPF_Parm )

void APlayerController::ClientSetHostUniqueId ( struct FUniqueNetId InHostId )
{
	static UFunction* pFnClientSetHostUniqueId = NULL;

	if ( ! pFnClientSetHostUniqueId )
		pFnClientSetHostUniqueId = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetHostUniqueId" );

	APlayerController_execClientSetHostUniqueId_Parms ClientSetHostUniqueId_Parms;
	memcpy ( &ClientSetHostUniqueId_Parms.InHostId, &InHostId, 0x8 );

	this->ProcessEvent ( pFnClientSetHostUniqueId, &ClientSetHostUniqueId_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteOnlinePlayerScores
// [0x018201C2] 
// Parameters infos:

void APlayerController::ClientWriteOnlinePlayerScores ( )
{
	static UFunction* pFnClientWriteOnlinePlayerScores = NULL;

	if ( ! pFnClientWriteOnlinePlayerScores )
		pFnClientWriteOnlinePlayerScores = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientWriteOnlinePlayerScores" );

	APlayerController_execClientWriteOnlinePlayerScores_Parms ClientWriteOnlinePlayerScores_Parms;

	this->ProcessEvent ( pFnClientWriteOnlinePlayerScores, &ClientWriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.PlayerController.ClientArbitratedMatchEnded
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientArbitratedMatchEnded ( )
{
	static UFunction* pFnClientArbitratedMatchEnded = NULL;

	if ( ! pFnClientArbitratedMatchEnded )
		pFnClientArbitratedMatchEnded = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientArbitratedMatchEnded" );

	APlayerController_execClientArbitratedMatchEnded_Parms ClientArbitratedMatchEnded_Parms;

	this->ProcessEvent ( pFnClientArbitratedMatchEnded, &ClientArbitratedMatchEnded_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyNotEnoughSpaceInInvite ( )
{
	static UFunction* pFnNotifyNotEnoughSpaceInInvite = NULL;

	if ( ! pFnNotifyNotEnoughSpaceInInvite )
		pFnNotifyNotEnoughSpaceInInvite = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite" );

	APlayerController_execNotifyNotEnoughSpaceInInvite_Parms NotifyNotEnoughSpaceInInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotEnoughSpaceInInvite, &NotifyNotEnoughSpaceInInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyNotAllPlayersCanJoinInvite ( )
{
	static UFunction* pFnNotifyNotAllPlayersCanJoinInvite = NULL;

	if ( ! pFnNotifyNotAllPlayersCanJoinInvite )
		pFnNotifyNotAllPlayersCanJoinInvite = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite" );

	APlayerController_execNotifyNotAllPlayersCanJoinInvite_Parms NotifyNotAllPlayersCanJoinInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotAllPlayersCanJoinInvite, &NotifyNotAllPlayersCanJoinInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyInviteFailed
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyInviteFailed ( )
{
	static UFunction* pFnNotifyInviteFailed = NULL;

	if ( ! pFnNotifyInviteFailed )
		pFnNotifyInviteFailed = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NotifyInviteFailed" );

	APlayerController_execNotifyInviteFailed_Parms NotifyInviteFailed_Parms;

	this->ProcessEvent ( pFnNotifyInviteFailed, &NotifyInviteFailed_Parms, NULL );
};

// Function Engine.PlayerController.OnInviteJoinComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnInviteJoinComplete = NULL;

	if ( ! pFnOnInviteJoinComplete )
		pFnOnInviteJoinComplete = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnInviteJoinComplete" );

	APlayerController_execOnInviteJoinComplete_Parms OnInviteJoinComplete_Parms;
	memcpy ( &OnInviteJoinComplete_Parms.SessionName, &SessionName, 0x8 );
	OnInviteJoinComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnInviteJoinComplete, &OnInviteJoinComplete_Parms, NULL );
};

// Function Engine.PlayerController.OnDestroyForInviteComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyForInviteComplete = NULL;

	if ( ! pFnOnDestroyForInviteComplete )
		pFnOnDestroyForInviteComplete = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnDestroyForInviteComplete" );

	APlayerController_execOnDestroyForInviteComplete_Parms OnDestroyForInviteComplete_Parms;
	memcpy ( &OnDestroyForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyForInviteComplete, &OnDestroyForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.OnEndForInviteComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndForInviteComplete = NULL;

	if ( ! pFnOnEndForInviteComplete )
		pFnOnEndForInviteComplete = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnEndForInviteComplete" );

	APlayerController_execOnEndForInviteComplete_Parms OnEndForInviteComplete_Parms;
	memcpy ( &OnEndForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndForInviteComplete, &OnEndForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClearInviteDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearInviteDelegates ( )
{
	static UFunction* pFnClearInviteDelegates = NULL;

	if ( ! pFnClearInviteDelegates )
		pFnClearInviteDelegates = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClearInviteDelegates" );

	APlayerController_execClearInviteDelegates_Parms ClearInviteDelegates_Parms;

	this->ProcessEvent ( pFnClearInviteDelegates, &ClearInviteDelegates_Parms, NULL );
};

// Function Engine.PlayerController.CanAllPlayersPlayOnline
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanAllPlayersPlayOnline ( )
{
	static UFunction* pFnCanAllPlayersPlayOnline = NULL;

	if ( ! pFnCanAllPlayersPlayOnline )
		pFnCanAllPlayersPlayOnline = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CanAllPlayersPlayOnline" );

	APlayerController_execCanAllPlayersPlayOnline_Parms CanAllPlayersPlayOnline_Parms;

	this->ProcessEvent ( pFnCanAllPlayersPlayOnline, &CanAllPlayersPlayOnline_Parms, NULL );

	return CanAllPlayersPlayOnline_Parms.ReturnValue;
};

// Function Engine.PlayerController.InviteHasEnoughSpace
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSettings*     InviteSettings                 ( CPF_Parm )

bool APlayerController::InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings )
{
	static UFunction* pFnInviteHasEnoughSpace = NULL;

	if ( ! pFnInviteHasEnoughSpace )
		pFnInviteHasEnoughSpace = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.InviteHasEnoughSpace" );

	APlayerController_execInviteHasEnoughSpace_Parms InviteHasEnoughSpace_Parms;
	InviteHasEnoughSpace_Parms.InviteSettings = InviteSettings;

	this->ProcessEvent ( pFnInviteHasEnoughSpace, &InviteHasEnoughSpace_Parms, NULL );

	return InviteHasEnoughSpace_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnGameInviteAccepted
// [0x00020002] 
// Parameters infos:
// class UOnlineGameSettings*     GameInviteSettings             ( CPF_Parm )

void APlayerController::OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnGameInviteAccepted" );

	APlayerController_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;
	OnGameInviteAccepted_Parms.GameInviteSettings = GameInviteSettings;

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );
};

// Function Engine.PlayerController.ServerWritenArbitrationEndGameData
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerWritenArbitrationEndGameData ( )
{
	static UFunction* pFnServerWritenArbitrationEndGameData = NULL;

	if ( ! pFnServerWritenArbitrationEndGameData )
		pFnServerWritenArbitrationEndGameData = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerWritenArbitrationEndGameData" );

	APlayerController_execServerWritenArbitrationEndGameData_Parms ServerWritenArbitrationEndGameData_Parms;

	this->ProcessEvent ( pFnServerWritenArbitrationEndGameData, &ServerWritenArbitrationEndGameData_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteArbitrationEndGameData
// [0x010201C2] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )

void APlayerController::ClientWriteArbitrationEndGameData ( class UClass* OnlineStatsWriteClass )
{
	static UFunction* pFnClientWriteArbitrationEndGameData = NULL;

	if ( ! pFnClientWriteArbitrationEndGameData )
		pFnClientWriteArbitrationEndGameData = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientWriteArbitrationEndGameData" );

	APlayerController_execClientWriteArbitrationEndGameData_Parms ClientWriteArbitrationEndGameData_Parms;
	ClientWriteArbitrationEndGameData_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;

	this->ProcessEvent ( pFnClientWriteArbitrationEndGameData, &ClientWriteArbitrationEndGameData_Parms, NULL );
};

// Function Engine.PlayerController.ServerRegisteredForArbitration
// [0x002200C0] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::ServerRegisteredForArbitration ( unsigned long bWasSuccessful )
{
	static UFunction* pFnServerRegisteredForArbitration = NULL;

	if ( ! pFnServerRegisteredForArbitration )
		pFnServerRegisteredForArbitration = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerRegisteredForArbitration" );

	APlayerController_execServerRegisteredForArbitration_Parms ServerRegisteredForArbitration_Parms;
	ServerRegisteredForArbitration_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnServerRegisteredForArbitration, &ServerRegisteredForArbitration_Parms, NULL );
};

// Function Engine.PlayerController.OnArbitrationRegisterComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegisterComplete = NULL;

	if ( ! pFnOnArbitrationRegisterComplete )
		pFnOnArbitrationRegisterComplete = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnArbitrationRegisterComplete" );

	APlayerController_execOnArbitrationRegisterComplete_Parms OnArbitrationRegisterComplete_Parms;
	memcpy ( &OnArbitrationRegisterComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegisterComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegisterComplete, &OnArbitrationRegisterComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterForArbitration
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientRegisterForArbitration ( )
{
	static UFunction* pFnClientRegisterForArbitration = NULL;

	if ( ! pFnClientRegisterForArbitration )
		pFnClientRegisterForArbitration = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientRegisterForArbitration" );

	APlayerController_execClientRegisterForArbitration_Parms ClientRegisterForArbitration_Parms;

	this->ProcessEvent ( pFnClientRegisterForArbitration, &ClientRegisterForArbitration_Parms, NULL );
};

// Function Engine.PlayerController.ClientWasKicked
// [0x010209C0] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientWasKicked ( )
{
	static UFunction* pFnClientWasKicked = NULL;

	if ( ! pFnClientWasKicked )
		pFnClientWasKicked = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientWasKicked" );

	APlayerController_eventClientWasKicked_Parms ClientWasKicked_Parms;

	this->ProcessEvent ( pFnClientWasKicked, &ClientWasKicked_Parms, NULL );
};

// Function Engine.PlayerController.NotifyConnectionError
// [0x00020002] 
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::NotifyConnectionError ( struct FString Message, struct FString Title )
{
	static UFunction* pFnNotifyConnectionError = NULL;

	if ( ! pFnNotifyConnectionError )
		pFnNotifyConnectionError = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NotifyConnectionError" );

	APlayerController_execNotifyConnectionError_Parms NotifyConnectionError_Parms;
	memcpy ( &NotifyConnectionError_Parms.Message, &Message, 0xC );
	memcpy ( &NotifyConnectionError_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnNotifyConnectionError, &NotifyConnectionError_Parms, NULL );
};

// Function Engine.PlayerController.IsShowingSubtitles
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsShowingSubtitles ( )
{
	static UFunction* pFnIsShowingSubtitles = NULL;

	if ( ! pFnIsShowingSubtitles )
		pFnIsShowingSubtitles = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsShowingSubtitles" );

	APlayerController_execIsShowingSubtitles_Parms IsShowingSubtitles_Parms;

	pFnIsShowingSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShowingSubtitles, &IsShowingSubtitles_Parms, NULL );

	pFnIsShowingSubtitles->FunctionFlags |= 0x400;

	return IsShowingSubtitles_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetShowSubtitles
// [0x00020700] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void APlayerController::SetShowSubtitles ( unsigned long bValue )
{
	static UFunction* pFnSetShowSubtitles = NULL;

	if ( ! pFnSetShowSubtitles )
		pFnSetShowSubtitles = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetShowSubtitles" );

	APlayerController_execSetShowSubtitles_Parms SetShowSubtitles_Parms;
	SetShowSubtitles_Parms.bValue = bValue;

	pFnSetShowSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShowSubtitles, &SetShowSubtitles_Parms, NULL );

	pFnSetShowSubtitles->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.NotifyDirectorControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNowControlling                ( CPF_Parm )

void APlayerController::eventNotifyDirectorControl ( unsigned long bNowControlling )
{
	static UFunction* pFnNotifyDirectorControl = NULL;

	if ( ! pFnNotifyDirectorControl )
		pFnNotifyDirectorControl = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NotifyDirectorControl" );

	APlayerController_eventNotifyDirectorControl_Parms NotifyDirectorControl_Parms;
	NotifyDirectorControl_Parms.bNowControlling = bNowControlling;

	this->ProcessEvent ( pFnNotifyDirectorControl, &NotifyDirectorControl_Parms, NULL );
};

// Function Engine.PlayerController.ServerUnmutePlayer
// [0x002208C0] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnServerUnmutePlayer = NULL;

	if ( ! pFnServerUnmutePlayer )
		pFnServerUnmutePlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerUnmutePlayer" );

	APlayerController_eventServerUnmutePlayer_Parms ServerUnmutePlayer_Parms;
	memcpy ( &ServerUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnServerUnmutePlayer, &ServerUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerMutePlayer
// [0x002208C0] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventServerMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnServerMutePlayer = NULL;

	if ( ! pFnServerMutePlayer )
		pFnServerMutePlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerMutePlayer" );

	APlayerController_eventServerMutePlayer_Parms ServerMutePlayer_Parms;
	memcpy ( &ServerMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnServerMutePlayer, &ServerMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.GameplayUnmutePlayer
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGameplayUnmutePlayer = NULL;

	if ( ! pFnGameplayUnmutePlayer )
		pFnGameplayUnmutePlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GameplayUnmutePlayer" );

	APlayerController_execGameplayUnmutePlayer_Parms GameplayUnmutePlayer_Parms;
	memcpy ( &GameplayUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnGameplayUnmutePlayer, &GameplayUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.GameplayMutePlayer
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::GameplayMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGameplayMutePlayer = NULL;

	if ( ! pFnGameplayMutePlayer )
		pFnGameplayMutePlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GameplayMutePlayer" );

	APlayerController_execGameplayMutePlayer_Parms GameplayMutePlayer_Parms;
	memcpy ( &GameplayMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnGameplayMutePlayer, &GameplayMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientUnmutePlayer
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnClientUnmutePlayer = NULL;

	if ( ! pFnClientUnmutePlayer )
		pFnClientUnmutePlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientUnmutePlayer" );

	APlayerController_eventClientUnmutePlayer_Parms ClientUnmutePlayer_Parms;
	memcpy ( &ClientUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnClientUnmutePlayer, &ClientUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientMutePlayer
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventClientMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnClientMutePlayer = NULL;

	if ( ! pFnClientMutePlayer )
		pFnClientMutePlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientMutePlayer" );

	APlayerController_eventClientMutePlayer_Parms ClientMutePlayer_Parms;
	memcpy ( &ClientMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnClientMutePlayer, &ClientMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.GetPlayerControllerFromNetId
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

class APlayerController* APlayerController::GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGetPlayerControllerFromNetId = NULL;

	if ( ! pFnGetPlayerControllerFromNetId )
		pFnGetPlayerControllerFromNetId = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetPlayerControllerFromNetId" );

	APlayerController_execGetPlayerControllerFromNetId_Parms GetPlayerControllerFromNetId_Parms;
	memcpy ( &GetPlayerControllerFromNetId_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerFromNetId, &GetPlayerControllerFromNetId_Parms, NULL );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= 0x400;

	return GetPlayerControllerFromNetId_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetOnlineStatus
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientSetOnlineStatus ( )
{
	static UFunction* pFnClientSetOnlineStatus = NULL;

	if ( ! pFnClientSetOnlineStatus )
		pFnClientSetOnlineStatus = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetOnlineStatus" );

	APlayerController_execClientSetOnlineStatus_Parms ClientSetOnlineStatus_Parms;

	this->ProcessEvent ( pFnClientSetOnlineStatus, &ClientSetOnlineStatus_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelFrom
// [0x00020002] 
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelFrom ( class APlayerController* OldPC )
{
	static UFunction* pFnSeamlessTravelFrom = NULL;

	if ( ! pFnSeamlessTravelFrom )
		pFnSeamlessTravelFrom = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SeamlessTravelFrom" );

	APlayerController_execSeamlessTravelFrom_Parms SeamlessTravelFrom_Parms;
	SeamlessTravelFrom_Parms.OldPC = OldPC;

	this->ProcessEvent ( pFnSeamlessTravelFrom, &SeamlessTravelFrom_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelTo
// [0x00020000] 
// Parameters infos:
// class APlayerController*       NewPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelTo ( class APlayerController* NewPC )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SeamlessTravelTo" );

	APlayerController_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPC = NewPC;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerController.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetSeamlessTravelActorList" );

	APlayerController_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.PlayerController.IsPlayerMuted
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Sender                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool APlayerController::IsPlayerMuted ( struct FUniqueNetId* Sender )
{
	static UFunction* pFnIsPlayerMuted = NULL;

	if ( ! pFnIsPlayerMuted )
		pFnIsPlayerMuted = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsPlayerMuted" );

	APlayerController_execIsPlayerMuted_Parms IsPlayerMuted_Parms;

	pFnIsPlayerMuted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerMuted, &IsPlayerMuted_Parms, NULL );

	pFnIsPlayerMuted->FunctionFlags |= 0x400;

	if ( Sender )
		memcpy ( Sender, &IsPlayerMuted_Parms.Sender, 0x8 );

	return IsPlayerMuted_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetUIController
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* APlayerController::GetUIController ( )
{
	static UFunction* pFnGetUIController = NULL;

	if ( ! pFnGetUIController )
		pFnGetUIController = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetUIController" );

	APlayerController_execGetUIController_Parms GetUIController_Parms;

	this->ProcessEvent ( pFnGetUIController, &GetUIController_Parms, NULL );

	return GetUIController_Parms.ReturnValue;
};

// Function Engine.PlayerController.SaveActorConfig
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   actorName                      ( CPF_Parm | CPF_CoerceParm )

void APlayerController::SaveActorConfig ( struct FName actorName )
{
	static UFunction* pFnSaveActorConfig = NULL;

	if ( ! pFnSaveActorConfig )
		pFnSaveActorConfig = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SaveActorConfig" );

	APlayerController_execSaveActorConfig_Parms SaveActorConfig_Parms;
	memcpy ( &SaveActorConfig_Parms.actorName, &actorName, 0x8 );

	this->ProcessEvent ( pFnSaveActorConfig, &SaveActorConfig_Parms, NULL );
};

// Function Engine.PlayerController.SaveClassConfig
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ClassName                      ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::SaveClassConfig ( struct FString ClassName )
{
	static UFunction* pFnSaveClassConfig = NULL;

	if ( ! pFnSaveClassConfig )
		pFnSaveClassConfig = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SaveClassConfig" );

	APlayerController_execSaveClassConfig_Parms SaveClassConfig_Parms;
	memcpy ( &SaveClassConfig_Parms.ClassName, &ClassName, 0xC );

	this->ProcessEvent ( pFnSaveClassConfig, &SaveClassConfig_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientSetBlockOnAsyncLoading ( )
{
	static UFunction* pFnClientSetBlockOnAsyncLoading = NULL;

	if ( ! pFnClientSetBlockOnAsyncLoading )
		pFnClientSetBlockOnAsyncLoading = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetBlockOnAsyncLoading" );

	APlayerController_eventClientSetBlockOnAsyncLoading_Parms ClientSetBlockOnAsyncLoading_Parms;

	this->ProcessEvent ( pFnClientSetBlockOnAsyncLoading, &ClientSetBlockOnAsyncLoading_Parms, NULL );
};

// Function Engine.PlayerController.ClientFlushLevelStreaming
// [0x01020DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void APlayerController::eventClientFlushLevelStreaming ( )
{
	static UFunction* pFnClientFlushLevelStreaming = NULL;

	if ( ! pFnClientFlushLevelStreaming )
		pFnClientFlushLevelStreaming = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientFlushLevelStreaming" );

	APlayerController_eventClientFlushLevelStreaming_Parms ClientFlushLevelStreaming_Parms;

	pFnClientFlushLevelStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientFlushLevelStreaming, &ClientFlushLevelStreaming_Parms, NULL );

	pFnClientFlushLevelStreaming->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientCommitMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bShouldSkipLevelStartupEvent   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldSkipLevelBeginningEvent ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientCommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent )
{
	static UFunction* pFnClientCommitMapChange = NULL;

	if ( ! pFnClientCommitMapChange )
		pFnClientCommitMapChange = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientCommitMapChange" );

	APlayerController_eventClientCommitMapChange_Parms ClientCommitMapChange_Parms;
	ClientCommitMapChange_Parms.bShouldSkipLevelStartupEvent = bShouldSkipLevelStartupEvent;
	ClientCommitMapChange_Parms.bShouldSkipLevelBeginningEvent = bShouldSkipLevelBeginningEvent;

	this->ProcessEvent ( pFnClientCommitMapChange, &ClientCommitMapChange_Parms, NULL );
};

// Function Engine.PlayerController.DelayedPrepareMapChange
// [0x00020002] 
// Parameters infos:

void APlayerController::DelayedPrepareMapChange ( )
{
	static UFunction* pFnDelayedPrepareMapChange = NULL;

	if ( ! pFnDelayedPrepareMapChange )
		pFnDelayedPrepareMapChange = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.DelayedPrepareMapChange" );

	APlayerController_execDelayedPrepareMapChange_Parms DelayedPrepareMapChange_Parms;

	this->ProcessEvent ( pFnDelayedPrepareMapChange, &DelayedPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ClientPrepareMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FName                   LevelName                      ( CPF_Parm )
// unsigned long                  bFirst                         ( CPF_Parm )
// unsigned long                  bLast                          ( CPF_Parm )

void APlayerController::eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast )
{
	static UFunction* pFnClientPrepareMapChange = NULL;

	if ( ! pFnClientPrepareMapChange )
		pFnClientPrepareMapChange = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientPrepareMapChange" );

	APlayerController_eventClientPrepareMapChange_Parms ClientPrepareMapChange_Parms;
	memcpy ( &ClientPrepareMapChange_Parms.LevelName, &LevelName, 0x8 );
	ClientPrepareMapChange_Parms.bFirst = bFirst;
	ClientPrepareMapChange_Parms.bLast = bLast;

	this->ProcessEvent ( pFnClientPrepareMapChange, &ClientPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ServerUpdateLevelVisibility
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 PackageName                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsVisible                     ( CPF_Parm )

void APlayerController::eventServerUpdateLevelVisibility ( struct FString PackageName, unsigned long bIsVisible )
{
	static UFunction* pFnServerUpdateLevelVisibility = NULL;

	if ( ! pFnServerUpdateLevelVisibility )
		pFnServerUpdateLevelVisibility = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerUpdateLevelVisibility" );

	APlayerController_eventServerUpdateLevelVisibility_Parms ServerUpdateLevelVisibility_Parms;
	memcpy ( &ServerUpdateLevelVisibility_Parms.PackageName, &PackageName, 0xC );
	ServerUpdateLevelVisibility_Parms.bIsVisible = bIsVisible;

	pFnServerUpdateLevelVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerUpdateLevelVisibility, &ServerUpdateLevelVisibility_Parms, NULL );

	pFnServerUpdateLevelVisibility->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// [0x010205C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnClientUpdateLevelStreamingStatus = NULL;

	if ( ! pFnClientUpdateLevelStreamingStatus )
		pFnClientUpdateLevelStreamingStatus = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientUpdateLevelStreamingStatus" );

	APlayerController_execClientUpdateLevelStreamingStatus_Parms ClientUpdateLevelStreamingStatus_Parms;
	memcpy ( &ClientUpdateLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientUpdateLevelStreamingStatus, &ClientUpdateLevelStreamingStatus_Parms, NULL );

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.LevelStreamingStatusChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULevelStreaming*         LevelObject                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnLevelStreamingStatusChanged = NULL;

	if ( ! pFnLevelStreamingStatusChanged )
		pFnLevelStreamingStatusChanged = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.LevelStreamingStatusChanged" );

	APlayerController_eventLevelStreamingStatusChanged_Parms LevelStreamingStatusChanged_Parms;
	LevelStreamingStatusChanged_Parms.LevelObject = LevelObject;
	LevelStreamingStatusChanged_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	LevelStreamingStatusChanged_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	LevelStreamingStatusChanged_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	this->ProcessEvent ( pFnLevelStreamingStatusChanged, &LevelStreamingStatusChanged_Parms, NULL );
};

// Function Engine.PlayerController.ClientForceGarbageCollection
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientForceGarbageCollection ( )
{
	static UFunction* pFnClientForceGarbageCollection = NULL;

	if ( ! pFnClientForceGarbageCollection )
		pFnClientForceGarbageCollection = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientForceGarbageCollection" );

	APlayerController_eventClientForceGarbageCollection_Parms ClientForceGarbageCollection_Parms;

	this->ProcessEvent ( pFnClientForceGarbageCollection, &ClientForceGarbageCollection_Parms, NULL );
};

// Function Engine.PlayerController.OnConsoleCommand
// [0x00020002] 
// Parameters infos:
// class USeqAct_ConsoleCommand*  inAction                       ( CPF_Parm )

void APlayerController::OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction )
{
	static UFunction* pFnOnConsoleCommand = NULL;

	if ( ! pFnOnConsoleCommand )
		pFnOnConsoleCommand = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnConsoleCommand" );

	APlayerController_execOnConsoleCommand_Parms OnConsoleCommand_Parms;
	OnConsoleCommand_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnConsoleCommand, &OnConsoleCommand_Parms, NULL );
};

// Function Engine.PlayerController.ResetPlayerMovementInput
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetPlayerMovementInput ( )
{
	static UFunction* pFnResetPlayerMovementInput = NULL;

	if ( ! pFnResetPlayerMovementInput )
		pFnResetPlayerMovementInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ResetPlayerMovementInput" );

	APlayerController_execResetPlayerMovementInput_Parms ResetPlayerMovementInput_Parms;

	this->ProcessEvent ( pFnResetPlayerMovementInput, &ResetPlayerMovementInput_Parms, NULL );
};

// Function Engine.PlayerController.IsLookInputIgnored
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsLookInputIgnored ( )
{
	static UFunction* pFnIsLookInputIgnored = NULL;

	if ( ! pFnIsLookInputIgnored )
		pFnIsLookInputIgnored = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsLookInputIgnored" );

	APlayerController_execIsLookInputIgnored_Parms IsLookInputIgnored_Parms;

	pFnIsLookInputIgnored->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLookInputIgnored, &IsLookInputIgnored_Parms, NULL );

	pFnIsLookInputIgnored->FunctionFlags |= 0x400;

	return IsLookInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.IgnoreLookInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewLookInput                  ( CPF_Parm )

void APlayerController::IgnoreLookInput ( unsigned long bNewLookInput )
{
	static UFunction* pFnIgnoreLookInput = NULL;

	if ( ! pFnIgnoreLookInput )
		pFnIgnoreLookInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IgnoreLookInput" );

	APlayerController_execIgnoreLookInput_Parms IgnoreLookInput_Parms;
	IgnoreLookInput_Parms.bNewLookInput = bNewLookInput;

	this->ProcessEvent ( pFnIgnoreLookInput, &IgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.IsMoveInputIgnored
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsMoveInputIgnored ( )
{
	static UFunction* pFnIsMoveInputIgnored = NULL;

	if ( ! pFnIsMoveInputIgnored )
		pFnIsMoveInputIgnored = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsMoveInputIgnored" );

	APlayerController_execIsMoveInputIgnored_Parms IsMoveInputIgnored_Parms;

	pFnIsMoveInputIgnored->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMoveInputIgnored, &IsMoveInputIgnored_Parms, NULL );

	pFnIsMoveInputIgnored->FunctionFlags |= 0x400;

	return IsMoveInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.IgnoreMoveInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewMoveInput                  ( CPF_Parm )

void APlayerController::IgnoreMoveInput ( unsigned long bNewMoveInput )
{
	static UFunction* pFnIgnoreMoveInput = NULL;

	if ( ! pFnIgnoreMoveInput )
		pFnIgnoreMoveInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IgnoreMoveInput" );

	APlayerController_execIgnoreMoveInput_Parms IgnoreMoveInput_Parms;
	IgnoreMoveInput_Parms.bNewMoveInput = bNewMoveInput;

	this->ProcessEvent ( pFnIgnoreMoveInput, &IgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetCinematicMode
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )

void APlayerController::ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD )
{
	static UFunction* pFnClientSetCinematicMode = NULL;

	if ( ! pFnClientSetCinematicMode )
		pFnClientSetCinematicMode = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetCinematicMode" );

	APlayerController_execClientSetCinematicMode_Parms ClientSetCinematicMode_Parms;
	ClientSetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	ClientSetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	ClientSetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	ClientSetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;

	this->ProcessEvent ( pFnClientSetCinematicMode, &ClientSetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.SetCinematicMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bHidePlayer                    ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsButtons                ( CPF_Parm )

void APlayerController::SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetCinematicMode" );

	APlayerController_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Parms.bHidePlayer = bHidePlayer;
	SetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Parms.bAffectsButtons = bAffectsButtons;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleCinematicMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleCinematicMode* Action                         ( CPF_Parm )

void APlayerController::OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action )
{
	static UFunction* pFnOnToggleCinematicMode = NULL;

	if ( ! pFnOnToggleCinematicMode )
		pFnOnToggleCinematicMode = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnToggleCinematicMode" );

	APlayerController_execOnToggleCinematicMode_Parms OnToggleCinematicMode_Parms;
	OnToggleCinematicMode_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleCinematicMode, &OnToggleCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.CameraShake
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// struct FVector                 newRotAmplitude                ( CPF_Parm )
// struct FVector                 newRotFrequency                ( CPF_Parm )
// struct FVector                 newLocAmplitude                ( CPF_Parm )
// struct FVector                 newLocFrequency                ( CPF_Parm )
// float                          newFOVAmplitude                ( CPF_Parm )
// float                          newFOVFrequency                ( CPF_Parm )

void APlayerController::CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency )
{
	static UFunction* pFnCameraShake = NULL;

	if ( ! pFnCameraShake )
		pFnCameraShake = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CameraShake" );

	APlayerController_execCameraShake_Parms CameraShake_Parms;
	CameraShake_Parms.Duration = Duration;
	memcpy ( &CameraShake_Parms.newRotAmplitude, &newRotAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newRotFrequency, &newRotFrequency, 0xC );
	memcpy ( &CameraShake_Parms.newLocAmplitude, &newLocAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newLocFrequency, &newLocFrequency, 0xC );
	CameraShake_Parms.newFOVAmplitude = newFOVAmplitude;
	CameraShake_Parms.newFOVFrequency = newFOVFrequency;

	pFnCameraShake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCameraShake, &CameraShake_Parms, NULL );

	pFnCameraShake->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform )
{
	static UFunction* pFnClientStopForceFeedbackWaveform = NULL;

	if ( ! pFnClientStopForceFeedbackWaveform )
		pFnClientStopForceFeedbackWaveform = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientStopForceFeedbackWaveform" );

	APlayerController_execClientStopForceFeedbackWaveform_Parms ClientStopForceFeedbackWaveform_Parms;
	ClientStopForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;

	this->ProcessEvent ( pFnClientStopForceFeedbackWaveform, &ClientStopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_Parm )

void APlayerController::ClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform )
{
	static UFunction* pFnClientPlayForceFeedbackWaveform = NULL;

	if ( ! pFnClientPlayForceFeedbackWaveform )
		pFnClientPlayForceFeedbackWaveform = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientPlayForceFeedbackWaveform" );

	APlayerController_execClientPlayForceFeedbackWaveform_Parms ClientPlayForceFeedbackWaveform_Parms;
	ClientPlayForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;

	this->ProcessEvent ( pFnClientPlayForceFeedbackWaveform, &ClientPlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.OnForceFeedback
// [0x00020000] 
// Parameters infos:
// class USeqAct_ForceFeedback*   Action                         ( CPF_Parm )

void APlayerController::OnForceFeedback ( class USeqAct_ForceFeedback* Action )
{
	static UFunction* pFnOnForceFeedback = NULL;

	if ( ! pFnOnForceFeedback )
		pFnOnForceFeedback = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnForceFeedback" );

	APlayerController_execOnForceFeedback_Parms OnForceFeedback_Parms;
	OnForceFeedback_Parms.Action = Action;

	this->ProcessEvent ( pFnOnForceFeedback, &OnForceFeedback_Parms, NULL );
};

// Function Engine.PlayerController.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void APlayerController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NotifyTakeHit" );

	APlayerController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.PlayerController.ShowGameState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowGameState ( )
{
	static UFunction* pFnShowGameState = NULL;

	if ( ! pFnShowGameState )
		pFnShowGameState = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ShowGameState" );

	APlayerController_execShowGameState_Parms ShowGameState_Parms;

	this->ProcessEvent ( pFnShowGameState, &ShowGameState_Parms, NULL );
};

// Function Engine.PlayerController.ShowPlayerState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowPlayerState ( )
{
	static UFunction* pFnShowPlayerState = NULL;

	if ( ! pFnShowPlayerState )
		pFnShowPlayerState = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ShowPlayerState" );

	APlayerController_execShowPlayerState_Parms ShowPlayerState_Parms;

	this->ProcessEvent ( pFnShowPlayerState, &ShowPlayerState_Parms, NULL );
};

// Function Engine.PlayerController.ListCE
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListCE ( )
{
	static UFunction* pFnListCE = NULL;

	if ( ! pFnListCE )
		pFnListCE = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ListCE" );

	APlayerController_execListCE_Parms ListCE_Parms;

	this->ProcessEvent ( pFnListCE, &ListCE_Parms, NULL );
};

// Function Engine.PlayerController.ListConsoleEvents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListConsoleEvents ( )
{
	static UFunction* pFnListConsoleEvents = NULL;

	if ( ! pFnListConsoleEvents )
		pFnListConsoleEvents = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ListConsoleEvents" );

	APlayerController_execListConsoleEvents_Parms ListConsoleEvents_Parms;

	this->ProcessEvent ( pFnListConsoleEvents, &ListConsoleEvents_Parms, NULL );
};

// Function Engine.PlayerController.CE
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CE ( struct FName EventName )
{
	static UFunction* pFnCE = NULL;

	if ( ! pFnCE )
		pFnCE = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CE" );

	APlayerController_execCE_Parms CE_Parms;
	memcpy ( &CE_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCE, &CE_Parms, NULL );
};

// Function Engine.PlayerController.CauseEvent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CauseEvent ( struct FName EventName )
{
	static UFunction* pFnCauseEvent = NULL;

	if ( ! pFnCauseEvent )
		pFnCauseEvent = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CauseEvent" );

	APlayerController_execCauseEvent_Parms CauseEvent_Parms;
	memcpy ( &CauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCauseEvent, &CauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.ServerCauseEvent
// [0x00220040] 
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerCauseEvent ( struct FString EventName )
{
	static UFunction* pFnServerCauseEvent = NULL;

	if ( ! pFnServerCauseEvent )
		pFnServerCauseEvent = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerCauseEvent" );

	APlayerController_execServerCauseEvent_Parms ServerCauseEvent_Parms;
	memcpy ( &ServerCauseEvent_Parms.EventName, &EventName, 0xC );

	this->ProcessEvent ( pFnServerCauseEvent, &ServerCauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleHUD
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHUD*       inAction                       ( CPF_Parm )

void APlayerController::OnToggleHUD ( class USeqAct_ToggleHUD* inAction )
{
	static UFunction* pFnOnToggleHUD = NULL;

	if ( ! pFnOnToggleHUD )
		pFnOnToggleHUD = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnToggleHUD" );

	APlayerController_execOnToggleHUD_Parms OnToggleHUD_Parms;
	OnToggleHUD_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleHUD, &OnToggleHUD_Parms, NULL );
};

// Function Engine.PlayerController.OnSetCameraTarget
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetCameraTarget* inAction                       ( CPF_Parm )

void APlayerController::OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction )
{
	static UFunction* pFnOnSetCameraTarget = NULL;

	if ( ! pFnOnSetCameraTarget )
		pFnOnSetCameraTarget = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnSetCameraTarget" );

	APlayerController_execOnSetCameraTarget_Parms OnSetCameraTarget_Parms;
	OnSetCameraTarget_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnSetCameraTarget, &OnSetCameraTarget_Parms, NULL );
};

// Function Engine.PlayerController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APlayerController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.DisplayDebug" );

	APlayerController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.PlayerController.ClientIgnoreLookInput
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bIgnore                        ( CPF_Parm )

void APlayerController::ClientIgnoreLookInput ( unsigned long bIgnore )
{
	static UFunction* pFnClientIgnoreLookInput = NULL;

	if ( ! pFnClientIgnoreLookInput )
		pFnClientIgnoreLookInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientIgnoreLookInput" );

	APlayerController_execClientIgnoreLookInput_Parms ClientIgnoreLookInput_Parms;
	ClientIgnoreLookInput_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnClientIgnoreLookInput, &ClientIgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.ClientIgnoreMoveInput
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bIgnore                        ( CPF_Parm )

void APlayerController::ClientIgnoreMoveInput ( unsigned long bIgnore )
{
	static UFunction* pFnClientIgnoreMoveInput = NULL;

	if ( ! pFnClientIgnoreMoveInput )
		pFnClientIgnoreMoveInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientIgnoreMoveInput" );

	APlayerController_execClientIgnoreMoveInput_Parms ClientIgnoreMoveInput_Parms;
	ClientIgnoreMoveInput_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnClientIgnoreMoveInput, &ClientIgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleInput
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleInput*     inAction                       ( CPF_Parm )

void APlayerController::OnToggleInput ( class USeqAct_ToggleInput* inAction )
{
	static UFunction* pFnOnToggleInput = NULL;

	if ( ! pFnOnToggleInput )
		pFnOnToggleInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnToggleInput" );

	APlayerController_execOnToggleInput_Parms OnToggleInput_Parms;
	OnToggleInput_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleInput, &OnToggleInput_Parms, NULL );
};

// Function Engine.PlayerController.DrawHUD
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APlayerController::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.DrawHUD" );

	APlayerController_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerController.CanRestartPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanRestartPlayer ( )
{
	static UFunction* pFnCanRestartPlayer = NULL;

	if ( ! pFnCanRestartPlayer )
		pFnCanRestartPlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CanRestartPlayer" );

	APlayerController_execCanRestartPlayer_Parms CanRestartPlayer_Parms;

	this->ProcessEvent ( pFnCanRestartPlayer, &CanRestartPlayer_Parms, NULL );

	return CanRestartPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerViewSelf
// [0x00220040] 
// Parameters infos:

void APlayerController::ServerViewSelf ( )
{
	static UFunction* pFnServerViewSelf = NULL;

	if ( ! pFnServerViewSelf )
		pFnServerViewSelf = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerViewSelf" );

	APlayerController_execServerViewSelf_Parms ServerViewSelf_Parms;

	this->ProcessEvent ( pFnServerViewSelf, &ServerViewSelf_Parms, NULL );
};

// Function Engine.PlayerController.ViewAPlayer
// [0x00020002] 
// Parameters infos:
// int                            Dir                            ( CPF_Parm )

void APlayerController::ViewAPlayer ( int Dir )
{
	static UFunction* pFnViewAPlayer = NULL;

	if ( ! pFnViewAPlayer )
		pFnViewAPlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ViewAPlayer" );

	APlayerController_execViewAPlayer_Parms ViewAPlayer_Parms;
	ViewAPlayer_Parms.Dir = Dir;

	this->ProcessEvent ( pFnViewAPlayer, &ViewAPlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerViewPrevPlayer
// [0x00220040] 
// Parameters infos:

void APlayerController::ServerViewPrevPlayer ( )
{
	static UFunction* pFnServerViewPrevPlayer = NULL;

	if ( ! pFnServerViewPrevPlayer )
		pFnServerViewPrevPlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerViewPrevPlayer" );

	APlayerController_execServerViewPrevPlayer_Parms ServerViewPrevPlayer_Parms;

	this->ProcessEvent ( pFnServerViewPrevPlayer, &ServerViewPrevPlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerViewNextPlayer
// [0x00220040] 
// Parameters infos:

void APlayerController::ServerViewNextPlayer ( )
{
	static UFunction* pFnServerViewNextPlayer = NULL;

	if ( ! pFnServerViewNextPlayer )
		pFnServerViewNextPlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerViewNextPlayer" );

	APlayerController_execServerViewNextPlayer_Parms ServerViewNextPlayer_Parms;

	this->ProcessEvent ( pFnServerViewNextPlayer, &ServerViewNextPlayer_Parms, NULL );
};

// Function Engine.PlayerController.ProcessMoveBaseSpectatingState
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaRot                       ( CPF_Parm )
// struct FVector                 outNewAccel                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void APlayerController::ProcessMoveBaseSpectatingState ( float DeltaRot, struct FVector* outNewAccel )
{
	static UFunction* pFnProcessMoveBaseSpectatingState = NULL;

	if ( ! pFnProcessMoveBaseSpectatingState )
		pFnProcessMoveBaseSpectatingState = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ProcessMoveBaseSpectatingState" );

	APlayerController_execProcessMoveBaseSpectatingState_Parms ProcessMoveBaseSpectatingState_Parms;
	ProcessMoveBaseSpectatingState_Parms.DeltaRot = DeltaRot;

	pFnProcessMoveBaseSpectatingState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessMoveBaseSpectatingState, &ProcessMoveBaseSpectatingState_Parms, NULL );

	pFnProcessMoveBaseSpectatingState->FunctionFlags |= 0x400;

	if ( outNewAccel )
		memcpy ( outNewAccel, &ProcessMoveBaseSpectatingState_Parms.outNewAccel, 0xC );
};

// Function Engine.PlayerController.ServerSetSpectatorLocation
// [0x00220840] ( FUNC_Event )
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )

void APlayerController::eventServerSetSpectatorLocation ( struct FVector NewLoc )
{
	static UFunction* pFnServerSetSpectatorLocation = NULL;

	if ( ! pFnServerSetSpectatorLocation )
		pFnServerSetSpectatorLocation = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerSetSpectatorLocation" );

	APlayerController_eventServerSetSpectatorLocation_Parms ServerSetSpectatorLocation_Parms;
	memcpy ( &ServerSetSpectatorLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnServerSetSpectatorLocation, &ServerSetSpectatorLocation_Parms, NULL );
};

// Function Engine.PlayerController.IsSpectating
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsSpectating" );

	APlayerController_execIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.PlayerController.ProcessMovePlayerWalkingState
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaRot                       ( CPF_Parm )
// struct FVector                 outNewAccel                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void APlayerController::ProcessMovePlayerWalkingState ( float DeltaRot, struct FVector* outNewAccel )
{
	static UFunction* pFnProcessMovePlayerWalkingState = NULL;

	if ( ! pFnProcessMovePlayerWalkingState )
		pFnProcessMovePlayerWalkingState = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ProcessMovePlayerWalkingState" );

	APlayerController_execProcessMovePlayerWalkingState_Parms ProcessMovePlayerWalkingState_Parms;
	ProcessMovePlayerWalkingState_Parms.DeltaRot = DeltaRot;

	pFnProcessMovePlayerWalkingState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessMovePlayerWalkingState, &ProcessMovePlayerWalkingState_Parms, NULL );

	pFnProcessMovePlayerWalkingState->FunctionFlags |= 0x400;

	if ( outNewAccel )
		memcpy ( outNewAccel, &ProcessMovePlayerWalkingState_Parms.outNewAccel, 0xC );
};

// Function Engine.PlayerController.AlterPlayerWalkingAccel
// [0x00420000] 
// Parameters infos:
// struct FVector                 out_NewAccel                   ( CPF_Parm | CPF_OutParm )

void APlayerController::AlterPlayerWalkingAccel ( struct FVector* out_NewAccel )
{
	static UFunction* pFnAlterPlayerWalkingAccel = NULL;

	if ( ! pFnAlterPlayerWalkingAccel )
		pFnAlterPlayerWalkingAccel = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AlterPlayerWalkingAccel" );

	APlayerController_execAlterPlayerWalkingAccel_Parms AlterPlayerWalkingAccel_Parms;

	this->ProcessEvent ( pFnAlterPlayerWalkingAccel, &AlterPlayerWalkingAccel_Parms, NULL );

	if ( out_NewAccel )
		memcpy ( out_NewAccel, &AlterPlayerWalkingAccel_Parms.out_NewAccel, 0xC );
};

// Function Engine.PlayerController.LimitViewRotation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                ViewRotation                   ( CPF_Parm )
// float                          ViewPitchMin                   ( CPF_Parm )
// float                          ViewPitchMax                   ( CPF_Parm )

struct FRotator APlayerController::eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax )
{
	static UFunction* pFnLimitViewRotation = NULL;

	if ( ! pFnLimitViewRotation )
		pFnLimitViewRotation = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.LimitViewRotation" );

	APlayerController_eventLimitViewRotation_Parms LimitViewRotation_Parms;
	memcpy ( &LimitViewRotation_Parms.ViewRotation, &ViewRotation, 0xC );
	LimitViewRotation_Parms.ViewPitchMin = ViewPitchMin;
	LimitViewRotation_Parms.ViewPitchMax = ViewPitchMax;

	this->ProcessEvent ( pFnLimitViewRotation, &LimitViewRotation_Parms, NULL );

	return LimitViewRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void APlayerController::ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ProcessViewRotation" );

	APlayerController_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessViewRotation_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );
};

// Function Engine.PlayerController.UpdateRotation
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::eventUpdateRotation ( float DeltaTime )
{
	static UFunction* pFnUpdateRotation = NULL;

	if ( ! pFnUpdateRotation )
		pFnUpdateRotation = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.UpdateRotation" );

	APlayerController_eventUpdateRotation_Parms UpdateRotation_Parms;
	UpdateRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateRotation, &UpdateRotation_Parms, NULL );
};

// Function Engine.PlayerController.GetRollRotationDelta
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )

float APlayerController::GetRollRotationDelta ( float fDeltaTime )
{
	static UFunction* pFnGetRollRotationDelta = NULL;

	if ( ! pFnGetRollRotationDelta )
		pFnGetRollRotationDelta = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetRollRotationDelta" );

	APlayerController_execGetRollRotationDelta_Parms GetRollRotationDelta_Parms;
	GetRollRotationDelta_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnGetRollRotationDelta, &GetRollRotationDelta_Parms, NULL );

	return GetRollRotationDelta_Parms.ReturnValue;
};

// Function Engine.PlayerController.ViewShake
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::ViewShake ( float DeltaTime )
{
	static UFunction* pFnViewShake = NULL;

	if ( ! pFnViewShake )
		pFnViewShake = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ViewShake" );

	APlayerController_execViewShake_Parms ViewShake_Parms;
	ViewShake_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnViewShake, &ViewShake_Parms, NULL );
};

// Function Engine.PlayerController.GetPlayerViewPoint
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APlayerController::GetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetPlayerViewPoint" );

	APlayerController_execGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	pFnGetPlayerViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	pFnGetPlayerViewPoint->FunctionFlags |= 0x400;

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.PlayerController.ServerVerifyViewTarget
// [0x00220CC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void APlayerController::eventServerVerifyViewTarget ( )
{
	static UFunction* pFnServerVerifyViewTarget = NULL;

	if ( ! pFnServerVerifyViewTarget )
		pFnServerVerifyViewTarget = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerVerifyViewTarget" );

	APlayerController_eventServerVerifyViewTarget_Parms ServerVerifyViewTarget_Parms;

	pFnServerVerifyViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerVerifyViewTarget, &ServerVerifyViewTarget_Parms, NULL );

	pFnServerVerifyViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.GetViewTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* APlayerController::GetViewTarget ( )
{
	static UFunction* pFnGetViewTarget = NULL;

	if ( ! pFnGetViewTarget )
		pFnGetViewTarget = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetViewTarget" );

	APlayerController_execGetViewTarget_Parms GetViewTarget_Parms;

	pFnGetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewTarget, &GetViewTarget_Parms, NULL );

	pFnGetViewTarget->FunctionFlags |= 0x400;

	return GetViewTarget_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetViewTarget
// [0x01020DC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnClientSetViewTarget = NULL;

	if ( ! pFnClientSetViewTarget )
		pFnClientSetViewTarget = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetViewTarget" );

	APlayerController_eventClientSetViewTarget_Parms ClientSetViewTarget_Parms;
	ClientSetViewTarget_Parms.A = A;
	memcpy ( &ClientSetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	pFnClientSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientSetViewTarget, &ClientSetViewTarget_Parms, NULL );

	pFnClientSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetViewTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetViewTarget" );

	APlayerController_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsLocalPlayerController" );

	APlayerController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetFOVAngle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APlayerController::GetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetFOVAngle" );

	APlayerController_execGetFOVAngle_Parms GetFOVAngle_Parms;

	pFnGetFOVAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	pFnGetFOVAngle->FunctionFlags |= 0x400;

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.PlayerController.AdjustFOV
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::AdjustFOV ( float DeltaTime )
{
	static UFunction* pFnAdjustFOV = NULL;

	if ( ! pFnAdjustFOV )
		pFnAdjustFOV = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AdjustFOV" );

	APlayerController_execAdjustFOV_Parms AdjustFOV_Parms;
	AdjustFOV_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnAdjustFOV, &AdjustFOV_Parms, NULL );
};

// Function Engine.PlayerController.AimHelpDot
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstantHit                    ( CPF_Parm )

float APlayerController::AimHelpDot ( unsigned long bInstantHit )
{
	static UFunction* pFnAimHelpDot = NULL;

	if ( ! pFnAimHelpDot )
		pFnAimHelpDot = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AimHelpDot" );

	APlayerController_execAimHelpDot_Parms AimHelpDot_Parms;
	AimHelpDot_Parms.bInstantHit = bInstantHit;

	this->ProcessEvent ( pFnAimHelpDot, &AimHelpDot_Parms, NULL );

	return AimHelpDot_Parms.ReturnValue;
};

// Function Engine.PlayerController.CameraLookAtFinished
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CameraLookAt*    Action                         ( CPF_Parm )

void APlayerController::eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action )
{
	static UFunction* pFnCameraLookAtFinished = NULL;

	if ( ! pFnCameraLookAtFinished )
		pFnCameraLookAtFinished = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CameraLookAtFinished" );

	APlayerController_eventCameraLookAtFinished_Parms CameraLookAtFinished_Parms;
	CameraLookAtFinished_Parms.Action = Action;

	this->ProcessEvent ( pFnCameraLookAtFinished, &CameraLookAtFinished_Parms, NULL );
};

// Function Engine.PlayerController.AimingHelp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstantHit                    ( CPF_Parm )

bool APlayerController::AimingHelp ( unsigned long bInstantHit )
{
	static UFunction* pFnAimingHelp = NULL;

	if ( ! pFnAimingHelp )
		pFnAimingHelp = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AimingHelp" );

	APlayerController_execAimingHelp_Parms AimingHelp_Parms;
	AimingHelp_Parms.bInstantHit = bInstantHit;

	this->ProcessEvent ( pFnAimingHelp, &AimingHelp_Parms, NULL );

	return AimingHelp_Parms.ReturnValue;
};

// Function Engine.PlayerController.PlayerMove
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::PlayerMove ( float DeltaTime )
{
	static UFunction* pFnPlayerMove = NULL;

	if ( ! pFnPlayerMove )
		pFnPlayerMove = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PlayerMove" );

	APlayerController_execPlayerMove_Parms PlayerMove_Parms;
	PlayerMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerMove, &PlayerMove_Parms, NULL );
};

// Function Engine.PlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PlayerTick" );

	APlayerController_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function Engine.PlayerController.ClientGameEnded
// [0x010201C2] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_Parm )

void APlayerController::ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnClientGameEnded = NULL;

	if ( ! pFnClientGameEnded )
		pFnClientGameEnded = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientGameEnded" );

	APlayerController_execClientGameEnded_Parms ClientGameEnded_Parms;
	ClientGameEnded_Parms.EndGameFocus = EndGameFocus;
	ClientGameEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnClientGameEnded, &ClientGameEnded_Parms, NULL );
};

// Function Engine.PlayerController.GameHasEnded
// [0x00020002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GameHasEnded" );

	APlayerController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.PlayerController.ClientRestart
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::ClientRestart ( class APawn* NewPawn )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientRestart" );

	APlayerController_execClientRestart_Parms ClientRestart_Parms;
	ClientRestart_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.PlayerController.EnterStartState
// [0x00020002] 
// Parameters infos:

void APlayerController::EnterStartState ( )
{
	static UFunction* pFnEnterStartState = NULL;

	if ( ! pFnEnterStartState )
		pFnEnterStartState = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.EnterStartState" );

	APlayerController_execEnterStartState_Parms EnterStartState_Parms;

	this->ProcessEvent ( pFnEnterStartState, &EnterStartState_Parms, NULL );
};

// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::HasClientLoadedCurrentWorld ( )
{
	static UFunction* pFnHasClientLoadedCurrentWorld = NULL;

	if ( ! pFnHasClientLoadedCurrentWorld )
		pFnHasClientLoadedCurrentWorld = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.HasClientLoadedCurrentWorld" );

	APlayerController_execHasClientLoadedCurrentWorld_Parms HasClientLoadedCurrentWorld_Parms;

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasClientLoadedCurrentWorld, &HasClientLoadedCurrentWorld_Parms, NULL );

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= 0x400;

	return HasClientLoadedCurrentWorld_Parms.ReturnValue;
};

// Function Engine.PlayerController.NotifyLoadedWorld
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )
// unsigned long                  bFinalDest                     ( CPF_Parm )

void APlayerController::eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest )
{
	static UFunction* pFnNotifyLoadedWorld = NULL;

	if ( ! pFnNotifyLoadedWorld )
		pFnNotifyLoadedWorld = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NotifyLoadedWorld" );

	APlayerController_eventNotifyLoadedWorld_Parms NotifyLoadedWorld_Parms;
	memcpy ( &NotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );
	NotifyLoadedWorld_Parms.bFinalDest = bFinalDest;

	this->ProcessEvent ( pFnNotifyLoadedWorld, &NotifyLoadedWorld_Parms, NULL );
};

// Function Engine.PlayerController.ServerNotifyLoadedWorld
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 WorldPackageName               ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::eventServerNotifyLoadedWorld ( struct FString WorldPackageName )
{
	static UFunction* pFnServerNotifyLoadedWorld = NULL;

	if ( ! pFnServerNotifyLoadedWorld )
		pFnServerNotifyLoadedWorld = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerNotifyLoadedWorld" );

	APlayerController_eventServerNotifyLoadedWorld_Parms ServerNotifyLoadedWorld_Parms;
	memcpy ( &ServerNotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0xC );

	pFnServerNotifyLoadedWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerNotifyLoadedWorld, &ServerNotifyLoadedWorld_Parms, NULL );

	pFnServerNotifyLoadedWorld->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Restart" );

	APlayerController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetProgressTime
// [0x010201C2] 
// Parameters infos:
// float                          T                              ( CPF_Parm )

void APlayerController::ClientSetProgressTime ( float T )
{
	static UFunction* pFnClientSetProgressTime = NULL;

	if ( ! pFnClientSetProgressTime )
		pFnClientSetProgressTime = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetProgressTime" );

	APlayerController_execClientSetProgressTime_Parms ClientSetProgressTime_Parms;
	ClientSetProgressTime_Parms.T = T;

	this->ProcessEvent ( pFnClientSetProgressTime, &ClientSetProgressTime_Parms, NULL );
};

// Function Engine.PlayerController.SetProgressTime
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void APlayerController::SetProgressTime ( float T )
{
	static UFunction* pFnSetProgressTime = NULL;

	if ( ! pFnSetProgressTime )
		pFnSetProgressTime = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetProgressTime" );

	APlayerController_execSetProgressTime_Parms SetProgressTime_Parms;
	SetProgressTime_Parms.T = T;

	this->ProcessEvent ( pFnSetProgressTime, &SetProgressTime_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetProgressMessage
// [0x010201C2] 
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title )
{
	static UFunction* pFnClientSetProgressMessage = NULL;

	if ( ! pFnClientSetProgressMessage )
		pFnClientSetProgressMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetProgressMessage" );

	APlayerController_execClientSetProgressMessage_Parms ClientSetProgressMessage_Parms;
	ClientSetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &ClientSetProgressMessage_Parms.Message, &Message, 0xC );
	memcpy ( &ClientSetProgressMessage_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnClientSetProgressMessage, &ClientSetProgressMessage_Parms, NULL );
};

// Function Engine.PlayerController.SetProgressMessage
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::SetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title )
{
	static UFunction* pFnSetProgressMessage = NULL;

	if ( ! pFnSetProgressMessage )
		pFnSetProgressMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetProgressMessage" );

	APlayerController_execSetProgressMessage_Parms SetProgressMessage_Parms;
	SetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &SetProgressMessage_Parms.Message, &Message, 0xC );
	memcpy ( &SetProgressMessage_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnSetProgressMessage, &SetProgressMessage_Parms, NULL );
};

// Function Engine.PlayerController.ClientClearProgressMessages
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientClearProgressMessages ( )
{
	static UFunction* pFnClientClearProgressMessages = NULL;

	if ( ! pFnClientClearProgressMessages )
		pFnClientClearProgressMessages = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientClearProgressMessages" );

	APlayerController_execClientClearProgressMessages_Parms ClientClearProgressMessages_Parms;

	this->ProcessEvent ( pFnClientClearProgressMessages, &ClientClearProgressMessages_Parms, NULL );
};

// Function Engine.PlayerController.ClearProgressMessages
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ClearProgressMessages ( )
{
	static UFunction* pFnClearProgressMessages = NULL;

	if ( ! pFnClearProgressMessages )
		pFnClearProgressMessages = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClearProgressMessages" );

	APlayerController_execClearProgressMessages_Parms ClearProgressMessages_Parms;

	this->ProcessEvent ( pFnClearProgressMessages, &ClearProgressMessages_Parms, NULL );
};

// Function Engine.PlayerController.SwitchLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::SwitchLevel ( struct FString URL )
{
	static UFunction* pFnSwitchLevel = NULL;

	if ( ! pFnSwitchLevel )
		pFnSwitchLevel = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SwitchLevel" );

	APlayerController_execSwitchLevel_Parms SwitchLevel_Parms;
	memcpy ( &SwitchLevel_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSwitchLevel, &SwitchLevel_Parms, NULL );
};

// Function Engine.PlayerController.ServerChangeName
// [0x002200C0] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::ServerChangeName ( struct FString S )
{
	static UFunction* pFnServerChangeName = NULL;

	if ( ! pFnServerChangeName )
		pFnServerChangeName = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerChangeName" );

	APlayerController_execServerChangeName_Parms ServerChangeName_Parms;
	memcpy ( &ServerChangeName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerChangeName, &ServerChangeName_Parms, NULL );
};

// Function Engine.PlayerController.SetName
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::SetName ( struct FString S )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetName" );

	APlayerController_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function Engine.PlayerController.ServerSuicide
// [0x002208C0] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventServerSuicide ( )
{
	static UFunction* pFnServerSuicide = NULL;

	if ( ! pFnServerSuicide )
		pFnServerSuicide = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerSuicide" );

	APlayerController_eventServerSuicide_Parms ServerSuicide_Parms;

	this->ProcessEvent ( pFnServerSuicide, &ServerSuicide_Parms, NULL );
};

// Function Engine.PlayerController.Suicide
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Suicide" );

	APlayerController_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.PlayerController.StopAltFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StopAltFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopAltFire = NULL;

	if ( ! pFnStopAltFire )
		pFnStopAltFire = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.StopAltFire" );

	APlayerController_execStopAltFire_Parms StopAltFire_Parms;
	StopAltFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopAltFire, &StopAltFire_Parms, NULL );
};

// Function Engine.PlayerController.StartAltFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StartAltFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartAltFire = NULL;

	if ( ! pFnStartAltFire )
		pFnStartAltFire = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.StartAltFire" );

	APlayerController_execStartAltFire_Parms StartAltFire_Parms;
	StartAltFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartAltFire, &StartAltFire_Parms, NULL );
};

// Function Engine.PlayerController.StopFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.StopFire" );

	APlayerController_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.PlayerController.StartFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.StartFire" );

	APlayerController_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.PlayerController.NextWeapon
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.NextWeapon" );

	APlayerController_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Engine.PlayerController.PrevWeapon
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PrevWeapon" );

	APlayerController_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Engine.PlayerController.UTrace
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::UTrace ( )
{
	static UFunction* pFnUTrace = NULL;

	if ( ! pFnUTrace )
		pFnUTrace = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.UTrace" );

	APlayerController_execUTrace_Parms UTrace_Parms;

	this->ProcessEvent ( pFnUTrace, &UTrace_Parms, NULL );
};

// Function Engine.PlayerController.ServerUTrace
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerUTrace ( )
{
	static UFunction* pFnServerUTrace = NULL;

	if ( ! pFnServerUTrace )
		pFnServerUTrace = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerUTrace" );

	APlayerController_execServerUTrace_Parms ServerUTrace_Parms;

	this->ProcessEvent ( pFnServerUTrace, &ServerUTrace_Parms, NULL );
};

// Function Engine.PlayerController.ConditionalPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )

void APlayerController::eventConditionalPause ( unsigned long bDesiredPauseState )
{
	static UFunction* pFnConditionalPause = NULL;

	if ( ! pFnConditionalPause )
		pFnConditionalPause = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ConditionalPause" );

	APlayerController_eventConditionalPause_Parms ConditionalPause_Parms;
	ConditionalPause_Parms.bDesiredPauseState = bDesiredPauseState;

	this->ProcessEvent ( pFnConditionalPause, &ConditionalPause_Parms, NULL );
};

// Function Engine.PlayerController.ShowMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ShowMenu" );

	APlayerController_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function Engine.PlayerController.ServerPause
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerPause ( )
{
	static UFunction* pFnServerPause = NULL;

	if ( ! pFnServerPause )
		pFnServerPause = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerPause" );

	APlayerController_execServerPause_Parms ServerPause_Parms;

	this->ProcessEvent ( pFnServerPause, &ServerPause_Parms, NULL );
};

// Function Engine.PlayerController.Pause
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Pause" );

	APlayerController_execPause_Parms Pause_Parms;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function Engine.PlayerController.IsPaused
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPaused ( )
{
	static UFunction* pFnIsPaused = NULL;

	if ( ! pFnIsPaused )
		pFnIsPaused = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsPaused" );

	APlayerController_execIsPaused_Parms IsPaused_Parms;

	this->ProcessEvent ( pFnIsPaused, &IsPaused_Parms, NULL );

	return IsPaused_Parms.ReturnValue;
};

// Function Engine.PlayerController.DebugPause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.DebugPause" );

	APlayerController_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.PlayerController.SetPause
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPause                         ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetPause" );

	APlayerController_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.bPause = bPause;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0xC );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CanUnpause" );

	APlayerController_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.PlayerController.QuickLoad
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::QuickLoad ( )
{
	static UFunction* pFnQuickLoad = NULL;

	if ( ! pFnQuickLoad )
		pFnQuickLoad = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.QuickLoad" );

	APlayerController_execQuickLoad_Parms QuickLoad_Parms;

	this->ProcessEvent ( pFnQuickLoad, &QuickLoad_Parms, NULL );
};

// Function Engine.PlayerController.QuickSave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::QuickSave ( )
{
	static UFunction* pFnQuickSave = NULL;

	if ( ! pFnQuickSave )
		pFnQuickSave = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.QuickSave" );

	APlayerController_execQuickSave_Parms QuickSave_Parms;

	this->ProcessEvent ( pFnQuickSave, &QuickSave_Parms, NULL );
};

// Function Engine.PlayerController.LocalTravel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::LocalTravel ( struct FString URL )
{
	static UFunction* pFnLocalTravel = NULL;

	if ( ! pFnLocalTravel )
		pFnLocalTravel = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.LocalTravel" );

	APlayerController_execLocalTravel_Parms LocalTravel_Parms;
	memcpy ( &LocalTravel_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnLocalTravel, &LocalTravel_Parms, NULL );
};

// Function Engine.PlayerController.RestartLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::RestartLevel ( )
{
	static UFunction* pFnRestartLevel = NULL;

	if ( ! pFnRestartLevel )
		pFnRestartLevel = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.RestartLevel" );

	APlayerController_execRestartLevel_Parms RestartLevel_Parms;

	this->ProcessEvent ( pFnRestartLevel, &RestartLevel_Parms, NULL );
};

// Function Engine.PlayerController.ServerSpeech
// [0x002200C0] 
// Parameters infos:
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )
// struct FString                 Callsign                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerSpeech ( struct FString Type, int Index, struct FString Callsign )
{
	static UFunction* pFnServerSpeech = NULL;

	if ( ! pFnServerSpeech )
		pFnServerSpeech = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerSpeech" );

	APlayerController_execServerSpeech_Parms ServerSpeech_Parms;
	memcpy ( &ServerSpeech_Parms.Type, &Type, 0xC );
	ServerSpeech_Parms.Index = Index;
	memcpy ( &ServerSpeech_Parms.Callsign, &Callsign, 0xC );

	this->ProcessEvent ( pFnServerSpeech, &ServerSpeech_Parms, NULL );
};

// Function Engine.PlayerController.Speech
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Type                           ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// struct FString                 Callsign                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Speech ( struct FName Type, int Index, struct FString Callsign )
{
	static UFunction* pFnSpeech = NULL;

	if ( ! pFnSpeech )
		pFnSpeech = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Speech" );

	APlayerController_execSpeech_Parms Speech_Parms;
	memcpy ( &Speech_Parms.Type, &Type, 0x8 );
	Speech_Parms.Index = Index;
	memcpy ( &Speech_Parms.Callsign, &Callsign, 0xC );

	this->ProcessEvent ( pFnSpeech, &Speech_Parms, NULL );
};

// Function Engine.PlayerController.ServerRestartGame
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerRestartGame ( )
{
	static UFunction* pFnServerRestartGame = NULL;

	if ( ! pFnServerRestartGame )
		pFnServerRestartGame = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerRestartGame" );

	APlayerController_execServerRestartGame_Parms ServerRestartGame_Parms;

	this->ProcessEvent ( pFnServerRestartGame, &ServerRestartGame_Parms, NULL );
};

// Function Engine.PlayerController.HandleWalking
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventHandleWalking ( )
{
	static UFunction* pFnHandleWalking = NULL;

	if ( ! pFnHandleWalking )
		pFnHandleWalking = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.HandleWalking" );

	APlayerController_eventHandleWalking_Parms HandleWalking_Parms;

	this->ProcessEvent ( pFnHandleWalking, &HandleWalking_Parms, NULL );
};

// Function Engine.PlayerController.ReplicateMove
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::eventReplicateMove ( float DeltaTime, struct FVector newAccel, struct FRotator DeltaRot )
{
	static UFunction* pFnReplicateMove = NULL;

	if ( ! pFnReplicateMove )
		pFnReplicateMove = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ReplicateMove" );

	APlayerController_eventReplicateMove_Parms ReplicateMove_Parms;
	ReplicateMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ReplicateMove_Parms.newAccel, &newAccel, 0xC );
	memcpy ( &ReplicateMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnReplicateMove, &ReplicateMove_Parms, NULL );
};

// Function Engine.PlayerController.ReplicateMovePlayerController
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                DeltaRot                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void APlayerController::ReplicateMovePlayerController ( float DeltaTime, struct FVector* newAccel, struct FRotator* DeltaRot )
{
	static UFunction* pFnReplicateMovePlayerController = NULL;

	if ( ! pFnReplicateMovePlayerController )
		pFnReplicateMovePlayerController = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ReplicateMovePlayerController" );

	APlayerController_execReplicateMovePlayerController_Parms ReplicateMovePlayerController_Parms;
	ReplicateMovePlayerController_Parms.DeltaTime = DeltaTime;

	pFnReplicateMovePlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplicateMovePlayerController, &ReplicateMovePlayerController_Parms, NULL );

	pFnReplicateMovePlayerController->FunctionFlags |= 0x400;

	if ( newAccel )
		memcpy ( newAccel, &ReplicateMovePlayerController_Parms.newAccel, 0xC );

	if ( DeltaRot )
		memcpy ( DeltaRot, &ReplicateMovePlayerController_Parms.DeltaRot, 0xC );
};

// Function Engine.PlayerController.ClientUpdatePosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::ClientUpdatePosition ( )
{
	static UFunction* pFnClientUpdatePosition = NULL;

	if ( ! pFnClientUpdatePosition )
		pFnClientUpdatePosition = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientUpdatePosition" );

	APlayerController_execClientUpdatePosition_Parms ClientUpdatePosition_Parms;

	pFnClientUpdatePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientUpdatePosition, &ClientUpdatePosition_Parms, NULL );

	pFnClientUpdatePosition->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClearAckedMoves
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APlayerController::ClearAckedMoves ( )
{
	static UFunction* pFnClearAckedMoves = NULL;

	if ( ! pFnClearAckedMoves )
		pFnClearAckedMoves = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClearAckedMoves" );

	APlayerController_execClearAckedMoves_Parms ClearAckedMoves_Parms;

	pFnClearAckedMoves->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAckedMoves, &ClearAckedMoves_Parms, NULL );

	pFnClearAckedMoves->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ServerUpdatePing
// [0x00220040] 
// Parameters infos:
// int                            NewPing                        ( CPF_Parm )

void APlayerController::ServerUpdatePing ( int NewPing )
{
	static UFunction* pFnServerUpdatePing = NULL;

	if ( ! pFnServerUpdatePing )
		pFnServerUpdatePing = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerUpdatePing" );

	APlayerController_execServerUpdatePing_Parms ServerUpdatePing_Parms;
	ServerUpdatePing_Parms.NewPing = NewPing;

	this->ProcessEvent ( pFnServerUpdatePing, &ServerUpdatePing_Parms, NULL );
};

// Function Engine.PlayerController.UpdateStateFromAdjustment
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )

void APlayerController::UpdateStateFromAdjustment ( struct FName NewState )
{
	static UFunction* pFnUpdateStateFromAdjustment = NULL;

	if ( ! pFnUpdateStateFromAdjustment )
		pFnUpdateStateFromAdjustment = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.UpdateStateFromAdjustment" );

	APlayerController_execUpdateStateFromAdjustment_Parms UpdateStateFromAdjustment_Parms;
	memcpy ( &UpdateStateFromAdjustment_Parms.NewState, &NewState, 0x8 );

	pFnUpdateStateFromAdjustment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateStateFromAdjustment, &UpdateStateFromAdjustment_Parms, NULL );

	pFnUpdateStateFromAdjustment->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.LongClientAdjustPosition
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )
// float                          NewFloorX                      ( CPF_Parm )
// float                          NewFloorY                      ( CPF_Parm )
// float                          NewFloorZ                      ( CPF_Parm )

void APlayerController::eventLongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ )
{
	static UFunction* pFnLongClientAdjustPosition = NULL;

	if ( ! pFnLongClientAdjustPosition )
		pFnLongClientAdjustPosition = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.LongClientAdjustPosition" );

	APlayerController_eventLongClientAdjustPosition_Parms LongClientAdjustPosition_Parms;
	LongClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &LongClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	LongClientAdjustPosition_Parms.newPhysics = newPhysics;
	LongClientAdjustPosition_Parms.NewLocX = NewLocX;
	LongClientAdjustPosition_Parms.NewLocY = NewLocY;
	LongClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	LongClientAdjustPosition_Parms.NewVelX = NewVelX;
	LongClientAdjustPosition_Parms.NewVelY = NewVelY;
	LongClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	LongClientAdjustPosition_Parms.NewBase = NewBase;
	LongClientAdjustPosition_Parms.NewFloorX = NewFloorX;
	LongClientAdjustPosition_Parms.NewFloorY = NewFloorY;
	LongClientAdjustPosition_Parms.NewFloorZ = NewFloorZ;

	this->ProcessEvent ( pFnLongClientAdjustPosition, &LongClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.LongClientAdjustPositionPlayerController
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )
// float                          NewFloorX                      ( CPF_Parm )
// float                          NewFloorY                      ( CPF_Parm )
// float                          NewFloorZ                      ( CPF_Parm )

void APlayerController::LongClientAdjustPositionPlayerController ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ )
{
	static UFunction* pFnLongClientAdjustPositionPlayerController = NULL;

	if ( ! pFnLongClientAdjustPositionPlayerController )
		pFnLongClientAdjustPositionPlayerController = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.LongClientAdjustPositionPlayerController" );

	APlayerController_execLongClientAdjustPositionPlayerController_Parms LongClientAdjustPositionPlayerController_Parms;
	LongClientAdjustPositionPlayerController_Parms.TimeStamp = TimeStamp;
	memcpy ( &LongClientAdjustPositionPlayerController_Parms.NewState, &NewState, 0x8 );
	LongClientAdjustPositionPlayerController_Parms.newPhysics = newPhysics;
	LongClientAdjustPositionPlayerController_Parms.NewLocX = NewLocX;
	LongClientAdjustPositionPlayerController_Parms.NewLocY = NewLocY;
	LongClientAdjustPositionPlayerController_Parms.NewLocZ = NewLocZ;
	LongClientAdjustPositionPlayerController_Parms.NewVelX = NewVelX;
	LongClientAdjustPositionPlayerController_Parms.NewVelY = NewVelY;
	LongClientAdjustPositionPlayerController_Parms.NewVelZ = NewVelZ;
	LongClientAdjustPositionPlayerController_Parms.NewBase = NewBase;
	LongClientAdjustPositionPlayerController_Parms.NewFloorX = NewFloorX;
	LongClientAdjustPositionPlayerController_Parms.NewFloorY = NewFloorY;
	LongClientAdjustPositionPlayerController_Parms.NewFloorZ = NewFloorZ;

	pFnLongClientAdjustPositionPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLongClientAdjustPositionPlayerController, &LongClientAdjustPositionPlayerController_Parms, NULL );

	pFnLongClientAdjustPositionPlayerController->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ServerSetNetSpeed
// [0x002200C0] 
// Parameters infos:
// int                            NewSpeed                       ( CPF_Parm )

void APlayerController::ServerSetNetSpeed ( int NewSpeed )
{
	static UFunction* pFnServerSetNetSpeed = NULL;

	if ( ! pFnServerSetNetSpeed )
		pFnServerSetNetSpeed = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerSetNetSpeed" );

	APlayerController_execServerSetNetSpeed_Parms ServerSetNetSpeed_Parms;
	ServerSetNetSpeed_Parms.NewSpeed = NewSpeed;

	this->ProcessEvent ( pFnServerSetNetSpeed, &ServerSetNetSpeed_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdjustPosition
// [0x01820943] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::eventClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase )
{
	static UFunction* pFnClientAdjustPosition = NULL;

	if ( ! pFnClientAdjustPosition )
		pFnClientAdjustPosition = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientAdjustPosition" );

	APlayerController_eventClientAdjustPosition_Parms ClientAdjustPosition_Parms;
	ClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ClientAdjustPosition_Parms.newPhysics = newPhysics;
	ClientAdjustPosition_Parms.NewLocX = NewLocX;
	ClientAdjustPosition_Parms.NewLocY = NewLocY;
	ClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ClientAdjustPosition_Parms.NewVelX = NewVelX;
	ClientAdjustPosition_Parms.NewVelY = NewVelY;
	ClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	ClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnClientAdjustPosition, &ClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.ClientAckGoodMove
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerController::eventClientAckGoodMove ( float TimeStamp )
{
	static UFunction* pFnClientAckGoodMove = NULL;

	if ( ! pFnClientAckGoodMove )
		pFnClientAckGoodMove = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientAckGoodMove" );

	APlayerController_eventClientAckGoodMove_Parms ClientAckGoodMove_Parms;
	ClientAckGoodMove_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnClientAckGoodMove, &ClientAckGoodMove_Parms, NULL );
};

// Function Engine.PlayerController.APB_AckGoodStop
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void APlayerController::APB_AckGoodStop ( )
{
	static UFunction* pFnAPB_AckGoodStop = NULL;

	if ( ! pFnAPB_AckGoodStop )
		pFnAPB_AckGoodStop = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.APB_AckGoodStop" );

	APlayerController_execAPB_AckGoodStop_Parms APB_AckGoodStop_Parms;

	pFnAPB_AckGoodStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAPB_AckGoodStop, &APB_AckGoodStop_Parms, NULL );

	pFnAPB_AckGoodStop->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.APB_AckGoodStart
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void APlayerController::APB_AckGoodStart ( )
{
	static UFunction* pFnAPB_AckGoodStart = NULL;

	if ( ! pFnAPB_AckGoodStart )
		pFnAPB_AckGoodStart = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.APB_AckGoodStart" );

	APlayerController_execAPB_AckGoodStart_Parms APB_AckGoodStart_Parms;

	pFnAPB_AckGoodStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAPB_AckGoodStart, &APB_AckGoodStart_Parms, NULL );

	pFnAPB_AckGoodStart->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.APB_LCAPStop
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void APlayerController::APB_LCAPStop ( )
{
	static UFunction* pFnAPB_LCAPStop = NULL;

	if ( ! pFnAPB_LCAPStop )
		pFnAPB_LCAPStop = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.APB_LCAPStop" );

	APlayerController_execAPB_LCAPStop_Parms APB_LCAPStop_Parms;

	pFnAPB_LCAPStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAPB_LCAPStop, &APB_LCAPStop_Parms, NULL );

	pFnAPB_LCAPStop->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.APB_LCAPStart
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void APlayerController::APB_LCAPStart ( )
{
	static UFunction* pFnAPB_LCAPStart = NULL;

	if ( ! pFnAPB_LCAPStart )
		pFnAPB_LCAPStart = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.APB_LCAPStart" );

	APlayerController_execAPB_LCAPStart_Parms APB_LCAPStart_Parms;

	pFnAPB_LCAPStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAPB_LCAPStart, &APB_LCAPStart_Parms, NULL );

	pFnAPB_LCAPStart->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientCapBandwidth
// [0x010201C2] 
// Parameters infos:
// int                            Cap                            ( CPF_Parm )

void APlayerController::ClientCapBandwidth ( int Cap )
{
	static UFunction* pFnClientCapBandwidth = NULL;

	if ( ! pFnClientCapBandwidth )
		pFnClientCapBandwidth = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientCapBandwidth" );

	APlayerController_execClientCapBandwidth_Parms ClientCapBandwidth_Parms;
	ClientCapBandwidth_Parms.Cap = Cap;

	this->ProcessEvent ( pFnClientCapBandwidth, &ClientCapBandwidth_Parms, NULL );
};

// Function Engine.PlayerController.ShortClientAdjustPosition
// [0x01820943] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::eventShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnShortClientAdjustPosition = NULL;

	if ( ! pFnShortClientAdjustPosition )
		pFnShortClientAdjustPosition = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ShortClientAdjustPosition" );

	APlayerController_eventShortClientAdjustPosition_Parms ShortClientAdjustPosition_Parms;
	ShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ShortClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ShortClientAdjustPosition_Parms.newPhysics = newPhysics;
	ShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	ShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	ShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnShortClientAdjustPosition, &ShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.VeryShortClientAdjustPosition
// [0x01820943] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::eventVeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnVeryShortClientAdjustPosition = NULL;

	if ( ! pFnVeryShortClientAdjustPosition )
		pFnVeryShortClientAdjustPosition = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.VeryShortClientAdjustPosition" );

	APlayerController_eventVeryShortClientAdjustPosition_Parms VeryShortClientAdjustPosition_Parms;
	VeryShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	VeryShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	VeryShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	VeryShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	VeryShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnVeryShortClientAdjustPosition, &VeryShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.MoveAutonomous
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned char                  CompressedFlags                ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot )
{
	static UFunction* pFnMoveAutonomous = NULL;

	if ( ! pFnMoveAutonomous )
		pFnMoveAutonomous = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.MoveAutonomous" );

	APlayerController_execMoveAutonomous_Parms MoveAutonomous_Parms;
	MoveAutonomous_Parms.DeltaTime = DeltaTime;
	MoveAutonomous_Parms.CompressedFlags = CompressedFlags;
	memcpy ( &MoveAutonomous_Parms.newAccel, &newAccel, 0xC );
	memcpy ( &MoveAutonomous_Parms.DeltaRot, &DeltaRot, 0xC );

	pFnMoveAutonomous->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveAutonomous, &MoveAutonomous_Parms, NULL );

	pFnMoveAutonomous->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ProcessMove
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::eventProcessMove ( float DeltaTime, struct FVector newAccel, struct FRotator DeltaRot )
{
	static UFunction* pFnProcessMove = NULL;

	if ( ! pFnProcessMove )
		pFnProcessMove = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ProcessMove" );

	APlayerController_eventProcessMove_Parms ProcessMove_Parms;
	ProcessMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessMove_Parms.newAccel, &newAccel, 0xC );
	memcpy ( &ProcessMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessMove, &ProcessMove_Parms, NULL );
};

// Function Engine.PlayerController.ProcessMovePlayerController
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void APlayerController::ProcessMovePlayerController ( float DeltaTime, struct FVector* newAccel )
{
	static UFunction* pFnProcessMovePlayerController = NULL;

	if ( ! pFnProcessMovePlayerController )
		pFnProcessMovePlayerController = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ProcessMovePlayerController" );

	APlayerController_execProcessMovePlayerController_Parms ProcessMovePlayerController_Parms;
	ProcessMovePlayerController_Parms.DeltaTime = DeltaTime;

	pFnProcessMovePlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessMovePlayerController, &ProcessMovePlayerController_Parms, NULL );

	pFnProcessMovePlayerController->FunctionFlags |= 0x400;

	if ( newAccel )
		memcpy ( newAccel, &ProcessMovePlayerController_Parms.newAccel, 0xC );
};

// Function Engine.PlayerController.ProcessDrive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// float                          InSprint                       ( CPF_Parm )

void APlayerController::ProcessDrive ( float InForward, float InStrafe, float InUp, float InSprint )
{
	static UFunction* pFnProcessDrive = NULL;

	if ( ! pFnProcessDrive )
		pFnProcessDrive = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ProcessDrive" );

	APlayerController_execProcessDrive_Parms ProcessDrive_Parms;
	ProcessDrive_Parms.InForward = InForward;
	ProcessDrive_Parms.InStrafe = InStrafe;
	ProcessDrive_Parms.InUp = InUp;
	ProcessDrive_Parms.InSprint = InSprint;

	pFnProcessDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessDrive, &ProcessDrive_Parms, NULL );

	pFnProcessDrive->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SendClientAdjustment
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APlayerController::SendClientAdjustment ( )
{
	static UFunction* pFnSendClientAdjustment = NULL;

	if ( ! pFnSendClientAdjustment )
		pFnSendClientAdjustment = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SendClientAdjustment" );

	APlayerController_execSendClientAdjustment_Parms SendClientAdjustment_Parms;

	pFnSendClientAdjustment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendClientAdjustment, &SendClientAdjustment_Parms, NULL );

	pFnSendClientAdjustment->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ServerMove
// [0x00220C40] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  MoveFlags                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void APlayerController::eventServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View )
{
	static UFunction* pFnServerMove = NULL;

	if ( ! pFnServerMove )
		pFnServerMove = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerMove" );

	APlayerController_eventServerMove_Parms ServerMove_Parms;
	ServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &ServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &ServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	ServerMove_Parms.MoveFlags = MoveFlags;
	ServerMove_Parms.ClientRoll = ClientRoll;
	ServerMove_Parms.View = View;

	pFnServerMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerMove, &ServerMove_Parms, NULL );

	pFnServerMove->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.WrapResetTimeMargin
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventWrapResetTimeMargin ( )
{
	static UFunction* pFnWrapResetTimeMargin = NULL;

	if ( ! pFnWrapResetTimeMargin )
		pFnWrapResetTimeMargin = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.WrapResetTimeMargin" );

	APlayerController_eventWrapResetTimeMargin_Parms WrapResetTimeMargin_Parms;

	this->ProcessEvent ( pFnWrapResetTimeMargin, &WrapResetTimeMargin_Parms, NULL );
};

// Function Engine.PlayerController.WrapGivePawn
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::eventWrapGivePawn ( class APawn* NewPawn )
{
	static UFunction* pFnWrapGivePawn = NULL;

	if ( ! pFnWrapGivePawn )
		pFnWrapGivePawn = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.WrapGivePawn" );

	APlayerController_eventWrapGivePawn_Parms WrapGivePawn_Parms;
	WrapGivePawn_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnWrapGivePawn, &WrapGivePawn_Parms, NULL );
};

// Function Engine.PlayerController.OldServerMove
// [0x00220C41] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// float                          OldTimeStamp                   ( CPF_Parm )
// unsigned char                  OldAccelX                      ( CPF_Parm )
// unsigned char                  OldAccelY                      ( CPF_Parm )
// unsigned char                  OldAccelZ                      ( CPF_Parm )
// unsigned char                  OldMoveFlags                   ( CPF_Parm )

void APlayerController::eventOldServerMove ( float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags )
{
	static UFunction* pFnOldServerMove = NULL;

	if ( ! pFnOldServerMove )
		pFnOldServerMove = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OldServerMove" );

	APlayerController_eventOldServerMove_Parms OldServerMove_Parms;
	OldServerMove_Parms.OldTimeStamp = OldTimeStamp;
	OldServerMove_Parms.OldAccelX = OldAccelX;
	OldServerMove_Parms.OldAccelY = OldAccelY;
	OldServerMove_Parms.OldAccelZ = OldAccelZ;
	OldServerMove_Parms.OldMoveFlags = OldMoveFlags;

	pFnOldServerMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOldServerMove, &OldServerMove_Parms, NULL );

	pFnOldServerMove->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.DualServerMove
// [0x00220C41] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// float                          TimeStamp0                     ( CPF_Parm )
// struct FVector                 InAccel0                       ( CPF_Parm )
// unsigned char                  PendingFlags                   ( CPF_Parm )
// int                            View0                          ( CPF_Parm )
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  NewFlags                       ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void APlayerController::eventDualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View )
{
	static UFunction* pFnDualServerMove = NULL;

	if ( ! pFnDualServerMove )
		pFnDualServerMove = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.DualServerMove" );

	APlayerController_eventDualServerMove_Parms DualServerMove_Parms;
	DualServerMove_Parms.TimeStamp0 = TimeStamp0;
	memcpy ( &DualServerMove_Parms.InAccel0, &InAccel0, 0xC );
	DualServerMove_Parms.PendingFlags = PendingFlags;
	DualServerMove_Parms.View0 = View0;
	DualServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &DualServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &DualServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	DualServerMove_Parms.NewFlags = NewFlags;
	DualServerMove_Parms.ClientRoll = ClientRoll;
	DualServerMove_Parms.View = View;

	pFnDualServerMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDualServerMove, &DualServerMove_Parms, NULL );

	pFnDualServerMove->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ForceDeathUpdate
// [0x00020002] 
// Parameters infos:

void APlayerController::ForceDeathUpdate ( )
{
	static UFunction* pFnForceDeathUpdate = NULL;

	if ( ! pFnForceDeathUpdate )
		pFnForceDeathUpdate = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ForceDeathUpdate" );

	APlayerController_execForceDeathUpdate_Parms ForceDeathUpdate_Parms;

	this->ProcessEvent ( pFnForceDeathUpdate, &ForceDeathUpdate_Parms, NULL );
};

// Function Engine.PlayerController.ClientVoiceMessage
// [0x00020000] 
// Parameters infos:
// class APlayerReplicationInfo*  Sender                         ( CPF_Parm )
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// unsigned char                  messageID                      ( CPF_Parm )

void APlayerController::ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char messageID )
{
	static UFunction* pFnClientVoiceMessage = NULL;

	if ( ! pFnClientVoiceMessage )
		pFnClientVoiceMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientVoiceMessage" );

	APlayerController_execClientVoiceMessage_Parms ClientVoiceMessage_Parms;
	ClientVoiceMessage_Parms.Sender = Sender;
	ClientVoiceMessage_Parms.Recipient = Recipient;
	memcpy ( &ClientVoiceMessage_Parms.MessageType, &MessageType, 0x8 );
	ClientVoiceMessage_Parms.messageID = messageID;

	this->ProcessEvent ( pFnClientVoiceMessage, &ClientVoiceMessage_Parms, NULL );
};

// Function Engine.PlayerController.UsingFirstPersonCamera
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::UsingFirstPersonCamera ( )
{
	static UFunction* pFnUsingFirstPersonCamera = NULL;

	if ( ! pFnUsingFirstPersonCamera )
		pFnUsingFirstPersonCamera = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.UsingFirstPersonCamera" );

	APlayerController_execUsingFirstPersonCamera_Parms UsingFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUsingFirstPersonCamera, &UsingFirstPersonCamera_Parms, NULL );

	return UsingFirstPersonCamera_Parms.ReturnValue;
};

// Function Engine.PlayerController.ResetCameraMode
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APlayerController::ResetCameraMode ( )
{
	static UFunction* pFnResetCameraMode = NULL;

	if ( ! pFnResetCameraMode )
		pFnResetCameraMode = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ResetCameraMode" );

	APlayerController_execResetCameraMode_Parms ResetCameraMode_Parms;

	pFnResetCameraMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetCameraMode, &ResetCameraMode_Parms, NULL );

	pFnResetCameraMode->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetCameraMode
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::SetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnSetCameraMode = NULL;

	if ( ! pFnSetCameraMode )
		pFnSetCameraMode = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetCameraMode" );

	APlayerController_execSetCameraMode_Parms SetCameraMode_Parms;
	memcpy ( &SetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	pFnSetCameraMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCameraMode, &SetCameraMode_Parms, NULL );

	pFnSetCameraMode->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientSetCameraMode
// [0x01020DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::eventClientSetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnClientSetCameraMode = NULL;

	if ( ! pFnClientSetCameraMode )
		pFnClientSetCameraMode = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetCameraMode" );

	APlayerController_eventClientSetCameraMode_Parms ClientSetCameraMode_Parms;
	memcpy ( &ClientSetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	pFnClientSetCameraMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientSetCameraMode, &ClientSetCameraMode_Parms, NULL );

	pFnClientSetCameraMode->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ServerCamera
// [0x002200C0] 
// Parameters infos:
// struct FString                 r_NewMode                      ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerCamera ( struct FString r_NewMode )
{
	static UFunction* pFnServerCamera = NULL;

	if ( ! pFnServerCamera )
		pFnServerCamera = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerCamera" );

	APlayerController_execServerCamera_Parms ServerCamera_Parms;
	memcpy ( &ServerCamera_Parms.r_NewMode, &r_NewMode, 0xC );

	this->ProcessEvent ( pFnServerCamera, &ServerCamera_Parms, NULL );
};

// Function Engine.PlayerController.Camera
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// struct FName                   NewMode                        ( CPF_Parm )

void APlayerController::Camera ( struct FName NewMode )
{
	static UFunction* pFnCamera = NULL;

	if ( ! pFnCamera )
		pFnCamera = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Camera" );

	APlayerController_execCamera_Parms Camera_Parms;
	memcpy ( &Camera_Parms.NewMode, &NewMode, 0x8 );

	this->ProcessEvent ( pFnCamera, &Camera_Parms, NULL );
};

// Function Engine.PlayerController.PreClientTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 PendingURL                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void APlayerController::eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PreClientTravel" );

	APlayerController_eventPreClientTravel_Parms PreClientTravel_Parms;
	memcpy ( &PreClientTravel_Parms.PendingURL, &PendingURL, 0xC );
	PreClientTravel_Parms.TravelType = TravelType;
	PreClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function Engine.PlayerController.AllowTextMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::AllowTextMessage ( struct FString msg )
{
	static UFunction* pFnAllowTextMessage = NULL;

	if ( ! pFnAllowTextMessage )
		pFnAllowTextMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AllowTextMessage" );

	APlayerController_execAllowTextMessage_Parms AllowTextMessage_Parms;
	memcpy ( &AllowTextMessage_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnAllowTextMessage, &AllowTextMessage_Parms, NULL );

	return AllowTextMessage_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerMutate
// [0x002200C0] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerMutate ( struct FString MutateString )
{
	static UFunction* pFnServerMutate = NULL;

	if ( ! pFnServerMutate )
		pFnServerMutate = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerMutate" );

	APlayerController_execServerMutate_Parms ServerMutate_Parms;
	memcpy ( &ServerMutate_Parms.MutateString, &MutateString, 0xC );

	this->ProcessEvent ( pFnServerMutate, &ServerMutate_Parms, NULL );
};

// Function Engine.PlayerController.Mutate
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Mutate ( struct FString MutateString )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Mutate" );

	APlayerController_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.PlayerController.FOV
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void APlayerController::FOV ( float F )
{
	static UFunction* pFnFOV = NULL;

	if ( ! pFnFOV )
		pFnFOV = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.FOV" );

	APlayerController_execFOV_Parms FOV_Parms;
	FOV_Parms.F = F;

	this->ProcessEvent ( pFnFOV, &FOV_Parms, NULL );
};

// Function Engine.PlayerController.ResetFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetFOV ( )
{
	static UFunction* pFnResetFOV = NULL;

	if ( ! pFnResetFOV )
		pFnResetFOV = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ResetFOV" );

	APlayerController_execResetFOV_Parms ResetFOV_Parms;

	this->ProcessEvent ( pFnResetFOV, &ResetFOV_Parms, NULL );
};

// Function Engine.PlayerController.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void APlayerController::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetFOV" );

	APlayerController_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Engine.PlayerController.FixFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::FixFOV ( )
{
	static UFunction* pFnFixFOV = NULL;

	if ( ! pFnFixFOV )
		pFnFixFOV = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.FixFOV" );

	APlayerController_execFixFOV_Parms FixFOV_Parms;

	this->ProcessEvent ( pFnFixFOV, &FixFOV_Parms, NULL );
};

// Function Engine.PlayerController.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Destroyed" );

	APlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerController.ClearOnlineDelegates
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClearOnlineDelegates" );

	APlayerController_eventClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function Engine.PlayerController.PlayBeepSound
// [0x00020000] 
// Parameters infos:

void APlayerController::PlayBeepSound ( )
{
	static UFunction* pFnPlayBeepSound = NULL;

	if ( ! pFnPlayBeepSound )
		pFnPlayBeepSound = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PlayBeepSound" );

	APlayerController_execPlayBeepSound_Parms PlayBeepSound_Parms;

	this->ProcessEvent ( pFnPlayBeepSound, &PlayBeepSound_Parms, NULL );
};

// Function Engine.PlayerController.TeamMessage
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnTeamMessage = NULL;

	if ( ! pFnTeamMessage )
		pFnTeamMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.TeamMessage" );

	APlayerController_eventTeamMessage_Parms TeamMessage_Parms;
	TeamMessage_Parms.PRI = PRI;
	memcpy ( &TeamMessage_Parms.S, &S, 0xC );
	memcpy ( &TeamMessage_Parms.Type, &Type, 0x8 );
	TeamMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnTeamMessage, &TeamMessage_Parms, NULL );
};

// Function Engine.PlayerController.ClientMessage
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientMessage" );

	APlayerController_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0xC );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );
	ClientMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// [0x010201C2] 
// Parameters infos:
// class AActor*                  SourceActor                    ( CPF_Parm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName )
{
	static UFunction* pFnClientPlayActorFaceFXAnim = NULL;

	if ( ! pFnClientPlayActorFaceFXAnim )
		pFnClientPlayActorFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientPlayActorFaceFXAnim" );

	APlayerController_execClientPlayActorFaceFXAnim_Parms ClientPlayActorFaceFXAnim_Parms;
	ClientPlayActorFaceFXAnim_Parms.SourceActor = SourceActor;
	ClientPlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );

	this->ProcessEvent ( pFnClientPlayActorFaceFXAnim, &ClientPlayActorFaceFXAnim_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientStopSound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          FadeOutTime                    ( CPF_Parm )

void APlayerController::eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime )
{
	static UFunction* pFnKismet_ClientStopSound = NULL;

	if ( ! pFnKismet_ClientStopSound )
		pFnKismet_ClientStopSound = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Kismet_ClientStopSound" );

	APlayerController_eventKismet_ClientStopSound_Parms Kismet_ClientStopSound_Parms;
	Kismet_ClientStopSound_Parms.ASound = ASound;
	Kismet_ClientStopSound_Parms.SourceActor = SourceActor;
	Kismet_ClientStopSound_Parms.FadeOutTime = FadeOutTime;

	this->ProcessEvent ( pFnKismet_ClientStopSound, &Kismet_ClientStopSound_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientPlaySound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          VolumeMultiplier               ( CPF_Parm )
// float                          PitchMultiplier                ( CPF_Parm )
// float                          FadeInTime                     ( CPF_Parm )
// unsigned long                  bSuppressSubtitles             ( CPF_Parm )
// unsigned long                  bSuppressSpatialization        ( CPF_Parm )

void APlayerController::eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization )
{
	static UFunction* pFnKismet_ClientPlaySound = NULL;

	if ( ! pFnKismet_ClientPlaySound )
		pFnKismet_ClientPlaySound = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Kismet_ClientPlaySound" );

	APlayerController_eventKismet_ClientPlaySound_Parms Kismet_ClientPlaySound_Parms;
	Kismet_ClientPlaySound_Parms.ASound = ASound;
	Kismet_ClientPlaySound_Parms.SourceActor = SourceActor;
	Kismet_ClientPlaySound_Parms.VolumeMultiplier = VolumeMultiplier;
	Kismet_ClientPlaySound_Parms.PitchMultiplier = PitchMultiplier;
	Kismet_ClientPlaySound_Parms.FadeInTime = FadeInTime;
	Kismet_ClientPlaySound_Parms.bSuppressSubtitles = bSuppressSubtitles;
	Kismet_ClientPlaySound_Parms.bSuppressSpatialization = bSuppressSpatialization;

	this->ProcessEvent ( pFnKismet_ClientPlaySound, &Kismet_ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.ClientHearSound
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bIsOccluded                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded )
{
	static UFunction* pFnClientHearSound = NULL;

	if ( ! pFnClientHearSound )
		pFnClientHearSound = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientHearSound" );

	APlayerController_eventClientHearSound_Parms ClientHearSound_Parms;
	ClientHearSound_Parms.ASound = ASound;
	ClientHearSound_Parms.SourceActor = SourceActor;
	memcpy ( &ClientHearSound_Parms.SourceLocation, &SourceLocation, 0xC );
	ClientHearSound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	ClientHearSound_Parms.bIsOccluded = bIsOccluded;

	this->ProcessEvent ( pFnClientHearSound, &ClientHearSound_Parms, NULL );
};

// Function Engine.PlayerController.GetPooledAudioComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* APlayerController::GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation )
{
	static UFunction* pFnGetPooledAudioComponent = NULL;

	if ( ! pFnGetPooledAudioComponent )
		pFnGetPooledAudioComponent = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetPooledAudioComponent" );

	APlayerController_execGetPooledAudioComponent_Parms GetPooledAudioComponent_Parms;
	GetPooledAudioComponent_Parms.ASound = ASound;
	GetPooledAudioComponent_Parms.SourceActor = SourceActor;
	GetPooledAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	GetPooledAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &GetPooledAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );

	pFnGetPooledAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledAudioComponent, &GetPooledAudioComponent_Parms, NULL );

	pFnGetPooledAudioComponent->FunctionFlags |= 0x400;

	return GetPooledAudioComponent_Parms.ReturnValue;
};

// Function Engine.PlayerController.HearSoundFinished
// [0x00020102] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void APlayerController::HearSoundFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnHearSoundFinished = NULL;

	if ( ! pFnHearSoundFinished )
		pFnHearSoundFinished = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.HearSoundFinished" );

	APlayerController_execHearSoundFinished_Parms HearSoundFinished_Parms;
	HearSoundFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnHearSoundFinished, &HearSoundFinished_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlaySound
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )

void APlayerController::eventClientPlaySound ( class USoundCue* ASound )
{
	static UFunction* pFnClientPlaySound = NULL;

	if ( ! pFnClientPlaySound )
		pFnClientPlaySound = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientPlaySound" );

	APlayerController_eventClientPlaySound_Parms ClientPlaySound_Parms;
	ClientPlaySound_Parms.ASound = ASound;

	this->ProcessEvent ( pFnClientPlaySound, &ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.ReceiveLocalizedMessage
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ReceiveLocalizedMessage" );

	APlayerController_eventReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;
	ReceiveLocalizedMessage_Parms.Message = Message;
	ReceiveLocalizedMessage_Parms.Switch = Switch;
	ReceiveLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	ReceiveLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	ReceiveLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function Engine.PlayerController.CleanupPRI
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanupPRI ( )
{
	static UFunction* pFnCleanupPRI = NULL;

	if ( ! pFnCleanupPRI )
		pFnCleanupPRI = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CleanupPRI" );

	APlayerController_execCleanupPRI_Parms CleanupPRI_Parms;

	this->ProcessEvent ( pFnCleanupPRI, &CleanupPRI_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHUD
// [0x010201C2] 
// Parameters infos:
// class UClass*                  newHUDType                     ( CPF_Parm )
// class UClass*                  newScoringType                 ( CPF_Parm )

void APlayerController::ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType )
{
	static UFunction* pFnClientSetHUD = NULL;

	if ( ! pFnClientSetHUD )
		pFnClientSetHUD = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientSetHUD" );

	APlayerController_execClientSetHUD_Parms ClientSetHUD_Parms;
	ClientSetHUD_Parms.newHUDType = newHUDType;
	ClientSetHUD_Parms.newScoringType = newScoringType;

	this->ProcessEvent ( pFnClientSetHUD, &ClientSetHUD_Parms, NULL );
};

// Function Engine.PlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PawnDied" );

	APlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.PlayerController.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.UnPossess" );

	APlayerController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.PlayerController.ServerAcknowledgePossession
// [0x002200C0] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::ServerAcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnServerAcknowledgePossession = NULL;

	if ( ! pFnServerAcknowledgePossession )
		pFnServerAcknowledgePossession = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerAcknowledgePossession" );

	APlayerController_execServerAcknowledgePossession_Parms ServerAcknowledgePossession_Parms;
	ServerAcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnServerAcknowledgePossession, &ServerAcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.AcknowledgePossession
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::AcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnAcknowledgePossession = NULL;

	if ( ! pFnAcknowledgePossession )
		pFnAcknowledgePossession = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AcknowledgePossession" );

	APlayerController_execAcknowledgePossession_Parms AcknowledgePossession_Parms;
	AcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnAcknowledgePossession, &AcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   aPawn                          ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Possess" );

	APlayerController_eventPossess_Parms Possess_Parms;
	Possess_Parms.aPawn = aPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.PlayerController.GivePawn
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::GivePawn ( class APawn* NewPawn )
{
	static UFunction* pFnGivePawn = NULL;

	if ( ! pFnGivePawn )
		pFnGivePawn = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GivePawn" );

	APlayerController_execGivePawn_Parms GivePawn_Parms;
	GivePawn_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnGivePawn, &GivePawn_Parms, NULL );
};

// Function Engine.PlayerController.AskForPawn
// [0x002200C0] 
// Parameters infos:

void APlayerController::AskForPawn ( )
{
	static UFunction* pFnAskForPawn = NULL;

	if ( ! pFnAskForPawn )
		pFnAskForPawn = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AskForPawn" );

	APlayerController_execAskForPawn_Parms AskForPawn_Parms;

	this->ProcessEvent ( pFnAskForPawn, &AskForPawn_Parms, NULL );
};

// Function Engine.PlayerController.ClientGotoState
// [0x010201C2] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// struct FName                   NewLabel                       ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientGotoState ( struct FName NewState, struct FName NewLabel )
{
	static UFunction* pFnClientGotoState = NULL;

	if ( ! pFnClientGotoState )
		pFnClientGotoState = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientGotoState" );

	APlayerController_execClientGotoState_Parms ClientGotoState_Parms;
	memcpy ( &ClientGotoState_Parms.NewState, &NewState, 0x8 );
	memcpy ( &ClientGotoState_Parms.NewLabel, &NewLabel, 0x8 );

	this->ProcessEvent ( pFnClientGotoState, &ClientGotoState_Parms, NULL );
};

// Function Engine.PlayerController.IsMouseAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsMouseAvailable ( )
{
	static UFunction* pFnIsMouseAvailable = NULL;

	if ( ! pFnIsMouseAvailable )
		pFnIsMouseAvailable = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsMouseAvailable" );

	APlayerController_execIsMouseAvailable_Parms IsMouseAvailable_Parms;

	pFnIsMouseAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMouseAvailable, &IsMouseAvailable_Parms, NULL );

	pFnIsMouseAvailable->FunctionFlags |= 0x400;

	return IsMouseAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsKeyboardAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsKeyboardAvailable ( )
{
	static UFunction* pFnIsKeyboardAvailable = NULL;

	if ( ! pFnIsKeyboardAvailable )
		pFnIsKeyboardAvailable = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsKeyboardAvailable" );

	APlayerController_execIsKeyboardAvailable_Parms IsKeyboardAvailable_Parms;

	pFnIsKeyboardAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsKeyboardAvailable, &IsKeyboardAvailable_Parms, NULL );

	pFnIsKeyboardAvailable->FunctionFlags |= 0x400;

	return IsKeyboardAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetUseTiltForwardAndBack
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetUseTiltForwardAndBack ( unsigned long bActive )
{
	static UFunction* pFnSetUseTiltForwardAndBack = NULL;

	if ( ! pFnSetUseTiltForwardAndBack )
		pFnSetUseTiltForwardAndBack = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetUseTiltForwardAndBack" );

	APlayerController_execSetUseTiltForwardAndBack_Parms SetUseTiltForwardAndBack_Parms;
	SetUseTiltForwardAndBack_Parms.bActive = bActive;

	pFnSetUseTiltForwardAndBack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseTiltForwardAndBack, &SetUseTiltForwardAndBack_Parms, NULL );

	pFnSetUseTiltForwardAndBack->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetOnlyUseControllerTiltInput ( unsigned long bActive )
{
	static UFunction* pFnSetOnlyUseControllerTiltInput = NULL;

	if ( ! pFnSetOnlyUseControllerTiltInput )
		pFnSetOnlyUseControllerTiltInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetOnlyUseControllerTiltInput" );

	APlayerController_execSetOnlyUseControllerTiltInput_Parms SetOnlyUseControllerTiltInput_Parms;
	SetOnlyUseControllerTiltInput_Parms.bActive = bActive;

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyUseControllerTiltInput, &SetOnlyUseControllerTiltInput_Parms, NULL );

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetControllerTiltActive ( unsigned long bActive )
{
	static UFunction* pFnSetControllerTiltActive = NULL;

	if ( ! pFnSetControllerTiltActive )
		pFnSetControllerTiltActive = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetControllerTiltActive" );

	APlayerController_execSetControllerTiltActive_Parms SetControllerTiltActive_Parms;
	SetControllerTiltActive_Parms.bActive = bActive;

	pFnSetControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetControllerTiltActive, &SetControllerTiltActive_Parms, NULL );

	pFnSetControllerTiltActive->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetControllerTiltDesiredIfAvailable ( unsigned long bActive )
{
	static UFunction* pFnSetControllerTiltDesiredIfAvailable = NULL;

	if ( ! pFnSetControllerTiltDesiredIfAvailable )
		pFnSetControllerTiltDesiredIfAvailable = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable" );

	APlayerController_execSetControllerTiltDesiredIfAvailable_Parms SetControllerTiltDesiredIfAvailable_Parms;
	SetControllerTiltDesiredIfAvailable_Parms.bActive = bActive;

	pFnSetControllerTiltDesiredIfAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetControllerTiltDesiredIfAvailable, &SetControllerTiltDesiredIfAvailable_Parms, NULL );

	pFnSetControllerTiltDesiredIfAvailable->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsControllerTiltActive ( )
{
	static UFunction* pFnIsControllerTiltActive = NULL;

	if ( ! pFnIsControllerTiltActive )
		pFnIsControllerTiltActive = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.IsControllerTiltActive" );

	APlayerController_execIsControllerTiltActive_Parms IsControllerTiltActive_Parms;

	pFnIsControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsControllerTiltActive, &IsControllerTiltActive_Parms, NULL );

	pFnIsControllerTiltActive->FunctionFlags |= 0x400;

	return IsControllerTiltActive_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetRumbleScale
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APlayerController::GetRumbleScale ( )
{
	static UFunction* pFnGetRumbleScale = NULL;

	if ( ! pFnGetRumbleScale )
		pFnGetRumbleScale = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetRumbleScale" );

	APlayerController_execGetRumbleScale_Parms GetRumbleScale_Parms;

	this->ProcessEvent ( pFnGetRumbleScale, &GetRumbleScale_Parms, NULL );

	return GetRumbleScale_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetRumbleScale
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ScaleBy                        ( CPF_Parm )

void APlayerController::SetRumbleScale ( float ScaleBy )
{
	static UFunction* pFnSetRumbleScale = NULL;

	if ( ! pFnSetRumbleScale )
		pFnSetRumbleScale = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetRumbleScale" );

	APlayerController_execSetRumbleScale_Parms SetRumbleScale_Parms;
	SetRumbleScale_Parms.ScaleBy = ScaleBy;

	this->ProcessEvent ( pFnSetRumbleScale, &SetRumbleScale_Parms, NULL );
};

// Function Engine.PlayerController.SetPlayerDataProvider
// [0x00020102] 
// Parameters infos:
// class UPlayerDataProvider*     DataProvider                   ( CPF_Parm )

void APlayerController::SetPlayerDataProvider ( class UPlayerDataProvider* DataProvider )
{
	static UFunction* pFnSetPlayerDataProvider = NULL;

	if ( ! pFnSetPlayerDataProvider )
		pFnSetPlayerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetPlayerDataProvider" );

	APlayerController_execSetPlayerDataProvider_Parms SetPlayerDataProvider_Parms;
	SetPlayerDataProvider_Parms.DataProvider = DataProvider;

	this->ProcessEvent ( pFnSetPlayerDataProvider, &SetPlayerDataProvider_Parms, NULL );
};

// Function Engine.PlayerController.UnregisterPlayerDataStores
// [0x00020102] 
// Parameters infos:

void APlayerController::UnregisterPlayerDataStores ( )
{
	static UFunction* pFnUnregisterPlayerDataStores = NULL;

	if ( ! pFnUnregisterPlayerDataStores )
		pFnUnregisterPlayerDataStores = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.UnregisterPlayerDataStores" );

	APlayerController_execUnregisterPlayerDataStores_Parms UnregisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerDataStores, &UnregisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterPlayerDataStores
// [0x00020102] 
// Parameters infos:

void APlayerController::RegisterPlayerDataStores ( )
{
	static UFunction* pFnRegisterPlayerDataStores = NULL;

	if ( ! pFnRegisterPlayerDataStores )
		pFnRegisterPlayerDataStores = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.RegisterPlayerDataStores" );

	APlayerController_execRegisterPlayerDataStores_Parms RegisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterPlayerDataStores, &RegisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.ClientInitializeDataStores
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientInitializeDataStores ( )
{
	static UFunction* pFnClientInitializeDataStores = NULL;

	if ( ! pFnClientInitializeDataStores )
		pFnClientInitializeDataStores = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientInitializeDataStores" );

	APlayerController_execClientInitializeDataStores_Parms ClientInitializeDataStores_Parms;

	this->ProcessEvent ( pFnClientInitializeDataStores, &ClientInitializeDataStores_Parms, NULL );
};

// Function Engine.PlayerController.ServerSetUniquePlayerId
// [0x00A200C0] 
// Parameters infos:
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// unsigned long                  bWasInvited                    ( CPF_Parm )

void APlayerController::ServerSetUniquePlayerId ( struct FUniqueNetId UniqueId, unsigned long bWasInvited )
{
	static UFunction* pFnServerSetUniquePlayerId = NULL;

	if ( ! pFnServerSetUniquePlayerId )
		pFnServerSetUniquePlayerId = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerSetUniquePlayerId" );

	APlayerController_execServerSetUniquePlayerId_Parms ServerSetUniquePlayerId_Parms;
	memcpy ( &ServerSetUniquePlayerId_Parms.UniqueId, &UniqueId, 0x8 );
	ServerSetUniquePlayerId_Parms.bWasInvited = bWasInvited;

	this->ProcessEvent ( pFnServerSetUniquePlayerId, &ServerSetUniquePlayerId_Parms, NULL );
};

// Function Engine.PlayerController.InitUniquePlayerId
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventInitUniquePlayerId ( )
{
	static UFunction* pFnInitUniquePlayerId = NULL;

	if ( ! pFnInitUniquePlayerId )
		pFnInitUniquePlayerId = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.InitUniquePlayerId" );

	APlayerController_eventInitUniquePlayerId_Parms InitUniquePlayerId_Parms;

	this->ProcessEvent ( pFnInitUniquePlayerId, &InitUniquePlayerId_Parms, NULL );
};

// Function Engine.PlayerController.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ReplicatedEvent" );

	APlayerController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerController.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.InitInputSystem" );

	APlayerController_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function Engine.PlayerController.CleanOutSavedMoves
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::CleanOutSavedMoves ( )
{
	static UFunction* pFnCleanOutSavedMoves = NULL;

	if ( ! pFnCleanOutSavedMoves )
		pFnCleanOutSavedMoves = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CleanOutSavedMoves" );

	APlayerController_execCleanOutSavedMoves_Parms CleanOutSavedMoves_Parms;

	pFnCleanOutSavedMoves->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanOutSavedMoves, &CleanOutSavedMoves_Parms, NULL );

	pFnCleanOutSavedMoves->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientReset
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientReset ( )
{
	static UFunction* pFnClientReset = NULL;

	if ( ! pFnClientReset )
		pFnClientReset = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientReset" );

	APlayerController_execClientReset_Parms ClientReset_Parms;

	this->ProcessEvent ( pFnClientReset, &ClientReset_Parms, NULL );
};

// Function Engine.PlayerController.Reset
// [0x00020002] 
// Parameters infos:

void APlayerController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.Reset" );

	APlayerController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerController.SpawnDefaultHUD
// [0x00020002] 
// Parameters infos:

void APlayerController::SpawnDefaultHUD ( )
{
	static UFunction* pFnSpawnDefaultHUD = NULL;

	if ( ! pFnSpawnDefaultHUD )
		pFnSpawnDefaultHUD = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SpawnDefaultHUD" );

	APlayerController_execSpawnDefaultHUD_Parms SpawnDefaultHUD_Parms;

	this->ProcessEvent ( pFnSpawnDefaultHUD, &SpawnDefaultHUD_Parms, NULL );
};

// Function Engine.PlayerController.EnableCheats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::EnableCheats ( )
{
	static UFunction* pFnEnableCheats = NULL;

	if ( ! pFnEnableCheats )
		pFnEnableCheats = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.EnableCheats" );

	APlayerController_execEnableCheats_Parms EnableCheats_Parms;

	this->ProcessEvent ( pFnEnableCheats, &EnableCheats_Parms, NULL );
};

// Function Engine.PlayerController.AddCheats
// [0x00020002] 
// Parameters infos:

void APlayerController::AddCheats ( )
{
	static UFunction* pFnAddCheats = NULL;

	if ( ! pFnAddCheats )
		pFnAddCheats = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.AddCheats" );

	APlayerController_execAddCheats_Parms AddCheats_Parms;

	this->ProcessEvent ( pFnAddCheats, &AddCheats_Parms, NULL );
};

// Function Engine.PlayerController.KickWarning
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventKickWarning ( )
{
	static UFunction* pFnKickWarning = NULL;

	if ( ! pFnKickWarning )
		pFnKickWarning = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.KickWarning" );

	APlayerController_eventKickWarning_Parms KickWarning_Parms;

	this->ProcessEvent ( pFnKickWarning, &KickWarning_Parms, NULL );
};

// Function Engine.PlayerController.ServerGivePawn
// [0x00020002] 
// Parameters infos:

void APlayerController::ServerGivePawn ( )
{
	static UFunction* pFnServerGivePawn = NULL;

	if ( ! pFnServerGivePawn )
		pFnServerGivePawn = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerGivePawn" );

	APlayerController_execServerGivePawn_Parms ServerGivePawn_Parms;

	this->ProcessEvent ( pFnServerGivePawn, &ServerGivePawn_Parms, NULL );
};

// Function Engine.PlayerController.ServerShortTimeout
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerShortTimeout ( )
{
	static UFunction* pFnServerShortTimeout = NULL;

	if ( ! pFnServerShortTimeout )
		pFnServerShortTimeout = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerShortTimeout" );

	APlayerController_execServerShortTimeout_Parms ServerShortTimeout_Parms;

	this->ProcessEvent ( pFnServerShortTimeout, &ServerShortTimeout_Parms, NULL );
};

// Function Engine.PlayerController.ResetTimeMargin
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetTimeMargin ( )
{
	static UFunction* pFnResetTimeMargin = NULL;

	if ( ! pFnResetTimeMargin )
		pFnResetTimeMargin = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ResetTimeMargin" );

	APlayerController_execResetTimeMargin_Parms ResetTimeMargin_Parms;

	this->ProcessEvent ( pFnResetTimeMargin, &ResetTimeMargin_Parms, NULL );
};

// Function Engine.PlayerController.PreRender
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void APlayerController::eventPreRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPreRender = NULL;

	if ( ! pFnPreRender )
		pFnPreRender = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PreRender" );

	APlayerController_eventPreRender_Parms PreRender_Parms;
	PreRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPreRender, &PreRender_Parms, NULL );
};

// Function Engine.PlayerController.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ReceivedPlayer" );

	APlayerController_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function Engine.PlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PostBeginPlay" );

	APlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerController.SpawnCoverReplicator
// [0x00020002] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* APlayerController::SpawnCoverReplicator ( )
{
	static UFunction* pFnSpawnCoverReplicator = NULL;

	if ( ! pFnSpawnCoverReplicator )
		pFnSpawnCoverReplicator = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SpawnCoverReplicator" );

	APlayerController_execSpawnCoverReplicator_Parms SpawnCoverReplicator_Parms;

	this->ProcessEvent ( pFnSpawnCoverReplicator, &SpawnCoverReplicator_Parms, NULL );

	return SpawnCoverReplicator_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpauseControllerConnected
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseControllerConnected ( )
{
	static UFunction* pFnCanUnpauseControllerConnected = NULL;

	if ( ! pFnCanUnpauseControllerConnected )
		pFnCanUnpauseControllerConnected = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CanUnpauseControllerConnected" );

	APlayerController_execCanUnpauseControllerConnected_Parms CanUnpauseControllerConnected_Parms;

	this->ProcessEvent ( pFnCanUnpauseControllerConnected, &CanUnpauseControllerConnected_Parms, NULL );

	return CanUnpauseControllerConnected_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnControllerChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void APlayerController::OnControllerChanged ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChanged = NULL;

	if ( ! pFnOnControllerChanged )
		pFnOnControllerChanged = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnControllerChanged" );

	APlayerController_execOnControllerChanged_Parms OnControllerChanged_Parms;
	OnControllerChanged_Parms.ControllerId = ControllerId;
	OnControllerChanged_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChanged, &OnControllerChanged_Parms, NULL );
};

// Function Engine.PlayerController.FellOutOfWorld
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APlayerController::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.FellOutOfWorld" );

	APlayerController_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.PlayerController.CanUnpauseExternalUI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseExternalUI ( )
{
	static UFunction* pFnCanUnpauseExternalUI = NULL;

	if ( ! pFnCanUnpauseExternalUI )
		pFnCanUnpauseExternalUI = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CanUnpauseExternalUI" );

	APlayerController_execCanUnpauseExternalUI_Parms CanUnpauseExternalUI_Parms;

	this->ProcessEvent ( pFnCanUnpauseExternalUI, &CanUnpauseExternalUI_Parms, NULL );

	return CanUnpauseExternalUI_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnExternalUIChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void APlayerController::OnExternalUIChanged ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChanged = NULL;

	if ( ! pFnOnExternalUIChanged )
		pFnOnExternalUIChanged = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.OnExternalUIChanged" );

	APlayerController_execOnExternalUIChanged_Parms OnExternalUIChanged_Parms;
	OnExternalUIChanged_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChanged, &OnExternalUIChanged_Parms, NULL );
};

// Function Engine.PlayerController.CleanUpAudioComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::CleanUpAudioComponents ( )
{
	static UFunction* pFnCleanUpAudioComponents = NULL;

	if ( ! pFnCleanUpAudioComponents )
		pFnCleanUpAudioComponents = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CleanUpAudioComponents" );

	APlayerController_execCleanUpAudioComponents_Parms CleanUpAudioComponents_Parms;

	pFnCleanUpAudioComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUpAudioComponents, &CleanUpAudioComponents_Parms, NULL );

	pFnCleanUpAudioComponents->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.FindStairRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020C]
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

int APlayerController::FindStairRotation ( float DeltaTime )
{
	static UFunction* pFnFindStairRotation = NULL;

	if ( ! pFnFindStairRotation )
		pFnFindStairRotation = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.FindStairRotation" );

	APlayerController_execFindStairRotation_Parms FindStairRotation_Parms;
	FindStairRotation_Parms.DeltaTime = DeltaTime;

	unsigned long NativeIndex = pFnFindStairRotation->iNative;
	pFnFindStairRotation->iNative = 0;

	pFnFindStairRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStairRotation, &FindStairRotation_Parms, NULL );

	pFnFindStairRotation->FunctionFlags |= 0x400;

	pFnFindStairRotation->iNative = NativeIndex;

	return FindStairRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.CheckSpeedHack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool APlayerController::CheckSpeedHack ( float DeltaTime )
{
	static UFunction* pFnCheckSpeedHack = NULL;

	if ( ! pFnCheckSpeedHack )
		pFnCheckSpeedHack = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CheckSpeedHack" );

	APlayerController_execCheckSpeedHack_Parms CheckSpeedHack_Parms;
	CheckSpeedHack_Parms.DeltaTime = DeltaTime;

	pFnCheckSpeedHack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckSpeedHack, &CheckSpeedHack_Parms, NULL );

	pFnCheckSpeedHack->FunctionFlags |= 0x400;

	return CheckSpeedHack_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerProcessConvolve
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm | CPF_NeedCtorLink )
// int                            H                              ( CPF_Parm )

void APlayerController::eventServerProcessConvolve ( struct FString C, int H )
{
	static UFunction* pFnServerProcessConvolve = NULL;

	if ( ! pFnServerProcessConvolve )
		pFnServerProcessConvolve = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ServerProcessConvolve" );

	APlayerController_eventServerProcessConvolve_Parms ServerProcessConvolve_Parms;
	memcpy ( &ServerProcessConvolve_Parms.C, &C, 0xC );
	ServerProcessConvolve_Parms.H = H;

	pFnServerProcessConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerProcessConvolve, &ServerProcessConvolve_Parms, NULL );

	pFnServerProcessConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientConvolve
// [0x01040DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm | CPF_NeedCtorLink )
// int                            H                              ( CPF_Parm )

void APlayerController::eventClientConvolve ( struct FString C, int H )
{
	static UFunction* pFnClientConvolve = NULL;

	if ( ! pFnClientConvolve )
		pFnClientConvolve = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientConvolve" );

	APlayerController_eventClientConvolve_Parms ClientConvolve_Parms;
	memcpy ( &ClientConvolve_Parms.C, &C, 0xC );
	ClientConvolve_Parms.H = H;

	pFnClientConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientConvolve, &ClientConvolve_Parms, NULL );

	pFnClientConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAudioGroupVolume
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          Volume                         ( CPF_Parm )

void APlayerController::SetAudioGroupVolume ( struct FName GroupName, float Volume )
{
	static UFunction* pFnSetAudioGroupVolume = NULL;

	if ( ! pFnSetAudioGroupVolume )
		pFnSetAudioGroupVolume = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetAudioGroupVolume" );

	APlayerController_execSetAudioGroupVolume_Parms SetAudioGroupVolume_Parms;
	memcpy ( &SetAudioGroupVolume_Parms.GroupName, &GroupName, 0x8 );
	SetAudioGroupVolume_Parms.Volume = Volume;

	pFnSetAudioGroupVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAudioGroupVolume, &SetAudioGroupVolume_Parms, NULL );

	pFnSetAudioGroupVolume->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAllowMatureLanguage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAllowMatureLanguge            ( CPF_Parm )

void APlayerController::SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge )
{
	static UFunction* pFnSetAllowMatureLanguage = NULL;

	if ( ! pFnSetAllowMatureLanguage )
		pFnSetAllowMatureLanguage = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetAllowMatureLanguage" );

	APlayerController_execSetAllowMatureLanguage_Parms SetAllowMatureLanguage_Parms;
	SetAllowMatureLanguage_Parms.bAllowMatureLanguge = bAllowMatureLanguge;

	pFnSetAllowMatureLanguage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllowMatureLanguage, &SetAllowMatureLanguage_Parms, NULL );

	pFnSetAllowMatureLanguage->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.PasteFromClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::PasteFromClipboard ( )
{
	static UFunction* pFnPasteFromClipboard = NULL;

	if ( ! pFnPasteFromClipboard )
		pFnPasteFromClipboard = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.PasteFromClipboard" );

	APlayerController_execPasteFromClipboard_Parms PasteFromClipboard_Parms;

	pFnPasteFromClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPasteFromClipboard, &PasteFromClipboard_Parms, NULL );

	pFnPasteFromClipboard->FunctionFlags |= 0x400;

	return PasteFromClipboard_Parms.ReturnValue;
};

// Function Engine.PlayerController.CopyToClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::CopyToClipboard ( struct FString Text )
{
	static UFunction* pFnCopyToClipboard = NULL;

	if ( ! pFnCopyToClipboard )
		pFnCopyToClipboard = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.CopyToClipboard" );

	APlayerController_execCopyToClipboard_Parms CopyToClipboard_Parms;
	memcpy ( &CopyToClipboard_Parms.Text, &Text, 0xC );

	pFnCopyToClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyToClipboard, &CopyToClipboard_Parms, NULL );

	pFnCopyToClipboard->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.GetDefaultURL
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Option                         ( CPF_Parm | CPF_NeedCtorLink )

struct FString APlayerController::GetDefaultURL ( struct FString Option )
{
	static UFunction* pFnGetDefaultURL = NULL;

	if ( ! pFnGetDefaultURL )
		pFnGetDefaultURL = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetDefaultURL" );

	APlayerController_execGetDefaultURL_Parms GetDefaultURL_Parms;
	memcpy ( &GetDefaultURL_Parms.Option, &Option, 0xC );

	pFnGetDefaultURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultURL, &GetDefaultURL_Parms, NULL );

	pFnGetDefaultURL->FunctionFlags |= 0x400;

	return GetDefaultURL_Parms.ReturnValue;
};

// Function Engine.PlayerController.UpdateURL
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0222]
// Parameters infos:
// struct FString                 NewOption                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NewValue                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSave1Default                  ( CPF_Parm )

void APlayerController::UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default )
{
	static UFunction* pFnUpdateURL = NULL;

	if ( ! pFnUpdateURL )
		pFnUpdateURL = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.UpdateURL" );

	APlayerController_execUpdateURL_Parms UpdateURL_Parms;
	memcpy ( &UpdateURL_Parms.NewOption, &NewOption, 0xC );
	memcpy ( &UpdateURL_Parms.NewValue, &NewValue, 0xC );
	UpdateURL_Parms.bSave1Default = bSave1Default;

	unsigned long NativeIndex = pFnUpdateURL->iNative;
	pFnUpdateURL->iNative = 0;

	pFnUpdateURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateURL, &UpdateURL_Parms, NULL );

	pFnUpdateURL->FunctionFlags |= 0x400;

	pFnUpdateURL->iNative = NativeIndex;
};

// Function Engine.PlayerController.ClientTravel
// [0x01020DC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid )
{
	static UFunction* pFnClientTravel = NULL;

	if ( ! pFnClientTravel )
		pFnClientTravel = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientTravel" );

	APlayerController_eventClientTravel_Parms ClientTravel_Parms;
	memcpy ( &ClientTravel_Parms.URL, &URL, 0xC );
	ClientTravel_Parms.TravelType = TravelType;
	ClientTravel_Parms.bSeamless = bSeamless;
	memcpy ( &ClientTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnClientTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientTravel, &ClientTravel_Parms, NULL );

	pFnClientTravel->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ConsoleCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString APlayerController::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ConsoleCommand" );

	APlayerController_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetServerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetServerNetworkAddress ( )
{
	static UFunction* pFnGetServerNetworkAddress = NULL;

	if ( ! pFnGetServerNetworkAddress )
		pFnGetServerNetworkAddress = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetServerNetworkAddress" );

	APlayerController_execGetServerNetworkAddress_Parms GetServerNetworkAddress_Parms;

	pFnGetServerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetServerNetworkAddress, &GetServerNetworkAddress_Parms, NULL );

	pFnGetServerNetworkAddress->FunctionFlags |= 0x400;

	return GetServerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPlayerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPlayerNetworkAddress ( )
{
	static UFunction* pFnGetPlayerNetworkAddress = NULL;

	if ( ! pFnGetPlayerNetworkAddress )
		pFnGetPlayerNetworkAddress = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.GetPlayerNetworkAddress" );

	APlayerController_execGetPlayerNetworkAddress_Parms GetPlayerNetworkAddress_Parms;

	pFnGetPlayerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerNetworkAddress, &GetPlayerNetworkAddress_Parms, NULL );

	pFnGetPlayerNetworkAddress->FunctionFlags |= 0x400;

	return GetPlayerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetNetSpeed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewSpeed                       ( CPF_Parm )

void APlayerController::SetNetSpeed ( int NewSpeed )
{
	static UFunction* pFnSetNetSpeed = NULL;

	if ( ! pFnSetNetSpeed )
		pFnSetNetSpeed = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.SetNetSpeed" );

	APlayerController_execSetNetSpeed_Parms SetNetSpeed_Parms;
	SetNetSpeed_Parms.NewSpeed = NewSpeed;

	pFnSetNetSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetSpeed, &SetNetSpeed_Parms, NULL );

	pFnSetNetSpeed->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientDrawCoordinateSystem
// [0x010201C2] 
// Parameters infos:
// struct FVector                 AxisLoc                        ( CPF_Parm )
// struct FRotator                AxisRot                        ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientDrawCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines )
{
	static UFunction* pFnClientDrawCoordinateSystem = NULL;

	if ( ! pFnClientDrawCoordinateSystem )
		pFnClientDrawCoordinateSystem = UObject::FindObject< UFunction > ( "Function Engine.PlayerController.ClientDrawCoordinateSystem" );

	APlayerController_execClientDrawCoordinateSystem_Parms ClientDrawCoordinateSystem_Parms;
	memcpy ( &ClientDrawCoordinateSystem_Parms.AxisLoc, &AxisLoc, 0xC );
	memcpy ( &ClientDrawCoordinateSystem_Parms.AxisRot, &AxisRot, 0xC );
	ClientDrawCoordinateSystem_Parms.Scale = Scale;
	ClientDrawCoordinateSystem_Parms.bPersistentLines = bPersistentLines;

	this->ProcessEvent ( pFnClientDrawCoordinateSystem, &ClientDrawCoordinateSystem_Parms, NULL );
};

// Function Engine.CheatManager.TestLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::TestLevel ( )
{
	static UFunction* pFnTestLevel = NULL;

	if ( ! pFnTestLevel )
		pFnTestLevel = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.TestLevel" );

	UCheatManager_execTestLevel_Parms TestLevel_Parms;

	this->ProcessEvent ( pFnTestLevel, &TestLevel_Parms, NULL );
};

// Function Engine.CheatManager.ToggleDebugCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ToggleDebugCamera ( )
{
	static UFunction* pFnToggleDebugCamera = NULL;

	if ( ! pFnToggleDebugCamera )
		pFnToggleDebugCamera = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ToggleDebugCamera" );

	UCheatManager_execToggleDebugCamera_Parms ToggleDebugCamera_Parms;

	this->ProcessEvent ( pFnToggleDebugCamera, &ToggleDebugCamera_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelOut ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelOut = NULL;

	if ( ! pFnStreamLevelOut )
		pFnStreamLevelOut = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.StreamLevelOut" );

	UCheatManager_execStreamLevelOut_Parms StreamLevelOut_Parms;
	memcpy ( &StreamLevelOut_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelOut, &StreamLevelOut_Parms, NULL );
};

// Function Engine.CheatManager.OnlyLoadLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::OnlyLoadLevel ( struct FName PackageName )
{
	static UFunction* pFnOnlyLoadLevel = NULL;

	if ( ! pFnOnlyLoadLevel )
		pFnOnlyLoadLevel = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.OnlyLoadLevel" );

	UCheatManager_execOnlyLoadLevel_Parms OnlyLoadLevel_Parms;
	memcpy ( &OnlyLoadLevel_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnOnlyLoadLevel, &OnlyLoadLevel_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelIn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelIn ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelIn = NULL;

	if ( ! pFnStreamLevelIn )
		pFnStreamLevelIn = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.StreamLevelIn" );

	UCheatManager_execStreamLevelIn_Parms StreamLevelIn_Parms;
	memcpy ( &StreamLevelIn_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelIn, &StreamLevelIn_Parms, NULL );
};

// Function Engine.CheatManager.SetLevelStreamingStatus
// [0x00020002] 
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bShouldBeLoaded                ( CPF_Parm )
// unsigned long                  bShouldBeVisible               ( CPF_Parm )

void UCheatManager::SetLevelStreamingStatus ( struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible )
{
	static UFunction* pFnSetLevelStreamingStatus = NULL;

	if ( ! pFnSetLevelStreamingStatus )
		pFnSetLevelStreamingStatus = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.SetLevelStreamingStatus" );

	UCheatManager_execSetLevelStreamingStatus_Parms SetLevelStreamingStatus_Parms;
	memcpy ( &SetLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	SetLevelStreamingStatus_Parms.bShouldBeLoaded = bShouldBeLoaded;
	SetLevelStreamingStatus_Parms.bShouldBeVisible = bShouldBeVisible;

	this->ProcessEvent ( pFnSetLevelStreamingStatus, &SetLevelStreamingStatus_Parms, NULL );
};

// Function Engine.CheatManager.AllWeapons
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllWeapons ( )
{
	static UFunction* pFnAllWeapons = NULL;

	if ( ! pFnAllWeapons )
		pFnAllWeapons = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.AllWeapons" );

	UCheatManager_execAllWeapons_Parms AllWeapons_Parms;

	this->ProcessEvent ( pFnAllWeapons, &AllWeapons_Parms, NULL );
};

// Function Engine.CheatManager.Loaded
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Loaded ( )
{
	static UFunction* pFnLoaded = NULL;

	if ( ! pFnLoaded )
		pFnLoaded = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.Loaded" );

	UCheatManager_execLoaded_Parms Loaded_Parms;

	this->ProcessEvent ( pFnLoaded, &Loaded_Parms, NULL );
};

// Function Engine.CheatManager.ViewClass
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::ViewClass ( class UClass* aClass )
{
	static UFunction* pFnViewClass = NULL;

	if ( ! pFnViewClass )
		pFnViewClass = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ViewClass" );

	UCheatManager_execViewClass_Parms ViewClass_Parms;
	ViewClass_Parms.aClass = aClass;

	this->ProcessEvent ( pFnViewClass, &ViewClass_Parms, NULL );
};

// Function Engine.CheatManager.ViewBot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ViewBot ( )
{
	static UFunction* pFnViewBot = NULL;

	if ( ! pFnViewBot )
		pFnViewBot = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ViewBot" );

	UCheatManager_execViewBot_Parms ViewBot_Parms;

	this->ProcessEvent ( pFnViewBot, &ViewBot_Parms, NULL );
};

// Function Engine.CheatManager.ViewFlag
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ViewFlag ( )
{
	static UFunction* pFnViewFlag = NULL;

	if ( ! pFnViewFlag )
		pFnViewFlag = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ViewFlag" );

	UCheatManager_execViewFlag_Parms ViewFlag_Parms;

	this->ProcessEvent ( pFnViewFlag, &ViewFlag_Parms, NULL );
};

// Function Engine.CheatManager.ViewActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   actorName                      ( CPF_Parm )

void UCheatManager::ViewActor ( struct FName actorName )
{
	static UFunction* pFnViewActor = NULL;

	if ( ! pFnViewActor )
		pFnViewActor = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ViewActor" );

	UCheatManager_execViewActor_Parms ViewActor_Parms;
	memcpy ( &ViewActor_Parms.actorName, &actorName, 0x8 );

	this->ProcessEvent ( pFnViewActor, &ViewActor_Parms, NULL );
};

// Function Engine.CheatManager.ViewPlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::ViewPlayer ( struct FString S )
{
	static UFunction* pFnViewPlayer = NULL;

	if ( ! pFnViewPlayer )
		pFnViewPlayer = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ViewPlayer" );

	UCheatManager_execViewPlayer_Parms ViewPlayer_Parms;
	memcpy ( &ViewPlayer_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnViewPlayer, &ViewPlayer_Parms, NULL );
};

// Function Engine.CheatManager.ViewSelf
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bQuiet                         ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::ViewSelf ( unsigned long bQuiet )
{
	static UFunction* pFnViewSelf = NULL;

	if ( ! pFnViewSelf )
		pFnViewSelf = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ViewSelf" );

	UCheatManager_execViewSelf_Parms ViewSelf_Parms;
	ViewSelf_Parms.bQuiet = bQuiet;

	this->ProcessEvent ( pFnViewSelf, &ViewSelf_Parms, NULL );
};

// Function Engine.CheatManager.RememberSpot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::RememberSpot ( )
{
	static UFunction* pFnRememberSpot = NULL;

	if ( ! pFnRememberSpot )
		pFnRememberSpot = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.RememberSpot" );

	UCheatManager_execRememberSpot_Parms RememberSpot_Parms;

	this->ProcessEvent ( pFnRememberSpot, &RememberSpot_Parms, NULL );
};

// Function Engine.CheatManager.PlayersOnly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::PlayersOnly ( )
{
	static UFunction* pFnPlayersOnly = NULL;

	if ( ! pFnPlayersOnly )
		pFnPlayersOnly = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.PlayersOnly" );

	UCheatManager_execPlayersOnly_Parms PlayersOnly_Parms;

	this->ProcessEvent ( pFnPlayersOnly, &PlayersOnly_Parms, NULL );
};

// Function Engine.CheatManager.Avatar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   ClassName                      ( CPF_Parm )

void UCheatManager::Avatar ( struct FName ClassName )
{
	static UFunction* pFnAvatar = NULL;

	if ( ! pFnAvatar )
		pFnAvatar = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.Avatar" );

	UCheatManager_execAvatar_Parms Avatar_Parms;
	memcpy ( &Avatar_Parms.ClassName, &ClassName, 0x8 );

	this->ProcessEvent ( pFnAvatar, &Avatar_Parms, NULL );
};

// Function Engine.CheatManager.KillPawns
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillPawns ( )
{
	static UFunction* pFnKillPawns = NULL;

	if ( ! pFnKillPawns )
		pFnKillPawns = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.KillPawns" );

	UCheatManager_execKillPawns_Parms KillPawns_Parms;

	this->ProcessEvent ( pFnKillPawns, &KillPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAllPawns
// [0x00020002] 
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAllPawns ( class UClass* aClass )
{
	static UFunction* pFnKillAllPawns = NULL;

	if ( ! pFnKillAllPawns )
		pFnKillAllPawns = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.KillAllPawns" );

	UCheatManager_execKillAllPawns_Parms KillAllPawns_Parms;
	KillAllPawns_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAllPawns, &KillAllPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAll
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAll ( class UClass* aClass )
{
	static UFunction* pFnKillAll = NULL;

	if ( ! pFnKillAll )
		pFnKillAll = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.KillAll" );

	UCheatManager_execKillAll_Parms KillAll_Parms;
	KillAll_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAll, &KillAll_Parms, NULL );
};

// Function Engine.CheatManager.SetSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetSpeed ( float F )
{
	static UFunction* pFnSetSpeed = NULL;

	if ( ! pFnSetSpeed )
		pFnSetSpeed = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.SetSpeed" );

	UCheatManager_execSetSpeed_Parms SetSpeed_Parms;
	SetSpeed_Parms.F = F;

	this->ProcessEvent ( pFnSetSpeed, &SetSpeed_Parms, NULL );
};

// Function Engine.CheatManager.SetGravity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetGravity ( float F )
{
	static UFunction* pFnSetGravity = NULL;

	if ( ! pFnSetGravity )
		pFnSetGravity = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.SetGravity" );

	UCheatManager_execSetGravity_Parms SetGravity_Parms;
	SetGravity_Parms.F = F;

	this->ProcessEvent ( pFnSetGravity, &SetGravity_Parms, NULL );
};

// Function Engine.CheatManager.SetJumpZ
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetJumpZ ( float F )
{
	static UFunction* pFnSetJumpZ = NULL;

	if ( ! pFnSetJumpZ )
		pFnSetJumpZ = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.SetJumpZ" );

	UCheatManager_execSetJumpZ_Parms SetJumpZ_Parms;
	SetJumpZ_Parms.F = F;

	this->ProcessEvent ( pFnSetJumpZ, &SetJumpZ_Parms, NULL );
};

// Function Engine.CheatManager.SloMo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void UCheatManager::SloMo ( float T )
{
	static UFunction* pFnSloMo = NULL;

	if ( ! pFnSloMo )
		pFnSloMo = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.SloMo" );

	UCheatManager_execSloMo_Parms SloMo_Parms;
	SloMo_Parms.T = T;

	this->ProcessEvent ( pFnSloMo, &SloMo_Parms, NULL );
};

// Function Engine.CheatManager.AffectedByHitEffects
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AffectedByHitEffects ( )
{
	static UFunction* pFnAffectedByHitEffects = NULL;

	if ( ! pFnAffectedByHitEffects )
		pFnAffectedByHitEffects = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.AffectedByHitEffects" );

	UCheatManager_execAffectedByHitEffects_Parms AffectedByHitEffects_Parms;

	this->ProcessEvent ( pFnAffectedByHitEffects, &AffectedByHitEffects_Parms, NULL );
};

// Function Engine.CheatManager.God
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::God ( )
{
	static UFunction* pFnGod = NULL;

	if ( ! pFnGod )
		pFnGod = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.God" );

	UCheatManager_execGod_Parms God_Parms;

	this->ProcessEvent ( pFnGod, &God_Parms, NULL );
};

// Function Engine.CheatManager.AllAmmo
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllAmmo ( )
{
	static UFunction* pFnAllAmmo = NULL;

	if ( ! pFnAllAmmo )
		pFnAllAmmo = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.AllAmmo" );

	UCheatManager_execAllAmmo_Parms AllAmmo_Parms;

	this->ProcessEvent ( pFnAllAmmo, &AllAmmo_Parms, NULL );
};

// Function Engine.CheatManager.Ghost
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Ghost ( )
{
	static UFunction* pFnGhost = NULL;

	if ( ! pFnGhost )
		pFnGhost = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.Ghost" );

	UCheatManager_execGhost_Parms Ghost_Parms;

	this->ProcessEvent ( pFnGhost, &Ghost_Parms, NULL );
};

// Function Engine.CheatManager.Walk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Walk ( )
{
	static UFunction* pFnWalk = NULL;

	if ( ! pFnWalk )
		pFnWalk = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.Walk" );

	UCheatManager_execWalk_Parms Walk_Parms;

	this->ProcessEvent ( pFnWalk, &Walk_Parms, NULL );
};

// Function Engine.CheatManager.Fly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Fly ( )
{
	static UFunction* pFnFly = NULL;

	if ( ! pFnFly )
		pFnFly = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.Fly" );

	UCheatManager_execFly_Parms Fly_Parms;

	this->ProcessEvent ( pFnFly, &Fly_Parms, NULL );
};

// Function Engine.CheatManager.EndPath
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::EndPath ( )
{
	static UFunction* pFnEndPath = NULL;

	if ( ! pFnEndPath )
		pFnEndPath = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.EndPath" );

	UCheatManager_execEndPath_Parms EndPath_Parms;

	this->ProcessEvent ( pFnEndPath, &EndPath_Parms, NULL );
};

// Function Engine.CheatManager.ChangeSize
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::ChangeSize ( float F )
{
	static UFunction* pFnChangeSize = NULL;

	if ( ! pFnChangeSize )
		pFnChangeSize = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ChangeSize" );

	UCheatManager_execChangeSize_Parms ChangeSize_Parms;
	ChangeSize_Parms.F = F;

	this->ProcessEvent ( pFnChangeSize, &ChangeSize_Parms, NULL );
};

// Function Engine.CheatManager.GetFRotatorFromString
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InStr                          ( CPF_Parm | CPF_NeedCtorLink )

struct FRotator UCheatManager::GetFRotatorFromString ( struct FString InStr )
{
	static UFunction* pFnGetFRotatorFromString = NULL;

	if ( ! pFnGetFRotatorFromString )
		pFnGetFRotatorFromString = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.GetFRotatorFromString" );

	UCheatManager_execGetFRotatorFromString_Parms GetFRotatorFromString_Parms;
	memcpy ( &GetFRotatorFromString_Parms.InStr, &InStr, 0xC );

	pFnGetFRotatorFromString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFRotatorFromString, &GetFRotatorFromString_Parms, NULL );

	pFnGetFRotatorFromString->FunctionFlags |= 0x400;

	return GetFRotatorFromString_Parms.ReturnValue;
};

// Function Engine.CheatManager.GetFVectorFromString
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InStr                          ( CPF_Parm | CPF_NeedCtorLink )

struct FVector UCheatManager::GetFVectorFromString ( struct FString InStr )
{
	static UFunction* pFnGetFVectorFromString = NULL;

	if ( ! pFnGetFVectorFromString )
		pFnGetFVectorFromString = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.GetFVectorFromString" );

	UCheatManager_execGetFVectorFromString_Parms GetFVectorFromString_Parms;
	memcpy ( &GetFVectorFromString_Parms.InStr, &InStr, 0xC );

	pFnGetFVectorFromString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFVectorFromString, &GetFVectorFromString_Parms, NULL );

	pFnGetFVectorFromString->FunctionFlags |= 0x400;

	return GetFVectorFromString_Parms.ReturnValue;
};

// Function Engine.CheatManager.BugIt
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ScreenShotDescription          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::BugIt ( struct FString ScreenShotDescription )
{
	static UFunction* pFnBugIt = NULL;

	if ( ! pFnBugIt )
		pFnBugIt = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.BugIt" );

	UCheatManager_execBugIt_Parms BugIt_Parms;
	memcpy ( &BugIt_Parms.ScreenShotDescription, &ScreenShotDescription, 0xC );

	this->ProcessEvent ( pFnBugIt, &BugIt_Parms, NULL );
};

// Function Engine.CheatManager.BugItWorker
// [0x00020002] 
// Parameters infos:
// struct FVector                 TheLocation                    ( CPF_Parm )
// struct FRotator                TheRotation                    ( CPF_Parm )

void UCheatManager::BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation )
{
	static UFunction* pFnBugItWorker = NULL;

	if ( ! pFnBugItWorker )
		pFnBugItWorker = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.BugItWorker" );

	UCheatManager_execBugItWorker_Parms BugItWorker_Parms;
	memcpy ( &BugItWorker_Parms.TheLocation, &TheLocation, 0xC );
	memcpy ( &BugItWorker_Parms.TheRotation, &TheRotation, 0xC );

	this->ProcessEvent ( pFnBugItWorker, &BugItWorker_Parms, NULL );
};

// Function Engine.CheatManager.BugItGoString
// [0x00020002] 
// Parameters infos:
// struct FString                 TheLocation                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 TheRotation                    ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::BugItGoString ( struct FString TheLocation, struct FString TheRotation )
{
	static UFunction* pFnBugItGoString = NULL;

	if ( ! pFnBugItGoString )
		pFnBugItGoString = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.BugItGoString" );

	UCheatManager_execBugItGoString_Parms BugItGoString_Parms;
	memcpy ( &BugItGoString_Parms.TheLocation, &TheLocation, 0xC );
	memcpy ( &BugItGoString_Parms.TheRotation, &TheRotation, 0xC );

	this->ProcessEvent ( pFnBugItGoString, &BugItGoString_Parms, NULL );
};

// Function Engine.CheatManager.BugItGo
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm | CPF_CoerceParm )
// float                          Y                              ( CPF_Parm | CPF_CoerceParm )
// float                          Z                              ( CPF_Parm | CPF_CoerceParm )
// int                            Pitch                          ( CPF_Parm | CPF_CoerceParm )
// int                            Yaw                            ( CPF_Parm | CPF_CoerceParm )
// int                            Roll                           ( CPF_Parm | CPF_CoerceParm )

void UCheatManager::BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll )
{
	static UFunction* pFnBugItGo = NULL;

	if ( ! pFnBugItGo )
		pFnBugItGo = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.BugItGo" );

	UCheatManager_execBugItGo_Parms BugItGo_Parms;
	BugItGo_Parms.X = X;
	BugItGo_Parms.Y = Y;
	BugItGo_Parms.Z = Z;
	BugItGo_Parms.Pitch = Pitch;
	BugItGo_Parms.Yaw = Yaw;
	BugItGo_Parms.Roll = Roll;

	this->ProcessEvent ( pFnBugItGo, &BugItGo_Parms, NULL );
};

// Function Engine.CheatManager.Teleport
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Teleport ( )
{
	static UFunction* pFnTeleport = NULL;

	if ( ! pFnTeleport )
		pFnTeleport = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.Teleport" );

	UCheatManager_execTeleport_Parms Teleport_Parms;

	this->ProcessEvent ( pFnTeleport, &Teleport_Parms, NULL );
};

// Function Engine.CheatManager.KillViewedActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillViewedActor ( )
{
	static UFunction* pFnKillViewedActor = NULL;

	if ( ! pFnKillViewedActor )
		pFnKillViewedActor = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.KillViewedActor" );

	UCheatManager_execKillViewedActor_Parms KillViewedActor_Parms;

	this->ProcessEvent ( pFnKillViewedActor, &KillViewedActor_Parms, NULL );
};

// Function Engine.CheatManager.WriteToLog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Param                          ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::WriteToLog ( struct FString Param )
{
	static UFunction* pFnWriteToLog = NULL;

	if ( ! pFnWriteToLog )
		pFnWriteToLog = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.WriteToLog" );

	UCheatManager_execWriteToLog_Parms WriteToLog_Parms;
	memcpy ( &WriteToLog_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnWriteToLog, &WriteToLog_Parms, NULL );
};

// Function Engine.CheatManager.FreezeFrame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          delay                          ( CPF_Parm )

void UCheatManager::FreezeFrame ( float delay )
{
	static UFunction* pFnFreezeFrame = NULL;

	if ( ! pFnFreezeFrame )
		pFnFreezeFrame = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.FreezeFrame" );

	UCheatManager_execFreezeFrame_Parms FreezeFrame_Parms;
	FreezeFrame_Parms.delay = delay;

	this->ProcessEvent ( pFnFreezeFrame, &FreezeFrame_Parms, NULL );
};

// Function Engine.CheatManager.ListDynamicActors
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ListDynamicActors ( )
{
	static UFunction* pFnListDynamicActors = NULL;

	if ( ! pFnListDynamicActors )
		pFnListDynamicActors = UObject::FindObject< UFunction > ( "Function Engine.CheatManager.ListDynamicActors" );

	UCheatManager_execListDynamicActors_Parms ListDynamicActors_Parms;

	this->ProcessEvent ( pFnListDynamicActors, &ListDynamicActors_Parms, NULL );
};

// Function Engine.Player.SwitchController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void UPlayer::SwitchController ( class APlayerController* PC )
{
	static UFunction* pFnSwitchController = NULL;

	if ( ! pFnSwitchController )
		pFnSwitchController = UObject::FindObject< UFunction > ( "Function Engine.Player.SwitchController" );

	UPlayer_execSwitchController_Parms SwitchController_Parms;
	SwitchController_Parms.PC = PC;

	pFnSwitchController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchController, &SwitchController_Parms, NULL );

	pFnSwitchController->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ACoverGroup::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.CoverGroup.OnToggle" );

	ACoverGroup_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverGroup.ToggleGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::ToggleGroup ( )
{
	static UFunction* pFnToggleGroup = NULL;

	if ( ! pFnToggleGroup )
		pFnToggleGroup = UObject::FindObject< UFunction > ( "Function Engine.CoverGroup.ToggleGroup" );

	ACoverGroup_execToggleGroup_Parms ToggleGroup_Parms;

	pFnToggleGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleGroup, &ToggleGroup_Parms, NULL );

	pFnToggleGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.DisableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::DisableGroup ( )
{
	static UFunction* pFnDisableGroup = NULL;

	if ( ! pFnDisableGroup )
		pFnDisableGroup = UObject::FindObject< UFunction > ( "Function Engine.CoverGroup.DisableGroup" );

	ACoverGroup_execDisableGroup_Parms DisableGroup_Parms;

	pFnDisableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableGroup, &DisableGroup_Parms, NULL );

	pFnDisableGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.EnableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::EnableGroup ( )
{
	static UFunction* pFnEnableGroup = NULL;

	if ( ! pFnEnableGroup )
		pFnEnableGroup = UObject::FindObject< UFunction > ( "Function Engine.CoverGroup.EnableGroup" );

	ACoverGroup_execEnableGroup_Parms EnableGroup_Parms;

	pFnEnableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableGroup, &EnableGroup_Parms, NULL );

	pFnEnableGroup->FunctionFlags |= 0x400;
};

// Function Engine.NavigationPoint.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANavigationPoint::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.GetDebugAbbrev" );

	ANavigationPoint_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.OnMatchingNetworks
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

bool ANavigationPoint::OnMatchingNetworks ( class ANavigationPoint* Nav )
{
	static UFunction* pFnOnMatchingNetworks = NULL;

	if ( ! pFnOnMatchingNetworks )
		pFnOnMatchingNetworks = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.OnMatchingNetworks" );

	ANavigationPoint_execOnMatchingNetworks_Parms OnMatchingNetworks_Parms;
	OnMatchingNetworks_Parms.Nav = Nav;

	this->ProcessEvent ( pFnOnMatchingNetworks, &OnMatchingNetworks_Parms, NULL );

	return OnMatchingNetworks_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANavigationPoint::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.OnToggle" );

	ANavigationPoint_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NavigationPoint.IsOnDifferentNetwork
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

bool ANavigationPoint::IsOnDifferentNetwork ( class ANavigationPoint* Nav )
{
	static UFunction* pFnIsOnDifferentNetwork = NULL;

	if ( ! pFnIsOnDifferentNetwork )
		pFnIsOnDifferentNetwork = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.IsOnDifferentNetwork" );

	ANavigationPoint_execIsOnDifferentNetwork_Parms IsOnDifferentNetwork_Parms;
	IsOnDifferentNetwork_Parms.Nav = Nav;

	pFnIsOnDifferentNetwork->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnDifferentNetwork, &IsOnDifferentNetwork_Parms, NULL );

	pFnIsOnDifferentNetwork->FunctionFlags |= 0x400;

	return IsOnDifferentNetwork_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetAllNavInRadius
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  chkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bSkipBlocked                   ( CPF_OptionalParm | CPF_Parm )
// int                            inNetworkID                    ( CPF_OptionalParm | CPF_Parm )
// struct FCylinder               MinSize                        ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > out_NavList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ANavigationPoint::GetAllNavInRadius ( class AActor* chkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList )
{
	static UFunction* pFnGetAllNavInRadius = NULL;

	if ( ! pFnGetAllNavInRadius )
		pFnGetAllNavInRadius = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.GetAllNavInRadius" );

	ANavigationPoint_execGetAllNavInRadius_Parms GetAllNavInRadius_Parms;
	GetAllNavInRadius_Parms.chkActor = chkActor;
	memcpy ( &GetAllNavInRadius_Parms.ChkPoint, &ChkPoint, 0xC );
	GetAllNavInRadius_Parms.Radius = Radius;
	GetAllNavInRadius_Parms.bSkipBlocked = bSkipBlocked;
	GetAllNavInRadius_Parms.inNetworkID = inNetworkID;
	memcpy ( &GetAllNavInRadius_Parms.MinSize, &MinSize, 0x8 );

	pFnGetAllNavInRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllNavInRadius, &GetAllNavInRadius_Parms, NULL );

	pFnGetAllNavInRadius->FunctionFlags |= 0x400;

	if ( out_NavList )
		memcpy ( out_NavList, &GetAllNavInRadius_Parms.out_NavList, 0xC );

	return GetAllNavInRadius_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToPoint
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  chkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > ExcludeList                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ANavigationPoint::GetNearestNavToPoint ( class AActor* chkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList )
{
	static UFunction* pFnGetNearestNavToPoint = NULL;

	if ( ! pFnGetNearestNavToPoint )
		pFnGetNearestNavToPoint = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.GetNearestNavToPoint" );

	ANavigationPoint_execGetNearestNavToPoint_Parms GetNearestNavToPoint_Parms;
	GetNearestNavToPoint_Parms.chkActor = chkActor;
	memcpy ( &GetNearestNavToPoint_Parms.ChkPoint, &ChkPoint, 0xC );
	GetNearestNavToPoint_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToPoint_Parms.ExcludeList, &ExcludeList, 0xC );

	this->ProcessEvent ( pFnGetNearestNavToPoint, &GetNearestNavToPoint_Parms, NULL );

	return GetNearestNavToPoint_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToActor
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  chkActor                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > ExcludeList                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// float                          MinDist                        ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* ANavigationPoint::GetNearestNavToActor ( class AActor* chkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist )
{
	static UFunction* pFnGetNearestNavToActor = NULL;

	if ( ! pFnGetNearestNavToActor )
		pFnGetNearestNavToActor = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.GetNearestNavToActor" );

	ANavigationPoint_execGetNearestNavToActor_Parms GetNearestNavToActor_Parms;
	GetNearestNavToActor_Parms.chkActor = chkActor;
	GetNearestNavToActor_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToActor_Parms.ExcludeList, &ExcludeList, 0xC );
	GetNearestNavToActor_Parms.MinDist = MinDist;

	this->ProcessEvent ( pFnGetNearestNavToActor, &GetNearestNavToActor_Parms, NULL );

	return GetNearestNavToActor_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.IsAvailableTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  chkActor                       ( CPF_Parm )

bool ANavigationPoint::IsAvailableTo ( class AActor* chkActor )
{
	static UFunction* pFnIsAvailableTo = NULL;

	if ( ! pFnIsAvailableTo )
		pFnIsAvailableTo = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.IsAvailableTo" );

	ANavigationPoint_execIsAvailableTo_Parms IsAvailableTo_Parms;
	IsAvailableTo_Parms.chkActor = chkActor;

	this->ProcessEvent ( pFnIsAvailableTo, &IsAvailableTo_Parms, NULL );

	return IsAvailableTo_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.ProceedWithMove" );

	ANavigationPoint_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.SuggestMovePreparation" );

	ANavigationPoint_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.DetourWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float ANavigationPoint::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.DetourWeight" );

	ANavigationPoint_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.Accept
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ANavigationPoint::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.Accept" );

	ANavigationPoint_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SpecialCost
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Seeker                         ( CPF_Parm )
// class UReachSpec*              Path                           ( CPF_Parm )

int ANavigationPoint::eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path )
{
	static UFunction* pFnSpecialCost = NULL;

	if ( ! pFnSpecialCost )
		pFnSpecialCost = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.SpecialCost" );

	ANavigationPoint_eventSpecialCost_Parms SpecialCost_Parms;
	SpecialCost_Parms.Seeker = Seeker;
	SpecialCost_Parms.Path = Path;

	this->ProcessEvent ( pFnSpecialCost, &SpecialCost_Parms, NULL );

	return SpecialCost_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ANavigationPoint::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.CanTeleport" );

	ANavigationPoint_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetReachSpecTo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UReachSpec*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

class UReachSpec* ANavigationPoint::GetReachSpecTo ( class ANavigationPoint* Nav )
{
	static UFunction* pFnGetReachSpecTo = NULL;

	if ( ! pFnGetReachSpecTo )
		pFnGetReachSpecTo = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.GetReachSpecTo" );

	ANavigationPoint_execGetReachSpecTo_Parms GetReachSpecTo_Parms;
	GetReachSpecTo_Parms.Nav = Nav;

	pFnGetReachSpecTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReachSpecTo, &GetReachSpecTo_Parms, NULL );

	pFnGetReachSpecTo->FunctionFlags |= 0x400;

	return GetReachSpecTo_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void ANavigationPoint::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = UObject::FindObject< UFunction > ( "Function Engine.NavigationPoint.GetBoundingCylinder" );

	ANavigationPoint_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.CoverLink.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ACoverLink::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetDebugAbbrev" );

	ACoverLink_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetLocationDescription
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

unsigned char ACoverLink::GetLocationDescription ( int SlotIdx )
{
	static UFunction* pFnGetLocationDescription = NULL;

	if ( ! pFnGetLocationDescription )
		pFnGetLocationDescription = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetLocationDescription" );

	ACoverLink_execGetLocationDescription_Parms GetLocationDescription_Parms;
	GetLocationDescription_Parms.SlotIdx = SlotIdx;

	pFnGetLocationDescription->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocationDescription, &GetLocationDescription_Parms, NULL );

	pFnGetLocationDescription->FunctionFlags |= 0x400;

	return GetLocationDescription_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetDebugString
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            SlotIdx                        ( CPF_Parm )

struct FString ACoverLink::eventGetDebugString ( int SlotIdx )
{
	static UFunction* pFnGetDebugString = NULL;

	if ( ! pFnGetDebugString )
		pFnGetDebugString = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetDebugString" );

	ACoverLink_eventGetDebugString_Parms GetDebugString_Parms;
	GetDebugString_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnGetDebugString, &GetDebugString_Parms, NULL );

	return GetDebugString_Parms.ReturnValue;
};

// Function Engine.CoverLink.AddCoverSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SlotLocation                   ( CPF_Parm )
// struct FRotator                SlotRotation                   ( CPF_Parm )
// int                            SlotIdx                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceSlotUpdate               ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate )
{
	static UFunction* pFnAddCoverSlot = NULL;

	if ( ! pFnAddCoverSlot )
		pFnAddCoverSlot = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.AddCoverSlot" );

	ACoverLink_execAddCoverSlot_Parms AddCoverSlot_Parms;
	memcpy ( &AddCoverSlot_Parms.SlotLocation, &SlotLocation, 0xC );
	memcpy ( &AddCoverSlot_Parms.SlotRotation, &SlotRotation, 0xC );
	AddCoverSlot_Parms.SlotIdx = SlotIdx;
	AddCoverSlot_Parms.bForceSlotUpdate = bForceSlotUpdate;

	pFnAddCoverSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddCoverSlot, &AddCoverSlot_Parms, NULL );

	pFnAddCoverSlot->FunctionFlags |= 0x400;

	return AddCoverSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACoverLink::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.Tick" );

	ACoverLink_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.CoverLink.GetSwatTurnTarget
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Direction                      ( CPF_Parm )
// struct FCoverReference         out_Info                       ( CPF_Parm | CPF_OutParm )

bool ACoverLink::GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverReference* out_Info )
{
	static UFunction* pFnGetSwatTurnTarget = NULL;

	if ( ! pFnGetSwatTurnTarget )
		pFnGetSwatTurnTarget = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetSwatTurnTarget" );

	ACoverLink_execGetSwatTurnTarget_Parms GetSwatTurnTarget_Parms;
	GetSwatTurnTarget_Parms.SlotIdx = SlotIdx;
	GetSwatTurnTarget_Parms.Direction = Direction;

	this->ProcessEvent ( pFnGetSwatTurnTarget, &GetSwatTurnTarget_Parms, NULL );

	if ( out_Info )
		memcpy ( out_Info, &GetSwatTurnTarget_Parms.out_Info, 0x1C );

	return GetSwatTurnTarget_Parms.ReturnValue;
};

// Function Engine.CoverLink.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ACoverLink::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.OnToggle" );

	ACoverLink_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverLink.IsEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ACoverLink::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.IsEnabled" );

	ACoverLink_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.CoverLink.AutoAdjustSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bOnlyCheckLeans                ( CPF_Parm )

bool ACoverLink::AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans )
{
	static UFunction* pFnAutoAdjustSlot = NULL;

	if ( ! pFnAutoAdjustSlot )
		pFnAutoAdjustSlot = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.AutoAdjustSlot" );

	ACoverLink_execAutoAdjustSlot_Parms AutoAdjustSlot_Parms;
	AutoAdjustSlot_Parms.SlotIdx = SlotIdx;
	AutoAdjustSlot_Parms.bOnlyCheckLeans = bOnlyCheckLeans;

	pFnAutoAdjustSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutoAdjustSlot, &AutoAdjustSlot_Parms, NULL );

	pFnAutoAdjustSlot->FunctionFlags |= 0x400;

	return AutoAdjustSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.OnModifyCover
// [0x00020002] 
// Parameters infos:
// class USeqAct_ModifyCover*     Action                         ( CPF_Parm )

void ACoverLink::OnModifyCover ( class USeqAct_ModifyCover* Action )
{
	static UFunction* pFnOnModifyCover = NULL;

	if ( ! pFnOnModifyCover )
		pFnOnModifyCover = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.OnModifyCover" );

	ACoverLink_execOnModifyCover_Parms OnModifyCover_Parms;
	OnModifyCover_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyCover, &OnModifyCover_Parms, NULL );
};

// Function Engine.CoverLink.SetSlotEnabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void ACoverLink::eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable )
{
	static UFunction* pFnSetSlotEnabled = NULL;

	if ( ! pFnSetSlotEnabled )
		pFnSetSlotEnabled = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.SetSlotEnabled" );

	ACoverLink_eventSetSlotEnabled_Parms SetSlotEnabled_Parms;
	SetSlotEnabled_Parms.SlotIdx = SlotIdx;
	SetSlotEnabled_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnSetSlotEnabled, &SetSlotEnabled_Parms, NULL );
};

// Function Engine.CoverLink.SetDisabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewDisabled                   ( CPF_Parm )

void ACoverLink::eventSetDisabled ( unsigned long bNewDisabled )
{
	static UFunction* pFnSetDisabled = NULL;

	if ( ! pFnSetDisabled )
		pFnSetDisabled = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.SetDisabled" );

	ACoverLink_eventSetDisabled_Parms SetDisabled_Parms;
	SetDisabled_Parms.bNewDisabled = bNewDisabled;

	this->ProcessEvent ( pFnSetDisabled, &SetDisabled_Parms, NULL );
};

// Function Engine.CoverLink.GetSlotActions
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// TArray< unsigned char >        Actions                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverLink::GetSlotActions ( int SlotIdx, TArray< unsigned char >* Actions )
{
	static UFunction* pFnGetSlotActions = NULL;

	if ( ! pFnGetSlotActions )
		pFnGetSlotActions = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetSlotActions" );

	ACoverLink_execGetSlotActions_Parms GetSlotActions_Parms;
	GetSlotActions_Parms.SlotIdx = SlotIdx;

	pFnGetSlotActions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotActions, &GetSlotActions_Parms, NULL );

	pFnGetSlotActions->FunctionFlags |= 0x400;

	if ( Actions )
		memcpy ( Actions, &GetSlotActions_Parms.Actions, 0xC );
};

// Function Engine.CoverLink.HasFireLinkTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned long                  bAllowFallbackLinks            ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks )
{
	static UFunction* pFnHasFireLinkTo = NULL;

	if ( ! pFnHasFireLinkTo )
		pFnHasFireLinkTo = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.HasFireLinkTo" );

	ACoverLink_execHasFireLinkTo_Parms HasFireLinkTo_Parms;
	HasFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &HasFireLinkTo_Parms.ChkCover, &ChkCover, 0x8 );
	HasFireLinkTo_Parms.bAllowFallbackLinks = bAllowFallbackLinks;

	pFnHasFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasFireLinkTo, &HasFireLinkTo_Parms, NULL );

	pFnHasFireLinkTo->FunctionFlags |= 0x400;

	return HasFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetFireLinkTo
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned char                  ChkAction                      ( CPF_Parm )
// unsigned char                  ChkType                        ( CPF_Parm )
// int                            out_FireLinkIdx                ( CPF_Parm | CPF_OutParm )
// TArray< int >                  out_Items                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ACoverLink::GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, TArray< int >* out_Items )
{
	static UFunction* pFnGetFireLinkTo = NULL;

	if ( ! pFnGetFireLinkTo )
		pFnGetFireLinkTo = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetFireLinkTo" );

	ACoverLink_execGetFireLinkTo_Parms GetFireLinkTo_Parms;
	GetFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &GetFireLinkTo_Parms.ChkCover, &ChkCover, 0x8 );
	GetFireLinkTo_Parms.ChkAction = ChkAction;
	GetFireLinkTo_Parms.ChkType = ChkType;

	pFnGetFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireLinkTo, &GetFireLinkTo_Parms, NULL );

	pFnGetFireLinkTo->FunctionFlags |= 0x400;

	if ( out_FireLinkIdx )
		*out_FireLinkIdx = GetFireLinkTo_Parms.out_FireLinkIdx;

	if ( out_Items )
		memcpy ( out_Items, &GetFireLinkTo_Parms.out_Items, 0xC );

	return GetFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowLeftTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowLeftTransition ( int SlotIdx )
{
	static UFunction* pFnAllowLeftTransition = NULL;

	if ( ! pFnAllowLeftTransition )
		pFnAllowLeftTransition = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.AllowLeftTransition" );

	ACoverLink_execAllowLeftTransition_Parms AllowLeftTransition_Parms;
	AllowLeftTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowLeftTransition, &AllowLeftTransition_Parms, NULL );

	return AllowLeftTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowRightTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowRightTransition ( int SlotIdx )
{
	static UFunction* pFnAllowRightTransition = NULL;

	if ( ! pFnAllowRightTransition )
		pFnAllowRightTransition = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.AllowRightTransition" );

	ACoverLink_execAllowRightTransition_Parms AllowRightTransition_Parms;
	AllowRightTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowRightTransition, &AllowRightTransition_Parms, NULL );

	return AllowRightTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsRightEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsRightEdgeSlot = NULL;

	if ( ! pFnIsRightEdgeSlot )
		pFnIsRightEdgeSlot = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.IsRightEdgeSlot" );

	ACoverLink_execIsRightEdgeSlot_Parms IsRightEdgeSlot_Parms;
	IsRightEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsRightEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsRightEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRightEdgeSlot, &IsRightEdgeSlot_Parms, NULL );

	pFnIsRightEdgeSlot->FunctionFlags |= 0x400;

	return IsRightEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsLeftEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsLeftEdgeSlot = NULL;

	if ( ! pFnIsLeftEdgeSlot )
		pFnIsLeftEdgeSlot = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.IsLeftEdgeSlot" );

	ACoverLink_execIsLeftEdgeSlot_Parms IsLeftEdgeSlot_Parms;
	IsLeftEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsLeftEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsLeftEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLeftEdgeSlot, &IsLeftEdgeSlot_Parms, NULL );

	pFnIsLeftEdgeSlot->FunctionFlags |= 0x400;

	return IsLeftEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsEdgeSlot = NULL;

	if ( ! pFnIsEdgeSlot )
		pFnIsEdgeSlot = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.IsEdgeSlot" );

	ACoverLink_execIsEdgeSlot_Parms IsEdgeSlot_Parms;
	IsEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEdgeSlot, &IsEdgeSlot_Parms, NULL );

	pFnIsEdgeSlot->FunctionFlags |= 0x400;

	return IsEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.FindSlots
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CheckLocation                  ( CPF_Parm )
// float                          MaxDistance                    ( CPF_Parm )
// int                            LeftSlotIdx                    ( CPF_Parm | CPF_OutParm )
// int                            RightSlotIdx                   ( CPF_Parm | CPF_OutParm )

bool ACoverLink::FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx )
{
	static UFunction* pFnFindSlots = NULL;

	if ( ! pFnFindSlots )
		pFnFindSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.FindSlots" );

	ACoverLink_execFindSlots_Parms FindSlots_Parms;
	memcpy ( &FindSlots_Parms.CheckLocation, &CheckLocation, 0xC );
	FindSlots_Parms.MaxDistance = MaxDistance;

	pFnFindSlots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSlots, &FindSlots_Parms, NULL );

	pFnFindSlots->FunctionFlags |= 0x400;

	if ( LeftSlotIdx )
		*LeftSlotIdx = FindSlots_Parms.LeftSlotIdx;

	if ( RightSlotIdx )
		*RightSlotIdx = FindSlots_Parms.RightSlotIdx;

	return FindSlots_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsStationarySlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::IsStationarySlot ( int SlotIdx )
{
	static UFunction* pFnIsStationarySlot = NULL;

	if ( ! pFnIsStationarySlot )
		pFnIsStationarySlot = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.IsStationarySlot" );

	ACoverLink_execIsStationarySlot_Parms IsStationarySlot_Parms;
	IsStationarySlot_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnIsStationarySlot, &IsStationarySlot_Parms, NULL );

	return IsStationarySlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsValidClaim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaim = NULL;

	if ( ! pFnIsValidClaim )
		pFnIsValidClaim = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.IsValidClaim" );

	ACoverLink_execIsValidClaim_Parms IsValidClaim_Parms;
	IsValidClaim_Parms.ChkClaim = ChkClaim;
	IsValidClaim_Parms.SlotIdx = SlotIdx;
	IsValidClaim_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaim_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaim, &IsValidClaim_Parms, NULL );

	pFnIsValidClaim->FunctionFlags |= 0x400;

	return IsValidClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.UnClaim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   OldClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bUnclaimAll                    ( CPF_Parm )

bool ACoverLink::eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll )
{
	static UFunction* pFnUnClaim = NULL;

	if ( ! pFnUnClaim )
		pFnUnClaim = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.UnClaim" );

	ACoverLink_eventUnClaim_Parms UnClaim_Parms;
	UnClaim_Parms.OldClaim = OldClaim;
	UnClaim_Parms.SlotIdx = SlotIdx;
	UnClaim_Parms.bUnclaimAll = bUnclaimAll;

	this->ProcessEvent ( pFnUnClaim, &UnClaim_Parms, NULL );

	return UnClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.Claim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   NewClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::eventClaim ( class APawn* NewClaim, int SlotIdx )
{
	static UFunction* pFnClaim = NULL;

	if ( ! pFnClaim )
		pFnClaim = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.Claim" );

	ACoverLink_eventClaim_Parms Claim_Parms;
	Claim_Parms.NewClaim = NewClaim;
	Claim_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnClaim, &Claim_Parms, NULL );

	return Claim_Parms.ReturnValue;
};

// Function Engine.CoverLink.SetInvalidUntil
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// float                          TimeToBecomeValid              ( CPF_Parm )

void ACoverLink::eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid )
{
	static UFunction* pFnSetInvalidUntil = NULL;

	if ( ! pFnSetInvalidUntil )
		pFnSetInvalidUntil = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.SetInvalidUntil" );

	ACoverLink_eventSetInvalidUntil_Parms SetInvalidUntil_Parms;
	SetInvalidUntil_Parms.SlotIdx = SlotIdx;
	SetInvalidUntil_Parms.TimeToBecomeValid = TimeToBecomeValid;

	this->ProcessEvent ( pFnSetInvalidUntil, &SetInvalidUntil_Parms, NULL );
};

// Function Engine.CoverLink.IsExposedTo
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkSlot                        ( CPF_Parm )
// float                          out_ExposedScale               ( CPF_Parm | CPF_OutParm )

bool ACoverLink::IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale )
{
	static UFunction* pFnIsExposedTo = NULL;

	if ( ! pFnIsExposedTo )
		pFnIsExposedTo = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.IsExposedTo" );

	ACoverLink_execIsExposedTo_Parms IsExposedTo_Parms;
	IsExposedTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &IsExposedTo_Parms.ChkSlot, &ChkSlot, 0x8 );

	pFnIsExposedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsExposedTo, &IsExposedTo_Parms, NULL );

	pFnIsExposedTo->FunctionFlags |= 0x400;

	if ( out_ExposedScale )
		*out_ExposedScale = IsExposedTo_Parms.out_ExposedScale;

	return IsExposedTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotMarker
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ACoverSlotMarker*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

class ACoverSlotMarker* ACoverLink::GetSlotMarker ( int SlotIdx )
{
	static UFunction* pFnGetSlotMarker = NULL;

	if ( ! pFnGetSlotMarker )
		pFnGetSlotMarker = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetSlotMarker" );

	ACoverLink_execGetSlotMarker_Parms GetSlotMarker_Parms;
	GetSlotMarker_Parms.SlotIdx = SlotIdx;

	pFnGetSlotMarker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotMarker, &GetSlotMarker_Parms, NULL );

	pFnGetSlotMarker->FunctionFlags |= 0x400;

	return GetSlotMarker_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotViewPoint
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned char                  Type                           ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Action                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action )
{
	static UFunction* pFnGetSlotViewPoint = NULL;

	if ( ! pFnGetSlotViewPoint )
		pFnGetSlotViewPoint = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetSlotViewPoint" );

	ACoverLink_execGetSlotViewPoint_Parms GetSlotViewPoint_Parms;
	GetSlotViewPoint_Parms.SlotIdx = SlotIdx;
	GetSlotViewPoint_Parms.Type = Type;
	GetSlotViewPoint_Parms.Action = Action;

	pFnGetSlotViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotViewPoint, &GetSlotViewPoint_Parms, NULL );

	pFnGetSlotViewPoint->FunctionFlags |= 0x400;

	return GetSlotViewPoint_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotRotation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FRotator ACoverLink::GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetSlotRotation" );

	ACoverLink_execGetSlotRotation_Parms GetSlotRotation_Parms;
	GetSlotRotation_Parms.SlotIdx = SlotIdx;
	GetSlotRotation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotLocation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = UObject::FindObject< UFunction > ( "Function Engine.CoverLink.GetSlotLocation" );

	ACoverLink_execGetSlotLocation_Parms GetSlotLocation_Parms;
	GetSlotLocation_Parms.SlotIdx = SlotIdx;
	GetSlotLocation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ACoverSlotMarker::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = UObject::FindObject< UFunction > ( "Function Engine.CoverSlotMarker.GetDebugAbbrev" );

	ACoverSlotMarker_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.IsValidClaim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverSlotMarker::IsValidClaim ( class APawn* ChkClaim, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaim = NULL;

	if ( ! pFnIsValidClaim )
		pFnIsValidClaim = UObject::FindObject< UFunction > ( "Function Engine.CoverSlotMarker.IsValidClaim" );

	ACoverSlotMarker_execIsValidClaim_Parms IsValidClaim_Parms;
	IsValidClaim_Parms.ChkClaim = ChkClaim;
	IsValidClaim_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaim_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaim, &IsValidClaim_Parms, NULL );

	pFnIsValidClaim->FunctionFlags |= 0x400;

	return IsValidClaim_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.SetSlotEnabled
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void ACoverSlotMarker::SetSlotEnabled ( unsigned long bEnable )
{
	static UFunction* pFnSetSlotEnabled = NULL;

	if ( ! pFnSetSlotEnabled )
		pFnSetSlotEnabled = UObject::FindObject< UFunction > ( "Function Engine.CoverSlotMarker.SetSlotEnabled" );

	ACoverSlotMarker_execSetSlotEnabled_Parms SetSlotEnabled_Parms;
	SetSlotEnabled_Parms.bEnable = bEnable;

	pFnSetSlotEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSlotEnabled, &SetSlotEnabled_Parms, NULL );

	pFnSetSlotEnabled->FunctionFlags |= 0x400;
};

// Function Engine.CoverSlotMarker.GetSlotRotation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ACoverSlotMarker::GetSlotRotation ( )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = UObject::FindObject< UFunction > ( "Function Engine.CoverSlotMarker.GetSlotRotation" );

	ACoverSlotMarker_execGetSlotRotation_Parms GetSlotRotation_Parms;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.GetSlotLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ACoverSlotMarker::GetSlotLocation ( )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = UObject::FindObject< UFunction > ( "Function Engine.CoverSlotMarker.GetSlotLocation" );

	ACoverSlotMarker_execGetSlotLocation_Parms GetSlotLocation_Parms;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ACoverSlotMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.CoverSlotMarker.PostBeginPlay" );

	ACoverSlotMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.cParticleDecalComponent.RecalcLocalToWorld
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcParticleDecalComponent::RecalcLocalToWorld ( )
{
	static UFunction* pFnRecalcLocalToWorld = NULL;

	if ( ! pFnRecalcLocalToWorld )
		pFnRecalcLocalToWorld = UObject::FindObject< UFunction > ( "Function Engine.cParticleDecalComponent.RecalcLocalToWorld" );

	UcParticleDecalComponent_execRecalcLocalToWorld_Parms RecalcLocalToWorld_Parms;

	pFnRecalcLocalToWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalcLocalToWorld, &RecalcLocalToWorld_Parms, NULL );

	pFnRecalcLocalToWorld->FunctionFlags |= 0x400;
};

// Function Engine.CrowdAgent.PlayDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACrowdAgent::PlayDeath ( )
{
	static UFunction* pFnPlayDeath = NULL;

	if ( ! pFnPlayDeath )
		pFnPlayDeath = UObject::FindObject< UFunction > ( "Function Engine.CrowdAgent.PlayDeath" );

	ACrowdAgent_execPlayDeath_Parms PlayDeath_Parms;

	pFnPlayDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayDeath, &PlayDeath_Parms, NULL );

	pFnPlayDeath->FunctionFlags |= 0x400;
};

// Function Engine.CrowdAttractor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ACrowdAttractor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.CrowdAttractor.OnToggle" );

	ACrowdAttractor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Surface.GetSurfaceHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceHeight ( )
{
	static UFunction* pFnGetSurfaceHeight = NULL;

	if ( ! pFnGetSurfaceHeight )
		pFnGetSurfaceHeight = UObject::FindObject< UFunction > ( "Function Engine.Surface.GetSurfaceHeight" );

	USurface_execGetSurfaceHeight_Parms GetSurfaceHeight_Parms;

	pFnGetSurfaceHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceHeight, &GetSurfaceHeight_Parms, NULL );

	pFnGetSurfaceHeight->FunctionFlags |= 0x400;

	return GetSurfaceHeight_Parms.ReturnValue;
};

// Function Engine.Surface.GetSurfaceWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceWidth ( )
{
	static UFunction* pFnGetSurfaceWidth = NULL;

	if ( ! pFnGetSurfaceWidth )
		pFnGetSurfaceWidth = UObject::FindObject< UFunction > ( "Function Engine.Surface.GetSurfaceWidth" );

	USurface_execGetSurfaceWidth_Parms GetSurfaceWidth_Parms;

	pFnGetSurfaceWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceWidth, &GetSurfaceWidth_Parms, NULL );

	pFnGetSurfaceWidth->FunctionFlags |= 0x400;

	return GetSurfaceWidth_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.RenderDebug
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::eventRenderDebug ( class UCanvas* Canvas )
{
	static UFunction* pFnRenderDebug = NULL;

	if ( ! pFnRenderDebug )
		pFnRenderDebug = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.RenderDebug" );

	UGameViewportClient_eventRenderDebug_Parms RenderDebug_Parms;
	RenderDebug_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnRenderDebug, &RenderDebug_Parms, NULL );
};

// Function Engine.GameViewportClient.NativeRenderDebug
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::NativeRenderDebug ( class UCanvas* Canvas )
{
	static UFunction* pFnNativeRenderDebug = NULL;

	if ( ! pFnNativeRenderDebug )
		pFnNativeRenderDebug = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.NativeRenderDebug" );

	UGameViewportClient_execNativeRenderDebug_Parms NativeRenderDebug_Parms;
	NativeRenderDebug_Parms.Canvas = Canvas;

	pFnNativeRenderDebug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeRenderDebug, &NativeRenderDebug_Parms, NULL );

	pFnNativeRenderDebug->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.ChangedInputLanguage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 sInputLangId                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bHasIME                        ( CPF_Parm )
// unsigned long                  bIMEActive                     ( CPF_Parm )

void UGameViewportClient::eventChangedInputLanguage ( struct FString sInputLangId, unsigned long bHasIME, unsigned long bIMEActive )
{
	static UFunction* pFnChangedInputLanguage = NULL;

	if ( ! pFnChangedInputLanguage )
		pFnChangedInputLanguage = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.ChangedInputLanguage" );

	UGameViewportClient_eventChangedInputLanguage_Parms ChangedInputLanguage_Parms;
	memcpy ( &ChangedInputLanguage_Parms.sInputLangId, &sInputLangId, 0xC );
	ChangedInputLanguage_Parms.bHasIME = bHasIME;
	ChangedInputLanguage_Parms.bIMEActive = bIMEActive;

	this->ProcessEvent ( pFnChangedInputLanguage, &ChangedInputLanguage_Parms, NULL );
};

// Function Engine.GameViewportClient.RemoveLocalPlayer
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            ExistingPlayer                 ( CPF_Parm )

void UGameViewportClient::RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer )
{
	static UFunction* pFnRemoveLocalPlayer = NULL;

	if ( ! pFnRemoveLocalPlayer )
		pFnRemoveLocalPlayer = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.RemoveLocalPlayer" );

	UGameViewportClient_execRemoveLocalPlayer_Parms RemoveLocalPlayer_Parms;
	RemoveLocalPlayer_Parms.ExistingPlayer = ExistingPlayer;

	this->ProcessEvent ( pFnRemoveLocalPlayer, &RemoveLocalPlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.AddLocalPlayer
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            NewPlayer                      ( CPF_Parm )

void UGameViewportClient::AddLocalPlayer ( class ULocalPlayer* NewPlayer )
{
	static UFunction* pFnAddLocalPlayer = NULL;

	if ( ! pFnAddLocalPlayer )
		pFnAddLocalPlayer = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.AddLocalPlayer" );

	UGameViewportClient_execAddLocalPlayer_Parms AddLocalPlayer_Parms;
	AddLocalPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnAddLocalPlayer, &AddLocalPlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyPlayerRemoved
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameViewportClient::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.NotifyPlayerRemoved" );

	UGameViewportClient_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyPlayerAdded
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameViewportClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.NotifyPlayerAdded" );

	UGameViewportClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransitionMessage
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UGameViewportClient::DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message )
{
	static UFunction* pFnDrawTransitionMessage = NULL;

	if ( ! pFnDrawTransitionMessage )
		pFnDrawTransitionMessage = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.DrawTransitionMessage" );

	UGameViewportClient_execDrawTransitionMessage_Parms DrawTransitionMessage_Parms;
	DrawTransitionMessage_Parms.Canvas = Canvas;
	memcpy ( &DrawTransitionMessage_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnDrawTransitionMessage, &DrawTransitionMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::eventPostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.PostRender" );

	UGameViewportClient_eventPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.GameViewportClient.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGameViewportClient::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.Tick" );

	UGameViewportClient_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.GameViewportClient.CalculatePixelCenter
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )
// float                          out_CenterX                    ( CPF_Parm | CPF_OutParm )
// float                          out_CenterY                    ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::CalculatePixelCenter ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* out_CenterX, float* out_CenterY )
{
	static UFunction* pFnCalculatePixelCenter = NULL;

	if ( ! pFnCalculatePixelCenter )
		pFnCalculatePixelCenter = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.CalculatePixelCenter" );

	UGameViewportClient_execCalculatePixelCenter_Parms CalculatePixelCenter_Parms;
	CalculatePixelCenter_Parms.LPlayer = LPlayer;
	CalculatePixelCenter_Parms.Canvas = Canvas;
	CalculatePixelCenter_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculatePixelCenter, &CalculatePixelCenter_Parms, NULL );

	if ( out_CenterX )
		*out_CenterX = CalculatePixelCenter_Parms.out_CenterX;

	if ( out_CenterY )
		*out_CenterY = CalculatePixelCenter_Parms.out_CenterY;
};

// Function Engine.GameViewportClient.CalculateDeadZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// unsigned char                  SZType                         ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )

float UGameViewportClient::CalculateDeadZone ( class ULocalPlayer* LPlayer, unsigned char SZType, class UCanvas* Canvas, unsigned long bUseMaxPercent )
{
	static UFunction* pFnCalculateDeadZone = NULL;

	if ( ! pFnCalculateDeadZone )
		pFnCalculateDeadZone = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.CalculateDeadZone" );

	UGameViewportClient_execCalculateDeadZone_Parms CalculateDeadZone_Parms;
	CalculateDeadZone_Parms.LPlayer = LPlayer;
	CalculateDeadZone_Parms.SZType = SZType;
	CalculateDeadZone_Parms.Canvas = Canvas;
	CalculateDeadZone_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateDeadZone, &CalculateDeadZone_Parms, NULL );

	return CalculateDeadZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CalculateSafeZoneValues
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_Parm )
// float                          out_Horizontal                 ( CPF_Parm | CPF_OutParm )
// float                          out_Vertical                   ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical )
{
	static UFunction* pFnCalculateSafeZoneValues = NULL;

	if ( ! pFnCalculateSafeZoneValues )
		pFnCalculateSafeZoneValues = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.CalculateSafeZoneValues" );

	UGameViewportClient_execCalculateSafeZoneValues_Parms CalculateSafeZoneValues_Parms;
	CalculateSafeZoneValues_Parms.Canvas = Canvas;
	CalculateSafeZoneValues_Parms.LocalPlayerIndex = LocalPlayerIndex;
	CalculateSafeZoneValues_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateSafeZoneValues, &CalculateSafeZoneValues_Parms, NULL );

	if ( out_Horizontal )
		*out_Horizontal = CalculateSafeZoneValues_Parms.out_Horizontal;

	if ( out_Vertical )
		*out_Vertical = CalculateSafeZoneValues_Parms.out_Vertical;
};

// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// float                          out_Width                      ( CPF_Parm | CPF_OutParm )
// float                          out_Height                     ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height )
{
	static UFunction* pFnGetPixelSizeOfScreen = NULL;

	if ( ! pFnGetPixelSizeOfScreen )
		pFnGetPixelSizeOfScreen = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.GetPixelSizeOfScreen" );

	UGameViewportClient_execGetPixelSizeOfScreen_Parms GetPixelSizeOfScreen_Parms;
	GetPixelSizeOfScreen_Parms.Canvas = Canvas;
	GetPixelSizeOfScreen_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnGetPixelSizeOfScreen, &GetPixelSizeOfScreen_Parms, NULL );

	if ( out_Width )
		*out_Width = GetPixelSizeOfScreen_Parms.out_Width;

	if ( out_Height )
		*out_Height = GetPixelSizeOfScreen_Parms.out_Height;
};

// Function Engine.GameViewportClient.HasRightSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasRightSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasRightSafeZone = NULL;

	if ( ! pFnHasRightSafeZone )
		pFnHasRightSafeZone = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.HasRightSafeZone" );

	UGameViewportClient_execHasRightSafeZone_Parms HasRightSafeZone_Parms;
	HasRightSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasRightSafeZone, &HasRightSafeZone_Parms, NULL );

	return HasRightSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasLeftSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasLeftSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasLeftSafeZone = NULL;

	if ( ! pFnHasLeftSafeZone )
		pFnHasLeftSafeZone = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.HasLeftSafeZone" );

	UGameViewportClient_execHasLeftSafeZone_Parms HasLeftSafeZone_Parms;
	HasLeftSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasLeftSafeZone, &HasLeftSafeZone_Parms, NULL );

	return HasLeftSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasBottomSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasBottomSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasBottomSafeZone = NULL;

	if ( ! pFnHasBottomSafeZone )
		pFnHasBottomSafeZone = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.HasBottomSafeZone" );

	UGameViewportClient_execHasBottomSafeZone_Parms HasBottomSafeZone_Parms;
	HasBottomSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasBottomSafeZone, &HasBottomSafeZone_Parms, NULL );

	return HasBottomSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasTopSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasTopSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasTopSafeZone = NULL;

	if ( ! pFnHasTopSafeZone )
		pFnHasTopSafeZone = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.HasTopSafeZone" );

	UGameViewportClient_execHasTopSafeZone_Parms HasTopSafeZone_Parms;
	HasTopSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasTopSafeZone, &HasTopSafeZone_Parms, NULL );

	return HasTopSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )

int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer )
{
	static UFunction* pFnConvertLocalPlayerToGamePlayerIndex = NULL;

	if ( ! pFnConvertLocalPlayerToGamePlayerIndex )
		pFnConvertLocalPlayerToGamePlayerIndex = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex" );

	UGameViewportClient_execConvertLocalPlayerToGamePlayerIndex_Parms ConvertLocalPlayerToGamePlayerIndex_Parms;
	ConvertLocalPlayerToGamePlayerIndex_Parms.LPlayer = LPlayer;

	this->ProcessEvent ( pFnConvertLocalPlayerToGamePlayerIndex, &ConvertLocalPlayerToGamePlayerIndex_Parms, NULL );

	return ConvertLocalPlayerToGamePlayerIndex_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetSubtitleRegion
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FVector2D               MinPos                         ( CPF_Parm | CPF_OutParm )
// struct FVector2D               MaxPos                         ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos )
{
	static UFunction* pFnGetSubtitleRegion = NULL;

	if ( ! pFnGetSubtitleRegion )
		pFnGetSubtitleRegion = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.GetSubtitleRegion" );

	UGameViewportClient_eventGetSubtitleRegion_Parms GetSubtitleRegion_Parms;

	this->ProcessEvent ( pFnGetSubtitleRegion, &GetSubtitleRegion_Parms, NULL );

	if ( MinPos )
		memcpy ( MinPos, &GetSubtitleRegion_Parms.MinPos, 0x8 );

	if ( MaxPos )
		memcpy ( MaxPos, &GetSubtitleRegion_Parms.MaxPos, 0x8 );
};

// Function Engine.GameViewportClient.LayoutPlayers
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventLayoutPlayers ( )
{
	static UFunction* pFnLayoutPlayers = NULL;

	if ( ! pFnLayoutPlayers )
		pFnLayoutPlayers = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.LayoutPlayers" );

	UGameViewportClient_eventLayoutPlayers_Parms LayoutPlayers_Parms;

	this->ProcessEvent ( pFnLayoutPlayers, &LayoutPlayers_Parms, NULL );
};

// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  SplitType                      ( CPF_Parm )

void UGameViewportClient::SetSplitscreenConfiguration ( unsigned char SplitType )
{
	static UFunction* pFnSetSplitscreenConfiguration = NULL;

	if ( ! pFnSetSplitscreenConfiguration )
		pFnSetSplitscreenConfiguration = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.SetSplitscreenConfiguration" );

	UGameViewportClient_execSetSplitscreenConfiguration_Parms SetSplitscreenConfiguration_Parms;
	SetSplitscreenConfiguration_Parms.SplitType = SplitType;

	this->ProcessEvent ( pFnSetSplitscreenConfiguration, &SetSplitscreenConfiguration_Parms, NULL );
};

// Function Engine.GameViewportClient.GameSessionEnded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventGameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.GameSessionEnded" );

	UGameViewportClient_eventGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.GameViewportClient.InsertInteraction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UInteraction*            NewInteraction                 ( CPF_Parm )
// int                            InIndex                        ( CPF_OptionalParm | CPF_Parm )

int UGameViewportClient::eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex )
{
	static UFunction* pFnInsertInteraction = NULL;

	if ( ! pFnInsertInteraction )
		pFnInsertInteraction = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.InsertInteraction" );

	UGameViewportClient_eventInsertInteraction_Parms InsertInteraction_Parms;
	InsertInteraction_Parms.NewInteraction = NewInteraction;
	InsertInteraction_Parms.InIndex = InIndex;

	this->ProcessEvent ( pFnInsertInteraction, &InsertInteraction_Parms, NULL );

	return InsertInteraction_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.Init
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UGameViewportClient::eventInit ( struct FString* OutError )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.Init" );

	UGameViewportClient_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &Init_Parms.OutError, 0xC );

	return Init_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetConsoleTarget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UGameViewportClient::SetConsoleTarget ( int PlayerIndex )
{
	static UFunction* pFnSetConsoleTarget = NULL;

	if ( ! pFnSetConsoleTarget )
		pFnSetConsoleTarget = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.SetConsoleTarget" );

	UGameViewportClient_execSetConsoleTarget_Parms SetConsoleTarget_Parms;
	SetConsoleTarget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSetConsoleTarget, &SetConsoleTarget_Parms, NULL );
};

// Function Engine.GameViewportClient.ShowTitleSafeArea
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::ShowTitleSafeArea ( )
{
	static UFunction* pFnShowTitleSafeArea = NULL;

	if ( ! pFnShowTitleSafeArea )
		pFnShowTitleSafeArea = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.ShowTitleSafeArea" );

	UGameViewportClient_execShowTitleSafeArea_Parms ShowTitleSafeArea_Parms;

	this->ProcessEvent ( pFnShowTitleSafeArea, &ShowTitleSafeArea_Parms, NULL );
};

// Function Engine.GameViewportClient.SetSplit
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Mode                           ( CPF_Parm )

void UGameViewportClient::SetSplit ( int Mode )
{
	static UFunction* pFnSetSplit = NULL;

	if ( ! pFnSetSplit )
		pFnSetSplit = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.SetSplit" );

	UGameViewportClient_execSetSplit_Parms SetSplit_Parms;
	SetSplit_Parms.Mode = Mode;

	this->ProcessEvent ( pFnSetSplit, &SetSplit_Parms, NULL );
};

// Function Engine.GameViewportClient.DebugRemovePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )

void UGameViewportClient::DebugRemovePlayer ( int ControllerId )
{
	static UFunction* pFnDebugRemovePlayer = NULL;

	if ( ! pFnDebugRemovePlayer )
		pFnDebugRemovePlayer = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.DebugRemovePlayer" );

	UGameViewportClient_execDebugRemovePlayer_Parms DebugRemovePlayer_Parms;
	DebugRemovePlayer_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnDebugRemovePlayer, &DebugRemovePlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.SSSwapControllers
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::SSSwapControllers ( )
{
	static UFunction* pFnSSSwapControllers = NULL;

	if ( ! pFnSSSwapControllers )
		pFnSSSwapControllers = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.SSSwapControllers" );

	UGameViewportClient_execSSSwapControllers_Parms SSSwapControllers_Parms;

	this->ProcessEvent ( pFnSSSwapControllers, &SSSwapControllers_Parms, NULL );
};

// Function Engine.GameViewportClient.DebugCreatePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )

void UGameViewportClient::DebugCreatePlayer ( int ControllerId )
{
	static UFunction* pFnDebugCreatePlayer = NULL;

	if ( ! pFnDebugCreatePlayer )
		pFnDebugCreatePlayer = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.DebugCreatePlayer" );

	UGameViewportClient_execDebugCreatePlayer_Parms DebugCreatePlayer_Parms;
	DebugCreatePlayer_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnDebugCreatePlayer, &DebugCreatePlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.FindPlayerByControllerId
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class ULocalPlayer* UGameViewportClient::eventFindPlayerByControllerId ( int ControllerId )
{
	static UFunction* pFnFindPlayerByControllerId = NULL;

	if ( ! pFnFindPlayerByControllerId )
		pFnFindPlayerByControllerId = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.FindPlayerByControllerId" );

	UGameViewportClient_eventFindPlayerByControllerId_Parms FindPlayerByControllerId_Parms;
	FindPlayerByControllerId_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnFindPlayerByControllerId, &FindPlayerByControllerId_Parms, NULL );

	return FindPlayerByControllerId_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.RemovePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            ExPlayer                       ( CPF_Parm )

bool UGameViewportClient::eventRemovePlayer ( class ULocalPlayer* ExPlayer )
{
	static UFunction* pFnRemovePlayer = NULL;

	if ( ! pFnRemovePlayer )
		pFnRemovePlayer = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.RemovePlayer" );

	UGameViewportClient_eventRemovePlayer_Parms RemovePlayer_Parms;
	RemovePlayer_Parms.ExPlayer = ExPlayer;

	this->ProcessEvent ( pFnRemovePlayer, &RemovePlayer_Parms, NULL );

	return RemovePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreatePlayer
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bSpawnActor                    ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class ULocalPlayer* UGameViewportClient::eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError )
{
	static UFunction* pFnCreatePlayer = NULL;

	if ( ! pFnCreatePlayer )
		pFnCreatePlayer = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.CreatePlayer" );

	UGameViewportClient_eventCreatePlayer_Parms CreatePlayer_Parms;
	CreatePlayer_Parms.ControllerId = ControllerId;
	CreatePlayer_Parms.bSpawnActor = bSpawnActor;

	this->ProcessEvent ( pFnCreatePlayer, &CreatePlayer_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &CreatePlayer_Parms.OutError, 0xC );

	return CreatePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.IsFullScreenViewport
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::IsFullScreenViewport ( )
{
	static UFunction* pFnIsFullScreenViewport = NULL;

	if ( ! pFnIsFullScreenViewport )
		pFnIsFullScreenViewport = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.IsFullScreenViewport" );

	UGameViewportClient_execIsFullScreenViewport_Parms IsFullScreenViewport_Parms;

	pFnIsFullScreenViewport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFullScreenViewport, &IsFullScreenViewport_Parms, NULL );

	pFnIsFullScreenViewport->FunctionFlags |= 0x400;

	return IsFullScreenViewport_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetViewportSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               out_ViewportSize               ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetViewportSize ( struct FVector2D* out_ViewportSize )
{
	static UFunction* pFnGetViewportSize = NULL;

	if ( ! pFnGetViewportSize )
		pFnGetViewportSize = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.GetViewportSize" );

	UGameViewportClient_execGetViewportSize_Parms GetViewportSize_Parms;

	pFnGetViewportSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportSize, &GetViewportSize_Parms, NULL );

	pFnGetViewportSize->FunctionFlags |= 0x400;

	if ( out_ViewportSize )
		memcpy ( out_ViewportSize, &GetViewportSize_Parms.out_ViewportSize, 0x8 );
};

// Function Engine.GameViewportClient.ConsoleCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UGameViewportClient::ConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.ConsoleCommand" );

	UGameViewportClient_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UGameViewportClient::HandleInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnHandleInputChar = NULL;

	if ( ! pFnHandleInputChar )
		pFnHandleInputChar = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.HandleInputChar" );

	UGameViewportClient_execHandleInputChar_Parms HandleInputChar_Parms;
	HandleInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnHandleInputChar, &HandleInputChar_Parms, NULL );

	return HandleInputChar_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputAxis
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_Parm )

bool UGameViewportClient::HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputAxis = NULL;

	if ( ! pFnHandleInputAxis )
		pFnHandleInputAxis = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.HandleInputAxis" );

	UGameViewportClient_execHandleInputAxis_Parms HandleInputAxis_Parms;
	HandleInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputAxis_Parms.Key, &Key, 0x8 );
	HandleInputAxis_Parms.Delta = Delta;
	HandleInputAxis_Parms.DeltaTime = DeltaTime;
	HandleInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputAxis, &HandleInputAxis_Parms, NULL );

	return HandleInputAxis_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputKey
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UGameViewportClient::HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputKey = NULL;

	if ( ! pFnHandleInputKey )
		pFnHandleInputKey = UObject::FindObject< UFunction > ( "Function Engine.GameViewportClient.HandleInputKey" );

	UGameViewportClient_execHandleInputKey_Parms HandleInputKey_Parms;
	HandleInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputKey_Parms.Key, &Key, 0x8 );
	HandleInputKey_Parms.EventType = EventType;
	HandleInputKey_Parms.AmountDepressed = AmountDepressed;
	HandleInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputKey, &HandleInputKey_Parms, NULL );

	return HandleInputKey_Parms.ReturnValue;
};

// Function Engine.cVSViewportClient.SetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  SplitType                      ( CPF_Parm )

void UcVSViewportClient::SetSplitscreenConfiguration ( unsigned char SplitType )
{
	static UFunction* pFnSetSplitscreenConfiguration = NULL;

	if ( ! pFnSetSplitscreenConfiguration )
		pFnSetSplitscreenConfiguration = UObject::FindObject< UFunction > ( "Function Engine.cVSViewportClient.SetSplitscreenConfiguration" );

	UcVSViewportClient_execSetSplitscreenConfiguration_Parms SetSplitscreenConfiguration_Parms;
	SetSplitscreenConfiguration_Parms.SplitType = SplitType;

	this->ProcessEvent ( pFnSetSplitscreenConfiguration, &SetSplitscreenConfiguration_Parms, NULL );
};

// Function Engine.cVSViewportClient.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UcVSViewportClient::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function Engine.cVSViewportClient.Tick" );

	UcVSViewportClient_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.cVSViewportClient.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UcVSViewportClient::eventPostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function Engine.cVSViewportClient.PostRender" );

	UcVSViewportClient_eventPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.cVSViewportClient.GameSessionEnded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UcVSViewportClient::eventGameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.cVSViewportClient.GameSessionEnded" );

	UcVSViewportClient_eventGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.cVSViewportClient.Init
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UcVSViewportClient::eventInit ( struct FString* OutError )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.cVSViewportClient.Init" );

	UcVSViewportClient_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &Init_Parms.OutError, 0xC );

	return Init_Parms.ReturnValue;
};

// Function Engine.DamageType.VehicleDamageScalingFor
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )

float UDamageType::VehicleDamageScalingFor ( class AVehicle* V )
{
	static UFunction* pFnVehicleDamageScalingFor = NULL;

	if ( ! pFnVehicleDamageScalingFor )
		pFnVehicleDamageScalingFor = UObject::FindObject< UFunction > ( "Function Engine.DamageType.VehicleDamageScalingFor" );

	UDamageType_execVehicleDamageScalingFor_Parms VehicleDamageScalingFor_Parms;
	VehicleDamageScalingFor_Parms.V = V;

	this->ProcessEvent ( pFnVehicleDamageScalingFor, &VehicleDamageScalingFor_Parms, NULL );

	return VehicleDamageScalingFor_Parms.ReturnValue;
};

// Function Engine.DamageType.SuicideMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  Victim                         ( CPF_Parm )

struct FString UDamageType::SuicideMessage ( class APlayerReplicationInfo* Victim )
{
	static UFunction* pFnSuicideMessage = NULL;

	if ( ! pFnSuicideMessage )
		pFnSuicideMessage = UObject::FindObject< UFunction > ( "Function Engine.DamageType.SuicideMessage" );

	UDamageType_execSuicideMessage_Parms SuicideMessage_Parms;
	SuicideMessage_Parms.Victim = Victim;

	this->ProcessEvent ( pFnSuicideMessage, &SuicideMessage_Parms, NULL );

	return SuicideMessage_Parms.ReturnValue;
};

// Function Engine.DamageType.DeathMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  Killer                         ( CPF_Parm )
// class APlayerReplicationInfo*  Victim                         ( CPF_Parm )

struct FString UDamageType::DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim )
{
	static UFunction* pFnDeathMessage = NULL;

	if ( ! pFnDeathMessage )
		pFnDeathMessage = UObject::FindObject< UFunction > ( "Function Engine.DamageType.DeathMessage" );

	UDamageType_execDeathMessage_Parms DeathMessage_Parms;
	DeathMessage_Parms.Killer = Killer;
	DeathMessage_Parms.Victim = Victim;

	this->ProcessEvent ( pFnDeathMessage, &DeathMessage_Parms, NULL );

	return DeathMessage_Parms.ReturnValue;
};

// Function Engine.PhysicsVolume.OnSetDamageInstigator
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetDamageInstigator* Action                         ( CPF_Parm )

void APhysicsVolume::OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action )
{
	static UFunction* pFnOnSetDamageInstigator = NULL;

	if ( ! pFnOnSetDamageInstigator )
		pFnOnSetDamageInstigator = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.OnSetDamageInstigator" );

	APhysicsVolume_execOnSetDamageInstigator_Parms OnSetDamageInstigator_Parms;
	OnSetDamageInstigator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetDamageInstigator, &OnSetDamageInstigator_Parms, NULL );
};

// Function Engine.PhysicsVolume.ModifyPlayer
// [0x00020000] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void APhysicsVolume::ModifyPlayer ( class APawn* PlayerPawn )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.ModifyPlayer" );

	APhysicsVolume_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.PhysicsVolume.CausePainTo
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::CausePainTo ( class AActor* Other )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.CausePainTo" );

	APhysicsVolume_execCausePainTo_Parms CausePainTo_Parms;
	CausePainTo_Parms.Other = Other;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function Engine.PhysicsVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void APhysicsVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.Touch" );

	APhysicsVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.PhysicsVolume.TimerPop
// [0x00020002] 
// Parameters infos:
// class AVolumeTimer*            T                              ( CPF_Parm )

void APhysicsVolume::TimerPop ( class AVolumeTimer* T )
{
	static UFunction* pFnTimerPop = NULL;

	if ( ! pFnTimerPop )
		pFnTimerPop = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.TimerPop" );

	APhysicsVolume_execTimerPop_Parms TimerPop_Parms;
	TimerPop_Parms.T = T;

	this->ProcessEvent ( pFnTimerPop, &TimerPop_Parms, NULL );
};

// Function Engine.PhysicsVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void APhysicsVolume::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.OnToggle" );

	APhysicsVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnLeavingVolume ( class APawn* Other )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.PawnLeavingVolume" );

	APhysicsVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnEnteredVolume ( class APawn* Other )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.PawnEnteredVolume" );

	APhysicsVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorLeavingVolume ( class AActor* Other )
{
	static UFunction* pFnActorLeavingVolume = NULL;

	if ( ! pFnActorLeavingVolume )
		pFnActorLeavingVolume = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.ActorLeavingVolume" );

	APhysicsVolume_eventActorLeavingVolume_Parms ActorLeavingVolume_Parms;
	ActorLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorLeavingVolume, &ActorLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorEnteredVolume ( class AActor* Other )
{
	static UFunction* pFnActorEnteredVolume = NULL;

	if ( ! pFnActorEnteredVolume )
		pFnActorEnteredVolume = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.ActorEnteredVolume" );

	APhysicsVolume_eventActorEnteredVolume_Parms ActorEnteredVolume_Parms;
	ActorEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorEnteredVolume, &ActorEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.Reset
// [0x00020002] 
// Parameters infos:

void APhysicsVolume::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.Reset" );

	APhysicsVolume_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PhysicsVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APhysicsVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.PostBeginPlay" );

	APhysicsVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PhysicsVolume.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APhysicsVolume::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = UObject::FindObject< UFunction > ( "Function Engine.PhysicsVolume.GetGravityZ" );

	APhysicsVolume_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.DefaultPhysicsVolume.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADefaultPhysicsVolume::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.DefaultPhysicsVolume.Destroyed" );

	ADefaultPhysicsVolume_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Light.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALight::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.Light.OnToggle" );

	ALight_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Light.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ALight::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.Light.ReplicatedEvent" );

	ALight_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = UObject::FindObject< UFunction > ( "Function Engine.LightComponent.OnUpdatePropertyBrightness" );

	ULightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = UObject::FindObject< UFunction > ( "Function Engine.LightComponent.OnUpdatePropertyLightColor" );

	ULightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.LightComponent.UpdateColorAndBrightness
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULightComponent::UpdateColorAndBrightness ( )
{
	static UFunction* pFnUpdateColorAndBrightness = NULL;

	if ( ! pFnUpdateColorAndBrightness )
		pFnUpdateColorAndBrightness = UObject::FindObject< UFunction > ( "Function Engine.LightComponent.UpdateColorAndBrightness" );

	ULightComponent_execUpdateColorAndBrightness_Parms UpdateColorAndBrightness_Parms;

	pFnUpdateColorAndBrightness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateColorAndBrightness, &UpdateColorAndBrightness_Parms, NULL );

	pFnUpdateColorAndBrightness->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.GetDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetDirection ( )
{
	static UFunction* pFnGetDirection = NULL;

	if ( ! pFnGetDirection )
		pFnGetDirection = UObject::FindObject< UFunction > ( "Function Engine.LightComponent.GetDirection" );

	ULightComponent_execGetDirection_Parms GetDirection_Parms;

	pFnGetDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDirection, &GetDirection_Parms, NULL );

	pFnGetDirection->FunctionFlags |= 0x400;

	return GetDirection_Parms.ReturnValue;
};

// Function Engine.LightComponent.GetOrigin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetOrigin ( )
{
	static UFunction* pFnGetOrigin = NULL;

	if ( ! pFnGetOrigin )
		pFnGetOrigin = UObject::FindObject< UFunction > ( "Function Engine.LightComponent.GetOrigin" );

	ULightComponent_execGetOrigin_Parms GetOrigin_Parms;

	pFnGetOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrigin, &GetOrigin_Parms, NULL );

	pFnGetOrigin->FunctionFlags |= 0x400;

	return GetOrigin_Parms.ReturnValue;
};

// Function Engine.LightComponent.SetLightProperties
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewBrightness                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  NewLightColor                  ( CPF_OptionalParm | CPF_Parm )
// class ULightFunction*          NewLightFunction               ( CPF_OptionalParm | CPF_Parm )

void ULightComponent::SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction )
{
	static UFunction* pFnSetLightProperties = NULL;

	if ( ! pFnSetLightProperties )
		pFnSetLightProperties = UObject::FindObject< UFunction > ( "Function Engine.LightComponent.SetLightProperties" );

	ULightComponent_execSetLightProperties_Parms SetLightProperties_Parms;
	SetLightProperties_Parms.NewBrightness = NewBrightness;
	memcpy ( &SetLightProperties_Parms.NewLightColor, &NewLightColor, 0x4 );
	SetLightProperties_Parms.NewLightFunction = NewLightFunction;

	pFnSetLightProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightProperties, &SetLightProperties_Parms, NULL );

	pFnSetLightProperties->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void ULightComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function Engine.LightComponent.SetEnabled" );

	ULightComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.DoorMarker.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = UObject::FindObject< UFunction > ( "Function Engine.DoorMarker.SuggestMovePreparation" );

	ADoorMarker_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.DoorMarker.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = UObject::FindObject< UFunction > ( "Function Engine.DoorMarker.ProceedWithMove" );

	ADoorMarker_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.DoorMarker.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ADoorMarker::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = UObject::FindObject< UFunction > ( "Function Engine.DoorMarker.SpecialHandling" );

	ADoorMarker_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.DoorMarker.MoverClosed
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverClosed ( )
{
	static UFunction* pFnMoverClosed = NULL;

	if ( ! pFnMoverClosed )
		pFnMoverClosed = UObject::FindObject< UFunction > ( "Function Engine.DoorMarker.MoverClosed" );

	ADoorMarker_execMoverClosed_Parms MoverClosed_Parms;

	this->ProcessEvent ( pFnMoverClosed, &MoverClosed_Parms, NULL );
};

// Function Engine.DoorMarker.MoverOpened
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverOpened ( )
{
	static UFunction* pFnMoverOpened = NULL;

	if ( ! pFnMoverOpened )
		pFnMoverOpened = UObject::FindObject< UFunction > ( "Function Engine.DoorMarker.MoverOpened" );

	ADoorMarker_execMoverOpened_Parms MoverOpened_Parms;

	this->ProcessEvent ( pFnMoverOpened, &MoverOpened_Parms, NULL );
};

// Function Engine.DoorMarker.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADoorMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.DoorMarker.PostBeginPlay" );

	ADoorMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DroppedPickup.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void ADroppedPickup::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.RecheckValidTouch" );

	ADroppedPickup_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.DroppedPickup.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.PickedUpBy" );

	ADroppedPickup_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.DroppedPickup.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.GiveTo" );

	ADroppedPickup_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.DroppedPickup.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ADroppedPickup::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.Landed" );

	ADroppedPickup_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.DroppedPickup.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADroppedPickup::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.EncroachedBy" );

	ADroppedPickup_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupParticles
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystemComponent* PickupParticles                ( CPF_Parm | CPF_EditInline )

void ADroppedPickup::eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles )
{
	static UFunction* pFnSetPickupParticles = NULL;

	if ( ! pFnSetPickupParticles )
		pFnSetPickupParticles = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.SetPickupParticles" );

	ADroppedPickup_eventSetPickupParticles_Parms SetPickupParticles_Parms;
	SetPickupParticles_Parms.PickupParticles = PickupParticles;

	this->ProcessEvent ( pFnSetPickupParticles, &SetPickupParticles_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     PickupMesh                     ( CPF_Parm | CPF_EditInline )

void ADroppedPickup::eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.SetPickupMesh" );

	ADroppedPickup_eventSetPickupMesh_Parms SetPickupMesh_Parms;
	SetPickupMesh_Parms.PickupMesh = PickupMesh;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function Engine.DroppedPickup.Reset
// [0x00020002] 
// Parameters infos:

void ADroppedPickup::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.Reset" );

	ADroppedPickup_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.DroppedPickup.RemoveFromNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::RemoveFromNavigation ( )
{
	static UFunction* pFnRemoveFromNavigation = NULL;

	if ( ! pFnRemoveFromNavigation )
		pFnRemoveFromNavigation = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.RemoveFromNavigation" );

	ADroppedPickup_execRemoveFromNavigation_Parms RemoveFromNavigation_Parms;

	pFnRemoveFromNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFromNavigation, &RemoveFromNavigation_Parms, NULL );

	pFnRemoveFromNavigation->FunctionFlags |= 0x400;
};

// Function Engine.DroppedPickup.AddToNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::AddToNavigation ( )
{
	static UFunction* pFnAddToNavigation = NULL;

	if ( ! pFnAddToNavigation )
		pFnAddToNavigation = UObject::FindObject< UFunction > ( "Function Engine.DroppedPickup.AddToNavigation" );

	ADroppedPickup_execAddToNavigation_Parms AddToNavigation_Parms;

	pFnAddToNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToNavigation, &AddToNavigation_Parms, NULL );

	pFnAddToNavigation->FunctionFlags |= 0x400;
};

// Function Engine.DynamicSMActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.Detach" );

	ADynamicSMActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.DynamicSMActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.Attach" );

	ADynamicSMActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.DynamicSMActor.CanBasePawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ADynamicSMActor::CanBasePawn ( class APawn* P )
{
	static UFunction* pFnCanBasePawn = NULL;

	if ( ! pFnCanBasePawn )
		pFnCanBasePawn = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.CanBasePawn" );

	ADynamicSMActor_execCanBasePawn_Parms CanBasePawn_Parms;
	CanBasePawn_Parms.P = P;

	this->ProcessEvent ( pFnCanBasePawn, &CanBasePawn_Parms, NULL );

	return CanBasePawn_Parms.ReturnValue;
};

// Function Engine.DynamicSMActor.SetStaticMesh
// [0x00020002] 
// Parameters infos:
// class UStaticMesh*             NewMesh                        ( CPF_Parm )
// struct FVector                 NewTranslation                 ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 NewScale3D                     ( CPF_OptionalParm | CPF_Parm )

void ADynamicSMActor::SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.SetStaticMesh" );

	ADynamicSMActor_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;
	memcpy ( &SetStaticMesh_Parms.NewTranslation, &NewTranslation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewRotation, &NewRotation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewScale3D, &NewScale3D, 0xC );

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.OnSetMaterial" );

	ADynamicSMActor_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetStaticMesh
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetStaticMesh*   Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetStaticMesh ( class USeqAct_SetStaticMesh* Action )
{
	static UFunction* pFnOnSetStaticMesh = NULL;

	if ( ! pFnOnSetStaticMesh )
		pFnOnSetStaticMesh = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.OnSetStaticMesh" );

	ADynamicSMActor_execOnSetStaticMesh_Parms OnSetStaticMesh_Parms;
	OnSetStaticMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetStaticMesh, &OnSetStaticMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ADynamicSMActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.ReplicatedEvent" );

	ADynamicSMActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.DynamicSMActor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicSMActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.DynamicSMActor.PostBeginPlay" );

	ADynamicSMActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate )
{
	static UFunction* pFnSpawnEmitterCustomLifetime = NULL;

	if ( ! pFnSpawnEmitterCustomLifetime )
		pFnSpawnEmitterCustomLifetime = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.SpawnEmitterCustomLifetime" );

	AEmitterPool_execSpawnEmitterCustomLifetime_Parms SpawnEmitterCustomLifetime_Parms;
	SpawnEmitterCustomLifetime_Parms.EmitterTemplate = EmitterTemplate;

	this->ProcessEvent ( pFnSpawnEmitterCustomLifetime, &SpawnEmitterCustomLifetime_Parms, NULL );

	return SpawnEmitterCustomLifetime_Parms.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitter
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  AttachToActor                  ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor )
{
	static UFunction* pFnSpawnEmitter = NULL;

	if ( ! pFnSpawnEmitter )
		pFnSpawnEmitter = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.SpawnEmitter" );

	AEmitterPool_execSpawnEmitter_Parms SpawnEmitter_Parms;
	SpawnEmitter_Parms.EmitterTemplate = EmitterTemplate;
	memcpy ( &SpawnEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnEmitter_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnEmitter_Parms.AttachToActor = AttachToActor;

	this->ProcessEvent ( pFnSpawnEmitter, &SpawnEmitter_Parms, NULL );

	return SpawnEmitter_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetPooledComponent
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )

class UParticleSystemComponent* AEmitterPool::GetPooledComponent ( class UParticleSystem* EmitterTemplate )
{
	static UFunction* pFnGetPooledComponent = NULL;

	if ( ! pFnGetPooledComponent )
		pFnGetPooledComponent = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.GetPooledComponent" );

	AEmitterPool_execGetPooledComponent_Parms GetPooledComponent_Parms;
	GetPooledComponent_Parms.EmitterTemplate = EmitterTemplate;

	pFnGetPooledComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledComponent, &GetPooledComponent_Parms, NULL );

	pFnGetPooledComponent->FunctionFlags |= 0x400;

	return GetPooledComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetFreeMatInstConsts
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeMatInstConsts = NULL;

	if ( ! pFnGetFreeMatInstConsts )
		pFnGetFreeMatInstConsts = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.GetFreeMatInstConsts" );

	AEmitterPool_execGetFreeMatInstConsts_Parms GetFreeMatInstConsts_Parms;
	GetFreeMatInstConsts_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeMatInstConsts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeMatInstConsts, &GetFreeMatInstConsts_Parms, NULL );

	pFnGetFreeMatInstConsts->FunctionFlags |= 0x400;

	return GetFreeMatInstConsts_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    SMC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC )
{
	static UFunction* pFnFreeMaterialInstanceConstants = NULL;

	if ( ! pFnFreeMaterialInstanceConstants )
		pFnFreeMaterialInstanceConstants = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.FreeMaterialInstanceConstants" );

	AEmitterPool_execFreeMaterialInstanceConstants_Parms FreeMaterialInstanceConstants_Parms;
	FreeMaterialInstanceConstants_Parms.SMC = SMC;

	pFnFreeMaterialInstanceConstants->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeMaterialInstanceConstants, &FreeMaterialInstanceConstants_Parms, NULL );

	pFnFreeMaterialInstanceConstants->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeStaticMeshComponent = NULL;

	if ( ! pFnGetFreeStaticMeshComponent )
		pFnGetFreeStaticMeshComponent = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.GetFreeStaticMeshComponent" );

	AEmitterPool_execGetFreeStaticMeshComponent_Parms GetFreeStaticMeshComponent_Parms;
	GetFreeStaticMeshComponent_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeStaticMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeStaticMeshComponent, &GetFreeStaticMeshComponent_Parms, NULL );

	pFnGetFreeStaticMeshComponent->FunctionFlags |= 0x400;

	return GetFreeStaticMeshComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeStaticMeshComponents
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::FreeStaticMeshComponents ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnFreeStaticMeshComponents = NULL;

	if ( ! pFnFreeStaticMeshComponents )
		pFnFreeStaticMeshComponents = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.FreeStaticMeshComponents" );

	AEmitterPool_execFreeStaticMeshComponents_Parms FreeStaticMeshComponents_Parms;
	FreeStaticMeshComponents_Parms.PSC = PSC;

	pFnFreeStaticMeshComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeStaticMeshComponents, &FreeStaticMeshComponents_Parms, NULL );

	pFnFreeStaticMeshComponents->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.ReturnToPool
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::ReturnToPool ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnReturnToPool = NULL;

	if ( ! pFnReturnToPool )
		pFnReturnToPool = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.ReturnToPool" );

	AEmitterPool_execReturnToPool_Parms ReturnToPool_Parms;
	ReturnToPool_Parms.PSC = PSC;

	pFnReturnToPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReturnToPool, &ReturnToPool_Parms, NULL );

	pFnReturnToPool->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.OnParticleSystemFinished
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::OnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = UObject::FindObject< UFunction > ( "Function Engine.EmitterPool.OnParticleSystemFinished" );

	AEmitterPool_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnUnmountFaceFXAnimSet = NULL;

	if ( ! pFnUnmountFaceFXAnimSet )
		pFnUnmountFaceFXAnimSet = UObject::FindObject< UFunction > ( "Function Engine.FaceFXAsset.UnmountFaceFXAnimSet" );

	UFaceFXAsset_execUnmountFaceFXAnimSet_Parms UnmountFaceFXAnimSet_Parms;
	UnmountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnUnmountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnmountFaceFXAnimSet, &UnmountFaceFXAnimSet_Parms, NULL );

	pFnUnmountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnMountFaceFXAnimSet = NULL;

	if ( ! pFnMountFaceFXAnimSet )
		pFnMountFaceFXAnimSet = UObject::FindObject< UFunction > ( "Function Engine.FaceFXAsset.MountFaceFXAnimSet" );

	UFaceFXAsset_execMountFaceFXAnimSet_Parms MountFaceFXAnimSet_Parms;
	MountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnMountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMountFaceFXAnimSet, &MountFaceFXAnimSet_Parms, NULL );

	pFnMountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFileWriter::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.FileWriter.Destroyed" );

	AFileWriter_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.FileWriter.Logf
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 logString                      ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void AFileWriter::Logf ( struct FString logString )
{
	static UFunction* pFnLogf = NULL;

	if ( ! pFnLogf )
		pFnLogf = UObject::FindObject< UFunction > ( "Function Engine.FileWriter.Logf" );

	AFileWriter_execLogf_Parms Logf_Parms;
	memcpy ( &Logf_Parms.logString, &logString, 0xC );

	pFnLogf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogf, &Logf_Parms, NULL );

	pFnLogf->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.CloseFile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AFileWriter::CloseFile ( )
{
	static UFunction* pFnCloseFile = NULL;

	if ( ! pFnCloseFile )
		pFnCloseFile = UObject::FindObject< UFunction > ( "Function Engine.FileWriter.CloseFile" );

	AFileWriter_execCloseFile_Parms CloseFile_Parms;

	pFnCloseFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseFile, &CloseFile_Parms, NULL );

	pFnCloseFile->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.OpenFile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InFilename                     ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned char                  InFileType                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 InExtension                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeTimeStamp              ( CPF_OptionalParm | CPF_Parm )

bool AFileWriter::OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp )
{
	static UFunction* pFnOpenFile = NULL;

	if ( ! pFnOpenFile )
		pFnOpenFile = UObject::FindObject< UFunction > ( "Function Engine.FileWriter.OpenFile" );

	AFileWriter_execOpenFile_Parms OpenFile_Parms;
	memcpy ( &OpenFile_Parms.InFilename, &InFilename, 0xC );
	OpenFile_Parms.InFileType = InFileType;
	memcpy ( &OpenFile_Parms.InExtension, &InExtension, 0xC );
	OpenFile_Parms.bUnique = bUnique;
	OpenFile_Parms.bIncludeTimeStamp = bIncludeTimeStamp;

	pFnOpenFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenFile, &OpenFile_Parms, NULL );

	pFnOpenFile->FunctionFlags |= 0x400;

	return OpenFile_Parms.ReturnValue;
};

// Function Engine.FileLog.CloseLog
// [0x00020002] 
// Parameters infos:

void AFileLog::CloseLog ( )
{
	static UFunction* pFnCloseLog = NULL;

	if ( ! pFnCloseLog )
		pFnCloseLog = UObject::FindObject< UFunction > ( "Function Engine.FileLog.CloseLog" );

	AFileLog_execCloseLog_Parms CloseLog_Parms;

	this->ProcessEvent ( pFnCloseLog, &CloseLog_Parms, NULL );
};

// Function Engine.FileLog.OpenLog
// [0x00020002] 
// Parameters infos:
// struct FString                 LogFilename                    ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FString                 extension                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )

void AFileLog::OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique )
{
	static UFunction* pFnOpenLog = NULL;

	if ( ! pFnOpenLog )
		pFnOpenLog = UObject::FindObject< UFunction > ( "Function Engine.FileLog.OpenLog" );

	AFileLog_execOpenLog_Parms OpenLog_Parms;
	memcpy ( &OpenLog_Parms.LogFilename, &LogFilename, 0xC );
	memcpy ( &OpenLog_Parms.extension, &extension, 0xC );
	OpenLog_Parms.bUnique = bUnique;

	this->ProcessEvent ( pFnOpenLog, &OpenLog_Parms, NULL );
};

// Function Engine.Font.GetMaxCharHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UFont::GetMaxCharHeight ( )
{
	static UFunction* pFnGetMaxCharHeight = NULL;

	if ( ! pFnGetMaxCharHeight )
		pFnGetMaxCharHeight = UObject::FindObject< UFunction > ( "Function Engine.Font.GetMaxCharHeight" );

	UFont_execGetMaxCharHeight_Parms GetMaxCharHeight_Parms;

	pFnGetMaxCharHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxCharHeight, &GetMaxCharHeight_Parms, NULL );

	pFnGetMaxCharHeight->FunctionFlags |= 0x400;

	return GetMaxCharHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetAuthoredViewportHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ViewportHeight                 ( CPF_Parm )

float UFont::GetAuthoredViewportHeight ( float ViewportHeight )
{
	static UFunction* pFnGetAuthoredViewportHeight = NULL;

	if ( ! pFnGetAuthoredViewportHeight )
		pFnGetAuthoredViewportHeight = UObject::FindObject< UFunction > ( "Function Engine.Font.GetAuthoredViewportHeight" );

	UFont_execGetAuthoredViewportHeight_Parms GetAuthoredViewportHeight_Parms;
	GetAuthoredViewportHeight_Parms.ViewportHeight = ViewportHeight;

	pFnGetAuthoredViewportHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAuthoredViewportHeight, &GetAuthoredViewportHeight_Parms, NULL );

	pFnGetAuthoredViewportHeight->FunctionFlags |= 0x400;

	return GetAuthoredViewportHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetScalingFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

float UFont::GetScalingFactor ( float HeightTest )
{
	static UFunction* pFnGetScalingFactor = NULL;

	if ( ! pFnGetScalingFactor )
		pFnGetScalingFactor = UObject::FindObject< UFunction > ( "Function Engine.Font.GetScalingFactor" );

	UFont_execGetScalingFactor_Parms GetScalingFactor_Parms;
	GetScalingFactor_Parms.HeightTest = HeightTest;

	pFnGetScalingFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalingFactor, &GetScalingFactor_Parms, NULL );

	pFnGetScalingFactor->FunctionFlags |= 0x400;

	return GetScalingFactor_Parms.ReturnValue;
};

// Function Engine.Font.GetResolutionPageIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UFont::GetResolutionPageIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionPageIndex = NULL;

	if ( ! pFnGetResolutionPageIndex )
		pFnGetResolutionPageIndex = UObject::FindObject< UFunction > ( "Function Engine.Font.GetResolutionPageIndex" );

	UFont_execGetResolutionPageIndex_Parms GetResolutionPageIndex_Parms;
	GetResolutionPageIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionPageIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionPageIndex, &GetResolutionPageIndex_Parms, NULL );

	pFnGetResolutionPageIndex->FunctionFlags |= 0x400;

	return GetResolutionPageIndex_Parms.ReturnValue;
};

// Function Engine.ForceFeedbackManager.PauseWaveform
// [0x00020102] 
// Parameters infos:
// unsigned long                  bPause                         ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::PauseWaveform ( unsigned long bPause )
{
	static UFunction* pFnPauseWaveform = NULL;

	if ( ! pFnPauseWaveform )
		pFnPauseWaveform = UObject::FindObject< UFunction > ( "Function Engine.ForceFeedbackManager.PauseWaveform" );

	UForceFeedbackManager_execPauseWaveform_Parms PauseWaveform_Parms;
	PauseWaveform_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseWaveform, &PauseWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// [0x00020102] 
// Parameters infos:
// class UForceFeedbackWaveform*  Waveform                       ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::StopForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform )
{
	static UFunction* pFnStopForceFeedbackWaveform = NULL;

	if ( ! pFnStopForceFeedbackWaveform )
		pFnStopForceFeedbackWaveform = UObject::FindObject< UFunction > ( "Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform" );

	UForceFeedbackManager_execStopForceFeedbackWaveform_Parms StopForceFeedbackWaveform_Parms;
	StopForceFeedbackWaveform_Parms.Waveform = Waveform;

	this->ProcessEvent ( pFnStopForceFeedbackWaveform, &StopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// [0x00020102] 
// Parameters infos:
// class UForceFeedbackWaveform*  Waveform                       ( CPF_Parm )

void UForceFeedbackManager::PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* Waveform )
{
	static UFunction* pFnPlayForceFeedbackWaveform = NULL;

	if ( ! pFnPlayForceFeedbackWaveform )
		pFnPlayForceFeedbackWaveform = UObject::FindObject< UFunction > ( "Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform" );

	UForceFeedbackManager_execPlayForceFeedbackWaveform_Parms PlayForceFeedbackWaveform_Parms;
	PlayForceFeedbackWaveform_Parms.Waveform = Waveform;

	this->ProcessEvent ( pFnPlayForceFeedbackWaveform, &PlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsToTravelToSession
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void AGameInfo::TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnTellClientsToTravelToSession = NULL;

	if ( ! pFnTellClientsToTravelToSession )
		pFnTellClientsToTravelToSession = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.TellClientsToTravelToSession" );

	AGameInfo_execTellClientsToTravelToSession_Parms TellClientsToTravelToSession_Parms;
	memcpy ( &TellClientsToTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	TellClientsToTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &TellClientsToTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x40 );

	this->ProcessEvent ( pFnTellClientsToTravelToSession, &TellClientsToTravelToSession_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsToReturnToPartyHost
// [0x00020002] 
// Parameters infos:

void AGameInfo::TellClientsToReturnToPartyHost ( )
{
	static UFunction* pFnTellClientsToReturnToPartyHost = NULL;

	if ( ! pFnTellClientsToReturnToPartyHost )
		pFnTellClientsToReturnToPartyHost = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.TellClientsToReturnToPartyHost" );

	AGameInfo_execTellClientsToReturnToPartyHost_Parms TellClientsToReturnToPartyHost_Parms;

	this->ProcessEvent ( pFnTellClientsToReturnToPartyHost, &TellClientsToReturnToPartyHost_Parms, NULL );
};

// Function Engine.GameInfo.ShowSurveyForAllClients
// [0x00020002] 
// Parameters infos:
// struct FString                 QuestionId                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Context                        ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::ShowSurveyForAllClients ( struct FString QuestionId, struct FString Context )
{
	static UFunction* pFnShowSurveyForAllClients = NULL;

	if ( ! pFnShowSurveyForAllClients )
		pFnShowSurveyForAllClients = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ShowSurveyForAllClients" );

	AGameInfo_execShowSurveyForAllClients_Parms ShowSurveyForAllClients_Parms;
	memcpy ( &ShowSurveyForAllClients_Parms.QuestionId, &QuestionId, 0xC );
	memcpy ( &ShowSurveyForAllClients_Parms.Context, &Context, 0xC );

	this->ProcessEvent ( pFnShowSurveyForAllClients, &ShowSurveyForAllClients_Parms, NULL );
};

// Function Engine.GameInfo.IncrementNumberOfMatchesPlayed
// [0x00020002] 
// Parameters infos:

void AGameInfo::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.IncrementNumberOfMatchesPlayed" );

	AGameInfo_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.GameInfo.NativeRenderDebug
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void AGameInfo::NativeRenderDebug ( class UCanvas* Canvas )
{
	static UFunction* pFnNativeRenderDebug = NULL;

	if ( ! pFnNativeRenderDebug )
		pFnNativeRenderDebug = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.NativeRenderDebug" );

	AGameInfo_execNativeRenderDebug_Parms NativeRenderDebug_Parms;
	NativeRenderDebug_Parms.Canvas = Canvas;

	pFnNativeRenderDebug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeRenderDebug, &NativeRenderDebug_Parms, NULL );

	pFnNativeRenderDebug->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.IncrementAutomatedTestingMapIndex
// [0x00020002] 
// Parameters infos:

void AGameInfo::IncrementAutomatedTestingMapIndex ( )
{
	static UFunction* pFnIncrementAutomatedTestingMapIndex = NULL;

	if ( ! pFnIncrementAutomatedTestingMapIndex )
		pFnIncrementAutomatedTestingMapIndex = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.IncrementAutomatedTestingMapIndex" );

	AGameInfo_execIncrementAutomatedTestingMapIndex_Parms IncrementAutomatedTestingMapIndex_Parms;

	this->ProcessEvent ( pFnIncrementAutomatedTestingMapIndex, &IncrementAutomatedTestingMapIndex_Parms, NULL );
};

// Function Engine.GameInfo.CloseAutomatedMapTestTimer
// [0x00020002] 
// Parameters infos:

void AGameInfo::CloseAutomatedMapTestTimer ( )
{
	static UFunction* pFnCloseAutomatedMapTestTimer = NULL;

	if ( ! pFnCloseAutomatedMapTestTimer )
		pFnCloseAutomatedMapTestTimer = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CloseAutomatedMapTestTimer" );

	AGameInfo_execCloseAutomatedMapTestTimer_Parms CloseAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnCloseAutomatedMapTestTimer, &CloseAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.GameInfo.StartAutomatedMapTestTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventStartAutomatedMapTestTimer ( )
{
	static UFunction* pFnStartAutomatedMapTestTimer = NULL;

	if ( ! pFnStartAutomatedMapTestTimer )
		pFnStartAutomatedMapTestTimer = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.StartAutomatedMapTestTimer" );

	AGameInfo_eventStartAutomatedMapTestTimer_Parms StartAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnStartAutomatedMapTestTimer, &StartAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.GameInfo.OnServerCreateComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnServerCreateComplete = NULL;

	if ( ! pFnOnServerCreateComplete )
		pFnOnServerCreateComplete = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.OnServerCreateComplete" );

	AGameInfo_execOnServerCreateComplete_Parms OnServerCreateComplete_Parms;
	memcpy ( &OnServerCreateComplete_Parms.SessionName, &SessionName, 0x8 );
	OnServerCreateComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnServerCreateComplete, &OnServerCreateComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServer
// [0x00020002] 
// Parameters infos:

void AGameInfo::RegisterServer ( )
{
	static UFunction* pFnRegisterServer = NULL;

	if ( ! pFnRegisterServer )
		pFnRegisterServer = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RegisterServer" );

	AGameInfo_execRegisterServer_Parms RegisterServer_Parms;

	this->ProcessEvent ( pFnRegisterServer, &RegisterServer_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginChange
// [0x00020002] 
// Parameters infos:

void AGameInfo::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.OnLoginChange" );

	AGameInfo_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginFailed
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void AGameInfo::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.OnLoginFailed" );

	AGameInfo_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.GameInfo.ClearAutoLoginDelegates
// [0x00020002] 
// Parameters infos:

void AGameInfo::ClearAutoLoginDelegates ( )
{
	static UFunction* pFnClearAutoLoginDelegates = NULL;

	if ( ! pFnClearAutoLoginDelegates )
		pFnClearAutoLoginDelegates = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ClearAutoLoginDelegates" );

	AGameInfo_execClearAutoLoginDelegates_Parms ClearAutoLoginDelegates_Parms;

	this->ProcessEvent ( pFnClearAutoLoginDelegates, &ClearAutoLoginDelegates_Parms, NULL );
};

// Function Engine.GameInfo.ProcessServerLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::ProcessServerLogin ( )
{
	static UFunction* pFnProcessServerLogin = NULL;

	if ( ! pFnProcessServerLogin )
		pFnProcessServerLogin = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ProcessServerLogin" );

	AGameInfo_execProcessServerLogin_Parms ProcessServerLogin_Parms;

	this->ProcessEvent ( pFnProcessServerLogin, &ProcessServerLogin_Parms, NULL );

	return ProcessServerLogin_Parms.ReturnValue;
};

// Function Engine.GameInfo.MatineeCancelled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventMatineeCancelled ( )
{
	static UFunction* pFnMatineeCancelled = NULL;

	if ( ! pFnMatineeCancelled )
		pFnMatineeCancelled = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.MatineeCancelled" );

	AGameInfo_eventMatineeCancelled_Parms MatineeCancelled_Parms;

	this->ProcessEvent ( pFnMatineeCancelled, &MatineeCancelled_Parms, NULL );
};

// Function Engine.GameInfo.RecalculateSkillRating
// [0x00820002] 
// Parameters infos:

void AGameInfo::RecalculateSkillRating ( )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RecalculateSkillRating" );

	AGameInfo_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameplayMuteList
// [0x00020000] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::UpdateGameplayMuteList ( class APlayerController* PC )
{
	static UFunction* pFnUpdateGameplayMuteList = NULL;

	if ( ! pFnUpdateGameplayMuteList )
		pFnUpdateGameplayMuteList = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.UpdateGameplayMuteList" );

	AGameInfo_execUpdateGameplayMuteList_Parms UpdateGameplayMuteList_Parms;
	UpdateGameplayMuteList_Parms.PC = PC;

	this->ProcessEvent ( pFnUpdateGameplayMuteList, &UpdateGameplayMuteList_Parms, NULL );
};

// Function Engine.GameInfo.NotifyArbitratedMatchEnd
// [0x00020002] 
// Parameters infos:

void AGameInfo::NotifyArbitratedMatchEnd ( )
{
	static UFunction* pFnNotifyArbitratedMatchEnd = NULL;

	if ( ! pFnNotifyArbitratedMatchEnd )
		pFnNotifyArbitratedMatchEnd = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.NotifyArbitratedMatchEnd" );

	AGameInfo_execNotifyArbitratedMatchEnd_Parms NotifyArbitratedMatchEnd_Parms;

	this->ProcessEvent ( pFnNotifyArbitratedMatchEnd, &NotifyArbitratedMatchEnd_Parms, NULL );
};

// Function Engine.GameInfo.ServerWriteArbitrationEndGameData
// [0x00020002] 
// Parameters infos:

void AGameInfo::ServerWriteArbitrationEndGameData ( )
{
	static UFunction* pFnServerWriteArbitrationEndGameData = NULL;

	if ( ! pFnServerWriteArbitrationEndGameData )
		pFnServerWriteArbitrationEndGameData = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ServerWriteArbitrationEndGameData" );

	AGameInfo_execServerWriteArbitrationEndGameData_Parms ServerWriteArbitrationEndGameData_Parms;

	this->ProcessEvent ( pFnServerWriteArbitrationEndGameData, &ServerWriteArbitrationEndGameData_Parms, NULL );
};

// Function Engine.GameInfo.ProcessClientDataWriteCompletion
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::ProcessClientDataWriteCompletion ( class APlayerController* PC )
{
	static UFunction* pFnProcessClientDataWriteCompletion = NULL;

	if ( ! pFnProcessClientDataWriteCompletion )
		pFnProcessClientDataWriteCompletion = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ProcessClientDataWriteCompletion" );

	AGameInfo_execProcessClientDataWriteCompletion_Parms ProcessClientDataWriteCompletion_Parms;
	ProcessClientDataWriteCompletion_Parms.PC = PC;

	this->ProcessEvent ( pFnProcessClientDataWriteCompletion, &ProcessClientDataWriteCompletion_Parms, NULL );
};

// Function Engine.GameInfo.ProcessEndGameHandshake
// [0x00020002] 
// Parameters infos:

void AGameInfo::ProcessEndGameHandshake ( )
{
	static UFunction* pFnProcessEndGameHandshake = NULL;

	if ( ! pFnProcessEndGameHandshake )
		pFnProcessEndGameHandshake = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ProcessEndGameHandshake" );

	AGameInfo_execProcessEndGameHandshake_Parms ProcessEndGameHandshake_Parms;

	this->ProcessEvent ( pFnProcessEndGameHandshake, &ProcessEndGameHandshake_Parms, NULL );
};

// Function Engine.GameInfo.MatchIsInProgress
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::MatchIsInProgress ( )
{
	static UFunction* pFnMatchIsInProgress = NULL;

	if ( ! pFnMatchIsInProgress )
		pFnMatchIsInProgress = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.MatchIsInProgress" );

	AGameInfo_execMatchIsInProgress_Parms MatchIsInProgress_Parms;

	this->ProcessEvent ( pFnMatchIsInProgress, &MatchIsInProgress_Parms, NULL );

	return MatchIsInProgress_Parms.ReturnValue;
};

// Function Engine.GameInfo.ArbitrationRegistrationComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnArbitrationRegistrationComplete = NULL;

	if ( ! pFnArbitrationRegistrationComplete )
		pFnArbitrationRegistrationComplete = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ArbitrationRegistrationComplete" );

	AGameInfo_execArbitrationRegistrationComplete_Parms ArbitrationRegistrationComplete_Parms;
	memcpy ( &ArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	ArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnArbitrationRegistrationComplete, &ArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServerForArbitration
// [0x00020000] 
// Parameters infos:

void AGameInfo::RegisterServerForArbitration ( )
{
	static UFunction* pFnRegisterServerForArbitration = NULL;

	if ( ! pFnRegisterServerForArbitration )
		pFnRegisterServerForArbitration = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RegisterServerForArbitration" );

	AGameInfo_execRegisterServerForArbitration_Parms RegisterServerForArbitration_Parms;

	this->ProcessEvent ( pFnRegisterServerForArbitration, &RegisterServerForArbitration_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitratedMatch
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitratedMatch ( )
{
	static UFunction* pFnStartArbitratedMatch = NULL;

	if ( ! pFnStartArbitratedMatch )
		pFnStartArbitratedMatch = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.StartArbitratedMatch" );

	AGameInfo_execStartArbitratedMatch_Parms StartArbitratedMatch_Parms;

	this->ProcessEvent ( pFnStartArbitratedMatch, &StartArbitratedMatch_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitrationRegistration
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitrationRegistration ( )
{
	static UFunction* pFnStartArbitrationRegistration = NULL;

	if ( ! pFnStartArbitrationRegistration )
		pFnStartArbitrationRegistration = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.StartArbitrationRegistration" );

	AGameInfo_execStartArbitrationRegistration_Parms StartArbitrationRegistration_Parms;

	this->ProcessEvent ( pFnStartArbitrationRegistration, &StartArbitrationRegistration_Parms, NULL );
};

// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// [0x00020000] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful )
{
	static UFunction* pFnProcessClientRegistrationCompletion = NULL;

	if ( ! pFnProcessClientRegistrationCompletion )
		pFnProcessClientRegistrationCompletion = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ProcessClientRegistrationCompletion" );

	AGameInfo_execProcessClientRegistrationCompletion_Parms ProcessClientRegistrationCompletion_Parms;
	ProcessClientRegistrationCompletion_Parms.PC = PC;
	ProcessClientRegistrationCompletion_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnProcessClientRegistrationCompletion, &ProcessClientRegistrationCompletion_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameSettingsCounts
// [0x00020002] 
// Parameters infos:

void AGameInfo::UpdateGameSettingsCounts ( )
{
	static UFunction* pFnUpdateGameSettingsCounts = NULL;

	if ( ! pFnUpdateGameSettingsCounts )
		pFnUpdateGameSettingsCounts = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.UpdateGameSettingsCounts" );

	AGameInfo_execUpdateGameSettingsCounts_Parms UpdateGameSettingsCounts_Parms;

	this->ProcessEvent ( pFnUpdateGameSettingsCounts, &UpdateGameSettingsCounts_Parms, NULL );
};

// Function Engine.GameInfo.HandleSeamlessTravelPlayer
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AGameInfo::eventHandleSeamlessTravelPlayer ( class AController** C )
{
	static UFunction* pFnHandleSeamlessTravelPlayer = NULL;

	if ( ! pFnHandleSeamlessTravelPlayer )
		pFnHandleSeamlessTravelPlayer = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.HandleSeamlessTravelPlayer" );

	AGameInfo_eventHandleSeamlessTravelPlayer_Parms HandleSeamlessTravelPlayer_Parms;

	this->ProcessEvent ( pFnHandleSeamlessTravelPlayer, &HandleSeamlessTravelPlayer_Parms, NULL );

	if ( C )
		*C = HandleSeamlessTravelPlayer_Parms.C;
};

// Function Engine.GameInfo.UpdateGameSettings
// [0x00020000] 
// Parameters infos:

void AGameInfo::UpdateGameSettings ( )
{
	static UFunction* pFnUpdateGameSettings = NULL;

	if ( ! pFnUpdateGameSettings )
		pFnUpdateGameSettings = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.UpdateGameSettings" );

	AGameInfo_execUpdateGameSettings_Parms UpdateGameSettings_Parms;

	this->ProcessEvent ( pFnUpdateGameSettings, &UpdateGameSettings_Parms, NULL );
};

// Function Engine.GameInfo.PostSeamlessTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostSeamlessTravel ( )
{
	static UFunction* pFnPostSeamlessTravel = NULL;

	if ( ! pFnPostSeamlessTravel )
		pFnPostSeamlessTravel = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PostSeamlessTravel" );

	AGameInfo_eventPostSeamlessTravel_Parms PostSeamlessTravel_Parms;

	this->ProcessEvent ( pFnPostSeamlessTravel, &PostSeamlessTravel_Parms, NULL );
};

// Function Engine.GameInfo.SwapPlayerControllers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )
// class APlayerController*       NewPC                          ( CPF_Parm )

void AGameInfo::SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC )
{
	static UFunction* pFnSwapPlayerControllers = NULL;

	if ( ! pFnSwapPlayerControllers )
		pFnSwapPlayerControllers = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.SwapPlayerControllers" );

	AGameInfo_execSwapPlayerControllers_Parms SwapPlayerControllers_Parms;
	SwapPlayerControllers_Parms.OldPC = OldPC;
	SwapPlayerControllers_Parms.NewPC = NewPC;

	pFnSwapPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapPlayerControllers, &SwapPlayerControllers_Parms, NULL );

	pFnSwapPlayerControllers->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetSeamlessTravelActorList" );

	AGameInfo_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.GameInfo.OverridePRI
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class APlayerReplicationInfo*  OldPRI                         ( CPF_Parm )

void AGameInfo::OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI )
{
	static UFunction* pFnOverridePRI = NULL;

	if ( ! pFnOverridePRI )
		pFnOverridePRI = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.OverridePRI" );

	AGameInfo_execOverridePRI_Parms OverridePRI_Parms;
	OverridePRI_Parms.PC = PC;
	OverridePRI_Parms.OldPRI = OldPRI;

	this->ProcessEvent ( pFnOverridePRI, &OverridePRI_Parms, NULL );
};

// Function Engine.GameInfo.FindInactivePRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool AGameInfo::FindInactivePRI ( class APlayerController* PC )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.FindInactivePRI" );

	AGameInfo_execFindInactivePRI_Parms FindInactivePRI_Parms;
	FindInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );

	return FindInactivePRI_Parms.ReturnValue;
};

// Function Engine.GameInfo.AddInactivePRI
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC )
{
	static UFunction* pFnAddInactivePRI = NULL;

	if ( ! pFnAddInactivePRI )
		pFnAddInactivePRI = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AddInactivePRI" );

	AGameInfo_execAddInactivePRI_Parms AddInactivePRI_Parms;
	AddInactivePRI_Parms.PRI = PRI;
	AddInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnAddInactivePRI, &AddInactivePRI_Parms, NULL );
};

// Function Engine.GameInfo.PostCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostCommitMapChange ( )
{
	static UFunction* pFnPostCommitMapChange = NULL;

	if ( ! pFnPostCommitMapChange )
		pFnPostCommitMapChange = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PostCommitMapChange" );

	AGameInfo_eventPostCommitMapChange_Parms PostCommitMapChange_Parms;

	this->ProcessEvent ( pFnPostCommitMapChange, &PostCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.PreCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 PreviousMapName                ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NextMapName                    ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName )
{
	static UFunction* pFnPreCommitMapChange = NULL;

	if ( ! pFnPreCommitMapChange )
		pFnPreCommitMapChange = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PreCommitMapChange" );

	AGameInfo_eventPreCommitMapChange_Parms PreCommitMapChange_Parms;
	memcpy ( &PreCommitMapChange_Parms.PreviousMapName, &PreviousMapName, 0xC );
	memcpy ( &PreCommitMapChange_Parms.NextMapName, &NextMapName, 0xC );

	this->ProcessEvent ( pFnPreCommitMapChange, &PreCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.AllowCheats
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AGameInfo::AllowCheats ( class APlayerController* P )
{
	static UFunction* pFnAllowCheats = NULL;

	if ( ! pFnAllowCheats )
		pFnAllowCheats = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AllowCheats" );

	AGameInfo_execAllowCheats_Parms AllowCheats_Parms;
	AllowCheats_Parms.P = P;

	this->ProcessEvent ( pFnAllowCheats, &AllowCheats_Parms, NULL );

	return AllowCheats_Parms.ReturnValue;
};

// Function Engine.GameInfo.AllowMutator
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MutatorClassName               ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::AllowMutator ( struct FString MutatorClassName )
{
	static UFunction* pFnAllowMutator = NULL;

	if ( ! pFnAllowMutator )
		pFnAllowMutator = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AllowMutator" );

	AGameInfo_execAllowMutator_Parms AllowMutator_Parms;
	memcpy ( &AllowMutator_Parms.MutatorClassName, &MutatorClassName, 0xC );

	this->ProcessEvent ( pFnAllowMutator, &AllowMutator_Parms, NULL );

	return AllowMutator_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestart
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestart ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestart = NULL;

	if ( ! pFnPlayerCanRestart )
		pFnPlayerCanRestart = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PlayerCanRestart" );

	AGameInfo_execPlayerCanRestart_Parms PlayerCanRestart_Parms;
	PlayerCanRestart_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestart, &PlayerCanRestart_Parms, NULL );

	return PlayerCanRestart_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestartGame ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestartGame = NULL;

	if ( ! pFnPlayerCanRestartGame )
		pFnPlayerCanRestartGame = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PlayerCanRestartGame" );

	AGameInfo_execPlayerCanRestartGame_Parms PlayerCanRestartGame_Parms;
	PlayerCanRestartGame_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestartGame, &PlayerCanRestartGame_Parms, NULL );

	return PlayerCanRestartGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.KillBots
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AGameInfo::KillBots ( )
{
	static UFunction* pFnKillBots = NULL;

	if ( ! pFnKillBots )
		pFnKillBots = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.KillBots" );

	AGameInfo_execKillBots_Parms KillBots_Parms;

	this->ProcessEvent ( pFnKillBots, &KillBots_Parms, NULL );
};

// Function Engine.GameInfo.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.DriverLeftVehicle" );

	AGameInfo_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.GameInfo.CanLeaveVehicle
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AGameInfo::eventCanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CanLeaveVehicle" );

	AGameInfo_eventCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.GameInfo.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.DriverEnteredVehicle" );

	AGameInfo_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.GameInfo.ParseMessageString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class AController*             Who                            ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::ParseMessageString ( class AController* Who, struct FString Message )
{
	static UFunction* pFnParseMessageString = NULL;

	if ( ! pFnParseMessageString )
		pFnParseMessageString = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ParseMessageString" );

	AGameInfo_execParseMessageString_Parms ParseMessageString_Parms;
	ParseMessageString_Parms.Who = Who;
	memcpy ( &ParseMessageString_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnParseMessageString, &ParseMessageString_Parms, NULL );

	return ParseMessageString_Parms.ReturnValue;
};

// Function Engine.GameInfo.ModifyScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::ModifyScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnModifyScoreKill = NULL;

	if ( ! pFnModifyScoreKill )
		pFnModifyScoreKill = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ModifyScoreKill" );

	AGameInfo_execModifyScoreKill_Parms ModifyScoreKill_Parms;
	ModifyScoreKill_Parms.Killer = Killer;
	ModifyScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyScoreKill, &ModifyScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.ScoreKill
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::eventScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ScoreKill" );

	AGameInfo_eventScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.CheckScore
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool AGameInfo::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CheckScore" );

	AGameInfo_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function Engine.GameInfo.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ScoreObjective" );

	AGameInfo_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.GameInfo.AddObjectiveScore
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnAddObjectiveScore = NULL;

	if ( ! pFnAddObjectiveScore )
		pFnAddObjectiveScore = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AddObjectiveScore" );

	AGameInfo_execAddObjectiveScore_Parms AddObjectiveScore_Parms;
	AddObjectiveScore_Parms.Scorer = Scorer;
	AddObjectiveScore_Parms.Score = Score;

	this->ProcessEvent ( pFnAddObjectiveScore, &AddObjectiveScore_Parms, NULL );
};

// Function Engine.GameInfo.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float AGameInfo::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RatePlayerStart" );

	AGameInfo_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChoosePlayerStart
// [0x00020002] 
// Parameters infos:
// class APlayerStart*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )

class APlayerStart* AGameInfo::ChoosePlayerStart ( class AController* Player, unsigned char InTeam )
{
	static UFunction* pFnChoosePlayerStart = NULL;

	if ( ! pFnChoosePlayerStart )
		pFnChoosePlayerStart = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ChoosePlayerStart" );

	AGameInfo_execChoosePlayerStart_Parms ChoosePlayerStart_Parms;
	ChoosePlayerStart_Parms.Player = Player;
	ChoosePlayerStart_Parms.InTeam = InTeam;

	this->ProcessEvent ( pFnChoosePlayerStart, &ChoosePlayerStart_Parms, NULL );

	return ChoosePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerStart
// [0x00020002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* AGameInfo::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.FindPlayerStart" );

	AGameInfo_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )

bool AGameInfo::ShouldSpawnAtStartSpot ( class AController* Player )
{
	static UFunction* pFnShouldSpawnAtStartSpot = NULL;

	if ( ! pFnShouldSpawnAtStartSpot )
		pFnShouldSpawnAtStartSpot = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ShouldSpawnAtStartSpot" );

	AGameInfo_execShouldSpawnAtStartSpot_Parms ShouldSpawnAtStartSpot_Parms;
	ShouldSpawnAtStartSpot_Parms.Player = Player;

	this->ProcessEvent ( pFnShouldSpawnAtStartSpot, &ShouldSpawnAtStartSpot_Parms, NULL );

	return ShouldSpawnAtStartSpot_Parms.ReturnValue;
};

// Function Engine.GameInfo.EndLogging
// [0x00020000] 
// Parameters infos:
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::EndLogging ( struct FString Reason )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.EndLogging" );

	AGameInfo_execEndLogging_Parms EndLogging_Parms;
	memcpy ( &EndLogging_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );
};

// Function Engine.GameInfo.EndGame
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.EndGame" );

	AGameInfo_execEndGame_Parms EndGame_Parms;
	EndGame_Parms.Winner = Winner;
	memcpy ( &EndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlinePlayerScores
// [0x00020002] 
// Parameters infos:

void AGameInfo::WriteOnlinePlayerScores ( )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.WriteOnlinePlayerScores" );

	AGameInfo_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlineStats
// [0x00020000] 
// Parameters infos:

void AGameInfo::WriteOnlineStats ( )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.WriteOnlineStats" );

	AGameInfo_execWriteOnlineStats_Parms WriteOnlineStats_Parms;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );
};

// Function Engine.GameInfo.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CheckEndGame" );

	AGameInfo_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckModifiedEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckModifiedEndGame = NULL;

	if ( ! pFnCheckModifiedEndGame )
		pFnCheckModifiedEndGame = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CheckModifiedEndGame" );

	AGameInfo_execCheckModifiedEndGame_Parms CheckModifiedEndGame_Parms;
	CheckModifiedEndGame_Parms.Winner = Winner;
	memcpy ( &CheckModifiedEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckModifiedEndGame, &CheckModifiedEndGame_Parms, NULL );

	return CheckModifiedEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.BroadcastLocalizedTeam
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeam = NULL;

	if ( ! pFnBroadcastLocalizedTeam )
		pFnBroadcastLocalizedTeam = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.BroadcastLocalizedTeam" );

	AGameInfo_eventBroadcastLocalizedTeam_Parms BroadcastLocalizedTeam_Parms;
	BroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeam_Parms.Sender = Sender;
	BroadcastLocalizedTeam_Parms.Message = Message;
	BroadcastLocalizedTeam_Parms.Switch = Switch;
	BroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeam, &BroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastLocalized
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.BroadcastLocalized" );

	AGameInfo_eventBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastTeam
// [0x00020002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.BroadcastTeam" );

	AGameInfo_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.GameInfo.Broadcast
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Broadcast" );

	AGameInfo_eventBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0xC );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.GameInfo.RestartGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::RestartGame ( )
{
	static UFunction* pFnRestartGame = NULL;

	if ( ! pFnRestartGame )
		pFnRestartGame = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RestartGame" );

	AGameInfo_execRestartGame_Parms RestartGame_Parms;

	this->ProcessEvent ( pFnRestartGame, &RestartGame_Parms, NULL );
};

// Function Engine.GameInfo.GetTravelType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::GetTravelType ( )
{
	static UFunction* pFnGetTravelType = NULL;

	if ( ! pFnGetTravelType )
		pFnGetTravelType = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetTravelType" );

	AGameInfo_execGetTravelType_Parms GetTravelType_Parms;

	this->ProcessEvent ( pFnGetTravelType, &GetTravelType_Parms, NULL );

	return GetTravelType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextAutomatedTestingMap
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::GetNextAutomatedTestingMap ( )
{
	static UFunction* pFnGetNextAutomatedTestingMap = NULL;

	if ( ! pFnGetNextAutomatedTestingMap )
		pFnGetNextAutomatedTestingMap = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetNextAutomatedTestingMap" );

	AGameInfo_execGetNextAutomatedTestingMap_Parms GetNextAutomatedTestingMap_Parms;

	this->ProcessEvent ( pFnGetNextAutomatedTestingMap, &GetNextAutomatedTestingMap_Parms, NULL );

	return GetNextAutomatedTestingMap_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextMap
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::GetNextMap ( )
{
	static UFunction* pFnGetNextMap = NULL;

	if ( ! pFnGetNextMap )
		pFnGetNextMap = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetNextMap" );

	AGameInfo_execGetNextMap_Parms GetNextMap_Parms;

	this->ProcessEvent ( pFnGetNextMap, &GetNextMap_Parms, NULL );

	return GetNextMap_Parms.ReturnValue;
};

// Function Engine.GameInfo.SendPlayer
// [0x00020002] 
// Parameters infos:
// class APlayerController*       aPlayer                        ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::SendPlayer ( class APlayerController* aPlayer, struct FString URL )
{
	static UFunction* pFnSendPlayer = NULL;

	if ( ! pFnSendPlayer )
		pFnSendPlayer = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.SendPlayer" );

	AGameInfo_execSendPlayer_Parms SendPlayer_Parms;
	SendPlayer_Parms.aPlayer = aPlayer;
	memcpy ( &SendPlayer_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSendPlayer, &SendPlayer_Parms, NULL );
};

// Function Engine.GameInfo.PickTeam
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Current                        ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

unsigned char AGameInfo::PickTeam ( unsigned char Current, class AController* C )
{
	static UFunction* pFnPickTeam = NULL;

	if ( ! pFnPickTeam )
		pFnPickTeam = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PickTeam" );

	AGameInfo_execPickTeam_Parms PickTeam_Parms;
	PickTeam_Parms.Current = Current;
	PickTeam_Parms.C = C;

	this->ProcessEvent ( pFnPickTeam, &PickTeam_Parms, NULL );

	return PickTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )
// int                            N                              ( CPF_Parm )
// unsigned long                  bNewTeam                       ( CPF_Parm )

bool AGameInfo::ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ChangeTeam" );

	AGameInfo_execChangeTeam_Parms ChangeTeam_Parms;
	ChangeTeam_Parms.Other = Other;
	ChangeTeam_Parms.N = N;
	ChangeTeam_Parms.bNewTeam = bNewTeam;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );

	return ChangeTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeName
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  bNameChange                    ( CPF_Parm )

void AGameInfo::ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange )
{
	static UFunction* pFnChangeName = NULL;

	if ( ! pFnChangeName )
		pFnChangeName = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ChangeName" );

	AGameInfo_execChangeName_Parms ChangeName_Parms;
	ChangeName_Parms.Other = Other;
	memcpy ( &ChangeName_Parms.S, &S, 0xC );
	ChangeName_Parms.bNameChange = bNameChange;

	this->ProcessEvent ( pFnChangeName, &ChangeName_Parms, NULL );
};

// Function Engine.GameInfo.DiscardInventory
// [0x00020000] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::DiscardInventory ( class APawn* Other, class AController* Killer )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.DiscardInventory" );

	AGameInfo_execDiscardInventory_Parms DiscardInventory_Parms;
	DiscardInventory_Parms.Other = Other;
	DiscardInventory_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.GameInfo.ShouldRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APickupFactory*          Other                          ( CPF_Parm )

bool AGameInfo::ShouldRespawn ( class APickupFactory* Other )
{
	static UFunction* pFnShouldRespawn = NULL;

	if ( ! pFnShouldRespawn )
		pFnShouldRespawn = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ShouldRespawn" );

	AGameInfo_execShouldRespawn_Parms ShouldRespawn_Parms;
	ShouldRespawn_Parms.Other = Other;

	this->ProcessEvent ( pFnShouldRespawn, &ShouldRespawn_Parms, NULL );

	return ShouldRespawn_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AGameInfo::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CheckRelevance" );

	AGameInfo_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.GameInfo.ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AGameInfo::ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ReduceDamage" );

	AGameInfo_execReduceDamage_Parms ReduceDamage_Parms;
	ReduceDamage_Parms.injured = injured;
	ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	ReduceDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &ReduceDamage_Parms.Momentum, 0xC );
};

// Function Engine.GameInfo.CanSpectate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       Viewer                         ( CPF_Parm )
// class APlayerReplicationInfo*  ViewTarget                     ( CPF_Parm )

bool AGameInfo::CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CanSpectate" );

	AGameInfo_execCanSpectate_Parms CanSpectate_Parms;
	CanSpectate_Parms.Viewer = Viewer;
	CanSpectate_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );

	return CanSpectate_Parms.ReturnValue;
};

// Function Engine.GameInfo.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.KickBan" );

	AGameInfo_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.GameInfo.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Kick" );

	AGameInfo_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.GameInfo.ParseKillMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 KillerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 VictimName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 DeathMessage                   ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage )
{
	static UFunction* pFnParseKillMessage = NULL;

	if ( ! pFnParseKillMessage )
		pFnParseKillMessage = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ParseKillMessage" );

	AGameInfo_execParseKillMessage_Parms ParseKillMessage_Parms;
	memcpy ( &ParseKillMessage_Parms.KillerName, &KillerName, 0xC );
	memcpy ( &ParseKillMessage_Parms.VictimName, &VictimName, 0xC );
	memcpy ( &ParseKillMessage_Parms.DeathMessage, &DeathMessage, 0xC );

	this->ProcessEvent ( pFnParseKillMessage, &ParseKillMessage_Parms, NULL );

	return ParseKillMessage_Parms.ReturnValue;
};

// Function Engine.GameInfo.BroadcastDeathMessage
// [0x00020000] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType )
{
	static UFunction* pFnBroadcastDeathMessage = NULL;

	if ( ! pFnBroadcastDeathMessage )
		pFnBroadcastDeathMessage = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.BroadcastDeathMessage" );

	AGameInfo_execBroadcastDeathMessage_Parms BroadcastDeathMessage_Parms;
	BroadcastDeathMessage_Parms.Killer = Killer;
	BroadcastDeathMessage_Parms.Other = Other;
	BroadcastDeathMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnBroadcastDeathMessage, &BroadcastDeathMessage_Parms, NULL );
};

// Function Engine.GameInfo.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AGameInfo::PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PreventDeath" );

	AGameInfo_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.KilledPawn = KilledPawn;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.GameInfo.Killed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            nWeaponType                    ( CPF_Parm )

void AGameInfo::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, int nWeaponType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Killed" );

	AGameInfo_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;
	Killed_Parms.nWeaponType = nWeaponType;

	pFnKilled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );

	pFnKilled->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.NotifyKilled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )

void AGameInfo::eventNotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.NotifyKilled" );

	AGameInfo_eventNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.GameInfo.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::SetPlayerDefaults ( class APawn* PlayerPawn )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.SetPlayerDefaults" );

	AGameInfo_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;
	SetPlayerDefaults_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function Engine.GameInfo.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerController*       Sender                         ( CPF_Parm )

void AGameInfo::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Mutate" );

	AGameInfo_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.GameInfo.AddDefaultInventory
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::eventAddDefaultInventory ( class APawn* P )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AddDefaultInventory" );

	AGameInfo_eventAddDefaultInventory_Parms AddDefaultInventory_Parms;
	AddDefaultInventory_Parms.P = P;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.GameInfo.AcceptInventory
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::eventAcceptInventory ( class APawn* PlayerPawn )
{
	static UFunction* pFnAcceptInventory = NULL;

	if ( ! pFnAcceptInventory )
		pFnAcceptInventory = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AcceptInventory" );

	AGameInfo_eventAcceptInventory_Parms AcceptInventory_Parms;
	AcceptInventory_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnAcceptInventory, &AcceptInventory_Parms, NULL );
};

// Function Engine.GameInfo.Logout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AGameInfo::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Logout" );

	AGameInfo_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function Engine.GameInfo.PreExit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreExit ( )
{
	static UFunction* pFnPreExit = NULL;

	if ( ! pFnPreExit )
		pFnPreExit = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PreExit" );

	AGameInfo_eventPreExit_Parms PreExit_Parms;

	this->ProcessEvent ( pFnPreExit, &PreExit_Parms, NULL );
};

// Function Engine.GameInfo.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void AGameInfo::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PostLogin" );

	AGameInfo_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Engine.GameInfo.ReplicateStreamingStatus
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::ReplicateStreamingStatus ( class APlayerController* PC )
{
	static UFunction* pFnReplicateStreamingStatus = NULL;

	if ( ! pFnReplicateStreamingStatus )
		pFnReplicateStreamingStatus = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ReplicateStreamingStatus" );

	AGameInfo_execReplicateStreamingStatus_Parms ReplicateStreamingStatus_Parms;
	ReplicateStreamingStatus_Parms.PC = PC;

	this->ProcessEvent ( pFnReplicateStreamingStatus, &ReplicateStreamingStatus_Parms, NULL );
};

// Function Engine.GameInfo.GetDefaultPlayerClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

class UClass* AGameInfo::GetDefaultPlayerClass ( class AController* C )
{
	static UFunction* pFnGetDefaultPlayerClass = NULL;

	if ( ! pFnGetDefaultPlayerClass )
		pFnGetDefaultPlayerClass = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetDefaultPlayerClass" );

	AGameInfo_execGetDefaultPlayerClass_Parms GetDefaultPlayerClass_Parms;
	GetDefaultPlayerClass_Parms.C = C;

	this->ProcessEvent ( pFnGetDefaultPlayerClass, &GetDefaultPlayerClass_Parms, NULL );

	return GetDefaultPlayerClass_Parms.ReturnValue;
};

// Function Engine.GameInfo.SpawnDefaultPawnFor
// [0x00820002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* AGameInfo::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.SpawnDefaultPawnFor" );

	AGameInfo_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function Engine.GameInfo.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AGameInfo::RestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RestartPlayer" );

	AGameInfo_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Engine.GameInfo.StartBots
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartBots ( )
{
	static UFunction* pFnStartBots = NULL;

	if ( ! pFnStartBots )
		pFnStartBots = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.StartBots" );

	AGameInfo_execStartBots_Parms StartBots_Parms;

	this->ProcessEvent ( pFnStartBots, &StartBots_Parms, NULL );
};

// Function Engine.GameInfo.StartHumans
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartHumans ( )
{
	static UFunction* pFnStartHumans = NULL;

	if ( ! pFnStartHumans )
		pFnStartHumans = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.StartHumans" );

	AGameInfo_execStartHumans_Parms StartHumans_Parms;

	this->ProcessEvent ( pFnStartHumans, &StartHumans_Parms, NULL );
};

// Function Engine.GameInfo.OnStartOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.OnStartOnlineGameComplete" );

	AGameInfo_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.GameInfo.StartOnlineGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartOnlineGame ( )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.StartOnlineGame" );

	AGameInfo_execStartOnlineGame_Parms StartOnlineGame_Parms;

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );
};

// Function Engine.GameInfo.StartMatch
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.StartMatch" );

	AGameInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameInfo.Login
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* AGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Login" );

	AGameInfo_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function Engine.GameInfo.AtCapacity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bSpectator                     ( CPF_Parm )

bool AGameInfo::AtCapacity ( unsigned long bSpectator )
{
	static UFunction* pFnAtCapacity = NULL;

	if ( ! pFnAtCapacity )
		pFnAtCapacity = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AtCapacity" );

	AGameInfo_execAtCapacity_Parms AtCapacity_Parms;
	AtCapacity_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnAtCapacity, &AtCapacity_Parms, NULL );

	return AtCapacity_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PreLogin" );

	AGameInfo_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &PreLogin_Parms.ErrorMessage, 0xC );
};

// Function Engine.GameInfo.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RequiresPassword" );

	AGameInfo_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessClientTravel
// [0x00420002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FGuid                   NextMapGuid                    ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_Parm )
// unsigned long                  bAbsolute                      ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* AGameInfo::ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL )
{
	static UFunction* pFnProcessClientTravel = NULL;

	if ( ! pFnProcessClientTravel )
		pFnProcessClientTravel = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ProcessClientTravel" );

	AGameInfo_execProcessClientTravel_Parms ProcessClientTravel_Parms;
	memcpy ( &ProcessClientTravel_Parms.NextMapGuid, &NextMapGuid, 0x10 );
	ProcessClientTravel_Parms.bSeamless = bSeamless;
	ProcessClientTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessClientTravel, &ProcessClientTravel_Parms, NULL );

	if ( URL )
		memcpy ( URL, &ProcessClientTravel_Parms.URL, 0xC );

	return ProcessClientTravel_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessServerTravel
// [0x00820002] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::ProcessServerTravel ( struct FString URL, unsigned long bAbsolute )
{
	static UFunction* pFnProcessServerTravel = NULL;

	if ( ! pFnProcessServerTravel )
		pFnProcessServerTravel = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ProcessServerTravel" );

	AGameInfo_execProcessServerTravel_Parms ProcessServerTravel_Parms;
	memcpy ( &ProcessServerTravel_Parms.URL, &URL, 0xC );
	ProcessServerTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessServerTravel, &ProcessServerTravel_Parms, NULL );
};

// Function Engine.GameInfo.GetBeaconText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::eventGetBeaconText ( )
{
	static UFunction* pFnGetBeaconText = NULL;

	if ( ! pFnGetBeaconText )
		pFnGetBeaconText = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetBeaconText" );

	AGameInfo_eventGetBeaconText_Parms GetBeaconText_Parms;

	this->ProcessEvent ( pFnGetBeaconText, &GetBeaconText_Parms, NULL );

	return GetBeaconText_Parms.ReturnValue;
};

// Function Engine.GameInfo.RemoveMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                MutatorToRemove                ( CPF_Parm )

void AGameInfo::RemoveMutator ( class AMutator* MutatorToRemove )
{
	static UFunction* pFnRemoveMutator = NULL;

	if ( ! pFnRemoveMutator )
		pFnRemoveMutator = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.RemoveMutator" );

	AGameInfo_execRemoveMutator_Parms RemoveMutator_Parms;
	RemoveMutator_Parms.MutatorToRemove = MutatorToRemove;

	this->ProcessEvent ( pFnRemoveMutator, &RemoveMutator_Parms, NULL );
};

// Function Engine.GameInfo.AddGameRules
// [0x00020002] 
// Parameters infos:
// class UClass*                  GRClass                        ( CPF_Parm )

void AGameInfo::AddGameRules ( class UClass* GRClass )
{
	static UFunction* pFnAddGameRules = NULL;

	if ( ! pFnAddGameRules )
		pFnAddGameRules = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AddGameRules" );

	AGameInfo_execAddGameRules_Parms AddGameRules_Parms;
	AddGameRules_Parms.GRClass = GRClass;

	this->ProcessEvent ( pFnAddGameRules, &AddGameRules_Parms, NULL );
};

// Function Engine.GameInfo.AddMutator
// [0x00020002] 
// Parameters infos:
// struct FString                 mutname                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUserAdded                     ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::AddMutator ( struct FString mutname, unsigned long bUserAdded )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.AddMutator" );

	AGameInfo_execAddMutator_Parms AddMutator_Parms;
	memcpy ( &AddMutator_Parms.mutname, &mutname, 0xC );
	AddMutator_Parms.bUserAdded = bUserAdded;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.GameInfo.ParseAutomatedTestingOptions
// [0x00020002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::ParseAutomatedTestingOptions ( struct FString Options )
{
	static UFunction* pFnParseAutomatedTestingOptions = NULL;

	if ( ! pFnParseAutomatedTestingOptions )
		pFnParseAutomatedTestingOptions = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ParseAutomatedTestingOptions" );

	AGameInfo_execParseAutomatedTestingOptions_Parms ParseAutomatedTestingOptions_Parms;
	memcpy ( &ParseAutomatedTestingOptions_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnParseAutomatedTestingOptions, &ParseAutomatedTestingOptions_Parms, NULL );
};

// Function Engine.GameInfo.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.InitGame" );

	AGameInfo_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function Engine.GameInfo.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

class UClass* AGameInfo::eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.SetGameType" );

	AGameInfo_eventSetGameType_Parms SetGameType_Parms;
	memcpy ( &SetGameType_Parms.MapName, &MapName, 0xC );
	memcpy ( &SetGameType_Parms.Options, &Options, 0xC );
	memcpy ( &SetGameType_Parms.Portal, &Portal, 0xC );

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );

	return SetGameType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetIntOption
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParseString                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            CurrentValue                   ( CPF_Parm )

int AGameInfo::GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue )
{
	static UFunction* pFnGetIntOption = NULL;

	if ( ! pFnGetIntOption )
		pFnGetIntOption = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetIntOption" );

	AGameInfo_execGetIntOption_Parms GetIntOption_Parms;
	memcpy ( &GetIntOption_Parms.Options, &Options, 0xC );
	memcpy ( &GetIntOption_Parms.ParseString, &ParseString, 0xC );
	GetIntOption_Parms.CurrentValue = CurrentValue;

	this->ProcessEvent ( pFnGetIntOption, &GetIntOption_Parms, NULL );

	return GetIntOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.HasOption
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InKey                          ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::HasOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnHasOption = NULL;

	if ( ! pFnHasOption )
		pFnHasOption = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.HasOption" );

	AGameInfo_execHasOption_Parms HasOption_Parms;
	memcpy ( &HasOption_Parms.Options, &Options, 0xC );
	memcpy ( &HasOption_Parms.InKey, &InKey, 0xC );

	this->ProcessEvent ( pFnHasOption, &HasOption_Parms, NULL );

	return HasOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.ParseOption
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InKey                          ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::ParseOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnParseOption = NULL;

	if ( ! pFnParseOption )
		pFnParseOption = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ParseOption" );

	AGameInfo_execParseOption_Parms ParseOption_Parms;
	memcpy ( &ParseOption_Parms.Options, &Options, 0xC );
	memcpy ( &ParseOption_Parms.InKey, &InKey, 0xC );

	this->ProcessEvent ( pFnParseOption, &ParseOption_Parms, NULL );

	return ParseOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetKeyValue
// [0x00422002] 
// Parameters infos:
// struct FString                 Pair                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Key                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value )
{
	static UFunction* pFnGetKeyValue = NULL;

	if ( ! pFnGetKeyValue )
		pFnGetKeyValue = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetKeyValue" );

	AGameInfo_execGetKeyValue_Parms GetKeyValue_Parms;
	memcpy ( &GetKeyValue_Parms.Pair, &Pair, 0xC );

	this->ProcessEvent ( pFnGetKeyValue, &GetKeyValue_Parms, NULL );

	if ( Key )
		memcpy ( Key, &GetKeyValue_Parms.Key, 0xC );

	if ( Value )
		memcpy ( Value, &GetKeyValue_Parms.Value, 0xC );
};

// Function Engine.GameInfo.GrabOption
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Result                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AGameInfo::GrabOption ( struct FString* Options, struct FString* Result )
{
	static UFunction* pFnGrabOption = NULL;

	if ( ! pFnGrabOption )
		pFnGrabOption = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GrabOption" );

	AGameInfo_execGrabOption_Parms GrabOption_Parms;

	this->ProcessEvent ( pFnGrabOption, &GrabOption_Parms, NULL );

	if ( Options )
		memcpy ( Options, &GrabOption_Parms.Options, 0xC );

	if ( Result )
		memcpy ( Result, &GrabOption_Parms.Result, 0xC );

	return GrabOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.SetGameSpeed
// [0x00020002] 
// Parameters infos:
// float                          T                              ( CPF_Parm )

void AGameInfo::SetGameSpeed ( float T )
{
	static UFunction* pFnSetGameSpeed = NULL;

	if ( ! pFnSetGameSpeed )
		pFnSetGameSpeed = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.SetGameSpeed" );

	AGameInfo_execSetGameSpeed_Parms SetGameSpeed_Parms;
	SetGameSpeed_Parms.T = T;

	this->ProcessEvent ( pFnSetGameSpeed, &SetGameSpeed_Parms, NULL );
};

// Function Engine.GameInfo.DebugPause
// [0x00020002] 
// Parameters infos:

void AGameInfo::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.DebugPause" );

	AGameInfo_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.GameInfo.ClearPause
// [0x00020002] 
// Parameters infos:

void AGameInfo::ClearPause ( )
{
	static UFunction* pFnClearPause = NULL;

	if ( ! pFnClearPause )
		pFnClearPause = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ClearPause" );

	AGameInfo_execClearPause_Parms ClearPause_Parms;

	this->ProcessEvent ( pFnClearPause, &ClearPause_Parms, NULL );
};

// Function Engine.GameInfo.SetPause
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.SetPause" );

	AGameInfo_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.PC = PC;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0xC );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.GameInfo.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.CanUnpause" );

	AGameInfo_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetServerPort
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetServerPort ( )
{
	static UFunction* pFnGetServerPort = NULL;

	if ( ! pFnGetServerPort )
		pFnGetServerPort = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetServerPort" );

	AGameInfo_execGetServerPort_Parms GetServerPort_Parms;

	this->ProcessEvent ( pFnGetServerPort, &GetServerPort_Parms, NULL );

	return GetServerPort_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNumPlayers
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetNumPlayers" );

	AGameInfo_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );

	return GetNumPlayers_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNetworkNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::GetNetworkNumber ( )
{
	static UFunction* pFnGetNetworkNumber = NULL;

	if ( ! pFnGetNetworkNumber )
		pFnGetNetworkNumber = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetNetworkNumber" );

	AGameInfo_execGetNetworkNumber_Parms GetNetworkNumber_Parms;

	pFnGetNetworkNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNetworkNumber, &GetNetworkNumber_Parms, NULL );

	pFnGetNetworkNumber->FunctionFlags |= 0x400;

	return GetNetworkNumber_Parms.ReturnValue;
};

// Function Engine.GameInfo.InitGameReplicationInfo
// [0x00020002] 
// Parameters infos:

void AGameInfo::InitGameReplicationInfo ( )
{
	static UFunction* pFnInitGameReplicationInfo = NULL;

	if ( ! pFnInitGameReplicationInfo )
		pFnInitGameReplicationInfo = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.InitGameReplicationInfo" );

	AGameInfo_execInitGameReplicationInfo_Parms InitGameReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitGameReplicationInfo, &InitGameReplicationInfo_Parms, NULL );
};

// Function Engine.GameInfo.KickIdler
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::eventKickIdler ( class APlayerController* PC )
{
	static UFunction* pFnKickIdler = NULL;

	if ( ! pFnKickIdler )
		pFnKickIdler = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.KickIdler" );

	AGameInfo_eventKickIdler_Parms KickIdler_Parms;
	KickIdler_Parms.PC = PC;

	this->ProcessEvent ( pFnKickIdler, &KickIdler_Parms, NULL );
};

// Function Engine.GameInfo.GameEnding
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventGameEnding ( )
{
	static UFunction* pFnGameEnding = NULL;

	if ( ! pFnGameEnding )
		pFnGameEnding = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GameEnding" );

	AGameInfo_eventGameEnding_Parms GameEnding_Parms;

	this->ProcessEvent ( pFnGameEnding, &GameEnding_Parms, NULL );
};

// Function Engine.GameInfo.NotifyNavigationChanged
// [0x00020000] 
// Parameters infos:
// class ANavigationPoint*        N                              ( CPF_Parm )

void AGameInfo::NotifyNavigationChanged ( class ANavigationPoint* N )
{
	static UFunction* pFnNotifyNavigationChanged = NULL;

	if ( ! pFnNotifyNavigationChanged )
		pFnNotifyNavigationChanged = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.NotifyNavigationChanged" );

	AGameInfo_execNotifyNavigationChanged_Parms NotifyNavigationChanged_Parms;
	NotifyNavigationChanged_Parms.N = N;

	this->ProcessEvent ( pFnNotifyNavigationChanged, &NotifyNavigationChanged_Parms, NULL );
};

// Function Engine.GameInfo.DoNavFearCostFallOff
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AGameInfo::DoNavFearCostFallOff ( )
{
	static UFunction* pFnDoNavFearCostFallOff = NULL;

	if ( ! pFnDoNavFearCostFallOff )
		pFnDoNavFearCostFallOff = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.DoNavFearCostFallOff" );

	AGameInfo_execDoNavFearCostFallOff_Parms DoNavFearCostFallOff_Parms;

	pFnDoNavFearCostFallOff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoNavFearCostFallOff, &DoNavFearCostFallOff_Parms, NULL );

	pFnDoNavFearCostFallOff->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Timer" );

	AGameInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.GameInfo.ResetLevel
// [0x00020002] 
// Parameters infos:

void AGameInfo::ResetLevel ( )
{
	static UFunction* pFnResetLevel = NULL;

	if ( ! pFnResetLevel )
		pFnResetLevel = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ResetLevel" );

	AGameInfo_execResetLevel_Parms ResetLevel_Parms;

	this->ProcessEvent ( pFnResetLevel, &ResetLevel_Parms, NULL );
};

// Function Engine.GameInfo.ShouldReset
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToReset                   ( CPF_Parm )

bool AGameInfo::ShouldReset ( class AActor* ActorToReset )
{
	static UFunction* pFnShouldReset = NULL;

	if ( ! pFnShouldReset )
		pFnShouldReset = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.ShouldReset" );

	AGameInfo_execShouldReset_Parms ShouldReset_Parms;
	ShouldReset_Parms.ActorToReset = ActorToReset;

	this->ProcessEvent ( pFnShouldReset, &ShouldReset_Parms, NULL );

	return ShouldReset_Parms.ReturnValue;
};

// Function Engine.GameInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.Reset" );

	AGameInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PostBeginPlay" );

	AGameInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.GameInfo.GetCoverReplicator
// [0x00020002] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* AGameInfo::GetCoverReplicator ( )
{
	static UFunction* pFnGetCoverReplicator = NULL;

	if ( ! pFnGetCoverReplicator )
		pFnGetCoverReplicator = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.GetCoverReplicator" );

	AGameInfo_execGetCoverReplicator_Parms GetCoverReplicator_Parms;

	this->ProcessEvent ( pFnGetCoverReplicator, &GetCoverReplicator_Parms, NULL );

	return GetCoverReplicator_Parms.ReturnValue;
};

// Function Engine.GameInfo.UseLowGore
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWorldInfo*              WI                             ( CPF_Parm )

bool AGameInfo::UseLowGore ( class AWorldInfo* WI )
{
	static UFunction* pFnUseLowGore = NULL;

	if ( ! pFnUseLowGore )
		pFnUseLowGore = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.UseLowGore" );

	AGameInfo_execUseLowGore_Parms UseLowGore_Parms;
	UseLowGore_Parms.WI = WI;

	this->ProcessEvent ( pFnUseLowGore, &UseLowGore_Parms, NULL );

	return UseLowGore_Parms.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerByID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PlayerID                       ( CPF_Parm )

struct FString AGameInfo::FindPlayerByID ( int PlayerID )
{
	static UFunction* pFnFindPlayerByID = NULL;

	if ( ! pFnFindPlayerByID )
		pFnFindPlayerByID = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.FindPlayerByID" );

	AGameInfo_execFindPlayerByID_Parms FindPlayerByID_Parms;
	FindPlayerByID_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnFindPlayerByID, &FindPlayerByID_Parms, NULL );

	return FindPlayerByID_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.GameInfo.PreBeginPlay" );

	AGameInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ShouldShowGore
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::ShouldShowGore ( )
{
	static UFunction* pFnShouldShowGore = NULL;

	if ( ! pFnShouldShowGore )
		pFnShouldShowGore = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.ShouldShowGore" );

	AGameReplicationInfo_execShouldShowGore_Parms ShouldShowGore_Parms;

	this->ProcessEvent ( pFnShouldShowGore, &ShouldShowGore_Parms, NULL );

	return ShouldShowGore_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.PreventPause
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::PreventPause ( )
{
	static UFunction* pFnPreventPause = NULL;

	if ( ! pFnPreventPause )
		pFnPreventPause = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.PreventPause" );

	AGameReplicationInfo_execPreventPause_Parms PreventPause_Parms;

	this->ProcessEvent ( pFnPreventPause, &PreventPause_Parms, NULL );

	return PreventPause_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsCoopMultiplayerGame ( )
{
	static UFunction* pFnIsCoopMultiplayerGame = NULL;

	if ( ! pFnIsCoopMultiplayerGame )
		pFnIsCoopMultiplayerGame = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.IsCoopMultiplayerGame" );

	AGameReplicationInfo_execIsCoopMultiplayerGame_Parms IsCoopMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsCoopMultiplayerGame, &IsCoopMultiplayerGame_Parms, NULL );

	return IsCoopMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsMultiplayerGame ( )
{
	static UFunction* pFnIsMultiplayerGame = NULL;

	if ( ! pFnIsMultiplayerGame )
		pFnIsMultiplayerGame = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.IsMultiplayerGame" );

	AGameReplicationInfo_execIsMultiplayerGame_Parms IsMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsMultiplayerGame, &IsMultiplayerGame_Parms, NULL );

	return IsMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.OnlineSession_EndSession
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bForced                        ( CPF_Parm )

void AGameReplicationInfo::eventOnlineSession_EndSession ( unsigned long bForced )
{
	static UFunction* pFnOnlineSession_EndSession = NULL;

	if ( ! pFnOnlineSession_EndSession )
		pFnOnlineSession_EndSession = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.OnlineSession_EndSession" );

	AGameReplicationInfo_eventOnlineSession_EndSession_Parms OnlineSession_EndSession_Parms;
	OnlineSession_EndSession_Parms.bForced = bForced;

	this->ProcessEvent ( pFnOnlineSession_EndSession, &OnlineSession_EndSession_Parms, NULL );
};

// Function Engine.GameReplicationInfo.OnlineSession_EndMatch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventOnlineSession_EndMatch ( )
{
	static UFunction* pFnOnlineSession_EndMatch = NULL;

	if ( ! pFnOnlineSession_EndMatch )
		pFnOnlineSession_EndMatch = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.OnlineSession_EndMatch" );

	AGameReplicationInfo_eventOnlineSession_EndMatch_Parms OnlineSession_EndMatch_Parms;

	this->ProcessEvent ( pFnOnlineSession_EndMatch, &OnlineSession_EndMatch_Parms, NULL );
};

// Function Engine.GameReplicationInfo.OnlineSession_StartMatch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventOnlineSession_StartMatch ( )
{
	static UFunction* pFnOnlineSession_StartMatch = NULL;

	if ( ! pFnOnlineSession_StartMatch )
		pFnOnlineSession_StartMatch = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.OnlineSession_StartMatch" );

	AGameReplicationInfo_eventOnlineSession_StartMatch_Parms OnlineSession_StartMatch_Parms;

	this->ProcessEvent ( pFnOnlineSession_StartMatch, &OnlineSession_StartMatch_Parms, NULL );
};

// Function Engine.GameReplicationInfo.GetOnlineGameInterface
// [0x00020102] 
// Parameters infos:
// class UOnlineGameInterface*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameInterface* AGameReplicationInfo::GetOnlineGameInterface ( )
{
	static UFunction* pFnGetOnlineGameInterface = NULL;

	if ( ! pFnGetOnlineGameInterface )
		pFnGetOnlineGameInterface = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.GetOnlineGameInterface" );

	AGameReplicationInfo_execGetOnlineGameInterface_Parms GetOnlineGameInterface_Parms;

	this->ProcessEvent ( pFnGetOnlineGameInterface, &GetOnlineGameInterface_Parms, NULL );

	return GetOnlineGameInterface_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.EndGame
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::EndGame ( )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.EndGame" );

	AGameReplicationInfo_execEndGame_Parms EndGame_Parms;

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameReplicationInfo.StartMatch
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.StartMatch" );

	AGameReplicationInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameReplicationInfo.CleanupGameDataStore
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::CleanupGameDataStore ( )
{
	static UFunction* pFnCleanupGameDataStore = NULL;

	if ( ! pFnCleanupGameDataStore )
		pFnCleanupGameDataStore = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.CleanupGameDataStore" );

	AGameReplicationInfo_execCleanupGameDataStore_Parms CleanupGameDataStore_Parms;

	this->ProcessEvent ( pFnCleanupGameDataStore, &CleanupGameDataStore_Parms, NULL );
};

// Function Engine.GameReplicationInfo.InitializeGameDataStore
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::InitializeGameDataStore ( )
{
	static UFunction* pFnInitializeGameDataStore = NULL;

	if ( ! pFnInitializeGameDataStore )
		pFnInitializeGameDataStore = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.InitializeGameDataStore" );

	AGameReplicationInfo_execInitializeGameDataStore_Parms InitializeGameDataStore_Parms;

	this->ProcessEvent ( pFnInitializeGameDataStore, &InitializeGameDataStore_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AGameReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.ReplicatedEvent" );

	AGameReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.GameReplicationInfo.SortPRIArray
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::SortPRIArray ( )
{
	static UFunction* pFnSortPRIArray = NULL;

	if ( ! pFnSortPRIArray )
		pFnSortPRIArray = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.SortPRIArray" );

	AGameReplicationInfo_execSortPRIArray_Parms SortPRIArray_Parms;

	this->ProcessEvent ( pFnSortPRIArray, &SortPRIArray_Parms, NULL );
};

// Function Engine.GameReplicationInfo.InOrder
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  P1                             ( CPF_Parm )
// class APlayerReplicationInfo*  P2                             ( CPF_Parm )

bool AGameReplicationInfo::InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 )
{
	static UFunction* pFnInOrder = NULL;

	if ( ! pFnInOrder )
		pFnInOrder = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.InOrder" );

	AGameReplicationInfo_execInOrder_Parms InOrder_Parms;
	InOrder_Parms.P1 = P1;
	InOrder_Parms.P2 = P2;

	this->ProcessEvent ( pFnInOrder, &InOrder_Parms, NULL );

	return InOrder_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.GetPRIArray
// [0x00420102] 
// Parameters infos:
// TArray< class APlayerReplicationInfo* > pris                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameReplicationInfo::GetPRIArray ( TArray< class APlayerReplicationInfo* >* pris )
{
	static UFunction* pFnGetPRIArray = NULL;

	if ( ! pFnGetPRIArray )
		pFnGetPRIArray = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.GetPRIArray" );

	AGameReplicationInfo_execGetPRIArray_Parms GetPRIArray_Parms;

	this->ProcessEvent ( pFnGetPRIArray, &GetPRIArray_Parms, NULL );

	if ( pris )
		memcpy ( pris, &GetPRIArray_Parms.pris, 0xC );
};

// Function Engine.GameReplicationInfo.SetTeam
// [0x00020102] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ATeamInfo*               TI                             ( CPF_Parm )

void AGameReplicationInfo::SetTeam ( int Index, class ATeamInfo* TI )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.SetTeam" );

	AGameReplicationInfo_execSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.Index = Index;
	SetTeam_Parms.TI = TI;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.GameReplicationInfo.RemovePRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::RemovePRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnRemovePRI = NULL;

	if ( ! pFnRemovePRI )
		pFnRemovePRI = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.RemovePRI" );

	AGameReplicationInfo_execRemovePRI_Parms RemovePRI_Parms;
	RemovePRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRemovePRI, &RemovePRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.AddPRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::AddPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPRI = NULL;

	if ( ! pFnAddPRI )
		pFnAddPRI = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.AddPRI" );

	AGameReplicationInfo_execAddPRI_Parms AddPRI_Parms;
	AddPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPRI, &AddPRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.FindPlayerByID
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerID                       ( CPF_Parm )

class APlayerReplicationInfo* AGameReplicationInfo::FindPlayerByID ( int PlayerID )
{
	static UFunction* pFnFindPlayerByID = NULL;

	if ( ! pFnFindPlayerByID )
		pFnFindPlayerByID = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.FindPlayerByID" );

	AGameReplicationInfo_execFindPlayerByID_Parms FindPlayerByID_Parms;
	FindPlayerByID_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnFindPlayerByID, &FindPlayerByID_Parms, NULL );

	return FindPlayerByID_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.OnSameTeam
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )
// class AActor*                  B                              ( CPF_Parm )

bool AGameReplicationInfo::OnSameTeam ( class AActor* A, class AActor* B )
{
	static UFunction* pFnOnSameTeam = NULL;

	if ( ! pFnOnSameTeam )
		pFnOnSameTeam = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.OnSameTeam" );

	AGameReplicationInfo_execOnSameTeam_Parms OnSameTeam_Parms;
	OnSameTeam_Parms.A = A;
	OnSameTeam_Parms.B = B;

	pFnOnSameTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSameTeam, &OnSameTeam_Parms, NULL );

	pFnOnSameTeam->FunctionFlags |= 0x400;

	return OnSameTeam_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.Timer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.Timer" );

	AGameReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.GameReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.Destroyed" );

	AGameReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.GameReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.Reset" );

	AGameReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameReplicationInfo.FinishedBlockedLoads
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventFinishedBlockedLoads ( )
{
	static UFunction* pFnFinishedBlockedLoads = NULL;

	if ( ! pFnFinishedBlockedLoads )
		pFnFinishedBlockedLoads = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.FinishedBlockedLoads" );

	AGameReplicationInfo_eventFinishedBlockedLoads_Parms FinishedBlockedLoads_Parms;

	this->ProcessEvent ( pFnFinishedBlockedLoads, &FinishedBlockedLoads_Parms, NULL );
};

// Function Engine.GameReplicationInfo.UpdateServerFrameTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AGameReplicationInfo::UpdateServerFrameTime ( )
{
	static UFunction* pFnUpdateServerFrameTime = NULL;

	if ( ! pFnUpdateServerFrameTime )
		pFnUpdateServerFrameTime = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.UpdateServerFrameTime" );

	AGameReplicationInfo_execUpdateServerFrameTime_Parms UpdateServerFrameTime_Parms;

	pFnUpdateServerFrameTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateServerFrameTime, &UpdateServerFrameTime_Parms, NULL );

	pFnUpdateServerFrameTime->FunctionFlags |= 0x400;
};

// Function Engine.GameReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.PostBeginPlay" );

	AGameReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.GameReplicationInfo.DoGfxMemStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AGameReplicationInfo::DoGfxMemStats ( )
{
	static UFunction* pFnDoGfxMemStats = NULL;

	if ( ! pFnDoGfxMemStats )
		pFnDoGfxMemStats = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.DoGfxMemStats" );

	AGameReplicationInfo_execDoGfxMemStats_Parms DoGfxMemStats_Parms;

	pFnDoGfxMemStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoGfxMemStats, &DoGfxMemStats_Parms, NULL );

	pFnDoGfxMemStats->FunctionFlags |= 0x400;
};

// Function Engine.GameReplicationInfo.DoSysMemStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AGameReplicationInfo::DoSysMemStats ( )
{
	static UFunction* pFnDoSysMemStats = NULL;

	if ( ! pFnDoSysMemStats )
		pFnDoSysMemStats = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.DoSysMemStats" );

	AGameReplicationInfo_execDoSysMemStats_Parms DoSysMemStats_Parms;

	pFnDoSysMemStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSysMemStats, &DoSysMemStats_Parms, NULL );

	pFnDoSysMemStats->FunctionFlags |= 0x400;
};

// Function Engine.GameReplicationInfo.GetGfxMemStatsInterval
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AGameReplicationInfo::GetGfxMemStatsInterval ( )
{
	static UFunction* pFnGetGfxMemStatsInterval = NULL;

	if ( ! pFnGetGfxMemStatsInterval )
		pFnGetGfxMemStatsInterval = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.GetGfxMemStatsInterval" );

	AGameReplicationInfo_execGetGfxMemStatsInterval_Parms GetGfxMemStatsInterval_Parms;

	pFnGetGfxMemStatsInterval->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGfxMemStatsInterval, &GetGfxMemStatsInterval_Parms, NULL );

	pFnGetGfxMemStatsInterval->FunctionFlags |= 0x400;

	return GetGfxMemStatsInterval_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.GetSysMemStatsInterval
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AGameReplicationInfo::GetSysMemStatsInterval ( )
{
	static UFunction* pFnGetSysMemStatsInterval = NULL;

	if ( ! pFnGetSysMemStatsInterval )
		pFnGetSysMemStatsInterval = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.GetSysMemStatsInterval" );

	AGameReplicationInfo_execGetSysMemStatsInterval_Parms GetSysMemStatsInterval_Parms;

	pFnGetSysMemStatsInterval->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSysMemStatsInterval, &GetSysMemStatsInterval_Parms, NULL );

	pFnGetSysMemStatsInterval->FunctionFlags |= 0x400;

	return GetSysMemStatsInterval_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.AllocateEngineDebugManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AGameReplicationInfo::AllocateEngineDebugManager ( )
{
	static UFunction* pFnAllocateEngineDebugManager = NULL;

	if ( ! pFnAllocateEngineDebugManager )
		pFnAllocateEngineDebugManager = UObject::FindObject< UFunction > ( "Function Engine.GameReplicationInfo.AllocateEngineDebugManager" );

	AGameReplicationInfo_execAllocateEngineDebugManager_Parms AllocateEngineDebugManager_Parms;

	pFnAllocateEngineDebugManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllocateEngineDebugManager, &AllocateEngineDebugManager_Parms, NULL );

	pFnAllocateEngineDebugManager->FunctionFlags |= 0x400;
};

// Function Engine.HeightFogComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UHeightFogComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function Engine.HeightFogComponent.SetEnabled" );

	UHeightFogComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.HUD.OnLostFocusPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  Enable                         ( CPF_Parm )

void AHUD::eventOnLostFocusPause ( unsigned long Enable )
{
	static UFunction* pFnOnLostFocusPause = NULL;

	if ( ! pFnOnLostFocusPause )
		pFnOnLostFocusPause = UObject::FindObject< UFunction > ( "Function Engine.HUD.OnLostFocusPause" );

	AHUD_eventOnLostFocusPause_Parms OnLostFocusPause_Parms;
	OnLostFocusPause_Parms.Enable = Enable;

	this->ProcessEvent ( pFnOnLostFocusPause, &OnLostFocusPause_Parms, NULL );
};

// Function Engine.HUD.PlayerOwnerDied
// [0x00020000] 
// Parameters infos:

void AHUD::PlayerOwnerDied ( )
{
	static UFunction* pFnPlayerOwnerDied = NULL;

	if ( ! pFnPlayerOwnerDied )
		pFnPlayerOwnerDied = UObject::FindObject< UFunction > ( "Function Engine.HUD.PlayerOwnerDied" );

	AHUD_execPlayerOwnerDied_Parms PlayerOwnerDied_Parms;

	this->ProcessEvent ( pFnPlayerOwnerDied, &PlayerOwnerDied_Parms, NULL );
};

// Function Engine.HUD.GetRYGColorRamp
// [0x00822002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Pct                            ( CPF_Parm )

struct FColor AHUD::GetRYGColorRamp ( float Pct )
{
	static UFunction* pFnGetRYGColorRamp = NULL;

	if ( ! pFnGetRYGColorRamp )
		pFnGetRYGColorRamp = UObject::FindObject< UFunction > ( "Function Engine.HUD.GetRYGColorRamp" );

	AHUD_execGetRYGColorRamp_Parms GetRYGColorRamp_Parms;
	GetRYGColorRamp_Parms.Pct = Pct;

	this->ProcessEvent ( pFnGetRYGColorRamp, &GetRYGColorRamp_Parms, NULL );

	return GetRYGColorRamp_Parms.ReturnValue;
};

// Function Engine.HUD.GetFontSizeIndex
// [0x00022002] 
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FontSize                       ( CPF_Parm )

class UFont* AHUD::GetFontSizeIndex ( int FontSize )
{
	static UFunction* pFnGetFontSizeIndex = NULL;

	if ( ! pFnGetFontSizeIndex )
		pFnGetFontSizeIndex = UObject::FindObject< UFunction > ( "Function Engine.HUD.GetFontSizeIndex" );

	AHUD_execGetFontSizeIndex_Parms GetFontSizeIndex_Parms;
	GetFontSizeIndex_Parms.FontSize = FontSize;

	this->ProcessEvent ( pFnGetFontSizeIndex, &GetFontSizeIndex_Parms, NULL );

	return GetFontSizeIndex_Parms.ReturnValue;
};

// Function Engine.HUD.DisplayLocalMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayLocalMessages ( )
{
	static UFunction* pFnDisplayLocalMessages = NULL;

	if ( ! pFnDisplayLocalMessages )
		pFnDisplayLocalMessages = UObject::FindObject< UFunction > ( "Function Engine.HUD.DisplayLocalMessages" );

	AHUD_execDisplayLocalMessages_Parms DisplayLocalMessages_Parms;

	this->ProcessEvent ( pFnDisplayLocalMessages, &DisplayLocalMessages_Parms, NULL );
};

// Function Engine.HUD.DrawMessageText
// [0x00020002] 
// Parameters infos:
// struct FHudLocalizedMessage    LocalMessage                   ( CPF_Parm | CPF_NeedCtorLink )
// float                          ScreenX                        ( CPF_Parm )
// float                          ScreenY                        ( CPF_Parm )

void AHUD::DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY )
{
	static UFunction* pFnDrawMessageText = NULL;

	if ( ! pFnDrawMessageText )
		pFnDrawMessageText = UObject::FindObject< UFunction > ( "Function Engine.HUD.DrawMessageText" );

	AHUD_execDrawMessageText_Parms DrawMessageText_Parms;
	memcpy ( &DrawMessageText_Parms.LocalMessage, &LocalMessage, 0x40 );
	DrawMessageText_Parms.ScreenX = ScreenX;
	DrawMessageText_Parms.ScreenY = ScreenY;

	this->ProcessEvent ( pFnDrawMessageText, &DrawMessageText_Parms, NULL );
};

// Function Engine.HUD.DrawMessage
// [0x00420002] 
// Parameters infos:
// int                            I                              ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )
// float                          DX                             ( CPF_Parm | CPF_OutParm )
// float                          DY                             ( CPF_Parm | CPF_OutParm )

void AHUD::DrawMessage ( int I, float PosY, float* DX, float* DY )
{
	static UFunction* pFnDrawMessage = NULL;

	if ( ! pFnDrawMessage )
		pFnDrawMessage = UObject::FindObject< UFunction > ( "Function Engine.HUD.DrawMessage" );

	AHUD_execDrawMessage_Parms DrawMessage_Parms;
	DrawMessage_Parms.I = I;
	DrawMessage_Parms.PosY = PosY;

	this->ProcessEvent ( pFnDrawMessage, &DrawMessage_Parms, NULL );

	if ( DX )
		*DX = DrawMessage_Parms.DX;

	if ( DY )
		*DY = DrawMessage_Parms.DY;
};

// Function Engine.HUD.GetScreenCoords
// [0x00420002] 
// Parameters infos:
// float                          PosY                           ( CPF_Parm )
// float                          ScreenX                        ( CPF_Parm | CPF_OutParm )
// float                          ScreenY                        ( CPF_Parm | CPF_OutParm )
// struct FHudLocalizedMessage    InMessage                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AHUD::GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage )
{
	static UFunction* pFnGetScreenCoords = NULL;

	if ( ! pFnGetScreenCoords )
		pFnGetScreenCoords = UObject::FindObject< UFunction > ( "Function Engine.HUD.GetScreenCoords" );

	AHUD_execGetScreenCoords_Parms GetScreenCoords_Parms;
	GetScreenCoords_Parms.PosY = PosY;

	this->ProcessEvent ( pFnGetScreenCoords, &GetScreenCoords_Parms, NULL );

	if ( ScreenX )
		*ScreenX = GetScreenCoords_Parms.ScreenX;

	if ( ScreenY )
		*ScreenY = GetScreenCoords_Parms.ScreenY;

	if ( InMessage )
		memcpy ( InMessage, &GetScreenCoords_Parms.InMessage, 0x40 );
};

// Function Engine.HUD.AddLocalizedMessage
// [0x00020002] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// int                            MessageCount                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject )
{
	static UFunction* pFnAddLocalizedMessage = NULL;

	if ( ! pFnAddLocalizedMessage )
		pFnAddLocalizedMessage = UObject::FindObject< UFunction > ( "Function Engine.HUD.AddLocalizedMessage" );

	AHUD_execAddLocalizedMessage_Parms AddLocalizedMessage_Parms;
	AddLocalizedMessage_Parms.Index = Index;
	AddLocalizedMessage_Parms.InMessageClass = InMessageClass;
	memcpy ( &AddLocalizedMessage_Parms.CriticalString, &CriticalString, 0xC );
	AddLocalizedMessage_Parms.Switch = Switch;
	AddLocalizedMessage_Parms.Position = Position;
	AddLocalizedMessage_Parms.Lifetime = Lifetime;
	AddLocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &AddLocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	AddLocalizedMessage_Parms.MessageCount = MessageCount;
	AddLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAddLocalizedMessage, &AddLocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.LocalizedMessage
// [0x00020002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject )
{
	static UFunction* pFnLocalizedMessage = NULL;

	if ( ! pFnLocalizedMessage )
		pFnLocalizedMessage = UObject::FindObject< UFunction > ( "Function Engine.HUD.LocalizedMessage" );

	AHUD_execLocalizedMessage_Parms LocalizedMessage_Parms;
	LocalizedMessage_Parms.InMessageClass = InMessageClass;
	LocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	memcpy ( &LocalizedMessage_Parms.CriticalString, &CriticalString, 0xC );
	LocalizedMessage_Parms.Switch = Switch;
	LocalizedMessage_Parms.Position = Position;
	LocalizedMessage_Parms.Lifetime = Lifetime;
	LocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &LocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	LocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnLocalizedMessage, &LocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.AddConsoleMessage
// [0x00020002] 
// Parameters infos:
// struct FString                 M                              ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime )
{
	static UFunction* pFnAddConsoleMessage = NULL;

	if ( ! pFnAddConsoleMessage )
		pFnAddConsoleMessage = UObject::FindObject< UFunction > ( "Function Engine.HUD.AddConsoleMessage" );

	AHUD_execAddConsoleMessage_Parms AddConsoleMessage_Parms;
	memcpy ( &AddConsoleMessage_Parms.M, &M, 0xC );
	AddConsoleMessage_Parms.InMessageClass = InMessageClass;
	AddConsoleMessage_Parms.PRI = PRI;
	AddConsoleMessage_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnAddConsoleMessage, &AddConsoleMessage_Parms, NULL );
};

// Function Engine.HUD.DisplayConsoleMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayConsoleMessages ( )
{
	static UFunction* pFnDisplayConsoleMessages = NULL;

	if ( ! pFnDisplayConsoleMessages )
		pFnDisplayConsoleMessages = UObject::FindObject< UFunction > ( "Function Engine.HUD.DisplayConsoleMessages" );

	AHUD_execDisplayConsoleMessages_Parms DisplayConsoleMessages_Parms;

	this->ProcessEvent ( pFnDisplayConsoleMessages, &DisplayConsoleMessages_Parms, NULL );
};

// Function Engine.HUD.Message
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   MsgType                        ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime )
{
	static UFunction* pFnMessage = NULL;

	if ( ! pFnMessage )
		pFnMessage = UObject::FindObject< UFunction > ( "Function Engine.HUD.Message" );

	AHUD_execMessage_Parms Message_Parms;
	Message_Parms.PRI = PRI;
	memcpy ( &Message_Parms.msg, &msg, 0xC );
	memcpy ( &Message_Parms.MsgType, &MsgType, 0x8 );
	Message_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnMessage, &Message_Parms, NULL );
};

// Function Engine.HUD.ClearMessage
// [0x00420002] 
// Parameters infos:
// struct FHudLocalizedMessage    M                              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AHUD::ClearMessage ( struct FHudLocalizedMessage* M )
{
	static UFunction* pFnClearMessage = NULL;

	if ( ! pFnClearMessage )
		pFnClearMessage = UObject::FindObject< UFunction > ( "Function Engine.HUD.ClearMessage" );

	AHUD_execClearMessage_Parms ClearMessage_Parms;

	this->ProcessEvent ( pFnClearMessage, &ClearMessage_Parms, NULL );

	if ( M )
		memcpy ( M, &ClearMessage_Parms.M, 0x40 );
};

// Function Engine.HUD.DisplayBadConnectionAlert
// [0x00020000] 
// Parameters infos:

void AHUD::DisplayBadConnectionAlert ( )
{
	static UFunction* pFnDisplayBadConnectionAlert = NULL;

	if ( ! pFnDisplayBadConnectionAlert )
		pFnDisplayBadConnectionAlert = UObject::FindObject< UFunction > ( "Function Engine.HUD.DisplayBadConnectionAlert" );

	AHUD_execDisplayBadConnectionAlert_Parms DisplayBadConnectionAlert_Parms;

	this->ProcessEvent ( pFnDisplayBadConnectionAlert, &DisplayBadConnectionAlert_Parms, NULL );
};

// Function Engine.HUD.DisplayProgressMessage
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayProgressMessage ( )
{
	static UFunction* pFnDisplayProgressMessage = NULL;

	if ( ! pFnDisplayProgressMessage )
		pFnDisplayProgressMessage = UObject::FindObject< UFunction > ( "Function Engine.HUD.DisplayProgressMessage" );

	AHUD_execDisplayProgressMessage_Parms DisplayProgressMessage_Parms;

	this->ProcessEvent ( pFnDisplayProgressMessage, &DisplayProgressMessage_Parms, NULL );
};

// Function Engine.HUD.DrawEngineHUD
// [0x00020002] 
// Parameters infos:

void AHUD::DrawEngineHUD ( )
{
	static UFunction* pFnDrawEngineHUD = NULL;

	if ( ! pFnDrawEngineHUD )
		pFnDrawEngineHUD = UObject::FindObject< UFunction > ( "Function Engine.HUD.DrawEngineHUD" );

	AHUD_execDrawEngineHUD_Parms DrawEngineHUD_Parms;

	this->ProcessEvent ( pFnDrawEngineHUD, &DrawEngineHUD_Parms, NULL );
};

// Function Engine.HUD.DrawDemoHUD
// [0x00020000] 
// Parameters infos:

void AHUD::DrawDemoHUD ( )
{
	static UFunction* pFnDrawDemoHUD = NULL;

	if ( ! pFnDrawDemoHUD )
		pFnDrawDemoHUD = UObject::FindObject< UFunction > ( "Function Engine.HUD.DrawDemoHUD" );

	AHUD_execDrawDemoHUD_Parms DrawDemoHUD_Parms;

	this->ProcessEvent ( pFnDrawDemoHUD, &DrawDemoHUD_Parms, NULL );
};

// Function Engine.HUD.DrawHUD
// [0x00020002] 
// Parameters infos:

void AHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function Engine.HUD.DrawHUD" );

	AHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.HUD.PostRenderScript
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostRenderScript ( )
{
	static UFunction* pFnPostRenderScript = NULL;

	if ( ! pFnPostRenderScript )
		pFnPostRenderScript = UObject::FindObject< UFunction > ( "Function Engine.HUD.PostRenderScript" );

	AHUD_eventPostRenderScript_Parms PostRenderScript_Parms;

	this->ProcessEvent ( pFnPostRenderScript, &PostRenderScript_Parms, NULL );
};

// Function Engine.HUD.PostRender
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AHUD::PostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function Engine.HUD.PostRender" );

	AHUD_execPostRender_Parms PostRender_Parms;

	pFnPostRender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );

	pFnPostRender->FunctionFlags |= 0x400;
};

// Function Engine.HUD.PreRender
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AHUD::PreRender ( )
{
	static UFunction* pFnPreRender = NULL;

	if ( ! pFnPreRender )
		pFnPreRender = UObject::FindObject< UFunction > ( "Function Engine.HUD.PreRender" );

	AHUD_execPreRender_Parms PreRender_Parms;

	pFnPreRender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPreRender, &PreRender_Parms, NULL );

	pFnPreRender->FunctionFlags |= 0x400;
};

// Function Engine.HUD.PreCalcValues
// [0x00020002] 
// Parameters infos:

void AHUD::PreCalcValues ( )
{
	static UFunction* pFnPreCalcValues = NULL;

	if ( ! pFnPreCalcValues )
		pFnPreCalcValues = UObject::FindObject< UFunction > ( "Function Engine.HUD.PreCalcValues" );

	AHUD_execPreCalcValues_Parms PreCalcValues_Parms;

	this->ProcessEvent ( pFnPreCalcValues, &PreCalcValues_Parms, NULL );
};

// Function Engine.HUD.DrawRoute
// [0x00820002] 
// Parameters infos:
// class APawn*                   Target                         ( CPF_Parm )

void AHUD::DrawRoute ( class APawn* Target )
{
	static UFunction* pFnDrawRoute = NULL;

	if ( ! pFnDrawRoute )
		pFnDrawRoute = UObject::FindObject< UFunction > ( "Function Engine.HUD.DrawRoute" );

	AHUD_execDrawRoute_Parms DrawRoute_Parms;
	DrawRoute_Parms.Target = Target;

	this->ProcessEvent ( pFnDrawRoute, &DrawRoute_Parms, NULL );
};

// Function Engine.HUD.FXStop
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void AHUD::FXStop ( class UClass* aClass )
{
	static UFunction* pFnFXStop = NULL;

	if ( ! pFnFXStop )
		pFnFXStop = UObject::FindObject< UFunction > ( "Function Engine.HUD.FXStop" );

	AHUD_execFXStop_Parms FXStop_Parms;
	FXStop_Parms.aClass = aClass;

	this->ProcessEvent ( pFnFXStop, &FXStop_Parms, NULL );
};

// Function Engine.HUD.FXPlay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )
// struct FString                 FXAnimPath                     ( CPF_Parm | CPF_NeedCtorLink )

void AHUD::FXPlay ( class UClass* aClass, struct FString FXAnimPath )
{
	static UFunction* pFnFXPlay = NULL;

	if ( ! pFnFXPlay )
		pFnFXPlay = UObject::FindObject< UFunction > ( "Function Engine.HUD.FXPlay" );

	AHUD_execFXPlay_Parms FXPlay_Parms;
	FXPlay_Parms.aClass = aClass;
	memcpy ( &FXPlay_Parms.FXAnimPath, &FXAnimPath, 0xC );

	this->ProcessEvent ( pFnFXPlay, &FXPlay_Parms, NULL );
};

// Function Engine.HUD.ShouldDisplayDebug
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DebugType                      ( CPF_Parm )

bool AHUD::ShouldDisplayDebug ( struct FName DebugType )
{
	static UFunction* pFnShouldDisplayDebug = NULL;

	if ( ! pFnShouldDisplayDebug )
		pFnShouldDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.HUD.ShouldDisplayDebug" );

	AHUD_execShouldDisplayDebug_Parms ShouldDisplayDebug_Parms;
	memcpy ( &ShouldDisplayDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShouldDisplayDebug, &ShouldDisplayDebug_Parms, NULL );

	return ShouldDisplayDebug_Parms.ReturnValue;
};

// Function Engine.HUD.ShowDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   DebugType                      ( CPF_OptionalParm | CPF_Parm )

void AHUD::ShowDebug ( struct FName DebugType )
{
	static UFunction* pFnShowDebug = NULL;

	if ( ! pFnShowDebug )
		pFnShowDebug = UObject::FindObject< UFunction > ( "Function Engine.HUD.ShowDebug" );

	AHUD_execShowDebug_Parms ShowDebug_Parms;
	memcpy ( &ShowDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShowDebug, &ShowDebug_Parms, NULL );
};

// Function Engine.HUD.SetShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bNewValue                      ( CPF_Parm )

void AHUD::SetShowScores ( unsigned long bNewValue )
{
	static UFunction* pFnSetShowScores = NULL;

	if ( ! pFnSetShowScores )
		pFnSetShowScores = UObject::FindObject< UFunction > ( "Function Engine.HUD.SetShowScores" );

	AHUD_execSetShowScores_Parms SetShowScores_Parms;
	SetShowScores_Parms.bNewValue = bNewValue;

	this->ProcessEvent ( pFnSetShowScores, &SetShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowScores ( )
{
	static UFunction* pFnShowScores = NULL;

	if ( ! pFnShowScores )
		pFnShowScores = UObject::FindObject< UFunction > ( "Function Engine.HUD.ShowScores" );

	AHUD_execShowScores_Parms ShowScores_Parms;

	this->ProcessEvent ( pFnShowScores, &ShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowHUD ( )
{
	static UFunction* pFnShowHUD = NULL;

	if ( ! pFnShowHUD )
		pFnShowHUD = UObject::FindObject< UFunction > ( "Function Engine.HUD.ShowHUD" );

	AHUD_execShowHUD_Parms ShowHUD_Parms;

	this->ProcessEvent ( pFnShowHUD, &ShowHUD_Parms, NULL );
};

// Function Engine.HUD.ToggleHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ToggleHUD ( )
{
	static UFunction* pFnToggleHUD = NULL;

	if ( ! pFnToggleHUD )
		pFnToggleHUD = UObject::FindObject< UFunction > ( "Function Engine.HUD.ToggleHUD" );

	AHUD_execToggleHUD_Parms ToggleHUD_Parms;

	this->ProcessEvent ( pFnToggleHUD, &ToggleHUD_Parms, NULL );
};

// Function Engine.HUD.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.HUD.Destroyed" );

	AHUD_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.HUD.SpawnScoreBoard
// [0x00020002] 
// Parameters infos:
// class UClass*                  ScoringType                    ( CPF_Parm )

void AHUD::SpawnScoreBoard ( class UClass* ScoringType )
{
	static UFunction* pFnSpawnScoreBoard = NULL;

	if ( ! pFnSpawnScoreBoard )
		pFnSpawnScoreBoard = UObject::FindObject< UFunction > ( "Function Engine.HUD.SpawnScoreBoard" );

	AHUD_execSpawnScoreBoard_Parms SpawnScoreBoard_Parms;
	SpawnScoreBoard_Parms.ScoringType = ScoringType;

	this->ProcessEvent ( pFnSpawnScoreBoard, &SpawnScoreBoard_Parms, NULL );
};

// Function Engine.HUD.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.HUD.PostBeginPlay" );

	AHUD_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.HUD.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            X1                             ( CPF_Parm )
// int                            Y1                             ( CPF_Parm )
// int                            X2                             ( CPF_Parm )
// int                            Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = UObject::FindObject< UFunction > ( "Function Engine.HUD.Draw2DLine" );

	AHUD_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.HUD.Draw3DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor )
{
	static UFunction* pFnDraw3DLine = NULL;

	if ( ! pFnDraw3DLine )
		pFnDraw3DLine = UObject::FindObject< UFunction > ( "Function Engine.HUD.Draw3DLine" );

	AHUD_execDraw3DLine_Parms Draw3DLine_Parms;
	memcpy ( &Draw3DLine_Parms.Start, &Start, 0xC );
	memcpy ( &Draw3DLine_Parms.End, &End, 0xC );
	memcpy ( &Draw3DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw3DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw3DLine, &Draw3DLine_Parms, NULL );

	pFnDraw3DLine->FunctionFlags |= 0x400;
};

// Function Engine.InternetInfo.GetBeaconText
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            I                              ( CPF_Parm )

struct FString AInternetInfo::GetBeaconText ( int I )
{
	static UFunction* pFnGetBeaconText = NULL;

	if ( ! pFnGetBeaconText )
		pFnGetBeaconText = UObject::FindObject< UFunction > ( "Function Engine.InternetInfo.GetBeaconText" );

	AInternetInfo_execGetBeaconText_Parms GetBeaconText_Parms;
	GetBeaconText_Parms.I = I;

	this->ProcessEvent ( pFnGetBeaconText, &GetBeaconText_Parms, NULL );

	return GetBeaconText_Parms.ReturnValue;
};

// Function Engine.InternetInfo.GetBeaconAddress
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            I                              ( CPF_Parm )

struct FString AInternetInfo::GetBeaconAddress ( int I )
{
	static UFunction* pFnGetBeaconAddress = NULL;

	if ( ! pFnGetBeaconAddress )
		pFnGetBeaconAddress = UObject::FindObject< UFunction > ( "Function Engine.InternetInfo.GetBeaconAddress" );

	AInternetInfo_execGetBeaconAddress_Parms GetBeaconAddress_Parms;
	GetBeaconAddress_Parms.I = I;

	this->ProcessEvent ( pFnGetBeaconAddress, &GetBeaconAddress_Parms, NULL );

	return GetBeaconAddress_Parms.ReturnValue;
};

// Function Engine.InterpActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AInterpActor::ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.ApplyCheckpointRecord" );

	AInterpActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.InterpActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AInterpActor::CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.CreateCheckpointRecord" );

	AInterpActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.InterpActor.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AInterpActor::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.ShouldSaveForCheckpoint" );

	AInterpActor_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.InterpActor.InterpolationChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.InterpolationChanged" );

	AInterpActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.InterpolationFinished" );

	AInterpActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.InterpolationStarted" );

	AInterpActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.InterpActor.PlayMovingSound
// [0x00020102] 
// Parameters infos:
// unsigned long                  bClosing                       ( CPF_Parm )

void AInterpActor::PlayMovingSound ( unsigned long bClosing )
{
	static UFunction* pFnPlayMovingSound = NULL;

	if ( ! pFnPlayMovingSound )
		pFnPlayMovingSound = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.PlayMovingSound" );

	AInterpActor_execPlayMovingSound_Parms PlayMovingSound_Parms;
	PlayMovingSound_Parms.bClosing = bClosing;

	this->ProcessEvent ( pFnPlayMovingSound, &PlayMovingSound_Parms, NULL );
};

// Function Engine.InterpActor.FinishedOpen
// [0x00020002] 
// Parameters infos:

void AInterpActor::FinishedOpen ( )
{
	static UFunction* pFnFinishedOpen = NULL;

	if ( ! pFnFinishedOpen )
		pFnFinishedOpen = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.FinishedOpen" );

	AInterpActor_execFinishedOpen_Parms FinishedOpen_Parms;

	this->ProcessEvent ( pFnFinishedOpen, &FinishedOpen_Parms, NULL );
};

// Function Engine.InterpActor.Restart
// [0x00020002] 
// Parameters infos:

void AInterpActor::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.Restart" );

	AInterpActor_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.InterpActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.Detach" );

	AInterpActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.InterpActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.Attach" );

	AInterpActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.InterpActor.RanInto
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.RanInto" );

	AInterpActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.InterpActor.EncroachingOn
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AInterpActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.EncroachingOn" );

	AInterpActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.InterpActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AInterpActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.InterpActor.PostBeginPlay" );

	AInterpActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Inventory.OwnerEvent
// [0x00020000] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void AInventory::OwnerEvent ( struct FName EventName )
{
	static UFunction* pFnOwnerEvent = NULL;

	if ( ! pFnOwnerEvent )
		pFnOwnerEvent = UObject::FindObject< UFunction > ( "Function Engine.Inventory.OwnerEvent" );

	AInventory_execOwnerEvent_Parms OwnerEvent_Parms;
	memcpy ( &OwnerEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnOwnerEvent, &OwnerEvent_Parms, NULL );
};

// Function Engine.Inventory.GetLocalString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AInventory::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = UObject::FindObject< UFunction > ( "Function Engine.Inventory.GetLocalString" );

	AInventory_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Inventory.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AInventory::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = UObject::FindObject< UFunction > ( "Function Engine.Inventory.DropFrom" );

	AInventory_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Inventory.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventory::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = UObject::FindObject< UFunction > ( "Function Engine.Inventory.DenyPickupQuery" );

	AInventory_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Inventory.ItemRemovedFromInvManager
// [0x00020000] 
// Parameters infos:

void AInventory::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = UObject::FindObject< UFunction > ( "Function Engine.Inventory.ItemRemovedFromInvManager" );

	AInventory_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Inventory.ClientGivenTo
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewOwner                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

void AInventory::ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = UObject::FindObject< UFunction > ( "Function Engine.Inventory.ClientGivenTo" );

	AInventory_execClientGivenTo_Parms ClientGivenTo_Parms;
	ClientGivenTo_Parms.NewOwner = NewOwner;
	ClientGivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function Engine.Inventory.GivenTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventory::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = UObject::FindObject< UFunction > ( "Function Engine.Inventory.GivenTo" );

	AInventory_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function Engine.Inventory.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = UObject::FindObject< UFunction > ( "Function Engine.Inventory.AnnouncePickup" );

	AInventory_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function Engine.Inventory.GiveTo
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::GiveTo ( class APawn* Other )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = UObject::FindObject< UFunction > ( "Function Engine.Inventory.GiveTo" );

	AInventory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.Other = Other;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.Inventory.DetourWeight
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float AInventory::DetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = UObject::FindObject< UFunction > ( "Function Engine.Inventory.DetourWeight" );

	AInventory_execDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.Inventory.BotDesireability
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  PickupHolder                   ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

float AInventory::BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C )
{
	static UFunction* pFnBotDesireability = NULL;

	if ( ! pFnBotDesireability )
		pFnBotDesireability = UObject::FindObject< UFunction > ( "Function Engine.Inventory.BotDesireability" );

	AInventory_execBotDesireability_Parms BotDesireability_Parms;
	BotDesireability_Parms.PickupHolder = PickupHolder;
	BotDesireability_Parms.P = P;
	BotDesireability_Parms.C = C;

	this->ProcessEvent ( pFnBotDesireability, &BotDesireability_Parms, NULL );

	return BotDesireability_Parms.ReturnValue;
};

// Function Engine.Inventory.Destroyed
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AInventory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.Inventory.Destroyed" );

	AInventory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Inventory.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AInventory::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function Engine.Inventory.GetHumanReadableName" );

	AInventory_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Inventory.ActiveRenderOverlays
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventory::ActiveRenderOverlays ( class AHUD* H )
{
	static UFunction* pFnActiveRenderOverlays = NULL;

	if ( ! pFnActiveRenderOverlays )
		pFnActiveRenderOverlays = UObject::FindObject< UFunction > ( "Function Engine.Inventory.ActiveRenderOverlays" );

	AInventory_execActiveRenderOverlays_Parms ActiveRenderOverlays_Parms;
	ActiveRenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnActiveRenderOverlays, &ActiveRenderOverlays_Parms, NULL );
};

// Function Engine.Inventory.RenderOverlays
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventory::RenderOverlays ( class AHUD* H )
{
	static UFunction* pFnRenderOverlays = NULL;

	if ( ! pFnRenderOverlays )
		pFnRenderOverlays = UObject::FindObject< UFunction > ( "Function Engine.Inventory.RenderOverlays" );

	AInventory_execRenderOverlays_Parms RenderOverlays_Parms;
	RenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnRenderOverlays, &RenderOverlays_Parms, NULL );
};

// Function Engine.InventoryManager.ClientSyncWeapon
// [0x010201C0] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void AInventoryManager::ClientSyncWeapon ( class AWeapon* NewWeapon )
{
	static UFunction* pFnClientSyncWeapon = NULL;

	if ( ! pFnClientSyncWeapon )
		pFnClientSyncWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.ClientSyncWeapon" );

	AInventoryManager_execClientSyncWeapon_Parms ClientSyncWeapon_Parms;
	ClientSyncWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnClientSyncWeapon, &ClientSyncWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.ClientWeaponSet
// [0x00020100] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.ClientWeaponSet" );

	AInventoryManager_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.NewWeapon = NewWeapon;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.InventoryManager.ChangedWeapon
// [0x00020100] 
// Parameters infos:

void AInventoryManager::ChangedWeapon ( )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.ChangedWeapon" );

	AInventoryManager_execChangedWeapon_Parms ChangedWeapon_Parms;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.CancelWeaponChange
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AInventoryManager::CancelWeaponChange ( )
{
	static UFunction* pFnCancelWeaponChange = NULL;

	if ( ! pFnCancelWeaponChange )
		pFnCancelWeaponChange = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.CancelWeaponChange" );

	AInventoryManager_execCancelWeaponChange_Parms CancelWeaponChange_Parms;

	this->ProcessEvent ( pFnCancelWeaponChange, &CancelWeaponChange_Parms, NULL );

	return CancelWeaponChange_Parms.ReturnValue;
};

// Function Engine.InventoryManager.ServerSetCurrentWeapon
// [0x002200C0] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnServerSetCurrentWeapon = NULL;

	if ( ! pFnServerSetCurrentWeapon )
		pFnServerSetCurrentWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.ServerSetCurrentWeapon" );

	AInventoryManager_execServerSetCurrentWeapon_Parms ServerSetCurrentWeapon_Parms;
	ServerSetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnServerSetCurrentWeapon, &ServerSetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SetPendingWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetPendingWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetPendingWeapon = NULL;

	if ( ! pFnSetPendingWeapon )
		pFnSetPendingWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.SetPendingWeapon" );

	AInventoryManager_execSetPendingWeapon_Parms SetPendingWeapon_Parms;
	SetPendingWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetPendingWeapon, &SetPendingWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SetCurrentWeapon
// [0x010201C0] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetCurrentWeapon = NULL;

	if ( ! pFnSetCurrentWeapon )
		pFnSetCurrentWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.SetCurrentWeapon" );

	AInventoryManager_execSetCurrentWeapon_Parms SetCurrentWeapon_Parms;
	SetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetCurrentWeapon, &SetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.NextWeapon
// [0x00020100] 
// Parameters infos:

void AInventoryManager::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.NextWeapon" );

	AInventoryManager_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.PrevWeapon
// [0x00020100] 
// Parameters infos:

void AInventoryManager::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.PrevWeapon" );

	AInventoryManager_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SwitchToBestWeapon
// [0x00020100] 
// Parameters infos:
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::SwitchToBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.SwitchToBestWeapon" );

	AInventoryManager_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;
	SwitchToBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.GetBestWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

class AWeapon* AInventoryManager::GetBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnGetBestWeapon = NULL;

	if ( ! pFnGetBestWeapon )
		pFnGetBestWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.GetBestWeapon" );

	AInventoryManager_execGetBestWeapon_Parms GetBestWeapon_Parms;
	GetBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnGetBestWeapon, &GetBestWeapon_Parms, NULL );

	return GetBestWeapon_Parms.ReturnValue;
};

// Function Engine.InventoryManager.GetWeaponRatingFor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )

float AInventoryManager::GetWeaponRatingFor ( class AWeapon* W )
{
	static UFunction* pFnGetWeaponRatingFor = NULL;

	if ( ! pFnGetWeaponRatingFor )
		pFnGetWeaponRatingFor = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.GetWeaponRatingFor" );

	AInventoryManager_execGetWeaponRatingFor_Parms GetWeaponRatingFor_Parms;
	GetWeaponRatingFor_Parms.W = W;

	this->ProcessEvent ( pFnGetWeaponRatingFor, &GetWeaponRatingFor_Parms, NULL );

	return GetWeaponRatingFor_Parms.ReturnValue;
};

// Function Engine.InventoryManager.IsActiveWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 ThisWeapon                     ( CPF_Parm )

bool AInventoryManager::IsActiveWeapon ( class AWeapon* ThisWeapon )
{
	static UFunction* pFnIsActiveWeapon = NULL;

	if ( ! pFnIsActiveWeapon )
		pFnIsActiveWeapon = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.IsActiveWeapon" );

	AInventoryManager_execIsActiveWeapon_Parms IsActiveWeapon_Parms;
	IsActiveWeapon_Parms.ThisWeapon = ThisWeapon;

	this->ProcessEvent ( pFnIsActiveWeapon, &IsActiveWeapon_Parms, NULL );

	return IsActiveWeapon_Parms.ReturnValue;
};

// Function Engine.InventoryManager.StopFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AInventoryManager::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.StopFire" );

	AInventoryManager_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.InventoryManager.StartFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AInventoryManager::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.StartFire" );

	AInventoryManager_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.InventoryManager.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventoryManager::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.DrawHUD" );

	AInventoryManager_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.InventoryManager.OwnerEvent
// [0x00020102] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void AInventoryManager::OwnerEvent ( struct FName EventName )
{
	static UFunction* pFnOwnerEvent = NULL;

	if ( ! pFnOwnerEvent )
		pFnOwnerEvent = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.OwnerEvent" );

	AInventoryManager_execOwnerEvent_Parms OwnerEvent_Parms;
	memcpy ( &OwnerEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnOwnerEvent, &OwnerEvent_Parms, NULL );
};

// Function Engine.InventoryManager.ModifyDamage
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

int AInventoryManager::ModifyDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.ModifyDamage" );

	AInventoryManager_execModifyDamage_Parms ModifyDamage_Parms;
	ModifyDamage_Parms.Damage = Damage;
	ModifyDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ModifyDamage_Parms.Momentum, &Momentum, 0xC );
	ModifyDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	return ModifyDamage_Parms.ReturnValue;
};

// Function Engine.InventoryManager.DiscardInventory
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDiscardInventory ( )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.DiscardInventory" );

	AInventoryManager_eventDiscardInventory_Parms DiscardInventory_Parms;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.InventoryManager.RemoveFromInventory
// [0x00020100] 
// Parameters infos:
// class AInventory*              ItemToRemove                   ( CPF_Parm )

void AInventoryManager::RemoveFromInventory ( class AInventory* ItemToRemove )
{
	static UFunction* pFnRemoveFromInventory = NULL;

	if ( ! pFnRemoveFromInventory )
		pFnRemoveFromInventory = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.RemoveFromInventory" );

	AInventoryManager_execRemoveFromInventory_Parms RemoveFromInventory_Parms;
	RemoveFromInventory_Parms.ItemToRemove = ItemToRemove;

	this->ProcessEvent ( pFnRemoveFromInventory, &RemoveFromInventory_Parms, NULL );
};

// Function Engine.InventoryManager.AddInventory
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NewItem                        ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

bool AInventoryManager::AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.AddInventory" );

	AInventoryManager_execAddInventory_Parms AddInventory_Parms;
	AddInventory_Parms.NewItem = NewItem;
	AddInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );

	return AddInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.CreateInventory
// [0x00020102] 
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInventoryItemClass          ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.CreateInventory" );

	AInventoryManager_execCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInventoryItemClass = NewInventoryItemClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.FindInventoryType
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnFindInventoryType = NULL;

	if ( ! pFnFindInventoryType )
		pFnFindInventoryType = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.FindInventoryType" );

	AInventoryManager_eventFindInventoryType_Parms FindInventoryType_Parms;
	FindInventoryType_Parms.DesiredClass = DesiredClass;
	FindInventoryType_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnFindInventoryType, &FindInventoryType_Parms, NULL );

	return FindInventoryType_Parms.ReturnValue;
};

// Function Engine.InventoryManager.HandlePickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventoryManager::HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnHandlePickupQuery = NULL;

	if ( ! pFnHandlePickupQuery )
		pFnHandlePickupQuery = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.HandlePickupQuery" );

	AInventoryManager_execHandlePickupQuery_Parms HandlePickupQuery_Parms;
	HandlePickupQuery_Parms.ItemClass = ItemClass;
	HandlePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnHandlePickupQuery, &HandlePickupQuery_Parms, NULL );

	return HandlePickupQuery_Parms.ReturnValue;
};

// Function Engine.InventoryManager.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.Destroyed" );

	AInventoryManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.InventoryManager.SetupFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AInventoryManager::SetupFor ( class APawn* P )
{
	static UFunction* pFnSetupFor = NULL;

	if ( ! pFnSetupFor )
		pFnSetupFor = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.SetupFor" );

	AInventoryManager_execSetupFor_Parms SetupFor_Parms;
	SetupFor_Parms.P = P;

	this->ProcessEvent ( pFnSetupFor, &SetupFor_Parms, NULL );
};

// Function Engine.InventoryManager.DumpWeaponStats
// [0x00020300] ( FUNC_Exec )
// Parameters infos:

void AInventoryManager::DumpWeaponStats ( )
{
	static UFunction* pFnDumpWeaponStats = NULL;

	if ( ! pFnDumpWeaponStats )
		pFnDumpWeaponStats = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.DumpWeaponStats" );

	AInventoryManager_execDumpWeaponStats_Parms DumpWeaponStats_Parms;

	this->ProcessEvent ( pFnDumpWeaponStats, &DumpWeaponStats_Parms, NULL );
};

// Function Engine.InventoryManager.InventoryActors
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AInventory*              Inv                            ( CPF_Parm | CPF_OutParm )

void AInventoryManager::InventoryActors ( class UClass* BaseClass, class AInventory** Inv )
{
	static UFunction* pFnInventoryActors = NULL;

	if ( ! pFnInventoryActors )
		pFnInventoryActors = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.InventoryActors" );

	AInventoryManager_execInventoryActors_Parms InventoryActors_Parms;
	InventoryActors_Parms.BaseClass = BaseClass;

	pFnInventoryActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInventoryActors, &InventoryActors_Parms, NULL );

	pFnInventoryActors->FunctionFlags |= 0x400;

	if ( Inv )
		*Inv = InventoryActors_Parms.Inv;
};

// Function Engine.InventoryManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.InventoryManager.PostBeginPlay" );

	AInventoryManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LevelStreamingVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALevelStreamingVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.LevelStreamingVolume.OnToggle" );

	ALevelStreamingVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.LiftCenter.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = UObject::FindObject< UFunction > ( "Function Engine.LiftCenter.ProceedWithMove" );

	ALiftCenter_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = UObject::FindObject< UFunction > ( "Function Engine.LiftCenter.SuggestMovePreparation" );

	ALiftCenter_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ALiftCenter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = UObject::FindObject< UFunction > ( "Function Engine.LiftCenter.SpecialHandling" );

	ALiftCenter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.LiftCenter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ALiftCenter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.LiftCenter.PostBeginPlay" );

	ALiftCenter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LiftExit.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = UObject::FindObject< UFunction > ( "Function Engine.LiftExit.SuggestMovePreparation" );

	ALiftExit_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftExit.WaitForLift
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ALiftExit::WaitForLift ( class APawn* Other )
{
	static UFunction* pFnWaitForLift = NULL;

	if ( ! pFnWaitForLift )
		pFnWaitForLift = UObject::FindObject< UFunction > ( "Function Engine.LiftExit.WaitForLift" );

	ALiftExit_execWaitForLift_Parms WaitForLift_Parms;
	WaitForLift_Parms.Other = Other;

	this->ProcessEvent ( pFnWaitForLift, &WaitForLift_Parms, NULL );
};

// Function Engine.LiftExit.CanBeReachedFromLiftBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::CanBeReachedFromLiftBy ( class APawn* Other )
{
	static UFunction* pFnCanBeReachedFromLiftBy = NULL;

	if ( ! pFnCanBeReachedFromLiftBy )
		pFnCanBeReachedFromLiftBy = UObject::FindObject< UFunction > ( "Function Engine.LiftExit.CanBeReachedFromLiftBy" );

	ALiftExit_execCanBeReachedFromLiftBy_Parms CanBeReachedFromLiftBy_Parms;
	CanBeReachedFromLiftBy_Parms.Other = Other;

	this->ProcessEvent ( pFnCanBeReachedFromLiftBy, &CanBeReachedFromLiftBy_Parms, NULL );

	return CanBeReachedFromLiftBy_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ULocalPlayer::TouchPlayerPostProcessChain ( )
{
	static UFunction* pFnTouchPlayerPostProcessChain = NULL;

	if ( ! pFnTouchPlayerPostProcessChain )
		pFnTouchPlayerPostProcessChain = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.TouchPlayerPostProcessChain" );

	ULocalPlayer_execTouchPlayerPostProcessChain_Parms TouchPlayerPostProcessChain_Parms;

	pFnTouchPlayerPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchPlayerPostProcessChain, &TouchPlayerPostProcessChain_Parms, NULL );

	pFnTouchPlayerPostProcessChain->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.GetPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPostProcessChain*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

class UPostProcessChain* ULocalPlayer::GetPostProcessChain ( int InIndex )
{
	static UFunction* pFnGetPostProcessChain = NULL;

	if ( ! pFnGetPostProcessChain )
		pFnGetPostProcessChain = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.GetPostProcessChain" );

	ULocalPlayer_execGetPostProcessChain_Parms GetPostProcessChain_Parms;
	GetPostProcessChain_Parms.InIndex = InIndex;

	pFnGetPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPostProcessChain, &GetPostProcessChain_Parms, NULL );

	pFnGetPostProcessChain->FunctionFlags |= 0x400;

	return GetPostProcessChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ULocalPlayer::RemoveAllPostProcessingChains ( )
{
	static UFunction* pFnRemoveAllPostProcessingChains = NULL;

	if ( ! pFnRemoveAllPostProcessingChains )
		pFnRemoveAllPostProcessingChains = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.RemoveAllPostProcessingChains" );

	ULocalPlayer_execRemoveAllPostProcessingChains_Parms RemoveAllPostProcessingChains_Parms;

	pFnRemoveAllPostProcessingChains->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllPostProcessingChains, &RemoveAllPostProcessingChains_Parms, NULL );

	pFnRemoveAllPostProcessingChains->FunctionFlags |= 0x400;

	return RemoveAllPostProcessingChains_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemovePostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

bool ULocalPlayer::RemovePostProcessingChain ( int InIndex )
{
	static UFunction* pFnRemovePostProcessingChain = NULL;

	if ( ! pFnRemovePostProcessingChain )
		pFnRemovePostProcessingChain = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.RemovePostProcessingChain" );

	ULocalPlayer_execRemovePostProcessingChain_Parms RemovePostProcessingChain_Parms;
	RemovePostProcessingChain_Parms.InIndex = InIndex;

	pFnRemovePostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePostProcessingChain, &RemovePostProcessingChain_Parms, NULL );

	pFnRemovePostProcessingChain->FunctionFlags |= 0x400;

	return RemovePostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.InsertPostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPostProcessChain*       InChain                        ( CPF_Parm )
// int                            InIndex                        ( CPF_Parm )
// unsigned long                  bInClone                       ( CPF_Parm )

bool ULocalPlayer::InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone )
{
	static UFunction* pFnInsertPostProcessingChain = NULL;

	if ( ! pFnInsertPostProcessingChain )
		pFnInsertPostProcessingChain = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.InsertPostProcessingChain" );

	ULocalPlayer_execInsertPostProcessingChain_Parms InsertPostProcessingChain_Parms;
	InsertPostProcessingChain_Parms.InChain = InChain;
	InsertPostProcessingChain_Parms.InIndex = InIndex;
	InsertPostProcessingChain_Parms.bInClone = bInClone;

	pFnInsertPostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertPostProcessingChain, &InsertPostProcessingChain_Parms, NULL );

	pFnInsertPostProcessingChain->FunctionFlags |= 0x400;

	return InsertPostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SetControllerId
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewControllerId                ( CPF_Parm )

void ULocalPlayer::SetControllerId ( int NewControllerId )
{
	static UFunction* pFnSetControllerId = NULL;

	if ( ! pFnSetControllerId )
		pFnSetControllerId = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.SetControllerId" );

	ULocalPlayer_execSetControllerId_Parms SetControllerId_Parms;
	SetControllerId_Parms.NewControllerId = NewControllerId;

	this->ProcessEvent ( pFnSetControllerId, &SetControllerId_Parms, NULL );
};

// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// [0x00020102] 
// Parameters infos:

void ULocalPlayer::ClearPostProcessSettingsOverride ( )
{
	static UFunction* pFnClearPostProcessSettingsOverride = NULL;

	if ( ! pFnClearPostProcessSettingsOverride )
		pFnClearPostProcessSettingsOverride = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.ClearPostProcessSettingsOverride" );

	ULocalPlayer_execClearPostProcessSettingsOverride_Parms ClearPostProcessSettingsOverride_Parms;

	this->ProcessEvent ( pFnClearPostProcessSettingsOverride, &ClearPostProcessSettingsOverride_Parms, NULL );
};

// Function Engine.LocalPlayer.UpdateOverridePostProcessSettings
// [0x00020102] 
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm | CPF_NeedCtorLink )

void ULocalPlayer::UpdateOverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings )
{
	static UFunction* pFnUpdateOverridePostProcessSettings = NULL;

	if ( ! pFnUpdateOverridePostProcessSettings )
		pFnUpdateOverridePostProcessSettings = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.UpdateOverridePostProcessSettings" );

	ULocalPlayer_execUpdateOverridePostProcessSettings_Parms UpdateOverridePostProcessSettings_Parms;
	memcpy ( &UpdateOverridePostProcessSettings_Parms.OverrideSettings, &OverrideSettings, 0x10C );

	this->ProcessEvent ( pFnUpdateOverridePostProcessSettings, &UpdateOverridePostProcessSettings_Parms, NULL );
};

// Function Engine.LocalPlayer.OverridePostProcessSettings
// [0x00020102] 
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm | CPF_NeedCtorLink )
// float                          StartBlendTime                 ( CPF_Parm )

void ULocalPlayer::OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float StartBlendTime )
{
	static UFunction* pFnOverridePostProcessSettings = NULL;

	if ( ! pFnOverridePostProcessSettings )
		pFnOverridePostProcessSettings = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.OverridePostProcessSettings" );

	ULocalPlayer_execOverridePostProcessSettings_Parms OverridePostProcessSettings_Parms;
	memcpy ( &OverridePostProcessSettings_Parms.OverrideSettings, &OverrideSettings, 0x10C );
	OverridePostProcessSettings_Parms.StartBlendTime = StartBlendTime;

	this->ProcessEvent ( pFnOverridePostProcessSettings, &OverridePostProcessSettings_Parms, NULL );
};

// Function Engine.LocalPlayer.GetActorVisibility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool ULocalPlayer::GetActorVisibility ( class AActor* TestActor )
{
	static UFunction* pFnGetActorVisibility = NULL;

	if ( ! pFnGetActorVisibility )
		pFnGetActorVisibility = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.GetActorVisibility" );

	ULocalPlayer_execGetActorVisibility_Parms GetActorVisibility_Parms;
	GetActorVisibility_Parms.TestActor = TestActor;

	pFnGetActorVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorVisibility, &GetActorVisibility_Parms, NULL );

	pFnGetActorVisibility->FunctionFlags |= 0x400;

	return GetActorVisibility_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SendSplitJoin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULocalPlayer::SendSplitJoin ( )
{
	static UFunction* pFnSendSplitJoin = NULL;

	if ( ! pFnSendSplitJoin )
		pFnSendSplitJoin = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.SendSplitJoin" );

	ULocalPlayer_execSendSplitJoin_Parms SendSplitJoin_Parms;

	pFnSendSplitJoin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendSplitJoin, &SendSplitJoin_Parms, NULL );

	pFnSendSplitJoin->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.SpawnPlayActor
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ULocalPlayer::SpawnPlayActor ( struct FString URL, struct FString* OutError )
{
	static UFunction* pFnSpawnPlayActor = NULL;

	if ( ! pFnSpawnPlayActor )
		pFnSpawnPlayActor = UObject::FindObject< UFunction > ( "Function Engine.LocalPlayer.SpawnPlayActor" );

	ULocalPlayer_execSpawnPlayActor_Parms SpawnPlayActor_Parms;
	memcpy ( &SpawnPlayActor_Parms.URL, &URL, 0xC );

	pFnSpawnPlayActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPlayActor, &SpawnPlayActor_Parms, NULL );

	pFnSpawnPlayActor->FunctionFlags |= 0x400;

	if ( OutError )
		memcpy ( OutError, &SpawnPlayActor_Parms.OutError, 0xC );

	return SpawnPlayActor_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue )
{
	static UFunction* pFnGetVectorCurveParameterValue = NULL;

	if ( ! pFnGetVectorCurveParameterValue )
		pFnGetVectorCurveParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetVectorCurveParameterValue" );

	UMaterialInterface_execGetVectorCurveParameterValue_Parms GetVectorCurveParameterValue_Parms;
	memcpy ( &GetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorCurveParameterValue, &GetVectorCurveParameterValue_Parms, NULL );

	pFnGetVectorCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorCurveParameterValue_Parms.OutValue, 0x10 );

	return GetVectorCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue )
{
	static UFunction* pFnGetVectorParameterValue = NULL;

	if ( ! pFnGetVectorParameterValue )
		pFnGetVectorParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetVectorParameterValue" );

	UMaterialInterface_execGetVectorParameterValue_Parms GetVectorParameterValue_Parms;
	memcpy ( &GetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameterValue, &GetVectorParameterValue_Parms, NULL );

	pFnGetVectorParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorParameterValue_Parms.OutValue, 0x10 );

	return GetVectorParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetTextureParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue )
{
	static UFunction* pFnGetTextureParameterValue = NULL;

	if ( ! pFnGetTextureParameterValue )
		pFnGetTextureParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetTextureParameterValue" );

	UMaterialInterface_execGetTextureParameterValue_Parms GetTextureParameterValue_Parms;
	memcpy ( &GetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTextureParameterValue, &GetTextureParameterValue_Parms, NULL );

	pFnGetTextureParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetTextureParameterValue_Parms.OutValue;

	return GetTextureParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue )
{
	static UFunction* pFnGetScalarCurveParameterValue = NULL;

	if ( ! pFnGetScalarCurveParameterValue )
		pFnGetScalarCurveParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetScalarCurveParameterValue" );

	UMaterialInterface_execGetScalarCurveParameterValue_Parms GetScalarCurveParameterValue_Parms;
	memcpy ( &GetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarCurveParameterValue, &GetScalarCurveParameterValue_Parms, NULL );

	pFnGetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetScalarCurveParameterValue_Parms.OutValue, 0x10 );

	return GetScalarCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetScalarParameterValue ( struct FName ParameterName, float* OutValue )
{
	static UFunction* pFnGetScalarParameterValue = NULL;

	if ( ! pFnGetScalarParameterValue )
		pFnGetScalarParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetScalarParameterValue" );

	UMaterialInterface_execGetScalarParameterValue_Parms GetScalarParameterValue_Parms;
	memcpy ( &GetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarParameterValue, &GetScalarParameterValue_Parms, NULL );

	pFnGetScalarParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetScalarParameterValue_Parms.OutValue;

	return GetScalarParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetFontParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   OutFontValue                   ( CPF_Parm | CPF_OutParm )
// int                            OutFontPage                    ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage )
{
	static UFunction* pFnGetFontParameterValue = NULL;

	if ( ! pFnGetFontParameterValue )
		pFnGetFontParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetFontParameterValue" );

	UMaterialInterface_execGetFontParameterValue_Parms GetFontParameterValue_Parms;
	memcpy ( &GetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFontParameterValue, &GetFontParameterValue_Parms, NULL );

	pFnGetFontParameterValue->FunctionFlags |= 0x400;

	if ( OutFontValue )
		*OutFontValue = GetFontParameterValue_Parms.OutFontValue;

	if ( OutFontPage )
		*OutFontPage = GetFontParameterValue_Parms.OutFontPage;

	return GetFontParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetPhysicalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial ( )
{
	static UFunction* pFnGetPhysicalMaterial = NULL;

	if ( ! pFnGetPhysicalMaterial )
		pFnGetPhysicalMaterial = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetPhysicalMaterial" );

	UMaterialInterface_execGetPhysicalMaterial_Parms GetPhysicalMaterial_Parms;

	pFnGetPhysicalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalMaterial, &GetPhysicalMaterial_Parms, NULL );

	pFnGetPhysicalMaterial->FunctionFlags |= 0x400;

	return GetPhysicalMaterial_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterial*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterial* UMaterialInterface::GetMaterial ( )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = UObject::FindObject< UFunction > ( "Function Engine.MaterialInterface.GetMaterial" );

	UMaterialInterface_execGetMaterial_Parms GetMaterial_Parms;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.Material.GetTextures
// [0x00020002] 
// Parameters infos:
// TArray< class UTexture* >      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< class UTexture* > UMaterial::GetTextures ( )
{
	static UFunction* pFnGetTextures = NULL;

	if ( ! pFnGetTextures )
		pFnGetTextures = UObject::FindObject< UFunction > ( "Function Engine.Material.GetTextures" );

	UMaterial_execGetTextures_Parms GetTextures_Parms;

	this->ProcessEvent ( pFnGetTextures, &GetTextures_Parms, NULL );

	return GetTextures_Parms.ReturnValue;
};

// Function Engine.MatineeActor.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMatineeActor::eventUpdate ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = UObject::FindObject< UFunction > ( "Function Engine.MatineeActor.Update" );

	AMatineeActor_eventUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function Engine.MultiFont.GetResolutionTestTableIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UMultiFont::GetResolutionTestTableIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionTestTableIndex = NULL;

	if ( ! pFnGetResolutionTestTableIndex )
		pFnGetResolutionTestTableIndex = UObject::FindObject< UFunction > ( "Function Engine.MultiFont.GetResolutionTestTableIndex" );

	UMultiFont_execGetResolutionTestTableIndex_Parms GetResolutionTestTableIndex_Parms;
	GetResolutionTestTableIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionTestTableIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionTestTableIndex, &GetResolutionTestTableIndex_Parms, NULL );

	pFnGetResolutionTestTableIndex->FunctionFlags |= 0x400;

	return GetResolutionTestTableIndex_Parms.ReturnValue;
};

// Function Engine.Mutator.GetSeamlessTravelActorList
// [0x00420002] 
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = UObject::FindObject< UFunction > ( "Function Engine.Mutator.GetSeamlessTravelActorList" );

	AMutator_execGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.Mutator.InitMutator
// [0x00420002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::InitMutator ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitMutator = NULL;

	if ( ! pFnInitMutator )
		pFnInitMutator = UObject::FindObject< UFunction > ( "Function Engine.Mutator.InitMutator" );

	AMutator_execInitMutator_Parms InitMutator_Parms;
	memcpy ( &InitMutator_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitMutator, &InitMutator_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitMutator_Parms.ErrorMessage, 0xC );
};

// Function Engine.Mutator.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = UObject::FindObject< UFunction > ( "Function Engine.Mutator.DriverLeftVehicle" );

	AMutator_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.Mutator.CanLeaveVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AMutator::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = UObject::FindObject< UFunction > ( "Function Engine.Mutator.CanLeaveVehicle" );

	AMutator_execCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.Mutator.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = UObject::FindObject< UFunction > ( "Function Engine.Mutator.DriverEnteredVehicle" );

	AMutator_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogin
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AMutator::NotifyLogin ( class AController* NewPlayer )
{
	static UFunction* pFnNotifyLogin = NULL;

	if ( ! pFnNotifyLogin )
		pFnNotifyLogin = UObject::FindObject< UFunction > ( "Function Engine.Mutator.NotifyLogin" );

	AMutator_execNotifyLogin_Parms NotifyLogin_Parms;
	NotifyLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnNotifyLogin, &NotifyLogin_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AMutator::NotifyLogout ( class AController* Exiting )
{
	static UFunction* pFnNotifyLogout = NULL;

	if ( ! pFnNotifyLogout )
		pFnNotifyLogout = UObject::FindObject< UFunction > ( "Function Engine.Mutator.NotifyLogout" );

	AMutator_execNotifyLogout_Parms NotifyLogout_Parms;
	NotifyLogout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnNotifyLogout, &NotifyLogout_Parms, NULL );
};

// Function Engine.Mutator.ParseChatPercVar
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class AController*             Who                            ( CPF_Parm )
// struct FString                 Cmd                            ( CPF_Parm | CPF_NeedCtorLink )

struct FString AMutator::ParseChatPercVar ( class AController* Who, struct FString Cmd )
{
	static UFunction* pFnParseChatPercVar = NULL;

	if ( ! pFnParseChatPercVar )
		pFnParseChatPercVar = UObject::FindObject< UFunction > ( "Function Engine.Mutator.ParseChatPercVar" );

	AMutator_execParseChatPercVar_Parms ParseChatPercVar_Parms;
	ParseChatPercVar_Parms.Who = Who;
	memcpy ( &ParseChatPercVar_Parms.Cmd, &Cmd, 0xC );

	this->ProcessEvent ( pFnParseChatPercVar, &ParseChatPercVar_Parms, NULL );

	return ParseChatPercVar_Parms.ReturnValue;
};

// Function Engine.Mutator.GetServerPlayers
// [0x00420000] 
// Parameters infos:
// struct FServerResponseLine     ServerState                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::GetServerPlayers ( struct FServerResponseLine* ServerState )
{
	static UFunction* pFnGetServerPlayers = NULL;

	if ( ! pFnGetServerPlayers )
		pFnGetServerPlayers = UObject::FindObject< UFunction > ( "Function Engine.Mutator.GetServerPlayers" );

	AMutator_execGetServerPlayers_Parms GetServerPlayers_Parms;

	this->ProcessEvent ( pFnGetServerPlayers, &GetServerPlayers_Parms, NULL );

	if ( ServerState )
		memcpy ( ServerState, &GetServerPlayers_Parms.ServerState, 0x60 );
};

// Function Engine.Mutator.GetServerDetails
// [0x00420002] 
// Parameters infos:
// struct FServerResponseLine     ServerState                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pFnGetServerDetails = NULL;

	if ( ! pFnGetServerDetails )
		pFnGetServerDetails = UObject::FindObject< UFunction > ( "Function Engine.Mutator.GetServerDetails" );

	AMutator_execGetServerDetails_Parms GetServerDetails_Parms;

	this->ProcessEvent ( pFnGetServerDetails, &GetServerDetails_Parms, NULL );

	if ( ServerState )
		memcpy ( ServerState, &GetServerDetails_Parms.ServerState, 0x60 );
};

// Function Engine.Mutator.CheckReplacement
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckReplacement ( class AActor* Other )
{
	static UFunction* pFnCheckReplacement = NULL;

	if ( ! pFnCheckReplacement )
		pFnCheckReplacement = UObject::FindObject< UFunction > ( "Function Engine.Mutator.CheckReplacement" );

	AMutator_execCheckReplacement_Parms CheckReplacement_Parms;
	CheckReplacement_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckReplacement, &CheckReplacement_Parms, NULL );

	return CheckReplacement_Parms.ReturnValue;
};

// Function Engine.Mutator.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = UObject::FindObject< UFunction > ( "Function Engine.Mutator.CheckRelevance" );

	AMutator_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.Mutator.IsRelevant
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::IsRelevant ( class AActor* Other )
{
	static UFunction* pFnIsRelevant = NULL;

	if ( ! pFnIsRelevant )
		pFnIsRelevant = UObject::FindObject< UFunction > ( "Function Engine.Mutator.IsRelevant" );

	AMutator_execIsRelevant_Parms IsRelevant_Parms;
	IsRelevant_Parms.Other = Other;

	this->ProcessEvent ( pFnIsRelevant, &IsRelevant_Parms, NULL );

	return IsRelevant_Parms.ReturnValue;
};

// Function Engine.Mutator.AlwaysKeep
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::AlwaysKeep ( class AActor* Other )
{
	static UFunction* pFnAlwaysKeep = NULL;

	if ( ! pFnAlwaysKeep )
		pFnAlwaysKeep = UObject::FindObject< UFunction > ( "Function Engine.Mutator.AlwaysKeep" );

	AMutator_execAlwaysKeep_Parms AlwaysKeep_Parms;
	AlwaysKeep_Parms.Other = Other;

	this->ProcessEvent ( pFnAlwaysKeep, &AlwaysKeep_Parms, NULL );

	return AlwaysKeep_Parms.ReturnValue;
};

// Function Engine.Mutator.AddMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                M                              ( CPF_Parm )

void AMutator::AddMutator ( class AMutator* M )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = UObject::FindObject< UFunction > ( "Function Engine.Mutator.AddMutator" );

	AMutator_execAddMutator_Parms AddMutator_Parms;
	AddMutator_Parms.M = M;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.Mutator.ModifyPlayer
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AMutator::ModifyPlayer ( class APawn* Other )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = UObject::FindObject< UFunction > ( "Function Engine.Mutator.ModifyPlayer" );

	AMutator_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.Mutator.ModifyLogin
// [0x00420002] 
// Parameters infos:
// struct FString                 Portal                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::ModifyLogin ( struct FString* Portal, struct FString* Options )
{
	static UFunction* pFnModifyLogin = NULL;

	if ( ! pFnModifyLogin )
		pFnModifyLogin = UObject::FindObject< UFunction > ( "Function Engine.Mutator.ModifyLogin" );

	AMutator_execModifyLogin_Parms ModifyLogin_Parms;

	this->ProcessEvent ( pFnModifyLogin, &ModifyLogin_Parms, NULL );

	if ( Portal )
		memcpy ( Portal, &ModifyLogin_Parms.Portal, 0xC );

	if ( Options )
		memcpy ( Options, &ModifyLogin_Parms.Options, 0xC );
};

// Function Engine.Mutator.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerController*       Sender                         ( CPF_Parm )

void AMutator::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = UObject::FindObject< UFunction > ( "Function Engine.Mutator.Mutate" );

	AMutator_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.Mutator.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.Mutator.Destroyed" );

	AMutator_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Mutator.MutatorIsAllowed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AMutator::MutatorIsAllowed ( )
{
	static UFunction* pFnMutatorIsAllowed = NULL;

	if ( ! pFnMutatorIsAllowed )
		pFnMutatorIsAllowed = UObject::FindObject< UFunction > ( "Function Engine.Mutator.MutatorIsAllowed" );

	AMutator_execMutatorIsAllowed_Parms MutatorIsAllowed_Parms;

	this->ProcessEvent ( pFnMutatorIsAllowed, &MutatorIsAllowed_Parms, NULL );

	return MutatorIsAllowed_Parms.ReturnValue;
};

// Function Engine.Mutator.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Mutator.PreBeginPlay" );

	AMutator_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Settings.UpdateFromURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class AGameInfo*               Game                           ( CPF_Parm )
// struct FString                 URL                            ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateFromURL ( class AGameInfo* Game, struct FString* URL )
{
	static UFunction* pFnUpdateFromURL = NULL;

	if ( ! pFnUpdateFromURL )
		pFnUpdateFromURL = UObject::FindObject< UFunction > ( "Function Engine.Settings.UpdateFromURL" );

	USettings_execUpdateFromURL_Parms UpdateFromURL_Parms;
	UpdateFromURL_Parms.Game = Game;

	pFnUpdateFromURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFromURL, &UpdateFromURL_Parms, NULL );

	pFnUpdateFromURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &UpdateFromURL_Parms.URL, 0xC );
};

// Function Engine.Settings.BuildURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::BuildURL ( struct FString* URL )
{
	static UFunction* pFnBuildURL = NULL;

	if ( ! pFnBuildURL )
		pFnBuildURL = UObject::FindObject< UFunction > ( "Function Engine.Settings.BuildURL" );

	USettings_execBuildURL_Parms BuildURL_Parms;

	pFnBuildURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildURL, &BuildURL_Parms, NULL );

	pFnBuildURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &BuildURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendContextsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendContextsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendContextsToURL = NULL;

	if ( ! pFnAppendContextsToURL )
		pFnAppendContextsToURL = UObject::FindObject< UFunction > ( "Function Engine.Settings.AppendContextsToURL" );

	USettings_execAppendContextsToURL_Parms AppendContextsToURL_Parms;

	pFnAppendContextsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendContextsToURL, &AppendContextsToURL_Parms, NULL );

	pFnAppendContextsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendContextsToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendPropertiesToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendPropertiesToURL ( struct FString* URL )
{
	static UFunction* pFnAppendPropertiesToURL = NULL;

	if ( ! pFnAppendPropertiesToURL )
		pFnAppendPropertiesToURL = UObject::FindObject< UFunction > ( "Function Engine.Settings.AppendPropertiesToURL" );

	USettings_execAppendPropertiesToURL_Parms AppendPropertiesToURL_Parms;

	pFnAppendPropertiesToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendPropertiesToURL, &AppendPropertiesToURL_Parms, NULL );

	pFnAppendPropertiesToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendPropertiesToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendDataBindingsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendDataBindingsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendDataBindingsToURL = NULL;

	if ( ! pFnAppendDataBindingsToURL )
		pFnAppendDataBindingsToURL = UObject::FindObject< UFunction > ( "Function Engine.Settings.AppendDataBindingsToURL" );

	USettings_execAppendDataBindingsToURL_Parms AppendDataBindingsToURL_Parms;

	pFnAppendDataBindingsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendDataBindingsToURL, &AppendDataBindingsToURL_Parms, NULL );

	pFnAppendDataBindingsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendDataBindingsToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.GetQoSAdvertisedStringSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FLocalizedStringSetting > QoSSettings                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetQoSAdvertisedStringSettings ( TArray< struct FLocalizedStringSetting >* QoSSettings )
{
	static UFunction* pFnGetQoSAdvertisedStringSettings = NULL;

	if ( ! pFnGetQoSAdvertisedStringSettings )
		pFnGetQoSAdvertisedStringSettings = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetQoSAdvertisedStringSettings" );

	USettings_execGetQoSAdvertisedStringSettings_Parms GetQoSAdvertisedStringSettings_Parms;

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedStringSettings, &GetQoSAdvertisedStringSettings_Parms, NULL );

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= 0x400;

	if ( QoSSettings )
		memcpy ( QoSSettings, &GetQoSAdvertisedStringSettings_Parms.QoSSettings, 0xC );
};

// Function Engine.Settings.GetQoSAdvertisedProperties
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FSettingsProperty > QoSProps                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetQoSAdvertisedProperties ( TArray< struct FSettingsProperty >* QoSProps )
{
	static UFunction* pFnGetQoSAdvertisedProperties = NULL;

	if ( ! pFnGetQoSAdvertisedProperties )
		pFnGetQoSAdvertisedProperties = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetQoSAdvertisedProperties" );

	USettings_execGetQoSAdvertisedProperties_Parms GetQoSAdvertisedProperties_Parms;

	pFnGetQoSAdvertisedProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedProperties, &GetQoSAdvertisedProperties_Parms, NULL );

	pFnGetQoSAdvertisedProperties->FunctionFlags |= 0x400;

	if ( QoSProps )
		memcpy ( QoSProps, &GetQoSAdvertisedProperties_Parms.QoSProps, 0xC );
};

// Function Engine.Settings.GetRangedPropertyValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool USettings::GetRangedPropertyValue ( int PropertyId, float* OutValue )
{
	static UFunction* pFnGetRangedPropertyValue = NULL;

	if ( ! pFnGetRangedPropertyValue )
		pFnGetRangedPropertyValue = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetRangedPropertyValue" );

	USettings_execGetRangedPropertyValue_Parms GetRangedPropertyValue_Parms;
	GetRangedPropertyValue_Parms.PropertyId = PropertyId;

	pFnGetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedPropertyValue, &GetRangedPropertyValue_Parms, NULL );

	pFnGetRangedPropertyValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedPropertyValue_Parms.OutValue;

	return GetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetRangedPropertyValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool USettings::SetRangedPropertyValue ( int PropertyId, float NewValue )
{
	static UFunction* pFnSetRangedPropertyValue = NULL;

	if ( ! pFnSetRangedPropertyValue )
		pFnSetRangedPropertyValue = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetRangedPropertyValue" );

	USettings_execSetRangedPropertyValue_Parms SetRangedPropertyValue_Parms;
	SetRangedPropertyValue_Parms.PropertyId = PropertyId;
	SetRangedPropertyValue_Parms.NewValue = NewValue;

	pFnSetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedPropertyValue, &SetRangedPropertyValue_Parms, NULL );

	pFnSetRangedPropertyValue->FunctionFlags |= 0x400;

	return SetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetPropertyRange = NULL;

	if ( ! pFnGetPropertyRange )
		pFnGetPropertyRange = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyRange" );

	USettings_execGetPropertyRange_Parms GetPropertyRange_Parms;
	GetPropertyRange_Parms.PropertyId = PropertyId;

	pFnGetPropertyRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyRange, &GetPropertyRange_Parms, NULL );

	pFnGetPropertyRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetPropertyRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetPropertyRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetPropertyRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetPropertyRange_Parms.bFormatAsInt;

	return GetPropertyRange_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyMappingType ( int PropertyId, unsigned char* OutType )
{
	static UFunction* pFnGetPropertyMappingType = NULL;

	if ( ! pFnGetPropertyMappingType )
		pFnGetPropertyMappingType = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyMappingType" );

	USettings_execGetPropertyMappingType_Parms GetPropertyMappingType_Parms;
	GetPropertyMappingType_Parms.PropertyId = PropertyId;

	pFnGetPropertyMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyMappingType, &GetPropertyMappingType_Parms, NULL );

	pFnGetPropertyMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetPropertyMappingType_Parms.OutType;

	return GetPropertyMappingType_Parms.ReturnValue;
};

// Function Engine.Settings.HasStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SettingId                      ( CPF_Parm )

bool USettings::HasStringSetting ( int SettingId )
{
	static UFunction* pFnHasStringSetting = NULL;

	if ( ! pFnHasStringSetting )
		pFnHasStringSetting = UObject::FindObject< UFunction > ( "Function Engine.Settings.HasStringSetting" );

	USettings_execHasStringSetting_Parms HasStringSetting_Parms;
	HasStringSetting_Parms.SettingId = SettingId;

	pFnHasStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasStringSetting, &HasStringSetting_Parms, NULL );

	pFnHasStringSetting->FunctionFlags |= 0x400;

	return HasStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.HasProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

bool USettings::HasProperty ( int PropertyId )
{
	static UFunction* pFnHasProperty = NULL;

	if ( ! pFnHasProperty )
		pFnHasProperty = UObject::FindObject< UFunction > ( "Function Engine.Settings.HasProperty" );

	USettings_execHasProperty_Parms HasProperty_Parms;
	HasProperty_Parms.PropertyId = PropertyId;

	pFnHasProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasProperty, &HasProperty_Parms, NULL );

	pFnHasProperty->FunctionFlags |= 0x400;

	return HasProperty_Parms.ReturnValue;
};

// Function Engine.Settings.UpdateProperties
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FSettingsProperty > Props                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateProperties ( unsigned long bShouldAddIfMissing, TArray< struct FSettingsProperty >* Props )
{
	static UFunction* pFnUpdateProperties = NULL;

	if ( ! pFnUpdateProperties )
		pFnUpdateProperties = UObject::FindObject< UFunction > ( "Function Engine.Settings.UpdateProperties" );

	USettings_execUpdateProperties_Parms UpdateProperties_Parms;
	UpdateProperties_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateProperties, &UpdateProperties_Parms, NULL );

	pFnUpdateProperties->FunctionFlags |= 0x400;

	if ( Props )
		memcpy ( Props, &UpdateProperties_Parms.Props, 0xC );
};

// Function Engine.Settings.UpdateStringSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FLocalizedStringSetting > Settings                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateStringSettings ( unsigned long bShouldAddIfMissing, TArray< struct FLocalizedStringSetting >* Settings )
{
	static UFunction* pFnUpdateStringSettings = NULL;

	if ( ! pFnUpdateStringSettings )
		pFnUpdateStringSettings = UObject::FindObject< UFunction > ( "Function Engine.Settings.UpdateStringSettings" );

	USettings_execUpdateStringSettings_Parms UpdateStringSettings_Parms;
	UpdateStringSettings_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateStringSettings, &UpdateStringSettings_Parms, NULL );

	pFnUpdateStringSettings->FunctionFlags |= 0x400;

	if ( Settings )
		memcpy ( Settings, &UpdateStringSettings_Parms.Settings, 0xC );
};

// Function Engine.Settings.GetPropertyType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

unsigned char USettings::GetPropertyType ( int PropertyId )
{
	static UFunction* pFnGetPropertyType = NULL;

	if ( ! pFnGetPropertyType )
		pFnGetPropertyType = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyType" );

	USettings_execGetPropertyType_Parms GetPropertyType_Parms;
	GetPropertyType_Parms.PropertyId = PropertyId;

	pFnGetPropertyType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyType, &GetPropertyType_Parms, NULL );

	pFnGetPropertyType->FunctionFlags |= 0x400;

	return GetPropertyType_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::GetStringProperty ( int PropertyId, struct FString* Value )
{
	static UFunction* pFnGetStringProperty = NULL;

	if ( ! pFnGetStringProperty )
		pFnGetStringProperty = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringProperty" );

	USettings_execGetStringProperty_Parms GetStringProperty_Parms;
	GetStringProperty_Parms.PropertyId = PropertyId;

	pFnGetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringProperty, &GetStringProperty_Parms, NULL );

	pFnGetStringProperty->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetStringProperty_Parms.Value, 0xC );

	return GetStringProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void USettings::SetStringProperty ( int PropertyId, struct FString Value )
{
	static UFunction* pFnSetStringProperty = NULL;

	if ( ! pFnSetStringProperty )
		pFnSetStringProperty = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetStringProperty" );

	USettings_execSetStringProperty_Parms SetStringProperty_Parms;
	SetStringProperty_Parms.PropertyId = PropertyId;
	memcpy ( &SetStringProperty_Parms.Value, &Value, 0xC );

	pFnSetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringProperty, &SetStringProperty_Parms, NULL );

	pFnSetStringProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetIntProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetIntProperty ( int PropertyId, int* Value )
{
	static UFunction* pFnGetIntProperty = NULL;

	if ( ! pFnGetIntProperty )
		pFnGetIntProperty = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetIntProperty" );

	USettings_execGetIntProperty_Parms GetIntProperty_Parms;
	GetIntProperty_Parms.PropertyId = PropertyId;

	pFnGetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntProperty, &GetIntProperty_Parms, NULL );

	pFnGetIntProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetIntProperty_Parms.Value;

	return GetIntProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetIntProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USettings::SetIntProperty ( int PropertyId, int Value )
{
	static UFunction* pFnSetIntProperty = NULL;

	if ( ! pFnSetIntProperty )
		pFnSetIntProperty = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetIntProperty" );

	USettings_execSetIntProperty_Parms SetIntProperty_Parms;
	SetIntProperty_Parms.PropertyId = PropertyId;
	SetIntProperty_Parms.Value = Value;

	pFnSetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntProperty, &SetIntProperty_Parms, NULL );

	pFnSetIntProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetFloatProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetFloatProperty ( int PropertyId, float* Value )
{
	static UFunction* pFnGetFloatProperty = NULL;

	if ( ! pFnGetFloatProperty )
		pFnGetFloatProperty = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetFloatProperty" );

	USettings_execGetFloatProperty_Parms GetFloatProperty_Parms;
	GetFloatProperty_Parms.PropertyId = PropertyId;

	pFnGetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatProperty, &GetFloatProperty_Parms, NULL );

	pFnGetFloatProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetFloatProperty_Parms.Value;

	return GetFloatProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetFloatProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void USettings::SetFloatProperty ( int PropertyId, float Value )
{
	static UFunction* pFnSetFloatProperty = NULL;

	if ( ! pFnSetFloatProperty )
		pFnSetFloatProperty = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetFloatProperty" );

	USettings_execSetFloatProperty_Parms SetFloatProperty_Parms;
	SetFloatProperty_Parms.PropertyId = PropertyId;
	SetFloatProperty_Parms.Value = Value;

	pFnSetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatProperty, &SetFloatProperty_Parms, NULL );

	pFnSetFloatProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.SetPropertyFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue )
{
	static UFunction* pFnSetPropertyFromStringByName = NULL;

	if ( ! pFnSetPropertyFromStringByName )
		pFnSetPropertyFromStringByName = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetPropertyFromStringByName" );

	USettings_execSetPropertyFromStringByName_Parms SetPropertyFromStringByName_Parms;
	memcpy ( &SetPropertyFromStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnSetPropertyFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPropertyFromStringByName, &SetPropertyFromStringByName_Parms, NULL );

	pFnSetPropertyFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetPropertyFromStringByName_Parms.NewValue, 0xC );

	return SetPropertyFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsStringByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   PropertyName                   ( CPF_Parm )

struct FString USettings::GetPropertyAsStringByName ( struct FName PropertyName )
{
	static UFunction* pFnGetPropertyAsStringByName = NULL;

	if ( ! pFnGetPropertyAsStringByName )
		pFnGetPropertyAsStringByName = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyAsStringByName" );

	USettings_execGetPropertyAsStringByName_Parms GetPropertyAsStringByName_Parms;
	memcpy ( &GetPropertyAsStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyAsStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsStringByName, &GetPropertyAsStringByName_Parms, NULL );

	pFnGetPropertyAsStringByName->FunctionFlags |= 0x400;

	return GetPropertyAsStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyAsString ( int PropertyId )
{
	static UFunction* pFnGetPropertyAsString = NULL;

	if ( ! pFnGetPropertyAsString )
		pFnGetPropertyAsString = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyAsString" );

	USettings_execGetPropertyAsString_Parms GetPropertyAsString_Parms;
	GetPropertyAsString_Parms.PropertyId = PropertyId;

	pFnGetPropertyAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsString, &GetPropertyAsString_Parms, NULL );

	pFnGetPropertyAsString->FunctionFlags |= 0x400;

	return GetPropertyAsString_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyColumnHeader ( int PropertyId )
{
	static UFunction* pFnGetPropertyColumnHeader = NULL;

	if ( ! pFnGetPropertyColumnHeader )
		pFnGetPropertyColumnHeader = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyColumnHeader" );

	USettings_execGetPropertyColumnHeader_Parms GetPropertyColumnHeader_Parms;
	GetPropertyColumnHeader_Parms.PropertyId = PropertyId;

	pFnGetPropertyColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyColumnHeader, &GetPropertyColumnHeader_Parms, NULL );

	pFnGetPropertyColumnHeader->FunctionFlags |= 0x400;

	return GetPropertyColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

struct FName USettings::GetPropertyName ( int PropertyId )
{
	static UFunction* pFnGetPropertyName = NULL;

	if ( ! pFnGetPropertyName )
		pFnGetPropertyName = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyName" );

	USettings_execGetPropertyName_Parms GetPropertyName_Parms;
	GetPropertyName_Parms.PropertyId = PropertyId;

	pFnGetPropertyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyName, &GetPropertyName_Parms, NULL );

	pFnGetPropertyName->FunctionFlags |= 0x400;

	return GetPropertyName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// int                            PropertyId                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyId ( struct FName PropertyName, int* PropertyId )
{
	static UFunction* pFnGetPropertyId = NULL;

	if ( ! pFnGetPropertyId )
		pFnGetPropertyId = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetPropertyId" );

	USettings_execGetPropertyId_Parms GetPropertyId_Parms;
	memcpy ( &GetPropertyId_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyId, &GetPropertyId_Parms, NULL );

	pFnGetPropertyId->FunctionFlags |= 0x400;

	if ( PropertyId )
		*PropertyId = GetPropertyId_Parms.PropertyId;

	return GetPropertyId_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetStringSettingValueFromStringByName = NULL;

	if ( ! pFnSetStringSettingValueFromStringByName )
		pFnSetStringSettingValueFromStringByName = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetStringSettingValueFromStringByName" );

	USettings_execSetStringSettingValueFromStringByName_Parms SetStringSettingValueFromStringByName_Parms;
	memcpy ( &SetStringSettingValueFromStringByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueFromStringByName, &SetStringSettingValueFromStringByName_Parms, NULL );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetStringSettingValueFromStringByName_Parms.NewValue, 0xC );

	return SetStringSettingValueFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueNameByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )

struct FName USettings::GetStringSettingValueNameByName ( struct FName StringSettingName )
{
	static UFunction* pFnGetStringSettingValueNameByName = NULL;

	if ( ! pFnGetStringSettingValueNameByName )
		pFnGetStringSettingValueNameByName = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingValueNameByName" );

	USettings_execGetStringSettingValueNameByName_Parms GetStringSettingValueNameByName_Parms;
	memcpy ( &GetStringSettingValueNameByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueNameByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNameByName, &GetStringSettingValueNameByName_Parms, NULL );

	pFnGetStringSettingValueNameByName->FunctionFlags |= 0x400;

	return GetStringSettingValueNameByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )

struct FName USettings::GetStringSettingValueName ( int StringSettingId, int ValueIndex )
{
	static UFunction* pFnGetStringSettingValueName = NULL;

	if ( ! pFnGetStringSettingValueName )
		pFnGetStringSettingValueName = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingValueName" );

	USettings_execGetStringSettingValueName_Parms GetStringSettingValueName_Parms;
	GetStringSettingValueName_Parms.StringSettingId = StringSettingId;
	GetStringSettingValueName_Parms.ValueIndex = ValueIndex;

	pFnGetStringSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueName, &GetStringSettingValueName_Parms, NULL );

	pFnGetStringSettingValueName->FunctionFlags |= 0x400;

	return GetStringSettingValueName_Parms.ReturnValue;
};

// Function Engine.Settings.IsWildcardStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

bool USettings::IsWildcardStringSetting ( int StringSettingId )
{
	static UFunction* pFnIsWildcardStringSetting = NULL;

	if ( ! pFnIsWildcardStringSetting )
		pFnIsWildcardStringSetting = UObject::FindObject< UFunction > ( "Function Engine.Settings.IsWildcardStringSetting" );

	USettings_execIsWildcardStringSetting_Parms IsWildcardStringSetting_Parms;
	IsWildcardStringSetting_Parms.StringSettingId = StringSettingId;

	pFnIsWildcardStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWildcardStringSetting, &IsWildcardStringSetting_Parms, NULL );

	pFnIsWildcardStringSetting->FunctionFlags |= 0x400;

	return IsWildcardStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            StringSettingId                ( CPF_Parm )

struct FString USettings::GetStringSettingColumnHeader ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingColumnHeader = NULL;

	if ( ! pFnGetStringSettingColumnHeader )
		pFnGetStringSettingColumnHeader = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingColumnHeader" );

	USettings_execGetStringSettingColumnHeader_Parms GetStringSettingColumnHeader_Parms;
	GetStringSettingColumnHeader_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingColumnHeader, &GetStringSettingColumnHeader_Parms, NULL );

	pFnGetStringSettingColumnHeader->FunctionFlags |= 0x400;

	return GetStringSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

struct FName USettings::GetStringSettingName ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingName = NULL;

	if ( ! pFnGetStringSettingName )
		pFnGetStringSettingName = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingName" );

	USettings_execGetStringSettingName_Parms GetStringSettingName_Parms;
	GetStringSettingName_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingName, &GetStringSettingName_Parms, NULL );

	pFnGetStringSettingName->FunctionFlags |= 0x400;

	return GetStringSettingName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            StringSettingId                ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingId ( struct FName StringSettingName, int* StringSettingId )
{
	static UFunction* pFnGetStringSettingId = NULL;

	if ( ! pFnGetStringSettingId )
		pFnGetStringSettingId = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingId" );

	USettings_execGetStringSettingId_Parms GetStringSettingId_Parms;
	memcpy ( &GetStringSettingId_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingId, &GetStringSettingId_Parms, NULL );

	pFnGetStringSettingId->FunctionFlags |= 0x400;

	if ( StringSettingId )
		*StringSettingId = GetStringSettingId_Parms.StringSettingId;

	return GetStringSettingId_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValueByName = NULL;

	if ( ! pFnGetStringSettingValueByName )
		pFnGetStringSettingValueByName = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingValueByName" );

	USettings_execGetStringSettingValueByName_Parms GetStringSettingValueByName_Parms;
	memcpy ( &GetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueByName, &GetStringSettingValueByName_Parms, NULL );

	pFnGetStringSettingValueByName->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValueByName_Parms.ValueIndex;

	return GetStringSettingValueByName_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_Parm )

void USettings::SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValueByName = NULL;

	if ( ! pFnSetStringSettingValueByName )
		pFnSetStringSettingValueByName = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetStringSettingValueByName" );

	USettings_execSetStringSettingValueByName_Parms SetStringSettingValueByName_Parms;
	memcpy ( &SetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );
	SetStringSettingValueByName_Parms.ValueIndex = ValueIndex;
	SetStringSettingValueByName_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueByName, &SetStringSettingValueByName_Parms, NULL );

	pFnSetStringSettingValueByName->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetStringSettingValueNames
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// TArray< struct FIdToStringMapping > Values                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::GetStringSettingValueNames ( int StringSettingId, TArray< struct FIdToStringMapping >* Values )
{
	static UFunction* pFnGetStringSettingValueNames = NULL;

	if ( ! pFnGetStringSettingValueNames )
		pFnGetStringSettingValueNames = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingValueNames" );

	USettings_execGetStringSettingValueNames_Parms GetStringSettingValueNames_Parms;
	GetStringSettingValueNames_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValueNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNames, &GetStringSettingValueNames_Parms, NULL );

	pFnGetStringSettingValueNames->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetStringSettingValueNames_Parms.Values, 0xC );

	return GetStringSettingValueNames_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValue ( int StringSettingId, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValue = NULL;

	if ( ! pFnGetStringSettingValue )
		pFnGetStringSettingValue = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetStringSettingValue" );

	USettings_execGetStringSettingValue_Parms GetStringSettingValue_Parms;
	GetStringSettingValue_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValue, &GetStringSettingValue_Parms, NULL );

	pFnGetStringSettingValue->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValue_Parms.ValueIndex;

	return GetStringSettingValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_Parm )

void USettings::SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValue = NULL;

	if ( ! pFnSetStringSettingValue )
		pFnSetStringSettingValue = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetStringSettingValue" );

	USettings_execSetStringSettingValue_Parms SetStringSettingValue_Parms;
	SetStringSettingValue_Parms.StringSettingId = StringSettingId;
	SetStringSettingValue_Parms.ValueIndex = ValueIndex;
	SetStringSettingValue_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValue, &SetStringSettingValue_Parms, NULL );

	pFnSetStringSettingValue->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// int                            OutInt1                        ( CPF_Parm | CPF_OutParm )
// int                            OutInt2                        ( CPF_Parm | CPF_OutParm )

void USettings::GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 )
{
	static UFunction* pFnGetSettingsDataDateTime = NULL;

	if ( ! pFnGetSettingsDataDateTime )
		pFnGetSettingsDataDateTime = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetSettingsDataDateTime" );

	USettings_execGetSettingsDataDateTime_Parms GetSettingsDataDateTime_Parms;

	pFnGetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataDateTime, &GetSettingsDataDateTime_Parms, NULL );

	pFnGetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataDateTime_Parms.Data, 0xC );

	if ( OutInt1 )
		*OutInt1 = GetSettingsDataDateTime_Parms.OutInt1;

	if ( OutInt2 )
		*OutInt2 = GetSettingsDataDateTime_Parms.OutInt2;
};

// Function Engine.Settings.GetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        OutBlob                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* OutBlob )
{
	static UFunction* pFnGetSettingsDataBlob = NULL;

	if ( ! pFnGetSettingsDataBlob )
		pFnGetSettingsDataBlob = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetSettingsDataBlob" );

	USettings_execGetSettingsDataBlob_Parms GetSettingsDataBlob_Parms;

	pFnGetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataBlob, &GetSettingsDataBlob_Parms, NULL );

	pFnGetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataBlob_Parms.Data, 0xC );

	if ( OutBlob )
		memcpy ( OutBlob, &GetSettingsDataBlob_Parms.OutBlob, 0xC );
};

// Function Engine.Settings.GetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

int USettings::GetSettingsDataInt ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataInt = NULL;

	if ( ! pFnGetSettingsDataInt )
		pFnGetSettingsDataInt = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetSettingsDataInt" );

	USettings_execGetSettingsDataInt_Parms GetSettingsDataInt_Parms;

	pFnGetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataInt, &GetSettingsDataInt_Parms, NULL );

	pFnGetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataInt_Parms.Data, 0xC );

	return GetSettingsDataInt_Parms.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

float USettings::GetSettingsDataFloat ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataFloat = NULL;

	if ( ! pFnGetSettingsDataFloat )
		pFnGetSettingsDataFloat = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetSettingsDataFloat" );

	USettings_execGetSettingsDataFloat_Parms GetSettingsDataFloat_Parms;

	pFnGetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataFloat, &GetSettingsDataFloat_Parms, NULL );

	pFnGetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataFloat_Parms.Data, 0xC );

	return GetSettingsDataFloat_Parms.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataString
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

struct FString USettings::GetSettingsDataString ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataString = NULL;

	if ( ! pFnGetSettingsDataString )
		pFnGetSettingsDataString = UObject::FindObject< UFunction > ( "Function Engine.Settings.GetSettingsDataString" );

	USettings_execGetSettingsDataString_Parms GetSettingsDataString_Parms;

	pFnGetSettingsDataString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataString, &GetSettingsDataString_Parms, NULL );

	pFnGetSettingsDataString->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataString_Parms.Data, 0xC );

	return GetSettingsDataString_Parms.ReturnValue;
};

// Function Engine.Settings.EmptySettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::EmptySettingsData ( struct FSettingsData* Data )
{
	static UFunction* pFnEmptySettingsData = NULL;

	if ( ! pFnEmptySettingsData )
		pFnEmptySettingsData = UObject::FindObject< UFunction > ( "Function Engine.Settings.EmptySettingsData" );

	USettings_execEmptySettingsData_Parms EmptySettingsData_Parms;

	pFnEmptySettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEmptySettingsData, &EmptySettingsData_Parms, NULL );

	pFnEmptySettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &EmptySettingsData_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// struct FSettingsData           Data2Copy                      ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy )
{
	static UFunction* pFnSetSettingsData = NULL;

	if ( ! pFnSetSettingsData )
		pFnSetSettingsData = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetSettingsData" );

	USettings_execSetSettingsData_Parms SetSettingsData_Parms;

	pFnSetSettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsData, &SetSettingsData_Parms, NULL );

	pFnSetSettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsData_Parms.Data, 0xC );

	if ( Data2Copy )
		memcpy ( Data2Copy, &SetSettingsData_Parms.Data2Copy, 0xC );
};

// Function Engine.Settings.SetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        InBlob                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::SetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* InBlob )
{
	static UFunction* pFnSetSettingsDataBlob = NULL;

	if ( ! pFnSetSettingsDataBlob )
		pFnSetSettingsDataBlob = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetSettingsDataBlob" );

	USettings_execSetSettingsDataBlob_Parms SetSettingsDataBlob_Parms;

	pFnSetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataBlob, &SetSettingsDataBlob_Parms, NULL );

	pFnSetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataBlob_Parms.Data, 0xC );

	if ( InBlob )
		memcpy ( InBlob, &SetSettingsDataBlob_Parms.InBlob, 0xC );
};

// Function Engine.Settings.SetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt1                         ( CPF_Parm )
// int                            InInt2                         ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataDateTime = NULL;

	if ( ! pFnSetSettingsDataDateTime )
		pFnSetSettingsDataDateTime = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetSettingsDataDateTime" );

	USettings_execSetSettingsDataDateTime_Parms SetSettingsDataDateTime_Parms;
	SetSettingsDataDateTime_Parms.InInt1 = InInt1;
	SetSettingsDataDateTime_Parms.InInt2 = InInt2;

	pFnSetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataDateTime, &SetSettingsDataDateTime_Parms, NULL );

	pFnSetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataDateTime_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt                          ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataInt ( int InInt, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataInt = NULL;

	if ( ! pFnSetSettingsDataInt )
		pFnSetSettingsDataInt = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetSettingsDataInt" );

	USettings_execSetSettingsDataInt_Parms SetSettingsDataInt_Parms;
	SetSettingsDataInt_Parms.InInt = InInt;

	pFnSetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataInt, &SetSettingsDataInt_Parms, NULL );

	pFnSetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataInt_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          InFloat                        ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataFloat = NULL;

	if ( ! pFnSetSettingsDataFloat )
		pFnSetSettingsDataFloat = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetSettingsDataFloat" );

	USettings_execSetSettingsDataFloat_Parms SetSettingsDataFloat_Parms;
	SetSettingsDataFloat_Parms.InFloat = InFloat;

	pFnSetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataFloat, &SetSettingsDataFloat_Parms, NULL );

	pFnSetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataFloat_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataString
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 InString                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataString ( struct FString InString, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataString = NULL;

	if ( ! pFnSetSettingsDataString )
		pFnSetSettingsDataString = UObject::FindObject< UFunction > ( "Function Engine.Settings.SetSettingsDataString" );

	USettings_execSetSettingsDataString_Parms SetSettingsDataString_Parms;
	memcpy ( &SetSettingsDataString_Parms.InString, &InString, 0xC );

	pFnSetSettingsDataString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataString, &SetSettingsDataString_Parms, NULL );

	pFnSetSettingsDataString->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataString_Parms.Data, 0xC );
};

// Function Engine.OnlineProfileSettings.GetRangedProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetRangedProfileSettingValue ( int ProfileId, float* OutValue )
{
	static UFunction* pFnGetRangedProfileSettingValue = NULL;

	if ( ! pFnGetRangedProfileSettingValue )
		pFnGetRangedProfileSettingValue = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetRangedProfileSettingValue" );

	UOnlineProfileSettings_execGetRangedProfileSettingValue_Parms GetRangedProfileSettingValue_Parms;
	GetRangedProfileSettingValue_Parms.ProfileId = ProfileId;

	pFnGetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedProfileSettingValue, &GetRangedProfileSettingValue_Parms, NULL );

	pFnGetRangedProfileSettingValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedProfileSettingValue_Parms.OutValue;

	return GetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetRangedProfileSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool UOnlineProfileSettings::SetRangedProfileSettingValue ( int ProfileId, float NewValue )
{
	static UFunction* pFnSetRangedProfileSettingValue = NULL;

	if ( ! pFnSetRangedProfileSettingValue )
		pFnSetRangedProfileSettingValue = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetRangedProfileSettingValue" );

	UOnlineProfileSettings_execSetRangedProfileSettingValue_Parms SetRangedProfileSettingValue_Parms;
	SetRangedProfileSettingValue_Parms.ProfileId = ProfileId;
	SetRangedProfileSettingValue_Parms.NewValue = NewValue;

	pFnSetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedProfileSettingValue, &SetRangedProfileSettingValue_Parms, NULL );

	pFnSetRangedProfileSettingValue->FunctionFlags |= 0x400;

	return SetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetProfileSettingRange = NULL;

	if ( ! pFnGetProfileSettingRange )
		pFnGetProfileSettingRange = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingRange" );

	UOnlineProfileSettings_execGetProfileSettingRange_Parms GetProfileSettingRange_Parms;
	GetProfileSettingRange_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingRange, &GetProfileSettingRange_Parms, NULL );

	pFnGetProfileSettingRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetProfileSettingRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetProfileSettingRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetProfileSettingRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetProfileSettingRange_Parms.bFormatAsInt;

	return GetProfileSettingRange_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType )
{
	static UFunction* pFnGetProfileSettingMappingType = NULL;

	if ( ! pFnGetProfileSettingMappingType )
		pFnGetProfileSettingMappingType = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingMappingType" );

	UOnlineProfileSettings_execGetProfileSettingMappingType_Parms GetProfileSettingMappingType_Parms;
	GetProfileSettingMappingType_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingMappingType, &GetProfileSettingMappingType_Parms, NULL );

	pFnGetProfileSettingMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetProfileSettingMappingType_Parms.OutType;

	return GetProfileSettingMappingType_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetDefaultVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::SetDefaultVersionNumber ( )
{
	static UFunction* pFnSetDefaultVersionNumber = NULL;

	if ( ! pFnSetDefaultVersionNumber )
		pFnSetDefaultVersionNumber = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetDefaultVersionNumber" );

	UOnlineProfileSettings_execSetDefaultVersionNumber_Parms SetDefaultVersionNumber_Parms;

	pFnSetDefaultVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultVersionNumber, &SetDefaultVersionNumber_Parms, NULL );

	pFnSetDefaultVersionNumber->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.GetVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineProfileSettings::GetVersionNumber ( )
{
	static UFunction* pFnGetVersionNumber = NULL;

	if ( ! pFnGetVersionNumber )
		pFnGetVersionNumber = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetVersionNumber" );

	UOnlineProfileSettings_execGetVersionNumber_Parms GetVersionNumber_Parms;

	pFnGetVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVersionNumber, &GetVersionNumber_Parms, NULL );

	pFnGetVersionNumber->FunctionFlags |= 0x400;

	return GetVersionNumber_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.AppendVersionToSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::AppendVersionToSettings ( )
{
	static UFunction* pFnAppendVersionToSettings = NULL;

	if ( ! pFnAppendVersionToSettings )
		pFnAppendVersionToSettings = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.AppendVersionToSettings" );

	UOnlineProfileSettings_execAppendVersionToSettings_Parms AppendVersionToSettings_Parms;

	pFnAppendVersionToSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToSettings, &AppendVersionToSettings_Parms, NULL );

	pFnAppendVersionToSettings->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::AppendVersionToReadIds ( )
{
	static UFunction* pFnAppendVersionToReadIds = NULL;

	if ( ! pFnAppendVersionToReadIds )
		pFnAppendVersionToReadIds = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.AppendVersionToReadIds" );

	UOnlineProfileSettings_execAppendVersionToReadIds_Parms AppendVersionToReadIds_Parms;

	pFnAppendVersionToReadIds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToReadIds, &AppendVersionToReadIds_Parms, NULL );

	pFnAppendVersionToReadIds->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.ScriptSetToDefaults
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineProfileSettings::eventScriptSetToDefaults ( )
{
	static UFunction* pFnScriptSetToDefaults = NULL;

	if ( ! pFnScriptSetToDefaults )
		pFnScriptSetToDefaults = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.ScriptSetToDefaults" );

	UOnlineProfileSettings_eventScriptSetToDefaults_Parms ScriptSetToDefaults_Parms;

	this->ProcessEvent ( pFnScriptSetToDefaults, &ScriptSetToDefaults_Parms, NULL );
};

// Function Engine.OnlineProfileSettings.SetToDefaults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::eventSetToDefaults ( )
{
	static UFunction* pFnSetToDefaults = NULL;

	if ( ! pFnSetToDefaults )
		pFnSetToDefaults = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetToDefaults" );

	UOnlineProfileSettings_eventSetToDefaults_Parms SetToDefaults_Parms;

	pFnSetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToDefaults, &SetToDefaults_Parms, NULL );

	pFnSetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

bool UOnlineProfileSettings::SetProfileSettingValueFloat ( int ProfileSettingId, float Value )
{
	static UFunction* pFnSetProfileSettingValueFloat = NULL;

	if ( ! pFnSetProfileSettingValueFloat )
		pFnSetProfileSettingValueFloat = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetProfileSettingValueFloat" );

	UOnlineProfileSettings_execSetProfileSettingValueFloat_Parms SetProfileSettingValueFloat_Parms;
	SetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueFloat_Parms.Value = Value;

	pFnSetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueFloat, &SetProfileSettingValueFloat_Parms, NULL );

	pFnSetProfileSettingValueFloat->FunctionFlags |= 0x400;

	return SetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlineProfileSettings::SetProfileSettingValueInt ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueInt = NULL;

	if ( ! pFnSetProfileSettingValueInt )
		pFnSetProfileSettingValueInt = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetProfileSettingValueInt" );

	UOnlineProfileSettings_execSetProfileSettingValueInt_Parms SetProfileSettingValueInt_Parms;
	SetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueInt_Parms.Value = Value;

	pFnSetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueInt, &SetProfileSettingValueInt_Parms, NULL );

	pFnSetProfileSettingValueInt->FunctionFlags |= 0x400;

	return SetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlineProfileSettings::SetProfileSettingValueId ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueId = NULL;

	if ( ! pFnSetProfileSettingValueId )
		pFnSetProfileSettingValueId = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetProfileSettingValueId" );

	UOnlineProfileSettings_execSetProfileSettingValueId_Parms SetProfileSettingValueId_Parms;
	SetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueId_Parms.Value = Value;

	pFnSetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueId, &SetProfileSettingValueId_Parms, NULL );

	pFnSetProfileSettingValueId->FunctionFlags |= 0x400;

	return SetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValueFloat ( int ProfileSettingId, float* Value )
{
	static UFunction* pFnGetProfileSettingValueFloat = NULL;

	if ( ! pFnGetProfileSettingValueFloat )
		pFnGetProfileSettingValueFloat = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingValueFloat" );

	UOnlineProfileSettings_execGetProfileSettingValueFloat_Parms GetProfileSettingValueFloat_Parms;
	GetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueFloat, &GetProfileSettingValueFloat_Parms, NULL );

	pFnGetProfileSettingValueFloat->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueFloat_Parms.Value;

	return GetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValueInt ( int ProfileSettingId, int* Value )
{
	static UFunction* pFnGetProfileSettingValueInt = NULL;

	if ( ! pFnGetProfileSettingValueInt )
		pFnGetProfileSettingValueInt = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingValueInt" );

	UOnlineProfileSettings_execGetProfileSettingValueInt_Parms GetProfileSettingValueInt_Parms;
	GetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueInt, &GetProfileSettingValueInt_Parms, NULL );

	pFnGetProfileSettingValueInt->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueInt_Parms.Value;

	return GetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingValueId ( int ProfileSettingId, int* ValueId )
{
	static UFunction* pFnGetProfileSettingValueId = NULL;

	if ( ! pFnGetProfileSettingValueId )
		pFnGetProfileSettingValueId = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingValueId" );

	UOnlineProfileSettings_execGetProfileSettingValueId_Parms GetProfileSettingValueId_Parms;
	GetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueId, &GetProfileSettingValueId_Parms, NULL );

	pFnGetProfileSettingValueId->FunctionFlags |= 0x400;

	if ( ValueId )
		*ValueId = GetProfileSettingValueId_Parms.ValueId;

	return GetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineProfileSettings::SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValue = NULL;

	if ( ! pFnSetProfileSettingValue )
		pFnSetProfileSettingValue = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetProfileSettingValue" );

	UOnlineProfileSettings_execSetProfileSettingValue_Parms SetProfileSettingValue_Parms;
	SetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;

	pFnSetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValue, &SetProfileSettingValue_Parms, NULL );

	pFnSetProfileSettingValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValue_Parms.NewValue, 0xC );

	return SetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.SetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineProfileSettings::SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValueByName = NULL;

	if ( ! pFnSetProfileSettingValueByName )
		pFnSetProfileSettingValueByName = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.SetProfileSettingValueByName" );

	UOnlineProfileSettings_execSetProfileSettingValueByName_Parms SetProfileSettingValueByName_Parms;
	memcpy ( &SetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnSetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueByName, &SetProfileSettingValueByName_Parms, NULL );

	pFnSetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValueByName_Parms.NewValue, 0xC );

	return SetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineProfileSettings::GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValueByName = NULL;

	if ( ! pFnGetProfileSettingValueByName )
		pFnGetProfileSettingValueByName = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingValueByName" );

	UOnlineProfileSettings_execGetProfileSettingValueByName_Parms GetProfileSettingValueByName_Parms;
	memcpy ( &GetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueByName, &GetProfileSettingValueByName_Parms, NULL );

	pFnGetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValueByName_Parms.Value, 0xC );

	return GetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValues
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// TArray< struct FName >         Values                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineProfileSettings::GetProfileSettingValues ( int ProfileSettingId, TArray< struct FName >* Values )
{
	static UFunction* pFnGetProfileSettingValues = NULL;

	if ( ! pFnGetProfileSettingValues )
		pFnGetProfileSettingValues = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingValues" );

	UOnlineProfileSettings_execGetProfileSettingValues_Parms GetProfileSettingValues_Parms;
	GetProfileSettingValues_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValues, &GetProfileSettingValues_Parms, NULL );

	pFnGetProfileSettingValues->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetProfileSettingValues_Parms.Values, 0xC );

	return GetProfileSettingValues_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlineProfileSettings::GetProfileSettingValueName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingValueName = NULL;

	if ( ! pFnGetProfileSettingValueName )
		pFnGetProfileSettingValueName = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingValueName" );

	UOnlineProfileSettings_execGetProfileSettingValueName_Parms GetProfileSettingValueName_Parms;
	GetProfileSettingValueName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueName, &GetProfileSettingValueName_Parms, NULL );

	pFnGetProfileSettingValueName->FunctionFlags |= 0x400;

	return GetProfileSettingValueName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineProfileSettings::GetProfileSettingValue ( int ProfileSettingId, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValue = NULL;

	if ( ! pFnGetProfileSettingValue )
		pFnGetProfileSettingValue = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingValue" );

	UOnlineProfileSettings_execGetProfileSettingValue_Parms GetProfileSettingValue_Parms;
	GetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValue, &GetProfileSettingValue_Parms, NULL );

	pFnGetProfileSettingValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValue_Parms.Value, 0xC );

	return GetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.IsProfileSettingIdMapped
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

bool UOnlineProfileSettings::IsProfileSettingIdMapped ( int ProfileSettingId )
{
	static UFunction* pFnIsProfileSettingIdMapped = NULL;

	if ( ! pFnIsProfileSettingIdMapped )
		pFnIsProfileSettingIdMapped = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.IsProfileSettingIdMapped" );

	UOnlineProfileSettings_execIsProfileSettingIdMapped_Parms IsProfileSettingIdMapped_Parms;
	IsProfileSettingIdMapped_Parms.ProfileSettingId = ProfileSettingId;

	pFnIsProfileSettingIdMapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsProfileSettingIdMapped, &IsProfileSettingIdMapped_Parms, NULL );

	pFnIsProfileSettingIdMapped->FunctionFlags |= 0x400;

	return IsProfileSettingIdMapped_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ProfileSettingId               ( CPF_Parm )

struct FString UOnlineProfileSettings::GetProfileSettingColumnHeader ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingColumnHeader = NULL;

	if ( ! pFnGetProfileSettingColumnHeader )
		pFnGetProfileSettingColumnHeader = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingColumnHeader" );

	UOnlineProfileSettings_execGetProfileSettingColumnHeader_Parms GetProfileSettingColumnHeader_Parms;
	GetProfileSettingColumnHeader_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingColumnHeader, &GetProfileSettingColumnHeader_Parms, NULL );

	pFnGetProfileSettingColumnHeader->FunctionFlags |= 0x400;

	return GetProfileSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlineProfileSettings::GetProfileSettingName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingName = NULL;

	if ( ! pFnGetProfileSettingName )
		pFnGetProfileSettingName = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingName" );

	UOnlineProfileSettings_execGetProfileSettingName_Parms GetProfileSettingName_Parms;
	GetProfileSettingName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingName, &GetProfileSettingName_Parms, NULL );

	pFnGetProfileSettingName->FunctionFlags |= 0x400;

	return GetProfileSettingName_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// int                            ProfileSettingId               ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingId = NULL;

	if ( ! pFnGetProfileSettingId )
		pFnGetProfileSettingId = UObject::FindObject< UFunction > ( "Function Engine.OnlineProfileSettings.GetProfileSettingId" );

	UOnlineProfileSettings_execGetProfileSettingId_Parms GetProfileSettingId_Parms;
	memcpy ( &GetProfileSettingId_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingId, &GetProfileSettingId_Parms, NULL );

	pFnGetProfileSettingId->FunctionFlags |= 0x400;

	if ( ProfileSettingId )
		*ProfileSettingId = GetProfileSettingId_Parms.ProfileSettingId;

	return GetProfileSettingId_Parms.ReturnValue;
};

// Function Engine.OnlineStats.GetViewName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ViewId                         ( CPF_Parm )

struct FName UOnlineStats::GetViewName ( int ViewId )
{
	static UFunction* pFnGetViewName = NULL;

	if ( ! pFnGetViewName )
		pFnGetViewName = UObject::FindObject< UFunction > ( "Function Engine.OnlineStats.GetViewName" );

	UOnlineStats_execGetViewName_Parms GetViewName_Parms;
	GetViewName_Parms.ViewId = ViewId;

	pFnGetViewName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewName, &GetViewName_Parms, NULL );

	pFnGetViewName->FunctionFlags |= 0x400;

	return GetViewName_Parms.ReturnValue;
};

// Function Engine.OnlineStats.GetViewId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ViewName                       ( CPF_Parm )
// int                            ViewId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStats::GetViewId ( struct FName ViewName, int* ViewId )
{
	static UFunction* pFnGetViewId = NULL;

	if ( ! pFnGetViewId )
		pFnGetViewId = UObject::FindObject< UFunction > ( "Function Engine.OnlineStats.GetViewId" );

	UOnlineStats_execGetViewId_Parms GetViewId_Parms;
	memcpy ( &GetViewId_Parms.ViewName, &ViewName, 0x8 );

	pFnGetViewId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewId, &GetViewId_Parms, NULL );

	pFnGetViewId->FunctionFlags |= 0x400;

	if ( ViewId )
		*ViewId = GetViewId_Parms.ViewId;

	return GetViewId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.OnStatsReadComplete
// [0x00120000] 
// Parameters infos:

void UOnlineStatsRead::OnStatsReadComplete ( )
{
	static UFunction* pFnOnStatsReadComplete = NULL;

	if ( ! pFnOnStatsReadComplete )
		pFnOnStatsReadComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsRead.OnStatsReadComplete" );

	UOnlineStatsRead_execOnStatsReadComplete_Parms OnStatsReadComplete_Parms;

	this->ProcessEvent ( pFnOnStatsReadComplete, &OnStatsReadComplete_Parms, NULL );
};

// Function Engine.OnlineStatsWrite.DecrementIntStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementIntStat ( int StatId, int DecBy )
{
	static UFunction* pFnDecrementIntStat = NULL;

	if ( ! pFnDecrementIntStat )
		pFnDecrementIntStat = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.DecrementIntStat" );

	UOnlineStatsWrite_execDecrementIntStat_Parms DecrementIntStat_Parms;
	DecrementIntStat_Parms.StatId = StatId;
	DecrementIntStat_Parms.DecBy = DecBy;

	pFnDecrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementIntStat, &DecrementIntStat_Parms, NULL );

	pFnDecrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.DecrementFloatStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementFloatStat ( int StatId, float DecBy )
{
	static UFunction* pFnDecrementFloatStat = NULL;

	if ( ! pFnDecrementFloatStat )
		pFnDecrementFloatStat = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.DecrementFloatStat" );

	UOnlineStatsWrite_execDecrementFloatStat_Parms DecrementFloatStat_Parms;
	DecrementFloatStat_Parms.StatId = StatId;
	DecrementFloatStat_Parms.DecBy = DecBy;

	pFnDecrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementFloatStat, &DecrementFloatStat_Parms, NULL );

	pFnDecrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementIntStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementIntStat ( int StatId, int IncBy )
{
	static UFunction* pFnIncrementIntStat = NULL;

	if ( ! pFnIncrementIntStat )
		pFnIncrementIntStat = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.IncrementIntStat" );

	UOnlineStatsWrite_execIncrementIntStat_Parms IncrementIntStat_Parms;
	IncrementIntStat_Parms.StatId = StatId;
	IncrementIntStat_Parms.IncBy = IncBy;

	pFnIncrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementIntStat, &IncrementIntStat_Parms, NULL );

	pFnIncrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementFloatStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementFloatStat ( int StatId, float IncBy )
{
	static UFunction* pFnIncrementFloatStat = NULL;

	if ( ! pFnIncrementFloatStat )
		pFnIncrementFloatStat = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.IncrementFloatStat" );

	UOnlineStatsWrite_execIncrementFloatStat_Parms IncrementFloatStat_Parms;
	IncrementFloatStat_Parms.StatId = StatId;
	IncrementFloatStat_Parms.IncBy = IncBy;

	pFnIncrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementFloatStat, &IncrementFloatStat_Parms, NULL );

	pFnIncrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetIntStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetIntStat ( int StatId, int Value )
{
	static UFunction* pFnSetIntStat = NULL;

	if ( ! pFnSetIntStat )
		pFnSetIntStat = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.SetIntStat" );

	UOnlineStatsWrite_execSetIntStat_Parms SetIntStat_Parms;
	SetIntStat_Parms.StatId = StatId;
	SetIntStat_Parms.Value = Value;

	pFnSetIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntStat, &SetIntStat_Parms, NULL );

	pFnSetIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetFloatStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetFloatStat ( int StatId, float Value )
{
	static UFunction* pFnSetFloatStat = NULL;

	if ( ! pFnSetFloatStat )
		pFnSetFloatStat = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.SetFloatStat" );

	UOnlineStatsWrite_execSetFloatStat_Parms SetFloatStat_Parms;
	SetFloatStat_Parms.StatId = StatId;
	SetFloatStat_Parms.Value = Value;

	pFnSetFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatStat, &SetFloatStat_Parms, NULL );

	pFnSetFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.GetStatName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StatId                         ( CPF_Parm )

struct FName UOnlineStatsWrite::GetStatName ( int StatId )
{
	static UFunction* pFnGetStatName = NULL;

	if ( ! pFnGetStatName )
		pFnGetStatName = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.GetStatName" );

	UOnlineStatsWrite_execGetStatName_Parms GetStatName_Parms;
	GetStatName_Parms.StatId = StatId;

	pFnGetStatName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatName, &GetStatName_Parms, NULL );

	pFnGetStatName->FunctionFlags |= 0x400;

	return GetStatName_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.GetStatId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StatName                       ( CPF_Parm )
// int                            StatId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsWrite::GetStatId ( struct FName StatName, int* StatId )
{
	static UFunction* pFnGetStatId = NULL;

	if ( ! pFnGetStatId )
		pFnGetStatId = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.GetStatId" );

	UOnlineStatsWrite_execGetStatId_Parms GetStatId_Parms;
	memcpy ( &GetStatId_Parms.StatName, &StatName, 0x8 );

	pFnGetStatId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatId, &GetStatId_Parms, NULL );

	pFnGetStatId->FunctionFlags |= 0x400;

	if ( StatId )
		*StatId = GetStatId_Parms.StatId;

	return GetStatId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// [0x00120000] 
// Parameters infos:

void UOnlineStatsWrite::OnStatsWriteComplete ( )
{
	static UFunction* pFnOnStatsWriteComplete = NULL;

	if ( ! pFnOnStatsWriteComplete )
		pFnOnStatsWriteComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsWrite.OnStatsWriteComplete" );

	UOnlineStatsWrite_execOnStatsWriteComplete_Parms OnStatsWriteComplete_Parms;

	this->ProcessEvent ( pFnOnStatsWriteComplete, &OnStatsWriteComplete_Parms, NULL );
};

// Function Engine.OnlineSubsystem.StringToUniqueNetId
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UniqueNetIdString              ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            out_UniqueId                   ( CPF_Parm | CPF_OutParm )

bool UOnlineSubsystem::StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId )
{
	static UFunction* pFnStringToUniqueNetId = NULL;

	if ( ! pFnStringToUniqueNetId )
		pFnStringToUniqueNetId = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.StringToUniqueNetId" );

	UOnlineSubsystem_execStringToUniqueNetId_Parms StringToUniqueNetId_Parms;
	memcpy ( &StringToUniqueNetId_Parms.UniqueNetIdString, &UniqueNetIdString, 0xC );

	pFnStringToUniqueNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStringToUniqueNetId, &StringToUniqueNetId_Parms, NULL );

	pFnStringToUniqueNetId->FunctionFlags |= 0x400;

	if ( out_UniqueId )
		memcpy ( out_UniqueId, &StringToUniqueNetId_Parms.out_UniqueId, 0x8 );

	return StringToUniqueNetId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.UniqueNetIdToString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FUniqueNetId            IdToConvert                    ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FString UOnlineSubsystem::UniqueNetIdToString ( struct FUniqueNetId* IdToConvert )
{
	static UFunction* pFnUniqueNetIdToString = NULL;

	if ( ! pFnUniqueNetIdToString )
		pFnUniqueNetIdToString = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.UniqueNetIdToString" );

	UOnlineSubsystem_execUniqueNetIdToString_Parms UniqueNetIdToString_Parms;

	pFnUniqueNetIdToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUniqueNetIdToString, &UniqueNetIdToString_Parms, NULL );

	pFnUniqueNetIdToString->FunctionFlags |= 0x400;

	if ( IdToConvert )
		memcpy ( IdToConvert, &UniqueNetIdToString_Parms.IdToConvert, 0x8 );

	return UniqueNetIdToString_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetNamedInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InterfaceName                  ( CPF_Parm )

class UObject* UOnlineSubsystem::eventGetNamedInterface ( struct FName InterfaceName )
{
	static UFunction* pFnGetNamedInterface = NULL;

	if ( ! pFnGetNamedInterface )
		pFnGetNamedInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.GetNamedInterface" );

	UOnlineSubsystem_eventGetNamedInterface_Parms GetNamedInterface_Parms;
	memcpy ( &GetNamedInterface_Parms.InterfaceName, &InterfaceName, 0x8 );

	this->ProcessEvent ( pFnGetNamedInterface, &GetNamedInterface_Parms, NULL );

	return GetNamedInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetNamedInteface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   InterfaceName                  ( CPF_Parm )
// class UObject*                 NewInterface                   ( CPF_Parm )

void UOnlineSubsystem::eventSetNamedInteface ( struct FName InterfaceName, class UObject* NewInterface )
{
	static UFunction* pFnSetNamedInteface = NULL;

	if ( ! pFnSetNamedInteface )
		pFnSetNamedInteface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetNamedInteface" );

	UOnlineSubsystem_eventSetNamedInteface_Parms SetNamedInteface_Parms;
	memcpy ( &SetNamedInteface_Parms.InterfaceName, &InterfaceName, 0x8 );
	SetNamedInteface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNamedInteface, &SetNamedInteface_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetNewsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetNewsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetNewsInterface = NULL;

	if ( ! pFnSetNewsInterface )
		pFnSetNewsInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetNewsInterface" );

	UOnlineSubsystem_eventSetNewsInterface_Parms SetNewsInterface_Parms;
	SetNewsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNewsInterface, &SetNewsInterface_Parms, NULL );

	return SetNewsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetStatsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetStatsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetStatsInterface = NULL;

	if ( ! pFnSetStatsInterface )
		pFnSetStatsInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetStatsInterface" );

	UOnlineSubsystem_eventSetStatsInterface_Parms SetStatsInterface_Parms;
	SetStatsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetStatsInterface, &SetStatsInterface_Parms, NULL );

	return SetStatsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetVoiceInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetVoiceInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetVoiceInterface = NULL;

	if ( ! pFnSetVoiceInterface )
		pFnSetVoiceInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetVoiceInterface" );

	UOnlineSubsystem_eventSetVoiceInterface_Parms SetVoiceInterface_Parms;
	SetVoiceInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetVoiceInterface, &SetVoiceInterface_Parms, NULL );

	return SetVoiceInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetContentInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetContentInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetContentInterface = NULL;

	if ( ! pFnSetContentInterface )
		pFnSetContentInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetContentInterface" );

	UOnlineSubsystem_eventSetContentInterface_Parms SetContentInterface_Parms;
	SetContentInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetContentInterface, &SetContentInterface_Parms, NULL );

	return SetContentInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetGameInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetGameInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetGameInterface = NULL;

	if ( ! pFnSetGameInterface )
		pFnSetGameInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetGameInterface" );

	UOnlineSubsystem_eventSetGameInterface_Parms SetGameInterface_Parms;
	SetGameInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetGameInterface, &SetGameInterface_Parms, NULL );

	return SetGameInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetSystemInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetSystemInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetSystemInterface = NULL;

	if ( ! pFnSetSystemInterface )
		pFnSetSystemInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetSystemInterface" );

	UOnlineSubsystem_eventSetSystemInterface_Parms SetSystemInterface_Parms;
	SetSystemInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetSystemInterface, &SetSystemInterface_Parms, NULL );

	return SetSystemInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterfaceEx ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterfaceEx = NULL;

	if ( ! pFnSetPlayerInterfaceEx )
		pFnSetPlayerInterfaceEx = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetPlayerInterfaceEx" );

	UOnlineSubsystem_eventSetPlayerInterfaceEx_Parms SetPlayerInterfaceEx_Parms;
	SetPlayerInterfaceEx_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterfaceEx, &SetPlayerInterfaceEx_Parms, NULL );

	return SetPlayerInterfaceEx_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterface = NULL;

	if ( ! pFnSetPlayerInterface )
		pFnSetPlayerInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetPlayerInterface" );

	UOnlineSubsystem_eventSetPlayerInterface_Parms SetPlayerInterface_Parms;
	SetPlayerInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterface, &SetPlayerInterface_Parms, NULL );

	return SetPlayerInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetAccountInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetAccountInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetAccountInterface = NULL;

	if ( ! pFnSetAccountInterface )
		pFnSetAccountInterface = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.SetAccountInterface" );

	UOnlineSubsystem_eventSetAccountInterface_Parms SetAccountInterface_Parms;
	SetAccountInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetAccountInterface, &SetAccountInterface_Parms, NULL );

	return SetAccountInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.Exit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineSubsystem::eventExit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.Exit" );

	UOnlineSubsystem_eventExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.OnlineSubsystem.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.OnlineSubsystem.Init" );

	UOnlineSubsystem_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;

	return Init_Parms.ReturnValue;
};

// Function Engine.PathGraph.ShowLCDebuggingInformation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 pr_Canvas                      ( CPF_Parm )

void APathGraph::ShowLCDebuggingInformation ( class UCanvas* pr_Canvas )
{
	static UFunction* pFnShowLCDebuggingInformation = NULL;

	if ( ! pFnShowLCDebuggingInformation )
		pFnShowLCDebuggingInformation = UObject::FindObject< UFunction > ( "Function Engine.PathGraph.ShowLCDebuggingInformation" );

	APathGraph_execShowLCDebuggingInformation_Parms ShowLCDebuggingInformation_Parms;
	ShowLCDebuggingInformation_Parms.pr_Canvas = pr_Canvas;

	pFnShowLCDebuggingInformation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowLCDebuggingInformation, &ShowLCDebuggingInformation_Parms, NULL );

	pFnShowLCDebuggingInformation->FunctionFlags |= 0x400;
};

// Function Engine.PathGraph.ConvertWeightToRGB
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fValue                         ( CPF_Parm )

struct FLinearColor APathGraph::ConvertWeightToRGB ( float fValue )
{
	static UFunction* pFnConvertWeightToRGB = NULL;

	if ( ! pFnConvertWeightToRGB )
		pFnConvertWeightToRGB = UObject::FindObject< UFunction > ( "Function Engine.PathGraph.ConvertWeightToRGB" );

	APathGraph_execConvertWeightToRGB_Parms ConvertWeightToRGB_Parms;
	ConvertWeightToRGB_Parms.fValue = fValue;

	pFnConvertWeightToRGB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConvertWeightToRGB, &ConvertWeightToRGB_Parms, NULL );

	pFnConvertWeightToRGB->FunctionFlags |= 0x400;

	return ConvertWeightToRGB_Parms.ReturnValue;
};

// Function Engine.PathNode.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APathNode::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = UObject::FindObject< UFunction > ( "Function Engine.PathNode.GetDebugAbbrev" );

	APathNode_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.RWTechNode.UndoLastEdgeDisconnection
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URWTechNode::UndoLastEdgeDisconnection ( )
{
	static UFunction* pFnUndoLastEdgeDisconnection = NULL;

	if ( ! pFnUndoLastEdgeDisconnection )
		pFnUndoLastEdgeDisconnection = UObject::FindObject< UFunction > ( "Function Engine.RWTechNode.UndoLastEdgeDisconnection" );

	URWTechNode_execUndoLastEdgeDisconnection_Parms UndoLastEdgeDisconnection_Parms;

	pFnUndoLastEdgeDisconnection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUndoLastEdgeDisconnection, &UndoLastEdgeDisconnection_Parms, NULL );

	pFnUndoLastEdgeDisconnection->FunctionFlags |= 0x400;

	return UndoLastEdgeDisconnection_Parms.ReturnValue;
};

// Function Engine.RWTechNode.DisconnectAllEdgesExceptOne
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            pr_nEdgeIDNotToDisconnect      ( CPF_Parm )

bool URWTechNode::DisconnectAllEdgesExceptOne ( int pr_nEdgeIDNotToDisconnect )
{
	static UFunction* pFnDisconnectAllEdgesExceptOne = NULL;

	if ( ! pFnDisconnectAllEdgesExceptOne )
		pFnDisconnectAllEdgesExceptOne = UObject::FindObject< UFunction > ( "Function Engine.RWTechNode.DisconnectAllEdgesExceptOne" );

	URWTechNode_execDisconnectAllEdgesExceptOne_Parms DisconnectAllEdgesExceptOne_Parms;
	DisconnectAllEdgesExceptOne_Parms.pr_nEdgeIDNotToDisconnect = pr_nEdgeIDNotToDisconnect;

	pFnDisconnectAllEdgesExceptOne->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisconnectAllEdgesExceptOne, &DisconnectAllEdgesExceptOne_Parms, NULL );

	pFnDisconnectAllEdgesExceptOne->FunctionFlags |= 0x400;

	return DisconnectAllEdgesExceptOne_Parms.ReturnValue;
};

// Function Engine.RWTechNode.DisconnectAllEdges
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URWTechNode::DisconnectAllEdges ( )
{
	static UFunction* pFnDisconnectAllEdges = NULL;

	if ( ! pFnDisconnectAllEdges )
		pFnDisconnectAllEdges = UObject::FindObject< UFunction > ( "Function Engine.RWTechNode.DisconnectAllEdges" );

	URWTechNode_execDisconnectAllEdges_Parms DisconnectAllEdges_Parms;

	pFnDisconnectAllEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisconnectAllEdges, &DisconnectAllEdges_Parms, NULL );

	pFnDisconnectAllEdges->FunctionFlags |= 0x400;

	return DisconnectAllEdges_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.GetLaneCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int URWTechReachSpec::GetLaneCount ( )
{
	static UFunction* pFnGetLaneCount = NULL;

	if ( ! pFnGetLaneCount )
		pFnGetLaneCount = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.GetLaneCount" );

	URWTechReachSpec_execGetLaneCount_Parms GetLaneCount_Parms;

	pFnGetLaneCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLaneCount, &GetLaneCount_Parms, NULL );

	pFnGetLaneCount->FunctionFlags |= 0x400;

	return GetLaneCount_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.GetEdgeIntersection
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class URWTechReachSpec*        pCrossingEdge                  ( CPF_Parm )
// float                          U                              ( CPF_Parm | CPF_OutParm )

bool URWTechReachSpec::GetEdgeIntersection ( class URWTechReachSpec* pCrossingEdge, float* U )
{
	static UFunction* pFnGetEdgeIntersection = NULL;

	if ( ! pFnGetEdgeIntersection )
		pFnGetEdgeIntersection = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.GetEdgeIntersection" );

	URWTechReachSpec_execGetEdgeIntersection_Parms GetEdgeIntersection_Parms;
	GetEdgeIntersection_Parms.pCrossingEdge = pCrossingEdge;

	pFnGetEdgeIntersection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEdgeIntersection, &GetEdgeIntersection_Parms, NULL );

	pFnGetEdgeIntersection->FunctionFlags |= 0x400;

	if ( U )
		*U = GetEdgeIntersection_Parms.U;

	return GetEdgeIntersection_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.GetOtherDirectionEdge
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class URWTechReachSpec*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class URWTechReachSpec* URWTechReachSpec::GetOtherDirectionEdge ( )
{
	static UFunction* pFnGetOtherDirectionEdge = NULL;

	if ( ! pFnGetOtherDirectionEdge )
		pFnGetOtherDirectionEdge = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.GetOtherDirectionEdge" );

	URWTechReachSpec_execGetOtherDirectionEdge_Parms GetOtherDirectionEdge_Parms;

	pFnGetOtherDirectionEdge->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOtherDirectionEdge, &GetOtherDirectionEdge_Parms, NULL );

	pFnGetOtherDirectionEdge->FunctionFlags |= 0x400;

	return GetOtherDirectionEdge_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.GetMidpoint
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 pr_vMidpoint                   ( CPF_Parm | CPF_OutParm )

void URWTechReachSpec::GetMidpoint ( struct FVector* pr_vMidpoint )
{
	static UFunction* pFnGetMidpoint = NULL;

	if ( ! pFnGetMidpoint )
		pFnGetMidpoint = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.GetMidpoint" );

	URWTechReachSpec_execGetMidpoint_Parms GetMidpoint_Parms;

	pFnGetMidpoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMidpoint, &GetMidpoint_Parms, NULL );

	pFnGetMidpoint->FunctionFlags |= 0x400;

	if ( pr_vMidpoint )
		memcpy ( pr_vMidpoint, &GetMidpoint_Parms.pr_vMidpoint, 0xC );
};

// Function Engine.RWTechReachSpec.GetReferenceIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class URWTechReachSpec*        pr_pRefEdge                    ( CPF_Const | CPF_Parm )

int URWTechReachSpec::GetReferenceIndex ( class URWTechReachSpec* pr_pRefEdge )
{
	static UFunction* pFnGetReferenceIndex = NULL;

	if ( ! pFnGetReferenceIndex )
		pFnGetReferenceIndex = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.GetReferenceIndex" );

	URWTechReachSpec_execGetReferenceIndex_Parms GetReferenceIndex_Parms;
	GetReferenceIndex_Parms.pr_pRefEdge = pr_pRefEdge;

	pFnGetReferenceIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReferenceIndex, &GetReferenceIndex_Parms, NULL );

	pFnGetReferenceIndex->FunctionFlags |= 0x400;

	return GetReferenceIndex_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.GenerateDTNodes
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class URWTechNode*             pr_pStartDTNode                ( CPF_Parm )
// class URWTechReachSpec*        pr_pNextPFEdge                 ( CPF_Parm )
// unsigned long                  pr_bRemoveExistingNodes        ( CPF_OptionalParm | CPF_Parm )
// TArray< class URWTechNode* >   pr_aOutNodes                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void URWTechReachSpec::GenerateDTNodes ( class URWTechNode* pr_pStartDTNode, class URWTechReachSpec* pr_pNextPFEdge, unsigned long pr_bRemoveExistingNodes, TArray< class URWTechNode* >* pr_aOutNodes )
{
	static UFunction* pFnGenerateDTNodes = NULL;

	if ( ! pFnGenerateDTNodes )
		pFnGenerateDTNodes = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.GenerateDTNodes" );

	URWTechReachSpec_execGenerateDTNodes_Parms GenerateDTNodes_Parms;
	GenerateDTNodes_Parms.pr_pStartDTNode = pr_pStartDTNode;
	GenerateDTNodes_Parms.pr_pNextPFEdge = pr_pNextPFEdge;
	GenerateDTNodes_Parms.pr_bRemoveExistingNodes = pr_bRemoveExistingNodes;

	pFnGenerateDTNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateDTNodes, &GenerateDTNodes_Parms, NULL );

	pFnGenerateDTNodes->FunctionFlags |= 0x400;

	if ( pr_aOutNodes )
		memcpy ( pr_aOutNodes, &GenerateDTNodes_Parms.pr_aOutNodes, 0xC );
};

// Function Engine.RWTechReachSpec.Render2D
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FLinearColor            Col                            ( CPF_Parm )

void URWTechReachSpec::Render2D ( class UCanvas* Canvas, struct FLinearColor Col )
{
	static UFunction* pFnRender2D = NULL;

	if ( ! pFnRender2D )
		pFnRender2D = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.Render2D" );

	URWTechReachSpec_execRender2D_Parms Render2D_Parms;
	Render2D_Parms.Canvas = Canvas;
	memcpy ( &Render2D_Parms.Col, &Col, 0x10 );

	pFnRender2D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRender2D, &Render2D_Parms, NULL );

	pFnRender2D->FunctionFlags |= 0x400;
};

// Function Engine.RWTechReachSpec.Render
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FColor                  Col                            ( CPF_Parm )
// float                          fZOffset                       ( CPF_Parm )

void URWTechReachSpec::Render ( class UCanvas* Canvas, struct FColor Col, float fZOffset )
{
	static UFunction* pFnRender = NULL;

	if ( ! pFnRender )
		pFnRender = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.Render" );

	URWTechReachSpec_execRender_Parms Render_Parms;
	Render_Parms.Canvas = Canvas;
	memcpy ( &Render_Parms.Col, &Col, 0x4 );
	Render_Parms.fZOffset = fZOffset;

	pFnRender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRender, &Render_Parms, NULL );

	pFnRender->FunctionFlags |= 0x400;
};

// Function Engine.RWTechReachSpec.IsInAllowedPathList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            pr_nEdgeId                     ( CPF_Parm )

bool URWTechReachSpec::IsInAllowedPathList ( int pr_nEdgeId )
{
	static UFunction* pFnIsInAllowedPathList = NULL;

	if ( ! pFnIsInAllowedPathList )
		pFnIsInAllowedPathList = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.IsInAllowedPathList" );

	URWTechReachSpec_execIsInAllowedPathList_Parms IsInAllowedPathList_Parms;
	IsInAllowedPathList_Parms.pr_nEdgeId = pr_nEdgeId;

	pFnIsInAllowedPathList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInAllowedPathList, &IsInAllowedPathList_Parms, NULL );

	pFnIsInAllowedPathList->FunctionFlags |= 0x400;

	return IsInAllowedPathList_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.GetLocationAndDirection
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          fDistance                      ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm | CPF_OutParm )
// struct FVector                 vDirection                     ( CPF_Parm | CPF_OutParm )

void URWTechReachSpec::GetLocationAndDirection ( float fDistance, struct FVector* vLocation, struct FVector* vDirection )
{
	static UFunction* pFnGetLocationAndDirection = NULL;

	if ( ! pFnGetLocationAndDirection )
		pFnGetLocationAndDirection = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.GetLocationAndDirection" );

	URWTechReachSpec_execGetLocationAndDirection_Parms GetLocationAndDirection_Parms;
	GetLocationAndDirection_Parms.fDistance = fDistance;

	pFnGetLocationAndDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocationAndDirection, &GetLocationAndDirection_Parms, NULL );

	pFnGetLocationAndDirection->FunctionFlags |= 0x400;

	if ( vLocation )
		memcpy ( vLocation, &GetLocationAndDirection_Parms.vLocation, 0xC );

	if ( vDirection )
		memcpy ( vDirection, &GetLocationAndDirection_Parms.vDirection, 0xC );
};

// Function Engine.RWTechReachSpec.IsVehicleTypeAllowed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  pr_type                        ( CPF_Parm )

bool URWTechReachSpec::IsVehicleTypeAllowed ( unsigned char pr_type )
{
	static UFunction* pFnIsVehicleTypeAllowed = NULL;

	if ( ! pFnIsVehicleTypeAllowed )
		pFnIsVehicleTypeAllowed = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.IsVehicleTypeAllowed" );

	URWTechReachSpec_execIsVehicleTypeAllowed_Parms IsVehicleTypeAllowed_Parms;
	IsVehicleTypeAllowed_Parms.pr_type = pr_type;

	pFnIsVehicleTypeAllowed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVehicleTypeAllowed, &IsVehicleTypeAllowed_Parms, NULL );

	pFnIsVehicleTypeAllowed->FunctionFlags |= 0x400;

	return IsVehicleTypeAllowed_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.FindEdgeInNextPaths
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class URWTechReachSpec*        pEdge                          ( CPF_Parm )

int URWTechReachSpec::FindEdgeInNextPaths ( class URWTechReachSpec* pEdge )
{
	static UFunction* pFnFindEdgeInNextPaths = NULL;

	if ( ! pFnFindEdgeInNextPaths )
		pFnFindEdgeInNextPaths = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.FindEdgeInNextPaths" );

	URWTechReachSpec_execFindEdgeInNextPaths_Parms FindEdgeInNextPaths_Parms;
	FindEdgeInNextPaths_Parms.pEdge = pEdge;

	pFnFindEdgeInNextPaths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEdgeInNextPaths, &FindEdgeInNextPaths_Parms, NULL );

	pFnFindEdgeInNextPaths->FunctionFlags |= 0x400;

	return FindEdgeInNextPaths_Parms.ReturnValue;
};

// Function Engine.RWTechReachSpec.IsEdgeInNextPaths
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class URWTechReachSpec*        pEdge                          ( CPF_Parm )

bool URWTechReachSpec::IsEdgeInNextPaths ( class URWTechReachSpec* pEdge )
{
	static UFunction* pFnIsEdgeInNextPaths = NULL;

	if ( ! pFnIsEdgeInNextPaths )
		pFnIsEdgeInNextPaths = UObject::FindObject< UFunction > ( "Function Engine.RWTechReachSpec.IsEdgeInNextPaths" );

	URWTechReachSpec_execIsEdgeInNextPaths_Parms IsEdgeInNextPaths_Parms;
	IsEdgeInNextPaths_Parms.pEdge = pEdge;

	pFnIsEdgeInNextPaths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEdgeInNextPaths, &IsEdgeInNextPaths_Parms, NULL );

	pFnIsEdgeInNextPaths->FunctionFlags |= 0x400;

	return IsEdgeInNextPaths_Parms.ReturnValue;
};

// Function Engine.Pawn.IsCurrentlyCarSurfing
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsCurrentlyCarSurfing ( )
{
	static UFunction* pFnIsCurrentlyCarSurfing = NULL;

	if ( ! pFnIsCurrentlyCarSurfing )
		pFnIsCurrentlyCarSurfing = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsCurrentlyCarSurfing" );

	APawn_execIsCurrentlyCarSurfing_Parms IsCurrentlyCarSurfing_Parms;

	pFnIsCurrentlyCarSurfing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCurrentlyCarSurfing, &IsCurrentlyCarSurfing_Parms, NULL );

	pFnIsCurrentlyCarSurfing->FunctionFlags |= 0x400;

	return IsCurrentlyCarSurfing_Parms.ReturnValue;
};

// Function Engine.Pawn.IsPawnImmobile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsPawnImmobile ( )
{
	static UFunction* pFnIsPawnImmobile = NULL;

	if ( ! pFnIsPawnImmobile )
		pFnIsPawnImmobile = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsPawnImmobile" );

	APawn_execIsPawnImmobile_Parms IsPawnImmobile_Parms;

	pFnIsPawnImmobile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnImmobile, &IsPawnImmobile_Parms, NULL );

	pFnIsPawnImmobile->FunctionFlags |= 0x400;

	return IsPawnImmobile_Parms.ReturnValue;
};

// Function Engine.Pawn.ClearPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearPathStep ( )
{
	static UFunction* pFnClearPathStep = NULL;

	if ( ! pFnClearPathStep )
		pFnClearPathStep = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ClearPathStep" );

	APawn_execClearPathStep_Parms ClearPathStep_Parms;

	pFnClearPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPathStep, &ClearPathStep_Parms, NULL );

	pFnClearPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.DrawPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::DrawPathStep ( class UCanvas* C )
{
	static UFunction* pFnDrawPathStep = NULL;

	if ( ! pFnDrawPathStep )
		pFnDrawPathStep = UObject::FindObject< UFunction > ( "Function Engine.Pawn.DrawPathStep" );

	APawn_execDrawPathStep_Parms DrawPathStep_Parms;
	DrawPathStep_Parms.C = C;

	pFnDrawPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPathStep, &DrawPathStep_Parms, NULL );

	pFnDrawPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathChild ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathChild = NULL;

	if ( ! pFnIncrementPathChild )
		pFnIncrementPathChild = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IncrementPathChild" );

	APawn_execIncrementPathChild_Parms IncrementPathChild_Parms;
	IncrementPathChild_Parms.Cnt = Cnt;
	IncrementPathChild_Parms.C = C;

	pFnIncrementPathChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathChild, &IncrementPathChild_Parms, NULL );

	pFnIncrementPathChild->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathStep ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathStep = NULL;

	if ( ! pFnIncrementPathStep )
		pFnIncrementPathStep = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IncrementPathStep" );

	APawn_execIncrementPathStep_Parms IncrementPathStep_Parms;
	IncrementPathStep_Parms.Cnt = Cnt;
	IncrementPathStep_Parms.C = C;

	pFnIncrementPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathStep, &IncrementPathStep_Parms, NULL );

	pFnIncrementPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.AddGoalEvaluator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathGoalEvaluator*      Evaluator                      ( CPF_Parm )

void APawn::AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator )
{
	static UFunction* pFnAddGoalEvaluator = NULL;

	if ( ! pFnAddGoalEvaluator )
		pFnAddGoalEvaluator = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AddGoalEvaluator" );

	APawn_execAddGoalEvaluator_Parms AddGoalEvaluator_Parms;
	AddGoalEvaluator_Parms.Evaluator = Evaluator;

	pFnAddGoalEvaluator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGoalEvaluator, &AddGoalEvaluator_Parms, NULL );

	pFnAddGoalEvaluator->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.AddPathConstraint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathConstraint*         Constraint                     ( CPF_Parm )

void APawn::AddPathConstraint ( class UPathConstraint* Constraint )
{
	static UFunction* pFnAddPathConstraint = NULL;

	if ( ! pFnAddPathConstraint )
		pFnAddPathConstraint = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AddPathConstraint" );

	APawn_execAddPathConstraint_Parms AddPathConstraint_Parms;
	AddPathConstraint_Parms.Constraint = Constraint;

	pFnAddPathConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPathConstraint, &AddPathConstraint_Parms, NULL );

	pFnAddPathConstraint->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClearConstraints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearConstraints ( )
{
	static UFunction* pFnClearConstraints = NULL;

	if ( ! pFnClearConstraints )
		pFnClearConstraints = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ClearConstraints" );

	APawn_execClearConstraints_Parms ClearConstraints_Parms;

	pFnClearConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearConstraints, &ClearConstraints_Parms, NULL );

	pFnClearConstraints->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSoakPause ( )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SoakPause" );

	APawn_eventSoakPause_Parms SoakPause_Parms;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.Pawn.AdjustCameraScale
// [0x00020100] 
// Parameters infos:
// unsigned long                  bMoveCameraIn                  ( CPF_Parm )

void APawn::AdjustCameraScale ( unsigned long bMoveCameraIn )
{
	static UFunction* pFnAdjustCameraScale = NULL;

	if ( ! pFnAdjustCameraScale )
		pFnAdjustCameraScale = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AdjustCameraScale" );

	APawn_execAdjustCameraScale_Parms AdjustCameraScale_Parms;
	AdjustCameraScale_Parms.bMoveCameraIn = bMoveCameraIn;

	this->ProcessEvent ( pFnAdjustCameraScale, &AdjustCameraScale_Parms, NULL );
};

// Function Engine.Pawn.MessagePlayer
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APawn::eventMessagePlayer ( struct FString msg )
{
	static UFunction* pFnMessagePlayer = NULL;

	if ( ! pFnMessagePlayer )
		pFnMessagePlayer = UObject::FindObject< UFunction > ( "Function Engine.Pawn.MessagePlayer" );

	APawn_eventMessagePlayer_Parms MessagePlayer_Parms;
	memcpy ( &MessagePlayer_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnMessagePlayer, &MessagePlayer_Parms, NULL );
};

// Function Engine.Pawn.EffectIsRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool APawn::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = UObject::FindObject< UFunction > ( "Function Engine.Pawn.EffectIsRelevant" );

	APawn_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Pawn.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void APawn::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = UObject::FindObject< UFunction > ( "Function Engine.Pawn.OnTeleport" );

	APawn_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Pawn.OnSetMaterial
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void APawn::eventOnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = UObject::FindObject< UFunction > ( "Function Engine.Pawn.OnSetMaterial" );

	APawn_eventOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.Pawn.InCombat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = UObject::FindObject< UFunction > ( "Function Engine.Pawn.InCombat" );

	APawn_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function Engine.Pawn.PoweredUp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::PoweredUp ( )
{
	static UFunction* pFnPoweredUp = NULL;

	if ( ! pFnPoweredUp )
		pFnPoweredUp = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PoweredUp" );

	APawn_execPoweredUp_Parms PoweredUp_Parms;

	this->ProcessEvent ( pFnPoweredUp, &PoweredUp_Parms, NULL );

	return PoweredUp_Parms.ReturnValue;
};

// Function Engine.Pawn.GetDamageScaling
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetDamageScaling ( )
{
	static UFunction* pFnGetDamageScaling = NULL;

	if ( ! pFnGetDamageScaling )
		pFnGetDamageScaling = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetDamageScaling" );

	APawn_execGetDamageScaling_Parms GetDamageScaling_Parms;

	this->ProcessEvent ( pFnGetDamageScaling, &GetDamageScaling_Parms, NULL );

	return GetDamageScaling_Parms.ReturnValue;
};

// Function Engine.Pawn.DoKismetAttachment
// [0x00020102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void APawn::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = UObject::FindObject< UFunction > ( "Function Engine.Pawn.DoKismetAttachment" );

	APawn_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Pawn.SpawnedByKismet
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SpawnedByKismet" );

	APawn_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Pawn.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsStationary" );

	APawn_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionExtent
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::GetCollisionExtent ( )
{
	static UFunction* pFnGetCollisionExtent = NULL;

	if ( ! pFnGetCollisionExtent )
		pFnGetCollisionExtent = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetCollisionExtent" );

	APawn_execGetCollisionExtent_Parms GetCollisionExtent_Parms;

	this->ProcessEvent ( pFnGetCollisionExtent, &GetCollisionExtent_Parms, NULL );

	return GetCollisionExtent_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionHeight
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionHeight ( )
{
	static UFunction* pFnGetCollisionHeight = NULL;

	if ( ! pFnGetCollisionHeight )
		pFnGetCollisionHeight = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetCollisionHeight" );

	APawn_execGetCollisionHeight_Parms GetCollisionHeight_Parms;

	this->ProcessEvent ( pFnGetCollisionHeight, &GetCollisionHeight_Parms, NULL );

	return GetCollisionHeight_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionRadius
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionRadius ( )
{
	static UFunction* pFnGetCollisionRadius = NULL;

	if ( ! pFnGetCollisionRadius )
		pFnGetCollisionRadius = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetCollisionRadius" );

	APawn_execGetCollisionRadius_Parms GetCollisionRadius_Parms;

	this->ProcessEvent ( pFnGetCollisionRadius, &GetCollisionRadius_Parms, NULL );

	return GetCollisionRadius_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CheatFly" );

	APawn_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CheatGhost" );

	APawn_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CheatWalk" );

	APawn_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Pawn.DrawHUD
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APawn::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function Engine.Pawn.DrawHUD" );

	APawn_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.Pawn.AddDefaultInventory
// [0x00020000] 
// Parameters infos:

void APawn::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AddDefaultInventory" );

	APawn_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.Pawn.StopDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void APawn::eventStopDriving ( class AVehicle* V )
{
	static UFunction* pFnStopDriving = NULL;

	if ( ! pFnStopDriving )
		pFnStopDriving = UObject::FindObject< UFunction > ( "Function Engine.Pawn.StopDriving" );

	APawn_eventStopDriving_Parms StopDriving_Parms;
	StopDriving_Parms.V = V;

	this->ProcessEvent ( pFnStopDriving, &StopDriving_Parms, NULL );
};

// Function Engine.Pawn.Suicide
// [0x00020002] 
// Parameters infos:

void APawn::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = UObject::FindObject< UFunction > ( "Function Engine.Pawn.Suicide" );

	APawn_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Pawn.GetVehicleBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AVehicle*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AVehicle* APawn::GetVehicleBase ( )
{
	static UFunction* pFnGetVehicleBase = NULL;

	if ( ! pFnGetVehicleBase )
		pFnGetVehicleBase = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetVehicleBase" );

	APawn_execGetVehicleBase_Parms GetVehicleBase_Parms;

	pFnGetVehicleBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVehicleBase, &GetVehicleBase_Parms, NULL );

	pFnGetVehicleBase->FunctionFlags |= 0x400;

	return GetVehicleBase_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayFootStepSound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void APawn::eventPlayFootStepSound ( int FootDown )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PlayFootStepSound" );

	APawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function Engine.Pawn.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = UObject::FindObject< UFunction > ( "Function Engine.Pawn.TornOff" );

	APawn_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Pawn.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void APawn::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PlayDying" );

	APawn_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Pawn.TurnOff
// [0x00020102] 
// Parameters infos:

void APawn::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = UObject::FindObject< UFunction > ( "Function Engine.Pawn.TurnOff" );

	APawn_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.Pawn.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void APawn::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PlayHit" );

	APawn_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function Engine.Pawn.PlayDyingSound
// [0x00020000] 
// Parameters infos:

void APawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PlayDyingSound" );

	APawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Engine.Pawn.GetDefaultJumpZ
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetDefaultJumpZ ( )
{
	static UFunction* pFnGetDefaultJumpZ = NULL;

	if ( ! pFnGetDefaultJumpZ )
		pFnGetDefaultJumpZ = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetDefaultJumpZ" );

	APawn_execGetDefaultJumpZ_Parms GetDefaultJumpZ_Parms;

	this->ProcessEvent ( pFnGetDefaultJumpZ, &GetDefaultJumpZ_Parms, NULL );

	return GetDefaultJumpZ_Parms.ReturnValue;
};

// Function Engine.Pawn.DoJump
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool APawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = UObject::FindObject< UFunction > ( "Function Engine.Pawn.DoJump" );

	APawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	pFnDoJump->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	pFnDoJump->FunctionFlags |= 0x400;

	return DoJump_Parms.ReturnValue;
};

// Function Engine.Pawn.CheckWaterJump
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WallNormal                     ( CPF_Parm | CPF_OutParm )

bool APawn::CheckWaterJump ( struct FVector* WallNormal )
{
	static UFunction* pFnCheckWaterJump = NULL;

	if ( ! pFnCheckWaterJump )
		pFnCheckWaterJump = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CheckWaterJump" );

	APawn_execCheckWaterJump_Parms CheckWaterJump_Parms;

	this->ProcessEvent ( pFnCheckWaterJump, &CheckWaterJump_Parms, NULL );

	if ( WallNormal )
		memcpy ( WallNormal, &CheckWaterJump_Parms.WallNormal, 0xC );

	return CheckWaterJump_Parms.ReturnValue;
};

// Function Engine.Pawn.TakeDrowningDamage
// [0x00020000] 
// Parameters infos:

void APawn::TakeDrowningDamage ( )
{
	static UFunction* pFnTakeDrowningDamage = NULL;

	if ( ! pFnTakeDrowningDamage )
		pFnTakeDrowningDamage = UObject::FindObject< UFunction > ( "Function Engine.Pawn.TakeDrowningDamage" );

	APawn_execTakeDrowningDamage_Parms TakeDrowningDamage_Parms;

	this->ProcessEvent ( pFnTakeDrowningDamage, &TakeDrowningDamage_Parms, NULL );
};

// Function Engine.Pawn.IsInPain
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsInPain ( )
{
	static UFunction* pFnIsInPain = NULL;

	if ( ! pFnIsInPain )
		pFnIsInPain = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsInPain" );

	APawn_execIsInPain_Parms IsInPain_Parms;

	this->ProcessEvent ( pFnIsInPain, &IsInPain_Parms, NULL );

	return IsInPain_Parms.ReturnValue;
};

// Function Engine.Pawn.TouchingWaterVolume
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TouchingWaterVolume ( )
{
	static UFunction* pFnTouchingWaterVolume = NULL;

	if ( ! pFnTouchingWaterVolume )
		pFnTouchingWaterVolume = UObject::FindObject< UFunction > ( "Function Engine.Pawn.TouchingWaterVolume" );

	APawn_execTouchingWaterVolume_Parms TouchingWaterVolume_Parms;

	this->ProcessEvent ( pFnTouchingWaterVolume, &TouchingWaterVolume_Parms, NULL );

	return TouchingWaterVolume_Parms.ReturnValue;
};

// Function Engine.Pawn.Died
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nInventoryItemTypeID           ( CPF_OptionalParm | CPF_Parm )

bool APawn::eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nInventoryItemTypeID )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function Engine.Pawn.Died" );

	APawn_eventDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );
	Died_Parms.nInventoryItemTypeID = nInventoryItemTypeID;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Pawn.IsSameTeam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool APawn::eventIsSameTeam ( class APawn* Other )
{
	static UFunction* pFnIsSameTeam = NULL;

	if ( ! pFnIsSameTeam )
		pFnIsSameTeam = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsSameTeam" );

	APawn_eventIsSameTeam_Parms IsSameTeam_Parms;
	IsSameTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnIsSameTeam, &IsSameTeam_Parms, NULL );

	return IsSameTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeam
// [0x00020102] 
// Parameters infos:
// class ATeamInfo*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATeamInfo* APawn::GetTeam ( )
{
	static UFunction* pFnGetTeam = NULL;

	if ( ! pFnGetTeam )
		pFnGetTeam = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetTeam" );

	APawn_execGetTeam_Parms GetTeam_Parms;

	this->ProcessEvent ( pFnGetTeam, &GetTeam_Parms, NULL );

	return GetTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APawn::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetTeamNum" );

	APawn_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Pawn.SetKillInstigator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

class AController* APawn::SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType )
{
	static UFunction* pFnSetKillInstigator = NULL;

	if ( ! pFnSetKillInstigator )
		pFnSetKillInstigator = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetKillInstigator" );

	APawn_execSetKillInstigator_Parms SetKillInstigator_Parms;
	SetKillInstigator_Parms.InstigatedBy = InstigatedBy;
	SetKillInstigator_Parms.DamageType = DamageType;

	pFnSetKillInstigator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillInstigator, &SetKillInstigator_Parms, NULL );

	pFnSetKillInstigator->FunctionFlags |= 0x400;

	return SetKillInstigator_Parms.ReturnValue;
};

// Function Engine.Pawn.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void APawn::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function Engine.Pawn.NotifyTakeHit" );

	APawn_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Pawn.TakeRadiusDamageOnBones
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// TArray< struct FName >         Bones                          ( CPF_Parm | CPF_NeedCtorLink )

bool APawn::eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, TArray< struct FName > Bones )
{
	static UFunction* pFnTakeRadiusDamageOnBones = NULL;

	if ( ! pFnTakeRadiusDamageOnBones )
		pFnTakeRadiusDamageOnBones = UObject::FindObject< UFunction > ( "Function Engine.Pawn.TakeRadiusDamageOnBones" );

	APawn_eventTakeRadiusDamageOnBones_Parms TakeRadiusDamageOnBones_Parms;
	TakeRadiusDamageOnBones_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamageOnBones_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamageOnBones_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamageOnBones_Parms.DamageType = DamageType;
	TakeRadiusDamageOnBones_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamageOnBones_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamageOnBones_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamageOnBones_Parms.DamageCauser = DamageCauser;
	memcpy ( &TakeRadiusDamageOnBones_Parms.Bones, &Bones, 0xC );

	this->ProcessEvent ( pFnTakeRadiusDamageOnBones, &TakeRadiusDamageOnBones_Parms, NULL );

	return TakeRadiusDamageOnBones_Parms.ReturnValue;
};

// Function Engine.Pawn.PruneDamagedBoneList
// [0x00420000] 
// Parameters infos:
// TArray< struct FName >         Bones                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APawn::PruneDamagedBoneList ( TArray< struct FName >* Bones )
{
	static UFunction* pFnPruneDamagedBoneList = NULL;

	if ( ! pFnPruneDamagedBoneList )
		pFnPruneDamagedBoneList = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PruneDamagedBoneList" );

	APawn_execPruneDamagedBoneList_Parms PruneDamagedBoneList_Parms;

	this->ProcessEvent ( pFnPruneDamagedBoneList, &PruneDamagedBoneList_Parms, NULL );

	if ( Bones )
		memcpy ( Bones, &PruneDamagedBoneList_Parms.Bones, 0xC );
};

// Function Engine.Pawn.HealDamage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool APawn::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = UObject::FindObject< UFunction > ( "Function Engine.Pawn.HealDamage" );

	APawn_execHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Pawn.AdjustDamage
// [0x00420000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// int                            inDamage                       ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void APawn::AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AdjustDamage" );

	APawn_execAdjustDamage_Parms AdjustDamage_Parms;
	AdjustDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDamage_Parms.DamageType = DamageType;
	memcpy ( &AdjustDamage_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );

	if ( inDamage )
		*inDamage = AdjustDamage_Parms.inDamage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDamage_Parms.Momentum, 0xC );
};

// Function Engine.Pawn.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void APawn::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetMovementPhysics" );

	APawn_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function Engine.Pawn.Gasp
// [0x00020000] 
// Parameters infos:

void APawn::Gasp ( )
{
	static UFunction* pFnGasp = NULL;

	if ( ! pFnGasp )
		pFnGasp = UObject::FindObject< UFunction > ( "Function Engine.Pawn.Gasp" );

	APawn_execGasp_Parms Gasp_Parms;

	this->ProcessEvent ( pFnGasp, &Gasp_Parms, NULL );
};

// Function Engine.Pawn.OnGiveInventory
// [0x00020100] 
// Parameters infos:
// class USeqAct_GiveInventory*   inAction                       ( CPF_Parm )

void APawn::OnGiveInventory ( class USeqAct_GiveInventory* inAction )
{
	static UFunction* pFnOnGiveInventory = NULL;

	if ( ! pFnOnGiveInventory )
		pFnOnGiveInventory = UObject::FindObject< UFunction > ( "Function Engine.Pawn.OnGiveInventory" );

	APawn_execOnGiveInventory_Parms OnGiveInventory_Parms;
	OnGiveInventory_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnGiveInventory, &OnGiveInventory_Parms, NULL );
};

// Function Engine.Pawn.OnAssignController
// [0x00020002] 
// Parameters infos:
// class USeqAct_AssignController* inAction                       ( CPF_Parm )

void APawn::OnAssignController ( class USeqAct_AssignController* inAction )
{
	static UFunction* pFnOnAssignController = NULL;

	if ( ! pFnOnAssignController )
		pFnOnAssignController = UObject::FindObject< UFunction > ( "Function Engine.Pawn.OnAssignController" );

	APawn_execOnAssignController_Parms OnAssignController_Parms;
	OnAssignController_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnAssignController, &OnAssignController_Parms, NULL );
};

// Function Engine.Pawn.SpawnDefaultController
// [0x00020002] 
// Parameters infos:

void APawn::SpawnDefaultController ( )
{
	static UFunction* pFnSpawnDefaultController = NULL;

	if ( ! pFnSpawnDefaultController )
		pFnSpawnDefaultController = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SpawnDefaultController" );

	APawn_execSpawnDefaultController_Parms SpawnDefaultController_Parms;

	this->ProcessEvent ( pFnSpawnDefaultController, &SpawnDefaultController_Parms, NULL );
};

// Function Engine.Pawn.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PostBeginPlay" );

	APawn_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PreBeginPlay" );

	APawn_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.Pawn.Destroyed" );

	APawn_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Pawn.DetachFromController
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDestroyController             ( CPF_OptionalParm | CPF_Parm )

void APawn::DetachFromController ( unsigned long bDestroyController )
{
	static UFunction* pFnDetachFromController = NULL;

	if ( ! pFnDetachFromController )
		pFnDetachFromController = UObject::FindObject< UFunction > ( "Function Engine.Pawn.DetachFromController" );

	APawn_execDetachFromController_Parms DetachFromController_Parms;
	DetachFromController_Parms.bDestroyController = bDestroyController;

	this->ProcessEvent ( pFnDetachFromController, &DetachFromController_Parms, NULL );
};

// Function Engine.Pawn.CrushedBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void APawn::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CrushedBy" );

	APawn_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Pawn.CanBeBaseForPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   aPawn                          ( CPF_Parm )

bool APawn::CanBeBaseForPawn ( class APawn* aPawn )
{
	static UFunction* pFnCanBeBaseForPawn = NULL;

	if ( ! pFnCanBeBaseForPawn )
		pFnCanBeBaseForPawn = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CanBeBaseForPawn" );

	APawn_execCanBeBaseForPawn_Parms CanBeBaseForPawn_Parms;
	CanBeBaseForPawn_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnCanBeBaseForPawn, &CanBeBaseForPawn_Parms, NULL );

	return CanBeBaseForPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.BaseChange
// [0x00020822] ( FUNC_Event )
// Parameters infos:

void APawn::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = UObject::FindObject< UFunction > ( "Function Engine.Pawn.BaseChange" );

	APawn_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Pawn.JumpOffPawn
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void APawn::eventJumpOffPawn ( )
{
	static UFunction* pFnJumpOffPawn = NULL;

	if ( ! pFnJumpOffPawn )
		pFnJumpOffPawn = UObject::FindObject< UFunction > ( "Function Engine.Pawn.JumpOffPawn" );

	APawn_eventJumpOffPawn_Parms JumpOffPawn_Parms;

	pFnJumpOffPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnJumpOffPawn, &JumpOffPawn_Parms, NULL );

	pFnJumpOffPawn->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.gibbedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::eventgibbedBy ( class AActor* Other )
{
	static UFunction* pFngibbedBy = NULL;

	if ( ! pFngibbedBy )
		pFngibbedBy = UObject::FindObject< UFunction > ( "Function Engine.Pawn.gibbedBy" );

	APawn_eventgibbedBy_Parms gibbedBy_Parms;
	gibbedBy_Parms.Other = Other;

	this->ProcessEvent ( pFngibbedBy, &gibbedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = UObject::FindObject< UFunction > ( "Function Engine.Pawn.EncroachedBy" );

	APawn_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = UObject::FindObject< UFunction > ( "Function Engine.Pawn.EncroachingOn" );

	APawn_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Pawn.FaceRotation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void APawn::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.FaceRotation" );

	APawn_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	pFnFaceRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );

	pFnFaceRotation->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClientSetRotation
// [0x00020002] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::ClientSetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ClientSetRotation" );

	APawn_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Pawn.ClientSetLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnClientSetLocation = NULL;

	if ( ! pFnClientSetLocation )
		pFnClientSetLocation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ClientSetLocation" );

	APawn_execClientSetLocation_Parms ClientSetLocation_Parms;
	memcpy ( &ClientSetLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ClientSetLocation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetLocation, &ClientSetLocation_Parms, NULL );
};

// Function Engine.Pawn.ClientReStartNative
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void APawn::ClientReStartNative ( )
{
	static UFunction* pFnClientReStartNative = NULL;

	if ( ! pFnClientReStartNative )
		pFnClientReStartNative = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ClientReStartNative" );

	APawn_execClientReStartNative_Parms ClientReStartNative_Parms;

	pFnClientReStartNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientReStartNative, &ClientReStartNative_Parms, NULL );

	pFnClientReStartNative->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClientRestart
// [0x00020102] 
// Parameters infos:

void APawn::ClientRestart ( )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ClientRestart" );

	APawn_execClientRestart_Parms ClientRestart_Parms;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.Pawn.Restart
// [0x00020000] 
// Parameters infos:

void APawn::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = UObject::FindObject< UFunction > ( "Function Engine.Pawn.Restart" );

	APawn_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Pawn.KilledBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void APawn::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = UObject::FindObject< UFunction > ( "Function Engine.Pawn.KilledBy" );

	APawn_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Pawn.AddVelocity
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void APawn::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AddVelocity" );

	APawn_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.Pawn.RestartPlayer
// [0x00020000] 
// Parameters infos:

void APawn::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function Engine.Pawn.RestartPlayer" );

	APawn_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Engine.Pawn.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = UObject::FindObject< UFunction > ( "Function Engine.Pawn.StartCrouch" );

	APawn_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function Engine.Pawn.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = UObject::FindObject< UFunction > ( "Function Engine.Pawn.EndCrouch" );

	APawn_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function Engine.Pawn.ShouldCrouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCrouch                        ( CPF_Parm )
// unsigned long                  bFromServer                    ( CPF_OptionalParm | CPF_Parm )

void APawn::ShouldCrouch ( unsigned long bCrouch, unsigned long bFromServer )
{
	static UFunction* pFnShouldCrouch = NULL;

	if ( ! pFnShouldCrouch )
		pFnShouldCrouch = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ShouldCrouch" );

	APawn_execShouldCrouch_Parms ShouldCrouch_Parms;
	ShouldCrouch_Parms.bCrouch = bCrouch;
	ShouldCrouch_Parms.bFromServer = bFromServer;

	pFnShouldCrouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldCrouch, &ShouldCrouch_Parms, NULL );

	pFnShouldCrouch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.UnCrouch
// [0x00020102] 
// Parameters infos:

void APawn::UnCrouch ( )
{
	static UFunction* pFnUnCrouch = NULL;

	if ( ! pFnUnCrouch )
		pFnUnCrouch = UObject::FindObject< UFunction > ( "Function Engine.Pawn.UnCrouch" );

	APawn_execUnCrouch_Parms UnCrouch_Parms;

	this->ProcessEvent ( pFnUnCrouch, &UnCrouch_Parms, NULL );
};

// Function Engine.Pawn.OutsideWorldBounds
// [0x00020922] ( FUNC_Event )
// Parameters infos:

void APawn::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = UObject::FindObject< UFunction > ( "Function Engine.Pawn.OutsideWorldBounds" );

	APawn_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Pawn.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APawn::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = UObject::FindObject< UFunction > ( "Function Engine.Pawn.FellOutOfWorld" );

	APawn_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Pawn.ModifyVelocity
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 OldVelocity                    ( CPF_Parm )

void APawn::eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity )
{
	static UFunction* pFnModifyVelocity = NULL;

	if ( ! pFnModifyVelocity )
		pFnModifyVelocity = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ModifyVelocity" );

	APawn_eventModifyVelocity_Parms ModifyVelocity_Parms;
	ModifyVelocity_Parms.DeltaTime = DeltaTime;
	memcpy ( &ModifyVelocity_Parms.OldVelocity, &OldVelocity, 0xC );

	this->ProcessEvent ( pFnModifyVelocity, &ModifyVelocity_Parms, NULL );
};

// Function Engine.Pawn.JumpOutOfWater
// [0x00020002] 
// Parameters infos:
// struct FVector                 jumpDir                        ( CPF_Parm )

void APawn::JumpOutOfWater ( struct FVector jumpDir )
{
	static UFunction* pFnJumpOutOfWater = NULL;

	if ( ! pFnJumpOutOfWater )
		pFnJumpOutOfWater = UObject::FindObject< UFunction > ( "Function Engine.Pawn.JumpOutOfWater" );

	APawn_execJumpOutOfWater_Parms JumpOutOfWater_Parms;
	memcpy ( &JumpOutOfWater_Parms.jumpDir, &jumpDir, 0xC );

	this->ProcessEvent ( pFnJumpOutOfWater, &JumpOutOfWater_Parms, NULL );
};

// Function Engine.Pawn.FinishedInterpolation
// [0x00020002] 
// Parameters infos:

void APawn::FinishedInterpolation ( )
{
	static UFunction* pFnFinishedInterpolation = NULL;

	if ( ! pFnFinishedInterpolation )
		pFnFinishedInterpolation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.FinishedInterpolation" );

	APawn_execFinishedInterpolation_Parms FinishedInterpolation_Parms;

	this->ProcessEvent ( pFnFinishedInterpolation, &FinishedInterpolation_Parms, NULL );
};

// Function Engine.Pawn.ClientMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void APawn::eventClientMessage ( struct FString S, struct FName Type )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ClientMessage" );

	APawn_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0xC );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.Pawn.ReceiveLocalizedMessage
// [0x00020002] 
// Parameters infos:
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void APawn::ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ReceiveLocalizedMessage" );

	APawn_execReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;
	ReceiveLocalizedMessage_Parms.Message = Message;
	ReceiveLocalizedMessage_Parms.Switch = Switch;
	ReceiveLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	ReceiveLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	ReceiveLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function Engine.Pawn.AdjustedStrength
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::AdjustedStrength ( )
{
	static UFunction* pFnAdjustedStrength = NULL;

	if ( ! pFnAdjustedStrength )
		pFnAdjustedStrength = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AdjustedStrength" );

	APawn_execAdjustedStrength_Parms AdjustedStrength_Parms;

	this->ProcessEvent ( pFnAdjustedStrength, &AdjustedStrength_Parms, NULL );

	return AdjustedStrength_Parms.ReturnValue;
};

// Function Engine.Pawn.LineOfSightTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::LineOfSightTo ( class AActor* Other )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = UObject::FindObject< UFunction > ( "Function Engine.Pawn.LineOfSightTo" );

	APawn_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Pawn.SetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )

void APawn::SetMoveTarget ( class AActor* NewTarget )
{
	static UFunction* pFnSetMoveTarget = NULL;

	if ( ! pFnSetMoveTarget )
		pFnSetMoveTarget = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetMoveTarget" );

	APawn_execSetMoveTarget_Parms SetMoveTarget_Parms;
	SetMoveTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnSetMoveTarget, &SetMoveTarget_Parms, NULL );
};

// Function Engine.Pawn.GetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* APawn::GetMoveTarget ( )
{
	static UFunction* pFnGetMoveTarget = NULL;

	if ( ! pFnGetMoveTarget )
		pFnGetMoveTarget = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetMoveTarget" );

	APawn_execGetMoveTarget_Parms GetMoveTarget_Parms;

	this->ProcessEvent ( pFnGetMoveTarget, &GetMoveTarget_Parms, NULL );

	return GetMoveTarget_Parms.ReturnValue;
};

// Function Engine.Pawn.NearMoveTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::NearMoveTarget ( )
{
	static UFunction* pFnNearMoveTarget = NULL;

	if ( ! pFnNearMoveTarget )
		pFnNearMoveTarget = UObject::FindObject< UFunction > ( "Function Engine.Pawn.NearMoveTarget" );

	APawn_execNearMoveTarget_Parms NearMoveTarget_Parms;

	this->ProcessEvent ( pFnNearMoveTarget, &NearMoveTarget_Parms, NULL );

	return NearMoveTarget_Parms.ReturnValue;
};

// Function Engine.Pawn.AffectedByHitEffects
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::AffectedByHitEffects ( )
{
	static UFunction* pFnAffectedByHitEffects = NULL;

	if ( ! pFnAffectedByHitEffects )
		pFnAffectedByHitEffects = UObject::FindObject< UFunction > ( "Function Engine.Pawn.AffectedByHitEffects" );

	APawn_execAffectedByHitEffects_Parms AffectedByHitEffects_Parms;

	this->ProcessEvent ( pFnAffectedByHitEffects, &AffectedByHitEffects_Parms, NULL );

	return AffectedByHitEffects_Parms.ReturnValue;
};

// Function Engine.Pawn.InGodMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InGodMode ( )
{
	static UFunction* pFnInGodMode = NULL;

	if ( ! pFnInGodMode )
		pFnInGodMode = UObject::FindObject< UFunction > ( "Function Engine.Pawn.InGodMode" );

	APawn_execInGodMode_Parms InGodMode_Parms;

	this->ProcessEvent ( pFnInGodMode, &InGodMode_Parms, NULL );

	return InGodMode_Parms.ReturnValue;
};

// Function Engine.Pawn.SetViewRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::SetViewRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetViewRotation = NULL;

	if ( ! pFnSetViewRotation )
		pFnSetViewRotation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetViewRotation" );

	APawn_execSetViewRotation_Parms SetViewRotation_Parms;
	memcpy ( &SetViewRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnSetViewRotation, &SetViewRotation_Parms, NULL );
};

// Function Engine.Pawn.InFreeCam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::eventInFreeCam ( )
{
	static UFunction* pFnInFreeCam = NULL;

	if ( ! pFnInFreeCam )
		pFnInFreeCam = UObject::FindObject< UFunction > ( "Function Engine.Pawn.InFreeCam" );

	APawn_eventInFreeCam_Parms InFreeCam_Parms;

	this->ProcessEvent ( pFnInFreeCam, &InFreeCam_Parms, NULL );

	return InFreeCam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBaseAimRotation
// [0x00820122] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::GetBaseAimRotation ( )
{
	static UFunction* pFnGetBaseAimRotation = NULL;

	if ( ! pFnGetBaseAimRotation )
		pFnGetBaseAimRotation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetBaseAimRotation" );

	APawn_execGetBaseAimRotation_Parms GetBaseAimRotation_Parms;

	this->ProcessEvent ( pFnGetBaseAimRotation, &GetBaseAimRotation_Parms, NULL );

	return GetBaseAimRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetPawnViewLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::GetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetPawnViewLocation" );

	APawn_execGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	pFnGetPawnViewLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	pFnGetPawnViewLocation->FunctionFlags |= 0x400;

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetViewRotation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::GetViewRotation ( )
{
	static UFunction* pFnGetViewRotation = NULL;

	if ( ! pFnGetViewRotation )
		pFnGetViewRotation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetViewRotation" );

	APawn_execGetViewRotation_Parms GetViewRotation_Parms;

	pFnGetViewRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewRotation, &GetViewRotation_Parms, NULL );

	pFnGetViewRotation->FunctionFlags |= 0x400;

	return GetViewRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetActorEyesViewPoint
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APawn::GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetActorEyesViewPoint" );

	APawn_execGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	pFnGetActorEyesViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	pFnGetActorEyesViewPoint->FunctionFlags |= 0x400;

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Pawn.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void APawn::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ProcessViewRotation" );

	APawn_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Engine.Pawn.IsFirstPerson
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsFirstPerson ( )
{
	static UFunction* pFnIsFirstPerson = NULL;

	if ( ! pFnIsFirstPerson )
		pFnIsFirstPerson = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsFirstPerson" );

	APawn_execIsFirstPerson_Parms IsFirstPerson_Parms;

	this->ProcessEvent ( pFnIsFirstPerson, &IsFirstPerson_Parms, NULL );

	return IsFirstPerson_Parms.ReturnValue;
};

// Function Engine.Pawn.WasPlayerPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::WasPlayerPawn ( )
{
	static UFunction* pFnWasPlayerPawn = NULL;

	if ( ! pFnWasPlayerPawn )
		pFnWasPlayerPawn = UObject::FindObject< UFunction > ( "Function Engine.Pawn.WasPlayerPawn" );

	APawn_execWasPlayerPawn_Parms WasPlayerPawn_Parms;

	this->ProcessEvent ( pFnWasPlayerPawn, &WasPlayerPawn_Parms, NULL );

	return WasPlayerPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsPlayerPawn
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsPlayerPawn ( )
{
	static UFunction* pFnIsPlayerPawn = NULL;

	if ( ! pFnIsPlayerPawn )
		pFnIsPlayerPawn = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsPlayerPawn" );

	APawn_execIsPlayerPawn_Parms IsPlayerPawn_Parms;

	pFnIsPlayerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerPawn, &IsPlayerPawn_Parms, NULL );

	pFnIsPlayerPawn->FunctionFlags |= 0x400;

	return IsPlayerPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsLocallyControlled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsLocallyControlled ( )
{
	static UFunction* pFnIsLocallyControlled = NULL;

	if ( ! pFnIsLocallyControlled )
		pFnIsLocallyControlled = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsLocallyControlled" );

	APawn_execIsLocallyControlled_Parms IsLocallyControlled_Parms;

	pFnIsLocallyControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocallyControlled, &IsLocallyControlled_Parms, NULL );

	pFnIsLocallyControlled->FunctionFlags |= 0x400;

	return IsLocallyControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.IsHumanControlled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsHumanControlled ( )
{
	static UFunction* pFnIsHumanControlled = NULL;

	if ( ! pFnIsHumanControlled )
		pFnIsHumanControlled = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsHumanControlled" );

	APawn_execIsHumanControlled_Parms IsHumanControlled_Parms;

	pFnIsHumanControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHumanControlled, &IsHumanControlled_Parms, NULL );

	pFnIsHumanControlled->FunctionFlags |= 0x400;

	return IsHumanControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APawn::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.Pawn.DisplayDebug" );

	APawn_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Pawn.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CanSplash" );

	APawn_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Pawn.SetWalking
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewIsWalking                  ( CPF_Parm )

void APawn::eventSetWalking ( unsigned long bNewIsWalking )
{
	static UFunction* pFnSetWalking = NULL;

	if ( ! pFnSetWalking )
		pFnSetWalking = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetWalking" );

	APawn_eventSetWalking_Parms SetWalking_Parms;
	SetWalking_Parms.bNewIsWalking = bNewIsWalking;

	this->ProcessEvent ( pFnSetWalking, &SetWalking_Parms, NULL );
};

// Function Engine.Pawn.RangedAttackTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::RangedAttackTime ( )
{
	static UFunction* pFnRangedAttackTime = NULL;

	if ( ! pFnRangedAttackTime )
		pFnRangedAttackTime = UObject::FindObject< UFunction > ( "Function Engine.Pawn.RangedAttackTime" );

	APawn_execRangedAttackTime_Parms RangedAttackTime_Parms;

	this->ProcessEvent ( pFnRangedAttackTime, &RangedAttackTime_Parms, NULL );

	return RangedAttackTime_Parms.ReturnValue;
};

// Function Engine.Pawn.RecommendLongRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::RecommendLongRangedAttack ( )
{
	static UFunction* pFnRecommendLongRangedAttack = NULL;

	if ( ! pFnRecommendLongRangedAttack )
		pFnRecommendLongRangedAttack = UObject::FindObject< UFunction > ( "Function Engine.Pawn.RecommendLongRangedAttack" );

	APawn_execRecommendLongRangedAttack_Parms RecommendLongRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendLongRangedAttack, &RecommendLongRangedAttack_Parms, NULL );

	return RecommendLongRangedAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.DropToGround
// [0x00020002] 
// Parameters infos:

void APawn::DropToGround ( )
{
	static UFunction* pFnDropToGround = NULL;

	if ( ! pFnDropToGround )
		pFnDropToGround = UObject::FindObject< UFunction > ( "Function Engine.Pawn.DropToGround" );

	APawn_execDropToGround_Parms DropToGround_Parms;

	this->ProcessEvent ( pFnDropToGround, &DropToGround_Parms, NULL );
};

// Function Engine.Pawn.GetDefaultCameraMode
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName APawn::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetDefaultCameraMode" );

	APawn_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	pFnGetDefaultCameraMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	pFnGetDefaultCameraMode->FunctionFlags |= 0x400;

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Pawn.UnPossessed
// [0x00020002] 
// Parameters infos:

void APawn::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = UObject::FindObject< UFunction > ( "Function Engine.Pawn.UnPossessed" );

	APawn_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Pawn.UpdateControllerOnPossess
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::UpdateControllerOnPossess ( unsigned long bVehicleTransition )
{
	static UFunction* pFnUpdateControllerOnPossess = NULL;

	if ( ! pFnUpdateControllerOnPossess )
		pFnUpdateControllerOnPossess = UObject::FindObject< UFunction > ( "Function Engine.Pawn.UpdateControllerOnPossess" );

	APawn_execUpdateControllerOnPossess_Parms UpdateControllerOnPossess_Parms;
	UpdateControllerOnPossess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnUpdateControllerOnPossess, &UpdateControllerOnPossess_Parms, NULL );
};

// Function Engine.Pawn.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PossessedBy" );

	APawn_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Pawn.NotifyTeamChanged
// [0x00020100] 
// Parameters infos:

void APawn::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = UObject::FindObject< UFunction > ( "Function Engine.Pawn.NotifyTeamChanged" );

	APawn_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function Engine.Pawn.PlayTeleportEffect
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void APawn::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PlayTeleportEffect" );

	APawn_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Pawn.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APawn::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetHumanReadableName" );

	APawn_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Pawn.NeedToTurn
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 targ                           ( CPF_Parm )

bool APawn::NeedToTurn ( struct FVector targ )
{
	static UFunction* pFnNeedToTurn = NULL;

	if ( ! pFnNeedToTurn )
		pFnNeedToTurn = UObject::FindObject< UFunction > ( "Function Engine.Pawn.NeedToTurn" );

	APawn_execNeedToTurn_Parms NeedToTurn_Parms;
	memcpy ( &NeedToTurn_Parms.targ, &targ, 0xC );

	this->ProcessEvent ( pFnNeedToTurn, &NeedToTurn_Parms, NULL );

	return NeedToTurn_Parms.ReturnValue;
};

// Function Engine.Pawn.TooCloseToAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::TooCloseToAttack ( class AActor* Other )
{
	static UFunction* pFnTooCloseToAttack = NULL;

	if ( ! pFnTooCloseToAttack )
		pFnTooCloseToAttack = UObject::FindObject< UFunction > ( "Function Engine.Pawn.TooCloseToAttack" );

	APawn_execTooCloseToAttack_Parms TooCloseToAttack_Parms;
	TooCloseToAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnTooCloseToAttack, &TooCloseToAttack_Parms, NULL );

	return TooCloseToAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = UObject::FindObject< UFunction > ( "Function Engine.Pawn.CanAttack" );

	APawn_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.ChooseFireMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APawn::ChooseFireMode ( )
{
	static UFunction* pFnChooseFireMode = NULL;

	if ( ! pFnChooseFireMode )
		pFnChooseFireMode = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ChooseFireMode" );

	APawn_execChooseFireMode_Parms ChooseFireMode_Parms;

	this->ProcessEvent ( pFnChooseFireMode, &ChooseFireMode_Parms, NULL );

	return ChooseFireMode_Parms.ReturnValue;
};

// Function Engine.Pawn.BotFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFinished                      ( CPF_Parm )

bool APawn::BotFire ( unsigned long bFinished )
{
	static UFunction* pFnBotFire = NULL;

	if ( ! pFnBotFire )
		pFnBotFire = UObject::FindObject< UFunction > ( "Function Engine.Pawn.BotFire" );

	APawn_execBotFire_Parms BotFire_Parms;
	BotFire_Parms.bFinished = bFinished;

	this->ProcessEvent ( pFnBotFire, &BotFire_Parms, NULL );

	return BotFire_Parms.ReturnValue;
};

// Function Engine.Pawn.FiringModeUpdated
// [0x00020100] 
// Parameters infos:
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FiringModeUpdated ( unsigned long bViaReplication )
{
	static UFunction* pFnFiringModeUpdated = NULL;

	if ( ! pFnFiringModeUpdated )
		pFnFiringModeUpdated = UObject::FindObject< UFunction > ( "Function Engine.Pawn.FiringModeUpdated" );

	APawn_execFiringModeUpdated_Parms FiringModeUpdated_Parms;
	FiringModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFiringModeUpdated, &FiringModeUpdated_Parms, NULL );
};

// Function Engine.Pawn.SetFiringMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void APawn::SetFiringMode ( unsigned char FiringModeNum )
{
	static UFunction* pFnSetFiringMode = NULL;

	if ( ! pFnSetFiringMode )
		pFnSetFiringMode = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetFiringMode" );

	APawn_execSetFiringMode_Parms SetFiringMode_Parms;
	SetFiringMode_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnSetFiringMode, &SetFiringMode_Parms, NULL );
};

// Function Engine.Pawn.StopFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = UObject::FindObject< UFunction > ( "Function Engine.Pawn.StopFire" );

	APawn_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Pawn.StartFire
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function Engine.Pawn.StartFire" );

	APawn_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Pawn.StopFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::StopFiring ( )
{
	static UFunction* pFnStopFiring = NULL;

	if ( ! pFnStopFiring )
		pFnStopFiring = UObject::FindObject< UFunction > ( "Function Engine.Pawn.StopFiring" );

	APawn_execStopFiring_Parms StopFiring_Parms;

	this->ProcessEvent ( pFnStopFiring, &StopFiring_Parms, NULL );

	return StopFiring_Parms.ReturnValue;
};

// Function Engine.Pawn.Reset
// [0x00020002] 
// Parameters infos:

void APawn::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.Pawn.Reset" );

	APawn_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Pawn.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void APawn::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = UObject::FindObject< UFunction > ( "Function Engine.Pawn.PlayerChangedTeam" );

	APawn_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Pawn.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void APawn::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetBaseEyeheight" );

	APawn_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Pawn.SpecialMoveTo
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Start                          ( CPF_Parm )
// class ANavigationPoint*        End                            ( CPF_Parm )
// class AActor*                  Next                           ( CPF_Parm )

bool APawn::SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next )
{
	static UFunction* pFnSpecialMoveTo = NULL;

	if ( ! pFnSpecialMoveTo )
		pFnSpecialMoveTo = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SpecialMoveTo" );

	APawn_execSpecialMoveTo_Parms SpecialMoveTo_Parms;
	SpecialMoveTo_Parms.Start = Start;
	SpecialMoveTo_Parms.End = End;
	SpecialMoveTo_Parms.Next = Next;

	this->ProcessEvent ( pFnSpecialMoveTo, &SpecialMoveTo_Parms, NULL );

	return SpecialMoveTo_Parms.ReturnValue;
};

// Function Engine.Pawn.TermRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TermRagdoll ( )
{
	static UFunction* pFnTermRagdoll = NULL;

	if ( ! pFnTermRagdoll )
		pFnTermRagdoll = UObject::FindObject< UFunction > ( "Function Engine.Pawn.TermRagdoll" );

	APawn_execTermRagdoll_Parms TermRagdoll_Parms;

	pFnTermRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRagdoll, &TermRagdoll_Parms, NULL );

	pFnTermRagdoll->FunctionFlags |= 0x400;

	return TermRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.InitRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InitRagdoll ( )
{
	static UFunction* pFnInitRagdoll = NULL;

	if ( ! pFnInitRagdoll )
		pFnInitRagdoll = UObject::FindObject< UFunction > ( "Function Engine.Pawn.InitRagdoll" );

	APawn_execInitRagdoll_Parms InitRagdoll_Parms;

	pFnInitRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRagdoll, &InitRagdoll_Parms, NULL );

	pFnInitRagdoll->FunctionFlags |= 0x400;

	return InitRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidEnemy
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsValidEnemy ( )
{
	static UFunction* pFnIsValidEnemy = NULL;

	if ( ! pFnIsValidEnemy )
		pFnIsValidEnemy = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsValidEnemy" );

	APawn_execIsValidEnemy_Parms IsValidEnemy_Parms;

	this->ProcessEvent ( pFnIsValidEnemy, &IsValidEnemy_Parms, NULL );

	return IsValidEnemy_Parms.ReturnValue;
};

// Function Engine.Pawn.SpecialCostForPath
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UReachSpec*              Path                           ( CPF_Parm )

int APawn::SpecialCostForPath ( class UReachSpec* Path )
{
	static UFunction* pFnSpecialCostForPath = NULL;

	if ( ! pFnSpecialCostForPath )
		pFnSpecialCostForPath = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SpecialCostForPath" );

	APawn_execSpecialCostForPath_Parms SpecialCostForPath_Parms;
	SpecialCostForPath_Parms.Path = Path;

	this->ProcessEvent ( pFnSpecialCostForPath, &SpecialCostForPath_Parms, NULL );

	return SpecialCostForPath_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void APawn::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetBoundingCylinder" );

	APawn_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Pawn.SetPushesRigidBodies
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewPush                        ( CPF_Parm )

void APawn::SetPushesRigidBodies ( unsigned long NewPush )
{
	static UFunction* pFnSetPushesRigidBodies = NULL;

	if ( ! pFnSetPushesRigidBodies )
		pFnSetPushesRigidBodies = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetPushesRigidBodies" );

	APawn_execSetPushesRigidBodies_Parms SetPushesRigidBodies_Parms;
	SetPushesRigidBodies_Parms.NewPush = NewPush;

	pFnSetPushesRigidBodies->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPushesRigidBodies, &SetPushesRigidBodies_Parms, NULL );

	pFnSetPushesRigidBodies->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ForceCrouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ForceCrouch ( )
{
	static UFunction* pFnForceCrouch = NULL;

	if ( ! pFnForceCrouch )
		pFnForceCrouch = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ForceCrouch" );

	APawn_execForceCrouch_Parms ForceCrouch_Parms;

	pFnForceCrouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceCrouch, &ForceCrouch_Parms, NULL );

	pFnForceCrouch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ReachedPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )
// class AActor*                  NewAnchor                      ( CPF_Parm )

bool APawn::ReachedPoint ( struct FVector Point, class AActor* NewAnchor )
{
	static UFunction* pFnReachedPoint = NULL;

	if ( ! pFnReachedPoint )
		pFnReachedPoint = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ReachedPoint" );

	APawn_execReachedPoint_Parms ReachedPoint_Parms;
	memcpy ( &ReachedPoint_Parms.Point, &Point, 0xC );
	ReachedPoint_Parms.NewAnchor = NewAnchor;

	pFnReachedPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedPoint, &ReachedPoint_Parms, NULL );

	pFnReachedPoint->FunctionFlags |= 0x400;

	return ReachedPoint_Parms.ReturnValue;
};

// Function Engine.Pawn.ReachedDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Goal                           ( CPF_Parm )

bool APawn::ReachedDestination ( class AActor* Goal )
{
	static UFunction* pFnReachedDestination = NULL;

	if ( ! pFnReachedDestination )
		pFnReachedDestination = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ReachedDestination" );

	APawn_execReachedDestination_Parms ReachedDestination_Parms;
	ReachedDestination_Parms.Goal = Goal;

	pFnReachedDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedDestination, &ReachedDestination_Parms, NULL );

	pFnReachedDestination->FunctionFlags |= 0x400;

	return ReachedDestination_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBestAnchor
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// unsigned long                  bStartPoint                    ( CPF_Parm )
// unsigned long                  bOnlyCheckVisible              ( CPF_Parm )
// float                          out_Dist                       ( CPF_Parm | CPF_OutParm )

class ANavigationPoint* APawn::GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist )
{
	static UFunction* pFnGetBestAnchor = NULL;

	if ( ! pFnGetBestAnchor )
		pFnGetBestAnchor = UObject::FindObject< UFunction > ( "Function Engine.Pawn.GetBestAnchor" );

	APawn_execGetBestAnchor_Parms GetBestAnchor_Parms;
	GetBestAnchor_Parms.TestActor = TestActor;
	memcpy ( &GetBestAnchor_Parms.TestLocation, &TestLocation, 0xC );
	GetBestAnchor_Parms.bStartPoint = bStartPoint;
	GetBestAnchor_Parms.bOnlyCheckVisible = bOnlyCheckVisible;

	pFnGetBestAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestAnchor, &GetBestAnchor_Parms, NULL );

	pFnGetBestAnchor->FunctionFlags |= 0x400;

	if ( out_Dist )
		*out_Dist = GetBestAnchor_Parms.out_Dist;

	return GetBestAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.SetAnchor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        NewAnchor                      ( CPF_Parm )

void APawn::SetAnchor ( class ANavigationPoint* NewAnchor )
{
	static UFunction* pFnSetAnchor = NULL;

	if ( ! pFnSetAnchor )
		pFnSetAnchor = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetAnchor" );

	APawn_execSetAnchor_Parms SetAnchor_Parms;
	SetAnchor_Parms.NewAnchor = NewAnchor;

	pFnSetAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnchor, &SetAnchor_Parms, NULL );

	pFnSetAnchor->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetRemoteViewPitch
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewRemoteViewPitch             ( CPF_Parm )

void APawn::SetRemoteViewPitch ( int NewRemoteViewPitch )
{
	static UFunction* pFnSetRemoteViewPitch = NULL;

	if ( ! pFnSetRemoteViewPitch )
		pFnSetRemoteViewPitch = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SetRemoteViewPitch" );

	APawn_execSetRemoteViewPitch_Parms SetRemoteViewPitch_Parms;
	SetRemoteViewPitch_Parms.NewRemoteViewPitch = NewRemoteViewPitch;

	pFnSetRemoteViewPitch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRemoteViewPitch, &SetRemoteViewPitch_Parms, NULL );

	pFnSetRemoteViewPitch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IsInvisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsInvisible ( )
{
	static UFunction* pFnIsInvisible = NULL;

	if ( ! pFnIsInvisible )
		pFnIsInvisible = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsInvisible" );

	APawn_execIsInvisible_Parms IsInvisible_Parms;

	pFnIsInvisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvisible, &IsInvisible_Parms, NULL );

	pFnIsInvisible->FunctionFlags |= 0x400;

	return IsInvisible_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidEnemyTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Const | CPF_Parm )
// unsigned long                  bNoPRIisEnemy                  ( CPF_Parm )

bool APawn::IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy )
{
	static UFunction* pFnIsValidEnemyTargetFor = NULL;

	if ( ! pFnIsValidEnemyTargetFor )
		pFnIsValidEnemyTargetFor = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsValidEnemyTargetFor" );

	APawn_execIsValidEnemyTargetFor_Parms IsValidEnemyTargetFor_Parms;
	IsValidEnemyTargetFor_Parms.PRI = PRI;
	IsValidEnemyTargetFor_Parms.bNoPRIisEnemy = bNoPRIisEnemy;

	pFnIsValidEnemyTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidEnemyTargetFor, &IsValidEnemyTargetFor_Parms, NULL );

	pFnIsValidEnemyTargetFor->FunctionFlags |= 0x400;

	return IsValidEnemyTargetFor_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Const | CPF_Parm )

bool APawn::IsValidTargetFor ( class AController* C )
{
	static UFunction* pFnIsValidTargetFor = NULL;

	if ( ! pFnIsValidTargetFor )
		pFnIsValidTargetFor = UObject::FindObject< UFunction > ( "Function Engine.Pawn.IsValidTargetFor" );

	APawn_execIsValidTargetFor_Parms IsValidTargetFor_Parms;
	IsValidTargetFor_Parms.C = C;

	pFnIsValidTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTargetFor, &IsValidTargetFor_Parms, NULL );

	pFnIsValidTargetFor->FunctionFlags |= 0x400;

	return IsValidTargetFor_Parms.ReturnValue;
};

// Function Engine.Pawn.SuggestJumpVelocity
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 JumpVelocity                   ( CPF_Parm | CPF_OutParm )

bool APawn::SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, struct FVector* JumpVelocity )
{
	static UFunction* pFnSuggestJumpVelocity = NULL;

	if ( ! pFnSuggestJumpVelocity )
		pFnSuggestJumpVelocity = UObject::FindObject< UFunction > ( "Function Engine.Pawn.SuggestJumpVelocity" );

	APawn_execSuggestJumpVelocity_Parms SuggestJumpVelocity_Parms;
	memcpy ( &SuggestJumpVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestJumpVelocity_Parms.Start, &Start, 0xC );

	pFnSuggestJumpVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestJumpVelocity, &SuggestJumpVelocity_Parms, NULL );

	pFnSuggestJumpVelocity->FunctionFlags |= 0x400;

	if ( JumpVelocity )
		memcpy ( JumpVelocity, &SuggestJumpVelocity_Parms.JumpVelocity, 0xC );

	return SuggestJumpVelocity_Parms.ReturnValue;
};

// Function Engine.Pawn.ValidAnchor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::ValidAnchor ( )
{
	static UFunction* pFnValidAnchor = NULL;

	if ( ! pFnValidAnchor )
		pFnValidAnchor = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ValidAnchor" );

	APawn_execValidAnchor_Parms ValidAnchor_Parms;

	pFnValidAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidAnchor, &ValidAnchor_Parms, NULL );

	pFnValidAnchor->FunctionFlags |= 0x400;

	return ValidAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.Pawn.ReplicatedEvent" );

	APawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PickupFactory.ShouldRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::ShouldRespawn ( )
{
	static UFunction* pFnShouldRespawn = NULL;

	if ( ! pFnShouldRespawn )
		pFnShouldRespawn = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.ShouldRespawn" );

	APickupFactory_execShouldRespawn_Parms ShouldRespawn_Parms;

	this->ProcessEvent ( pFnShouldRespawn, &ShouldRespawn_Parms, NULL );

	return ShouldRespawn_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.Destroyed" );

	APickupFactory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupVisible
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupVisible ( )
{
	static UFunction* pFnSetPickupVisible = NULL;

	if ( ! pFnSetPickupVisible )
		pFnSetPickupVisible = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.SetPickupVisible" );

	APickupFactory_execSetPickupVisible_Parms SetPickupVisible_Parms;

	this->ProcessEvent ( pFnSetPickupVisible, &SetPickupVisible_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupHidden
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupHidden ( )
{
	static UFunction* pFnSetPickupHidden = NULL;

	if ( ! pFnSetPickupHidden )
		pFnSetPickupHidden = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.SetPickupHidden" );

	APickupFactory_execSetPickupHidden_Parms SetPickupHidden_Parms;

	this->ProcessEvent ( pFnSetPickupHidden, &SetPickupHidden_Parms, NULL );
};

// Function Engine.PickupFactory.RespawnEffect
// [0x00020000] 
// Parameters infos:

void APickupFactory::RespawnEffect ( )
{
	static UFunction* pFnRespawnEffect = NULL;

	if ( ! pFnRespawnEffect )
		pFnRespawnEffect = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.RespawnEffect" );

	APickupFactory_execRespawnEffect_Parms RespawnEffect_Parms;

	this->ProcessEvent ( pFnRespawnEffect, &RespawnEffect_Parms, NULL );
};

// Function Engine.PickupFactory.GetRespawnTime
// [0x00020000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APickupFactory::GetRespawnTime ( )
{
	static UFunction* pFnGetRespawnTime = NULL;

	if ( ! pFnGetRespawnTime )
		pFnGetRespawnTime = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.GetRespawnTime" );

	APickupFactory_execGetRespawnTime_Parms GetRespawnTime_Parms;

	this->ProcessEvent ( pFnGetRespawnTime, &GetRespawnTime_Parms, NULL );

	return GetRespawnTime_Parms.ReturnValue;
};

// Function Engine.PickupFactory.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void APickupFactory::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.RecheckValidTouch" );

	APickupFactory_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.PickupFactory.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.PickedUpBy" );

	APickupFactory_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.PickupFactory.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.GiveTo" );

	APickupFactory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.PickupFactory.ReadyToPickup
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MaxWait                        ( CPF_Parm )

bool APickupFactory::ReadyToPickup ( float MaxWait )
{
	static UFunction* pFnReadyToPickup = NULL;

	if ( ! pFnReadyToPickup )
		pFnReadyToPickup = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.ReadyToPickup" );

	APickupFactory_execReadyToPickup_Parms ReadyToPickup_Parms;
	ReadyToPickup_Parms.MaxWait = MaxWait;

	this->ProcessEvent ( pFnReadyToPickup, &ReadyToPickup_Parms, NULL );

	return ReadyToPickup_Parms.ReturnValue;
};

// Function Engine.PickupFactory.DetourWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float APickupFactory::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.DetourWeight" );

	APickupFactory_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.PickupFactory.StartSleeping
// [0x00020002] 
// Parameters infos:

void APickupFactory::StartSleeping ( )
{
	static UFunction* pFnStartSleeping = NULL;

	if ( ! pFnStartSleeping )
		pFnStartSleeping = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.StartSleeping" );

	APickupFactory_execStartSleeping_Parms StartSleeping_Parms;

	this->ProcessEvent ( pFnStartSleeping, &StartSleeping_Parms, NULL );
};

// Function Engine.PickupFactory.SetRespawn
// [0x00020002] 
// Parameters infos:

void APickupFactory::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.SetRespawn" );

	APickupFactory_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function Engine.PickupFactory.CheckForErrors
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.CheckForErrors" );

	APickupFactory_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Reset
// [0x00020002] 
// Parameters infos:

void APickupFactory::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.Reset" );

	APickupFactory_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PickupFactory.StaticPrecache
// [0x00022000] 
// Parameters infos:
// class AWorldInfo*              W                              ( CPF_Parm )

void APickupFactory::StaticPrecache ( class AWorldInfo* W )
{
	static UFunction* pFnStaticPrecache = NULL;

	if ( ! pFnStaticPrecache )
		pFnStaticPrecache = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.StaticPrecache" );

	APickupFactory_execStaticPrecache_Parms StaticPrecache_Parms;
	StaticPrecache_Parms.W = W;

	this->ProcessEvent ( pFnStaticPrecache, &StaticPrecache_Parms, NULL );
};

// Function Engine.PickupFactory.ShutDown
// [0x00020102] 
// Parameters infos:

void APickupFactory::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.ShutDown" );

	APickupFactory_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.PickupFactory.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.SetInitialState" );

	APickupFactory_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.PickupFactory.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.PreBeginPlay" );

	APickupFactory_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.PickupFactory.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APickupFactory::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.PickupFactory.ReplicatedEvent" );

	APickupFactory_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerAlias
// [0x00020002] 
// Parameters infos:
// struct FString                 NewAlias                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerReplicationInfo::SetPlayerAlias ( struct FString NewAlias )
{
	static UFunction* pFnSetPlayerAlias = NULL;

	if ( ! pFnSetPlayerAlias )
		pFnSetPlayerAlias = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.SetPlayerAlias" );

	APlayerReplicationInfo_execSetPlayerAlias_Parms SetPlayerAlias_Parms;
	memcpy ( &SetPlayerAlias_Parms.NewAlias, &NewAlias, 0xC );

	this->ProcessEvent ( pFnSetPlayerAlias, &SetPlayerAlias_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IsInvalidName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsInvalidName ( )
{
	static UFunction* pFnIsInvalidName = NULL;

	if ( ! pFnIsInvalidName )
		pFnIsInvalidName = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.IsInvalidName" );

	APlayerReplicationInfo_execIsInvalidName_Parms IsInvalidName_Parms;

	this->ProcessEvent ( pFnIsInvalidName, &IsInvalidName_Parms, NULL );

	return IsInvalidName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APlayerReplicationInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.GetTeamNum" );

	APlayerReplicationInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.IsLocalPlayerPRI
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsLocalPlayerPRI ( )
{
	static UFunction* pFnIsLocalPlayerPRI = NULL;

	if ( ! pFnIsLocalPlayerPRI )
		pFnIsLocalPlayerPRI = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.IsLocalPlayerPRI" );

	APlayerReplicationInfo_execIsLocalPlayerPRI_Parms IsLocalPlayerPRI_Parms;

	this->ProcessEvent ( pFnIsLocalPlayerPRI, &IsLocalPlayerPRI_Parms, NULL );

	return IsLocalPlayerPRI_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.BindPlayerOwnerDataProvider
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::BindPlayerOwnerDataProvider ( )
{
	static UFunction* pFnBindPlayerOwnerDataProvider = NULL;

	if ( ! pFnBindPlayerOwnerDataProvider )
		pFnBindPlayerOwnerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.BindPlayerOwnerDataProvider" );

	APlayerReplicationInfo_execBindPlayerOwnerDataProvider_Parms BindPlayerOwnerDataProvider_Parms;

	this->ProcessEvent ( pFnBindPlayerOwnerDataProvider, &BindPlayerOwnerDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.NotifyLocalPlayerTeamReceived
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::NotifyLocalPlayerTeamReceived ( )
{
	static UFunction* pFnNotifyLocalPlayerTeamReceived = NULL;

	if ( ! pFnNotifyLocalPlayerTeamReceived )
		pFnNotifyLocalPlayerTeamReceived = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.NotifyLocalPlayerTeamReceived" );

	APlayerReplicationInfo_execNotifyLocalPlayerTeamReceived_Parms NotifyLocalPlayerTeamReceived_Parms;

	this->ProcessEvent ( pFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UpdateTeamDataProvider
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::UpdateTeamDataProvider ( )
{
	static UFunction* pFnUpdateTeamDataProvider = NULL;

	if ( ! pFnUpdateTeamDataProvider )
		pFnUpdateTeamDataProvider = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.UpdateTeamDataProvider" );

	APlayerReplicationInfo_execUpdateTeamDataProvider_Parms UpdateTeamDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateTeamDataProvider, &UpdateTeamDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UpdatePlayerDataProvider
// [0x00020102] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_OptionalParm | CPF_Parm )

void APlayerReplicationInfo::UpdatePlayerDataProvider ( struct FName PropertyName )
{
	static UFunction* pFnUpdatePlayerDataProvider = NULL;

	if ( ! pFnUpdatePlayerDataProvider )
		pFnUpdatePlayerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.UpdatePlayerDataProvider" );

	APlayerReplicationInfo_execUpdatePlayerDataProvider_Parms UpdatePlayerDataProvider_Parms;
	memcpy ( &UpdatePlayerDataProvider_Parms.PropertyName, &PropertyName, 0x8 );

	this->ProcessEvent ( pFnUpdatePlayerDataProvider, &UpdatePlayerDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetCurrentGameDS
// [0x00020102] 
// Parameters infos:
// class UCurrentGameDataStore*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UCurrentGameDataStore* APlayerReplicationInfo::GetCurrentGameDS ( )
{
	static UFunction* pFnGetCurrentGameDS = NULL;

	if ( ! pFnGetCurrentGameDS )
		pFnGetCurrentGameDS = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.GetCurrentGameDS" );

	APlayerReplicationInfo_execGetCurrentGameDS_Parms GetCurrentGameDS_Parms;

	this->ProcessEvent ( pFnGetCurrentGameDS, &GetCurrentGameDS_Parms, NULL );

	return GetCurrentGameDS_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SeamlessTravelTo
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  NewPRI                         ( CPF_Parm )

void APlayerReplicationInfo::SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.SeamlessTravelTo" );

	APlayerReplicationInfo_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPRI = NewPRI;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.CopyProperties
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::CopyProperties ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.CopyProperties" );

	APlayerReplicationInfo_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.PRI = PRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.OverrideWith
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::OverrideWith ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOverrideWith = NULL;

	if ( ! pFnOverrideWith )
		pFnOverrideWith = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.OverrideWith" );

	APlayerReplicationInfo_execOverrideWith_Parms OverrideWith_Parms;
	OverrideWith_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOverrideWith, &OverrideWith_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Duplicate
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate ( )
{
	static UFunction* pFnDuplicate = NULL;

	if ( ! pFnDuplicate )
		pFnDuplicate = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.Duplicate" );

	APlayerReplicationInfo_execDuplicate_Parms Duplicate_Parms;

	this->ProcessEvent ( pFnDuplicate, &Duplicate_Parms, NULL );

	return Duplicate_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// [0x00020002] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void APlayerReplicationInfo::SetWaitingPlayer ( unsigned long B )
{
	static UFunction* pFnSetWaitingPlayer = NULL;

	if ( ! pFnSetWaitingPlayer )
		pFnSetWaitingPlayer = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.SetWaitingPlayer" );

	APlayerReplicationInfo_execSetWaitingPlayer_Parms SetWaitingPlayer_Parms;
	SetWaitingPlayer_Parms.B = B;

	this->ProcessEvent ( pFnSetWaitingPlayer, &SetWaitingPlayer_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void APlayerReplicationInfo::eventSetPlayerName ( struct FString S )
{
	static UFunction* pFnSetPlayerName = NULL;

	if ( ! pFnSetPlayerName )
		pFnSetPlayerName = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.SetPlayerName" );

	APlayerReplicationInfo_eventSetPlayerName_Parms SetPlayerName_Parms;
	memcpy ( &SetPlayerName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetPlayerName, &SetPlayerName_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.Timer" );

	APlayerReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )
// float                          YPos                           ( CPF_Parm | CPF_OutParm )

void APlayerReplicationInfo::DisplayDebug ( class AHUD* HUD, float* YL, float* YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.DisplayDebug" );

	APlayerReplicationInfo_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( YL )
		*YL = DisplayDebug_Parms.YL;

	if ( YPos )
		*YPos = DisplayDebug_Parms.YPos;
};

// Function Engine.PlayerReplicationInfo.UpdatePlayerLocation
// [0x00020002] 
// Parameters infos:

void APlayerReplicationInfo::UpdatePlayerLocation ( )
{
	static UFunction* pFnUpdatePlayerLocation = NULL;

	if ( ! pFnUpdatePlayerLocation )
		pFnUpdatePlayerLocation = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.UpdatePlayerLocation" );

	APlayerReplicationInfo_execUpdatePlayerLocation_Parms UpdatePlayerLocation_Parms;

	this->ProcessEvent ( pFnUpdatePlayerLocation, &UpdatePlayerLocation_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetLocationName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerReplicationInfo::GetLocationName ( )
{
	static UFunction* pFnGetLocationName = NULL;

	if ( ! pFnGetLocationName )
		pFnGetLocationName = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.GetLocationName" );

	APlayerReplicationInfo_execGetLocationName_Parms GetLocationName_Parms;

	this->ProcessEvent ( pFnGetLocationName, &GetLocationName_Parms, NULL );

	return GetLocationName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerReplicationInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.GetHumanReadableName" );

	APlayerReplicationInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void APlayerReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.Reset" );

	APlayerReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Destroyed
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.Destroyed" );

	APlayerReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage ( )
{
	static UFunction* pFnShouldBroadCastWelcomeMessage = NULL;

	if ( ! pFnShouldBroadCastWelcomeMessage )
		pFnShouldBroadCastWelcomeMessage = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage" );

	APlayerReplicationInfo_execShouldBroadCastWelcomeMessage_Parms ShouldBroadCastWelcomeMessage_Parms;

	this->ProcessEvent ( pFnShouldBroadCastWelcomeMessage, &ShouldBroadCastWelcomeMessage_Parms, NULL );

	return ShouldBroadCastWelcomeMessage_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.UpdatePing
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerReplicationInfo::UpdatePing ( float TimeStamp )
{
	static UFunction* pFnUpdatePing = NULL;

	if ( ! pFnUpdatePing )
		pFnUpdatePing = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.UpdatePing" );

	APlayerReplicationInfo_execUpdatePing_Parms UpdatePing_Parms;
	UpdatePing_Parms.TimeStamp = TimeStamp;

	pFnUpdatePing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePing, &UpdatePing_Parms, NULL );

	pFnUpdatePing->FunctionFlags |= 0x400;
};

// Function Engine.PlayerReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.ReplicatedEvent" );

	APlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ClientInitialize
// [0x00020102] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void APlayerReplicationInfo::ClientInitialize ( class AController* C )
{
	static UFunction* pFnClientInitialize = NULL;

	if ( ! pFnClientInitialize )
		pFnClientInitialize = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.ClientInitialize" );

	APlayerReplicationInfo_execClientInitialize_Parms ClientInitialize_Parms;
	ClientInitialize_Parms.C = C;

	this->ProcessEvent ( pFnClientInitialize, &ClientInitialize_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.PostBeginPlay" );

	APlayerReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetPlayerAlias
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerReplicationInfo::GetPlayerAlias ( )
{
	static UFunction* pFnGetPlayerAlias = NULL;

	if ( ! pFnGetPlayerAlias )
		pFnGetPlayerAlias = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.GetPlayerAlias" );

	APlayerReplicationInfo_execGetPlayerAlias_Parms GetPlayerAlias_Parms;

	pFnGetPlayerAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerAlias, &GetPlayerAlias_Parms, NULL );

	pFnGetPlayerAlias->FunctionFlags |= 0x400;

	return GetPlayerAlias_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.AreUniqueNetIdsEqual
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  OtherPRI                       ( CPF_Parm )

bool APlayerReplicationInfo::AreUniqueNetIdsEqual ( class APlayerReplicationInfo* OtherPRI )
{
	static UFunction* pFnAreUniqueNetIdsEqual = NULL;

	if ( ! pFnAreUniqueNetIdsEqual )
		pFnAreUniqueNetIdsEqual = UObject::FindObject< UFunction > ( "Function Engine.PlayerReplicationInfo.AreUniqueNetIdsEqual" );

	APlayerReplicationInfo_execAreUniqueNetIdsEqual_Parms AreUniqueNetIdsEqual_Parms;
	AreUniqueNetIdsEqual_Parms.OtherPRI = OtherPRI;

	pFnAreUniqueNetIdsEqual->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreUniqueNetIdsEqual, &AreUniqueNetIdsEqual_Parms, NULL );

	pFnAreUniqueNetIdsEqual->FunctionFlags |= 0x400;

	return AreUniqueNetIdsEqual_Parms.ReturnValue;
};

// Function Engine.PlayerStart.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APlayerStart::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.PlayerStart.OnToggle" );

	APlayerStart_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PointLightComponent.SetTranslation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPointLightComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = UObject::FindObject< UFunction > ( "Function Engine.PointLightComponent.SetTranslation" );

	UPointLightComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.PortalMarker.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalMarker::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = UObject::FindObject< UFunction > ( "Function Engine.PortalMarker.CanTeleport" );

	APortalMarker_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool APortalTeleporter::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = UObject::FindObject< UFunction > ( "Function Engine.PortalTeleporter.StopsProjectile" );

	APortalTeleporter_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.CreatePortalTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture ( )
{
	static UFunction* pFnCreatePortalTexture = NULL;

	if ( ! pFnCreatePortalTexture )
		pFnCreatePortalTexture = UObject::FindObject< UFunction > ( "Function Engine.PortalTeleporter.CreatePortalTexture" );

	APortalTeleporter_execCreatePortalTexture_Parms CreatePortalTexture_Parms;

	pFnCreatePortalTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePortalTexture, &CreatePortalTexture_Parms, NULL );

	pFnCreatePortalTexture->FunctionFlags |= 0x400;

	return CreatePortalTexture_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformHitLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )

struct FVector APortalTeleporter::TransformHitLocation ( struct FVector HitLocation )
{
	static UFunction* pFnTransformHitLocation = NULL;

	if ( ! pFnTransformHitLocation )
		pFnTransformHitLocation = UObject::FindObject< UFunction > ( "Function Engine.PortalTeleporter.TransformHitLocation" );

	APortalTeleporter_execTransformHitLocation_Parms TransformHitLocation_Parms;
	memcpy ( &TransformHitLocation_Parms.HitLocation, &HitLocation, 0xC );

	pFnTransformHitLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformHitLocation, &TransformHitLocation_Parms, NULL );

	pFnTransformHitLocation->FunctionFlags |= 0x400;

	return TransformHitLocation_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformVectorDir
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 V                              ( CPF_Parm )

struct FVector APortalTeleporter::TransformVectorDir ( struct FVector V )
{
	static UFunction* pFnTransformVectorDir = NULL;

	if ( ! pFnTransformVectorDir )
		pFnTransformVectorDir = UObject::FindObject< UFunction > ( "Function Engine.PortalTeleporter.TransformVectorDir" );

	APortalTeleporter_execTransformVectorDir_Parms TransformVectorDir_Parms;
	memcpy ( &TransformVectorDir_Parms.V, &V, 0xC );

	pFnTransformVectorDir->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformVectorDir, &TransformVectorDir_Parms, NULL );

	pFnTransformVectorDir->FunctionFlags |= 0x400;

	return TransformVectorDir_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformActor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalTeleporter::TransformActor ( class AActor* A )
{
	static UFunction* pFnTransformActor = NULL;

	if ( ! pFnTransformActor )
		pFnTransformActor = UObject::FindObject< UFunction > ( "Function Engine.PortalTeleporter.TransformActor" );

	APortalTeleporter_execTransformActor_Parms TransformActor_Parms;
	TransformActor_Parms.A = A;

	pFnTransformActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformActor, &TransformActor_Parms, NULL );

	pFnTransformActor->FunctionFlags |= 0x400;

	return TransformActor_Parms.ReturnValue;
};

// Function Engine.PostProcessChain.FindPostProcessEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UPostProcessEffect*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectName                     ( CPF_Parm )

class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect ( struct FName EffectName )
{
	static UFunction* pFnFindPostProcessEffect = NULL;

	if ( ! pFnFindPostProcessEffect )
		pFnFindPostProcessEffect = UObject::FindObject< UFunction > ( "Function Engine.PostProcessChain.FindPostProcessEffect" );

	UPostProcessChain_execFindPostProcessEffect_Parms FindPostProcessEffect_Parms;
	memcpy ( &FindPostProcessEffect_Parms.EffectName, &EffectName, 0x8 );

	this->ProcessEvent ( pFnFindPostProcessEffect, &FindPostProcessEffect_Parms, NULL );

	return FindPostProcessEffect_Parms.ReturnValue;
};

// Function Engine.PostProcessVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APostProcessVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.PostProcessVolume.OnToggle" );

	APostProcessVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Projectile.GetRange
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AProjectile::GetRange ( )
{
	static UFunction* pFnGetRange = NULL;

	if ( ! pFnGetRange )
		pFnGetRange = UObject::FindObject< UFunction > ( "Function Engine.Projectile.GetRange" );

	AProjectile_execGetRange_Parms GetRange_Parms;

	this->ProcessEvent ( pFnGetRange, &GetRange_Parms, NULL );

	return GetRange_Parms.ReturnValue;
};

// Function Engine.Projectile.StaticGetTimeToLocation
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// struct FVector                 StartLoc                       ( CPF_Parm )
// class AController*             RequestedBy                    ( CPF_Parm )

float AProjectile::StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy )
{
	static UFunction* pFnStaticGetTimeToLocation = NULL;

	if ( ! pFnStaticGetTimeToLocation )
		pFnStaticGetTimeToLocation = UObject::FindObject< UFunction > ( "Function Engine.Projectile.StaticGetTimeToLocation" );

	AProjectile_execStaticGetTimeToLocation_Parms StaticGetTimeToLocation_Parms;
	memcpy ( &StaticGetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );
	memcpy ( &StaticGetTimeToLocation_Parms.StartLoc, &StartLoc, 0xC );
	StaticGetTimeToLocation_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnStaticGetTimeToLocation, &StaticGetTimeToLocation_Parms, NULL );

	return StaticGetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTimeToLocation
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )

float AProjectile::GetTimeToLocation ( struct FVector TargetLoc )
{
	static UFunction* pFnGetTimeToLocation = NULL;

	if ( ! pFnGetTimeToLocation )
		pFnGetTimeToLocation = UObject::FindObject< UFunction > ( "Function Engine.Projectile.GetTimeToLocation" );

	AProjectile_execGetTimeToLocation_Parms GetTimeToLocation_Parms;
	memcpy ( &GetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );

	this->ProcessEvent ( pFnGetTimeToLocation, &GetTimeToLocation_Parms, NULL );

	return GetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AProjectile::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = UObject::FindObject< UFunction > ( "Function Engine.Projectile.FellOutOfWorld" );

	AProjectile_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Projectile.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = UObject::FindObject< UFunction > ( "Function Engine.Projectile.IsStationary" );

	AProjectile_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Projectile.RandSpin
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          spinRate                       ( CPF_Parm )

void AProjectile::RandSpin ( float spinRate )
{
	static UFunction* pFnRandSpin = NULL;

	if ( ! pFnRandSpin )
		pFnRandSpin = UObject::FindObject< UFunction > ( "Function Engine.Projectile.RandSpin" );

	AProjectile_execRandSpin_Parms RandSpin_Parms;
	RandSpin_Parms.spinRate = spinRate;

	this->ProcessEvent ( pFnRandSpin, &RandSpin_Parms, NULL );
};

// Function Engine.Projectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )

void AProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function Engine.Projectile.Explode" );

	AProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );
	Explode_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.Projectile.EncroachedBy
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AProjectile::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = UObject::FindObject< UFunction > ( "Function Engine.Projectile.EncroachedBy" );

	AProjectile_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Projectile.ProjectileHitWall
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )
// class UPhysicalMaterial*       HitMaterial                    ( CPF_Parm )

void AProjectile::eventProjectileHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp, class UPhysicalMaterial* HitMaterial )
{
	static UFunction* pFnProjectileHitWall = NULL;

	if ( ! pFnProjectileHitWall )
		pFnProjectileHitWall = UObject::FindObject< UFunction > ( "Function Engine.Projectile.ProjectileHitWall" );

	AProjectile_eventProjectileHitWall_Parms ProjectileHitWall_Parms;
	memcpy ( &ProjectileHitWall_Parms.HitNormal, &HitNormal, 0xC );
	ProjectileHitWall_Parms.Wall = Wall;
	ProjectileHitWall_Parms.WallComp = WallComp;
	ProjectileHitWall_Parms.HitMaterial = HitMaterial;

	this->ProcessEvent ( pFnProjectileHitWall, &ProjectileHitWall_Parms, NULL );
};

// Function Engine.Projectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function Engine.Projectile.ProcessTouch" );

	AProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function Engine.Projectile.Touch
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.Projectile.Touch" );

	AProjectile_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Projectile.HurtRadius
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DamageAmount                   ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AProjectile::HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = UObject::FindObject< UFunction > ( "Function Engine.Projectile.HurtRadius" );

	AProjectile_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.DamageAmount = DamageAmount;
	HurtRadius_Parms.InDamageRadius = InDamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Projectile.Reset
// [0x00020002] 
// Parameters infos:

void AProjectile::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.Projectile.Reset" );

	AProjectile_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Projectile.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = UObject::FindObject< UFunction > ( "Function Engine.Projectile.CanSplash" );

	AProjectile_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AProjectile::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function Engine.Projectile.GetTeamNum" );

	AProjectile_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Projectile.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void AProjectile::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.Projectile.Init" );

	AProjectile_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.Projectile.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Projectile.PostBeginPlay" );

	AProjectile_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Projectile.PreBeginPlay" );

	AProjectile_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AProjectile::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = UObject::FindObject< UFunction > ( "Function Engine.Projectile.EncroachingOn" );

	AProjectile_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.SavedMove.CompressedFlags
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USavedMove::CompressedFlags ( )
{
	static UFunction* pFnCompressedFlags = NULL;

	if ( ! pFnCompressedFlags )
		pFnCompressedFlags = UObject::FindObject< UFunction > ( "Function Engine.SavedMove.CompressedFlags" );

	USavedMove_execCompressedFlags_Parms CompressedFlags_Parms;

	pFnCompressedFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCompressedFlags, &CompressedFlags_Parms, NULL );

	pFnCompressedFlags->FunctionFlags |= 0x400;

	return CompressedFlags_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetInitialPosition
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::SetInitialPosition ( class APawn* P )
{
	static UFunction* pFnSetInitialPosition = NULL;

	if ( ! pFnSetInitialPosition )
		pFnSetInitialPosition = UObject::FindObject< UFunction > ( "Function Engine.SavedMove.SetInitialPosition" );

	USavedMove_execSetInitialPosition_Parms SetInitialPosition_Parms;
	SetInitialPosition_Parms.P = P;

	pFnSetInitialPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInitialPosition, &SetInitialPosition_Parms, NULL );

	pFnSetInitialPosition->FunctionFlags |= 0x400;
};

// Function Engine.SavedMove.GetStartLocation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USavedMove::GetStartLocation ( )
{
	static UFunction* pFnGetStartLocation = NULL;

	if ( ! pFnGetStartLocation )
		pFnGetStartLocation = UObject::FindObject< UFunction > ( "Function Engine.SavedMove.GetStartLocation" );

	USavedMove_execGetStartLocation_Parms GetStartLocation_Parms;

	pFnGetStartLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStartLocation, &GetStartLocation_Parms, NULL );

	pFnGetStartLocation->FunctionFlags |= 0x400;

	return GetStartLocation_Parms.ReturnValue;
};

// Function Engine.SavedMove.Clear
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void USavedMove::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = UObject::FindObject< UFunction > ( "Function Engine.SavedMove.Clear" );

	USavedMove_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function Engine.SceneCaptureComponent.SetFrameRate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewFrameRate                   ( CPF_Parm )

void USceneCaptureComponent::SetFrameRate ( float NewFrameRate )
{
	static UFunction* pFnSetFrameRate = NULL;

	if ( ! pFnSetFrameRate )
		pFnSetFrameRate = UObject::FindObject< UFunction > ( "Function Engine.SceneCaptureComponent.SetFrameRate" );

	USceneCaptureComponent_execSetFrameRate_Parms SetFrameRate_Parms;
	SetFrameRate_Parms.NewFrameRate = NewFrameRate;

	pFnSetFrameRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFrameRate, &SetFrameRate_Parms, NULL );

	pFnSetFrameRate->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetView
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void USceneCapture2DComponent::SetView ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnSetView = NULL;

	if ( ! pFnSetView )
		pFnSetView = UObject::FindObject< UFunction > ( "Function Engine.SceneCapture2DComponent.SetView" );

	USceneCapture2DComponent_execSetView_Parms SetView_Parms;
	memcpy ( &SetView_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &SetView_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetView->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetView, &SetView_Parms, NULL );

	pFnSetView->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewFOV                         ( CPF_OptionalParm | CPF_Parm )
// float                          NewNearPlane                   ( CPF_OptionalParm | CPF_Parm )
// float                          NewFarPlane                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapture2DComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = UObject::FindObject< UFunction > ( "Function Engine.SceneCapture2DComponent.SetCaptureParameters" );

	USceneCapture2DComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewFOV = NewFOV;
	SetCaptureParameters_Parms.NewNearPlane = NewNearPlane;
	SetCaptureParameters_Parms.NewFarPlane = NewFarPlane;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewScaleFOV                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  NewViewDest                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapturePortalComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = UObject::FindObject< UFunction > ( "Function Engine.SceneCapturePortalComponent.SetCaptureParameters" );

	USceneCapturePortalComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewScaleFOV = NewScaleFOV;
	SetCaptureParameters_Parms.NewViewDest = NewViewDest;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.Scout.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AScout::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Scout.PreBeginPlay" );

	AScout_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.RemoveLogicalAnimation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               Animation                      ( CPF_Parm )

void USkeletalMeshComponent::RemoveLogicalAnimation ( class UAnimNode* Animation )
{
	static UFunction* pFnRemoveLogicalAnimation = NULL;

	if ( ! pFnRemoveLogicalAnimation )
		pFnRemoveLogicalAnimation = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.RemoveLogicalAnimation" );

	USkeletalMeshComponent_execRemoveLogicalAnimation_Parms RemoveLogicalAnimation_Parms;
	RemoveLogicalAnimation_Parms.Animation = Animation;

	pFnRemoveLogicalAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveLogicalAnimation, &RemoveLogicalAnimation_Parms, NULL );

	pFnRemoveLogicalAnimation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AddLogicalAnimation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               Animation                      ( CPF_Parm )
// unsigned long                  bRootMotion                    ( CPF_Parm )

void USkeletalMeshComponent::AddLogicalAnimation ( class UAnimNode* Animation, unsigned long bRootMotion )
{
	static UFunction* pFnAddLogicalAnimation = NULL;

	if ( ! pFnAddLogicalAnimation )
		pFnAddLogicalAnimation = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.AddLogicalAnimation" );

	USkeletalMeshComponent_execAddLogicalAnimation_Parms AddLogicalAnimation_Parms;
	AddLogicalAnimation_Parms.Animation = Animation;
	AddLogicalAnimation_Parms.bRootMotion = bRootMotion;

	pFnAddLogicalAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddLogicalAnimation, &AddLogicalAnimation_Parms, NULL );

	pFnAddLogicalAnimation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.StopAnim
// [0x00020002] 
// Parameters infos:

void USkeletalMeshComponent::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.StopAnim" );

	USkeletalMeshComponent_execStopAnim_Parms StopAnim_Parms;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.PlayAnim
// [0x00020002] 
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRestartIfAlreadyPlaying       ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.PlayAnim" );

	USkeletalMeshComponent_execPlayAnim_Parms PlayAnim_Parms;
	memcpy ( &PlayAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayAnim_Parms.Duration = Duration;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.IsBoneHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

bool USkeletalMeshComponent::IsBoneHidden ( int BoneIndex )
{
	static UFunction* pFnIsBoneHidden = NULL;

	if ( ! pFnIsBoneHidden )
		pFnIsBoneHidden = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.IsBoneHidden" );

	USkeletalMeshComponent_execIsBoneHidden_Parms IsBoneHidden_Parms;
	IsBoneHidden_Parms.BoneIndex = BoneIndex;

	pFnIsBoneHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBoneHidden, &IsBoneHidden_Parms, NULL );

	pFnIsBoneHidden->FunctionFlags |= 0x400;

	return IsBoneHidden_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UnHideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )

void USkeletalMeshComponent::UnHideBone ( int BoneIndex )
{
	static UFunction* pFnUnHideBone = NULL;

	if ( ! pFnUnHideBone )
		pFnUnHideBone = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.UnHideBone" );

	USkeletalMeshComponent_execUnHideBone_Parms UnHideBone_Parms;
	UnHideBone_Parms.BoneIndex = BoneIndex;

	pFnUnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnHideBone, &UnHideBone_Parms, NULL );

	pFnUnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.HideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )

void USkeletalMeshComponent::HideBone ( int BoneIndex )
{
	static UFunction* pFnHideBone = NULL;

	if ( ! pFnHideBone )
		pFnHideBone = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.HideBone" );

	USkeletalMeshComponent_execHideBone_Parms HideBone_Parms;
	HideBone_Parms.BoneIndex = BoneIndex;

	pFnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideBone, &HideBone_Parms, NULL );

	pFnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          FirstValue                     ( CPF_Parm )
// float                          FirstInterpDuration            ( CPF_Parm )
// float                          NextValue                      ( CPF_Parm )
// float                          NextInterpDuration             ( CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration )
{
	static UFunction* pFnSetFaceFXRegisterEx = NULL;

	if ( ! pFnSetFaceFXRegisterEx )
		pFnSetFaceFXRegisterEx = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx" );

	USkeletalMeshComponent_execSetFaceFXRegisterEx_Parms SetFaceFXRegisterEx_Parms;
	memcpy ( &SetFaceFXRegisterEx_Parms.RegName, &RegName, 0xC );
	SetFaceFXRegisterEx_Parms.RegOp = RegOp;
	SetFaceFXRegisterEx_Parms.FirstValue = FirstValue;
	SetFaceFXRegisterEx_Parms.FirstInterpDuration = FirstInterpDuration;
	SetFaceFXRegisterEx_Parms.NextValue = NextValue;
	SetFaceFXRegisterEx_Parms.NextInterpDuration = NextInterpDuration;

	pFnSetFaceFXRegisterEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegisterEx, &SetFaceFXRegisterEx_Parms, NULL );

	pFnSetFaceFXRegisterEx->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )
// float                          RegVal                         ( CPF_Parm )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          InterpDuration                 ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration )
{
	static UFunction* pFnSetFaceFXRegister = NULL;

	if ( ! pFnSetFaceFXRegister )
		pFnSetFaceFXRegister = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetFaceFXRegister" );

	USkeletalMeshComponent_execSetFaceFXRegister_Parms SetFaceFXRegister_Parms;
	memcpy ( &SetFaceFXRegister_Parms.RegName, &RegName, 0xC );
	SetFaceFXRegister_Parms.RegVal = RegVal;
	SetFaceFXRegister_Parms.RegOp = RegOp;
	SetFaceFXRegister_Parms.InterpDuration = InterpDuration;

	pFnSetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegister, &SetFaceFXRegister_Parms, NULL );

	pFnSetFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )

float USkeletalMeshComponent::GetFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnGetFaceFXRegister = NULL;

	if ( ! pFnGetFaceFXRegister )
		pFnGetFaceFXRegister = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetFaceFXRegister" );

	USkeletalMeshComponent_execGetFaceFXRegister_Parms GetFaceFXRegister_Parms;
	memcpy ( &GetFaceFXRegister_Parms.RegName, &RegName, 0xC );

	pFnGetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaceFXRegister, &GetFaceFXRegister_Parms, NULL );

	pFnGetFaceFXRegister->FunctionFlags |= 0x400;

	return GetFaceFXRegister_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )

void USkeletalMeshComponent::DeclareFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnDeclareFaceFXRegister = NULL;

	if ( ! pFnDeclareFaceFXRegister )
		pFnDeclareFaceFXRegister = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister" );

	USkeletalMeshComponent_execDeclareFaceFXRegister_Parms DeclareFaceFXRegister_Parms;
	memcpy ( &DeclareFaceFXRegister_Parms.RegName, &RegName, 0xC );

	pFnDeclareFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeclareFaceFXRegister, &DeclareFaceFXRegister_Parms, NULL );

	pFnDeclareFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USkeletalMeshComponent::IsPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsPlayingFaceFXAnim = NULL;

	if ( ! pFnIsPlayingFaceFXAnim )
		pFnIsPlayingFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim" );

	USkeletalMeshComponent_execIsPlayingFaceFXAnim_Parms IsPlayingFaceFXAnim_Parms;

	pFnIsPlayingFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingFaceFXAnim, &IsPlayingFaceFXAnim_Parms, NULL );

	pFnIsPlayingFaceFXAnim->FunctionFlags |= 0x400;

	return IsPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::StopFaceFXAnim ( )
{
	static UFunction* pFnStopFaceFXAnim = NULL;

	if ( ! pFnStopFaceFXAnim )
		pFnStopFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.StopFaceFXAnim" );

	USkeletalMeshComponent_execStopFaceFXAnim_Parms StopFaceFXAnim_Parms;

	pFnStopFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopFaceFXAnim, &StopFaceFXAnim_Parms, NULL );

	pFnStopFaceFXAnim->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          FaceFXAnimSetRef               ( CPF_Parm )
// struct FString                 AnimName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )

bool USkeletalMeshComponent::PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName )
{
	static UFunction* pFnPlayFaceFXAnim = NULL;

	if ( ! pFnPlayFaceFXAnim )
		pFnPlayFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.PlayFaceFXAnim" );

	USkeletalMeshComponent_execPlayFaceFXAnim_Parms PlayFaceFXAnim_Parms;
	PlayFaceFXAnim_Parms.FaceFXAnimSetRef = FaceFXAnimSetRef;
	memcpy ( &PlayFaceFXAnim_Parms.AnimName, &AnimName, 0xC );
	memcpy ( &PlayFaceFXAnim_Parms.GroupName, &GroupName, 0xC );

	pFnPlayFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFaceFXAnim, &PlayFaceFXAnim_Parms, NULL );

	pFnPlayFaceFXAnim->FunctionFlags |= 0x400;

	return PlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void USkeletalMeshComponent::ToggleInstanceVertexWeights ( unsigned long bEnable )
{
	static UFunction* pFnToggleInstanceVertexWeights = NULL;

	if ( ! pFnToggleInstanceVertexWeights )
		pFnToggleInstanceVertexWeights = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights" );

	USkeletalMeshComponent_execToggleInstanceVertexWeights_Parms ToggleInstanceVertexWeights_Parms;
	ToggleInstanceVertexWeights_Parms.bEnable = bEnable;

	pFnToggleInstanceVertexWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleInstanceVertexWeights, &ToggleInstanceVertexWeights_Parms, NULL );

	pFnToggleInstanceVertexWeights->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FBonePair >     BonePairs                      ( CPF_Parm | CPF_NeedCtorLink )

void USkeletalMeshComponent::UpdateInstanceVertexWeightBones ( TArray< struct FBonePair > BonePairs )
{
	static UFunction* pFnUpdateInstanceVertexWeightBones = NULL;

	if ( ! pFnUpdateInstanceVertexWeightBones )
		pFnUpdateInstanceVertexWeightBones = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones" );

	USkeletalMeshComponent_execUpdateInstanceVertexWeightBones_Parms UpdateInstanceVertexWeightBones_Parms;
	memcpy ( &UpdateInstanceVertexWeightBones_Parms.BonePairs, &BonePairs, 0xC );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateInstanceVertexWeightBones, &UpdateInstanceVertexWeightBones_Parms, NULL );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBonePair               Bones                          ( CPF_Parm )

int USkeletalMeshComponent::FindInstanceVertexweightBonePair ( struct FBonePair Bones )
{
	static UFunction* pFnFindInstanceVertexweightBonePair = NULL;

	if ( ! pFnFindInstanceVertexweightBonePair )
		pFnFindInstanceVertexweightBonePair = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair" );

	USkeletalMeshComponent_execFindInstanceVertexweightBonePair_Parms FindInstanceVertexweightBonePair_Parms;
	memcpy ( &FindInstanceVertexweightBonePair_Parms.Bones, &Bones, 0x10 );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInstanceVertexweightBonePair, &FindInstanceVertexweightBonePair_Parms, NULL );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= 0x400;

	return FindInstanceVertexweightBonePair_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented ( struct FName BoneName )
{
	static UFunction* pFnRemoveInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnRemoveInstanceVertexWeightBoneParented )
		pFnRemoveInstanceVertexWeightBoneParented = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented" );

	USkeletalMeshComponent_execRemoveInstanceVertexWeightBoneParented_Parms RemoveInstanceVertexWeightBoneParented_Parms;
	memcpy ( &RemoveInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveInstanceVertexWeightBoneParented, &RemoveInstanceVertexWeightBoneParented_Parms, NULL );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented ( struct FName BoneName )
{
	static UFunction* pFnAddInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnAddInstanceVertexWeightBoneParented )
		pFnAddInstanceVertexWeightBoneParented = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented" );

	USkeletalMeshComponent_execAddInstanceVertexWeightBoneParented_Parms AddInstanceVertexWeightBoneParented_Parms;
	memcpy ( &AddInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddInstanceVertexWeightBoneParented, &AddInstanceVertexWeightBoneParented_Parms, NULL );

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            TraceFlags                     ( CPF_Parm )
// TArray< struct FName >         out_Bones                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USkeletalMeshComponent::GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, TArray< struct FName >* out_Bones )
{
	static UFunction* pFnGetBonesWithinRadius = NULL;

	if ( ! pFnGetBonesWithinRadius )
		pFnGetBonesWithinRadius = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetBonesWithinRadius" );

	USkeletalMeshComponent_execGetBonesWithinRadius_Parms GetBonesWithinRadius_Parms;
	memcpy ( &GetBonesWithinRadius_Parms.Origin, &Origin, 0xC );
	GetBonesWithinRadius_Parms.Radius = Radius;
	GetBonesWithinRadius_Parms.TraceFlags = TraceFlags;

	pFnGetBonesWithinRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBonesWithinRadius, &GetBonesWithinRadius_Parms, NULL );

	pFnGetBonesWithinRadius->FunctionFlags |= 0x400;

	if ( out_Bones )
		memcpy ( out_Bones, &GetBonesWithinRadius_Parms.out_Bones, 0xC );

	return GetBonesWithinRadius_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UpdateAnimations
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateAnimations ( )
{
	static UFunction* pFnUpdateAnimations = NULL;

	if ( ! pFnUpdateAnimations )
		pFnUpdateAnimations = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.UpdateAnimations" );

	USkeletalMeshComponent_execUpdateAnimations_Parms UpdateAnimations_Parms;

	pFnUpdateAnimations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimations, &UpdateAnimations_Parms, NULL );

	pFnUpdateAnimations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ForceSkelUpdate ( )
{
	static UFunction* pFnForceSkelUpdate = NULL;

	if ( ! pFnForceSkelUpdate )
		pFnForceSkelUpdate = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.ForceSkelUpdate" );

	USkeletalMeshComponent_execForceSkelUpdate_Parms ForceSkelUpdate_Parms;

	pFnForceSkelUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceSkelUpdate, &ForceSkelUpdate_Parms, NULL );

	pFnForceSkelUpdate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bMoveUnfixedBodies             ( CPF_Parm )
// unsigned long                  bTeleport                      ( CPF_Parm )

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport )
{
	static UFunction* pFnUpdateRBBonesFromSpaceBases = NULL;

	if ( ! pFnUpdateRBBonesFromSpaceBases )
		pFnUpdateRBBonesFromSpaceBases = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases" );

	USkeletalMeshComponent_execUpdateRBBonesFromSpaceBases_Parms UpdateRBBonesFromSpaceBases_Parms;
	UpdateRBBonesFromSpaceBases_Parms.bMoveUnfixedBodies = bMoveUnfixedBodies;
	UpdateRBBonesFromSpaceBases_Parms.bTeleport = bTeleport;

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRBBonesFromSpaceBases, &UpdateRBBonesFromSpaceBases_Parms, NULL );

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bHasInstance                   ( CPF_Parm )

void USkeletalMeshComponent::SetHasPhysicsAssetInstance ( unsigned long bHasInstance )
{
	static UFunction* pFnSetHasPhysicsAssetInstance = NULL;

	if ( ! pFnSetHasPhysicsAssetInstance )
		pFnSetHasPhysicsAssetInstance = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance" );

	USkeletalMeshComponent_execSetHasPhysicsAssetInstance_Parms SetHasPhysicsAssetInstance_Parms;
	SetHasPhysicsAssetInstance_Parms.bHasInstance = bHasInstance;

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHasPhysicsAssetInstance, &SetHasPhysicsAssetInstance_Parms, NULL );

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed ( struct FName BoneName )
{
	static UFunction* pFnFindBodyInstanceNamed = NULL;

	if ( ! pFnFindBodyInstanceNamed )
		pFnFindBodyInstanceNamed = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed" );

	USkeletalMeshComponent_execFindBodyInstanceNamed_Parms FindBodyInstanceNamed_Parms;
	memcpy ( &FindBodyInstanceNamed_Parms.BoneName, &BoneName, 0x8 );

	pFnFindBodyInstanceNamed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstanceNamed, &FindBodyInstanceNamed_Parms, NULL );

	pFnFindBodyInstanceNamed->FunctionFlags |= 0x400;

	return FindBodyInstanceNamed_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ConstraintIndex                ( CPF_Parm )

struct FName USkeletalMeshComponent::FindConstraintBoneName ( int ConstraintIndex )
{
	static UFunction* pFnFindConstraintBoneName = NULL;

	if ( ! pFnFindConstraintBoneName )
		pFnFindConstraintBoneName = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindConstraintBoneName" );

	USkeletalMeshComponent_execFindConstraintBoneName_Parms FindConstraintBoneName_Parms;
	FindConstraintBoneName_Parms.ConstraintIndex = ConstraintIndex;

	pFnFindConstraintBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintBoneName, &FindConstraintBoneName_Parms, NULL );

	pFnFindConstraintBoneName->FunctionFlags |= 0x400;

	return FindConstraintBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConstraintName                 ( CPF_Parm )

int USkeletalMeshComponent::FindConstraintIndex ( struct FName ConstraintName )
{
	static UFunction* pFnFindConstraintIndex = NULL;

	if ( ! pFnFindConstraintIndex )
		pFnFindConstraintIndex = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindConstraintIndex" );

	USkeletalMeshComponent_execFindConstraintIndex_Parms FindConstraintIndex_Parms;
	memcpy ( &FindConstraintIndex_Parms.ConstraintName, &ConstraintName, 0x8 );

	pFnFindConstraintIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintIndex, &FindConstraintIndex_Parms, NULL );

	pFnFindConstraintIndex->FunctionFlags |= 0x400;

	return FindConstraintIndex_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.InitSkelControls
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::InitSkelControls ( )
{
	static UFunction* pFnInitSkelControls = NULL;

	if ( ! pFnInitSkelControls )
		pFnInitSkelControls = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.InitSkelControls" );

	USkeletalMeshComponent_execInitSkelControls_Parms InitSkelControls_Parms;

	pFnInitSkelControls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSkelControls, &InitSkelControls_Parms, NULL );

	pFnInitSkelControls->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateParentBoneMap ( )
{
	static UFunction* pFnUpdateParentBoneMap = NULL;

	if ( ! pFnUpdateParentBoneMap )
		pFnUpdateParentBoneMap = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.UpdateParentBoneMap" );

	USkeletalMeshComponent_execUpdateParentBoneMap_Parms UpdateParentBoneMap_Parms;

	pFnUpdateParentBoneMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateParentBoneMap, &UpdateParentBoneMap_Parms, NULL );

	pFnUpdateParentBoneMap->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  NewParentAnimComp              ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp )
{
	static UFunction* pFnSetParentAnimComponent = NULL;

	if ( ! pFnSetParentAnimComponent )
		pFnSetParentAnimComponent = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetParentAnimComponent" );

	USkeletalMeshComponent_execSetParentAnimComponent_Parms SetParentAnimComponent_Parms;
	SetParentAnimComponent_Parms.NewParentAnimComp = NewParentAnimComp;

	pFnSetParentAnimComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParentAnimComponent, &SetParentAnimComponent_Parms, NULL );

	pFnSetParentAnimComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimTree*               NewTemplate                    ( CPF_Parm )

void USkeletalMeshComponent::SetAnimTreeTemplate ( class UAnimTree* NewTemplate )
{
	static UFunction* pFnSetAnimTreeTemplate = NULL;

	if ( ! pFnSetAnimTreeTemplate )
		pFnSetAnimTreeTemplate = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate" );

	USkeletalMeshComponent_execSetAnimTreeTemplate_Parms SetAnimTreeTemplate_Parms;
	SetAnimTreeTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetAnimTreeTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimTreeTemplate, &SetAnimTreeTemplate_Parms, NULL );

	pFnSetAnimTreeTemplate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindClosestBone
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          IgnoreScale                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoneLocation                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

struct FName USkeletalMeshComponent::FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation )
{
	static UFunction* pFnFindClosestBone = NULL;

	if ( ! pFnFindClosestBone )
		pFnFindClosestBone = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindClosestBone" );

	USkeletalMeshComponent_execFindClosestBone_Parms FindClosestBone_Parms;
	memcpy ( &FindClosestBone_Parms.TestLocation, &TestLocation, 0xC );
	FindClosestBone_Parms.IgnoreScale = IgnoreScale;

	pFnFindClosestBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClosestBone, &FindClosestBone_Parms, NULL );

	pFnFindClosestBone->FunctionFlags |= 0x400;

	if ( BoneLocation )
		memcpy ( BoneLocation, &FindClosestBone_Parms.BoneLocation, 0xC );

	return FindClosestBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformFromBoneSpace = NULL;

	if ( ! pFnTransformFromBoneSpace )
		pFnTransformFromBoneSpace = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.TransformFromBoneSpace" );

	USkeletalMeshComponent_execTransformFromBoneSpace_Parms TransformFromBoneSpace_Parms;
	memcpy ( &TransformFromBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformFromBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformFromBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformFromBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformFromBoneSpace, &TransformFromBoneSpace_Parms, NULL );

	pFnTransformFromBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformFromBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformFromBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformToBoneSpace = NULL;

	if ( ! pFnTransformToBoneSpace )
		pFnTransformToBoneSpace = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.TransformToBoneSpace" );

	USkeletalMeshComponent_execTransformToBoneSpace_Parms TransformToBoneSpace_Parms;
	memcpy ( &TransformToBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformToBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformToBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformToBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformToBoneSpace, &TransformToBoneSpace_Parms, NULL );

	pFnTransformToBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformToBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformToBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.GetBoneAxis
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned char                  Axis                           ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneAxis ( struct FName BoneName, unsigned char Axis )
{
	static UFunction* pFnGetBoneAxis = NULL;

	if ( ! pFnGetBoneAxis )
		pFnGetBoneAxis = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetBoneAxis" );

	USkeletalMeshComponent_execGetBoneAxis_Parms GetBoneAxis_Parms;
	memcpy ( &GetBoneAxis_Parms.BoneName, &BoneName, 0x8 );
	GetBoneAxis_Parms.Axis = Axis;

	pFnGetBoneAxis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneAxis, &GetBoneAxis_Parms, NULL );

	pFnGetBoneAxis->FunctionFlags |= 0x400;

	return GetBoneAxis_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneNames
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USkeletalMeshComponent::GetBoneNames ( TArray< struct FName >* BoneNames )
{
	static UFunction* pFnGetBoneNames = NULL;

	if ( ! pFnGetBoneNames )
		pFnGetBoneNames = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetBoneNames" );

	USkeletalMeshComponent_execGetBoneNames_Parms GetBoneNames_Parms;

	pFnGetBoneNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneNames, &GetBoneNames_Parms, NULL );

	pFnGetBoneNames->FunctionFlags |= 0x400;

	if ( BoneNames )
		memcpy ( BoneNames, &GetBoneNames_Parms.BoneNames, 0xC );
};

// Function Engine.SkeletalMeshComponent.GetParentBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

struct FName USkeletalMeshComponent::GetParentBone ( struct FName BoneName )
{
	static UFunction* pFnGetParentBone = NULL;

	if ( ! pFnGetParentBone )
		pFnGetParentBone = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetParentBone" );

	USkeletalMeshComponent_execGetParentBone_Parms GetParentBone_Parms;
	memcpy ( &GetParentBone_Parms.BoneName, &BoneName, 0x8 );

	pFnGetParentBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetParentBone, &GetParentBone_Parms, NULL );

	pFnGetParentBone->FunctionFlags |= 0x400;

	return GetParentBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FMatrix USkeletalMeshComponent::GetBoneMatrix ( int BoneIndex )
{
	static UFunction* pFnGetBoneMatrix = NULL;

	if ( ! pFnGetBoneMatrix )
		pFnGetBoneMatrix = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetBoneMatrix" );

	USkeletalMeshComponent_execGetBoneMatrix_Parms GetBoneMatrix_Parms;
	GetBoneMatrix_Parms.BoneIndex = BoneIndex;

	pFnGetBoneMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneMatrix, &GetBoneMatrix_Parms, NULL );

	pFnGetBoneMatrix->FunctionFlags |= 0x400;

	return GetBoneMatrix_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FName USkeletalMeshComponent::GetBoneName ( int BoneIndex )
{
	static UFunction* pFnGetBoneName = NULL;

	if ( ! pFnGetBoneName )
		pFnGetBoneName = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetBoneName" );

	USkeletalMeshComponent_execGetBoneName_Parms GetBoneName_Parms;
	GetBoneName_Parms.BoneIndex = BoneIndex;

	pFnGetBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneName, &GetBoneName_Parms, NULL );

	pFnGetBoneName->FunctionFlags |= 0x400;

	return GetBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.MatchRefBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

int USkeletalMeshComponent::MatchRefBone ( struct FName BoneName )
{
	static UFunction* pFnMatchRefBone = NULL;

	if ( ! pFnMatchRefBone )
		pFnMatchRefBone = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.MatchRefBone" );

	USkeletalMeshComponent_execMatchRefBone_Parms MatchRefBone_Parms;
	memcpy ( &MatchRefBone_Parms.BoneName, &BoneName, 0x8 );

	pFnMatchRefBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchRefBone, &MatchRefBone_Parms, NULL );

	pFnMatchRefBone->FunctionFlags |= 0x400;

	return MatchRefBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneLocation ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneLocation = NULL;

	if ( ! pFnGetBoneLocation )
		pFnGetBoneLocation = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetBoneLocation" );

	USkeletalMeshComponent_execGetBoneLocation_Parms GetBoneLocation_Parms;
	memcpy ( &GetBoneLocation_Parms.BoneName, &BoneName, 0x8 );
	GetBoneLocation_Parms.Space = Space;

	pFnGetBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneLocation, &GetBoneLocation_Parms, NULL );

	pFnGetBoneLocation->FunctionFlags |= 0x400;

	return GetBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FQuat USkeletalMeshComponent::GetBoneQuaternion ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneQuaternion = NULL;

	if ( ! pFnGetBoneQuaternion )
		pFnGetBoneQuaternion = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetBoneQuaternion" );

	USkeletalMeshComponent_execGetBoneQuaternion_Parms GetBoneQuaternion_Parms;
	memcpy ( &GetBoneQuaternion_Parms.BoneName, &BoneName, 0x8 );
	GetBoneQuaternion_Parms.Space = Space;

	pFnGetBoneQuaternion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneQuaternion, &GetBoneQuaternion_Parms, NULL );

	pFnGetBoneQuaternion->FunctionFlags |= 0x400;

	return GetBoneQuaternion_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindMorphNode" );

	USkeletalMeshComponent_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* USkeletalMeshComponent::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindSkelControl" );

	USkeletalMeshComponent_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AllAnimNodes
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UAnimNode*               Node                           ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node )
{
	static UFunction* pFnAllAnimNodes = NULL;

	if ( ! pFnAllAnimNodes )
		pFnAllAnimNodes = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.AllAnimNodes" );

	USkeletalMeshComponent_execAllAnimNodes_Parms AllAnimNodes_Parms;
	AllAnimNodes_Parms.BaseClass = BaseClass;

	pFnAllAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllAnimNodes, &AllAnimNodes_Parms, NULL );

	pFnAllAnimNodes->FunctionFlags |= 0x400;

	if ( Node )
		*Node = AllAnimNodes_Parms.Node;
};

// Function Engine.SkeletalMeshComponent.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* USkeletalMeshComponent::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindAnimNode" );

	USkeletalMeshComponent_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* USkeletalMeshComponent::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindMorphTarget" );

	USkeletalMeshComponent_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimLength
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

float USkeletalMeshComponent::GetAnimLength ( struct FName AnimSeqName )
{
	static UFunction* pFnGetAnimLength = NULL;

	if ( ! pFnGetAnimLength )
		pFnGetAnimLength = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetAnimLength" );

	USkeletalMeshComponent_execGetAnimLength_Parms GetAnimLength_Parms;
	memcpy ( &GetAnimLength_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	this->ProcessEvent ( pFnGetAnimLength, &GetAnimLength_Parms, NULL );

	return GetAnimLength_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

float USkeletalMeshComponent::GetAnimRateByDuration ( struct FName AnimSeqName, float Duration )
{
	static UFunction* pFnGetAnimRateByDuration = NULL;

	if ( ! pFnGetAnimRateByDuration )
		pFnGetAnimRateByDuration = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetAnimRateByDuration" );

	USkeletalMeshComponent_execGetAnimRateByDuration_Parms GetAnimRateByDuration_Parms;
	memcpy ( &GetAnimRateByDuration_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	GetAnimRateByDuration_Parms.Duration = Duration;

	this->ProcessEvent ( pFnGetAnimRateByDuration, &GetAnimRateByDuration_Parms, NULL );

	return GetAnimRateByDuration_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::RestoreSavedAnimSets ( )
{
	static UFunction* pFnRestoreSavedAnimSets = NULL;

	if ( ! pFnRestoreSavedAnimSets )
		pFnRestoreSavedAnimSets = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets" );

	USkeletalMeshComponent_execRestoreSavedAnimSets_Parms RestoreSavedAnimSets_Parms;

	pFnRestoreSavedAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRestoreSavedAnimSets, &RestoreSavedAnimSets_Parms, NULL );

	pFnRestoreSavedAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SaveAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::SaveAnimSets ( )
{
	static UFunction* pFnSaveAnimSets = NULL;

	if ( ! pFnSaveAnimSets )
		pFnSaveAnimSets = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SaveAnimSets" );

	USkeletalMeshComponent_execSaveAnimSets_Parms SaveAnimSets_Parms;

	pFnSaveAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveAnimSets, &SaveAnimSets_Parms, NULL );

	pFnSaveAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindAnimSequence
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimSequence*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence ( struct FName AnimSeqName )
{
	static UFunction* pFnFindAnimSequence = NULL;

	if ( ! pFnFindAnimSequence )
		pFnFindAnimSequence = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindAnimSequence" );

	USkeletalMeshComponent_execFindAnimSequence_Parms FindAnimSequence_Parms;
	memcpy ( &FindAnimSequence_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	pFnFindAnimSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimSequence, &FindAnimSequence_Parms, NULL );

	pFnFindAnimSequence->FunctionFlags |= 0x400;

	return FindAnimSequence_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetSoftBodyFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetSoftBodyFrozen = NULL;

	if ( ! pFnSetSoftBodyFrozen )
		pFnSetSoftBodyFrozen = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen" );

	USkeletalMeshComponent_execSetSoftBodyFrozen_Parms SetSoftBodyFrozen_Parms;
	SetSoftBodyFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetSoftBodyFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoftBodyFrozen, &SetSoftBodyFrozen_Parms, NULL );

	pFnSetSoftBodyFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateSoftBodyParams ( )
{
	static UFunction* pFnUpdateSoftBodyParams = NULL;

	if ( ! pFnUpdateSoftBodyParams )
		pFnUpdateSoftBodyParams = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams" );

	USkeletalMeshComponent_execUpdateSoftBodyParams_Parms UpdateSoftBodyParams_Parms;

	pFnUpdateSoftBodyParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSoftBodyParams, &UpdateSoftBodyParams_Parms, NULL );

	pFnUpdateSoftBodyParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothValidBoundsMin            ( CPF_Parm )
// struct FVector                 ClothValidBoundsMax            ( CPF_Parm )

void USkeletalMeshComponent::SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax )
{
	static UFunction* pFnSetClothValidBounds = NULL;

	if ( ! pFnSetClothValidBounds )
		pFnSetClothValidBounds = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothValidBounds" );

	USkeletalMeshComponent_execSetClothValidBounds_Parms SetClothValidBounds_Parms;
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMin, &ClothValidBoundsMin, 0xC );
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMax, &ClothValidBoundsMax, 0xC );

	pFnSetClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothValidBounds, &SetClothValidBounds_Parms, NULL );

	pFnSetClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.EnableClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfEnableClothValidBounds       ( CPF_Parm )

void USkeletalMeshComponent::EnableClothValidBounds ( unsigned long IfEnableClothValidBounds )
{
	static UFunction* pFnEnableClothValidBounds = NULL;

	if ( ! pFnEnableClothValidBounds )
		pFnEnableClothValidBounds = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.EnableClothValidBounds" );

	USkeletalMeshComponent_execEnableClothValidBounds_Parms EnableClothValidBounds_Parms;
	EnableClothValidBounds_Parms.IfEnableClothValidBounds = IfEnableClothValidBounds;

	pFnEnableClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableClothValidBounds, &EnableClothValidBounds_Parms, NULL );

	pFnEnableClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  AttatchTwoWay                  ( CPF_Parm )
// unsigned long                  AttachTearable                 ( CPF_Parm )

void USkeletalMeshComponent::AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable )
{
	static UFunction* pFnAttachClothToCollidingShapes = NULL;

	if ( ! pFnAttachClothToCollidingShapes )
		pFnAttachClothToCollidingShapes = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes" );

	USkeletalMeshComponent_execAttachClothToCollidingShapes_Parms AttachClothToCollidingShapes_Parms;
	AttachClothToCollidingShapes_Parms.AttatchTwoWay = AttatchTwoWay;
	AttachClothToCollidingShapes_Parms.AttachTearable = AttachTearable;

	pFnAttachClothToCollidingShapes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachClothToCollidingShapes, &AttachClothToCollidingShapes_Parms, NULL );

	pFnAttachClothToCollidingShapes->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 VelocityOffSet                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothVelocity ( struct FVector VelocityOffSet )
{
	static UFunction* pFnSetClothVelocity = NULL;

	if ( ! pFnSetClothVelocity )
		pFnSetClothVelocity = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothVelocity" );

	USkeletalMeshComponent_execSetClothVelocity_Parms SetClothVelocity_Parms;
	memcpy ( &SetClothVelocity_Parms.VelocityOffSet, &VelocityOffSet, 0xC );

	pFnSetClothVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothVelocity, &SetClothVelocity_Parms, NULL );

	pFnSetClothVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPosition
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothOffSet                    ( CPF_Parm )

void USkeletalMeshComponent::SetClothPosition ( struct FVector ClothOffSet )
{
	static UFunction* pFnSetClothPosition = NULL;

	if ( ! pFnSetClothPosition )
		pFnSetClothPosition = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothPosition" );

	USkeletalMeshComponent_execSetClothPosition_Parms SetClothPosition_Parms;
	memcpy ( &SetClothPosition_Parms.ClothOffSet, &ClothOffSet, 0xC );

	pFnSetClothPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPosition, &SetClothPosition_Parms, NULL );

	pFnSetClothPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleep
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfClothSleep                   ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleep ( unsigned long IfClothSleep )
{
	static UFunction* pFnSetClothSleep = NULL;

	if ( ! pFnSetClothSleep )
		pFnSetClothSleep = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothSleep" );

	USkeletalMeshComponent_execSetClothSleep_Parms SetClothSleep_Parms;
	SetClothSleep_Parms.IfClothSleep = IfClothSleep;

	pFnSetClothSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleep, &SetClothSleep_Parms, NULL );

	pFnSetClothSleep->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothThickness                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothThickness ( float ClothThickness )
{
	static UFunction* pFnSetClothThickness = NULL;

	if ( ! pFnSetClothThickness )
		pFnSetClothThickness = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothThickness" );

	USkeletalMeshComponent_execSetClothThickness_Parms SetClothThickness_Parms;
	SetClothThickness_Parms.ClothThickness = ClothThickness;

	pFnSetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothThickness, &SetClothThickness_Parms, NULL );

	pFnSetClothThickness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothTearFactor                ( CPF_Parm )

void USkeletalMeshComponent::SetClothTearFactor ( float ClothTearFactor )
{
	static UFunction* pFnSetClothTearFactor = NULL;

	if ( ! pFnSetClothTearFactor )
		pFnSetClothTearFactor = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothTearFactor" );

	USkeletalMeshComponent_execSetClothTearFactor_Parms SetClothTearFactor_Parms;
	SetClothTearFactor_Parms.ClothTearFactor = ClothTearFactor;

	pFnSetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothTearFactor, &SetClothTearFactor_Parms, NULL );

	pFnSetClothTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothStretchingStiffness       ( CPF_Parm )

void USkeletalMeshComponent::SetClothStretchingStiffness ( float ClothStretchingStiffness )
{
	static UFunction* pFnSetClothStretchingStiffness = NULL;

	if ( ! pFnSetClothStretchingStiffness )
		pFnSetClothStretchingStiffness = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness" );

	USkeletalMeshComponent_execSetClothStretchingStiffness_Parms SetClothStretchingStiffness_Parms;
	SetClothStretchingStiffness_Parms.ClothStretchingStiffness = ClothStretchingStiffness;

	pFnSetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothStretchingStiffness, &SetClothStretchingStiffness_Parms, NULL );

	pFnSetClothStretchingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothSolverIterations          ( CPF_Parm )

void USkeletalMeshComponent::SetClothSolverIterations ( int ClothSolverIterations )
{
	static UFunction* pFnSetClothSolverIterations = NULL;

	if ( ! pFnSetClothSolverIterations )
		pFnSetClothSolverIterations = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothSolverIterations" );

	USkeletalMeshComponent_execSetClothSolverIterations_Parms SetClothSolverIterations_Parms;
	SetClothSolverIterations_Parms.ClothSolverIterations = ClothSolverIterations;

	pFnSetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSolverIterations, &SetClothSolverIterations_Parms, NULL );

	pFnSetClothSolverIterations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothSleepLinearVelocity       ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity )
{
	static UFunction* pFnSetClothSleepLinearVelocity = NULL;

	if ( ! pFnSetClothSleepLinearVelocity )
		pFnSetClothSleepLinearVelocity = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity" );

	USkeletalMeshComponent_execSetClothSleepLinearVelocity_Parms SetClothSleepLinearVelocity_Parms;
	SetClothSleepLinearVelocity_Parms.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	pFnSetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleepLinearVelocity, &SetClothSleepLinearVelocity_Parms, NULL );

	pFnSetClothSleepLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothPressure                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothPressure ( float ClothPressure )
{
	static UFunction* pFnSetClothPressure = NULL;

	if ( ! pFnSetClothPressure )
		pFnSetClothPressure = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothPressure" );

	USkeletalMeshComponent_execSetClothPressure_Parms SetClothPressure_Parms;
	SetClothPressure_Parms.ClothPressure = ClothPressure;

	pFnSetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPressure, &SetClothPressure_Parms, NULL );

	pFnSetClothPressure->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothFriction                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothFriction ( float ClothFriction )
{
	static UFunction* pFnSetClothFriction = NULL;

	if ( ! pFnSetClothFriction )
		pFnSetClothFriction = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothFriction" );

	USkeletalMeshComponent_execSetClothFriction_Parms SetClothFriction_Parms;
	SetClothFriction_Parms.ClothFriction = ClothFriction;

	pFnSetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFriction, &SetClothFriction_Parms, NULL );

	pFnSetClothFriction->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothFlags                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFlags ( int ClothFlags )
{
	static UFunction* pFnSetClothFlags = NULL;

	if ( ! pFnSetClothFlags )
		pFnSetClothFlags = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothFlags" );

	USkeletalMeshComponent_execSetClothFlags_Parms SetClothFlags_Parms;
	SetClothFlags_Parms.ClothFlags = ClothFlags;

	pFnSetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFlags, &SetClothFlags_Parms, NULL );

	pFnSetClothFlags->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothDampingCoefficient        ( CPF_Parm )

void USkeletalMeshComponent::SetClothDampingCoefficient ( float ClothDampingCoefficient )
{
	static UFunction* pFnSetClothDampingCoefficient = NULL;

	if ( ! pFnSetClothDampingCoefficient )
		pFnSetClothDampingCoefficient = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient" );

	USkeletalMeshComponent_execSetClothDampingCoefficient_Parms SetClothDampingCoefficient_Parms;
	SetClothDampingCoefficient_Parms.ClothDampingCoefficient = ClothDampingCoefficient;

	pFnSetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothDampingCoefficient, &SetClothDampingCoefficient_Parms, NULL );

	pFnSetClothDampingCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothCollisionResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient )
{
	static UFunction* pFnSetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnSetClothCollisionResponseCoefficient )
		pFnSetClothCollisionResponseCoefficient = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient" );

	USkeletalMeshComponent_execSetClothCollisionResponseCoefficient_Parms SetClothCollisionResponseCoefficient_Parms;
	SetClothCollisionResponseCoefficient_Parms.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothCollisionResponseCoefficient, &SetClothCollisionResponseCoefficient_Parms, NULL );

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothBendingStiffness          ( CPF_Parm )

void USkeletalMeshComponent::SetClothBendingStiffness ( float ClothBendingStiffness )
{
	static UFunction* pFnSetClothBendingStiffness = NULL;

	if ( ! pFnSetClothBendingStiffness )
		pFnSetClothBendingStiffness = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothBendingStiffness" );

	USkeletalMeshComponent_execSetClothBendingStiffness_Parms SetClothBendingStiffness_Parms;
	SetClothBendingStiffness_Parms.ClothBendingStiffness = ClothBendingStiffness;

	pFnSetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothBendingStiffness, &SetClothBendingStiffness_Parms, NULL );

	pFnSetClothBendingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachTearFactor          ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentTearFactor ( float ClothAttachTearFactor )
{
	static UFunction* pFnSetClothAttachmentTearFactor = NULL;

	if ( ! pFnSetClothAttachmentTearFactor )
		pFnSetClothAttachmentTearFactor = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor" );

	USkeletalMeshComponent_execSetClothAttachmentTearFactor_Parms SetClothAttachmentTearFactor_Parms;
	SetClothAttachmentTearFactor_Parms.ClothAttachTearFactor = ClothAttachTearFactor;

	pFnSetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentTearFactor, &SetClothAttachmentTearFactor_Parms, NULL );

	pFnSetClothAttachmentTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachmentResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient )
{
	static UFunction* pFnSetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnSetClothAttachmentResponseCoefficient )
		pFnSetClothAttachmentResponseCoefficient = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient" );

	USkeletalMeshComponent_execSetClothAttachmentResponseCoefficient_Parms SetClothAttachmentResponseCoefficient_Parms;
	SetClothAttachmentResponseCoefficient_Parms.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentResponseCoefficient, &SetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothThickness ( )
{
	static UFunction* pFnGetClothThickness = NULL;

	if ( ! pFnGetClothThickness )
		pFnGetClothThickness = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothThickness" );

	USkeletalMeshComponent_execGetClothThickness_Parms GetClothThickness_Parms;

	pFnGetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothThickness, &GetClothThickness_Parms, NULL );

	pFnGetClothThickness->FunctionFlags |= 0x400;

	return GetClothThickness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothTearFactor ( )
{
	static UFunction* pFnGetClothTearFactor = NULL;

	if ( ! pFnGetClothTearFactor )
		pFnGetClothTearFactor = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothTearFactor" );

	USkeletalMeshComponent_execGetClothTearFactor_Parms GetClothTearFactor_Parms;

	pFnGetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothTearFactor, &GetClothTearFactor_Parms, NULL );

	pFnGetClothTearFactor->FunctionFlags |= 0x400;

	return GetClothTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothStretchingStiffness ( )
{
	static UFunction* pFnGetClothStretchingStiffness = NULL;

	if ( ! pFnGetClothStretchingStiffness )
		pFnGetClothStretchingStiffness = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness" );

	USkeletalMeshComponent_execGetClothStretchingStiffness_Parms GetClothStretchingStiffness_Parms;

	pFnGetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothStretchingStiffness, &GetClothStretchingStiffness_Parms, NULL );

	pFnGetClothStretchingStiffness->FunctionFlags |= 0x400;

	return GetClothStretchingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothSolverIterations ( )
{
	static UFunction* pFnGetClothSolverIterations = NULL;

	if ( ! pFnGetClothSolverIterations )
		pFnGetClothSolverIterations = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothSolverIterations" );

	USkeletalMeshComponent_execGetClothSolverIterations_Parms GetClothSolverIterations_Parms;

	pFnGetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSolverIterations, &GetClothSolverIterations_Parms, NULL );

	pFnGetClothSolverIterations->FunctionFlags |= 0x400;

	return GetClothSolverIterations_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothSleepLinearVelocity ( )
{
	static UFunction* pFnGetClothSleepLinearVelocity = NULL;

	if ( ! pFnGetClothSleepLinearVelocity )
		pFnGetClothSleepLinearVelocity = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity" );

	USkeletalMeshComponent_execGetClothSleepLinearVelocity_Parms GetClothSleepLinearVelocity_Parms;

	pFnGetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSleepLinearVelocity, &GetClothSleepLinearVelocity_Parms, NULL );

	pFnGetClothSleepLinearVelocity->FunctionFlags |= 0x400;

	return GetClothSleepLinearVelocity_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothPressure ( )
{
	static UFunction* pFnGetClothPressure = NULL;

	if ( ! pFnGetClothPressure )
		pFnGetClothPressure = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothPressure" );

	USkeletalMeshComponent_execGetClothPressure_Parms GetClothPressure_Parms;

	pFnGetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothPressure, &GetClothPressure_Parms, NULL );

	pFnGetClothPressure->FunctionFlags |= 0x400;

	return GetClothPressure_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothFriction ( )
{
	static UFunction* pFnGetClothFriction = NULL;

	if ( ! pFnGetClothFriction )
		pFnGetClothFriction = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothFriction" );

	USkeletalMeshComponent_execGetClothFriction_Parms GetClothFriction_Parms;

	pFnGetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFriction, &GetClothFriction_Parms, NULL );

	pFnGetClothFriction->FunctionFlags |= 0x400;

	return GetClothFriction_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothFlags ( )
{
	static UFunction* pFnGetClothFlags = NULL;

	if ( ! pFnGetClothFlags )
		pFnGetClothFlags = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothFlags" );

	USkeletalMeshComponent_execGetClothFlags_Parms GetClothFlags_Parms;

	pFnGetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFlags, &GetClothFlags_Parms, NULL );

	pFnGetClothFlags->FunctionFlags |= 0x400;

	return GetClothFlags_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothDampingCoefficient ( )
{
	static UFunction* pFnGetClothDampingCoefficient = NULL;

	if ( ! pFnGetClothDampingCoefficient )
		pFnGetClothDampingCoefficient = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient" );

	USkeletalMeshComponent_execGetClothDampingCoefficient_Parms GetClothDampingCoefficient_Parms;

	pFnGetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothDampingCoefficient, &GetClothDampingCoefficient_Parms, NULL );

	pFnGetClothDampingCoefficient->FunctionFlags |= 0x400;

	return GetClothDampingCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothCollisionResponseCoefficient ( )
{
	static UFunction* pFnGetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnGetClothCollisionResponseCoefficient )
		pFnGetClothCollisionResponseCoefficient = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient" );

	USkeletalMeshComponent_execGetClothCollisionResponseCoefficient_Parms GetClothCollisionResponseCoefficient_Parms;

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothCollisionResponseCoefficient, &GetClothCollisionResponseCoefficient_Parms, NULL );

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothCollisionResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothBendingStiffness ( )
{
	static UFunction* pFnGetClothBendingStiffness = NULL;

	if ( ! pFnGetClothBendingStiffness )
		pFnGetClothBendingStiffness = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothBendingStiffness" );

	USkeletalMeshComponent_execGetClothBendingStiffness_Parms GetClothBendingStiffness_Parms;

	pFnGetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothBendingStiffness, &GetClothBendingStiffness_Parms, NULL );

	pFnGetClothBendingStiffness->FunctionFlags |= 0x400;

	return GetClothBendingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentTearFactor ( )
{
	static UFunction* pFnGetClothAttachmentTearFactor = NULL;

	if ( ! pFnGetClothAttachmentTearFactor )
		pFnGetClothAttachmentTearFactor = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor" );

	USkeletalMeshComponent_execGetClothAttachmentTearFactor_Parms GetClothAttachmentTearFactor_Parms;

	pFnGetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentTearFactor, &GetClothAttachmentTearFactor_Parms, NULL );

	pFnGetClothAttachmentTearFactor->FunctionFlags |= 0x400;

	return GetClothAttachmentTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient ( )
{
	static UFunction* pFnGetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnGetClothAttachmentResponseCoefficient )
		pFnGetClothAttachmentResponseCoefficient = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient" );

	USkeletalMeshComponent_execGetClothAttachmentResponseCoefficient_Parms GetClothAttachmentResponseCoefficient_Parms;

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentResponseCoefficient, &GetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothAttachmentResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ResetClothVertsToRefPose ( )
{
	static UFunction* pFnResetClothVertsToRefPose = NULL;

	if ( ! pFnResetClothVertsToRefPose )
		pFnResetClothVertsToRefPose = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose" );

	USkeletalMeshComponent_execResetClothVertsToRefPose_Parms ResetClothVertsToRefPose_Parms;

	pFnResetClothVertsToRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetClothVertsToRefPose, &ResetClothVertsToRefPose_Parms, NULL );

	pFnResetClothVertsToRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAttachVerts                   ( CPF_Parm )

void USkeletalMeshComponent::SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts )
{
	static UFunction* pFnSetAttachClothVertsToBaseBody = NULL;

	if ( ! pFnSetAttachClothVertsToBaseBody )
		pFnSetAttachClothVertsToBaseBody = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody" );

	USkeletalMeshComponent_execSetAttachClothVertsToBaseBody_Parms SetAttachClothVertsToBaseBody_Parms;
	SetAttachClothVertsToBaseBody_Parms.bAttachVerts = bAttachVerts;

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttachClothVertsToBaseBody, &SetAttachClothVertsToBaseBody_Parms, NULL );

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothExternalForce
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InForce                        ( CPF_Parm )

void USkeletalMeshComponent::SetClothExternalForce ( struct FVector InForce )
{
	static UFunction* pFnSetClothExternalForce = NULL;

	if ( ! pFnSetClothExternalForce )
		pFnSetClothExternalForce = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothExternalForce" );

	USkeletalMeshComponent_execSetClothExternalForce_Parms SetClothExternalForce_Parms;
	memcpy ( &SetClothExternalForce_Parms.InForce, &InForce, 0xC );

	pFnSetClothExternalForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothExternalForce, &SetClothExternalForce_Parms, NULL );

	pFnSetClothExternalForce->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateClothParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateClothParams ( )
{
	static UFunction* pFnUpdateClothParams = NULL;

	if ( ! pFnUpdateClothParams )
		pFnUpdateClothParams = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.UpdateClothParams" );

	USkeletalMeshComponent_execUpdateClothParams_Parms UpdateClothParams_Parms;

	pFnUpdateClothParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateClothParams, &UpdateClothParams_Parms, NULL );

	pFnUpdateClothParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetClothFrozen = NULL;

	if ( ! pFnSetClothFrozen )
		pFnSetClothFrozen = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetClothFrozen" );

	USkeletalMeshComponent_execSetClothFrozen_Parms SetClothFrozen_Parms;
	SetClothFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetClothFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFrozen, &SetClothFrozen_Parms, NULL );

	pFnSetClothFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnable                      ( CPF_Parm )

void USkeletalMeshComponent::SetEnableClothSimulation ( unsigned long bInEnable )
{
	static UFunction* pFnSetEnableClothSimulation = NULL;

	if ( ! pFnSetEnableClothSimulation )
		pFnSetEnableClothSimulation = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetEnableClothSimulation" );

	USkeletalMeshComponent_execSetEnableClothSimulation_Parms SetEnableClothSimulation_Parms;
	SetEnableClothSimulation_Parms.bInEnable = bInEnable;

	pFnSetEnableClothSimulation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnableClothSimulation, &SetEnableClothSimulation_Parms, NULL );

	pFnSetEnableClothSimulation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetForceRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewForceRefPose               ( CPF_Parm )

void USkeletalMeshComponent::SetForceRefPose ( unsigned long bNewForceRefPose )
{
	static UFunction* pFnSetForceRefPose = NULL;

	if ( ! pFnSetForceRefPose )
		pFnSetForceRefPose = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetForceRefPose" );

	USkeletalMeshComponent_execSetForceRefPose_Parms SetForceRefPose_Parms;
	SetForceRefPose_Parms.bNewForceRefPose = bNewForceRefPose;

	pFnSetForceRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceRefPose, &SetForceRefPose_Parms, NULL );

	pFnSetForceRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           NewPhysicsAsset                ( CPF_Parm )
// unsigned long                  bForceReInit                   ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit )
{
	static UFunction* pFnSetPhysicsAsset = NULL;

	if ( ! pFnSetPhysicsAsset )
		pFnSetPhysicsAsset = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetPhysicsAsset" );

	USkeletalMeshComponent_execSetPhysicsAsset_Parms SetPhysicsAsset_Parms;
	SetPhysicsAsset_Parms.NewPhysicsAsset = NewPhysicsAsset;
	SetPhysicsAsset_Parms.bForceReInit = bForceReInit;

	pFnSetPhysicsAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysicsAsset, &SetPhysicsAsset_Parms, NULL );

	pFnSetPhysicsAsset->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           NewMesh                        ( CPF_Parm )
// unsigned long                  bKeepSpaceBases                ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases )
{
	static UFunction* pFnSetSkeletalMesh = NULL;

	if ( ! pFnSetSkeletalMesh )
		pFnSetSkeletalMesh = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.SetSkeletalMesh" );

	USkeletalMeshComponent_execSetSkeletalMesh_Parms SetSkeletalMesh_Parms;
	SetSkeletalMesh_Parms.NewMesh = NewMesh;
	SetSkeletalMesh_Parms.bKeepSpaceBases = bKeepSpaceBases;

	pFnSetSkeletalMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkeletalMesh, &SetSkeletalMesh_Parms, NULL );

	pFnSetSkeletalMesh->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void USkeletalMeshComponent::AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAttachedComponents = NULL;

	if ( ! pFnAttachedComponents )
		pFnAttachedComponents = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.AttachedComponents" );

	USkeletalMeshComponent_execAttachedComponents_Parms AttachedComponents_Parms;
	AttachedComponents_Parms.BaseClass = BaseClass;

	pFnAttachedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachedComponents, &AttachedComponents_Parms, NULL );

	pFnAttachedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AttachedComponents_Parms.OutComponent;
};

// Function Engine.SkeletalMeshComponent.IsComponentAttached
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool USkeletalMeshComponent::IsComponentAttached ( class UActorComponent* Component, struct FName BoneName )
{
	static UFunction* pFnIsComponentAttached = NULL;

	if ( ! pFnIsComponentAttached )
		pFnIsComponentAttached = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.IsComponentAttached" );

	USkeletalMeshComponent_execIsComponentAttached_Parms IsComponentAttached_Parms;
	IsComponentAttached_Parms.Component = Component;
	memcpy ( &IsComponentAttached_Parms.BoneName, &BoneName, 0x8 );

	pFnIsComponentAttached->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsComponentAttached, &IsComponentAttached_Parms, NULL );

	pFnIsComponentAttached->FunctionFlags |= 0x400;

	return IsComponentAttached_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// struct FName                   InBoneName                     ( CPF_Parm )

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone ( struct FName InBoneName )
{
	static UFunction* pFnFindComponentAttachedToBone = NULL;

	if ( ! pFnFindComponentAttachedToBone )
		pFnFindComponentAttachedToBone = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone" );

	USkeletalMeshComponent_execFindComponentAttachedToBone_Parms FindComponentAttachedToBone_Parms;
	memcpy ( &FindComponentAttachedToBone_Parms.InBoneName, &InBoneName, 0x8 );

	pFnFindComponentAttachedToBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindComponentAttachedToBone, &FindComponentAttachedToBone_Parms, NULL );

	pFnFindComponentAttachedToBone->FunctionFlags |= 0x400;

	return FindComponentAttachedToBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

struct FName USkeletalMeshComponent::GetSocketBoneName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketBoneName = NULL;

	if ( ! pFnGetSocketBoneName )
		pFnGetSocketBoneName = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetSocketBoneName" );

	USkeletalMeshComponent_execGetSocketBoneName_Parms GetSocketBoneName_Parms;
	memcpy ( &GetSocketBoneName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketBoneName, &GetSocketBoneName_Parms, NULL );

	pFnGetSocketBoneName->FunctionFlags |= 0x400;

	return GetSocketBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshSocket*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketByName = NULL;

	if ( ! pFnGetSocketByName )
		pFnGetSocketByName = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetSocketByName" );

	USkeletalMeshComponent_execGetSocketByName_Parms GetSocketByName_Parms;
	memcpy ( &GetSocketByName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketByName, &GetSocketByName_Parms, NULL );

	pFnGetSocketByName->FunctionFlags |= 0x400;

	return GetSocketByName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation ( struct FName InSocketName, struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnGetSocketWorldLocationAndRotation = NULL;

	if ( ! pFnGetSocketWorldLocationAndRotation )
		pFnGetSocketWorldLocationAndRotation = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation" );

	USkeletalMeshComponent_execGetSocketWorldLocationAndRotation_Parms GetSocketWorldLocationAndRotation_Parms;
	memcpy ( &GetSocketWorldLocationAndRotation_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketWorldLocationAndRotation, &GetSocketWorldLocationAndRotation_Parms, NULL );

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &GetSocketWorldLocationAndRotation_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &GetSocketWorldLocationAndRotation_Parms.OutRotation, 0xC );

	return GetSocketWorldLocationAndRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachComponentToSocket
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_Parm )

void USkeletalMeshComponent::AttachComponentToSocket ( class UActorComponent* Component, struct FName SocketName )
{
	static UFunction* pFnAttachComponentToSocket = NULL;

	if ( ! pFnAttachComponentToSocket )
		pFnAttachComponentToSocket = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.AttachComponentToSocket" );

	USkeletalMeshComponent_execAttachComponentToSocket_Parms AttachComponentToSocket_Parms;
	AttachComponentToSocket_Parms.Component = Component;
	memcpy ( &AttachComponentToSocket_Parms.SocketName, &SocketName, 0x8 );

	pFnAttachComponentToSocket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponentToSocket, &AttachComponentToSocket_Parms, NULL );

	pFnAttachComponentToSocket->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::DetachComponent ( class UActorComponent* Component )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.DetachComponent" );

	USkeletalMeshComponent_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.Component = Component;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 RelativeLocation               ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                RelativeRotation               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 RelativeScale                  ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshComponent.AttachComponent" );

	USkeletalMeshComponent_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.Component = Component;
	memcpy ( &AttachComponent_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &AttachComponent_Parms.RelativeLocation, &RelativeLocation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeRotation, &RelativeRotation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeScale, &RelativeScale, 0xC );

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;
};

// Function Engine.SoundCue.GetCueDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USoundCue::GetCueDuration ( )
{
	static UFunction* pFnGetCueDuration = NULL;

	if ( ! pFnGetCueDuration )
		pFnGetCueDuration = UObject::FindObject< UFunction > ( "Function Engine.SoundCue.GetCueDuration" );

	USoundCue_execGetCueDuration_Parms GetCueDuration_Parms;

	pFnGetCueDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCueDuration, &GetCueDuration_Parms, NULL );

	pFnGetCueDuration->FunctionFlags |= 0x400;

	return GetCueDuration_Parms.ReturnValue;
};

// Function Engine.StaticMeshActor.PreBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AStaticMeshActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.StaticMeshActor.PreBeginPlay" );

	AStaticMeshActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.TeamInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATeamInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.GetTeamNum" );

	ATeamInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetTextColor
// [0x00020002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor ATeamInfo::GetTextColor ( )
{
	static UFunction* pFnGetTextColor = NULL;

	if ( ! pFnGetTextColor )
		pFnGetTextColor = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.GetTextColor" );

	ATeamInfo_execGetTextColor_Parms GetTextColor_Parms;

	this->ProcessEvent ( pFnGetTextColor, &GetTextColor_Parms, NULL );

	return GetTextColor_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetHUDColor
// [0x00020102] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor ATeamInfo::GetHUDColor ( )
{
	static UFunction* pFnGetHUDColor = NULL;

	if ( ! pFnGetHUDColor )
		pFnGetHUDColor = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.GetHUDColor" );

	ATeamInfo_execGetHUDColor_Parms GetHUDColor_Parms;

	this->ProcessEvent ( pFnGetHUDColor, &GetHUDColor_Parms, NULL );

	return GetHUDColor_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATeamInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.GetHumanReadableName" );

	ATeamInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.TeamInfo.RemoveFromTeam
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )

void ATeamInfo::RemoveFromTeam ( class AController* Other )
{
	static UFunction* pFnRemoveFromTeam = NULL;

	if ( ! pFnRemoveFromTeam )
		pFnRemoveFromTeam = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.RemoveFromTeam" );

	ATeamInfo_execRemoveFromTeam_Parms RemoveFromTeam_Parms;
	RemoveFromTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnRemoveFromTeam, &RemoveFromTeam_Parms, NULL );
};

// Function Engine.TeamInfo.AddToTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )

bool ATeamInfo::AddToTeam ( class AController* Other )
{
	static UFunction* pFnAddToTeam = NULL;

	if ( ! pFnAddToTeam )
		pFnAddToTeam = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.AddToTeam" );

	ATeamInfo_execAddToTeam_Parms AddToTeam_Parms;
	AddToTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnAddToTeam, &AddToTeam_Parms, NULL );

	return AddToTeam_Parms.ReturnValue;
};

// Function Engine.TeamInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATeamInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.Destroyed" );

	ATeamInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.TeamInfo.UnbindTeamDataProvider
// [0x00020102] 
// Parameters infos:

void ATeamInfo::UnbindTeamDataProvider ( )
{
	static UFunction* pFnUnbindTeamDataProvider = NULL;

	if ( ! pFnUnbindTeamDataProvider )
		pFnUnbindTeamDataProvider = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.UnbindTeamDataProvider" );

	ATeamInfo_execUnbindTeamDataProvider_Parms UnbindTeamDataProvider_Parms;

	this->ProcessEvent ( pFnUnbindTeamDataProvider, &UnbindTeamDataProvider_Parms, NULL );
};

// Function Engine.TeamInfo.GetCurrentGameDS
// [0x00020102] 
// Parameters infos:
// class UCurrentGameDataStore*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UCurrentGameDataStore* ATeamInfo::GetCurrentGameDS ( )
{
	static UFunction* pFnGetCurrentGameDS = NULL;

	if ( ! pFnGetCurrentGameDS )
		pFnGetCurrentGameDS = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.GetCurrentGameDS" );

	ATeamInfo_execGetCurrentGameDS_Parms GetCurrentGameDS_Parms;

	this->ProcessEvent ( pFnGetCurrentGameDS, &GetCurrentGameDS_Parms, NULL );

	return GetCurrentGameDS_Parms.ReturnValue;
};

// Function Engine.TeamInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATeamInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.TeamInfo.ReplicatedEvent" );

	ATeamInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Teleporter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATeleporter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = UObject::FindObject< UFunction > ( "Function Engine.Teleporter.SpecialHandling" );

	ATeleporter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Teleporter.ScriptPostTouchTeleporter
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATeleporter::eventScriptPostTouchTeleporter ( class AActor* Other )
{
	static UFunction* pFnScriptPostTouchTeleporter = NULL;

	if ( ! pFnScriptPostTouchTeleporter )
		pFnScriptPostTouchTeleporter = UObject::FindObject< UFunction > ( "Function Engine.Teleporter.ScriptPostTouchTeleporter" );

	ATeleporter_eventScriptPostTouchTeleporter_Parms ScriptPostTouchTeleporter_Parms;
	ScriptPostTouchTeleporter_Parms.Other = Other;

	this->ProcessEvent ( pFnScriptPostTouchTeleporter, &ScriptPostTouchTeleporter_Parms, NULL );
};

// Function Engine.Teleporter.PostTouch
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATeleporter::PostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = UObject::FindObject< UFunction > ( "Function Engine.Teleporter.PostTouch" );

	ATeleporter_execPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	pFnPostTouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );

	pFnPostTouch->FunctionFlags |= 0x400;
};

// Function Engine.Teleporter.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATeleporter::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.Teleporter.Touch" );

	ATeleporter_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Teleporter.Accept
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ATeleporter::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = UObject::FindObject< UFunction > ( "Function Engine.Teleporter.Accept" );

	ATeleporter_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.Teleporter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATeleporter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Teleporter.PostBeginPlay" );

	ATeleporter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Teleporter.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ATeleporter::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = UObject::FindObject< UFunction > ( "Function Engine.Teleporter.CanTeleport" );

	ATeleporter_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.Texture2DComposite.ResetSourceRegions
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTexture2DComposite::ResetSourceRegions ( )
{
	static UFunction* pFnResetSourceRegions = NULL;

	if ( ! pFnResetSourceRegions )
		pFnResetSourceRegions = UObject::FindObject< UFunction > ( "Function Engine.Texture2DComposite.ResetSourceRegions" );

	UTexture2DComposite_execResetSourceRegions_Parms ResetSourceRegions_Parms;

	pFnResetSourceRegions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetSourceRegions, &ResetSourceRegions_Parms, NULL );

	pFnResetSourceRegions->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.UpdateCompositeTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NumMipsToGenerate              ( CPF_Parm )

void UTexture2DComposite::UpdateCompositeTexture ( int NumMipsToGenerate )
{
	static UFunction* pFnUpdateCompositeTexture = NULL;

	if ( ! pFnUpdateCompositeTexture )
		pFnUpdateCompositeTexture = UObject::FindObject< UFunction > ( "Function Engine.Texture2DComposite.UpdateCompositeTexture" );

	UTexture2DComposite_execUpdateCompositeTexture_Parms UpdateCompositeTexture_Parms;
	UpdateCompositeTexture_Parms.NumMipsToGenerate = NumMipsToGenerate;

	pFnUpdateCompositeTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCompositeTexture, &UpdateCompositeTexture_Parms, NULL );

	pFnUpdateCompositeTexture->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTexture2DComposite::SourceTexturesFullyStreamedIn ( )
{
	static UFunction* pFnSourceTexturesFullyStreamedIn = NULL;

	if ( ! pFnSourceTexturesFullyStreamedIn )
		pFnSourceTexturesFullyStreamedIn = UObject::FindObject< UFunction > ( "Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn" );

	UTexture2DComposite_execSourceTexturesFullyStreamedIn_Parms SourceTexturesFullyStreamedIn_Parms;

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSourceTexturesFullyStreamedIn, &SourceTexturesFullyStreamedIn_Parms, NULL );

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= 0x400;

	return SourceTexturesFullyStreamedIn_Parms.ReturnValue;
};

// Function Engine.TextureFlipBook.SetCurrentFrame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Row                            ( CPF_Parm )
// int                            Col                            ( CPF_Parm )

void UTextureFlipBook::SetCurrentFrame ( int Row, int Col )
{
	static UFunction* pFnSetCurrentFrame = NULL;

	if ( ! pFnSetCurrentFrame )
		pFnSetCurrentFrame = UObject::FindObject< UFunction > ( "Function Engine.TextureFlipBook.SetCurrentFrame" );

	UTextureFlipBook_execSetCurrentFrame_Parms SetCurrentFrame_Parms;
	SetCurrentFrame_Parms.Row = Row;
	SetCurrentFrame_Parms.Col = Col;

	pFnSetCurrentFrame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentFrame, &SetCurrentFrame_Parms, NULL );

	pFnSetCurrentFrame->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = UObject::FindObject< UFunction > ( "Function Engine.TextureFlipBook.Stop" );

	UTextureFlipBook_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = UObject::FindObject< UFunction > ( "Function Engine.TextureFlipBook.Pause" );

	UTextureFlipBook_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = UObject::FindObject< UFunction > ( "Function Engine.TextureFlipBook.Play" );

	UTextureFlipBook_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = UObject::FindObject< UFunction > ( "Function Engine.TextureMovie.Stop" );

	UTextureMovie_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = UObject::FindObject< UFunction > ( "Function Engine.TextureMovie.Pause" );

	UTextureMovie_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = UObject::FindObject< UFunction > ( "Function Engine.TextureMovie.Play" );

	UTextureMovie_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.TextureRenderTarget2D.Create
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// struct FLinearColor            InClearColor                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyRenderOnce                ( CPF_OptionalParm | CPF_Parm )

class UTextureRenderTarget2D* UTextureRenderTarget2D::Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = UObject::FindObject< UFunction > ( "Function Engine.TextureRenderTarget2D.Create" );

	UTextureRenderTarget2D_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;
	memcpy ( &Create_Parms.InClearColor, &InClearColor, 0x10 );
	Create_Parms.bOnlyRenderOnce = bOnlyRenderOnce;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.Trigger.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ATrigger::ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = UObject::FindObject< UFunction > ( "Function Engine.Trigger.ApplyCheckpointRecord" );

	ATrigger_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ATrigger::CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = UObject::FindObject< UFunction > ( "Function Engine.Trigger.CreateCheckpointRecord" );

	ATrigger_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ATrigger::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = UObject::FindObject< UFunction > ( "Function Engine.Trigger.StopsProjectile" );

	ATrigger_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Trigger.UnTrigger
// [0x00020002] 
// Parameters infos:

void ATrigger::UnTrigger ( )
{
	static UFunction* pFnUnTrigger = NULL;

	if ( ! pFnUnTrigger )
		pFnUnTrigger = UObject::FindObject< UFunction > ( "Function Engine.Trigger.UnTrigger" );

	ATrigger_execUnTrigger_Parms UnTrigger_Parms;

	this->ProcessEvent ( pFnUnTrigger, &UnTrigger_Parms, NULL );
};

// Function Engine.Trigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATrigger::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.Trigger.Touch" );

	ATrigger_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.TriggerVolume.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ATriggerVolume::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = UObject::FindObject< UFunction > ( "Function Engine.TriggerVolume.StopsProjectile" );

	ATriggerVolume_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.TriggerVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATriggerVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.TriggerVolume.PostBeginPlay" );

	ATriggerVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Vehicle.NotifyDriverTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AVehicle::NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyDriverTakeHit = NULL;

	if ( ! pFnNotifyDriverTakeHit )
		pFnNotifyDriverTakeHit = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.NotifyDriverTakeHit" );

	AVehicle_execNotifyDriverTakeHit_Parms NotifyDriverTakeHit_Parms;
	NotifyDriverTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyDriverTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyDriverTakeHit_Parms.Damage = Damage;
	NotifyDriverTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyDriverTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyDriverTakeHit, &NotifyDriverTakeHit_Parms, NULL );
};

// Function Engine.Vehicle.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AVehicle::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.ReplicatedEvent" );

	AVehicle_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Vehicle.DrivingStatusChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventDrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.DrivingStatusChanged" );

	AVehicle_eventDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.Vehicle.HandleDeadVehicleDriver
// [0x00020000] 
// Parameters infos:

void AVehicle::HandleDeadVehicleDriver ( )
{
	static UFunction* pFnHandleDeadVehicleDriver = NULL;

	if ( ! pFnHandleDeadVehicleDriver )
		pFnHandleDeadVehicleDriver = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.HandleDeadVehicleDriver" );

	AVehicle_execHandleDeadVehicleDriver_Parms HandleDeadVehicleDriver_Parms;

	this->ProcessEvent ( pFnHandleDeadVehicleDriver, &HandleDeadVehicleDriver_Parms, NULL );
};

// Function Engine.Vehicle.SetDriving
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void AVehicle::SetDriving ( unsigned long B )
{
	static UFunction* pFnSetDriving = NULL;

	if ( ! pFnSetDriving )
		pFnSetDriving = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.SetDriving" );

	AVehicle_execSetDriving_Parms SetDriving_Parms;
	SetDriving_Parms.B = B;

	pFnSetDriving->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDriving, &SetDriving_Parms, NULL );

	pFnSetDriving->FunctionFlags |= 0x400;
};

// Function Engine.Vehicle.GetEntryLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AVehicle::GetEntryLocation ( )
{
	static UFunction* pFnGetEntryLocation = NULL;

	if ( ! pFnGetEntryLocation )
		pFnGetEntryLocation = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.GetEntryLocation" );

	AVehicle_execGetEntryLocation_Parms GetEntryLocation_Parms;

	this->ProcessEvent ( pFnGetEntryLocation, &GetEntryLocation_Parms, NULL );

	return GetEntryLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.CrushedBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void AVehicle::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.CrushedBy" );

	AVehicle_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Vehicle.EncroachingOn
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVehicle::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.EncroachingOn" );

	AVehicle_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Vehicle.GetCollisionDamageInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AController* AVehicle::GetCollisionDamageInstigator ( )
{
	static UFunction* pFnGetCollisionDamageInstigator = NULL;

	if ( ! pFnGetCollisionDamageInstigator )
		pFnGetCollisionDamageInstigator = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.GetCollisionDamageInstigator" );

	AVehicle_execGetCollisionDamageInstigator_Parms GetCollisionDamageInstigator_Parms;

	this->ProcessEvent ( pFnGetCollisionDamageInstigator, &GetCollisionDamageInstigator_Parms, NULL );

	return GetCollisionDamageInstigator_Parms.ReturnValue;
};

// Function Engine.Vehicle.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVehicle::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.EncroachedBy" );

	AVehicle_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Vehicle.FaceRotation
// [0x00020100] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void AVehicle::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.FaceRotation" );

	AVehicle_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function Engine.Vehicle.GetDefaultCameraMode
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName AVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.GetDefaultCameraMode" );

	AVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	pFnGetDefaultCameraMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	pFnGetDefaultCameraMode->FunctionFlags |= 0x400;

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlayDying
// [0x00020100] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void AVehicle::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.PlayDying" );

	AVehicle_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Vehicle.DriverDied
// [0x00020002] 
// Parameters infos:

void AVehicle::DriverDied ( )
{
	static UFunction* pFnDriverDied = NULL;

	if ( ! pFnDriverDied )
		pFnDriverDied = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.DriverDied" );

	AVehicle_execDriverDied_Parms DriverDied_Parms;

	this->ProcessEvent ( pFnDriverDied, &DriverDied_Parms, NULL );
};

// Function Engine.Vehicle.Died
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nWeaponType                    ( CPF_OptionalParm | CPF_Parm )

bool AVehicle::eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nWeaponType )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.Died" );

	AVehicle_eventDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );
	Died_Parms.nWeaponType = nWeaponType;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Vehicle.ThrowActiveWeapon
// [0x00020000] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AVehicle::ThrowActiveWeapon ( class UClass* DamageType )
{
	static UFunction* pFnThrowActiveWeapon = NULL;

	if ( ! pFnThrowActiveWeapon )
		pFnThrowActiveWeapon = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.ThrowActiveWeapon" );

	AVehicle_execThrowActiveWeapon_Parms ThrowActiveWeapon_Parms;
	ThrowActiveWeapon_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnThrowActiveWeapon, &ThrowActiveWeapon_Parms, NULL );
};

// Function Engine.Vehicle.AdjustDriverDamage
// [0x00420002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AVehicle::AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDriverDamage = NULL;

	if ( ! pFnAdjustDriverDamage )
		pFnAdjustDriverDamage = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.AdjustDriverDamage" );

	AVehicle_execAdjustDriverDamage_Parms AdjustDriverDamage_Parms;
	AdjustDriverDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDriverDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDriverDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnAdjustDriverDamage, &AdjustDriverDamage_Parms, NULL );

	if ( Damage )
		*Damage = AdjustDriverDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDriverDamage_Parms.Momentum, 0xC );
};

// Function Engine.Vehicle.SetKillInstigator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

class AController* AVehicle::SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType )
{
	static UFunction* pFnSetKillInstigator = NULL;

	if ( ! pFnSetKillInstigator )
		pFnSetKillInstigator = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.SetKillInstigator" );

	AVehicle_execSetKillInstigator_Parms SetKillInstigator_Parms;
	SetKillInstigator_Parms.InstigatedBy = InstigatedBy;
	SetKillInstigator_Parms.DamageType = DamageType;

	pFnSetKillInstigator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillInstigator, &SetKillInstigator_Parms, NULL );

	pFnSetKillInstigator->FunctionFlags |= 0x400;

	return SetKillInstigator_Parms.ReturnValue;
};

// Function Engine.Vehicle.UnPossessed
// [0x00020002] 
// Parameters infos:

void AVehicle::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.UnPossessed" );

	AVehicle_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Vehicle.TryExitPos
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )
// struct FVector                 ExitPos                        ( CPF_Parm )
// unsigned long                  bMustFindGround                ( CPF_Parm )

bool AVehicle::TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround )
{
	static UFunction* pFnTryExitPos = NULL;

	if ( ! pFnTryExitPos )
		pFnTryExitPos = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.TryExitPos" );

	AVehicle_execTryExitPos_Parms TryExitPos_Parms;
	TryExitPos_Parms.ExitingDriver = ExitingDriver;
	memcpy ( &TryExitPos_Parms.ExitPos, &ExitPos, 0xC );
	TryExitPos_Parms.bMustFindGround = bMustFindGround;

	this->ProcessEvent ( pFnTryExitPos, &TryExitPos_Parms, NULL );

	return TryExitPos_Parms.ReturnValue;
};

// Function Engine.Vehicle.FindAutoExit
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )

bool AVehicle::FindAutoExit ( class APawn* ExitingDriver )
{
	static UFunction* pFnFindAutoExit = NULL;

	if ( ! pFnFindAutoExit )
		pFnFindAutoExit = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.FindAutoExit" );

	AVehicle_execFindAutoExit_Parms FindAutoExit_Parms;
	FindAutoExit_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnFindAutoExit, &FindAutoExit_Parms, NULL );

	return FindAutoExit_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlaceExitingDriver
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_OptionalParm | CPF_Parm )

bool AVehicle::PlaceExitingDriver ( class APawn* ExitingDriver )
{
	static UFunction* pFnPlaceExitingDriver = NULL;

	if ( ! pFnPlaceExitingDriver )
		pFnPlaceExitingDriver = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.PlaceExitingDriver" );

	AVehicle_execPlaceExitingDriver_Parms PlaceExitingDriver_Parms;
	PlaceExitingDriver_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnPlaceExitingDriver, &PlaceExitingDriver_Parms, NULL );

	return PlaceExitingDriver_Parms.ReturnValue;
};

// Function Engine.Vehicle.DriverLeft
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventDriverLeft ( )
{
	static UFunction* pFnDriverLeft = NULL;

	if ( ! pFnDriverLeft )
		pFnDriverLeft = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.DriverLeft" );

	AVehicle_eventDriverLeft_Parms DriverLeft_Parms;

	this->ProcessEvent ( pFnDriverLeft, &DriverLeft_Parms, NULL );
};

// Function Engine.Vehicle.SetInputs
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// float                          InSprint                       ( CPF_Parm )

void AVehicle::SetInputs ( float InForward, float InStrafe, float InUp, float InSprint )
{
	static UFunction* pFnSetInputs = NULL;

	if ( ! pFnSetInputs )
		pFnSetInputs = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.SetInputs" );

	AVehicle_execSetInputs_Parms SetInputs_Parms;
	SetInputs_Parms.InForward = InForward;
	SetInputs_Parms.InStrafe = InStrafe;
	SetInputs_Parms.InUp = InUp;
	SetInputs_Parms.InSprint = InSprint;

	pFnSetInputs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputs, &SetInputs_Parms, NULL );

	pFnSetInputs->FunctionFlags |= 0x400;
};

// Function Engine.Vehicle.ContinueOnFoot
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::eventContinueOnFoot ( )
{
	static UFunction* pFnContinueOnFoot = NULL;

	if ( ! pFnContinueOnFoot )
		pFnContinueOnFoot = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.ContinueOnFoot" );

	AVehicle_eventContinueOnFoot_Parms ContinueOnFoot_Parms;

	this->ProcessEvent ( pFnContinueOnFoot, &ContinueOnFoot_Parms, NULL );

	return ContinueOnFoot_Parms.ReturnValue;
};

// Function Engine.Vehicle.DetachDriver
// [0x00020100] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::DetachDriver ( class APawn* P )
{
	static UFunction* pFnDetachDriver = NULL;

	if ( ! pFnDetachDriver )
		pFnDetachDriver = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.DetachDriver" );

	AVehicle_execDetachDriver_Parms DetachDriver_Parms;
	DetachDriver_Parms.P = P;

	this->ProcessEvent ( pFnDetachDriver, &DetachDriver_Parms, NULL );
};

// Function Engine.Vehicle.AttachDriver
// [0x00020102] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::AttachDriver ( class APawn* P )
{
	static UFunction* pFnAttachDriver = NULL;

	if ( ! pFnAttachDriver )
		pFnAttachDriver = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.AttachDriver" );

	AVehicle_execAttachDriver_Parms AttachDriver_Parms;
	AttachDriver_Parms.P = P;

	this->ProcessEvent ( pFnAttachDriver, &AttachDriver_Parms, NULL );
};

// Function Engine.Vehicle.EntryAnnouncement
// [0x00020000] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AVehicle::EntryAnnouncement ( class AController* C )
{
	static UFunction* pFnEntryAnnouncement = NULL;

	if ( ! pFnEntryAnnouncement )
		pFnEntryAnnouncement = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.EntryAnnouncement" );

	AVehicle_execEntryAnnouncement_Parms EntryAnnouncement_Parms;
	EntryAnnouncement_Parms.C = C;

	this->ProcessEvent ( pFnEntryAnnouncement, &EntryAnnouncement_Parms, NULL );
};

// Function Engine.Vehicle.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AVehicle::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.PossessedBy" );

	AVehicle_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Vehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.TryToDrive" );

	AVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.Vehicle.AnySeatAvailable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::AnySeatAvailable ( )
{
	static UFunction* pFnAnySeatAvailable = NULL;

	if ( ! pFnAnySeatAvailable )
		pFnAnySeatAvailable = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.AnySeatAvailable" );

	AVehicle_execAnySeatAvailable_Parms AnySeatAvailable_Parms;

	this->ProcessEvent ( pFnAnySeatAvailable, &AnySeatAvailable_Parms, NULL );

	return AnySeatAvailable_Parms.ReturnValue;
};

// Function Engine.Vehicle.CanEnterVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::CanEnterVehicle ( class APawn* P )
{
	static UFunction* pFnCanEnterVehicle = NULL;

	if ( ! pFnCanEnterVehicle )
		pFnCanEnterVehicle = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.CanEnterVehicle" );

	AVehicle_execCanEnterVehicle_Parms CanEnterVehicle_Parms;
	CanEnterVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanEnterVehicle, &CanEnterVehicle_Parms, NULL );

	return CanEnterVehicle_Parms.ReturnValue;
};

// Function Engine.Vehicle.Destroyed_HandleDriver
// [0x00020102] 
// Parameters infos:

void AVehicle::Destroyed_HandleDriver ( )
{
	static UFunction* pFnDestroyed_HandleDriver = NULL;

	if ( ! pFnDestroyed_HandleDriver )
		pFnDestroyed_HandleDriver = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.Destroyed_HandleDriver" );

	AVehicle_execDestroyed_HandleDriver_Parms Destroyed_HandleDriver_Parms;

	this->ProcessEvent ( pFnDestroyed_HandleDriver, &Destroyed_HandleDriver_Parms, NULL );
};

// Function Engine.Vehicle.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.Destroyed" );

	AVehicle_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Vehicle.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.CheatFly" );

	AVehicle_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.CheatGhost" );

	AVehicle_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.CheatWalk" );

	AVehicle_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Vehicle.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.PostBeginPlay" );

	AVehicle_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Vehicle.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void AVehicle::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.SetBaseEyeheight" );

	AVehicle_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Vehicle.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void AVehicle::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.PlayerChangedTeam" );

	AVehicle_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Vehicle.DriverRadiusDamage
// [0x00020002] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AVehicle::DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser )
{
	static UFunction* pFnDriverRadiusDamage = NULL;

	if ( ! pFnDriverRadiusDamage )
		pFnDriverRadiusDamage = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.DriverRadiusDamage" );

	AVehicle_execDriverRadiusDamage_Parms DriverRadiusDamage_Parms;
	DriverRadiusDamage_Parms.DamageAmount = DamageAmount;
	DriverRadiusDamage_Parms.DamageRadius = DamageRadius;
	DriverRadiusDamage_Parms.EventInstigator = EventInstigator;
	DriverRadiusDamage_Parms.DamageType = DamageType;
	DriverRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &DriverRadiusDamage_Parms.HitLocation, &HitLocation, 0xC );
	DriverRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnDriverRadiusDamage, &DriverRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AVehicle::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.TakeRadiusDamage" );

	AVehicle_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.GetTargetLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AVehicle::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.GetTargetLocation" );

	AVehicle_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.Suicide
// [0x00020002] 
// Parameters infos:

void AVehicle::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.Suicide" );

	AVehicle_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Vehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.DisplayDebug" );

	AVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Vehicle.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void AVehicle::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = UObject::FindObject< UFunction > ( "Function Engine.Vehicle.NotifyTeamChanged" );

	AVehicle_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function Engine.Weapon.StillFiring
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireMode                       ( CPF_Parm )

bool AWeapon::StillFiring ( unsigned char FireMode )
{
	static UFunction* pFnStillFiring = NULL;

	if ( ! pFnStillFiring )
		pFnStillFiring = UObject::FindObject< UFunction > ( "Function Engine.Weapon.StillFiring" );

	AWeapon_execStillFiring_Parms StillFiring_Parms;
	StillFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnStillFiring, &StillFiring_Parms, NULL );

	return StillFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ShouldRefire" );

	AWeapon_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Engine.Weapon.NotifyWeaponFinishedFiring
// [0x00020000] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFinishedFiring ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = UObject::FindObject< UFunction > ( "Function Engine.Weapon.NotifyWeaponFinishedFiring" );

	AWeapon_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.NotifyWeaponFired
// [0x00020000] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFired ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = UObject::FindObject< UFunction > ( "Function Engine.Weapon.NotifyWeaponFired" );

	AWeapon_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function Engine.Weapon.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void AWeapon::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = UObject::FindObject< UFunction > ( "Function Engine.Weapon.HandleFinishedFiring" );

	AWeapon_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.TryPutDown
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::TryPutDown ( )
{
	static UFunction* pFnTryPutDown = NULL;

	if ( ! pFnTryPutDown )
		pFnTryPutDown = UObject::FindObject< UFunction > ( "Function Engine.Weapon.TryPutDown" );

	AWeapon_execTryPutDown_Parms TryPutDown_Parms;

	this->ProcessEvent ( pFnTryPutDown, &TryPutDown_Parms, NULL );

	return TryPutDown_Parms.ReturnValue;
};

// Function Engine.Weapon.GetPhysicalFireStartLoc
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector AWeapon::GetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetPhysicalFireStartLoc" );

	AWeapon_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.GetMuzzleLoc
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AWeapon::eventGetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetMuzzleLoc" );

	AWeapon_eventGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.CustomFire
// [0x00020100] 
// Parameters infos:

void AWeapon::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.CustomFire" );

	AWeapon_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function Engine.Weapon.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ProjectileFire" );

	AWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function Engine.Weapon.ProcessInstantHit
// [0x00020100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void AWeapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ProcessInstantHit" );

	AWeapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function Engine.Weapon.InstantFire
// [0x00020100] 
// Parameters infos:

void AWeapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.InstantFire" );

	AWeapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function Engine.Weapon.PassThroughDamage
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool AWeapon::PassThroughDamage ( class AActor* HitActor )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = UObject::FindObject< UFunction > ( "Function Engine.Weapon.PassThroughDamage" );

	AWeapon_execPassThroughDamage_Parms PassThroughDamage_Parms;
	PassThroughDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );

	return PassThroughDamage_Parms.ReturnValue;
};

// Function Engine.Weapon.CalcWeaponFire
// [0x00C20102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo AWeapon::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.CalcWeaponFire" );

	AWeapon_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AWeapon::GetTraceOwner ( )
{
	static UFunction* pFnGetTraceOwner = NULL;

	if ( ! pFnGetTraceOwner )
		pFnGetTraceOwner = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetTraceOwner" );

	AWeapon_execGetTraceOwner_Parms GetTraceOwner_Parms;

	this->ProcessEvent ( pFnGetTraceOwner, &GetTraceOwner_Parms, NULL );

	return GetTraceOwner_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetTraceRange" );

	AWeapon_execGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAdjustedAim
// [0x00020100] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AWeapon::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetAdjustedAim" );

	AWeapon_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function Engine.Weapon.FireAmmunition
// [0x00020102] 
// Parameters infos:

void AWeapon::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = UObject::FindObject< UFunction > ( "Function Engine.Weapon.FireAmmunition" );

	AWeapon_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Engine.Weapon.FireModeUpdated
// [0x00020100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void AWeapon::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = UObject::FindObject< UFunction > ( "Function Engine.Weapon.FireModeUpdated" );

	AWeapon_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function Engine.Weapon.SetCurrentFireMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void AWeapon::SetCurrentFireMode ( unsigned char FiringModeNum )
{
	static UFunction* pFnSetCurrentFireMode = NULL;

	if ( ! pFnSetCurrentFireMode )
		pFnSetCurrentFireMode = UObject::FindObject< UFunction > ( "Function Engine.Weapon.SetCurrentFireMode" );

	AWeapon_execSetCurrentFireMode_Parms SetCurrentFireMode_Parms;
	SetCurrentFireMode_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnSetCurrentFireMode, &SetCurrentFireMode_Parms, NULL );
};

// Function Engine.Weapon.SendToFiringState
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::SendToFiringState ( unsigned char FireModeNum )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = UObject::FindObject< UFunction > ( "Function Engine.Weapon.SendToFiringState" );

	AWeapon_execSendToFiringState_Parms SendToFiringState_Parms;
	SendToFiringState_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function Engine.Weapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void AWeapon::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ForceEndFire" );

	AWeapon_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function Engine.Weapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.EndFire" );

	AWeapon_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStopFire
// [0x002200C0] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ServerStopFire" );

	AWeapon_execServerStopFire_Parms ServerStopFire_Parms;
	ServerStopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function Engine.Weapon.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.StopFire" );

	AWeapon_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Weapon.BeginFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.BeginFire" );

	AWeapon_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStartFire
// [0x002200C0] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStartFire = NULL;

	if ( ! pFnServerStartFire )
		pFnServerStartFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ServerStartFire" );

	AWeapon_execServerStartFire_Parms ServerStartFire_Parms;
	ServerStartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStartFire, &ServerStartFire_Parms, NULL );
};

// Function Engine.Weapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.StartFire" );

	AWeapon_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Weapon.WeaponCalcCamera
// [0x00420100] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )

void AWeapon::WeaponCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot )
{
	static UFunction* pFnWeaponCalcCamera = NULL;

	if ( ! pFnWeaponCalcCamera )
		pFnWeaponCalcCamera = UObject::FindObject< UFunction > ( "Function Engine.Weapon.WeaponCalcCamera" );

	AWeapon_execWeaponCalcCamera_Parms WeaponCalcCamera_Parms;
	WeaponCalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnWeaponCalcCamera, &WeaponCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &WeaponCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &WeaponCalcCamera_Parms.out_CamRot, 0xC );
};

// Function Engine.Weapon.ClientWeaponSet
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AWeapon::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ClientWeaponSet" );

	AWeapon_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.Weapon.AdjustFOVAngle
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOVAngle                       ( CPF_Parm )

float AWeapon::AdjustFOVAngle ( float FOVAngle )
{
	static UFunction* pFnAdjustFOVAngle = NULL;

	if ( ! pFnAdjustFOVAngle )
		pFnAdjustFOVAngle = UObject::FindObject< UFunction > ( "Function Engine.Weapon.AdjustFOVAngle" );

	AWeapon_execAdjustFOVAngle_Parms AdjustFOVAngle_Parms;
	AdjustFOVAngle_Parms.FOVAngle = FOVAngle;

	this->ProcessEvent ( pFnAdjustFOVAngle, &AdjustFOVAngle_Parms, NULL );

	return AdjustFOVAngle_Parms.ReturnValue;
};

// Function Engine.Weapon.GetViewAxes
// [0x00C20102] 
// Parameters infos:
// struct FVector                 XAxis                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 YAxis                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 ZAxis                          ( CPF_Parm | CPF_OutParm )

void AWeapon::GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis )
{
	static UFunction* pFnGetViewAxes = NULL;

	if ( ! pFnGetViewAxes )
		pFnGetViewAxes = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetViewAxes" );

	AWeapon_execGetViewAxes_Parms GetViewAxes_Parms;

	this->ProcessEvent ( pFnGetViewAxes, &GetViewAxes_Parms, NULL );

	if ( XAxis )
		memcpy ( XAxis, &GetViewAxes_Parms.XAxis, 0xC );

	if ( YAxis )
		memcpy ( YAxis, &GetViewAxes_Parms.YAxis, 0xC );

	if ( ZAxis )
		memcpy ( ZAxis, &GetViewAxes_Parms.ZAxis, 0xC );
};

// Function Engine.Weapon.DetachWeapon
// [0x00020100] 
// Parameters infos:

void AWeapon::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DetachWeapon" );

	AWeapon_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function Engine.Weapon.AttachWeaponTo
// [0x00020100] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void AWeapon::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = UObject::FindObject< UFunction > ( "Function Engine.Weapon.AttachWeaponTo" );

	AWeapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashLocation
// [0x00020002] 
// Parameters infos:

void AWeapon::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ClearFlashLocation" );

	AWeapon_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.SetFlashLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AWeapon::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = UObject::FindObject< UFunction > ( "Function Engine.Weapon.SetFlashLocation" );

	AWeapon_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::ClearFlashCount ( )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ClearFlashCount" );

	AWeapon_execClearFlashCount_Parms ClearFlashCount_Parms;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function Engine.Weapon.IncrementFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::IncrementFlashCount ( )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = UObject::FindObject< UFunction > ( "Function Engine.Weapon.IncrementFlashCount" );

	AWeapon_execIncrementFlashCount_Parms IncrementFlashCount_Parms;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function Engine.Weapon.WeaponEmpty
// [0x00020100] 
// Parameters infos:

void AWeapon::WeaponEmpty ( )
{
	static UFunction* pFnWeaponEmpty = NULL;

	if ( ! pFnWeaponEmpty )
		pFnWeaponEmpty = UObject::FindObject< UFunction > ( "Function Engine.Weapon.WeaponEmpty" );

	AWeapon_execWeaponEmpty_Parms WeaponEmpty_Parms;

	this->ProcessEvent ( pFnWeaponEmpty, &WeaponEmpty_Parms, NULL );
};

// Function Engine.Weapon.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AWeapon::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DenyPickupQuery" );

	AWeapon_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Weapon.PutDownWeapon
// [0x00020102] 
// Parameters infos:

void AWeapon::PutDownWeapon ( )
{
	static UFunction* pFnPutDownWeapon = NULL;

	if ( ! pFnPutDownWeapon )
		pFnPutDownWeapon = UObject::FindObject< UFunction > ( "Function Engine.Weapon.PutDownWeapon" );

	AWeapon_execPutDownWeapon_Parms PutDownWeapon_Parms;

	this->ProcessEvent ( pFnPutDownWeapon, &PutDownWeapon_Parms, NULL );
};

// Function Engine.Weapon.Activate
// [0x00020102] 
// Parameters infos:

void AWeapon::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function Engine.Weapon.Activate" );

	AWeapon_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponEquipping
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponEquipping ( )
{
	static UFunction* pFnTimeWeaponEquipping = NULL;

	if ( ! pFnTimeWeaponEquipping )
		pFnTimeWeaponEquipping = UObject::FindObject< UFunction > ( "Function Engine.Weapon.TimeWeaponEquipping" );

	AWeapon_execTimeWeaponEquipping_Parms TimeWeaponEquipping_Parms;

	this->ProcessEvent ( pFnTimeWeaponEquipping, &TimeWeaponEquipping_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponPutDown
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponPutDown ( )
{
	static UFunction* pFnTimeWeaponPutDown = NULL;

	if ( ! pFnTimeWeaponPutDown )
		pFnTimeWeaponPutDown = UObject::FindObject< UFunction > ( "Function Engine.Weapon.TimeWeaponPutDown" );

	AWeapon_execTimeWeaponPutDown_Parms TimeWeaponPutDown_Parms;

	this->ProcessEvent ( pFnTimeWeaponPutDown, &TimeWeaponPutDown_Parms, NULL );
};

// Function Engine.Weapon.RefireCheckTimer
// [0x00020100] 
// Parameters infos:

void AWeapon::RefireCheckTimer ( )
{
	static UFunction* pFnRefireCheckTimer = NULL;

	if ( ! pFnRefireCheckTimer )
		pFnRefireCheckTimer = UObject::FindObject< UFunction > ( "Function Engine.Weapon.RefireCheckTimer" );

	AWeapon_execRefireCheckTimer_Parms RefireCheckTimer_Parms;

	this->ProcessEvent ( pFnRefireCheckTimer, &RefireCheckTimer_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponFiring
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::TimeWeaponFiring ( unsigned char FireModeNum )
{
	static UFunction* pFnTimeWeaponFiring = NULL;

	if ( ! pFnTimeWeaponFiring )
		pFnTimeWeaponFiring = UObject::FindObject< UFunction > ( "Function Engine.Weapon.TimeWeaponFiring" );

	AWeapon_execTimeWeaponFiring_Parms TimeWeaponFiring_Parms;
	TimeWeaponFiring_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnTimeWeaponFiring, &TimeWeaponFiring_Parms, NULL );
};

// Function Engine.Weapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float AWeapon::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetFireInterval" );

	AWeapon_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function Engine.Weapon.PlayFiringSound
// [0x00020100] 
// Parameters infos:

void AWeapon::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = UObject::FindObject< UFunction > ( "Function Engine.Weapon.PlayFiringSound" );

	AWeapon_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function Engine.Weapon.StopFireEffects
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = UObject::FindObject< UFunction > ( "Function Engine.Weapon.StopFireEffects" );

	AWeapon_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function Engine.Weapon.PlayFireEffects
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AWeapon::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = UObject::FindObject< UFunction > ( "Function Engine.Weapon.PlayFireEffects" );

	AWeapon_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function Engine.Weapon.StopWeaponAnimation
// [0x00020102] 
// Parameters infos:

void AWeapon::StopWeaponAnimation ( )
{
	static UFunction* pFnStopWeaponAnimation = NULL;

	if ( ! pFnStopWeaponAnimation )
		pFnStopWeaponAnimation = UObject::FindObject< UFunction > ( "Function Engine.Weapon.StopWeaponAnimation" );

	AWeapon_execStopWeaponAnimation_Parms StopWeaponAnimation_Parms;

	this->ProcessEvent ( pFnStopWeaponAnimation, &StopWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.PlayWeaponAnimation
// [0x00020102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void AWeapon::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = UObject::FindObject< UFunction > ( "Function Engine.Weapon.PlayWeaponAnimation" );

	AWeapon_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.WeaponPlaySound
// [0x00020102] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )

void AWeapon::WeaponPlaySound ( class USoundCue* Sound, float NoiseLoudness )
{
	static UFunction* pFnWeaponPlaySound = NULL;

	if ( ! pFnWeaponPlaySound )
		pFnWeaponPlaySound = UObject::FindObject< UFunction > ( "Function Engine.Weapon.WeaponPlaySound" );

	AWeapon_execWeaponPlaySound_Parms WeaponPlaySound_Parms;
	WeaponPlaySound_Parms.Sound = Sound;
	WeaponPlaySound_Parms.NoiseLoudness = NoiseLoudness;

	this->ProcessEvent ( pFnWeaponPlaySound, &WeaponPlaySound_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponAnimNodeSeq
// [0x00020102] 
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq ( )
{
	static UFunction* pFnGetWeaponAnimNodeSeq = NULL;

	if ( ! pFnGetWeaponAnimNodeSeq )
		pFnGetWeaponAnimNodeSeq = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetWeaponAnimNodeSeq" );

	AWeapon_execGetWeaponAnimNodeSeq_Parms GetWeaponAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimNodeSeq, &GetWeaponAnimNodeSeq_Parms, NULL );

	return GetWeaponAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.Weapon.FireOnRelease
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::FireOnRelease ( )
{
	static UFunction* pFnFireOnRelease = NULL;

	if ( ! pFnFireOnRelease )
		pFnFireOnRelease = UObject::FindObject< UFunction > ( "Function Engine.Weapon.FireOnRelease" );

	AWeapon_execFireOnRelease_Parms FireOnRelease_Parms;

	this->ProcessEvent ( pFnFireOnRelease, &FireOnRelease_Parms, NULL );

	return FireOnRelease_Parms.ReturnValue;
};

// Function Engine.Weapon.SuggestDefenseStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::SuggestDefenseStyle ( )
{
	static UFunction* pFnSuggestDefenseStyle = NULL;

	if ( ! pFnSuggestDefenseStyle )
		pFnSuggestDefenseStyle = UObject::FindObject< UFunction > ( "Function Engine.Weapon.SuggestDefenseStyle" );

	AWeapon_execSuggestDefenseStyle_Parms SuggestDefenseStyle_Parms;

	this->ProcessEvent ( pFnSuggestDefenseStyle, &SuggestDefenseStyle_Parms, NULL );

	return SuggestDefenseStyle_Parms.ReturnValue;
};

// Function Engine.Weapon.SuggestAttackStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::SuggestAttackStyle ( )
{
	static UFunction* pFnSuggestAttackStyle = NULL;

	if ( ! pFnSuggestAttackStyle )
		pFnSuggestAttackStyle = UObject::FindObject< UFunction > ( "Function Engine.Weapon.SuggestAttackStyle" );

	AWeapon_execSuggestAttackStyle_Parms SuggestAttackStyle_Parms;

	this->ProcessEvent ( pFnSuggestAttackStyle, &SuggestAttackStyle_Parms, NULL );

	return SuggestAttackStyle_Parms.ReturnValue;
};

// Function Engine.Weapon.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AWeapon::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = UObject::FindObject< UFunction > ( "Function Engine.Weapon.CanAttack" );

	AWeapon_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.RangedAttackTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::RangedAttackTime ( )
{
	static UFunction* pFnRangedAttackTime = NULL;

	if ( ! pFnRangedAttackTime )
		pFnRangedAttackTime = UObject::FindObject< UFunction > ( "Function Engine.Weapon.RangedAttackTime" );

	AWeapon_execRangedAttackTime_Parms RangedAttackTime_Parms;

	this->ProcessEvent ( pFnRangedAttackTime, &RangedAttackTime_Parms, NULL );

	return RangedAttackTime_Parms.ReturnValue;
};

// Function Engine.Weapon.RecommendLongRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::RecommendLongRangedAttack ( )
{
	static UFunction* pFnRecommendLongRangedAttack = NULL;

	if ( ! pFnRecommendLongRangedAttack )
		pFnRecommendLongRangedAttack = UObject::FindObject< UFunction > ( "Function Engine.Weapon.RecommendLongRangedAttack" );

	AWeapon_execRecommendLongRangedAttack_Parms RecommendLongRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendLongRangedAttack, &RecommendLongRangedAttack_Parms, NULL );

	return RecommendLongRangedAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.FocusOnLeader
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bLeaderFiring                  ( CPF_Parm )

bool AWeapon::FocusOnLeader ( unsigned long bLeaderFiring )
{
	static UFunction* pFnFocusOnLeader = NULL;

	if ( ! pFnFocusOnLeader )
		pFnFocusOnLeader = UObject::FindObject< UFunction > ( "Function Engine.Weapon.FocusOnLeader" );

	AWeapon_execFocusOnLeader_Parms FocusOnLeader_Parms;
	FocusOnLeader_Parms.bLeaderFiring = bLeaderFiring;

	this->ProcessEvent ( pFnFocusOnLeader, &FocusOnLeader_Parms, NULL );

	return FocusOnLeader_Parms.ReturnValue;
};

// Function Engine.Weapon.RecommendRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::RecommendRangedAttack ( )
{
	static UFunction* pFnRecommendRangedAttack = NULL;

	if ( ! pFnRecommendRangedAttack )
		pFnRecommendRangedAttack = UObject::FindObject< UFunction > ( "Function Engine.Weapon.RecommendRangedAttack" );

	AWeapon_execRecommendRangedAttack_Parms RecommendRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendRangedAttack, &RecommendRangedAttack_Parms, NULL );

	return RecommendRangedAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.GetWeaponRating
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetWeaponRating ( )
{
	static UFunction* pFnGetWeaponRating = NULL;

	if ( ! pFnGetWeaponRating )
		pFnGetWeaponRating = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetWeaponRating" );

	AWeapon_execGetWeaponRating_Parms GetWeaponRating_Parms;

	this->ProcessEvent ( pFnGetWeaponRating, &GetWeaponRating_Parms, NULL );

	return GetWeaponRating_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAIRating
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetAIRating ( )
{
	static UFunction* pFnGetAIRating = NULL;

	if ( ! pFnGetAIRating )
		pFnGetAIRating = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetAIRating" );

	AWeapon_execGetAIRating_Parms GetAIRating_Parms;

	this->ProcessEvent ( pFnGetAIRating, &GetAIRating_Parms, NULL );

	return GetAIRating_Parms.ReturnValue;
};

// Function Engine.Weapon.GivenTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AWeapon::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GivenTo" );

	AWeapon_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function Engine.Weapon.GetDamageRadius
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetDamageRadius" );

	AWeapon_execGetDamageRadius_Parms GetDamageRadius_Parms;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	return GetDamageRadius_Parms.ReturnValue;
};

// Function Engine.Weapon.MaxRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::MaxRange ( )
{
	static UFunction* pFnMaxRange = NULL;

	if ( ! pFnMaxRange )
		pFnMaxRange = UObject::FindObject< UFunction > ( "Function Engine.Weapon.MaxRange" );

	AWeapon_execMaxRange_Parms MaxRange_Parms;

	this->ProcessEvent ( pFnMaxRange, &MaxRange_Parms, NULL );

	return MaxRange_Parms.ReturnValue;
};

// Function Engine.Weapon.AddSpread
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )

struct FRotator AWeapon::AddSpread ( struct FRotator BaseAim )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = UObject::FindObject< UFunction > ( "Function Engine.Weapon.AddSpread" );

	AWeapon_execAddSpread_Parms AddSpread_Parms;
	memcpy ( &AddSpread_Parms.BaseAim, &BaseAim, 0xC );

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );

	return AddSpread_Parms.ReturnValue;
};

// Function Engine.Weapon.GetProjectileClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWeapon::GetProjectileClass ( )
{
	static UFunction* pFnGetProjectileClass = NULL;

	if ( ! pFnGetProjectileClass )
		pFnGetProjectileClass = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetProjectileClass" );

	AWeapon_execGetProjectileClass_Parms GetProjectileClass_Parms;

	this->ProcessEvent ( pFnGetProjectileClass, &GetProjectileClass_Parms, NULL );

	return GetProjectileClass_Parms.ReturnValue;
};

// Function Engine.Weapon.ClearPendingFire
// [0x00020102] 
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::ClearPendingFire ( int FireMode )
{
	static UFunction* pFnClearPendingFire = NULL;

	if ( ! pFnClearPendingFire )
		pFnClearPendingFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ClearPendingFire" );

	AWeapon_execClearPendingFire_Parms ClearPendingFire_Parms;
	ClearPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnClearPendingFire, &ClearPendingFire_Parms, NULL );
};

// Function Engine.Weapon.SetPendingFire
// [0x00020102] 
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::SetPendingFire ( int FireMode )
{
	static UFunction* pFnSetPendingFire = NULL;

	if ( ! pFnSetPendingFire )
		pFnSetPendingFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.SetPendingFire" );

	AWeapon_execSetPendingFire_Parms SetPendingFire_Parms;
	SetPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnSetPendingFire, &SetPendingFire_Parms, NULL );
};

// Function Engine.Weapon.PendingFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireMode                       ( CPF_Parm )

bool AWeapon::PendingFire ( int FireMode )
{
	static UFunction* pFnPendingFire = NULL;

	if ( ! pFnPendingFire )
		pFnPendingFire = UObject::FindObject< UFunction > ( "Function Engine.Weapon.PendingFire" );

	AWeapon_execPendingFire_Parms PendingFire_Parms;
	PendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnPendingFire, &PendingFire_Parms, NULL );

	return PendingFire_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = UObject::FindObject< UFunction > ( "Function Engine.Weapon.HasAnyAmmo" );

	AWeapon_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool AWeapon::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = UObject::FindObject< UFunction > ( "Function Engine.Weapon.HasAmmo" );

	AWeapon_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.AddAmmo
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int AWeapon::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = UObject::FindObject< UFunction > ( "Function Engine.Weapon.AddAmmo" );

	AWeapon_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.ConsumeAmmo
// [0x00020000] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ConsumeAmmo" );

	AWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function Engine.Weapon.WeaponLog
// [0x00020102] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FString                 FuncStr                        ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void AWeapon::WeaponLog ( struct FString msg, struct FString FuncStr )
{
	static UFunction* pFnWeaponLog = NULL;

	if ( ! pFnWeaponLog )
		pFnWeaponLog = UObject::FindObject< UFunction > ( "Function Engine.Weapon.WeaponLog" );

	AWeapon_execWeaponLog_Parms WeaponLog_Parms;
	memcpy ( &WeaponLog_Parms.msg, &msg, 0xC );
	memcpy ( &WeaponLog_Parms.FuncStr, &FuncStr, 0xC );

	this->ProcessEvent ( pFnWeaponLog, &WeaponLog_Parms, NULL );
};

// Function Engine.Weapon.DumpWeaponDebugToLog
// [0x00020102] 
// Parameters infos:

void AWeapon::DumpWeaponDebugToLog ( )
{
	static UFunction* pFnDumpWeaponDebugToLog = NULL;

	if ( ! pFnDumpWeaponDebugToLog )
		pFnDumpWeaponDebugToLog = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DumpWeaponDebugToLog" );

	AWeapon_execDumpWeaponDebugToLog_Parms DumpWeaponDebugToLog_Parms;

	this->ProcessEvent ( pFnDumpWeaponDebugToLog, &DumpWeaponDebugToLog_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponDebug
// [0x00420102] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWeapon::GetWeaponDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = UObject::FindObject< UFunction > ( "Function Engine.Weapon.GetWeaponDebug" );

	AWeapon_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0xC );
};

// Function Engine.Weapon.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AWeapon::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DisplayDebug" );

	AWeapon_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Weapon.DenyClientWeaponSet
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DenyClientWeaponSet ( )
{
	static UFunction* pFnDenyClientWeaponSet = NULL;

	if ( ! pFnDenyClientWeaponSet )
		pFnDenyClientWeaponSet = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DenyClientWeaponSet" );

	AWeapon_execDenyClientWeaponSet_Parms DenyClientWeaponSet_Parms;

	this->ProcessEvent ( pFnDenyClientWeaponSet, &DenyClientWeaponSet_Parms, NULL );

	return DenyClientWeaponSet_Parms.ReturnValue;
};

// Function Engine.Weapon.IsFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::eventIsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = UObject::FindObject< UFunction > ( "Function Engine.Weapon.IsFiring" );

	AWeapon_eventIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ClientWeaponThrown
// [0x010201C2] 
// Parameters infos:

void AWeapon::ClientWeaponThrown ( )
{
	static UFunction* pFnClientWeaponThrown = NULL;

	if ( ! pFnClientWeaponThrown )
		pFnClientWeaponThrown = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ClientWeaponThrown" );

	AWeapon_execClientWeaponThrown_Parms ClientWeaponThrown_Parms;

	this->ProcessEvent ( pFnClientWeaponThrown, &ClientWeaponThrown_Parms, NULL );
};

// Function Engine.Weapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = UObject::FindObject< UFunction > ( "Function Engine.Weapon.CanThrow" );

	AWeapon_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function Engine.Weapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AWeapon::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DropFrom" );

	AWeapon_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Weapon.DoOverridePrevWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverridePrevWeapon ( )
{
	static UFunction* pFnDoOverridePrevWeapon = NULL;

	if ( ! pFnDoOverridePrevWeapon )
		pFnDoOverridePrevWeapon = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DoOverridePrevWeapon" );

	AWeapon_execDoOverridePrevWeapon_Parms DoOverridePrevWeapon_Parms;

	this->ProcessEvent ( pFnDoOverridePrevWeapon, &DoOverridePrevWeapon_Parms, NULL );

	return DoOverridePrevWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.DoOverrideNextWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverrideNextWeapon ( )
{
	static UFunction* pFnDoOverrideNextWeapon = NULL;

	if ( ! pFnDoOverrideNextWeapon )
		pFnDoOverrideNextWeapon = UObject::FindObject< UFunction > ( "Function Engine.Weapon.DoOverrideNextWeapon" );

	AWeapon_execDoOverrideNextWeapon_Parms DoOverrideNextWeapon_Parms;

	this->ProcessEvent ( pFnDoOverrideNextWeapon, &DoOverrideNextWeapon_Parms, NULL );

	return DoOverrideNextWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.HolderDied
// [0x00020002] 
// Parameters infos:

void AWeapon::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = UObject::FindObject< UFunction > ( "Function Engine.Weapon.HolderDied" );

	AWeapon_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function Engine.Weapon.IsActiveWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::IsActiveWeapon ( )
{
	static UFunction* pFnIsActiveWeapon = NULL;

	if ( ! pFnIsActiveWeapon )
		pFnIsActiveWeapon = UObject::FindObject< UFunction > ( "Function Engine.Weapon.IsActiveWeapon" );

	AWeapon_execIsActiveWeapon_Parms IsActiveWeapon_Parms;

	this->ProcessEvent ( pFnIsActiveWeapon, &IsActiveWeapon_Parms, NULL );

	return IsActiveWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void AWeapon::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = UObject::FindObject< UFunction > ( "Function Engine.Weapon.ItemRemovedFromInvManager" );

	AWeapon_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Weapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AWeapon::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.Weapon.Destroyed" );

	AWeapon_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.WorldInfo.DoMemoryTracking
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AWorldInfo::DoMemoryTracking ( )
{
	static UFunction* pFnDoMemoryTracking = NULL;

	if ( ! pFnDoMemoryTracking )
		pFnDoMemoryTracking = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.DoMemoryTracking" );

	AWorldInfo_execDoMemoryTracking_Parms DoMemoryTracking_Parms;

	pFnDoMemoryTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoMemoryTracking, &DoMemoryTracking_Parms, NULL );

	pFnDoMemoryTracking->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsPlayingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayingDemo ( )
{
	static UFunction* pFnIsPlayingDemo = NULL;

	if ( ! pFnIsPlayingDemo )
		pFnIsPlayingDemo = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsPlayingDemo" );

	AWorldInfo_execIsPlayingDemo_Parms IsPlayingDemo_Parms;

	pFnIsPlayingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingDemo, &IsPlayingDemo_Parms, NULL );

	pFnIsPlayingDemo->FunctionFlags |= 0x400;

	return IsPlayingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsRecordingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsRecordingDemo ( )
{
	static UFunction* pFnIsRecordingDemo = NULL;

	if ( ! pFnIsRecordingDemo )
		pFnIsRecordingDemo = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsRecordingDemo" );

	AWorldInfo_execIsRecordingDemo_Parms IsRecordingDemo_Parms;

	pFnIsRecordingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRecordingDemo, &IsRecordingDemo_Parms, NULL );

	pFnIsRecordingDemo->FunctionFlags |= 0x400;

	return IsRecordingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetDetailMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AWorldInfo::GetDetailMode ( )
{
	static UFunction* pFnGetDetailMode = NULL;

	if ( ! pFnGetDetailMode )
		pFnGetDetailMode = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetDetailMode" );

	AWorldInfo_execGetDetailMode_Parms GetDetailMode_Parms;

	pFnGetDetailMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDetailMode, &GetDetailMode_Parms, NULL );

	pFnGetDetailMode->FunctionFlags |= 0x400;

	return GetDetailMode_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetMapName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bIncludePrefix                 ( CPF_OptionalParm | CPF_Parm )

struct FString AWorldInfo::GetMapName ( unsigned long bIncludePrefix )
{
	static UFunction* pFnGetMapName = NULL;

	if ( ! pFnGetMapName )
		pFnGetMapName = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetMapName" );

	AWorldInfo_execGetMapName_Parms GetMapName_Parms;
	GetMapName_Parms.bIncludePrefix = bIncludePrefix;

	pFnGetMapName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapName, &GetMapName_Parms, NULL );

	pFnGetMapName->FunctionFlags |= 0x400;

	return GetMapName_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                NewMapInfo                     ( CPF_Parm )

void AWorldInfo::SetMapInfo ( class UMapInfo* NewMapInfo )
{
	static UFunction* pFnSetMapInfo = NULL;

	if ( ! pFnSetMapInfo )
		pFnSetMapInfo = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.SetMapInfo" );

	AWorldInfo_execSetMapInfo_Parms SetMapInfo_Parms;
	SetMapInfo_Parms.NewMapInfo = NewMapInfo;

	pFnSetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMapInfo, &SetMapInfo_Parms, NULL );

	pFnSetMapInfo->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMapInfo* AWorldInfo::GetMapInfo ( )
{
	static UFunction* pFnGetMapInfo = NULL;

	if ( ! pFnGetMapInfo )
		pFnGetMapInfo = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetMapInfo" );

	AWorldInfo_execGetMapInfo_Parms GetMapInfo_Parms;

	pFnGetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapInfo, &GetMapInfo_Parms, NULL );

	pFnGetMapInfo->FunctionFlags |= 0x400;

	return GetMapInfo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowPaused                     ( CPF_Parm )

void AWorldInfo::SetSeamlessTravelMidpointPause ( unsigned long bNowPaused )
{
	static UFunction* pFnSetSeamlessTravelMidpointPause = NULL;

	if ( ! pFnSetSeamlessTravelMidpointPause )
		pFnSetSeamlessTravelMidpointPause = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.SetSeamlessTravelMidpointPause" );

	AWorldInfo_execSetSeamlessTravelMidpointPause_Parms SetSeamlessTravelMidpointPause_Parms;
	SetSeamlessTravelMidpointPause_Parms.bNowPaused = bNowPaused;

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSeamlessTravelMidpointPause, &SetSeamlessTravelMidpointPause_Parms, NULL );

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsInSeamlessTravel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsInSeamlessTravel ( )
{
	static UFunction* pFnIsInSeamlessTravel = NULL;

	if ( ! pFnIsInSeamlessTravel )
		pFnIsInSeamlessTravel = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsInSeamlessTravel" );

	AWorldInfo_execIsInSeamlessTravel_Parms IsInSeamlessTravel_Parms;

	pFnIsInSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInSeamlessTravel, &IsInSeamlessTravel_Parms, NULL );

	pFnIsInSeamlessTravel->FunctionFlags |= 0x400;

	return IsInSeamlessTravel_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SeamlessTravel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid )
{
	static UFunction* pFnSeamlessTravel = NULL;

	if ( ! pFnSeamlessTravel )
		pFnSeamlessTravel = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.SeamlessTravel" );

	AWorldInfo_execSeamlessTravel_Parms SeamlessTravel_Parms;
	memcpy ( &SeamlessTravel_Parms.URL, &URL, 0xC );
	SeamlessTravel_Parms.bAbsolute = bAbsolute;
	memcpy ( &SeamlessTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeamlessTravel, &SeamlessTravel_Parms, NULL );

	pFnSeamlessTravel->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.SetWorldState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eNewState                      ( CPF_Parm )

void AWorldInfo::SetWorldState ( unsigned char eNewState )
{
	static UFunction* pFnSetWorldState = NULL;

	if ( ! pFnSetWorldState )
		pFnSetWorldState = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.SetWorldState" );

	AWorldInfo_execSetWorldState_Parms SetWorldState_Parms;
	SetWorldState_Parms.eNewState = eNewState;

	pFnSetWorldState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWorldState, &SetWorldState_Parms, NULL );

	pFnSetWorldState->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AWorldInfo::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.OnToggle" );

	AWorldInfo_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.WorldInfo.CommitMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldSkipLevelStartupEvent   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldSkipLevelBeginningEvent ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::CommitMapChange ( unsigned long bShouldSkipLevelStartupEvent, unsigned long bShouldSkipLevelBeginningEvent )
{
	static UFunction* pFnCommitMapChange = NULL;

	if ( ! pFnCommitMapChange )
		pFnCommitMapChange = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.CommitMapChange" );

	AWorldInfo_execCommitMapChange_Parms CommitMapChange_Parms;
	CommitMapChange_Parms.bShouldSkipLevelStartupEvent = bShouldSkipLevelStartupEvent;
	CommitMapChange_Parms.bShouldSkipLevelBeginningEvent = bShouldSkipLevelBeginningEvent;

	pFnCommitMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCommitMapChange, &CommitMapChange_Parms, NULL );

	pFnCommitMapChange->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsMapChangeReady
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsMapChangeReady ( )
{
	static UFunction* pFnIsMapChangeReady = NULL;

	if ( ! pFnIsMapChangeReady )
		pFnIsMapChangeReady = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsMapChangeReady" );

	AWorldInfo_execIsMapChangeReady_Parms IsMapChangeReady_Parms;

	pFnIsMapChangeReady->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMapChangeReady, &IsMapChangeReady_Parms, NULL );

	pFnIsMapChangeReady->FunctionFlags |= 0x400;

	return IsMapChangeReady_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsPreparingMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPreparingMapChange ( )
{
	static UFunction* pFnIsPreparingMapChange = NULL;

	if ( ! pFnIsPreparingMapChange )
		pFnIsPreparingMapChange = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsPreparingMapChange" );

	AWorldInfo_execIsPreparingMapChange_Parms IsPreparingMapChange_Parms;

	pFnIsPreparingMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPreparingMapChange, &IsPreparingMapChange_Parms, NULL );

	pFnIsPreparingMapChange->FunctionFlags |= 0x400;

	return IsPreparingMapChange_Parms.ReturnValue;
};

// Function Engine.WorldInfo.PrepareMapChange
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FName >         LevelNames                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWorldInfo::PrepareMapChange ( TArray< struct FName >* LevelNames )
{
	static UFunction* pFnPrepareMapChange = NULL;

	if ( ! pFnPrepareMapChange )
		pFnPrepareMapChange = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.PrepareMapChange" );

	AWorldInfo_execPrepareMapChange_Parms PrepareMapChange_Parms;

	pFnPrepareMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrepareMapChange, &PrepareMapChange_Parms, NULL );

	pFnPrepareMapChange->FunctionFlags |= 0x400;

	if ( LevelNames )
		memcpy ( LevelNames, &PrepareMapChange_Parms.LevelNames, 0xC );
};

// Function Engine.WorldInfo.NotifyMatchStarted
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldActivateLevelStartupEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelBeginningEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelLoadedEvents ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents )
{
	static UFunction* pFnNotifyMatchStarted = NULL;

	if ( ! pFnNotifyMatchStarted )
		pFnNotifyMatchStarted = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.NotifyMatchStarted" );

	AWorldInfo_execNotifyMatchStarted_Parms NotifyMatchStarted_Parms;
	NotifyMatchStarted_Parms.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	pFnNotifyMatchStarted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyMatchStarted, &NotifyMatchStarted_Parms, NULL );

	pFnNotifyMatchStarted->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.AllPawns
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_OptionalParm | CPF_Parm )
// float                          TestRadius                     ( CPF_OptionalParm | CPF_Parm )
// class APawn*                   P                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P )
{
	static UFunction* pFnAllPawns = NULL;

	if ( ! pFnAllPawns )
		pFnAllPawns = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.AllPawns" );

	AWorldInfo_execAllPawns_Parms AllPawns_Parms;
	AllPawns_Parms.BaseClass = BaseClass;
	memcpy ( &AllPawns_Parms.TestLocation, &TestLocation, 0xC );
	AllPawns_Parms.TestRadius = TestRadius;

	pFnAllPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllPawns, &AllPawns_Parms, NULL );

	pFnAllPawns->FunctionFlags |= 0x400;

	if ( P )
		*P = AllPawns_Parms.P;
};

// Function Engine.WorldInfo.AllControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllControllers ( class UClass* BaseClass, class AController** C )
{
	static UFunction* pFnAllControllers = NULL;

	if ( ! pFnAllControllers )
		pFnAllControllers = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.AllControllers" );

	AWorldInfo_execAllControllers_Parms AllControllers_Parms;
	AllControllers_Parms.BaseClass = BaseClass;

	pFnAllControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllControllers, &AllControllers_Parms, NULL );

	pFnAllControllers->FunctionFlags |= 0x400;

	if ( C )
		*C = AllControllers_Parms.C;
};

// Function Engine.WorldInfo.NavigationPointCheck
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Point                          ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// TArray< class ANavigationPoint* > Navs                           ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class UReachSpec* >    Specs                          ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWorldInfo::NavigationPointCheck ( struct FVector Point, struct FVector Extent, TArray< class ANavigationPoint* >* Navs, TArray< class UReachSpec* >* Specs )
{
	static UFunction* pFnNavigationPointCheck = NULL;

	if ( ! pFnNavigationPointCheck )
		pFnNavigationPointCheck = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.NavigationPointCheck" );

	AWorldInfo_execNavigationPointCheck_Parms NavigationPointCheck_Parms;
	memcpy ( &NavigationPointCheck_Parms.Point, &Point, 0xC );
	memcpy ( &NavigationPointCheck_Parms.Extent, &Extent, 0xC );

	pFnNavigationPointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNavigationPointCheck, &NavigationPointCheck_Parms, NULL );

	pFnNavigationPointCheck->FunctionFlags |= 0x400;

	if ( Navs )
		memcpy ( Navs, &NavigationPointCheck_Parms.Navs, 0xC );

	if ( Specs )
		memcpy ( Specs, &NavigationPointCheck_Parms.Specs, 0xC );
};

// Function Engine.WorldInfo.RadiusNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N )
{
	static UFunction* pFnRadiusNavigationPoints = NULL;

	if ( ! pFnRadiusNavigationPoints )
		pFnRadiusNavigationPoints = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.RadiusNavigationPoints" );

	AWorldInfo_execRadiusNavigationPoints_Parms RadiusNavigationPoints_Parms;
	RadiusNavigationPoints_Parms.BaseClass = BaseClass;
	memcpy ( &RadiusNavigationPoints_Parms.Point, &Point, 0xC );
	RadiusNavigationPoints_Parms.Radius = Radius;

	pFnRadiusNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRadiusNavigationPoints, &RadiusNavigationPoints_Parms, NULL );

	pFnRadiusNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = RadiusNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.AllNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N )
{
	static UFunction* pFnAllNavigationPoints = NULL;

	if ( ! pFnAllNavigationPoints )
		pFnAllNavigationPoints = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.AllNavigationPoints" );

	AWorldInfo_execAllNavigationPoints_Parms AllNavigationPoints_Parms;
	AllNavigationPoints_Parms.BaseClass = BaseClass;

	pFnAllNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllNavigationPoints, &AllNavigationPoints_Parms, NULL );

	pFnAllNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = AllNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.Reset
// [0x00020002] 
// Parameters infos:

void AWorldInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.Reset" );

	AWorldInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.WorldInfo.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.PostBeginPlay" );

	AWorldInfo_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.PreBeginPlay" );

	AWorldInfo_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.ThisIsNeverExecuted
// [0x00020002] 
// Parameters infos:
// class ADefaultPhysicsVolume*   P                              ( CPF_Parm )

void AWorldInfo::ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P )
{
	static UFunction* pFnThisIsNeverExecuted = NULL;

	if ( ! pFnThisIsNeverExecuted )
		pFnThisIsNeverExecuted = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.ThisIsNeverExecuted" );

	AWorldInfo_execThisIsNeverExecuted_Parms ThisIsNeverExecuted_Parms;
	ThisIsNeverExecuted_Parms.P = P;

	this->ProcessEvent ( pFnThisIsNeverExecuted, &ThisIsNeverExecuted_Parms, NULL );
};

// Function Engine.WorldInfo.ServerTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::eventServerTravel ( struct FString URL, unsigned long bAbsolute )
{
	static UFunction* pFnServerTravel = NULL;

	if ( ! pFnServerTravel )
		pFnServerTravel = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.ServerTravel" );

	AWorldInfo_eventServerTravel_Parms ServerTravel_Parms;
	memcpy ( &ServerTravel_Parms.URL, &URL, 0xC );
	ServerTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnServerTravel, &ServerTravel_Parms, NULL );
};

// Function Engine.WorldInfo.GetGameClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWorldInfo::GetGameClass ( )
{
	static UFunction* pFnGetGameClass = NULL;

	if ( ! pFnGetGameClass )
		pFnGetGameClass = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetGameClass" );

	AWorldInfo_execGetGameClass_Parms GetGameClass_Parms;

	this->ProcessEvent ( pFnGetGameClass, &GetGameClass_Parms, NULL );

	return GetGameClass_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetAddressURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AWorldInfo::GetAddressURL ( )
{
	static UFunction* pFnGetAddressURL = NULL;

	if ( ! pFnGetAddressURL )
		pFnGetAddressURL = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetAddressURL" );

	AWorldInfo_execGetAddressURL_Parms GetAddressURL_Parms;

	pFnGetAddressURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAddressURL, &GetAddressURL_Parms, NULL );

	pFnGetAddressURL->FunctionFlags |= 0x400;

	return GetAddressURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.VerifyNavList
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::VerifyNavList ( )
{
	static UFunction* pFnVerifyNavList = NULL;

	if ( ! pFnVerifyNavList )
		pFnVerifyNavList = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.VerifyNavList" );

	AWorldInfo_execVerifyNavList_Parms VerifyNavList_Parms;

	pFnVerifyNavList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNavList, &VerifyNavList_Parms, NULL );

	pFnVerifyNavList->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ForceGarbageCollection
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFullPurge                     ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::ForceGarbageCollection ( unsigned long bFullPurge )
{
	static UFunction* pFnForceGarbageCollection = NULL;

	if ( ! pFnForceGarbageCollection )
		pFnForceGarbageCollection = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.ForceGarbageCollection" );

	AWorldInfo_execForceGarbageCollection_Parms ForceGarbageCollection_Parms;
	ForceGarbageCollection_Parms.bFullPurge = bFullPurge;

	pFnForceGarbageCollection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGarbageCollection, &ForceGarbageCollection_Parms, NULL );

	pFnForceGarbageCollection->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsConsoleBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConsoleType                    ( CPF_OptionalParm | CPF_Parm )

bool AWorldInfo::IsConsoleBuild ( unsigned char ConsoleType )
{
	static UFunction* pFnIsConsoleBuild = NULL;

	if ( ! pFnIsConsoleBuild )
		pFnIsConsoleBuild = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsConsoleBuild" );

	AWorldInfo_execIsConsoleBuild_Parms IsConsoleBuild_Parms;
	IsConsoleBuild_Parms.ConsoleType = ConsoleType;

	pFnIsConsoleBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsConsoleBuild, &IsConsoleBuild_Parms, NULL );

	pFnIsConsoleBuild->FunctionFlags |= 0x400;

	return IsConsoleBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsDemoBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsDemoBuild ( )
{
	static UFunction* pFnIsDemoBuild = NULL;

	if ( ! pFnIsDemoBuild )
		pFnIsDemoBuild = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsDemoBuild" );

	AWorldInfo_execIsDemoBuild_Parms IsDemoBuild_Parms;

	pFnIsDemoBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDemoBuild, &IsDemoBuild_Parms, NULL );

	pFnIsDemoBuild->FunctionFlags |= 0x400;

	return IsDemoBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetLocalURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AWorldInfo::GetLocalURL ( )
{
	static UFunction* pFnGetLocalURL = NULL;

	if ( ! pFnGetLocalURL )
		pFnGetLocalURL = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetLocalURL" );

	AWorldInfo_execGetLocalURL_Parms GetLocalURL_Parms;

	pFnGetLocalURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalURL, &GetLocalURL_Parms, NULL );

	pFnGetLocalURL->FunctionFlags |= 0x400;

	return GetLocalURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetLevelRBGravity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewGrav                        ( CPF_Parm )

void AWorldInfo::SetLevelRBGravity ( struct FVector NewGrav )
{
	static UFunction* pFnSetLevelRBGravity = NULL;

	if ( ! pFnSetLevelRBGravity )
		pFnSetLevelRBGravity = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.SetLevelRBGravity" );

	AWorldInfo_execSetLevelRBGravity_Parms SetLevelRBGravity_Parms;
	memcpy ( &SetLevelRBGravity_Parms.NewGrav, &NewGrav, 0xC );

	pFnSetLevelRBGravity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLevelRBGravity, &SetLevelRBGravity_Parms, NULL );

	pFnSetLevelRBGravity->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetGameSequence
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequence*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USequence* AWorldInfo::GetGameSequence ( )
{
	static UFunction* pFnGetGameSequence = NULL;

	if ( ! pFnGetGameSequence )
		pFnGetGameSequence = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetGameSequence" );

	AWorldInfo_execGetGameSequence_Parms GetGameSequence_Parms;

	pFnGetGameSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameSequence, &GetGameSequence_Parms, NULL );

	pFnGetGameSequence->FunctionFlags |= 0x400;

	return GetGameSequence_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWorldInfo::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.GetGravityZ" );

	AWorldInfo_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsServer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsServer ( )
{
	static UFunction* pFnIsServer = NULL;

	if ( ! pFnIsServer )
		pFnIsServer = UObject::FindObject< UFunction > ( "Function Engine.WorldInfo.IsServer" );

	AWorldInfo_execIsServer_Parms IsServer_Parms;

	this->ProcessEvent ( pFnIsServer, &IsServer_Parms, NULL );

	return IsServer_Parms.ReturnValue;
};

// Function Engine.AIController.CanFireWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 Wpn                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AAIController::CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum )
{
	static UFunction* pFnCanFireWeapon = NULL;

	if ( ! pFnCanFireWeapon )
		pFnCanFireWeapon = UObject::FindObject< UFunction > ( "Function Engine.AIController.CanFireWeapon" );

	AAIController_execCanFireWeapon_Parms CanFireWeapon_Parms;
	CanFireWeapon_Parms.Wpn = Wpn;
	CanFireWeapon_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanFireWeapon, &CanFireWeapon_Parms, NULL );

	return CanFireWeapon_Parms.ReturnValue;
};

// Function Engine.AIController.ShouldAutoReload
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAIController::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function Engine.AIController.ShouldAutoReload" );

	AAIController_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function Engine.AIController.ShouldRefire
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAIController::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = UObject::FindObject< UFunction > ( "Function Engine.AIController.ShouldRefire" );

	AAIController_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Engine.AIController.OnAIMoveToActor
// [0x00020002] 
// Parameters infos:
// class USeqAct_AIMoveToActor*   Action                         ( CPF_Parm )

void AAIController::OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action )
{
	static UFunction* pFnOnAIMoveToActor = NULL;

	if ( ! pFnOnAIMoveToActor )
		pFnOnAIMoveToActor = UObject::FindObject< UFunction > ( "Function Engine.AIController.OnAIMoveToActor" );

	AAIController_execOnAIMoveToActor_Parms OnAIMoveToActor_Parms;
	OnAIMoveToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAIMoveToActor, &OnAIMoveToActor_Parms, NULL );
};

// Function Engine.AIController.GetPlayerViewPoint
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AAIController::GetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = UObject::FindObject< UFunction > ( "Function Engine.AIController.GetPlayerViewPoint" );

	AAIController_execGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	pFnGetPlayerViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	pFnGetPlayerViewPoint->FunctionFlags |= 0x400;

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.AIController.SetTeam
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            inTeamIdx                      ( CPF_Parm )

void AAIController::eventSetTeam ( int inTeamIdx )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = UObject::FindObject< UFunction > ( "Function Engine.AIController.SetTeam" );

	AAIController_eventSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.inTeamIdx = inTeamIdx;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.AIController.PriorityObjective
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAIController::PriorityObjective ( )
{
	static UFunction* pFnPriorityObjective = NULL;

	if ( ! pFnPriorityObjective )
		pFnPriorityObjective = UObject::FindObject< UFunction > ( "Function Engine.AIController.PriorityObjective" );

	AAIController_execPriorityObjective_Parms PriorityObjective_Parms;

	this->ProcessEvent ( pFnPriorityObjective, &PriorityObjective_Parms, NULL );

	return PriorityObjective_Parms.ReturnValue;
};

// Function Engine.AIController.GetOrders
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName AAIController::GetOrders ( )
{
	static UFunction* pFnGetOrders = NULL;

	if ( ! pFnGetOrders )
		pFnGetOrders = UObject::FindObject< UFunction > ( "Function Engine.AIController.GetOrders" );

	AAIController_execGetOrders_Parms GetOrders_Parms;

	this->ProcessEvent ( pFnGetOrders, &GetOrders_Parms, NULL );

	return GetOrders_Parms.ReturnValue;
};

// Function Engine.AIController.GetOrderObject
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AAIController::GetOrderObject ( )
{
	static UFunction* pFnGetOrderObject = NULL;

	if ( ! pFnGetOrderObject )
		pFnGetOrderObject = UObject::FindObject< UFunction > ( "Function Engine.AIController.GetOrderObject" );

	AAIController_execGetOrderObject_Parms GetOrderObject_Parms;

	this->ProcessEvent ( pFnGetOrderObject, &GetOrderObject_Parms, NULL );

	return GetOrderObject_Parms.ReturnValue;
};

// Function Engine.AIController.SetOrders
// [0x00020000] 
// Parameters infos:
// struct FName                   NewOrders                      ( CPF_Parm )
// class AController*             OrderGiver                     ( CPF_Parm )

void AAIController::SetOrders ( struct FName NewOrders, class AController* OrderGiver )
{
	static UFunction* pFnSetOrders = NULL;

	if ( ! pFnSetOrders )
		pFnSetOrders = UObject::FindObject< UFunction > ( "Function Engine.AIController.SetOrders" );

	AAIController_execSetOrders_Parms SetOrders_Parms;
	memcpy ( &SetOrders_Parms.NewOrders, &NewOrders, 0x8 );
	SetOrders_Parms.OrderGiver = OrderGiver;

	this->ProcessEvent ( pFnSetOrders, &SetOrders_Parms, NULL );
};

// Function Engine.AIController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AAIController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.AIController.DisplayDebug" );

	AAIController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.AIController.Reset
// [0x00020002] 
// Parameters infos:

void AAIController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.AIController.Reset" );

	AAIController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.AIController.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAIController::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.AIController.PreBeginPlay" );

	AAIController_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Goal_AtActor.AtActor
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

bool UGoal_AtActor::AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial )
{
	static UFunction* pFnAtActor = NULL;

	if ( ! pFnAtActor )
		pFnAtActor = UObject::FindObject< UFunction > ( "Function Engine.Goal_AtActor.AtActor" );

	UGoal_AtActor_execAtActor_Parms AtActor_Parms;
	AtActor_Parms.P = P;
	AtActor_Parms.Goal = Goal;
	AtActor_Parms.Dist = Dist;
	AtActor_Parms.bReturnPartial = bReturnPartial;

	this->ProcessEvent ( pFnAtActor, &AtActor_Parms, NULL );

	return AtActor_Parms.ReturnValue;
};

// Function Engine.Path_AlongLine.AlongLine
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )

bool UPath_AlongLine::AlongLine ( class APawn* P, struct FVector Dir )
{
	static UFunction* pFnAlongLine = NULL;

	if ( ! pFnAlongLine )
		pFnAlongLine = UObject::FindObject< UFunction > ( "Function Engine.Path_AlongLine.AlongLine" );

	UPath_AlongLine_execAlongLine_Parms AlongLine_Parms;
	AlongLine_Parms.P = P;
	memcpy ( &AlongLine_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnAlongLine, &AlongLine_Parms, NULL );

	return AlongLine_Parms.ReturnValue;
};

// Function Engine.Path_TowardGoal.TowardGoal
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )

bool UPath_TowardGoal::TowardGoal ( class APawn* P, class AActor* Goal )
{
	static UFunction* pFnTowardGoal = NULL;

	if ( ! pFnTowardGoal )
		pFnTowardGoal = UObject::FindObject< UFunction > ( "Function Engine.Path_TowardGoal.TowardGoal" );

	UPath_TowardGoal_execTowardGoal_Parms TowardGoal_Parms;
	TowardGoal_Parms.P = P;
	TowardGoal_Parms.Goal = Goal;

	this->ProcessEvent ( pFnTowardGoal, &TowardGoal_Parms, NULL );

	return TowardGoal_Parms.ReturnValue;
};

// Function Engine.Path_WithinTraversalDist.DontExceedMaxDist
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          InMaxTraversalDist             ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )

bool UPath_WithinTraversalDist::DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft )
{
	static UFunction* pFnDontExceedMaxDist = NULL;

	if ( ! pFnDontExceedMaxDist )
		pFnDontExceedMaxDist = UObject::FindObject< UFunction > ( "Function Engine.Path_WithinTraversalDist.DontExceedMaxDist" );

	UPath_WithinTraversalDist_execDontExceedMaxDist_Parms DontExceedMaxDist_Parms;
	DontExceedMaxDist_Parms.P = P;
	DontExceedMaxDist_Parms.InMaxTraversalDist = InMaxTraversalDist;
	DontExceedMaxDist_Parms.bInSoft = bInSoft;

	this->ProcessEvent ( pFnDontExceedMaxDist, &DontExceedMaxDist_Parms, NULL );

	return DontExceedMaxDist_Parms.ReturnValue;
};

// Function Engine.AnimNode.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNode::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNode.StopAnim" );

	UAnimNode_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.PlayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNode::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNode.PlayAnim" );

	UAnimNode_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* UAnimNode::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = UObject::FindObject< UFunction > ( "Function Engine.AnimNode.FindAnimNode" );

	UAnimNode_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.AnimNode.OnCeaseRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnCeaseRelevant ( )
{
	static UFunction* pFnOnCeaseRelevant = NULL;

	if ( ! pFnOnCeaseRelevant )
		pFnOnCeaseRelevant = UObject::FindObject< UFunction > ( "Function Engine.AnimNode.OnCeaseRelevant" );

	UAnimNode_eventOnCeaseRelevant_Parms OnCeaseRelevant_Parms;

	this->ProcessEvent ( pFnOnCeaseRelevant, &OnCeaseRelevant_Parms, NULL );
};

// Function Engine.AnimNode.OnBecomeRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = UObject::FindObject< UFunction > ( "Function Engine.AnimNode.OnBecomeRelevant" );

	UAnimNode_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function Engine.AnimNodeBlendBase.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeBlendBase::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeBlendBase.StopAnim" );

	UAnimNodeBlendBase_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendBase.PlayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendBase::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeBlendBase.PlayAnim" );

	UAnimNodeBlendBase_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ProfileIndex                   ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByIndex ( int ProfileIndex )
{
	static UFunction* pFnSetActiveProfileByIndex = NULL;

	if ( ! pFnSetActiveProfileByIndex )
		pFnSetActiveProfileByIndex = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex" );

	UAnimNodeAimOffset_execSetActiveProfileByIndex_Parms SetActiveProfileByIndex_Parms;
	SetActiveProfileByIndex_Parms.ProfileIndex = ProfileIndex;

	pFnSetActiveProfileByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByIndex, &SetActiveProfileByIndex_Parms, NULL );

	pFnSetActiveProfileByIndex->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ProfileName                    ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByName ( struct FName ProfileName )
{
	static UFunction* pFnSetActiveProfileByName = NULL;

	if ( ! pFnSetActiveProfileByName )
		pFnSetActiveProfileByName = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeAimOffset.SetActiveProfileByName" );

	UAnimNodeAimOffset_execSetActiveProfileByName_Parms SetActiveProfileByName_Parms;
	memcpy ( &SetActiveProfileByName_Parms.ProfileName, &ProfileName, 0x8 );

	pFnSetActiveProfileByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByName, &SetActiveProfileByName_Parms, NULL );

	pFnSetActiveProfileByName->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlend.SetBlendTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendTarget                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlend::SetBlendTarget ( float BlendTarget, float BlendTime )
{
	static UFunction* pFnSetBlendTarget = NULL;

	if ( ! pFnSetBlendTarget )
		pFnSetBlendTarget = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeBlend.SetBlendTarget" );

	UAnimNodeBlend_execSetBlendTarget_Parms SetBlendTarget_Parms;
	SetBlendTarget_Parms.BlendTarget = BlendTarget;
	SetBlendTarget_Parms.BlendTime = BlendTime;

	pFnSetBlendTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlendTarget, &SetBlendTarget_Parms, NULL );

	pFnSetBlendTarget->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendList.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlendList::SetActiveChild ( int ChildIndex, float BlendTime )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeBlendList.SetActiveChild" );

	UAnimNodeBlendList_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;
	SetActiveChild_Parms.BlendTime = BlendTime;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            TargetIdx                      ( CPF_Parm )
// struct FName                   StartBoneName                  ( CPF_Parm )
// float                          PerBoneIncrease                ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendMultiBone::SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease )
{
	static UFunction* pFnSetTargetStartBone = NULL;

	if ( ! pFnSetTargetStartBone )
		pFnSetTargetStartBone = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone" );

	UAnimNodeBlendMultiBone_execSetTargetStartBone_Parms SetTargetStartBone_Parms;
	SetTargetStartBone_Parms.TargetIdx = TargetIdx;
	memcpy ( &SetTargetStartBone_Parms.StartBoneName, &StartBoneName, 0x8 );
	SetTargetStartBone_Parms.PerBoneIncrease = PerBoneIncrease;

	pFnSetTargetStartBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetStartBone, &SetTargetStartBone_Parms, NULL );

	pFnSetTargetStartBone->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.GetActiveChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild ( )
{
	static UFunction* pFnGetActiveChild = NULL;

	if ( ! pFnGetActiveChild )
		pFnGetActiveChild = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeCrossfader.GetActiveChild" );

	UAnimNodeCrossfader_execGetActiveChild_Parms GetActiveChild_Parms;

	pFnGetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveChild, &GetActiveChild_Parms, NULL );

	pFnGetActiveChild->FunctionFlags |= 0x400;

	return GetActiveChild_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.GetAnimName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeCrossfader::GetAnimName ( )
{
	static UFunction* pFnGetAnimName = NULL;

	if ( ! pFnGetAnimName )
		pFnGetAnimName = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeCrossfader.GetAnimName" );

	UAnimNodeCrossfader_execGetAnimName_Parms GetAnimName_Parms;

	pFnGetAnimName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimName, &GetAnimName_Parms, NULL );

	pFnGetAnimName->FunctionFlags |= 0x400;

	return GetAnimName_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate )
{
	static UFunction* pFnBlendToLoopingAnim = NULL;

	if ( ! pFnBlendToLoopingAnim )
		pFnBlendToLoopingAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeCrossfader.BlendToLoopingAnim" );

	UAnimNodeCrossfader_execBlendToLoopingAnim_Parms BlendToLoopingAnim_Parms;
	memcpy ( &BlendToLoopingAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	BlendToLoopingAnim_Parms.BlendInTime = BlendInTime;
	BlendToLoopingAnim_Parms.Rate = Rate;

	pFnBlendToLoopingAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlendToLoopingAnim, &BlendToLoopingAnim_Parms, NULL );

	pFnBlendToLoopingAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDontBlendOut                  ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate )
{
	static UFunction* pFnPlayOneShotAnim = NULL;

	if ( ! pFnPlayOneShotAnim )
		pFnPlayOneShotAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeCrossfader.PlayOneShotAnim" );

	UAnimNodeCrossfader_execPlayOneShotAnim_Parms PlayOneShotAnim_Parms;
	memcpy ( &PlayOneShotAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	PlayOneShotAnim_Parms.BlendInTime = BlendInTime;
	PlayOneShotAnim_Parms.BlendOutTime = BlendOutTime;
	PlayOneShotAnim_Parms.bDontBlendOut = bDontBlendOut;
	PlayOneShotAnim_Parms.Rate = Rate;

	pFnPlayOneShotAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayOneShotAnim, &PlayOneShotAnim_Parms, NULL );

	pFnPlayOneShotAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = UObject::FindObject< UFunction > ( "Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption" );

	UAnimNodePlayCustomAnim_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = UObject::FindObject< UFunction > ( "Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq" );

	UAnimNodePlayCustomAnim_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	pFnGetCustomAnimNodeSeq->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	pFnGetCustomAnimNodeSeq->FunctionFlags |= 0x400;

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = UObject::FindObject< UFunction > ( "Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification" );

	UAnimNodePlayCustomAnim_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodePlayCustomAnim.SetCustomAnim" );

	UAnimNodePlayCustomAnim_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodePlayCustomAnim::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodePlayCustomAnim.StopCustomAnim" );

	UAnimNodePlayCustomAnim_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = UObject::FindObject< UFunction > ( "Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration" );

	UAnimNodePlayCustomAnim_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

float UAnimNodePlayCustomAnim::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim" );

	UAnimNodePlayCustomAnim_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetTimeLeft
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetTimeLeft ( )
{
	static UFunction* pFnGetTimeLeft = NULL;

	if ( ! pFnGetTimeLeft )
		pFnGetTimeLeft = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.GetTimeLeft" );

	UAnimNodeSequence_execGetTimeLeft_Parms GetTimeLeft_Parms;

	pFnGetTimeLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeLeft, &GetTimeLeft_Parms, NULL );

	pFnGetTimeLeft->FunctionFlags |= 0x400;

	return GetTimeLeft_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetAnimPlaybackLength ( )
{
	static UFunction* pFnGetAnimPlaybackLength = NULL;

	if ( ! pFnGetAnimPlaybackLength )
		pFnGetAnimPlaybackLength = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.GetAnimPlaybackLength" );

	UAnimNodeSequence_execGetAnimPlaybackLength_Parms GetAnimPlaybackLength_Parms;

	pFnGetAnimPlaybackLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimPlaybackLength, &GetAnimPlaybackLength_Parms, NULL );

	pFnGetAnimPlaybackLength->FunctionFlags |= 0x400;

	return GetAnimPlaybackLength_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetGlobalPlayRate ( )
{
	static UFunction* pFnGetGlobalPlayRate = NULL;

	if ( ! pFnGetGlobalPlayRate )
		pFnGetGlobalPlayRate = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.GetGlobalPlayRate" );

	UAnimNodeSequence_execGetGlobalPlayRate_Parms GetGlobalPlayRate_Parms;

	pFnGetGlobalPlayRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalPlayRate, &GetGlobalPlayRate_Parms, NULL );

	pFnGetGlobalPlayRate->FunctionFlags |= 0x400;

	return GetGlobalPlayRate_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindNormalizedPositionFromGroupRelativePosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          GroupRelativePosition          ( CPF_Parm )

float UAnimNodeSequence::FindNormalizedPositionFromGroupRelativePosition ( float GroupRelativePosition )
{
	static UFunction* pFnFindNormalizedPositionFromGroupRelativePosition = NULL;

	if ( ! pFnFindNormalizedPositionFromGroupRelativePosition )
		pFnFindNormalizedPositionFromGroupRelativePosition = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.FindNormalizedPositionFromGroupRelativePosition" );

	UAnimNodeSequence_execFindNormalizedPositionFromGroupRelativePosition_Parms FindNormalizedPositionFromGroupRelativePosition_Parms;
	FindNormalizedPositionFromGroupRelativePosition_Parms.GroupRelativePosition = GroupRelativePosition;

	pFnFindNormalizedPositionFromGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindNormalizedPositionFromGroupRelativePosition, &FindNormalizedPositionFromGroupRelativePosition_Parms, NULL );

	pFnFindNormalizedPositionFromGroupRelativePosition->FunctionFlags |= 0x400;

	return FindNormalizedPositionFromGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetNormalizedPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetNormalizedPosition ( )
{
	static UFunction* pFnGetNormalizedPosition = NULL;

	if ( ! pFnGetNormalizedPosition )
		pFnGetNormalizedPosition = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.GetNormalizedPosition" );

	UAnimNodeSequence_execGetNormalizedPosition_Parms GetNormalizedPosition_Parms;

	pFnGetNormalizedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNormalizedPosition, &GetNormalizedPosition_Parms, NULL );

	pFnGetNormalizedPosition->FunctionFlags |= 0x400;

	return GetNormalizedPosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.SetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewTime                        ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )

void UAnimNodeSequence::SetPosition ( float NewTime, unsigned long bFireNotifies )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.SetPosition" );

	UAnimNodeSequence_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewTime = NewTime;
	SetPosition_Parms.bFireNotifies = bFireNotifies;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeSequence::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.StopAnim" );

	UAnimNodeSequence_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.PlayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          InRate                         ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSequence::PlayAnim ( unsigned long bLoop, float InRate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.PlayAnim" );

	UAnimNodeSequence_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.InRate = InRate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.SetAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )

void UAnimNodeSequence::SetAnim ( struct FName Sequence )
{
	static UFunction* pFnSetAnim = NULL;

	if ( ! pFnSetAnim )
		pFnSetAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSequence.SetAnim" );

	UAnimNodeSequence_execSetAnim_Parms SetAnim_Parms;
	memcpy ( &SetAnim_Parms.Sequence, &Sequence, 0x8 );

	pFnSetAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnim, &SetAnim_Parms, NULL );

	pFnSetAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.AddToSynchGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSlot::AddToSynchGroup ( struct FName GroupName )
{
	static UFunction* pFnAddToSynchGroup = NULL;

	if ( ! pFnAddToSynchGroup )
		pFnAddToSynchGroup = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.AddToSynchGroup" );

	UAnimNodeSlot_execAddToSynchGroup_Parms AddToSynchGroup_Parms;
	memcpy ( &AddToSynchGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnAddToSynchGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToSynchGroup, &AddToSynchGroup_Parms, NULL );

	pFnAddToSynchGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.SetRootBoneAxisOption" );

	UAnimNodeSlot_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneAxisOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );

	pFnSetRootBoneAxisOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq" );

	UAnimNodeSlot_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	pFnGetCustomAnimNodeSeq->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	pFnGetCustomAnimNodeSeq->FunctionFlags |= 0x400;

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodeSlot::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.SetActorAnimEndNotification" );

	UAnimNodeSlot_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	pFnSetActorAnimEndNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );

	pFnSetActorAnimEndNotification->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodeSlot::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.SetCustomAnim" );

	UAnimNodeSlot_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	pFnSetCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );

	pFnSetCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.StopCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodeSlot::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.StopCustomAnim" );

	UAnimNodeSlot_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetPlayedAnimation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeSlot::GetPlayedAnimation ( )
{
	static UFunction* pFnGetPlayedAnimation = NULL;

	if ( ! pFnGetPlayedAnimation )
		pFnGetPlayedAnimation = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.GetPlayedAnimation" );

	UAnimNodeSlot_execGetPlayedAnimation_Parms GetPlayedAnimation_Parms;

	pFnGetPlayedAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayedAnimation, &GetPlayedAnimation_Parms, NULL );

	pFnGetPlayedAnimation->FunctionFlags |= 0x400;

	return GetPlayedAnimation_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.PlayCustomAnimByDuration" );

	UAnimNodeSlot_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.PlayCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

float UAnimNodeSlot::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSlot.PlayCustomAnim" );

	UAnimNodeSlot_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimNodeSynch::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSynch.SetGroupRateScale" );

	UAnimNodeSynch_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimNodeSynch::GetRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetRelativePosition = NULL;

	if ( ! pFnGetRelativePosition )
		pFnGetRelativePosition = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSynch.GetRelativePosition" );

	UAnimNodeSynch_execGetRelativePosition_Parms GetRelativePosition_Parms;
	memcpy ( &GetRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRelativePosition, &GetRelativePosition_Parms, NULL );

	pFnGetRelativePosition->FunctionFlags |= 0x400;

	return GetRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.ForceRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimNodeSynch::ForceRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceRelativePosition = NULL;

	if ( ! pFnForceRelativePosition )
		pFnForceRelativePosition = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSynch.ForceRelativePosition" );

	UAnimNodeSynch_execForceRelativePosition_Parms ForceRelativePosition_Parms;
	memcpy ( &ForceRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceRelativePosition, &ForceRelativePosition_Parms, NULL );

	pFnForceRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup ( struct FName GroupName )
{
	static UFunction* pFnGetMasterNodeOfGroup = NULL;

	if ( ! pFnGetMasterNodeOfGroup )
		pFnGetMasterNodeOfGroup = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSynch.GetMasterNodeOfGroup" );

	UAnimNodeSynch_execGetMasterNodeOfGroup_Parms GetMasterNodeOfGroup_Parms;
	memcpy ( &GetMasterNodeOfGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnGetMasterNodeOfGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMasterNodeOfGroup, &GetMasterNodeOfGroup_Parms, NULL );

	pFnGetMasterNodeOfGroup->FunctionFlags |= 0x400;

	return GetMasterNodeOfGroup_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnRemoveNodeFromGroup = NULL;

	if ( ! pFnRemoveNodeFromGroup )
		pFnRemoveNodeFromGroup = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSynch.RemoveNodeFromGroup" );

	UAnimNodeSynch_execRemoveNodeFromGroup_Parms RemoveNodeFromGroup_Parms;
	RemoveNodeFromGroup_Parms.SeqNode = SeqNode;
	memcpy ( &RemoveNodeFromGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnRemoveNodeFromGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveNodeFromGroup, &RemoveNodeFromGroup_Parms, NULL );

	pFnRemoveNodeFromGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.AddNodeToGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnAddNodeToGroup = NULL;

	if ( ! pFnAddNodeToGroup )
		pFnAddNodeToGroup = UObject::FindObject< UFunction > ( "Function Engine.AnimNodeSynch.AddNodeToGroup" );

	UAnimNodeSynch_execAddNodeToGroup_Parms AddNodeToGroup_Parms;
	AddNodeToGroup_Parms.SeqNode = SeqNode;
	memcpy ( &AddNodeToGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnAddNodeToGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNodeToGroup, &AddNodeToGroup_Parms, NULL );

	pFnAddNodeToGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNotify_Scripted.Notify
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_Scripted::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = UObject::FindObject< UFunction > ( "Function Engine.AnimNotify_Scripted.Notify" );

	UAnimNotify_Scripted_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimTree.GetGroupIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

int UAnimTree::GetGroupIndex ( struct FName GroupName )
{
	static UFunction* pFnGetGroupIndex = NULL;

	if ( ! pFnGetGroupIndex )
		pFnGetGroupIndex = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.GetGroupIndex" );

	UAnimTree_execGetGroupIndex_Parms GetGroupIndex_Parms;
	memcpy ( &GetGroupIndex_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupIndex, &GetGroupIndex_Parms, NULL );

	pFnGetGroupIndex->FunctionFlags |= 0x400;

	return GetGroupIndex_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimTree::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.SetGroupRateScale" );

	UAnimTree_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimTree::GetGroupRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetGroupRelativePosition = NULL;

	if ( ! pFnGetGroupRelativePosition )
		pFnGetGroupRelativePosition = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.GetGroupRelativePosition" );

	UAnimTree_execGetGroupRelativePosition_Parms GetGroupRelativePosition_Parms;
	memcpy ( &GetGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRelativePosition, &GetGroupRelativePosition_Parms, NULL );

	pFnGetGroupRelativePosition->FunctionFlags |= 0x400;

	return GetGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimTree.ForceGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimTree::ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceGroupRelativePosition = NULL;

	if ( ! pFnForceGroupRelativePosition )
		pFnForceGroupRelativePosition = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.ForceGroupRelativePosition" );

	UAnimTree_execForceGroupRelativePosition_Parms ForceGroupRelativePosition_Parms;
	memcpy ( &ForceGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceGroupRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGroupRelativePosition, &ForceGroupRelativePosition_Parms, NULL );

	pFnForceGroupRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupNotifyMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupNotifyMaster = NULL;

	if ( ! pFnGetGroupNotifyMaster )
		pFnGetGroupNotifyMaster = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.GetGroupNotifyMaster" );

	UAnimTree_execGetGroupNotifyMaster_Parms GetGroupNotifyMaster_Parms;
	memcpy ( &GetGroupNotifyMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupNotifyMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupNotifyMaster, &GetGroupNotifyMaster_Parms, NULL );

	pFnGetGroupNotifyMaster->FunctionFlags |= 0x400;

	return GetGroupNotifyMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.GetGroupSynchMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupSynchMaster = NULL;

	if ( ! pFnGetGroupSynchMaster )
		pFnGetGroupSynchMaster = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.GetGroupSynchMaster" );

	UAnimTree_execGetGroupSynchMaster_Parms GetGroupSynchMaster_Parms;
	memcpy ( &GetGroupSynchMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupSynchMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupSynchMaster, &GetGroupSynchMaster_Parms, NULL );

	pFnGetGroupSynchMaster->FunctionFlags |= 0x400;

	return GetGroupSynchMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetAnimGroupForNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )
// unsigned long                  bCreateIfNotFound              ( CPF_OptionalParm | CPF_Parm )

bool UAnimTree::SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound )
{
	static UFunction* pFnSetAnimGroupForNode = NULL;

	if ( ! pFnSetAnimGroupForNode )
		pFnSetAnimGroupForNode = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.SetAnimGroupForNode" );

	UAnimTree_execSetAnimGroupForNode_Parms SetAnimGroupForNode_Parms;
	SetAnimGroupForNode_Parms.SeqNode = SeqNode;
	memcpy ( &SetAnimGroupForNode_Parms.GroupName, &GroupName, 0x8 );
	SetAnimGroupForNode_Parms.bCreateIfNotFound = bCreateIfNotFound;

	pFnSetAnimGroupForNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimGroupForNode, &SetAnimGroupForNode_Parms, NULL );

	pFnSetAnimGroupForNode->FunctionFlags |= 0x400;

	return SetAnimGroupForNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* UAnimTree::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.FindMorphNode" );

	UAnimTree_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* UAnimTree::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.FindSkelControl" );

	UAnimTree_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.AnimTree.FindConfigureNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UcAnimConfigureNode*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sNodeName                      ( CPF_Parm )

class UcAnimConfigureNode* UAnimTree::FindConfigureNode ( struct FName sNodeName )
{
	static UFunction* pFnFindConfigureNode = NULL;

	if ( ! pFnFindConfigureNode )
		pFnFindConfigureNode = UObject::FindObject< UFunction > ( "Function Engine.AnimTree.FindConfigureNode" );

	UAnimTree_execFindConfigureNode_Parms FindConfigureNode_Parms;
	memcpy ( &FindConfigureNode_Parms.sNodeName, &sNodeName, 0x8 );

	pFnFindConfigureNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConfigureNode, &FindConfigureNode_Parms, NULL );

	pFnFindConfigureNode->FunctionFlags |= 0x400;

	return FindConfigureNode_Parms.ReturnValue;
};

// Function Engine.cAnimCameraNode.IsActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimTree*               AnimTree                       ( CPF_Parm )

bool UcAnimCameraNode::IsActive ( class UAnimTree* AnimTree )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = UObject::FindObject< UFunction > ( "Function Engine.cAnimCameraNode.IsActive" );

	UcAnimCameraNode_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.AnimTree = AnimTree;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function Engine.cAnimCameraNode.LinkIsValid
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimTree*               AnimTree                       ( CPF_Parm )

bool UcAnimCameraNode::LinkIsValid ( class UAnimTree* AnimTree )
{
	static UFunction* pFnLinkIsValid = NULL;

	if ( ! pFnLinkIsValid )
		pFnLinkIsValid = UObject::FindObject< UFunction > ( "Function Engine.cAnimCameraNode.LinkIsValid" );

	UcAnimCameraNode_execLinkIsValid_Parms LinkIsValid_Parms;
	LinkIsValid_Parms.AnimTree = AnimTree;

	pFnLinkIsValid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLinkIsValid, &LinkIsValid_Parms, NULL );

	pFnLinkIsValid->FunctionFlags |= 0x400;

	return LinkIsValid_Parms.ReturnValue;
};

// Function Engine.cAnimConfigureNode.SetDecision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimTree*               pAnimTree                      ( CPF_Parm )
// int                            nDecision                      ( CPF_Parm )

void UcAnimConfigureNode::SetDecision ( class UAnimTree* pAnimTree, int nDecision )
{
	static UFunction* pFnSetDecision = NULL;

	if ( ! pFnSetDecision )
		pFnSetDecision = UObject::FindObject< UFunction > ( "Function Engine.cAnimConfigureNode.SetDecision" );

	UcAnimConfigureNode_execSetDecision_Parms SetDecision_Parms;
	SetDecision_Parms.pAnimTree = pAnimTree;
	SetDecision_Parms.nDecision = nDecision;

	pFnSetDecision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDecision, &SetDecision_Parms, NULL );

	pFnSetDecision->FunctionFlags |= 0x400;
};

// Function Engine.cAnimConfigureNode.RetDecision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimTree*               pAnimTree                      ( CPF_Parm )

int UcAnimConfigureNode::RetDecision ( class UAnimTree* pAnimTree )
{
	static UFunction* pFnRetDecision = NULL;

	if ( ! pFnRetDecision )
		pFnRetDecision = UObject::FindObject< UFunction > ( "Function Engine.cAnimConfigureNode.RetDecision" );

	UcAnimConfigureNode_execRetDecision_Parms RetDecision_Parms;
	RetDecision_Parms.pAnimTree = pAnimTree;

	pFnRetDecision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetDecision, &RetDecision_Parms, NULL );

	pFnRetDecision->FunctionFlags |= 0x400;

	return RetDecision_Parms.ReturnValue;
};

// Function Engine.cAnimConfigureNode.IsActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimTree*               pAnimTree                      ( CPF_Parm )

bool UcAnimConfigureNode::IsActive ( class UAnimTree* pAnimTree )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = UObject::FindObject< UFunction > ( "Function Engine.cAnimConfigureNode.IsActive" );

	UcAnimConfigureNode_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.pAnimTree = pAnimTree;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function Engine.cAnimConfigureNode.LinkIsValid
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimTree*               pAnimTree                      ( CPF_Parm )

bool UcAnimConfigureNode::LinkIsValid ( class UAnimTree* pAnimTree )
{
	static UFunction* pFnLinkIsValid = NULL;

	if ( ! pFnLinkIsValid )
		pFnLinkIsValid = UObject::FindObject< UFunction > ( "Function Engine.cAnimConfigureNode.LinkIsValid" );

	UcAnimConfigureNode_execLinkIsValid_Parms LinkIsValid_Parms;
	LinkIsValid_Parms.pAnimTree = pAnimTree;

	pFnLinkIsValid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLinkIsValid, &LinkIsValid_Parms, NULL );

	pFnLinkIsValid->FunctionFlags |= 0x400;

	return LinkIsValid_Parms.ReturnValue;
};

// Function Engine.MorphNodePose.SetMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   MorphTargetName                ( CPF_Parm )

void UMorphNodePose::SetMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnSetMorphTarget = NULL;

	if ( ! pFnSetMorphTarget )
		pFnSetMorphTarget = UObject::FindObject< UFunction > ( "Function Engine.MorphNodePose.SetMorphTarget" );

	UMorphNodePose_execSetMorphTarget_Parms SetMorphTarget_Parms;
	memcpy ( &SetMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnSetMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMorphTarget, &SetMorphTarget_Parms, NULL );

	pFnSetMorphTarget->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeWeight.SetNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewWeight                      ( CPF_Parm )

void UMorphNodeWeight::SetNodeWeight ( float NewWeight )
{
	static UFunction* pFnSetNodeWeight = NULL;

	if ( ! pFnSetNodeWeight )
		pFnSetNodeWeight = UObject::FindObject< UFunction > ( "Function Engine.MorphNodeWeight.SetNodeWeight" );

	UMorphNodeWeight_execSetNodeWeight_Parms SetNodeWeight_Parms;
	SetNodeWeight_Parms.NewWeight = NewWeight;

	pFnSetNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNodeWeight, &SetNodeWeight_Parms, NULL );

	pFnSetNodeWeight->FunctionFlags |= 0x400;
};

// Function Engine.MorphTargetSet.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* UMorphTargetSet::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = UObject::FindObject< UFunction > ( "Function Engine.MorphTargetSet.FindMorphTarget" );

	UMorphTargetSet_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.SkelControlBase.SetSkelControlStrength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewStrength                    ( CPF_Parm )
// float                          InBlendTime                    ( CPF_Parm )

void USkelControlBase::SetSkelControlStrength ( float NewStrength, float InBlendTime )
{
	static UFunction* pFnSetSkelControlStrength = NULL;

	if ( ! pFnSetSkelControlStrength )
		pFnSetSkelControlStrength = UObject::FindObject< UFunction > ( "Function Engine.SkelControlBase.SetSkelControlStrength" );

	USkelControlBase_execSetSkelControlStrength_Parms SetSkelControlStrength_Parms;
	SetSkelControlStrength_Parms.NewStrength = NewStrength;
	SetSkelControlStrength_Parms.InBlendTime = InBlendTime;

	pFnSetSkelControlStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlStrength, &SetSkelControlStrength_Parms, NULL );

	pFnSetSkelControlStrength->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlBase.SetSkelControlActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInActive                      ( CPF_Parm )

void USkelControlBase::SetSkelControlActive ( unsigned long bInActive )
{
	static UFunction* pFnSetSkelControlActive = NULL;

	if ( ! pFnSetSkelControlActive )
		pFnSetSkelControlActive = UObject::FindObject< UFunction > ( "Function Engine.SkelControlBase.SetSkelControlActive" );

	USkelControlBase_execSetSkelControlActive_Parms SetSkelControlActive_Parms;
	SetSkelControlActive_Parms.bInActive = bInActive;

	pFnSetSkelControlActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlActive, &SetSkelControlActive_Parms, NULL );

	pFnSetSkelControlActive->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.CanLookAtPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PointLoc                       ( CPF_Parm )
// unsigned long                  bDrawDebugInfo                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugUsePersistentLines       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugFlushLinesFirst          ( CPF_OptionalParm | CPF_Parm )

bool USkelControlLookAt::CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst )
{
	static UFunction* pFnCanLookAtPoint = NULL;

	if ( ! pFnCanLookAtPoint )
		pFnCanLookAtPoint = UObject::FindObject< UFunction > ( "Function Engine.SkelControlLookAt.CanLookAtPoint" );

	USkelControlLookAt_execCanLookAtPoint_Parms CanLookAtPoint_Parms;
	memcpy ( &CanLookAtPoint_Parms.PointLoc, &PointLoc, 0xC );
	CanLookAtPoint_Parms.bDrawDebugInfo = bDrawDebugInfo;
	CanLookAtPoint_Parms.bDebugUsePersistentLines = bDebugUsePersistentLines;
	CanLookAtPoint_Parms.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	pFnCanLookAtPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanLookAtPoint, &CanLookAtPoint_Parms, NULL );

	pFnCanLookAtPoint->FunctionFlags |= 0x400;

	return CanLookAtPoint_Parms.ReturnValue;
};

// Function Engine.SkelControlLookAt.SetLookAtAlpha
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DesiredAlpha                   ( CPF_Parm )
// float                          DesiredBlendTime               ( CPF_Parm )

void USkelControlLookAt::SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime )
{
	static UFunction* pFnSetLookAtAlpha = NULL;

	if ( ! pFnSetLookAtAlpha )
		pFnSetLookAtAlpha = UObject::FindObject< UFunction > ( "Function Engine.SkelControlLookAt.SetLookAtAlpha" );

	USkelControlLookAt_execSetLookAtAlpha_Parms SetLookAtAlpha_Parms;
	SetLookAtAlpha_Parms.DesiredAlpha = DesiredAlpha;
	SetLookAtAlpha_Parms.DesiredBlendTime = DesiredBlendTime;

	pFnSetLookAtAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLookAtAlpha, &SetLookAtAlpha_Parms, NULL );

	pFnSetLookAtAlpha->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USkelControlLookAt::InterpolateTargetLocation ( float DeltaTime )
{
	static UFunction* pFnInterpolateTargetLocation = NULL;

	if ( ! pFnInterpolateTargetLocation )
		pFnInterpolateTargetLocation = UObject::FindObject< UFunction > ( "Function Engine.SkelControlLookAt.InterpolateTargetLocation" );

	USkelControlLookAt_execInterpolateTargetLocation_Parms InterpolateTargetLocation_Parms;
	InterpolateTargetLocation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnInterpolateTargetLocation, &InterpolateTargetLocation_Parms, NULL );
};

// Function Engine.SkelControlLookAt.SetTargetLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewTargetLocation              ( CPF_Parm )

void USkelControlLookAt::SetTargetLocation ( struct FVector NewTargetLocation )
{
	static UFunction* pFnSetTargetLocation = NULL;

	if ( ! pFnSetTargetLocation )
		pFnSetTargetLocation = UObject::FindObject< UFunction > ( "Function Engine.SkelControlLookAt.SetTargetLocation" );

	USkelControlLookAt_execSetTargetLocation_Parms SetTargetLocation_Parms;
	memcpy ( &SetTargetLocation_Parms.NewTargetLocation, &NewTargetLocation, 0xC );

	this->ProcessEvent ( pFnSetTargetLocation, &SetTargetLocation_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.DoKismetAttachment
// [0x00020102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void ASkeletalMeshActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.DoKismetAttachment" );

	ASkeletalMeshActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetMaterial
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.OnSetMaterial" );

	ASkeletalMeshActor_eventOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetSkeletalMesh
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetSkeletalMesh* Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetSkeletalMesh ( class USeqAct_SetSkeletalMesh* Action )
{
	static UFunction* pFnOnSetSkeletalMesh = NULL;

	if ( ! pFnOnSetSkeletalMesh )
		pFnOnSetSkeletalMesh = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.OnSetSkeletalMesh" );

	ASkeletalMeshActor_eventOnSetSkeletalMesh_Parms OnSetSkeletalMesh_Parms;
	OnSetSkeletalMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetSkeletalMesh, &OnSetSkeletalMesh_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim" );

	ASkeletalMeshActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* ASkeletalMeshActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.GetActorFaceFXAsset" );

	ASkeletalMeshActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// class USeqAct_PlayFaceFXAnim*  inAction                       ( CPF_Parm )

void ASkeletalMeshActor::OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction )
{
	static UFunction* pFnOnPlayFaceFXAnim = NULL;

	if ( ! pFnOnPlayFaceFXAnim )
		pFnOnPlayFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim" );

	ASkeletalMeshActor_execOnPlayFaceFXAnim_Parms OnPlayFaceFXAnim_Parms;
	OnPlayFaceFXAnim_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* ASkeletalMeshActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent" );

	ASkeletalMeshActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.StopActorFaceFXAnim" );

	ASkeletalMeshActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )

bool ASkeletalMeshActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim" );

	ASkeletalMeshActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.FinishAnimControl" );

	ASkeletalMeshActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.SetAnimWeights
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActor::eventSetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnSetAnimWeights = NULL;

	if ( ! pFnSetAnimWeights )
		pFnSetAnimWeights = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.SetAnimWeights" );

	ASkeletalMeshActor_eventSetAnimWeights_Parms SetAnimWeights_Parms;
	memcpy ( &SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	this->ProcessEvent ( pFnSetAnimWeights, &SetAnimWeights_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.SetAnimPosition" );

	ASkeletalMeshActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActor::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.BeginAnimControl" );

	ASkeletalMeshActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ASkeletalMeshActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.OnToggle" );

	ASkeletalMeshActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASkeletalMeshActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.ReplicatedEvent" );

	ASkeletalMeshActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActor.PostBeginPlay" );

	ASkeletalMeshActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.SetSkelControlScale" );

	ASkeletalMeshActorMAT_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetMorphWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.SetMorphWeight" );

	ASkeletalMeshActorMAT_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActorMAT::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.FinishAnimControl" );

	ASkeletalMeshActorMAT_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetAnimWeights
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActorMAT::eventSetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnSetAnimWeights = NULL;

	if ( ! pFnSetAnimWeights )
		pFnSetAnimWeights = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.SetAnimWeights" );

	ASkeletalMeshActorMAT_eventSetAnimWeights_Parms SetAnimWeights_Parms;
	memcpy ( &SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	this->ProcessEvent ( pFnSetAnimWeights, &SetAnimWeights_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.SetAnimPosition" );

	ASkeletalMeshActorMAT_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActorMAT::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.BeginAnimControl" );

	ASkeletalMeshActorMAT_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnMAT_SetSkelControlScale = NULL;

	if ( ! pFnMAT_SetSkelControlScale )
		pFnMAT_SetSkelControlScale = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale" );

	ASkeletalMeshActorMAT_execMAT_SetSkelControlScale_Parms MAT_SetSkelControlScale_Parms;
	memcpy ( &MAT_SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlScale_Parms.Scale = Scale;

	pFnMAT_SetSkelControlScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlScale, &MAT_SetSkelControlScale_Parms, NULL );

	pFnMAT_SetSkelControlScale->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnMAT_SetMorphWeight = NULL;

	if ( ! pFnMAT_SetMorphWeight )
		pFnMAT_SetMorphWeight = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight" );

	ASkeletalMeshActorMAT_execMAT_SetMorphWeight_Parms MAT_SetMorphWeight_Parms;
	memcpy ( &MAT_SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	MAT_SetMorphWeight_Parms.MorphWeight = MorphWeight;

	pFnMAT_SetMorphWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetMorphWeight, &MAT_SetMorphWeight_Parms, NULL );

	pFnMAT_SetMorphWeight->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_FinishAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASkeletalMeshActorMAT::MAT_FinishAnimControl ( )
{
	static UFunction* pFnMAT_FinishAnimControl = NULL;

	if ( ! pFnMAT_FinishAnimControl )
		pFnMAT_FinishAnimControl = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.MAT_FinishAnimControl" );

	ASkeletalMeshActorMAT_execMAT_FinishAnimControl_Parms MAT_FinishAnimControl_Parms;

	pFnMAT_FinishAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_FinishAnimControl, &MAT_FinishAnimControl_Parms, NULL );

	pFnMAT_FinishAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActorMAT::MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnMAT_SetAnimWeights = NULL;

	if ( ! pFnMAT_SetAnimWeights )
		pFnMAT_SetAnimWeights = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights" );

	ASkeletalMeshActorMAT_execMAT_SetAnimWeights_Parms MAT_SetAnimWeights_Parms;
	memcpy ( &MAT_SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	pFnMAT_SetAnimWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimWeights, &MAT_SetAnimWeights_Parms, NULL );

	pFnMAT_SetAnimWeights->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnMAT_SetAnimPosition = NULL;

	if ( ! pFnMAT_SetAnimPosition )
		pFnMAT_SetAnimPosition = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition" );

	ASkeletalMeshActorMAT_execMAT_SetAnimPosition_Parms MAT_SetAnimPosition_Parms;
	memcpy ( &MAT_SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	MAT_SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &MAT_SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	MAT_SetAnimPosition_Parms.InPosition = InPosition;
	MAT_SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	MAT_SetAnimPosition_Parms.bLooping = bLooping;

	pFnMAT_SetAnimPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimPosition, &MAT_SetAnimPosition_Parms, NULL );

	pFnMAT_SetAnimPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_BeginAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActorMAT::MAT_BeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnMAT_BeginAnimControl = NULL;

	if ( ! pFnMAT_BeginAnimControl )
		pFnMAT_BeginAnimControl = UObject::FindObject< UFunction > ( "Function Engine.SkeletalMeshActorMAT.MAT_BeginAnimControl" );

	ASkeletalMeshActorMAT_execMAT_BeginAnimControl_Parms MAT_BeginAnimControl_Parms;
	memcpy ( &MAT_BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	pFnMAT_BeginAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_BeginAnimControl, &MAT_BeginAnimControl_Parms, NULL );

	pFnMAT_BeginAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UDecalComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = UObject::FindObject< UFunction > ( "Function Engine.DecalComponent.ResetToDefaults" );

	UDecalComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.FogVolumeDensityComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UFogVolumeDensityComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function Engine.FogVolumeDensityComponent.SetEnabled" );

	UFogVolumeDensityComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.FogVolumeDensityInfo.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AFogVolumeDensityInfo::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.FogVolumeDensityInfo.OnToggle" );

	AFogVolumeDensityInfo_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AFogVolumeDensityInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.FogVolumeDensityInfo.ReplicatedEvent" );

	AFogVolumeDensityInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFogVolumeDensityInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.FogVolumeDensityInfo.PostBeginPlay" );

	AFogVolumeDensityInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.MaterialInstance.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstance::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstance.ClearParameterValues" );

	UMaterialInstance_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstance::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstance.SetFontParameterValue" );

	UMaterialInstance_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstance::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstance.SetTextureParameterValue" );

	UMaterialInstance_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UMaterialInstance::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstance.SetScalarCurveParameterValue" );

	UMaterialInstance_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetScalarCurveParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstance::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstance.SetScalarParameterValue" );

	UMaterialInstance_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstance::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstance.SetVectorParameterValue" );

	UMaterialInstance_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstance::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstance.SetParent" );

	UMaterialInstance_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceConstant::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceConstant.ClearParameterValues" );

	UMaterialInstanceConstant_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceConstant::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceConstant.SetFontParameterValue" );

	UMaterialInstanceConstant_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceConstant.SetVectorParameterValue" );

	UMaterialInstanceConstant_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceConstant.SetTextureParameterValue" );

	UMaterialInstanceConstant_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceConstant.SetScalarParameterValue" );

	UMaterialInstanceConstant_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceConstant::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceConstant.SetParent" );

	UMaterialInstanceConstant_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceTimeVarying::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.ClearParameterValues" );

	UMaterialInstanceTimeVarying_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue" );

	UMaterialInstanceTimeVarying_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetVectorStartTime = NULL;

	if ( ! pFnSetVectorStartTime )
		pFnSetVectorStartTime = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime" );

	UMaterialInstanceTimeVarying_execSetVectorStartTime_Parms SetVectorStartTime_Parms;
	memcpy ( &SetVectorStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetVectorStartTime_Parms.Value = Value;

	pFnSetVectorStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorStartTime, &SetVectorStartTime_Parms, NULL );

	pFnSetVectorStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector Value )
{
	static UFunction* pFnSetVectorCurveParameterValue = NULL;

	if ( ! pFnSetVectorCurveParameterValue )
		pFnSetVectorCurveParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue" );

	UMaterialInstanceTimeVarying_execSetVectorCurveParameterValue_Parms SetVectorCurveParameterValue_Parms;
	memcpy ( &SetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorCurveParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorCurveParameterValue, &SetVectorCurveParameterValue_Parms, NULL );

	pFnSetVectorCurveParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue" );

	UMaterialInstanceTimeVarying_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue" );

	UMaterialInstanceTimeVarying_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetDuration ( float Value )
{
	static UFunction* pFnSetDuration = NULL;

	if ( ! pFnSetDuration )
		pFnSetDuration = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetDuration" );

	UMaterialInstanceTimeVarying_execSetDuration_Parms SetDuration_Parms;
	SetDuration_Parms.Value = Value;

	pFnSetDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDuration, &SetDuration_Parms, NULL );

	pFnSetDuration->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarStartTime = NULL;

	if ( ! pFnSetScalarStartTime )
		pFnSetScalarStartTime = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime" );

	UMaterialInstanceTimeVarying_execSetScalarStartTime_Parms SetScalarStartTime_Parms;
	memcpy ( &SetScalarStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarStartTime_Parms.Value = Value;

	pFnSetScalarStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarStartTime, &SetScalarStartTime_Parms, NULL );

	pFnSetScalarStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue" );

	UMaterialInstanceTimeVarying_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetScalarCurveParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue" );

	UMaterialInstanceTimeVarying_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = UObject::FindObject< UFunction > ( "Function Engine.MaterialInstanceTimeVarying.SetParent" );

	UMaterialInstanceTimeVarying_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.Emitter.OnSetParticleSysParam
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetParticleSysParam* Action                         ( CPF_Parm )

void AEmitter::OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action )
{
	static UFunction* pFnOnSetParticleSysParam = NULL;

	if ( ! pFnOnSetParticleSysParam )
		pFnOnSetParticleSysParam = UObject::FindObject< UFunction > ( "Function Engine.Emitter.OnSetParticleSysParam" );

	AEmitter_execOnSetParticleSysParam_Parms OnSetParticleSysParam_Parms;
	OnSetParticleSysParam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetParticleSysParam, &OnSetParticleSysParam_Parms, NULL );
};

// Function Engine.Emitter.SetActorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void AEmitter::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = UObject::FindObject< UFunction > ( "Function Engine.Emitter.SetActorParameter" );

	AEmitter_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetExtColorParameter
// [0x00820102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  Red                            ( CPF_Parm )
// unsigned char                  Green                          ( CPF_Parm )
// unsigned char                  Blue                           ( CPF_Parm )
// unsigned char                  Alpha                          ( CPF_Parm )

void AEmitter::SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha )
{
	static UFunction* pFnSetExtColorParameter = NULL;

	if ( ! pFnSetExtColorParameter )
		pFnSetExtColorParameter = UObject::FindObject< UFunction > ( "Function Engine.Emitter.SetExtColorParameter" );

	AEmitter_execSetExtColorParameter_Parms SetExtColorParameter_Parms;
	memcpy ( &SetExtColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetExtColorParameter_Parms.Red = Red;
	SetExtColorParameter_Parms.Green = Green;
	SetExtColorParameter_Parms.Blue = Blue;
	SetExtColorParameter_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSetExtColorParameter, &SetExtColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetColorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void AEmitter::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = UObject::FindObject< UFunction > ( "Function Engine.Emitter.SetColorParameter" );

	AEmitter_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetVectorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void AEmitter::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = UObject::FindObject< UFunction > ( "Function Engine.Emitter.SetVectorParameter" );

	AEmitter_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetFloatParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void AEmitter::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = UObject::FindObject< UFunction > ( "Function Engine.Emitter.SetFloatParameter" );

	AEmitter_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );
};

// Function Engine.Emitter.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AEmitter::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.Emitter.OnToggle" );

	AEmitter_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Emitter.OnParticleSystemFinished
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* FinishedComponent              ( CPF_Parm | CPF_EditInline )

void AEmitter::OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = UObject::FindObject< UFunction > ( "Function Engine.Emitter.OnParticleSystemFinished" );

	AEmitter_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.FinishedComponent = FinishedComponent;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.Emitter.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitter::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.Emitter.ReplicatedEvent" );

	AEmitter_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Emitter.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AEmitter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Emitter.PostBeginPlay" );

	AEmitter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Emitter.PostFactorySpawn
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USequence*               ParentSequence                 ( CPF_Parm )

void AEmitter::eventPostFactorySpawn ( class USequence* ParentSequence )
{
	static UFunction* pFnPostFactorySpawn = NULL;

	if ( ! pFnPostFactorySpawn )
		pFnPostFactorySpawn = UObject::FindObject< UFunction > ( "Function Engine.Emitter.PostFactorySpawn" );

	AEmitter_eventPostFactorySpawn_Parms PostFactorySpawn_Parms;
	PostFactorySpawn_Parms.ParentSequence = ParentSequence;

	this->ProcessEvent ( pFnPostFactorySpawn, &PostFactorySpawn_Parms, NULL );
};

// Function Engine.Emitter.SetTemplate
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitter::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function Engine.Emitter.SetTemplate" );

	AEmitter_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystem.SetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )
// float                          InDistance                     ( CPF_Parm )

bool UParticleSystem::SetLODDistance ( int LODLevelIndex, float InDistance )
{
	static UFunction* pFnSetLODDistance = NULL;

	if ( ! pFnSetLODDistance )
		pFnSetLODDistance = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystem.SetLODDistance" );

	UParticleSystem_execSetLODDistance_Parms SetLODDistance_Parms;
	SetLODDistance_Parms.LODLevelIndex = LODLevelIndex;
	SetLODDistance_Parms.InDistance = InDistance;

	pFnSetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODDistance, &SetLODDistance_Parms, NULL );

	pFnSetLODDistance->FunctionFlags |= 0x400;

	return SetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.SetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  InMethod                       ( CPF_Parm )

void UParticleSystem::SetCurrentLODMethod ( unsigned char InMethod )
{
	static UFunction* pFnSetCurrentLODMethod = NULL;

	if ( ! pFnSetCurrentLODMethod )
		pFnSetCurrentLODMethod = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystem.SetCurrentLODMethod" );

	UParticleSystem_execSetCurrentLODMethod_Parms SetCurrentLODMethod_Parms;
	SetCurrentLODMethod_Parms.InMethod = InMethod;

	pFnSetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentLODMethod, &SetCurrentLODMethod_Parms, NULL );

	pFnSetCurrentLODMethod->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystem.GetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )

float UParticleSystem::GetLODDistance ( int LODLevelIndex )
{
	static UFunction* pFnGetLODDistance = NULL;

	if ( ! pFnGetLODDistance )
		pFnGetLODDistance = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystem.GetLODDistance" );

	UParticleSystem_execGetLODDistance_Parms GetLODDistance_Parms;
	GetLODDistance_Parms.LODLevelIndex = LODLevelIndex;

	pFnGetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODDistance, &GetLODDistance_Parms, NULL );

	pFnGetLODDistance->FunctionFlags |= 0x400;

	return GetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetLODLevelCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystem::GetLODLevelCount ( )
{
	static UFunction* pFnGetLODLevelCount = NULL;

	if ( ! pFnGetLODLevelCount )
		pFnGetLODLevelCount = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystem.GetLODLevelCount" );

	UParticleSystem_execGetLODLevelCount_Parms GetLODLevelCount_Parms;

	pFnGetLODLevelCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevelCount, &GetLODLevelCount_Parms, NULL );

	pFnGetLODLevelCount->FunctionFlags |= 0x400;

	return GetLODLevelCount_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UParticleSystem::GetCurrentLODMethod ( )
{
	static UFunction* pFnGetCurrentLODMethod = NULL;

	if ( ! pFnGetCurrentLODMethod )
		pFnGetCurrentLODMethod = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystem.GetCurrentLODMethod" );

	UParticleSystem_execGetCurrentLODMethod_Parms GetCurrentLODMethod_Parms;

	pFnGetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentLODMethod, &GetCurrentLODMethod_Parms, NULL );

	pFnGetCurrentLODMethod->FunctionFlags |= 0x400;

	return GetCurrentLODMethod_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.ResetToDefaults" );

	UParticleSystemComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowActive                     ( CPF_Parm )

void UParticleSystemComponent::SetActive ( unsigned long bNowActive )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetActive" );

	UParticleSystemComponent_execSetActive_Parms SetActive_Parms;
	SetActive_Parms.bNowActive = bNowActive;

	pFnSetActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );

	pFnSetActive->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ClearParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  ParameterType                  ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ClearParameter ( struct FName ParameterName, unsigned char ParameterType )
{
	static UFunction* pFnClearParameter = NULL;

	if ( ! pFnClearParameter )
		pFnClearParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.ClearParameter" );

	UParticleSystemComponent_execClearParameter_Parms ClearParameter_Parms;
	memcpy ( &ClearParameter_Parms.ParameterName, &ParameterName, 0x8 );
	ClearParameter_Parms.ParameterType = ParameterType;

	pFnClearParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameter, &ClearParameter_Parms, NULL );

	pFnClearParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetMaterialParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class UMaterialInterface*      OutMaterial                    ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial )
{
	static UFunction* pFnGetMaterialParameter = NULL;

	if ( ! pFnGetMaterialParameter )
		pFnGetMaterialParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetMaterialParameter" );

	UParticleSystemComponent_execGetMaterialParameter_Parms GetMaterialParameter_Parms;
	memcpy ( &GetMaterialParameter_Parms.InName, &InName, 0x8 );

	pFnGetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterialParameter, &GetMaterialParameter_Parms, NULL );

	pFnGetMaterialParameter->FunctionFlags |= 0x400;

	if ( OutMaterial )
		*OutMaterial = GetMaterialParameter_Parms.OutMaterial;

	return GetMaterialParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetActorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class AActor*                  OutActor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetActorParameter ( struct FName InName, class AActor** OutActor )
{
	static UFunction* pFnGetActorParameter = NULL;

	if ( ! pFnGetActorParameter )
		pFnGetActorParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetActorParameter" );

	UParticleSystemComponent_execGetActorParameter_Parms GetActorParameter_Parms;
	memcpy ( &GetActorParameter_Parms.InName, &InName, 0x8 );

	pFnGetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorParameter, &GetActorParameter_Parms, NULL );

	pFnGetActorParameter->FunctionFlags |= 0x400;

	if ( OutActor )
		*OutActor = GetActorParameter_Parms.OutActor;

	return GetActorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetColorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FColor                  OutColor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetColorParameter ( struct FName InName, struct FColor* OutColor )
{
	static UFunction* pFnGetColorParameter = NULL;

	if ( ! pFnGetColorParameter )
		pFnGetColorParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetColorParameter" );

	UParticleSystemComponent_execGetColorParameter_Parms GetColorParameter_Parms;
	memcpy ( &GetColorParameter_Parms.InName, &InName, 0x8 );

	pFnGetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColorParameter, &GetColorParameter_Parms, NULL );

	pFnGetColorParameter->FunctionFlags |= 0x400;

	if ( OutColor )
		memcpy ( OutColor, &GetColorParameter_Parms.OutColor, 0x4 );

	return GetColorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetVectorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FVector                 OutVector                      ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetVectorParameter ( struct FName InName, struct FVector* OutVector )
{
	static UFunction* pFnGetVectorParameter = NULL;

	if ( ! pFnGetVectorParameter )
		pFnGetVectorParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetVectorParameter" );

	UParticleSystemComponent_execGetVectorParameter_Parms GetVectorParameter_Parms;
	memcpy ( &GetVectorParameter_Parms.InName, &InName, 0x8 );

	pFnGetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameter, &GetVectorParameter_Parms, NULL );

	pFnGetVectorParameter->FunctionFlags |= 0x400;

	if ( OutVector )
		memcpy ( OutVector, &GetVectorParameter_Parms.OutVector, 0xC );

	return GetVectorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetFloatParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// float                          OutFloat                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetFloatParameter ( struct FName InName, float* OutFloat )
{
	static UFunction* pFnGetFloatParameter = NULL;

	if ( ! pFnGetFloatParameter )
		pFnGetFloatParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetFloatParameter" );

	UParticleSystemComponent_execGetFloatParameter_Parms GetFloatParameter_Parms;
	memcpy ( &GetFloatParameter_Parms.InName, &InName, 0x8 );

	pFnGetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatParameter, &GetFloatParameter_Parms, NULL );

	pFnGetFloatParameter->FunctionFlags |= 0x400;

	if ( OutFloat )
		*OutFloat = GetFloatParameter_Parms.OutFloat;

	return GetFloatParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetMaterialParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UMaterialInterface*      Param                          ( CPF_Parm )

void UParticleSystemComponent::SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetMaterialParameter" );

	UParticleSystemComponent_execSetMaterialParameter_Parms SetMaterialParameter_Parms;
	memcpy ( &SetMaterialParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetMaterialParameter_Parms.Param = Param;

	pFnSetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );

	pFnSetMaterialParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetActorParameter" );

	UParticleSystemComponent_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetColorParameter" );

	UParticleSystemComponent_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	pFnSetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );

	pFnSetColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetVectorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void UParticleSystemComponent::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetVectorParameter" );

	UParticleSystemComponent_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void UParticleSystemComponent::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetFloatParameter" );

	UParticleSystemComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetEditorLODLevel ( )
{
	static UFunction* pFnGetEditorLODLevel = NULL;

	if ( ! pFnGetEditorLODLevel )
		pFnGetEditorLODLevel = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetEditorLODLevel" );

	UParticleSystemComponent_execGetEditorLODLevel_Parms GetEditorLODLevel_Parms;

	pFnGetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEditorLODLevel, &GetEditorLODLevel_Parms, NULL );

	pFnGetEditorLODLevel->FunctionFlags |= 0x400;

	return GetEditorLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetLODLevel ( )
{
	static UFunction* pFnGetLODLevel = NULL;

	if ( ! pFnGetLODLevel )
		pFnGetLODLevel = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetLODLevel" );

	UParticleSystemComponent_execGetLODLevel_Parms GetLODLevel_Parms;

	pFnGetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevel, &GetLODLevel_Parms, NULL );

	pFnGetLODLevel->FunctionFlags |= 0x400;

	return GetLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetEditorLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetEditorLODLevel = NULL;

	if ( ! pFnSetEditorLODLevel )
		pFnSetEditorLODLevel = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetEditorLODLevel" );

	UParticleSystemComponent_execSetEditorLODLevel_Parms SetEditorLODLevel_Parms;
	SetEditorLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEditorLODLevel, &SetEditorLODLevel_Parms, NULL );

	pFnSetEditorLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetLODLevel = NULL;

	if ( ! pFnSetLODLevel )
		pFnSetLODLevel = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetLODLevel" );

	UParticleSystemComponent_execSetLODLevel_Parms SetLODLevel_Parms;
	SetLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODLevel, &SetLODLevel_Parms, NULL );

	pFnSetLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewTargetStrength              ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetStrength = NULL;

	if ( ! pFnSetBeamTargetStrength )
		pFnSetBeamTargetStrength = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamTargetStrength" );

	UParticleSystemComponent_execSetBeamTargetStrength_Parms SetBeamTargetStrength_Parms;
	SetBeamTargetStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamTargetStrength_Parms.NewTargetStrength = NewTargetStrength;
	SetBeamTargetStrength_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetStrength, &SetBeamTargetStrength_Parms, NULL );

	pFnSetBeamTargetStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetTangent = NULL;

	if ( ! pFnSetBeamTargetTangent )
		pFnSetBeamTargetTangent = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamTargetTangent" );

	UParticleSystemComponent_execSetBeamTargetTangent_Parms SetBeamTargetTangent_Parms;
	SetBeamTargetTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamTargetTangent_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetTangent, &SetBeamTargetTangent_Parms, NULL );

	pFnSetBeamTargetTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTargetPoint                 ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetPoint = NULL;

	if ( ! pFnSetBeamTargetPoint )
		pFnSetBeamTargetPoint = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamTargetPoint" );

	UParticleSystemComponent_execSetBeamTargetPoint_Parms SetBeamTargetPoint_Parms;
	SetBeamTargetPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetPoint_Parms.NewTargetPoint, &NewTargetPoint, 0xC );
	SetBeamTargetPoint_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetPoint, &SetBeamTargetPoint_Parms, NULL );

	pFnSetBeamTargetPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewSourceStrength              ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceStrength = NULL;

	if ( ! pFnSetBeamSourceStrength )
		pFnSetBeamSourceStrength = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamSourceStrength" );

	UParticleSystemComponent_execSetBeamSourceStrength_Parms SetBeamSourceStrength_Parms;
	SetBeamSourceStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamSourceStrength_Parms.NewSourceStrength = NewSourceStrength;
	SetBeamSourceStrength_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceStrength, &SetBeamSourceStrength_Parms, NULL );

	pFnSetBeamSourceStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceTangent = NULL;

	if ( ! pFnSetBeamSourceTangent )
		pFnSetBeamSourceTangent = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamSourceTangent" );

	UParticleSystemComponent_execSetBeamSourceTangent_Parms SetBeamSourceTangent_Parms;
	SetBeamSourceTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourceTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamSourceTangent_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceTangent, &SetBeamSourceTangent_Parms, NULL );

	pFnSetBeamSourceTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewSourcePoint                 ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourcePoint = NULL;

	if ( ! pFnSetBeamSourcePoint )
		pFnSetBeamSourcePoint = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamSourcePoint" );

	UParticleSystemComponent_execSetBeamSourcePoint_Parms SetBeamSourcePoint_Parms;
	SetBeamSourcePoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourcePoint_Parms.NewSourcePoint, &NewSourcePoint, 0xC );
	SetBeamSourcePoint_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourcePoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourcePoint, &SetBeamSourcePoint_Parms, NULL );

	pFnSetBeamSourcePoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          Distance                       ( CPF_Parm )

void UParticleSystemComponent::SetBeamDistance ( int EmitterIndex, float Distance )
{
	static UFunction* pFnSetBeamDistance = NULL;

	if ( ! pFnSetBeamDistance )
		pFnSetBeamDistance = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamDistance" );

	UParticleSystemComponent_execSetBeamDistance_Parms SetBeamDistance_Parms;
	SetBeamDistance_Parms.EmitterIndex = EmitterIndex;
	SetBeamDistance_Parms.Distance = Distance;

	pFnSetBeamDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamDistance, &SetBeamDistance_Parms, NULL );

	pFnSetBeamDistance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewEndPoint                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint )
{
	static UFunction* pFnSetBeamEndPoint = NULL;

	if ( ! pFnSetBeamEndPoint )
		pFnSetBeamEndPoint = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamEndPoint" );

	UParticleSystemComponent_execSetBeamEndPoint_Parms SetBeamEndPoint_Parms;
	SetBeamEndPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamEndPoint_Parms.NewEndPoint, &NewEndPoint, 0xC );

	pFnSetBeamEndPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamEndPoint, &SetBeamEndPoint_Parms, NULL );

	pFnSetBeamEndPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewFactor                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamTessellationFactor ( int EmitterIndex, float NewFactor )
{
	static UFunction* pFnSetBeamTessellationFactor = NULL;

	if ( ! pFnSetBeamTessellationFactor )
		pFnSetBeamTessellationFactor = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamTessellationFactor" );

	UParticleSystemComponent_execSetBeamTessellationFactor_Parms SetBeamTessellationFactor_Parms;
	SetBeamTessellationFactor_Parms.EmitterIndex = EmitterIndex;
	SetBeamTessellationFactor_Parms.NewFactor = NewFactor;

	pFnSetBeamTessellationFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTessellationFactor, &SetBeamTessellationFactor_Parms, NULL );

	pFnSetBeamTessellationFactor->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// int                            NewMethod                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamType ( int EmitterIndex, int NewMethod )
{
	static UFunction* pFnSetBeamType = NULL;

	if ( ! pFnSetBeamType )
		pFnSetBeamType = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetBeamType" );

	UParticleSystemComponent_execSetBeamType_Parms SetBeamType_Parms;
	SetBeamType_Parms.EmitterIndex = EmitterIndex;
	SetBeamType_Parms.NewMethod = NewMethod;

	pFnSetBeamType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamType, &SetBeamType_Parms, NULL );

	pFnSetBeamType->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::RewindEmitterInstances ( )
{
	static UFunction* pFnRewindEmitterInstances = NULL;

	if ( ! pFnRewindEmitterInstances )
		pFnRewindEmitterInstances = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.RewindEmitterInstances" );

	UParticleSystemComponent_execRewindEmitterInstances_Parms RewindEmitterInstances_Parms;

	pFnRewindEmitterInstances->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstances, &RewindEmitterInstances_Parms, NULL );

	pFnRewindEmitterInstances->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )

void UParticleSystemComponent::RewindEmitterInstance ( int EmitterIndex )
{
	static UFunction* pFnRewindEmitterInstance = NULL;

	if ( ! pFnRewindEmitterInstance )
		pFnRewindEmitterInstance = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.RewindEmitterInstance" );

	UParticleSystemComponent_execRewindEmitterInstance_Parms RewindEmitterInstance_Parms;
	RewindEmitterInstance_Parms.EmitterIndex = EmitterIndex;

	pFnRewindEmitterInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstance, &RewindEmitterInstance_Parms, NULL );

	pFnRewindEmitterInstance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnCompleted ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnCompleted = NULL;

	if ( ! pFnSetKillOnCompleted )
		pFnSetKillOnCompleted = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetKillOnCompleted" );

	UParticleSystemComponent_execSetKillOnCompleted_Parms SetKillOnCompleted_Parms;
	SetKillOnCompleted_Parms.EmitterIndex = EmitterIndex;
	SetKillOnCompleted_Parms.bKill = bKill;

	pFnSetKillOnCompleted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnCompleted, &SetKillOnCompleted_Parms, NULL );

	pFnSetKillOnCompleted->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnDeactivate = NULL;

	if ( ! pFnSetKillOnDeactivate )
		pFnSetKillOnDeactivate = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetKillOnDeactivate" );

	UParticleSystemComponent_execSetKillOnDeactivate_Parms SetKillOnDeactivate_Parms;
	SetKillOnDeactivate_Parms.EmitterIndex = EmitterIndex;
	SetKillOnDeactivate_Parms.bKill = bKill;

	pFnSetKillOnDeactivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnDeactivate, &SetKillOnDeactivate_Parms, NULL );

	pFnSetKillOnDeactivate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick ( )
{
	static UFunction* pFnGetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnGetSkipUpdateDynamicDataDuringTick )
		pFnGetSkipUpdateDynamicDataDuringTick = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick" );

	UParticleSystemComponent_execGetSkipUpdateDynamicDataDuringTick_Parms GetSkipUpdateDynamicDataDuringTick_Parms;

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkipUpdateDynamicDataDuringTick, &GetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;

	return GetSkipUpdateDynamicDataDuringTick_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInSkipUpdateDynamicDataDuringTick ( CPF_Parm )

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick )
{
	static UFunction* pFnSetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnSetSkipUpdateDynamicDataDuringTick )
		pFnSetSkipUpdateDynamicDataDuringTick = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick" );

	UParticleSystemComponent_execSetSkipUpdateDynamicDataDuringTick_Parms SetSkipUpdateDynamicDataDuringTick_Parms;
	SetSkipUpdateDynamicDataDuringTick_Parms.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkipUpdateDynamicDataDuringTick, &SetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.KillParticlesForced
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::KillParticlesForced ( )
{
	static UFunction* pFnKillParticlesForced = NULL;

	if ( ! pFnKillParticlesForced )
		pFnKillParticlesForced = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.KillParticlesForced" );

	UParticleSystemComponent_execKillParticlesForced_Parms KillParticlesForced_Parms;

	pFnKillParticlesForced->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillParticlesForced, &KillParticlesForced_Parms, NULL );

	pFnKillParticlesForced->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.DeactivateSystem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::DeactivateSystem ( )
{
	static UFunction* pFnDeactivateSystem = NULL;

	if ( ! pFnDeactivateSystem )
		pFnDeactivateSystem = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.DeactivateSystem" );

	UParticleSystemComponent_execDeactivateSystem_Parms DeactivateSystem_Parms;

	pFnDeactivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateSystem, &DeactivateSystem_Parms, NULL );

	pFnDeactivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ActivateSystem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFlagAsJustAttached            ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ActivateSystem ( unsigned long bFlagAsJustAttached )
{
	static UFunction* pFnActivateSystem = NULL;

	if ( ! pFnActivateSystem )
		pFnActivateSystem = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.ActivateSystem" );

	UParticleSystemComponent_execActivateSystem_Parms ActivateSystem_Parms;
	ActivateSystem_Parms.bFlagAsJustAttached = bFlagAsJustAttached;

	pFnActivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateSystem, &ActivateSystem_Parms, NULL );

	pFnActivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )

void UParticleSystemComponent::SetTemplate ( class UParticleSystem* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.SetTemplate" );

	UParticleSystemComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.OnSystemFinished
// [0x00120000] 
// Parameters infos:
// class UParticleSystemComponent* PSystem                        ( CPF_Parm | CPF_EditInline )

void UParticleSystemComponent::OnSystemFinished ( class UParticleSystemComponent* PSystem )
{
	static UFunction* pFnOnSystemFinished = NULL;

	if ( ! pFnOnSystemFinished )
		pFnOnSystemFinished = UObject::FindObject< UFunction > ( "Function Engine.ParticleSystemComponent.OnSystemFinished" );

	UParticleSystemComponent_execOnSystemFinished_Parms OnSystemFinished_Parms;
	OnSystemFinished_Parms.PSystem = PSystem;

	this->ProcessEvent ( pFnOnSystemFinished, &OnSystemFinished_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APhysXEmitterSpawnable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.PhysXEmitterSpawnable.ReplicatedEvent" );

	APhysXEmitterSpawnable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.SetTemplate
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void APhysXEmitterSpawnable::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function Engine.PhysXEmitterSpawnable.SetTemplate" );

	APhysXEmitterSpawnable_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APhysXEmitterSpawnable::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.PhysXEmitterSpawnable.Destroyed" );

	APhysXEmitterSpawnable_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.Term
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APhysXEmitterSpawnable::Term ( )
{
	static UFunction* pFnTerm = NULL;

	if ( ! pFnTerm )
		pFnTerm = UObject::FindObject< UFunction > ( "Function Engine.PhysXEmitterSpawnable.Term" );

	APhysXEmitterSpawnable_execTerm_Parms Term_Parms;

	pFnTerm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTerm, &Term_Parms, NULL );

	pFnTerm->FunctionFlags |= 0x400;
};

// Function Engine.KActor.Reset
// [0x00020102] 
// Parameters infos:

void AKActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.KActor.Reset" );

	AKActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.KActor.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKActor::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = UObject::FindObject< UFunction > ( "Function Engine.KActor.OnTeleport" );

	AKActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.KActor.OnToggle" );

	AKActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KActor.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AKActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function Engine.KActor.TakeRadiusDamage" );

	AKActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KActor.ApplyImpulse
// [0x00820002] 
// Parameters infos:
// struct FVector                 ImpulseDir                     ( CPF_Parm )
// float                          ImpulseMag                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void AKActor::ApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnApplyImpulse = NULL;

	if ( ! pFnApplyImpulse )
		pFnApplyImpulse = UObject::FindObject< UFunction > ( "Function Engine.KActor.ApplyImpulse" );

	AKActor_execApplyImpulse_Parms ApplyImpulse_Parms;
	memcpy ( &ApplyImpulse_Parms.ImpulseDir, &ImpulseDir, 0xC );
	ApplyImpulse_Parms.ImpulseMag = ImpulseMag;
	memcpy ( &ApplyImpulse_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyImpulse_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnApplyImpulse, &ApplyImpulse_Parms, NULL );
};

// Function Engine.KActor.ReplicatedEvent
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.KActor.ReplicatedEvent" );

	AKActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KActor.SetPhysicalCollisionProperties
// [0x00020102] 
// Parameters infos:

void AKActor::SetPhysicalCollisionProperties ( )
{
	static UFunction* pFnSetPhysicalCollisionProperties = NULL;

	if ( ! pFnSetPhysicalCollisionProperties )
		pFnSetPhysicalCollisionProperties = UObject::FindObject< UFunction > ( "Function Engine.KActor.SetPhysicalCollisionProperties" );

	AKActor_execSetPhysicalCollisionProperties_Parms SetPhysicalCollisionProperties_Parms;

	this->ProcessEvent ( pFnSetPhysicalCollisionProperties, &SetPhysicalCollisionProperties_Parms, NULL );
};

// Function Engine.KActor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AKActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = UObject::FindObject< UFunction > ( "Function Engine.KActor.FellOutOfWorld" );

	AKActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.KActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.KActor.PostBeginPlay" );

	AKActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.KActor.ResolveRBState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKActor::ResolveRBState ( )
{
	static UFunction* pFnResolveRBState = NULL;

	if ( ! pFnResolveRBState )
		pFnResolveRBState = UObject::FindObject< UFunction > ( "Function Engine.KActor.ResolveRBState" );

	AKActor_execResolveRBState_Parms ResolveRBState_Parms;

	pFnResolveRBState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveRBState, &ResolveRBState_Parms, NULL );

	pFnResolveRBState->FunctionFlags |= 0x400;
};

// Function Engine.KActor.GetKActorPhysMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial ( )
{
	static UFunction* pFnGetKActorPhysMaterial = NULL;

	if ( ! pFnGetKActorPhysMaterial )
		pFnGetKActorPhysMaterial = UObject::FindObject< UFunction > ( "Function Engine.KActor.GetKActorPhysMaterial" );

	AKActor_execGetKActorPhysMaterial_Parms GetKActorPhysMaterial_Parms;

	pFnGetKActorPhysMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetKActorPhysMaterial, &GetKActorPhysMaterial_Parms, NULL );

	pFnGetKActorPhysMaterial->FunctionFlags |= 0x400;

	return GetKActorPhysMaterial_Parms.ReturnValue;
};

// Function Engine.KActorSpawnable.ResetComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKActorSpawnable::ResetComponents ( )
{
	static UFunction* pFnResetComponents = NULL;

	if ( ! pFnResetComponents )
		pFnResetComponents = UObject::FindObject< UFunction > ( "Function Engine.KActorSpawnable.ResetComponents" );

	AKActorSpawnable_execResetComponents_Parms ResetComponents_Parms;

	pFnResetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetComponents, &ResetComponents_Parms, NULL );

	pFnResetComponents->FunctionFlags |= 0x400;
};

// Function Engine.KActorSpawnable.Recycle
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function Engine.KActorSpawnable.Recycle" );

	AKActorSpawnable_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.KActorSpawnable.Initialize
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function Engine.KActorSpawnable.Initialize" );

	AKActorSpawnable_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function Engine.KAsset.DoKismetAttachment
// [0x00020102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AKAsset::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = UObject::FindObject< UFunction > ( "Function Engine.KAsset.DoKismetAttachment" );

	AKAsset_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.KAsset.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKAsset::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = UObject::FindObject< UFunction > ( "Function Engine.KAsset.OnTeleport" );

	AKAsset_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KAsset.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKAsset::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.KAsset.OnToggle" );

	AKAsset_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KAsset.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AKAsset::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function Engine.KAsset.TakeRadiusDamage" );

	AKAsset_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KAsset.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKAsset::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.KAsset.ReplicatedEvent" );

	AKAsset_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KAsset.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKAsset::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.KAsset.PostBeginPlay" );

	AKAsset_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// [0x00020002] 
// Parameters infos:
// class UPhysicalMaterialPropertyBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty ( class UClass* DesiredClass )
{
	static UFunction* pFnGetPhysicalMaterialProperty = NULL;

	if ( ! pFnGetPhysicalMaterialProperty )
		pFnGetPhysicalMaterialProperty = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty" );

	UPhysicalMaterial_execGetPhysicalMaterialProperty_Parms GetPhysicalMaterialProperty_Parms;
	GetPhysicalMaterialProperty_Parms.DesiredClass = DesiredClass;

	this->ProcessEvent ( pFnGetPhysicalMaterialProperty, &GetPhysicalMaterialProperty_Parms, NULL );

	return GetPhysicalMaterialProperty_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterial.GetAudioMaterialNum
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UPhysicalMaterial::GetAudioMaterialNum ( )
{
	static UFunction* pFnGetAudioMaterialNum = NULL;

	if ( ! pFnGetAudioMaterialNum )
		pFnGetAudioMaterialNum = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterial.GetAudioMaterialNum" );

	UPhysicalMaterial_execGetAudioMaterialNum_Parms GetAudioMaterialNum_Parms;

	pFnGetAudioMaterialNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAudioMaterialNum, &GetAudioMaterialNum_Parms, NULL );

	pFnGetAudioMaterialNum->FunctionFlags |= 0x400;

	return GetAudioMaterialNum_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_ConstraintInstance*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConName                        ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindConstraintInstance = NULL;

	if ( ! pFnFindConstraintInstance )
		pFnFindConstraintInstance = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.FindConstraintInstance" );

	UPhysicsAssetInstance_execFindConstraintInstance_Parms FindConstraintInstance_Parms;
	memcpy ( &FindConstraintInstance_Parms.ConName, &ConName, 0x8 );
	FindConstraintInstance_Parms.InAsset = InAsset;

	pFnFindConstraintInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintInstance, &FindConstraintInstance_Parms, NULL );

	pFnFindConstraintInstance->FunctionFlags |= 0x400;

	return FindConstraintInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BodyName                       ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindBodyInstance = NULL;

	if ( ! pFnFindBodyInstance )
		pFnFindBodyInstance = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.FindBodyInstance" );

	UPhysicsAssetInstance_execFindBodyInstance_Parms FindBodyInstance_Parms;
	memcpy ( &FindBodyInstance_Parms.BodyName, &BodyName, 0x8 );
	FindBodyInstance_Parms.InAsset = InAsset;

	pFnFindBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstance, &FindBodyInstance_Parms, NULL );

	pFnFindBodyInstance->FunctionFlags |= 0x400;

	return FindBodyInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetFullAnimWeightBonesFixed = NULL;

	if ( ! pFnSetFullAnimWeightBonesFixed )
		pFnSetFullAnimWeightBonesFixed = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed" );

	UPhysicsAssetInstance_execSetFullAnimWeightBonesFixed_Parms SetFullAnimWeightBonesFixed_Parms;
	SetFullAnimWeightBonesFixed_Parms.bNewFixed = bNewFixed;
	SetFullAnimWeightBonesFixed_Parms.SkelMesh = SkelMesh;

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullAnimWeightBonesFixed, &SetFullAnimWeightBonesFixed_Parms, NULL );

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetNamedBodiesBlockRigidBody = NULL;

	if ( ! pFnSetNamedBodiesBlockRigidBody )
		pFnSetNamedBodiesBlockRigidBody = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody" );

	UPhysicsAssetInstance_execSetNamedBodiesBlockRigidBody_Parms SetNamedBodiesBlockRigidBody_Parms;
	SetNamedBodiesBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;
	memcpy ( &SetNamedBodiesBlockRigidBody_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedBodiesBlockRigidBody_Parms.SkelMesh = SkelMesh;

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesBlockRigidBody, &SetNamedBodiesBlockRigidBody_Parms, NULL );

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          InBoneLinearSpring             ( CPF_Parm )
// float                          InBoneAngularSpring            ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetNamedRBBoneSprings ( unsigned long bEnable, TArray< struct FName > BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp )
{
	static UFunction* pFnSetNamedRBBoneSprings = NULL;

	if ( ! pFnSetNamedRBBoneSprings )
		pFnSetNamedRBBoneSprings = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings" );

	UPhysicsAssetInstance_execSetNamedRBBoneSprings_Parms SetNamedRBBoneSprings_Parms;
	SetNamedRBBoneSprings_Parms.bEnable = bEnable;
	memcpy ( &SetNamedRBBoneSprings_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedRBBoneSprings_Parms.InBoneLinearSpring = InBoneLinearSpring;
	SetNamedRBBoneSprings_Parms.InBoneAngularSpring = InBoneAngularSpring;
	SetNamedRBBoneSprings_Parms.SkelMeshComp = SkelMeshComp;

	pFnSetNamedRBBoneSprings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedRBBoneSprings, &SetNamedRBBoneSprings_Parms, NULL );

	pFnSetNamedRBBoneSprings->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetAllMotorsAngularDriveParams = NULL;

	if ( ! pFnSetAllMotorsAngularDriveParams )
		pFnSetAllMotorsAngularDriveParams = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams" );

	UPhysicsAssetInstance_execSetAllMotorsAngularDriveParams_Parms SetAllMotorsAngularDriveParams_Parms;
	SetAllMotorsAngularDriveParams_Parms.InSpring = InSpring;
	SetAllMotorsAngularDriveParams_Parms.InDamping = InDamping;
	SetAllMotorsAngularDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularDriveParams, &SetAllMotorsAngularDriveParams_Parms, NULL );

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetNamedMotorsAngularPositionDrive )
		pFnSetNamedMotorsAngularPositionDrive = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive" );

	UPhysicsAssetInstance_execSetNamedMotorsAngularPositionDrive_Parms SetNamedMotorsAngularPositionDrive_Parms;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	memcpy ( &SetNamedMotorsAngularPositionDrive_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedMotorsAngularPositionDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularPositionDrive_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedMotorsAngularPositionDrive, &SetNamedMotorsAngularPositionDrive_Parms, NULL );

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAllMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetAllMotorsAngularPositionDrive )
		pFnSetAllMotorsAngularPositionDrive = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive" );

	UPhysicsAssetInstance_execSetAllMotorsAngularPositionDrive_Parms SetAllMotorsAngularPositionDrive_Parms;
	SetAllMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularPositionDrive, &SetAllMotorsAngularPositionDrive_Parms, NULL );

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedBodiesFixed ( unsigned long bNewFixed, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedBodiesFixed = NULL;

	if ( ! pFnSetNamedBodiesFixed )
		pFnSetNamedBodiesFixed = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed" );

	UPhysicsAssetInstance_execSetNamedBodiesFixed_Parms SetNamedBodiesFixed_Parms;
	SetNamedBodiesFixed_Parms.bNewFixed = bNewFixed;
	memcpy ( &SetNamedBodiesFixed_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedBodiesFixed_Parms.SkelMesh = SkelMesh;
	SetNamedBodiesFixed_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesFixed, &SetNamedBodiesFixed_Parms, NULL );

	pFnSetNamedBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void UPhysicsAssetInstance::SetAllBodiesFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetAllBodiesFixed = NULL;

	if ( ! pFnSetAllBodiesFixed )
		pFnSetAllBodiesFixed = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetAllBodiesFixed" );

	UPhysicsAssetInstance_execSetAllBodiesFixed_Parms SetAllBodiesFixed_Parms;
	SetAllBodiesFixed_Parms.bNewFixed = bNewFixed;

	pFnSetAllBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllBodiesFixed, &SetAllBodiesFixed_Parms, NULL );

	pFnSetAllBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InBoneName                     ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )
// class USkeletalMesh*           InSkelMesh                     ( CPF_Parm )

float UPhysicsAssetInstance::GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh )
{
	static UFunction* pFnGetTotalMassBelowBone = NULL;

	if ( ! pFnGetTotalMassBelowBone )
		pFnGetTotalMassBelowBone = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone" );

	UPhysicsAssetInstance_execGetTotalMassBelowBone_Parms GetTotalMassBelowBone_Parms;
	memcpy ( &GetTotalMassBelowBone_Parms.InBoneName, &InBoneName, 0x8 );
	GetTotalMassBelowBone_Parms.InAsset = InAsset;
	GetTotalMassBelowBone_Parms.InSkelMesh = InSkelMesh;

	pFnGetTotalMassBelowBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalMassBelowBone, &GetTotalMassBelowBone_Parms, NULL );

	pFnGetTotalMassBelowBone->FunctionFlags |= 0x400;

	return GetTotalMassBelowBone_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveStrength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InAngularSpringStrength        ( CPF_Parm )
// float                          InAngularDampingStrength       ( CPF_Parm )
// float                          InAngularForceLimitStrength    ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetAllMotorsAngularDriveStrength ( float InAngularSpringStrength, float InAngularDampingStrength, float InAngularForceLimitStrength, class USkeletalMeshComponent* SkelMeshComp )
{
	static UFunction* pFnSetAllMotorsAngularDriveStrength = NULL;

	if ( ! pFnSetAllMotorsAngularDriveStrength )
		pFnSetAllMotorsAngularDriveStrength = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveStrength" );

	UPhysicsAssetInstance_execSetAllMotorsAngularDriveStrength_Parms SetAllMotorsAngularDriveStrength_Parms;
	SetAllMotorsAngularDriveStrength_Parms.InAngularSpringStrength = InAngularSpringStrength;
	SetAllMotorsAngularDriveStrength_Parms.InAngularDampingStrength = InAngularDampingStrength;
	SetAllMotorsAngularDriveStrength_Parms.InAngularForceLimitStrength = InAngularForceLimitStrength;
	SetAllMotorsAngularDriveStrength_Parms.SkelMeshComp = SkelMeshComp;

	pFnSetAllMotorsAngularDriveStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularDriveStrength, &SetAllMotorsAngularDriveStrength_Parms, NULL );

	pFnSetAllMotorsAngularDriveStrength->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InAngularSpringScale           ( CPF_Parm )
// float                          InAngularDampingScale          ( CPF_Parm )
// float                          InAngularForceLimitScale       ( CPF_Parm )

void UPhysicsAssetInstance::SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale )
{
	static UFunction* pFnSetAngularDriveScale = NULL;

	if ( ! pFnSetAngularDriveScale )
		pFnSetAngularDriveScale = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetAngularDriveScale" );

	UPhysicsAssetInstance_execSetAngularDriveScale_Parms SetAngularDriveScale_Parms;
	SetAngularDriveScale_Parms.InAngularSpringScale = InAngularSpringScale;
	SetAngularDriveScale_Parms.InAngularDampingScale = InAngularDampingScale;
	SetAngularDriveScale_Parms.InAngularForceLimitScale = InAngularForceLimitScale;

	pFnSetAngularDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveScale, &SetAngularDriveScale_Parms, NULL );

	pFnSetAngularDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpringScale            ( CPF_Parm )
// float                          InLinearDampingScale           ( CPF_Parm )
// float                          InLinearForceLimitScale        ( CPF_Parm )

void UPhysicsAssetInstance::SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale )
{
	static UFunction* pFnSetLinearDriveScale = NULL;

	if ( ! pFnSetLinearDriveScale )
		pFnSetLinearDriveScale = UObject::FindObject< UFunction > ( "Function Engine.PhysicsAssetInstance.SetLinearDriveScale" );

	UPhysicsAssetInstance_execSetLinearDriveScale_Parms SetLinearDriveScale_Parms;
	SetLinearDriveScale_Parms.InLinearSpringScale = InLinearSpringScale;
	SetLinearDriveScale_Parms.InLinearDampingScale = InLinearDampingScale;
	SetLinearDriveScale_Parms.InLinearForceLimitScale = InLinearForceLimitScale;

	pFnSetLinearDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveScale, &SetLinearDriveScale_Parms, NULL );

	pFnSetLinearDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetContactReportForceThreshold
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Threshold                      ( CPF_Parm )

void URB_BodyInstance::SetContactReportForceThreshold ( float Threshold )
{
	static UFunction* pFnSetContactReportForceThreshold = NULL;

	if ( ! pFnSetContactReportForceThreshold )
		pFnSetContactReportForceThreshold = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetContactReportForceThreshold" );

	URB_BodyInstance_execSetContactReportForceThreshold_Parms SetContactReportForceThreshold_Parms;
	SetContactReportForceThreshold_Parms.Threshold = Threshold;

	pFnSetContactReportForceThreshold->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetContactReportForceThreshold, &SetContactReportForceThreshold_Parms, NULL );

	pFnSetContactReportForceThreshold->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableCollisionResponse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableResponse                ( CPF_Parm )

void URB_BodyInstance::EnableCollisionResponse ( unsigned long bEnableResponse )
{
	static UFunction* pFnEnableCollisionResponse = NULL;

	if ( ! pFnEnableCollisionResponse )
		pFnEnableCollisionResponse = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.EnableCollisionResponse" );

	URB_BodyInstance_execEnableCollisionResponse_Parms EnableCollisionResponse_Parms;
	EnableCollisionResponse_Parms.bEnableResponse = bEnableResponse;

	pFnEnableCollisionResponse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCollisionResponse, &EnableCollisionResponse_Parms, NULL );

	pFnEnableCollisionResponse->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void URB_BodyInstance::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetPhysMaterialOverride" );

	URB_BodyInstance_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void URB_BodyInstance::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetBlockRigidBody" );

	URB_BodyInstance_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTeleport                      ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnSetBoneSpringTarget = NULL;

	if ( ! pFnSetBoneSpringTarget )
		pFnSetBoneSpringTarget = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetBoneSpringTarget" );

	URB_BodyInstance_execSetBoneSpringTarget_Parms SetBoneSpringTarget_Parms;
	SetBoneSpringTarget_Parms.bTeleport = bTeleport;

	pFnSetBoneSpringTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringTarget, &SetBoneSpringTarget_Parms, NULL );

	pFnSetBoneSpringTarget->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &SetBoneSpringTarget_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.SetBoneSpringParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpring                 ( CPF_Parm )
// float                          InLinearDamping                ( CPF_Parm )
// float                          InAngularSpring                ( CPF_Parm )
// float                          InAngularDamping               ( CPF_Parm )

void URB_BodyInstance::SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping )
{
	static UFunction* pFnSetBoneSpringParams = NULL;

	if ( ! pFnSetBoneSpringParams )
		pFnSetBoneSpringParams = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetBoneSpringParams" );

	URB_BodyInstance_execSetBoneSpringParams_Parms SetBoneSpringParams_Parms;
	SetBoneSpringParams_Parms.InLinearSpring = InLinearSpring;
	SetBoneSpringParams_Parms.InLinearDamping = InLinearDamping;
	SetBoneSpringParams_Parms.InAngularSpring = InAngularSpring;
	SetBoneSpringParams_Parms.InAngularDamping = InAngularDamping;

	pFnSetBoneSpringParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringParams, &SetBoneSpringParams_Parms, NULL );

	pFnSetBoneSpringParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableBoneSpring
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnableLinear                ( CPF_Parm )
// unsigned long                  bInEnableAngular               ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnEnableBoneSpring = NULL;

	if ( ! pFnEnableBoneSpring )
		pFnEnableBoneSpring = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.EnableBoneSpring" );

	URB_BodyInstance_execEnableBoneSpring_Parms EnableBoneSpring_Parms;
	EnableBoneSpring_Parms.bInEnableLinear = bInEnableLinear;
	EnableBoneSpring_Parms.bInEnableAngular = bInEnableAngular;

	pFnEnableBoneSpring->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableBoneSpring, &EnableBoneSpring_Parms, NULL );

	pFnEnableBoneSpring->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &EnableBoneSpring_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity ( )
{
	static UFunction* pFnGetUnrealWorldAngularVelocity = NULL;

	if ( ! pFnGetUnrealWorldAngularVelocity )
		pFnGetUnrealWorldAngularVelocity = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity" );

	URB_BodyInstance_execGetUnrealWorldAngularVelocity_Parms GetUnrealWorldAngularVelocity_Parms;

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldAngularVelocity, &GetUnrealWorldAngularVelocity_Parms, NULL );

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldAngularVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldVelocity ( )
{
	static UFunction* pFnGetUnrealWorldVelocity = NULL;

	if ( ! pFnGetUnrealWorldVelocity )
		pFnGetUnrealWorldVelocity = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.GetUnrealWorldVelocity" );

	URB_BodyInstance_execGetUnrealWorldVelocity_Parms GetUnrealWorldVelocity_Parms;

	pFnGetUnrealWorldVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldVelocity, &GetUnrealWorldVelocity_Parms, NULL );

	pFnGetUnrealWorldVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix URB_BodyInstance::GetUnrealWorldTM ( )
{
	static UFunction* pFnGetUnrealWorldTM = NULL;

	if ( ! pFnGetUnrealWorldTM )
		pFnGetUnrealWorldTM = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.GetUnrealWorldTM" );

	URB_BodyInstance_execGetUnrealWorldTM_Parms GetUnrealWorldTM_Parms;

	pFnGetUnrealWorldTM->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldTM, &GetUnrealWorldTM_Parms, NULL );

	pFnGetUnrealWorldTM->FunctionFlags |= 0x400;

	return GetUnrealWorldTM_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.GetPhysicsAssetInstance" );

	URB_BodyInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsValidBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsValidBodyInstance ( )
{
	static UFunction* pFnIsValidBodyInstance = NULL;

	if ( ! pFnIsValidBodyInstance )
		pFnIsValidBodyInstance = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.IsValidBodyInstance" );

	URB_BodyInstance_execIsValidBodyInstance_Parms IsValidBodyInstance_Parms;

	pFnIsValidBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidBodyInstance, &IsValidBodyInstance_Parms, NULL );

	pFnIsValidBodyInstance->FunctionFlags |= 0x400;

	return IsValidBodyInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsFixed ( )
{
	static UFunction* pFnIsFixed = NULL;

	if ( ! pFnIsFixed )
		pFnIsFixed = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.IsFixed" );

	URB_BodyInstance_execIsFixed_Parms IsFixed_Parms;

	pFnIsFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFixed, &IsFixed_Parms, NULL );

	pFnIsFixed->FunctionFlags |= 0x400;

	return IsFixed_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.SetFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void URB_BodyInstance::SetFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetFixed = NULL;

	if ( ! pFnSetFixed )
		pFnSetFixed = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetFixed" );

	URB_BodyInstance_execSetFixed_Parms SetFixed_Parms;
	SetFixed_Parms.bNewFixed = bNewFixed;

	pFnSetFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFixed, &SetFixed_Parms, NULL );

	pFnSetFixed->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetAwake
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAwake                         ( CPF_Parm )

void URB_BodyInstance::SetAwake ( unsigned long bAwake )
{
	static UFunction* pFnSetAwake = NULL;

	if ( ! pFnSetAwake )
		pFnSetAwake = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetAwake" );

	URB_BodyInstance_execSetAwake_Parms SetAwake_Parms;
	SetAwake_Parms.bAwake = bAwake;

	pFnSetAwake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAwake, &SetAwake_Parms, NULL );

	pFnSetAwake->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetGravityResponse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bGravityResponse               ( CPF_Parm )

void URB_BodyInstance::SetGravityResponse ( unsigned long bGravityResponse )
{
	static UFunction* pFnSetGravityResponse = NULL;

	if ( ! pFnSetGravityResponse )
		pFnSetGravityResponse = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetGravityResponse" );

	URB_BodyInstance_execSetGravityResponse_Parms SetGravityResponse_Parms;
	SetGravityResponse_Parms.bGravityResponse = bGravityResponse;

	pFnSetGravityResponse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGravityResponse, &SetGravityResponse_Parms, NULL );

	pFnSetGravityResponse->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetIsTrigger
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewIsTrigger                  ( CPF_Parm )

void URB_BodyInstance::SetIsTrigger ( unsigned long bNewIsTrigger )
{
	static UFunction* pFnSetIsTrigger = NULL;

	if ( ! pFnSetIsTrigger )
		pFnSetIsTrigger = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetIsTrigger" );

	URB_BodyInstance_execSetIsTrigger_Parms SetIsTrigger_Parms;
	SetIsTrigger_Parms.bNewIsTrigger = bNewIsTrigger;

	pFnSetIsTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIsTrigger, &SetIsTrigger_Parms, NULL );

	pFnSetIsTrigger->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetAPBCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FsAPBCollision          newAPBCollision                ( CPF_Parm )

void URB_BodyInstance::SetAPBCollision ( struct FsAPBCollision newAPBCollision )
{
	static UFunction* pFnSetAPBCollision = NULL;

	if ( ! pFnSetAPBCollision )
		pFnSetAPBCollision = UObject::FindObject< UFunction > ( "Function Engine.RB_BodyInstance.SetAPBCollision" );

	URB_BodyInstance_execSetAPBCollision_Parms SetAPBCollision_Parms;
	memcpy ( &SetAPBCollision_Parms.newAPBCollision, &newAPBCollision, 0x14 );

	pFnSetAPBCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAPBCollision, &SetAPBCollision_Parms, NULL );

	pFnSetAPBCollision->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintActor.OnDestroy" );

	ARB_ConstraintActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_ConstraintActor::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintActor.TermConstraint" );

	ARB_ConstraintActor_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.InitConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  Actor1                         ( CPF_Parm )
// class AActor*                  Actor2                         ( CPF_Parm )
// struct FName                   Actor1Bone                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   Actor2Bone                     ( CPF_OptionalParm | CPF_Parm )
// float                          BreakThreshold                 ( CPF_OptionalParm | CPF_Parm )

void ARB_ConstraintActor::InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintActor.InitConstraint" );

	ARB_ConstraintActor_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.Actor1 = Actor1;
	InitConstraint_Parms.Actor2 = Actor2;
	memcpy ( &InitConstraint_Parms.Actor1Bone, &Actor1Bone, 0x8 );
	memcpy ( &InitConstraint_Parms.Actor2Bone, &Actor2Bone, 0x8 );
	InitConstraint_Parms.BreakThreshold = BreakThreshold;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.SetDisableCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewDisableCollision            ( CPF_Parm )

void ARB_ConstraintActor::SetDisableCollision ( unsigned long NewDisableCollision )
{
	static UFunction* pFnSetDisableCollision = NULL;

	if ( ! pFnSetDisableCollision )
		pFnSetDisableCollision = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintActor.SetDisableCollision" );

	ARB_ConstraintActor_execSetDisableCollision_Parms SetDisableCollision_Parms;
	SetDisableCollision_Parms.NewDisableCollision = NewDisableCollision;

	pFnSetDisableCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDisableCollision, &SetDisableCollision_Parms, NULL );

	pFnSetDisableCollision->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 NewTM                          ( CPF_Parm | CPF_OutParm )

void URB_ConstraintInstance::MoveKinActorTransform ( struct FMatrix* NewTM )
{
	static UFunction* pFnMoveKinActorTransform = NULL;

	if ( ! pFnMoveKinActorTransform )
		pFnMoveKinActorTransform = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.MoveKinActorTransform" );

	URB_ConstraintInstance_execMoveKinActorTransform_Parms MoveKinActorTransform_Parms;

	pFnMoveKinActorTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveKinActorTransform, &MoveKinActorTransform_Parms, NULL );

	pFnMoveKinActorTransform->FunctionFlags |= 0x400;

	if ( NewTM )
		memcpy ( NewTM, &MoveKinActorTransform_Parms.NewTM, 0x40 );
};

// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewLimitSize                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearLimitSize ( float NewLimitSize )
{
	static UFunction* pFnSetLinearLimitSize = NULL;

	if ( ! pFnSetLinearLimitSize )
		pFnSetLinearLimitSize = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetLinearLimitSize" );

	URB_ConstraintInstance_execSetLinearLimitSize_Parms SetLinearLimitSize_Parms;
	SetLinearLimitSize_Parms.NewLimitSize = NewLimitSize;

	pFnSetLinearLimitSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearLimitSize, &SetLinearLimitSize_Parms, NULL );

	pFnSetLinearLimitSize->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSwing1LimitScale             ( CPF_Parm )
// float                          InSwing2LimitScale             ( CPF_Parm )
// float                          InTwistLimitScale              ( CPF_Parm )
// class URB_ConstraintSetup*     InSetup                        ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup )
{
	static UFunction* pFnSetAngularDOFLimitScale = NULL;

	if ( ! pFnSetAngularDOFLimitScale )
		pFnSetAngularDOFLimitScale = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale" );

	URB_ConstraintInstance_execSetAngularDOFLimitScale_Parms SetAngularDOFLimitScale_Parms;
	SetAngularDOFLimitScale_Parms.InSwing1LimitScale = InSwing1LimitScale;
	SetAngularDOFLimitScale_Parms.InSwing2LimitScale = InSwing2LimitScale;
	SetAngularDOFLimitScale_Parms.InTwistLimitScale = InTwistLimitScale;
	SetAngularDOFLimitScale_Parms.InSetup = InSetup;

	pFnSetAngularDOFLimitScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDOFLimitScale, &SetAngularDOFLimitScale_Parms, NULL );

	pFnSetAngularDOFLimitScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetAngularDriveParams = NULL;

	if ( ! pFnSetAngularDriveParams )
		pFnSetAngularDriveParams = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetAngularDriveParams" );

	URB_ConstraintInstance_execSetAngularDriveParams_Parms SetAngularDriveParams_Parms;
	SetAngularDriveParams_Parms.InSpring = InSpring;
	SetAngularDriveParams_Parms.InDamping = InDamping;
	SetAngularDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveParams, &SetAngularDriveParams_Parms, NULL );

	pFnSetAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetAngularVelocityTarget = NULL;

	if ( ! pFnSetAngularVelocityTarget )
		pFnSetAngularVelocityTarget = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget" );

	URB_ConstraintInstance_execSetAngularVelocityTarget_Parms SetAngularVelocityTarget_Parms;
	memcpy ( &SetAngularVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetAngularVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityTarget, &SetAngularVelocityTarget_Parms, NULL );

	pFnSetAngularVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   InPosTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetAngularPositionTarget ( struct FQuat InPosTarget )
{
	static UFunction* pFnSetAngularPositionTarget = NULL;

	if ( ! pFnSetAngularPositionTarget )
		pFnSetAngularPositionTarget = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetAngularPositionTarget" );

	URB_ConstraintInstance_execSetAngularPositionTarget_Parms SetAngularPositionTarget_Parms;
	memcpy ( &SetAngularPositionTarget_Parms.InPosTarget, &InPosTarget, 0x10 );

	pFnSetAngularPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionTarget, &SetAngularPositionTarget_Parms, NULL );

	pFnSetAngularPositionTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetLinearDriveParams = NULL;

	if ( ! pFnSetLinearDriveParams )
		pFnSetLinearDriveParams = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetLinearDriveParams" );

	URB_ConstraintInstance_execSetLinearDriveParams_Parms SetLinearDriveParams_Parms;
	SetLinearDriveParams_Parms.InSpring = InSpring;
	SetLinearDriveParams_Parms.InDamping = InDamping;
	SetLinearDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetLinearDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveParams, &SetLinearDriveParams_Parms, NULL );

	pFnSetLinearDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetLinearVelocityTarget = NULL;

	if ( ! pFnSetLinearVelocityTarget )
		pFnSetLinearVelocityTarget = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget" );

	URB_ConstraintInstance_execSetLinearVelocityTarget_Parms SetLinearVelocityTarget_Parms;
	memcpy ( &SetLinearVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetLinearVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityTarget, &SetLinearVelocityTarget_Parms, NULL );

	pFnSetLinearVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InPosTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionTarget ( struct FVector InPosTarget )
{
	static UFunction* pFnSetLinearPositionTarget = NULL;

	if ( ! pFnSetLinearPositionTarget )
		pFnSetLinearPositionTarget = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetLinearPositionTarget" );

	URB_ConstraintInstance_execSetLinearPositionTarget_Parms SetLinearPositionTarget_Parms;
	memcpy ( &SetLinearPositionTarget_Parms.InPosTarget, &InPosTarget, 0xC );

	pFnSetLinearPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionTarget, &SetLinearPositionTarget_Parms, NULL );

	pFnSetLinearPositionTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularVelocityDrive = NULL;

	if ( ! pFnSetAngularVelocityDrive )
		pFnSetAngularVelocityDrive = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive" );

	URB_ConstraintInstance_execSetAngularVelocityDrive_Parms SetAngularVelocityDrive_Parms;
	SetAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityDrive, &SetAngularVelocityDrive_Parms, NULL );

	pFnSetAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularPositionDrive = NULL;

	if ( ! pFnSetAngularPositionDrive )
		pFnSetAngularPositionDrive = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetAngularPositionDrive" );

	URB_ConstraintInstance_execSetAngularPositionDrive_Parms SetAngularPositionDrive_Parms;
	SetAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionDrive, &SetAngularPositionDrive_Parms, NULL );

	pFnSetAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearVelocityDrive = NULL;

	if ( ! pFnSetLinearVelocityDrive )
		pFnSetLinearVelocityDrive = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive" );

	URB_ConstraintInstance_execSetLinearVelocityDrive_Parms SetLinearVelocityDrive_Parms;
	SetLinearVelocityDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearVelocityDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearVelocityDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityDrive, &SetLinearVelocityDrive_Parms, NULL );

	pFnSetLinearVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearPositionDrive = NULL;

	if ( ! pFnSetLinearPositionDrive )
		pFnSetLinearPositionDrive = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.SetLinearPositionDrive" );

	URB_ConstraintInstance_execSetLinearPositionDrive_Parms SetLinearPositionDrive_Parms;
	SetLinearPositionDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearPositionDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearPositionDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionDrive, &SetLinearPositionDrive_Parms, NULL );

	pFnSetLinearPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_ConstraintInstance::GetConstraintLocation ( )
{
	static UFunction* pFnGetConstraintLocation = NULL;

	if ( ! pFnGetConstraintLocation )
		pFnGetConstraintLocation = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.GetConstraintLocation" );

	URB_ConstraintInstance_execGetConstraintLocation_Parms GetConstraintLocation_Parms;

	pFnGetConstraintLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetConstraintLocation, &GetConstraintLocation_Parms, NULL );

	pFnGetConstraintLocation->FunctionFlags |= 0x400;

	return GetConstraintLocation_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance" );

	URB_ConstraintInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void URB_ConstraintInstance::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.TermConstraint" );

	URB_ConstraintInstance_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.InitConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     PrimComp1                      ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     PrimComp2                      ( CPF_Parm | CPF_EditInline )
// class URB_ConstraintSetup*     Setup                          ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// class AActor*                  InOwner                        ( CPF_Parm )
// class UPrimitiveComponent*     InPrimComp                     ( CPF_Parm | CPF_EditInline )
// unsigned long                  bMakeKinForBody1               ( CPF_Parm )

void URB_ConstraintInstance::InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = UObject::FindObject< UFunction > ( "Function Engine.RB_ConstraintInstance.InitConstraint" );

	URB_ConstraintInstance_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.PrimComp1 = PrimComp1;
	InitConstraint_Parms.PrimComp2 = PrimComp2;
	InitConstraint_Parms.Setup = Setup;
	InitConstraint_Parms.Scale = Scale;
	InitConstraint_Parms.InOwner = InOwner;
	InitConstraint_Parms.InPrimComp = InPrimComp;
	InitConstraint_Parms.bMakeKinForBody1 = bMakeKinForBody1;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GetOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FQuat URB_Handle::GetOrientation ( )
{
	static UFunction* pFnGetOrientation = NULL;

	if ( ! pFnGetOrientation )
		pFnGetOrientation = UObject::FindObject< UFunction > ( "Function Engine.RB_Handle.GetOrientation" );

	URB_Handle_execGetOrientation_Parms GetOrientation_Parms;

	pFnGetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrientation, &GetOrientation_Parms, NULL );

	pFnGetOrientation->FunctionFlags |= 0x400;

	return GetOrientation_Parms.ReturnValue;
};

// Function Engine.RB_Handle.SetOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   NewOrientation                 ( CPF_Parm )

void URB_Handle::SetOrientation ( struct FQuat NewOrientation )
{
	static UFunction* pFnSetOrientation = NULL;

	if ( ! pFnSetOrientation )
		pFnSetOrientation = UObject::FindObject< UFunction > ( "Function Engine.RB_Handle.SetOrientation" );

	URB_Handle_execSetOrientation_Parms SetOrientation_Parms;
	memcpy ( &SetOrientation_Parms.NewOrientation, &NewOrientation, 0x10 );

	pFnSetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOrientation, &SetOrientation_Parms, NULL );

	pFnSetOrientation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.UpdateSmoothLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_Handle::UpdateSmoothLocation ( struct FVector* NewLocation )
{
	static UFunction* pFnUpdateSmoothLocation = NULL;

	if ( ! pFnUpdateSmoothLocation )
		pFnUpdateSmoothLocation = UObject::FindObject< UFunction > ( "Function Engine.RB_Handle.UpdateSmoothLocation" );

	URB_Handle_execUpdateSmoothLocation_Parms UpdateSmoothLocation_Parms;

	pFnUpdateSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSmoothLocation, &UpdateSmoothLocation_Parms, NULL );

	pFnUpdateSmoothLocation->FunctionFlags |= 0x400;

	if ( NewLocation )
		memcpy ( NewLocation, &UpdateSmoothLocation_Parms.NewLocation, 0xC );
};

// Function Engine.RB_Handle.SetSmoothLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// float                          MoveTime                       ( CPF_Parm )

void URB_Handle::SetSmoothLocation ( struct FVector NewLocation, float MoveTime )
{
	static UFunction* pFnSetSmoothLocation = NULL;

	if ( ! pFnSetSmoothLocation )
		pFnSetSmoothLocation = UObject::FindObject< UFunction > ( "Function Engine.RB_Handle.SetSmoothLocation" );

	URB_Handle_execSetSmoothLocation_Parms SetSmoothLocation_Parms;
	memcpy ( &SetSmoothLocation_Parms.NewLocation, &NewLocation, 0xC );
	SetSmoothLocation_Parms.MoveTime = MoveTime;

	pFnSetSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSmoothLocation, &SetSmoothLocation_Parms, NULL );

	pFnSetSmoothLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.SetLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )

void URB_Handle::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = UObject::FindObject< UFunction > ( "Function Engine.RB_Handle.SetLocation" );

	URB_Handle_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.ReleaseComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Handle::ReleaseComponent ( )
{
	static UFunction* pFnReleaseComponent = NULL;

	if ( ! pFnReleaseComponent )
		pFnReleaseComponent = UObject::FindObject< UFunction > ( "Function Engine.RB_Handle.ReleaseComponent" );

	URB_Handle_execReleaseComponent_Parms ReleaseComponent_Parms;

	pFnReleaseComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseComponent, &ReleaseComponent_Parms, NULL );

	pFnReleaseComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GrabComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName                     ( CPF_Parm )
// struct FVector                 GrabLocation                   ( CPF_Parm )
// unsigned long                  bConstrainRotation             ( CPF_Parm )

void URB_Handle::GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation )
{
	static UFunction* pFnGrabComponent = NULL;

	if ( ! pFnGrabComponent )
		pFnGrabComponent = UObject::FindObject< UFunction > ( "Function Engine.RB_Handle.GrabComponent" );

	URB_Handle_execGrabComponent_Parms GrabComponent_Parms;
	GrabComponent_Parms.Component = Component;
	memcpy ( &GrabComponent_Parms.InBoneName, &InBoneName, 0x8 );
	memcpy ( &GrabComponent_Parms.GrabLocation, &GrabLocation, 0xC );
	GrabComponent_Parms.bConstrainRotation = bConstrainRotation;

	pFnGrabComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGrabComponent, &GrabComponent_Parms, NULL );

	pFnGrabComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_LineImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.RB_LineImpulseActor.ReplicatedEvent" );

	ARB_LineImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_LineImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.RB_LineImpulseActor.OnToggle" );

	ARB_LineImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.FireLineImpulse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_LineImpulseActor::FireLineImpulse ( )
{
	static UFunction* pFnFireLineImpulse = NULL;

	if ( ! pFnFireLineImpulse )
		pFnFireLineImpulse = UObject::FindObject< UFunction > ( "Function Engine.RB_LineImpulseActor.FireLineImpulse" );

	ARB_LineImpulseActor_execFireLineImpulse_Parms FireLineImpulse_Parms;

	pFnFireLineImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireLineImpulse, &FireLineImpulse_Parms, NULL );

	pFnFireLineImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_RadialImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.RB_RadialImpulseActor.ReplicatedEvent" );

	ARB_RadialImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_RadialImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.RB_RadialImpulseActor.OnToggle" );

	ARB_RadialImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_RadialImpulseComponent.FireImpulse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )

void URB_RadialImpulseComponent::FireImpulse ( struct FVector Origin )
{
	static UFunction* pFnFireImpulse = NULL;

	if ( ! pFnFireImpulse )
		pFnFireImpulse = UObject::FindObject< UFunction > ( "Function Engine.RB_RadialImpulseComponent.FireImpulse" );

	URB_RadialImpulseComponent_execFireImpulse_Parms FireImpulse_Parms;
	memcpy ( &FireImpulse_Parms.Origin, &Origin, 0xC );

	pFnFireImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireImpulse, &FireImpulse_Parms, NULL );

	pFnFireImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.Clear
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Spring::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = UObject::FindObject< UFunction > ( "Function Engine.RB_Spring.Clear" );

	URB_Spring_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.SetComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     InComponent1                   ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName1                    ( CPF_Parm )
// struct FVector                 Position1                      ( CPF_Parm )
// class UPrimitiveComponent*     InComponent2                   ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName2                    ( CPF_Parm )
// struct FVector                 Position2                      ( CPF_Parm )

void URB_Spring::SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 )
{
	static UFunction* pFnSetComponents = NULL;

	if ( ! pFnSetComponents )
		pFnSetComponents = UObject::FindObject< UFunction > ( "Function Engine.RB_Spring.SetComponents" );

	URB_Spring_execSetComponents_Parms SetComponents_Parms;
	SetComponents_Parms.InComponent1 = InComponent1;
	memcpy ( &SetComponents_Parms.InBoneName1, &InBoneName1, 0x8 );
	memcpy ( &SetComponents_Parms.Position1, &Position1, 0xC );
	SetComponents_Parms.InComponent2 = InComponent2;
	memcpy ( &SetComponents_Parms.InBoneName2, &InBoneName2, 0x8 );
	memcpy ( &SetComponents_Parms.Position2, &Position2, 0xC );

	pFnSetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponents, &SetComponents_Parms, NULL );

	pFnSetComponents->FunctionFlags |= 0x400;
};

// Function Engine.RB_Thruster.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ARB_Thruster::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.RB_Thruster.OnToggle" );

	ARB_Thruster_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SVehicle.GetSVehicleDebug
// [0x00420102] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASVehicle::GetSVehicleDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetSVehicleDebug = NULL;

	if ( ! pFnGetSVehicleDebug )
		pFnGetSVehicleDebug = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.GetSVehicleDebug" );

	ASVehicle_execGetSVehicleDebug_Parms GetSVehicleDebug_Parms;

	this->ProcessEvent ( pFnGetSVehicleDebug, &GetSVehicleDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetSVehicleDebug_Parms.DebugInfo, 0xC );
};

// Function Engine.SVehicle.HermiteEval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Slip                           ( CPF_Parm )

float ASVehicle::HermiteEval ( float Slip )
{
	static UFunction* pFnHermiteEval = NULL;

	if ( ! pFnHermiteEval )
		pFnHermiteEval = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.HermiteEval" );

	ASVehicle_execHermiteEval_Parms HermiteEval_Parms;
	HermiteEval_Parms.Slip = Slip;

	this->ProcessEvent ( pFnHermiteEval, &HermiteEval_Parms, NULL );

	return HermiteEval_Parms.ReturnValue;
};

// Function Engine.SVehicle.DisplayWheelsDebug
// [0x00820102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm )

void ASVehicle::DisplayWheelsDebug ( class AHUD* HUD, float YL )
{
	static UFunction* pFnDisplayWheelsDebug = NULL;

	if ( ! pFnDisplayWheelsDebug )
		pFnDisplayWheelsDebug = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.DisplayWheelsDebug" );

	ASVehicle_execDisplayWheelsDebug_Parms DisplayWheelsDebug_Parms;
	DisplayWheelsDebug_Parms.HUD = HUD;
	DisplayWheelsDebug_Parms.YL = YL;

	this->ProcessEvent ( pFnDisplayWheelsDebug, &DisplayWheelsDebug_Parms, NULL );
};

// Function Engine.SVehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ASVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.DisplayDebug" );

	ASVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.SVehicle.PostTeleport
// [0x00020002] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void ASVehicle::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.PostTeleport" );

	ASVehicle_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.SVehicle.SuspensionHeavyShift
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASVehicle::eventSuspensionHeavyShift ( float Delta )
{
	static UFunction* pFnSuspensionHeavyShift = NULL;

	if ( ! pFnSuspensionHeavyShift )
		pFnSuspensionHeavyShift = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.SuspensionHeavyShift" );

	ASVehicle_eventSuspensionHeavyShift_Parms SuspensionHeavyShift_Parms;
	SuspensionHeavyShift_Parms.Delta = Delta;

	this->ProcessEvent ( pFnSuspensionHeavyShift, &SuspensionHeavyShift_Parms, NULL );
};

// Function Engine.SVehicle.RigidBodyCollision
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASVehicle::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.RigidBodyCollision" );

	ASVehicle_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function Engine.SVehicle.DrivingStatusChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASVehicle::eventDrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.DrivingStatusChanged" );

	ASVehicle_eventDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayExitSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayExitSound ( )
{
	static UFunction* pFnVehiclePlayExitSound = NULL;

	if ( ! pFnVehiclePlayExitSound )
		pFnVehiclePlayExitSound = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.VehiclePlayExitSound" );

	ASVehicle_execVehiclePlayExitSound_Parms VehiclePlayExitSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayExitSound, &VehiclePlayExitSound_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayEnterSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayEnterSound ( )
{
	static UFunction* pFnVehiclePlayEnterSound = NULL;

	if ( ! pFnVehiclePlayEnterSound )
		pFnVehiclePlayEnterSound = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.VehiclePlayEnterSound" );

	ASVehicle_execVehiclePlayEnterSound_Parms VehiclePlayEnterSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayEnterSound, &VehiclePlayEnterSound_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSoundTimed ( )
{
	static UFunction* pFnStopEngineSoundTimed = NULL;

	if ( ! pFnStopEngineSoundTimed )
		pFnStopEngineSoundTimed = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.StopEngineSoundTimed" );

	ASVehicle_execStopEngineSoundTimed_Parms StopEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStopEngineSoundTimed, &StopEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSound ( )
{
	static UFunction* pFnStopEngineSound = NULL;

	if ( ! pFnStopEngineSound )
		pFnStopEngineSound = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.StopEngineSound" );

	ASVehicle_execStopEngineSound_Parms StopEngineSound_Parms;

	this->ProcessEvent ( pFnStopEngineSound, &StopEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSoundTimed ( )
{
	static UFunction* pFnStartEngineSoundTimed = NULL;

	if ( ! pFnStartEngineSoundTimed )
		pFnStartEngineSoundTimed = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.StartEngineSoundTimed" );

	ASVehicle_execStartEngineSoundTimed_Parms StartEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStartEngineSoundTimed, &StartEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSound ( )
{
	static UFunction* pFnStartEngineSound = NULL;

	if ( ! pFnStartEngineSound )
		pFnStartEngineSound = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.StartEngineSound" );

	ASVehicle_execStartEngineSound_Parms StartEngineSound_Parms;

	this->ProcessEvent ( pFnStartEngineSound, &StartEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.HasWheelsOnGround
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASVehicle::HasWheelsOnGround ( )
{
	static UFunction* pFnHasWheelsOnGround = NULL;

	if ( ! pFnHasWheelsOnGround )
		pFnHasWheelsOnGround = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.HasWheelsOnGround" );

	ASVehicle_execHasWheelsOnGround_Parms HasWheelsOnGround_Parms;

	pFnHasWheelsOnGround->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasWheelsOnGround, &HasWheelsOnGround_Parms, NULL );

	pFnHasWheelsOnGround->FunctionFlags |= 0x400;

	return HasWheelsOnGround_Parms.ReturnValue;
};

// Function Engine.SVehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ASVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.TryToDrive" );

	ASVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.SVehicle.GetDefaultCameraMode
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName ASVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.GetDefaultCameraMode" );

	ASVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	pFnGetDefaultCameraMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	pFnGetDefaultCameraMode->FunctionFlags |= 0x400;

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.SVehicle.CalcCamera
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ASVehicle::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.CalcCamera" );

	ASVehicle_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	pFnCalcCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	pFnCalcCamera->FunctionFlags |= 0x400;

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.SVehicle.Died
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nWeaponType                    ( CPF_OptionalParm | CPF_Parm )

bool ASVehicle::eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nWeaponType )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.Died" );

	ASVehicle_eventDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );
	Died_Parms.nWeaponType = nWeaponType;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.SVehicle.AddVelocity
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void ASVehicle::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.AddVelocity" );

	ASVehicle_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.SVehicle.InitVehicleRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           RagdollMesh                    ( CPF_Parm )
// class UPhysicsAsset*           RagdollPhysAsset               ( CPF_Parm )
// struct FVector                 ActorMove                      ( CPF_Parm )

void ASVehicle::InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove )
{
	static UFunction* pFnInitVehicleRagdoll = NULL;

	if ( ! pFnInitVehicleRagdoll )
		pFnInitVehicleRagdoll = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.InitVehicleRagdoll" );

	ASVehicle_execInitVehicleRagdoll_Parms InitVehicleRagdoll_Parms;
	InitVehicleRagdoll_Parms.RagdollMesh = RagdollMesh;
	InitVehicleRagdoll_Parms.RagdollPhysAsset = RagdollPhysAsset;
	memcpy ( &InitVehicleRagdoll_Parms.ActorMove, &ActorMove, 0xC );

	pFnInitVehicleRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitVehicleRagdoll, &InitVehicleRagdoll_Parms, NULL );

	pFnInitVehicleRagdoll->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.TakeRadiusDamage
// [0x00820102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void ASVehicle::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.TakeRadiusDamage" );

	ASVehicle_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.SVehicle.StopVehicleSounds
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopVehicleSounds ( )
{
	static UFunction* pFnStopVehicleSounds = NULL;

	if ( ! pFnStopVehicleSounds )
		pFnStopVehicleSounds = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.StopVehicleSounds" );

	ASVehicle_execStopVehicleSounds_Parms StopVehicleSounds_Parms;

	this->ProcessEvent ( pFnStopVehicleSounds, &StopVehicleSounds_Parms, NULL );
};

// Function Engine.SVehicle.TurnOff
// [0x00020102] 
// Parameters infos:

void ASVehicle::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.TurnOff" );

	ASVehicle_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.SVehicle.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASVehicle::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.Destroyed" );

	ASVehicle_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SVehicle.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASVehicle::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.PostInitAnimTree" );

	ASVehicle_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.SVehicle.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASVehicle::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.PostBeginPlay" );

	ASVehicle_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SVehicle.SetWheelCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            WheelNum                       ( CPF_Parm )
// unsigned long                  bCollision                     ( CPF_Parm )

void ASVehicle::SetWheelCollision ( int WheelNum, unsigned long bCollision )
{
	static UFunction* pFnSetWheelCollision = NULL;

	if ( ! pFnSetWheelCollision )
		pFnSetWheelCollision = UObject::FindObject< UFunction > ( "Function Engine.SVehicle.SetWheelCollision" );

	ASVehicle_execSetWheelCollision_Parms SetWheelCollision_Parms;
	SetWheelCollision_Parms.WheelNum = WheelNum;
	SetWheelCollision_Parms.bCollision = bCollision;

	pFnSetWheelCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWheelCollision, &SetWheelCollision_Parms, NULL );

	pFnSetWheelCollision->FunctionFlags |= 0x400;
};

// Function Engine.SVehicleSimBase.GetLatAsymptoteValue
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLatAsymptoteValue ( )
{
	static UFunction* pFnGetLatAsymptoteValue = NULL;

	if ( ! pFnGetLatAsymptoteValue )
		pFnGetLatAsymptoteValue = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLatAsymptoteValue" );

	USVehicleSimBase_execGetLatAsymptoteValue_Parms GetLatAsymptoteValue_Parms;

	this->ProcessEvent ( pFnGetLatAsymptoteValue, &GetLatAsymptoteValue_Parms, NULL );

	return GetLatAsymptoteValue_Parms.ReturnValue;
};

// Function Engine.SVehicleSimBase.GetLatAsymptoteSlip
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLatAsymptoteSlip ( )
{
	static UFunction* pFnGetLatAsymptoteSlip = NULL;

	if ( ! pFnGetLatAsymptoteSlip )
		pFnGetLatAsymptoteSlip = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLatAsymptoteSlip" );

	USVehicleSimBase_execGetLatAsymptoteSlip_Parms GetLatAsymptoteSlip_Parms;

	this->ProcessEvent ( pFnGetLatAsymptoteSlip, &GetLatAsymptoteSlip_Parms, NULL );

	return GetLatAsymptoteSlip_Parms.ReturnValue;
};

// Function Engine.SVehicleSimBase.GetLatExtremumValue
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLatExtremumValue ( )
{
	static UFunction* pFnGetLatExtremumValue = NULL;

	if ( ! pFnGetLatExtremumValue )
		pFnGetLatExtremumValue = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLatExtremumValue" );

	USVehicleSimBase_execGetLatExtremumValue_Parms GetLatExtremumValue_Parms;

	this->ProcessEvent ( pFnGetLatExtremumValue, &GetLatExtremumValue_Parms, NULL );

	return GetLatExtremumValue_Parms.ReturnValue;
};

// Function Engine.SVehicleSimBase.GetLatExtremumSlip
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLatExtremumSlip ( )
{
	static UFunction* pFnGetLatExtremumSlip = NULL;

	if ( ! pFnGetLatExtremumSlip )
		pFnGetLatExtremumSlip = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLatExtremumSlip" );

	USVehicleSimBase_execGetLatExtremumSlip_Parms GetLatExtremumSlip_Parms;

	this->ProcessEvent ( pFnGetLatExtremumSlip, &GetLatExtremumSlip_Parms, NULL );

	return GetLatExtremumSlip_Parms.ReturnValue;
};

// Function Engine.SVehicleSimBase.GetLongAsymptoteValue
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLongAsymptoteValue ( )
{
	static UFunction* pFnGetLongAsymptoteValue = NULL;

	if ( ! pFnGetLongAsymptoteValue )
		pFnGetLongAsymptoteValue = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLongAsymptoteValue" );

	USVehicleSimBase_execGetLongAsymptoteValue_Parms GetLongAsymptoteValue_Parms;

	this->ProcessEvent ( pFnGetLongAsymptoteValue, &GetLongAsymptoteValue_Parms, NULL );

	return GetLongAsymptoteValue_Parms.ReturnValue;
};

// Function Engine.SVehicleSimBase.GetLongAsymptoteSlip
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLongAsymptoteSlip ( )
{
	static UFunction* pFnGetLongAsymptoteSlip = NULL;

	if ( ! pFnGetLongAsymptoteSlip )
		pFnGetLongAsymptoteSlip = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLongAsymptoteSlip" );

	USVehicleSimBase_execGetLongAsymptoteSlip_Parms GetLongAsymptoteSlip_Parms;

	this->ProcessEvent ( pFnGetLongAsymptoteSlip, &GetLongAsymptoteSlip_Parms, NULL );

	return GetLongAsymptoteSlip_Parms.ReturnValue;
};

// Function Engine.SVehicleSimBase.GetLongExtremumValue
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLongExtremumValue ( )
{
	static UFunction* pFnGetLongExtremumValue = NULL;

	if ( ! pFnGetLongExtremumValue )
		pFnGetLongExtremumValue = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLongExtremumValue" );

	USVehicleSimBase_execGetLongExtremumValue_Parms GetLongExtremumValue_Parms;

	this->ProcessEvent ( pFnGetLongExtremumValue, &GetLongExtremumValue_Parms, NULL );

	return GetLongExtremumValue_Parms.ReturnValue;
};

// Function Engine.SVehicleSimBase.GetLongExtremumSlip
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleSimBase::GetLongExtremumSlip ( )
{
	static UFunction* pFnGetLongExtremumSlip = NULL;

	if ( ! pFnGetLongExtremumSlip )
		pFnGetLongExtremumSlip = UObject::FindObject< UFunction > ( "Function Engine.SVehicleSimBase.GetLongExtremumSlip" );

	USVehicleSimBase_execGetLongExtremumSlip_Parms GetLongExtremumSlip_Parms;

	this->ProcessEvent ( pFnGetLongExtremumSlip, &GetLongExtremumSlip_Parms, NULL );

	return GetLongExtremumSlip_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetParkedSlipFactor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetParkedSlipFactor ( )
{
	static UFunction* pFnGetParkedSlipFactor = NULL;

	if ( ! pFnGetParkedSlipFactor )
		pFnGetParkedSlipFactor = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetParkedSlipFactor" );

	USVehicleWheel_execGetParkedSlipFactor_Parms GetParkedSlipFactor_Parms;

	this->ProcessEvent ( pFnGetParkedSlipFactor, &GetParkedSlipFactor_Parms, NULL );

	return GetParkedSlipFactor_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetHandbrakeLatSlipFactor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetHandbrakeLatSlipFactor ( )
{
	static UFunction* pFnGetHandbrakeLatSlipFactor = NULL;

	if ( ! pFnGetHandbrakeLatSlipFactor )
		pFnGetHandbrakeLatSlipFactor = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetHandbrakeLatSlipFactor" );

	USVehicleWheel_execGetHandbrakeLatSlipFactor_Parms GetHandbrakeLatSlipFactor_Parms;

	this->ProcessEvent ( pFnGetHandbrakeLatSlipFactor, &GetHandbrakeLatSlipFactor_Parms, NULL );

	return GetHandbrakeLatSlipFactor_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetHandbrakeLongSlipFactor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetHandbrakeLongSlipFactor ( )
{
	static UFunction* pFnGetHandbrakeLongSlipFactor = NULL;

	if ( ! pFnGetHandbrakeLongSlipFactor )
		pFnGetHandbrakeLongSlipFactor = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetHandbrakeLongSlipFactor" );

	USVehicleWheel_execGetHandbrakeLongSlipFactor_Parms GetHandbrakeLongSlipFactor_Parms;

	this->ProcessEvent ( pFnGetHandbrakeLongSlipFactor, &GetHandbrakeLongSlipFactor_Parms, NULL );

	return GetHandbrakeLongSlipFactor_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetLatSlipFactor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetLatSlipFactor ( )
{
	static UFunction* pFnGetLatSlipFactor = NULL;

	if ( ! pFnGetLatSlipFactor )
		pFnGetLatSlipFactor = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetLatSlipFactor" );

	USVehicleWheel_execGetLatSlipFactor_Parms GetLatSlipFactor_Parms;

	this->ProcessEvent ( pFnGetLatSlipFactor, &GetLatSlipFactor_Parms, NULL );

	return GetLatSlipFactor_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetLongSlipFactor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetLongSlipFactor ( )
{
	static UFunction* pFnGetLongSlipFactor = NULL;

	if ( ! pFnGetLongSlipFactor )
		pFnGetLongSlipFactor = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetLongSlipFactor" );

	USVehicleWheel_execGetLongSlipFactor_Parms GetLongSlipFactor_Parms;

	this->ProcessEvent ( pFnGetLongSlipFactor, &GetLongSlipFactor_Parms, NULL );

	return GetLongSlipFactor_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetSuspensionTravel
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetSuspensionTravel ( )
{
	static UFunction* pFnGetSuspensionTravel = NULL;

	if ( ! pFnGetSuspensionTravel )
		pFnGetSuspensionTravel = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetSuspensionTravel" );

	USVehicleWheel_execGetSuspensionTravel_Parms GetSuspensionTravel_Parms;

	this->ProcessEvent ( pFnGetSuspensionTravel, &GetSuspensionTravel_Parms, NULL );

	return GetSuspensionTravel_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetWheelRadius
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetWheelRadius ( )
{
	static UFunction* pFnGetWheelRadius = NULL;

	if ( ! pFnGetWheelRadius )
		pFnGetWheelRadius = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetWheelRadius" );

	USVehicleWheel_execGetWheelRadius_Parms GetWheelRadius_Parms;

	this->ProcessEvent ( pFnGetWheelRadius, &GetWheelRadius_Parms, NULL );

	return GetWheelRadius_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetChassisTorque
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetChassisTorque ( )
{
	static UFunction* pFnGetChassisTorque = NULL;

	if ( ! pFnGetChassisTorque )
		pFnGetChassisTorque = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetChassisTorque" );

	USVehicleWheel_execGetChassisTorque_Parms GetChassisTorque_Parms;

	this->ProcessEvent ( pFnGetChassisTorque, &GetChassisTorque_Parms, NULL );

	return GetChassisTorque_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetBrakeTorque
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetBrakeTorque ( )
{
	static UFunction* pFnGetBrakeTorque = NULL;

	if ( ! pFnGetBrakeTorque )
		pFnGetBrakeTorque = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetBrakeTorque" );

	USVehicleWheel_execGetBrakeTorque_Parms GetBrakeTorque_Parms;

	this->ProcessEvent ( pFnGetBrakeTorque, &GetBrakeTorque_Parms, NULL );

	return GetBrakeTorque_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetMotorTorque
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetMotorTorque ( )
{
	static UFunction* pFnGetMotorTorque = NULL;

	if ( ! pFnGetMotorTorque )
		pFnGetMotorTorque = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetMotorTorque" );

	USVehicleWheel_execGetMotorTorque_Parms GetMotorTorque_Parms;

	this->ProcessEvent ( pFnGetMotorTorque, &GetMotorTorque_Parms, NULL );

	return GetMotorTorque_Parms.ReturnValue;
};

// Function Engine.SVehicleWheel.GetSteerValue
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USVehicleWheel::GetSteerValue ( )
{
	static UFunction* pFnGetSteerValue = NULL;

	if ( ! pFnGetSteerValue )
		pFnGetSteerValue = UObject::FindObject< UFunction > ( "Function Engine.SVehicleWheel.GetSteerValue" );

	USVehicleWheel_execGetSteerValue_Parms GetSteerValue_Parms;

	this->ProcessEvent ( pFnGetSteerValue, &GetSteerValue_Parms, NULL );

	return GetSteerValue_Parms.ReturnValue;
};

// Function Engine.ForceFieldShape.GetDrawComponent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShape::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShape.GetDrawComponent" );

	UForceFieldShape_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShape.FillByCylinder
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShape::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShape.FillByCylinder" );

	UForceFieldShape_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByCapsule
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShape.FillByCapsule" );

	UForceFieldShape_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByBox
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Dimension                      ( CPF_Parm )

void UForceFieldShape::eventFillByBox ( struct FVector Dimension )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShape.FillByBox" );

	UForceFieldShape_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Dimension, &Dimension, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillBySphere
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShape.FillBySphere" );

	UForceFieldShape_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeBox::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeBox.GetDrawComponent" );

	UForceFieldShapeBox_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeBox.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeBox.FillByCylinder" );

	UForceFieldShapeBox_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeBox.FillByCapsule" );

	UForceFieldShapeBox_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeBox.FillByBox" );

	UForceFieldShapeBox_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeBox.FillBySphere" );

	UForceFieldShapeBox_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetRadii
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UForceFieldShapeBox::eventGetRadii ( )
{
	static UFunction* pFnGetRadii = NULL;

	if ( ! pFnGetRadii )
		pFnGetRadii = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeBox.GetRadii" );

	UForceFieldShapeBox_eventGetRadii_Parms GetRadii_Parms;

	this->ProcessEvent ( pFnGetRadii, &GetRadii_Parms, NULL );

	return GetRadii_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeCapsule::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeCapsule.GetDrawComponent" );

	UForceFieldShapeCapsule_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeCapsule.FillByCylinder" );

	UForceFieldShapeCapsule_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeCapsule.FillByCapsule" );

	UForceFieldShapeCapsule_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeCapsule.FillByBox" );

	UForceFieldShapeCapsule_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeCapsule.FillBySphere" );

	UForceFieldShapeCapsule_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeCapsule.GetRadius" );

	UForceFieldShapeCapsule_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetHeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetHeight ( )
{
	static UFunction* pFnGetHeight = NULL;

	if ( ! pFnGetHeight )
		pFnGetHeight = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeCapsule.GetHeight" );

	UForceFieldShapeCapsule_eventGetHeight_Parms GetHeight_Parms;

	this->ProcessEvent ( pFnGetHeight, &GetHeight_Parms, NULL );

	return GetHeight_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeSphere::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeSphere.GetDrawComponent" );

	UForceFieldShapeSphere_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeSphere.FillByCylinder" );

	UForceFieldShapeSphere_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeSphere.FillByCapsule" );

	UForceFieldShapeSphere_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeSphere.FillByBox" );

	UForceFieldShapeSphere_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeSphere.FillBySphere" );

	UForceFieldShapeSphere_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeSphere::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = UObject::FindObject< UFunction > ( "Function Engine.ForceFieldShapeSphere.GetRadius" );

	UForceFieldShapeSphere_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.NxForceField.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANxForceField::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.NxForceField.OnToggle" );

	ANxForceField_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NxGenericForceFieldBrush.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ANxGenericForceFieldBrush::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = UObject::FindObject< UFunction > ( "Function Engine.NxGenericForceFieldBrush.StopsProjectile" );

	ANxGenericForceFieldBrush_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.NxGenericForceFieldBrush.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANxGenericForceFieldBrush::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.NxGenericForceFieldBrush.PostBeginPlay" );

	ANxGenericForceFieldBrush_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.RB_CylindricalForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_CylindricalForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.RB_CylindricalForceActor.OnToggle" );

	ARB_CylindricalForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_RadialForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.RB_RadialForceActor.OnToggle" );

	ARB_RadialForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.cActorProxiesManager.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AcActorProxiesManager::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.cActorProxiesManager.ReplicatedEvent" );

	AcActorProxiesManager_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.cActorProxiesManager.SetParameters
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FStProxiesManagerParams newParams                      ( CPF_Parm )

void AcActorProxiesManager::SetParameters ( struct FStProxiesManagerParams newParams )
{
	static UFunction* pFnSetParameters = NULL;

	if ( ! pFnSetParameters )
		pFnSetParameters = UObject::FindObject< UFunction > ( "Function Engine.cActorProxiesManager.SetParameters" );

	AcActorProxiesManager_execSetParameters_Parms SetParameters_Parms;
	memcpy ( &SetParameters_Parms.newParams, &newParams, 0x18 );

	pFnSetParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParameters, &SetParameters_Parms, NULL );

	pFnSetParameters->FunctionFlags |= 0x400;
};

// Function Engine.cActorProxiesManager.CreateProxy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  pActor                         ( CPF_Parm )

void AcActorProxiesManager::CreateProxy ( class AActor* pActor )
{
	static UFunction* pFnCreateProxy = NULL;

	if ( ! pFnCreateProxy )
		pFnCreateProxy = UObject::FindObject< UFunction > ( "Function Engine.cActorProxiesManager.CreateProxy" );

	AcActorProxiesManager_execCreateProxy_Parms CreateProxy_Parms;
	CreateProxy_Parms.pActor = pActor;

	pFnCreateProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateProxy, &CreateProxy_Parms, NULL );

	pFnCreateProxy->FunctionFlags |= 0x400;
};

// Function Engine.PrefabInstance.InstancePrefab
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrefab*                 InPrefab                       ( CPF_Parm )
// TArray< struct FstReplacement > aReplacements                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APrefabInstance::InstancePrefab ( class UPrefab* InPrefab, TArray< struct FstReplacement > aReplacements )
{
	static UFunction* pFnInstancePrefab = NULL;

	if ( ! pFnInstancePrefab )
		pFnInstancePrefab = UObject::FindObject< UFunction > ( "Function Engine.PrefabInstance.InstancePrefab" );

	APrefabInstance_execInstancePrefab_Parms InstancePrefab_Parms;
	InstancePrefab_Parms.InPrefab = InPrefab;
	memcpy ( &InstancePrefab_Parms.aReplacements, &aReplacements, 0xC );

	pFnInstancePrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstancePrefab, &InstancePrefab_Parms, NULL );

	pFnInstancePrefab->FunctionFlags |= 0x400;
};

// Function Engine.SequenceObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USequenceObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SequenceObject.GetObjClassVersion" );

	USequenceObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = UObject::FindObject< UFunction > ( "Function Engine.SequenceObject.IsPastingIntoUISequenceAllowed" );

	USequenceObject_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceObject::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SequenceObject.IsValidUISequenceObject" );

	USequenceObject_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsPastingIntoLevelSequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoLevelSequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoLevelSequenceAllowed )
		pFnIsPastingIntoLevelSequenceAllowed = UObject::FindObject< UFunction > ( "Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed" );

	USequenceObject_eventIsPastingIntoLevelSequenceAllowed_Parms IsPastingIntoLevelSequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoLevelSequenceAllowed, &IsPastingIntoLevelSequenceAllowed_Parms, NULL );

	return IsPastingIntoLevelSequenceAllowed_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SequenceObject.IsValidLevelSequenceObject" );

	USequenceObject_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceObject.GetWorldInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* USequenceObject::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = UObject::FindObject< UFunction > ( "Function Engine.SequenceObject.GetWorldInfo" );

	USequenceObject_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.SequenceObject.ScriptLog
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 LogText                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWarning                       ( CPF_OptionalParm | CPF_Parm )

void USequenceObject::ScriptLog ( struct FString LogText, unsigned long bWarning )
{
	static UFunction* pFnScriptLog = NULL;

	if ( ! pFnScriptLog )
		pFnScriptLog = UObject::FindObject< UFunction > ( "Function Engine.SequenceObject.ScriptLog" );

	USequenceObject_execScriptLog_Parms ScriptLog_Parms;
	memcpy ( &ScriptLog_Parms.LogText, &LogText, 0xC );
	ScriptLog_Parms.bWarning = bWarning;

	pFnScriptLog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScriptLog, &ScriptLog_Parms, NULL );

	pFnScriptLog->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.GetController
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class AController* USequenceOp::GetController ( class AActor* TheActor )
{
	static UFunction* pFnGetController = NULL;

	if ( ! pFnGetController )
		pFnGetController = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.GetController" );

	USequenceOp_execGetController_Parms GetController_Parms;
	GetController_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetController, &GetController_Parms, NULL );

	return GetController_Parms.ReturnValue;
};

// Function Engine.SequenceOp.GetPawn
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class APawn* USequenceOp::GetPawn ( class AActor* TheActor )
{
	static UFunction* pFnGetPawn = NULL;

	if ( ! pFnGetPawn )
		pFnGetPawn = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.GetPawn" );

	USequenceOp_execGetPawn_Parms GetPawn_Parms;
	GetPawn_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetPawn, &GetPawn_Parms, NULL );

	return GetPawn_Parms.ReturnValue;
};

// Function Engine.SequenceOp.Reset
// [0x00020000] 
// Parameters infos:

void USequenceOp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.Reset" );

	USequenceOp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceOp.PublishLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PublishLinkedVariableValues ( )
{
	static UFunction* pFnPublishLinkedVariableValues = NULL;

	if ( ! pFnPublishLinkedVariableValues )
		pFnPublishLinkedVariableValues = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.PublishLinkedVariableValues" );

	USequenceOp_execPublishLinkedVariableValues_Parms PublishLinkedVariableValues_Parms;

	pFnPublishLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPublishLinkedVariableValues, &PublishLinkedVariableValues_Parms, NULL );

	pFnPublishLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.PopulateLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PopulateLinkedVariableValues ( )
{
	static UFunction* pFnPopulateLinkedVariableValues = NULL;

	if ( ! pFnPopulateLinkedVariableValues )
		pFnPopulateLinkedVariableValues = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.PopulateLinkedVariableValues" );

	USequenceOp_execPopulateLinkedVariableValues_Parms PopulateLinkedVariableValues_Parms;

	pFnPopulateLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateLinkedVariableValues, &PopulateLinkedVariableValues_Parms, NULL );

	pFnPopulateLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.VersionUpdated
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USequenceOp::eventVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.VersionUpdated" );

	USequenceOp_eventVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.SequenceOp.Deactivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.Deactivated" );

	USequenceOp_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function Engine.SequenceOp.Activated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.Activated" );

	USequenceOp_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SequenceOp.ActivateOutputLink
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OutputIdx                      ( CPF_Parm )

bool USequenceOp::ActivateOutputLink ( int OutputIdx )
{
	static UFunction* pFnActivateOutputLink = NULL;

	if ( ! pFnActivateOutputLink )
		pFnActivateOutputLink = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.ActivateOutputLink" );

	USequenceOp_execActivateOutputLink_Parms ActivateOutputLink_Parms;
	ActivateOutputLink_Parms.OutputIdx = OutputIdx;

	pFnActivateOutputLink->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateOutputLink, &ActivateOutputLink_Parms, NULL );

	pFnActivateOutputLink->FunctionFlags |= 0x400;

	return ActivateOutputLink_Parms.ReturnValue;
};

// Function Engine.SequenceOp.LinkedVariables
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  VarClass                       ( CPF_Parm )
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// class USequenceVariable*       OutVariable                    ( CPF_Parm | CPF_OutParm )

void USequenceOp::LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable )
{
	static UFunction* pFnLinkedVariables = NULL;

	if ( ! pFnLinkedVariables )
		pFnLinkedVariables = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.LinkedVariables" );

	USequenceOp_execLinkedVariables_Parms LinkedVariables_Parms;
	LinkedVariables_Parms.VarClass = VarClass;
	memcpy ( &LinkedVariables_Parms.inDesc, &inDesc, 0xC );

	pFnLinkedVariables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLinkedVariables, &LinkedVariables_Parms, NULL );

	pFnLinkedVariables->FunctionFlags |= 0x400;

	if ( OutVariable )
		*OutVariable = LinkedVariables_Parms.OutVariable;
};

// Function Engine.SequenceOp.GetBoolVars
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        boolVars                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars )
{
	static UFunction* pFnGetBoolVars = NULL;

	if ( ! pFnGetBoolVars )
		pFnGetBoolVars = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.GetBoolVars" );

	USequenceOp_execGetBoolVars_Parms GetBoolVars_Parms;
	memcpy ( &GetBoolVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetBoolVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoolVars, &GetBoolVars_Parms, NULL );

	pFnGetBoolVars->FunctionFlags |= 0x400;

	if ( boolVars )
		memcpy ( boolVars, &GetBoolVars_Parms.boolVars, 0xC );
};

// Function Engine.SequenceOp.GetInterpDataVars
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< class UInterpData* >   outIData                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData )
{
	static UFunction* pFnGetInterpDataVars = NULL;

	if ( ! pFnGetInterpDataVars )
		pFnGetInterpDataVars = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.GetInterpDataVars" );

	USequenceOp_execGetInterpDataVars_Parms GetInterpDataVars_Parms;
	memcpy ( &GetInterpDataVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetInterpDataVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInterpDataVars, &GetInterpDataVars_Parms, NULL );

	pFnGetInterpDataVars->FunctionFlags |= 0x400;

	if ( outIData )
		memcpy ( outIData, &GetInterpDataVars_Parms.outIData, 0xC );
};

// Function Engine.SequenceOp.GetObjectVars
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< class UObject* >       objVars                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars )
{
	static UFunction* pFnGetObjectVars = NULL;

	if ( ! pFnGetObjectVars )
		pFnGetObjectVars = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.GetObjectVars" );

	USequenceOp_execGetObjectVars_Parms GetObjectVars_Parms;
	memcpy ( &GetObjectVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetObjectVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectVars, &GetObjectVars_Parms, NULL );

	pFnGetObjectVars->FunctionFlags |= 0x400;

	if ( objVars )
		memcpy ( objVars, &GetObjectVars_Parms.objVars, 0xC );
};

// Function Engine.SequenceOp.GetLinkedObjects
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  ObjectType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceObject* > out_Objects                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects )
{
	static UFunction* pFnGetLinkedObjects = NULL;

	if ( ! pFnGetLinkedObjects )
		pFnGetLinkedObjects = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.GetLinkedObjects" );

	USequenceOp_execGetLinkedObjects_Parms GetLinkedObjects_Parms;
	GetLinkedObjects_Parms.ObjectType = ObjectType;
	GetLinkedObjects_Parms.bRecurse = bRecurse;

	pFnGetLinkedObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLinkedObjects, &GetLinkedObjects_Parms, NULL );

	pFnGetLinkedObjects->FunctionFlags |= 0x400;

	if ( out_Objects )
		memcpy ( out_Objects, &GetLinkedObjects_Parms.out_Objects, 0xC );
};

// Function Engine.SequenceOp.HasLinkedOps
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bConsiderInputLinks            ( CPF_OptionalParm | CPF_Parm )

bool USequenceOp::HasLinkedOps ( unsigned long bConsiderInputLinks )
{
	static UFunction* pFnHasLinkedOps = NULL;

	if ( ! pFnHasLinkedOps )
		pFnHasLinkedOps = UObject::FindObject< UFunction > ( "Function Engine.SequenceOp.HasLinkedOps" );

	USequenceOp_execHasLinkedOps_Parms HasLinkedOps_Parms;
	HasLinkedOps_Parms.bConsiderInputLinks = bConsiderInputLinks;

	pFnHasLinkedOps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasLinkedOps, &HasLinkedOps_Parms, NULL );

	pFnHasLinkedOps->FunctionFlags |= 0x400;

	return HasLinkedOps_Parms.ReturnValue;
};

// Function Engine.cSocketAttachment.InitSocket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  newLinkedActor                 ( CPF_Parm )
// class USkeletalMeshComponent*  newSkelComp                    ( CPF_Parm | CPF_EditInline )
// struct FName                   newLinkedBone                  ( CPF_Parm )

void UcSocketAttachment::InitSocket ( class AActor* newLinkedActor, class USkeletalMeshComponent* newSkelComp, struct FName newLinkedBone )
{
	static UFunction* pFnInitSocket = NULL;

	if ( ! pFnInitSocket )
		pFnInitSocket = UObject::FindObject< UFunction > ( "Function Engine.cSocketAttachment.InitSocket" );

	UcSocketAttachment_execInitSocket_Parms InitSocket_Parms;
	InitSocket_Parms.newLinkedActor = newLinkedActor;
	InitSocket_Parms.newSkelComp = newSkelComp;
	memcpy ( &InitSocket_Parms.newLinkedBone, &newLinkedBone, 0x8 );

	pFnInitSocket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSocket, &InitSocket_Parms, NULL );

	pFnInitSocket->FunctionFlags |= 0x400;
};

// Function Engine.SequenceVariable.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceVariable::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SequenceVariable.IsValidUISequenceObject" );

	USequenceVariable_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.Sequence.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void USequence::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function Engine.Sequence.SetEnabled" );

	USequence_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.Sequence.Reset
// [0x00020002] 
// Parameters infos:

void USequence::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.Sequence.Reset" );

	USequence_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Sequence.FindSeqObjectsByClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bRecursive                     ( CPF_Parm )
// TArray< class USequenceObject* > OutputObjects                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequence::FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, TArray< class USequenceObject* >* OutputObjects )
{
	static UFunction* pFnFindSeqObjectsByClass = NULL;

	if ( ! pFnFindSeqObjectsByClass )
		pFnFindSeqObjectsByClass = UObject::FindObject< UFunction > ( "Function Engine.Sequence.FindSeqObjectsByClass" );

	USequence_execFindSeqObjectsByClass_Parms FindSeqObjectsByClass_Parms;
	FindSeqObjectsByClass_Parms.DesiredClass = DesiredClass;
	FindSeqObjectsByClass_Parms.bRecursive = bRecursive;

	pFnFindSeqObjectsByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSeqObjectsByClass, &FindSeqObjectsByClass_Parms, NULL );

	pFnFindSeqObjectsByClass->FunctionFlags |= 0x400;

	if ( OutputObjects )
		memcpy ( OutputObjects, &FindSeqObjectsByClass_Parms.OutputObjects, 0xC );
};

// Function Engine.PrefabSequence.GetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APrefabInstance* UPrefabSequence::GetOwnerPrefab ( )
{
	static UFunction* pFnGetOwnerPrefab = NULL;

	if ( ! pFnGetOwnerPrefab )
		pFnGetOwnerPrefab = UObject::FindObject< UFunction > ( "Function Engine.PrefabSequence.GetOwnerPrefab" );

	UPrefabSequence_execGetOwnerPrefab_Parms GetOwnerPrefab_Parms;

	pFnGetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerPrefab, &GetOwnerPrefab_Parms, NULL );

	pFnGetOwnerPrefab->FunctionFlags |= 0x400;

	return GetOwnerPrefab_Parms.ReturnValue;
};

// Function Engine.PrefabSequence.SetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         InOwner                        ( CPF_Parm )

void UPrefabSequence::SetOwnerPrefab ( class APrefabInstance* InOwner )
{
	static UFunction* pFnSetOwnerPrefab = NULL;

	if ( ! pFnSetOwnerPrefab )
		pFnSetOwnerPrefab = UObject::FindObject< UFunction > ( "Function Engine.PrefabSequence.SetOwnerPrefab" );

	UPrefabSequence_execSetOwnerPrefab_Parms SetOwnerPrefab_Parms;
	SetOwnerPrefab_Parms.InOwner = InOwner;

	pFnSetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerPrefab, &SetOwnerPrefab_Parms, NULL );

	pFnSetOwnerPrefab->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActivateRemoteEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion" );

	USeqAct_ActivateRemoteEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USeqAct_Latent::eventUpdate ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Latent.Update" );

	USeqAct_Latent_eventUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	return Update_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.AbortFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  latentActor                    ( CPF_Parm )

void USeqAct_Latent::AbortFor ( class AActor* latentActor )
{
	static UFunction* pFnAbortFor = NULL;

	if ( ! pFnAbortFor )
		pFnAbortFor = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Latent.AbortFor" );

	USeqAct_Latent_execAbortFor_Parms AbortFor_Parms;
	AbortFor_Parms.latentActor = latentActor;

	pFnAbortFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbortFor, &AbortFor_Parms, NULL );

	pFnAbortFor->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ActorFactory.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActorFactory::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ActorFactory.GetObjClassVersion" );

	USeqAct_ActorFactory_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_SetSequenceVariable::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject" );

	USeqAct_SetSequenceVariable_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AIMoveToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion" );

	USeqAct_AIMoveToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraLookAt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CameraLookAt.GetObjClassVersion" );

	USeqAct_CameraLookAt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CauseDamage.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CauseDamage::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CauseDamage.GetObjClassVersion" );

	USeqAct_CauseDamage_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CauseDamageRadial.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CauseDamageRadial::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CauseDamageRadial.GetObjClassVersion" );

	USeqAct_CauseDamageRadial_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ChangeCollision::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ChangeCollision.GetObjClassVersion" );

	USeqAct_ChangeCollision_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CrossFadeMusicTracks.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CrossFadeMusicTracks::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CrossFadeMusicTracks.GetObjClassVersion" );

	USeqAct_CrossFadeMusicTracks_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CrossFadeMusicTracks.StopAllMusicManagerSounds
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void USeqAct_CrossFadeMusicTracks::StopAllMusicManagerSounds ( )
{
	static UFunction* pFnStopAllMusicManagerSounds = NULL;

	if ( ! pFnStopAllMusicManagerSounds )
		pFnStopAllMusicManagerSounds = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CrossFadeMusicTracks.StopAllMusicManagerSounds" );

	USeqAct_CrossFadeMusicTracks_execStopAllMusicManagerSounds_Parms StopAllMusicManagerSounds_Parms;

	pFnStopAllMusicManagerSounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllMusicManagerSounds, &StopAllMusicManagerSounds_Parms, NULL );

	pFnStopAllMusicManagerSounds->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_CrossFadeMusicTracks.ClientSideCrossFadeTrackImmediately
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMusicTrackStruct       TrackToPlay                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void USeqAct_CrossFadeMusicTracks::ClientSideCrossFadeTrackImmediately ( struct FMusicTrackStruct* TrackToPlay )
{
	static UFunction* pFnClientSideCrossFadeTrackImmediately = NULL;

	if ( ! pFnClientSideCrossFadeTrackImmediately )
		pFnClientSideCrossFadeTrackImmediately = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CrossFadeMusicTracks.ClientSideCrossFadeTrackImmediately" );

	USeqAct_CrossFadeMusicTracks_execClientSideCrossFadeTrackImmediately_Parms ClientSideCrossFadeTrackImmediately_Parms;

	pFnClientSideCrossFadeTrackImmediately->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientSideCrossFadeTrackImmediately, &ClientSideCrossFadeTrackImmediately_Parms, NULL );

	pFnClientSideCrossFadeTrackImmediately->FunctionFlags |= 0x400;

	if ( TrackToPlay )
		memcpy ( TrackToPlay, &ClientSideCrossFadeTrackImmediately_Parms.TrackToPlay, 0x24 );
};

// Function Engine.SeqAct_CrossFadeMusicTracks.CrossFadeTrack
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMusicTrackStruct       TrackToPlay                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void USeqAct_CrossFadeMusicTracks::CrossFadeTrack ( struct FMusicTrackStruct* TrackToPlay )
{
	static UFunction* pFnCrossFadeTrack = NULL;

	if ( ! pFnCrossFadeTrack )
		pFnCrossFadeTrack = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CrossFadeMusicTracks.CrossFadeTrack" );

	USeqAct_CrossFadeMusicTracks_execCrossFadeTrack_Parms CrossFadeTrack_Parms;

	pFnCrossFadeTrack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCrossFadeTrack, &CrossFadeTrack_Parms, NULL );

	pFnCrossFadeTrack->FunctionFlags |= 0x400;

	if ( TrackToPlay )
		memcpy ( TrackToPlay, &CrossFadeTrack_Parms.TrackToPlay, 0x24 );
};

// Function Engine.SeqAct_CrowdSpawner.SpawnAgent
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class ACrowdAgent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  SpawnLoc                       ( CPF_Parm )

class ACrowdAgent* USeqAct_CrowdSpawner::eventSpawnAgent ( class AActor* SpawnLoc )
{
	static UFunction* pFnSpawnAgent = NULL;

	if ( ! pFnSpawnAgent )
		pFnSpawnAgent = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_CrowdSpawner.SpawnAgent" );

	USeqAct_CrowdSpawner_eventSpawnAgent_Parms SpawnAgent_Parms;
	SpawnAgent_Parms.SpawnLoc = SpawnLoc;

	this->ProcessEvent ( pFnSpawnAgent, &SpawnAgent_Parms, NULL );

	return SpawnAgent_Parms.ReturnValue;
};

// Function Engine.SeqAct_Delay.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Delay::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Delay.IsValidUISequenceObject" );

	USeqAct_Delay_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Gate.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Gate::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Gate.IsValidUISequenceObject" );

	USeqAct_Gate_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Interp.Reset
// [0x00020002] 
// Parameters infos:

void USeqAct_Interp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Interp.Reset" );

	USeqAct_Interp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqAct_Interp.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Interp::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Interp.IsValidUISequenceObject" );

	USeqAct_Interp_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void USeqAct_Interp::AddPlayerToDirectorTracks ( class APlayerController* PC )
{
	static UFunction* pFnAddPlayerToDirectorTracks = NULL;

	if ( ! pFnAddPlayerToDirectorTracks )
		pFnAddPlayerToDirectorTracks = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks" );

	USeqAct_Interp_execAddPlayerToDirectorTracks_Parms AddPlayerToDirectorTracks_Parms;
	AddPlayerToDirectorTracks_Parms.PC = PC;

	pFnAddPlayerToDirectorTracks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayerToDirectorTracks, &AddPlayerToDirectorTracks_Parms, NULL );

	pFnAddPlayerToDirectorTracks->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USeqAct_Interp::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Interp.Stop" );

	USeqAct_Interp_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.SetPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewPosition                    ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_OptionalParm | CPF_Parm )

void USeqAct_Interp::SetPosition ( float NewPosition, unsigned long bJump )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Interp.SetPosition" );

	USeqAct_Interp_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewPosition = NewPosition;
	SetPosition_Parms.bJump = bJump;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_IsInObjectList::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject" );

	USeqAct_IsInObjectList_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Log.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Log::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Log.GetObjClassVersion" );

	USeqAct_Log_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Log.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Log::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Log.IsValidUISequenceObject" );

	USeqAct_Log_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ParticleEventGenerator::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion" );

	USeqAct_ParticleEventGenerator_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlayCameraAnim::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion" );

	USeqAct_PlayCameraAnim_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlaySound.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlaySound::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_PlaySound.GetObjClassVersion" );

	USeqAct_PlaySound_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Switch.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Switch::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Switch.IsValidUISequenceObject" );

	USeqAct_Switch_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetCameraTarget::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion" );

	USeqAct_SetCameraTarget_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetFloat.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetFloat::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_SetFloat.GetObjClassVersion" );

	USeqAct_SetFloat_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetInt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetInt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_SetInt.GetObjClassVersion" );

	USeqAct_SetInt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_SetObject.GetObjClassVersion" );

	USeqAct_SetObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetString.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetString::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_SetString.GetObjClassVersion" );

	USeqAct_SetString_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Timer.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Timer::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Timer.IsValidUISequenceObject" );

	USeqAct_Timer_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Toggle.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Toggle::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_Toggle.IsValidUISequenceObject" );

	USeqAct_Toggle_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceCondition.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceCondition::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SequenceCondition.IsValidUISequenceObject" );

	USequenceCondition_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqCond_IsLoggedIn::eventCheckLogins ( )
{
	static UFunction* pFnCheckLogins = NULL;

	if ( ! pFnCheckLogins )
		pFnCheckLogins = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_IsLoggedIn.CheckLogins" );

	USeqCond_IsLoggedIn_eventCheckLogins_Parms CheckLogins_Parms;

	this->ProcessEvent ( pFnCheckLogins, &CheckLogins_Parms, NULL );

	return CheckLogins_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchBase.RemoveValueEntry" );

	USeqCond_SwitchBase_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchBase.InsertValueEntry" );

	USeqCond_SwitchBase_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchBase::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchBase.IsFallThruEnabled" );

	USeqCond_SwitchBase_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchBase::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue" );

	USeqCond_SwitchBase_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchClass.RemoveValueEntry" );

	USeqCond_SwitchClass_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchClass.InsertValueEntry" );

	USeqCond_SwitchClass_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchClass::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchClass.IsFallThruEnabled" );

	USeqCond_SwitchClass_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchClass::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue" );

	USeqCond_SwitchClass_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchName.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchName::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchName.RemoveValueEntry" );

	USeqCond_SwitchName_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchName.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchName::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchName.InsertValueEntry" );

	USeqCond_SwitchName_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchName.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchName::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchName.IsFallThruEnabled" );

	USeqCond_SwitchName_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchName.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchName::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchName.VerifyDefaultCaseValue" );

	USeqCond_SwitchName_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchObject.RemoveValueEntry" );

	USeqCond_SwitchObject_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchObject.InsertValueEntry" );

	USeqCond_SwitchObject_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchObject::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchObject.IsFallThruEnabled" );

	USeqCond_SwitchObject_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchObject::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = UObject::FindObject< UFunction > ( "Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue" );

	USeqCond_SwitchObject_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = UObject::FindObject< UFunction > ( "Function Engine.SequenceEvent.Toggled" );

	USequenceEvent_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USequenceEvent::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.SequenceEvent.Reset" );

	USequenceEvent_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USequenceEvent::CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = UObject::FindObject< UFunction > ( "Function Engine.SequenceEvent.CheckActivate" );

	USequenceEvent_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.InOriginator = InOriginator;
	CheckActivate_Parms.InInstigator = InInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = UObject::FindObject< UFunction > ( "Function Engine.SequenceEvent.RegisterEvent" );

	USequenceEvent_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// [0x00020002] 
// Parameters infos:

void USeqEvent_Mover::NotifyFinishedOpen ( )
{
	static UFunction* pFnNotifyFinishedOpen = NULL;

	if ( ! pFnNotifyFinishedOpen )
		pFnNotifyFinishedOpen = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Mover.NotifyFinishedOpen" );

	USeqEvent_Mover_execNotifyFinishedOpen_Parms NotifyFinishedOpen_Parms;

	this->ProcessEvent ( pFnNotifyFinishedOpen, &NotifyFinishedOpen_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyDetached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyDetached ( class AActor* Other )
{
	static UFunction* pFnNotifyDetached = NULL;

	if ( ! pFnNotifyDetached )
		pFnNotifyDetached = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Mover.NotifyDetached" );

	USeqEvent_Mover_execNotifyDetached_Parms NotifyDetached_Parms;
	NotifyDetached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyDetached, &NotifyDetached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyAttached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyAttached ( class AActor* Other )
{
	static UFunction* pFnNotifyAttached = NULL;

	if ( ! pFnNotifyAttached )
		pFnNotifyAttached = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Mover.NotifyAttached" );

	USeqEvent_Mover_execNotifyAttached_Parms NotifyAttached_Parms;
	NotifyAttached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyAttached, &NotifyAttached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// [0x00020002] 
// Parameters infos:
// class AActor*                  Hit                            ( CPF_Parm )

void USeqEvent_Mover::NotifyEncroachingOn ( class AActor* Hit )
{
	static UFunction* pFnNotifyEncroachingOn = NULL;

	if ( ! pFnNotifyEncroachingOn )
		pFnNotifyEncroachingOn = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Mover.NotifyEncroachingOn" );

	USeqEvent_Mover_execNotifyEncroachingOn_Parms NotifyEncroachingOn_Parms;
	NotifyEncroachingOn_Parms.Hit = Hit;

	this->ProcessEvent ( pFnNotifyEncroachingOn, &NotifyEncroachingOn_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.RegisterEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Mover::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Mover.RegisterEvent" );

	USeqEvent_Mover_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_ParticleEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion" );

	USeqEvent_ParticleEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USeqEvent_Touch::NotifyTouchingPawnDied ( class APawn* P )
{
	static UFunction* pFnNotifyTouchingPawnDied = NULL;

	if ( ! pFnNotifyTouchingPawnDied )
		pFnNotifyTouchingPawnDied = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied" );

	USeqEvent_Touch_execNotifyTouchingPawnDied_Parms NotifyTouchingPawnDied_Parms;
	NotifyTouchingPawnDied_Parms.P = P;

	this->ProcessEvent ( pFnNotifyTouchingPawnDied, &NotifyTouchingPawnDied_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.Toggled
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Touch::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Touch.Toggled" );

	USeqEvent_Touch_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckUnTouchActivate = NULL;

	if ( ! pFnCheckUnTouchActivate )
		pFnCheckUnTouchActivate = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Touch.CheckUnTouchActivate" );

	USeqEvent_Touch_execCheckUnTouchActivate_Parms CheckUnTouchActivate_Parms;
	CheckUnTouchActivate_Parms.InOriginator = InOriginator;
	CheckUnTouchActivate_Parms.InInstigator = InInstigator;
	CheckUnTouchActivate_Parms.bTest = bTest;

	pFnCheckUnTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckUnTouchActivate, &CheckUnTouchActivate_Parms, NULL );

	pFnCheckUnTouchActivate->FunctionFlags |= 0x400;

	return CheckUnTouchActivate_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.CheckTouchActivate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckTouchActivate = NULL;

	if ( ! pFnCheckTouchActivate )
		pFnCheckTouchActivate = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_Touch.CheckTouchActivate" );

	USeqEvent_Touch_execCheckTouchActivate_Parms CheckTouchActivate_Parms;
	CheckTouchActivate_Parms.InOriginator = InOriginator;
	CheckTouchActivate_Parms.InInstigator = InInstigator;
	CheckTouchActivate_Parms.bTest = bTest;

	pFnCheckTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckTouchActivate, &CheckTouchActivate_Parms, NULL );

	pFnCheckTouchActivate->FunctionFlags |= 0x400;

	return CheckTouchActivate_Parms.ReturnValue;
};

// Function Engine.SequenceFrame.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceFrame::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SequenceFrame.IsValidUISequenceObject" );

	USequenceFrame_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqVar_Object.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_Object::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = UObject::FindObject< UFunction > ( "Function Engine.SeqVar_Object.SetObjectValue" );

	USeqVar_Object_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_Object.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Object::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = UObject::FindObject< UFunction > ( "Function Engine.SeqVar_Object.GetObjectValue" );

	USeqVar_Object_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_ObjectList.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_ObjectList::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = UObject::FindObject< UFunction > ( "Function Engine.SeqVar_ObjectList.SetObjectValue" );

	USeqVar_ObjectList_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_ObjectList.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_ObjectList::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = UObject::FindObject< UFunction > ( "Function Engine.SeqVar_ObjectList.GetObjectValue" );

	USeqVar_ObjectList_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_Player.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Player::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = UObject::FindObject< UFunction > ( "Function Engine.SeqVar_Player.GetObjectValue" );

	USeqVar_Player_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.Terrain.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATerrain::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Terrain.PostBeginPlay" );

	ATerrain_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Terrain.CalcLayerBounds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATerrain::CalcLayerBounds ( )
{
	static UFunction* pFnCalcLayerBounds = NULL;

	if ( ! pFnCalcLayerBounds )
		pFnCalcLayerBounds = UObject::FindObject< UFunction > ( "Function Engine.Terrain.CalcLayerBounds" );

	ATerrain_execCalcLayerBounds_Parms CalcLayerBounds_Parms;

	pFnCalcLayerBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcLayerBounds, &CalcLayerBounds_Parms, NULL );

	pFnCalcLayerBounds->FunctionFlags |= 0x400;
};

// Function Engine.TerrainLayerSetup.PostBeginPlay
// [0x00020100] 
// Parameters infos:

void UTerrainLayerSetup::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.TerrainLayerSetup.PostBeginPlay" );

	UTerrainLayerSetup_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.TerrainLayerSetup.SetMaterials
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FTerrainFilteredMaterial > NewMaterials                   ( CPF_Parm | CPF_NeedCtorLink )

void UTerrainLayerSetup::SetMaterials ( TArray< struct FTerrainFilteredMaterial > NewMaterials )
{
	static UFunction* pFnSetMaterials = NULL;

	if ( ! pFnSetMaterials )
		pFnSetMaterials = UObject::FindObject< UFunction > ( "Function Engine.TerrainLayerSetup.SetMaterials" );

	UTerrainLayerSetup_execSetMaterials_Parms SetMaterials_Parms;
	memcpy ( &SetMaterials_Parms.NewMaterials, &NewMaterials, 0xC );

	pFnSetMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterials, &SetMaterials_Parms, NULL );

	pFnSetMaterials->FunctionFlags |= 0x400;
};

// Function Engine.UIRoot.ConvertWidgetIDToString
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UUIObject*               SourceWidget                   ( CPF_Parm )

struct FString UUIRoot::ConvertWidgetIDToString ( class UUIObject* SourceWidget )
{
	static UFunction* pFnConvertWidgetIDToString = NULL;

	if ( ! pFnConvertWidgetIDToString )
		pFnConvertWidgetIDToString = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.ConvertWidgetIDToString" );

	UUIRoot_execConvertWidgetIDToString_Parms ConvertWidgetIDToString_Parms;
	ConvertWidgetIDToString_Parms.SourceWidget = SourceWidget;

	this->ProcessEvent ( pFnConvertWidgetIDToString, &ConvertWidgetIDToString_Parms, NULL );

	return ConvertWidgetIDToString_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreStringValue
// [0x00C22002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FString                 OutStringValue                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIRoot::GetDataStoreStringValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue )
{
	static UFunction* pFnGetDataStoreStringValue = NULL;

	if ( ! pFnGetDataStoreStringValue )
		pFnGetDataStoreStringValue = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetDataStoreStringValue" );

	UUIRoot_execGetDataStoreStringValue_Parms GetDataStoreStringValue_Parms;
	memcpy ( &GetDataStoreStringValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	GetDataStoreStringValue_Parms.OwnerScene = OwnerScene;
	GetDataStoreStringValue_Parms.OwnerPlayer = OwnerPlayer;

	this->ProcessEvent ( pFnGetDataStoreStringValue, &GetDataStoreStringValue_Parms, NULL );

	if ( OutStringValue )
		memcpy ( OutStringValue, &GetDataStoreStringValue_Parms.OutStringValue, 0xC );

	return GetDataStoreStringValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreFieldValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderFieldValue   OutFieldValue                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIRoot::GetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue )
{
	static UFunction* pFnGetDataStoreFieldValue = NULL;

	if ( ! pFnGetDataStoreFieldValue )
		pFnGetDataStoreFieldValue = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetDataStoreFieldValue" );

	UUIRoot_execGetDataStoreFieldValue_Parms GetDataStoreFieldValue_Parms;
	memcpy ( &GetDataStoreFieldValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	GetDataStoreFieldValue_Parms.OwnerScene = OwnerScene;
	GetDataStoreFieldValue_Parms.OwnerPlayer = OwnerPlayer;

	pFnGetDataStoreFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreFieldValue, &GetDataStoreFieldValue_Parms, NULL );

	pFnGetDataStoreFieldValue->FunctionFlags |= 0x400;

	if ( OutFieldValue )
		memcpy ( OutFieldValue, &GetDataStoreFieldValue_Parms.OutFieldValue, 0x44 );

	return GetDataStoreFieldValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreStringValue
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InStringValue                  ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )

bool UUIRoot::SetDataStoreStringValue ( struct FString InDataStoreMarkup, struct FString InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer )
{
	static UFunction* pFnSetDataStoreStringValue = NULL;

	if ( ! pFnSetDataStoreStringValue )
		pFnSetDataStoreStringValue = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.SetDataStoreStringValue" );

	UUIRoot_execSetDataStoreStringValue_Parms SetDataStoreStringValue_Parms;
	memcpy ( &SetDataStoreStringValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	memcpy ( &SetDataStoreStringValue_Parms.InStringValue, &InStringValue, 0xC );
	SetDataStoreStringValue_Parms.OwnerScene = OwnerScene;
	SetDataStoreStringValue_Parms.OwnerPlayer = OwnerPlayer;

	this->ProcessEvent ( pFnSetDataStoreStringValue, &SetDataStoreStringValue_Parms, NULL );

	return SetDataStoreStringValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreFieldValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderFieldValue   InFieldValue                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIRoot::SetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue )
{
	static UFunction* pFnSetDataStoreFieldValue = NULL;

	if ( ! pFnSetDataStoreFieldValue )
		pFnSetDataStoreFieldValue = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.SetDataStoreFieldValue" );

	UUIRoot_execSetDataStoreFieldValue_Parms SetDataStoreFieldValue_Parms;
	memcpy ( &SetDataStoreFieldValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0xC );
	SetDataStoreFieldValue_Parms.OwnerScene = OwnerScene;
	SetDataStoreFieldValue_Parms.OwnerPlayer = OwnerPlayer;

	pFnSetDataStoreFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreFieldValue, &SetDataStoreFieldValue_Parms, NULL );

	pFnSetDataStoreFieldValue->FunctionFlags |= 0x400;

	if ( InFieldValue )
		memcpy ( InFieldValue, &SetDataStoreFieldValue_Parms.InFieldValue, 0x44 );

	return SetDataStoreFieldValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.StaticResolveDataStore
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            InPlayerOwner                  ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UUIRoot::StaticResolveDataStore ( struct FName DataStoreTag, class UUIScene* OwnerScene, class ULocalPlayer* InPlayerOwner )
{
	static UFunction* pFnStaticResolveDataStore = NULL;

	if ( ! pFnStaticResolveDataStore )
		pFnStaticResolveDataStore = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.StaticResolveDataStore" );

	UUIRoot_execStaticResolveDataStore_Parms StaticResolveDataStore_Parms;
	memcpy ( &StaticResolveDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	StaticResolveDataStore_Parms.OwnerScene = OwnerScene;
	StaticResolveDataStore_Parms.InPlayerOwner = InPlayerOwner;

	this->ProcessEvent ( pFnStaticResolveDataStore, &StaticResolveDataStore_Parms, NULL );

	return StaticResolveDataStore_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetPrimitiveTransform
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// unsigned long                  bIncludeAnchorPosition         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncudeRotation                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeScale                  ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIRoot::GetPrimitiveTransform ( class UUIObject* Widget, unsigned long bIncludeAnchorPosition, unsigned long bIncudeRotation, unsigned long bIncludeScale )
{
	static UFunction* pFnGetPrimitiveTransform = NULL;

	if ( ! pFnGetPrimitiveTransform )
		pFnGetPrimitiveTransform = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetPrimitiveTransform" );

	UUIRoot_execGetPrimitiveTransform_Parms GetPrimitiveTransform_Parms;
	GetPrimitiveTransform_Parms.Widget = Widget;
	GetPrimitiveTransform_Parms.bIncludeAnchorPosition = bIncludeAnchorPosition;
	GetPrimitiveTransform_Parms.bIncudeRotation = bIncudeRotation;
	GetPrimitiveTransform_Parms.bIncludeScale = bIncludeScale;

	pFnGetPrimitiveTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrimitiveTransform, &GetPrimitiveTransform_Parms, NULL );

	pFnGetPrimitiveTransform->FunctionFlags |= 0x400;

	return GetPrimitiveTransform_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetMouseCaptureOverride
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bCaptureMouse                  ( CPF_Parm )

void UUIRoot::SetMouseCaptureOverride ( unsigned long bCaptureMouse )
{
	static UFunction* pFnSetMouseCaptureOverride = NULL;

	if ( ! pFnSetMouseCaptureOverride )
		pFnSetMouseCaptureOverride = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.SetMouseCaptureOverride" );

	UUIRoot_execSetMouseCaptureOverride_Parms SetMouseCaptureOverride_Parms;
	SetMouseCaptureOverride_Parms.bCaptureMouse = bCaptureMouse;

	pFnSetMouseCaptureOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseCaptureOverride, &SetMouseCaptureOverride_Parms, NULL );

	pFnSetMouseCaptureOverride->FunctionFlags |= 0x400;
};

// Function Engine.UIRoot.GetCursorSize
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          CursorXL                       ( CPF_Parm | CPF_OutParm )
// float                          CursorYL                       ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetCursorSize ( float* CursorXL, float* CursorYL )
{
	static UFunction* pFnGetCursorSize = NULL;

	if ( ! pFnGetCursorSize )
		pFnGetCursorSize = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetCursorSize" );

	UUIRoot_execGetCursorSize_Parms GetCursorSize_Parms;

	pFnGetCursorSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorSize, &GetCursorSize_Parms, NULL );

	pFnGetCursorSize->FunctionFlags |= 0x400;

	if ( CursorXL )
		*CursorXL = GetCursorSize_Parms.CursorXL;

	if ( CursorYL )
		*CursorYL = GetCursorSize_Parms.CursorYL;

	return GetCursorSize_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetCursorPosition
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Const | CPF_OptionalParm | CPF_Parm )
// int                            CursorX                        ( CPF_Parm | CPF_OutParm )
// int                            CursorY                        ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetCursorPosition ( class UUIScene* Scene, int* CursorX, int* CursorY )
{
	static UFunction* pFnGetCursorPosition = NULL;

	if ( ! pFnGetCursorPosition )
		pFnGetCursorPosition = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetCursorPosition" );

	UUIRoot_execGetCursorPosition_Parms GetCursorPosition_Parms;
	GetCursorPosition_Parms.Scene = Scene;

	pFnGetCursorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorPosition, &GetCursorPosition_Parms, NULL );

	pFnGetCursorPosition->FunctionFlags |= 0x400;

	if ( CursorX )
		*CursorX = GetCursorPosition_Parms.CursorX;

	if ( CursorY )
		*CursorY = GetCursorPosition_Parms.CursorY;

	return GetCursorPosition_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetFaceOrientation
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )

unsigned char UUIRoot::GetFaceOrientation ( unsigned char Face )
{
	static UFunction* pFnGetFaceOrientation = NULL;

	if ( ! pFnGetFaceOrientation )
		pFnGetFaceOrientation = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetFaceOrientation" );

	UUIRoot_execGetFaceOrientation_Parms GetFaceOrientation_Parms;
	GetFaceOrientation_Parms.Face = Face;

	pFnGetFaceOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaceOrientation, &GetFaceOrientation_Parms, NULL );

	pFnGetFaceOrientation->FunctionFlags |= 0x400;

	return GetFaceOrientation_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetSceneClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UGameUISceneClient*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGameUISceneClient* UUIRoot::GetSceneClient ( )
{
	static UFunction* pFnGetSceneClient = NULL;

	if ( ! pFnGetSceneClient )
		pFnGetSceneClient = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetSceneClient" );

	UUIRoot_execGetSceneClient_Parms GetSceneClient_Parms;

	pFnGetSceneClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneClient, &GetSceneClient_Parms, NULL );

	pFnGetSceneClient->FunctionFlags |= 0x400;

	return GetSceneClient_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetCurrentUIController
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* UUIRoot::GetCurrentUIController ( )
{
	static UFunction* pFnGetCurrentUIController = NULL;

	if ( ! pFnGetCurrentUIController )
		pFnGetCurrentUIController = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetCurrentUIController" );

	UUIRoot_execGetCurrentUIController_Parms GetCurrentUIController_Parms;

	pFnGetCurrentUIController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentUIController, &GetCurrentUIController_Parms, NULL );

	pFnGetCurrentUIController->FunctionFlags |= 0x400;

	return GetCurrentUIController_Parms.ReturnValue;
};

// Function Engine.UIRoot.IsConsole
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConsoleType                    ( CPF_OptionalParm | CPF_Parm )

bool UUIRoot::IsConsole ( unsigned char ConsoleType )
{
	static UFunction* pFnIsConsole = NULL;

	if ( ! pFnIsConsole )
		pFnIsConsole = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.IsConsole" );

	UUIRoot_execIsConsole_Parms IsConsole_Parms;
	IsConsole_Parms.ConsoleType = ConsoleType;

	this->ProcessEvent ( pFnIsConsole, &IsConsole_Parms, NULL );

	return IsConsole_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetInputPlatformType
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            OwningPlayer                   ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIRoot::GetInputPlatformType ( class ULocalPlayer* OwningPlayer )
{
	static UFunction* pFnGetInputPlatformType = NULL;

	if ( ! pFnGetInputPlatformType )
		pFnGetInputPlatformType = UObject::FindObject< UFunction > ( "Function Engine.UIRoot.GetInputPlatformType" );

	UUIRoot_execGetInputPlatformType_Parms GetInputPlatformType_Parms;
	GetInputPlatformType_Parms.OwningPlayer = OwningPlayer;

	pFnGetInputPlatformType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInputPlatformType, &GetInputPlatformType_Parms, NULL );

	pFnGetInputPlatformType->FunctionFlags |= 0x400;

	return GetInputPlatformType_Parms.ReturnValue;
};

// Function Engine.Interaction.NotifyPlayerRemoved
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = UObject::FindObject< UFunction > ( "Function Engine.Interaction.NotifyPlayerRemoved" );

	UInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.Interaction.NotifyPlayerAdded
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = UObject::FindObject< UFunction > ( "Function Engine.Interaction.NotifyPlayerAdded" );

	UInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.Interaction.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:

void UInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.Interaction.NotifyGameSessionEnded" );

	UInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.Interaction.Initialized
// [0x00020000] 
// Parameters infos:

void UInteraction::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.Interaction.Initialized" );

	UInteraction_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.Interaction.OnInitialize
// [0x00120000] 
// Parameters infos:

void UInteraction::OnInitialize ( )
{
	static UFunction* pFnOnInitialize = NULL;

	if ( ! pFnOnInitialize )
		pFnOnInitialize = UObject::FindObject< UFunction > ( "Function Engine.Interaction.OnInitialize" );

	UInteraction_execOnInitialize_Parms OnInitialize_Parms;

	this->ProcessEvent ( pFnOnInitialize, &OnInitialize_Parms, NULL );
};

// Function Engine.Interaction.Init
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UInteraction::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.Interaction.Init" );

	UInteraction_execInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.Interaction.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UInteraction::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function Engine.Interaction.Tick" );

	UInteraction_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Interaction.ChangedInputLanguage
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 sInputLangId                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bHasIME                        ( CPF_Parm )
// unsigned long                  bIMEActive                     ( CPF_Parm )

void UInteraction::eventChangedInputLanguage ( struct FString sInputLangId, unsigned long bHasIME, unsigned long bIMEActive )
{
	static UFunction* pFnChangedInputLanguage = NULL;

	if ( ! pFnChangedInputLanguage )
		pFnChangedInputLanguage = UObject::FindObject< UFunction > ( "Function Engine.Interaction.ChangedInputLanguage" );

	UInteraction_eventChangedInputLanguage_Parms ChangedInputLanguage_Parms;
	memcpy ( &ChangedInputLanguage_Parms.sInputLangId, &sInputLangId, 0xC );
	ChangedInputLanguage_Parms.bHasIME = bHasIME;
	ChangedInputLanguage_Parms.bIMEActive = bIMEActive;

	pFnChangedInputLanguage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangedInputLanguage, &ChangedInputLanguage_Parms, NULL );

	pFnChangedInputLanguage->FunctionFlags |= 0x400;
};

// Function Engine.Interaction.OnReceivedNativeInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UInteraction::OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnOnReceivedNativeInputChar = NULL;

	if ( ! pFnOnReceivedNativeInputChar )
		pFnOnReceivedNativeInputChar = UObject::FindObject< UFunction > ( "Function Engine.Interaction.OnReceivedNativeInputChar" );

	UInteraction_execOnReceivedNativeInputChar_Parms OnReceivedNativeInputChar_Parms;
	OnReceivedNativeInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnOnReceivedNativeInputChar, &OnReceivedNativeInputChar_Parms, NULL );

	return OnReceivedNativeInputChar_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputAxis
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputAxis = NULL;

	if ( ! pFnOnReceivedNativeInputAxis )
		pFnOnReceivedNativeInputAxis = UObject::FindObject< UFunction > ( "Function Engine.Interaction.OnReceivedNativeInputAxis" );

	UInteraction_execOnReceivedNativeInputAxis_Parms OnReceivedNativeInputAxis_Parms;
	OnReceivedNativeInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputAxis_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputAxis_Parms.Delta = Delta;
	OnReceivedNativeInputAxis_Parms.DeltaTime = DeltaTime;
	OnReceivedNativeInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputAxis, &OnReceivedNativeInputAxis_Parms, NULL );

	return OnReceivedNativeInputAxis_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputKey
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputKey = NULL;

	if ( ! pFnOnReceivedNativeInputKey )
		pFnOnReceivedNativeInputKey = UObject::FindObject< UFunction > ( "Function Engine.Interaction.OnReceivedNativeInputKey" );

	UInteraction_execOnReceivedNativeInputKey_Parms OnReceivedNativeInputKey_Parms;
	OnReceivedNativeInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputKey_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputKey_Parms.EventType = EventType;
	OnReceivedNativeInputKey_Parms.AmountDepressed = AmountDepressed;
	OnReceivedNativeInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputKey, &OnReceivedNativeInputKey_Parms, NULL );

	return OnReceivedNativeInputKey_Parms.ReturnValue;
};

// Function Engine.cDebugPageManager.IndexDown
// [0x00020000] 
// Parameters infos:

void UcDebugPageManager::IndexDown ( )
{
	static UFunction* pFnIndexDown = NULL;

	if ( ! pFnIndexDown )
		pFnIndexDown = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.IndexDown" );

	UcDebugPageManager_execIndexDown_Parms IndexDown_Parms;

	this->ProcessEvent ( pFnIndexDown, &IndexDown_Parms, NULL );
};

// Function Engine.cDebugPageManager.IndexUp
// [0x00020000] 
// Parameters infos:

void UcDebugPageManager::IndexUp ( )
{
	static UFunction* pFnIndexUp = NULL;

	if ( ! pFnIndexUp )
		pFnIndexUp = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.IndexUp" );

	UcDebugPageManager_execIndexUp_Parms IndexUp_Parms;

	this->ProcessEvent ( pFnIndexUp, &IndexUp_Parms, NULL );
};

// Function Engine.cDebugPageManager.DrawIndexPage
// [0x00020002] 
// Parameters infos:

void UcDebugPageManager::DrawIndexPage ( )
{
	static UFunction* pFnDrawIndexPage = NULL;

	if ( ! pFnDrawIndexPage )
		pFnDrawIndexPage = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.DrawIndexPage" );

	UcDebugPageManager_execDrawIndexPage_Parms DrawIndexPage_Parms;

	this->ProcessEvent ( pFnDrawIndexPage, &DrawIndexPage_Parms, NULL );
};

// Function Engine.cDebugPageManager.DrawTitleBar
// [0x00020002] 
// Parameters infos:

void UcDebugPageManager::DrawTitleBar ( )
{
	static UFunction* pFnDrawTitleBar = NULL;

	if ( ! pFnDrawTitleBar )
		pFnDrawTitleBar = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.DrawTitleBar" );

	UcDebugPageManager_execDrawTitleBar_Parms DrawTitleBar_Parms;

	this->ProcessEvent ( pFnDrawTitleBar, &DrawTitleBar_Parms, NULL );
};

// Function Engine.cDebugPageManager.InputKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UcDebugPageManager::eventInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.InputKey" );

	UcDebugPageManager_eventInputKey_Parms InputKey_Parms;
	InputKey_Parms.ControllerId = ControllerId;
	memcpy ( &InputKey_Parms.Key, &Key, 0x8 );
	InputKey_Parms.Event = Event;
	InputKey_Parms.AmountDepressed = AmountDepressed;
	InputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );

	return InputKey_Parms.ReturnValue;
};

// Function Engine.cDebugPageManager.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UcDebugPageManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.Destroyed" );

	UcDebugPageManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.cDebugPageManager.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UcDebugPageManager::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.NotifyGameSessionEnded" );

	UcDebugPageManager_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.cDebugPageManager.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UcDebugPageManager::eventTick ( float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.Tick" );

	UcDebugPageManager_eventTick_Parms Tick_Parms;
	Tick_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.cDebugPageManager.PostRender_DebugPages
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UcDebugPageManager::eventPostRender_DebugPages ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender_DebugPages = NULL;

	if ( ! pFnPostRender_DebugPages )
		pFnPostRender_DebugPages = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.PostRender_DebugPages" );

	UcDebugPageManager_eventPostRender_DebugPages_Parms PostRender_DebugPages_Parms;
	PostRender_DebugPages_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender_DebugPages, &PostRender_DebugPages_Parms, NULL );
};

// Function Engine.cDebugPageManager.DoLevelChangeCleanup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPageManager::DoLevelChangeCleanup ( )
{
	static UFunction* pFnDoLevelChangeCleanup = NULL;

	if ( ! pFnDoLevelChangeCleanup )
		pFnDoLevelChangeCleanup = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.DoLevelChangeCleanup" );

	UcDebugPageManager_execDoLevelChangeCleanup_Parms DoLevelChangeCleanup_Parms;

	pFnDoLevelChangeCleanup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoLevelChangeCleanup, &DoLevelChangeCleanup_Parms, NULL );

	pFnDoLevelChangeCleanup->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPageManager.ClearDebugPages
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UcDebugPageManager::ClearDebugPages ( )
{
	static UFunction* pFnClearDebugPages = NULL;

	if ( ! pFnClearDebugPages )
		pFnClearDebugPages = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.ClearDebugPages" );

	UcDebugPageManager_execClearDebugPages_Parms ClearDebugPages_Parms;

	pFnClearDebugPages->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearDebugPages, &ClearDebugPages_Parms, NULL );

	pFnClearDebugPages->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPageManager.RemoveDebugPage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UcDebugPage*             PageToRemove                   ( CPF_Parm )

void UcDebugPageManager::RemoveDebugPage ( class UcDebugPage* PageToRemove )
{
	static UFunction* pFnRemoveDebugPage = NULL;

	if ( ! pFnRemoveDebugPage )
		pFnRemoveDebugPage = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.RemoveDebugPage" );

	UcDebugPageManager_execRemoveDebugPage_Parms RemoveDebugPage_Parms;
	RemoveDebugPage_Parms.PageToRemove = PageToRemove;

	pFnRemoveDebugPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveDebugPage, &RemoveDebugPage_Parms, NULL );

	pFnRemoveDebugPage->FunctionFlags |= 0x400;
};

// Function Engine.cDebugPageManager.AddDebugPage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UcDebugPage*             PageToAdd                      ( CPF_Parm )

void UcDebugPageManager::AddDebugPage ( class UcDebugPage* PageToAdd )
{
	static UFunction* pFnAddDebugPage = NULL;

	if ( ! pFnAddDebugPage )
		pFnAddDebugPage = UObject::FindObject< UFunction > ( "Function Engine.cDebugPageManager.AddDebugPage" );

	UcDebugPageManager_execAddDebugPage_Parms AddDebugPage_Parms;
	AddDebugPage_Parms.PageToAdd = PageToAdd;

	pFnAddDebugPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDebugPage, &AddDebugPage_Parms, NULL );

	pFnAddDebugPage->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.GetVPToWRatio
// [0x00020002] 
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D UcDistrictVisualiser::GetVPToWRatio ( )
{
	static UFunction* pFnGetVPToWRatio = NULL;

	if ( ! pFnGetVPToWRatio )
		pFnGetVPToWRatio = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.GetVPToWRatio" );

	UcDistrictVisualiser_execGetVPToWRatio_Parms GetVPToWRatio_Parms;

	this->ProcessEvent ( pFnGetVPToWRatio, &GetVPToWRatio_Parms, NULL );

	return GetVPToWRatio_Parms.ReturnValue;
};

// Function Engine.cDistrictVisualiser.GetZoomLevel
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UcDistrictVisualiser::GetZoomLevel ( )
{
	static UFunction* pFnGetZoomLevel = NULL;

	if ( ! pFnGetZoomLevel )
		pFnGetZoomLevel = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.GetZoomLevel" );

	UcDistrictVisualiser_execGetZoomLevel_Parms GetZoomLevel_Parms;

	this->ProcessEvent ( pFnGetZoomLevel, &GetZoomLevel_Parms, NULL );

	return GetZoomLevel_Parms.ReturnValue;
};

// Function Engine.cDistrictVisualiser.GetOffset
// [0x00020002] 
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D UcDistrictVisualiser::GetOffset ( )
{
	static UFunction* pFnGetOffset = NULL;

	if ( ! pFnGetOffset )
		pFnGetOffset = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.GetOffset" );

	UcDistrictVisualiser_execGetOffset_Parms GetOffset_Parms;

	this->ProcessEvent ( pFnGetOffset, &GetOffset_Parms, NULL );

	return GetOffset_Parms.ReturnValue;
};

// Function Engine.cDistrictVisualiser.ToggleEntityVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sKey                           ( CPF_Parm | CPF_NeedCtorLink )

void UcDistrictVisualiser::ToggleEntityVisibility ( struct FString sKey )
{
	static UFunction* pFnToggleEntityVisibility = NULL;

	if ( ! pFnToggleEntityVisibility )
		pFnToggleEntityVisibility = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.ToggleEntityVisibility" );

	UcDistrictVisualiser_execToggleEntityVisibility_Parms ToggleEntityVisibility_Parms;
	memcpy ( &ToggleEntityVisibility_Parms.sKey, &sKey, 0xC );

	pFnToggleEntityVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleEntityVisibility, &ToggleEntityVisibility_Parms, NULL );

	pFnToggleEntityVisibility->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.OutputText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UcDistrictVisualiser::OutputText ( struct FString Text )
{
	static UFunction* pFnOutputText = NULL;

	if ( ! pFnOutputText )
		pFnOutputText = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.OutputText" );

	UcDistrictVisualiser_execOutputText_Parms OutputText_Parms;
	memcpy ( &OutputText_Parms.Text, &Text, 0xC );

	pFnOutputText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOutputText, &OutputText_Parms, NULL );

	pFnOutputText->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.OutputTextLine
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UcDistrictVisualiser::OutputTextLine ( struct FString Text )
{
	static UFunction* pFnOutputTextLine = NULL;

	if ( ! pFnOutputTextLine )
		pFnOutputTextLine = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.OutputTextLine" );

	UcDistrictVisualiser_execOutputTextLine_Parms OutputTextLine_Parms;
	memcpy ( &OutputTextLine_Parms.Text, &Text, 0xC );

	pFnOutputTextLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOutputTextLine, &OutputTextLine_Parms, NULL );

	pFnOutputTextLine->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.NativeOnClicked
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UcDistrictVisualiser::NativeOnClicked ( )
{
	static UFunction* pFnNativeOnClicked = NULL;

	if ( ! pFnNativeOnClicked )
		pFnNativeOnClicked = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.NativeOnClicked" );

	UcDistrictVisualiser_execNativeOnClicked_Parms NativeOnClicked_Parms;

	pFnNativeOnClicked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeOnClicked, &NativeOnClicked_Parms, NULL );

	pFnNativeOnClicked->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.InputAxis
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UcDistrictVisualiser::eventInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnInputAxis = NULL;

	if ( ! pFnInputAxis )
		pFnInputAxis = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.InputAxis" );

	UcDistrictVisualiser_eventInputAxis_Parms InputAxis_Parms;
	InputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &InputAxis_Parms.Key, &Key, 0x8 );
	InputAxis_Parms.Delta = Delta;
	InputAxis_Parms.DeltaTime = DeltaTime;
	InputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputAxis, &InputAxis_Parms, NULL );

	return InputAxis_Parms.ReturnValue;
};

// Function Engine.cDistrictVisualiser.InputKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UcDistrictVisualiser::eventInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.InputKey" );

	UcDistrictVisualiser_eventInputKey_Parms InputKey_Parms;
	InputKey_Parms.ControllerId = ControllerId;
	memcpy ( &InputKey_Parms.Key, &Key, 0x8 );
	InputKey_Parms.Event = Event;
	InputKey_Parms.AmountDepressed = AmountDepressed;
	InputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );

	return InputKey_Parms.ReturnValue;
};

// Function Engine.cDistrictVisualiser.Initialized
// [0x00020002] 
// Parameters infos:

void UcDistrictVisualiser::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.Initialized" );

	UcDistrictVisualiser_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.cDistrictVisualiser.RenderMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UcDistrictVisualiser::RenderMap ( class UCanvas* Canvas )
{
	static UFunction* pFnRenderMap = NULL;

	if ( ! pFnRenderMap )
		pFnRenderMap = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.RenderMap" );

	UcDistrictVisualiser_execRenderMap_Parms RenderMap_Parms;
	RenderMap_Parms.Canvas = Canvas;

	pFnRenderMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRenderMap, &RenderMap_Parms, NULL );

	pFnRenderMap->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.PostRender
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UcDistrictVisualiser::PostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.PostRender" );

	UcDistrictVisualiser_execPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	pFnPostRender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );

	pFnPostRender->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.RemoveAllEntities
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UcDistrictVisualiser::RemoveAllEntities ( )
{
	static UFunction* pFnRemoveAllEntities = NULL;

	if ( ! pFnRemoveAllEntities )
		pFnRemoveAllEntities = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.RemoveAllEntities" );

	UcDistrictVisualiser_execRemoveAllEntities_Parms RemoveAllEntities_Parms;

	pFnRemoveAllEntities->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllEntities, &RemoveAllEntities_Parms, NULL );

	pFnRemoveAllEntities->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.Remove
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sType                          ( CPF_Parm | CPF_NeedCtorLink )
// class UObject*                 pObject                        ( CPF_Parm )

void UcDistrictVisualiser::Remove ( struct FString sType, class UObject* pObject )
{
	static UFunction* pFnRemove = NULL;

	if ( ! pFnRemove )
		pFnRemove = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.Remove" );

	UcDistrictVisualiser_execRemove_Parms Remove_Parms;
	memcpy ( &Remove_Parms.sType, &sType, 0xC );
	Remove_Parms.pObject = pObject;

	pFnRemove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemove, &Remove_Parms, NULL );

	pFnRemove->FunctionFlags |= 0x400;
};

// Function Engine.cDistrictVisualiser.Register
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sType                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FtEntityType            tType                          ( CPF_Parm )
// class UcEntity*                pEntity                        ( CPF_Parm )
// class UTexture2D*              pTexture                       ( CPF_Parm )

void UcDistrictVisualiser::Register ( struct FString sType, struct FtEntityType tType, class UcEntity* pEntity, class UTexture2D* pTexture )
{
	static UFunction* pFnRegister = NULL;

	if ( ! pFnRegister )
		pFnRegister = UObject::FindObject< UFunction > ( "Function Engine.cDistrictVisualiser.Register" );

	UcDistrictVisualiser_execRegister_Parms Register_Parms;
	memcpy ( &Register_Parms.sType, &sType, 0xC );
	memcpy ( &Register_Parms.tType, &tType, 0x14 );
	Register_Parms.pEntity = pEntity;
	Register_Parms.pTexture = pTexture;

	pFnRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegister, &Register_Parms, NULL );

	pFnRegister->FunctionFlags |= 0x400;
};

// Function Engine.Console.FlushPlayerInput
// [0x00020002] 
// Parameters infos:

void UConsole::FlushPlayerInput ( )
{
	static UFunction* pFnFlushPlayerInput = NULL;

	if ( ! pFnFlushPlayerInput )
		pFnFlushPlayerInput = UObject::FindObject< UFunction > ( "Function Engine.Console.FlushPlayerInput" );

	UConsole_execFlushPlayerInput_Parms FlushPlayerInput_Parms;

	this->ProcessEvent ( pFnFlushPlayerInput, &FlushPlayerInput_Parms, NULL );
};

// Function Engine.Console.IsUIMiniConsoleOpen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UConsole::IsUIMiniConsoleOpen ( )
{
	static UFunction* pFnIsUIMiniConsoleOpen = NULL;

	if ( ! pFnIsUIMiniConsoleOpen )
		pFnIsUIMiniConsoleOpen = UObject::FindObject< UFunction > ( "Function Engine.Console.IsUIMiniConsoleOpen" );

	UConsole_execIsUIMiniConsoleOpen_Parms IsUIMiniConsoleOpen_Parms;

	this->ProcessEvent ( pFnIsUIMiniConsoleOpen, &IsUIMiniConsoleOpen_Parms, NULL );

	return IsUIMiniConsoleOpen_Parms.ReturnValue;
};

// Function Engine.Console.IsUIConsoleOpen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UConsole::IsUIConsoleOpen ( )
{
	static UFunction* pFnIsUIConsoleOpen = NULL;

	if ( ! pFnIsUIConsoleOpen )
		pFnIsUIConsoleOpen = UObject::FindObject< UFunction > ( "Function Engine.Console.IsUIConsoleOpen" );

	UConsole_execIsUIConsoleOpen_Parms IsUIConsoleOpen_Parms;

	this->ProcessEvent ( pFnIsUIConsoleOpen, &IsUIConsoleOpen_Parms, NULL );

	return IsUIConsoleOpen_Parms.ReturnValue;
};

// Function Engine.Console.InputChar
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UConsole::InputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnInputChar = NULL;

	if ( ! pFnInputChar )
		pFnInputChar = UObject::FindObject< UFunction > ( "Function Engine.Console.InputChar" );

	UConsole_execInputChar_Parms InputChar_Parms;
	InputChar_Parms.ControllerId = ControllerId;
	memcpy ( &InputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnInputChar, &InputChar_Parms, NULL );

	return InputChar_Parms.ReturnValue;
};

// Function Engine.Console.InputKey
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UConsole::InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = UObject::FindObject< UFunction > ( "Function Engine.Console.InputKey" );

	UConsole_execInputKey_Parms InputKey_Parms;
	InputKey_Parms.ControllerId = ControllerId;
	memcpy ( &InputKey_Parms.Key, &Key, 0x8 );
	InputKey_Parms.Event = Event;
	InputKey_Parms.AmountDepressed = AmountDepressed;
	InputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );

	return InputKey_Parms.ReturnValue;
};

// Function Engine.Console.PostRender_Console
// [0x00020000] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UConsole::PostRender_Console ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender_Console = NULL;

	if ( ! pFnPostRender_Console )
		pFnPostRender_Console = UObject::FindObject< UFunction > ( "Function Engine.Console.PostRender_Console" );

	UConsole_execPostRender_Console_Parms PostRender_Console_Parms;
	PostRender_Console_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender_Console, &PostRender_Console_Parms, NULL );
};

// Function Engine.Console.StartTyping
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UConsole::StartTyping ( struct FString Text )
{
	static UFunction* pFnStartTyping = NULL;

	if ( ! pFnStartTyping )
		pFnStartTyping = UObject::FindObject< UFunction > ( "Function Engine.Console.StartTyping" );

	UConsole_execStartTyping_Parms StartTyping_Parms;
	memcpy ( &StartTyping_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnStartTyping, &StartTyping_Parms, NULL );
};

// Function Engine.Console.OutputText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UConsole::eventOutputText ( struct FString Text )
{
	static UFunction* pFnOutputText = NULL;

	if ( ! pFnOutputText )
		pFnOutputText = UObject::FindObject< UFunction > ( "Function Engine.Console.OutputText" );

	UConsole_eventOutputText_Parms OutputText_Parms;
	memcpy ( &OutputText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnOutputText, &OutputText_Parms, NULL );
};

// Function Engine.Console.OutputTextLine
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UConsole::OutputTextLine ( struct FString Text )
{
	static UFunction* pFnOutputTextLine = NULL;

	if ( ! pFnOutputTextLine )
		pFnOutputTextLine = UObject::FindObject< UFunction > ( "Function Engine.Console.OutputTextLine" );

	UConsole_execOutputTextLine_Parms OutputTextLine_Parms;
	memcpy ( &OutputTextLine_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnOutputTextLine, &OutputTextLine_Parms, NULL );
};

// Function Engine.Console.ClearOutput
// [0x00020002] 
// Parameters infos:

void UConsole::ClearOutput ( )
{
	static UFunction* pFnClearOutput = NULL;

	if ( ! pFnClearOutput )
		pFnClearOutput = UObject::FindObject< UFunction > ( "Function Engine.Console.ClearOutput" );

	UConsole_execClearOutput_Parms ClearOutput_Parms;

	this->ProcessEvent ( pFnClearOutput, &ClearOutput_Parms, NULL );
};

// Function Engine.Console.ConsoleCommand
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void UConsole::eventConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = UObject::FindObject< UFunction > ( "Function Engine.Console.ConsoleCommand" );

	UConsole_eventConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );
};

// Function Engine.Console.PurgeCommandFromHistory
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void UConsole::PurgeCommandFromHistory ( struct FString Command )
{
	static UFunction* pFnPurgeCommandFromHistory = NULL;

	if ( ! pFnPurgeCommandFromHistory )
		pFnPurgeCommandFromHistory = UObject::FindObject< UFunction > ( "Function Engine.Console.PurgeCommandFromHistory" );

	UConsole_execPurgeCommandFromHistory_Parms PurgeCommandFromHistory_Parms;
	memcpy ( &PurgeCommandFromHistory_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnPurgeCommandFromHistory, &PurgeCommandFromHistory_Parms, NULL );
};

// Function Engine.Console.SetCursorPos
// [0x00020002] 
// Parameters infos:
// int                            Position                       ( CPF_Parm )

void UConsole::SetCursorPos ( int Position )
{
	static UFunction* pFnSetCursorPos = NULL;

	if ( ! pFnSetCursorPos )
		pFnSetCursorPos = UObject::FindObject< UFunction > ( "Function Engine.Console.SetCursorPos" );

	UConsole_execSetCursorPos_Parms SetCursorPos_Parms;
	SetCursorPos_Parms.Position = Position;

	this->ProcessEvent ( pFnSetCursorPos, &SetCursorPos_Parms, NULL );
};

// Function Engine.Console.SetInputText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UConsole::SetInputText ( struct FString Text )
{
	static UFunction* pFnSetInputText = NULL;

	if ( ! pFnSetInputText )
		pFnSetInputText = UObject::FindObject< UFunction > ( "Function Engine.Console.SetInputText" );

	UConsole_execSetInputText_Parms SetInputText_Parms;
	memcpy ( &SetInputText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSetInputText, &SetInputText_Parms, NULL );
};

// Function Engine.Console.CompletionStop
// [0x00020002] 
// Parameters infos:
// unsigned long                  bReturnToBase                  ( CPF_Parm )

void UConsole::CompletionStop ( unsigned long bReturnToBase )
{
	static UFunction* pFnCompletionStop = NULL;

	if ( ! pFnCompletionStop )
		pFnCompletionStop = UObject::FindObject< UFunction > ( "Function Engine.Console.CompletionStop" );

	UConsole_execCompletionStop_Parms CompletionStop_Parms;
	CompletionStop_Parms.bReturnToBase = bReturnToBase;

	this->ProcessEvent ( pFnCompletionStop, &CompletionStop_Parms, NULL );
};

// Function Engine.Console.CompletionAuto
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNext                          ( CPF_Parm )

void UConsole::CompletionAuto ( unsigned long bNext )
{
	static UFunction* pFnCompletionAuto = NULL;

	if ( ! pFnCompletionAuto )
		pFnCompletionAuto = UObject::FindObject< UFunction > ( "Function Engine.Console.CompletionAuto" );

	UConsole_execCompletionAuto_Parms CompletionAuto_Parms;
	CompletionAuto_Parms.bNext = bNext;

	this->ProcessEvent ( pFnCompletionAuto, &CompletionAuto_Parms, NULL );
};

// Function Engine.Console.Initialized
// [0x00020002] 
// Parameters infos:

void UConsole::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.Console.Initialized" );

	UConsole_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVerbose                       ( CPF_Parm )

void UDataStoreClient::DebugDumpDataStoreInfo ( unsigned long bVerbose )
{
	static UFunction* pFnDebugDumpDataStoreInfo = NULL;

	if ( ! pFnDebugDumpDataStoreInfo )
		pFnDebugDumpDataStoreInfo = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.DebugDumpDataStoreInfo" );

	UDataStoreClient_execDebugDumpDataStoreInfo_Parms DebugDumpDataStoreInfo_Parms;
	DebugDumpDataStoreInfo_Parms.bVerbose = bVerbose;

	this->ProcessEvent ( pFnDebugDumpDataStoreInfo, &DebugDumpDataStoreInfo_Parms, NULL );
};

// Function Engine.DataStoreClient.NotifyGameSessionEnded
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UDataStoreClient::eventNotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.NotifyGameSessionEnded" );

	UDataStoreClient_eventNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.DataStoreClient.FindDataStoreClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  RequiredMetaClass              ( CPF_Parm )

class UClass* UDataStoreClient::FindDataStoreClass ( class UClass* RequiredMetaClass )
{
	static UFunction* pFnFindDataStoreClass = NULL;

	if ( ! pFnFindDataStoreClass )
		pFnFindDataStoreClass = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.FindDataStoreClass" );

	UDataStoreClient_execFindDataStoreClass_Parms FindDataStoreClass_Parms;
	FindDataStoreClass_Parms.RequiredMetaClass = RequiredMetaClass;

	this->ProcessEvent ( pFnFindDataStoreClass, &FindDataStoreClass_Parms, NULL );

	return FindDataStoreClass_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

int UDataStoreClient::FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindPlayerDataStoreIndex = NULL;

	if ( ! pFnFindPlayerDataStoreIndex )
		pFnFindPlayerDataStoreIndex = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.FindPlayerDataStoreIndex" );

	UDataStoreClient_execFindPlayerDataStoreIndex_Parms FindPlayerDataStoreIndex_Parms;
	FindPlayerDataStoreIndex_Parms.PlayerOwner = PlayerOwner;

	pFnFindPlayerDataStoreIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPlayerDataStoreIndex, &FindPlayerDataStoreIndex_Parms, NULL );

	pFnFindPlayerDataStoreIndex->FunctionFlags |= 0x400;

	return FindPlayerDataStoreIndex_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.GetAvailableDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                CurrentScene                   ( CPF_Parm )
// TArray< class UUIDataStore* >  out_DataStores                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UDataStoreClient::GetAvailableDataStores ( class UUIScene* CurrentScene, TArray< class UUIDataStore* >* out_DataStores )
{
	static UFunction* pFnGetAvailableDataStores = NULL;

	if ( ! pFnGetAvailableDataStores )
		pFnGetAvailableDataStores = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.GetAvailableDataStores" );

	UDataStoreClient_execGetAvailableDataStores_Parms GetAvailableDataStores_Parms;
	GetAvailableDataStores_Parms.CurrentScene = CurrentScene;

	pFnGetAvailableDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableDataStores, &GetAvailableDataStores_Parms, NULL );

	pFnGetAvailableDataStores->FunctionFlags |= 0x400;

	if ( out_DataStores )
		memcpy ( out_DataStores, &GetAvailableDataStores_Parms.out_DataStores, 0xC );
};

// Function Engine.DataStoreClient.UnregisterDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )

bool UDataStoreClient::UnregisterDataStore ( class UUIDataStore* DataStore )
{
	static UFunction* pFnUnregisterDataStore = NULL;

	if ( ! pFnUnregisterDataStore )
		pFnUnregisterDataStore = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.UnregisterDataStore" );

	UDataStoreClient_execUnregisterDataStore_Parms UnregisterDataStore_Parms;
	UnregisterDataStore_Parms.DataStore = DataStore;

	pFnUnregisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterDataStore, &UnregisterDataStore_Parms, NULL );

	pFnUnregisterDataStore->FunctionFlags |= 0x400;

	return UnregisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.RegisterDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

bool UDataStoreClient::RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegisterDataStore = NULL;

	if ( ! pFnRegisterDataStore )
		pFnRegisterDataStore = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.RegisterDataStore" );

	UDataStoreClient_execRegisterDataStore_Parms RegisterDataStore_Parms;
	RegisterDataStore_Parms.DataStore = DataStore;
	RegisterDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnRegisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterDataStore, &RegisterDataStore_Parms, NULL );

	pFnRegisterDataStore->FunctionFlags |= 0x400;

	return RegisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.CreateDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  DataStoreClass                 ( CPF_Parm )

class UUIDataStore* UDataStoreClient::CreateDataStore ( class UClass* DataStoreClass )
{
	static UFunction* pFnCreateDataStore = NULL;

	if ( ! pFnCreateDataStore )
		pFnCreateDataStore = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.CreateDataStore" );

	UDataStoreClient_execCreateDataStore_Parms CreateDataStore_Parms;
	CreateDataStore_Parms.DataStoreClass = DataStoreClass;

	pFnCreateDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDataStore, &CreateDataStore_Parms, NULL );

	pFnCreateDataStore->FunctionFlags |= 0x400;

	return CreateDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.FindDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UDataStoreClient::FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindDataStore = NULL;

	if ( ! pFnFindDataStore )
		pFnFindDataStore = UObject::FindObject< UFunction > ( "Function Engine.DataStoreClient.FindDataStore" );

	UDataStoreClient_execFindDataStore_Parms FindDataStore_Parms;
	memcpy ( &FindDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	FindDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnFindDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindDataStore, &FindDataStore_Parms, NULL );

	pFnFindDataStore->FunctionFlags |= 0x400;

	return FindDataStore_Parms.ReturnValue;
};

// Function Engine.Input.GetBind
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   Key                            ( CPF_Parm )

struct FString UInput::GetBind ( struct FName Key )
{
	static UFunction* pFnGetBind = NULL;

	if ( ! pFnGetBind )
		pFnGetBind = UObject::FindObject< UFunction > ( "Function Engine.Input.GetBind" );

	UInput_execGetBind_Parms GetBind_Parms;
	memcpy ( &GetBind_Parms.Key, &Key, 0x8 );

	pFnGetBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBind, &GetBind_Parms, NULL );

	pFnGetBind->FunctionFlags |= 0x400;

	return GetBind_Parms.ReturnValue;
};

// Function Engine.Input.ResetInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UInput::ResetInput ( )
{
	static UFunction* pFnResetInput = NULL;

	if ( ! pFnResetInput )
		pFnResetInput = UObject::FindObject< UFunction > ( "Function Engine.Input.ResetInput" );

	UInput_execResetInput_Parms ResetInput_Parms;

	pFnResetInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetInput, &ResetInput_Parms, NULL );

	pFnResetInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerInput.SmoothMouse
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          aMouse                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// unsigned char                  SampleCount                    ( CPF_Parm | CPF_OutParm )

float UPlayerInput::SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount )
{
	static UFunction* pFnSmoothMouse = NULL;

	if ( ! pFnSmoothMouse )
		pFnSmoothMouse = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.SmoothMouse" );

	UPlayerInput_execSmoothMouse_Parms SmoothMouse_Parms;
	SmoothMouse_Parms.aMouse = aMouse;
	SmoothMouse_Parms.DeltaTime = DeltaTime;
	SmoothMouse_Parms.Index = Index;

	this->ProcessEvent ( pFnSmoothMouse, &SmoothMouse_Parms, NULL );

	if ( SampleCount )
		*SampleCount = SmoothMouse_Parms.SampleCount;

	return SmoothMouse_Parms.ReturnValue;
};

// Function Engine.PlayerInput.ClearSmoothing
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::ClearSmoothing ( )
{
	static UFunction* pFnClearSmoothing = NULL;

	if ( ! pFnClearSmoothing )
		pFnClearSmoothing = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.ClearSmoothing" );

	UPlayerInput_execClearSmoothing_Parms ClearSmoothing_Parms;

	this->ProcessEvent ( pFnClearSmoothing, &ClearSmoothing_Parms, NULL );
};

// Function Engine.PlayerInput.SmartJump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::SmartJump ( )
{
	static UFunction* pFnSmartJump = NULL;

	if ( ! pFnSmartJump )
		pFnSmartJump = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.SmartJump" );

	UPlayerInput_execSmartJump_Parms SmartJump_Parms;

	this->ProcessEvent ( pFnSmartJump, &SmartJump_Parms, NULL );
};

// Function Engine.PlayerInput.Jump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::Jump ( )
{
	static UFunction* pFnJump = NULL;

	if ( ! pFnJump )
		pFnJump = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.Jump" );

	UPlayerInput_execJump_Parms Jump_Parms;

	this->ProcessEvent ( pFnJump, &Jump_Parms, NULL );
};

// Function Engine.PlayerInput.ProcessInputMatching
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::ProcessInputMatching ( float DeltaTime )
{
	static UFunction* pFnProcessInputMatching = NULL;

	if ( ! pFnProcessInputMatching )
		pFnProcessInputMatching = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.ProcessInputMatching" );

	UPlayerInput_execProcessInputMatching_Parms ProcessInputMatching_Parms;
	ProcessInputMatching_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessInputMatching, &ProcessInputMatching_Parms, NULL );
};

// Function Engine.PlayerInput.PlayerInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::eventPlayerInput ( float DeltaTime )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.PlayerInput" );

	UPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;
	PlayerInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function Engine.PlayerInput.AdjustMouseSensitivity
// [0x00020002] 
// Parameters infos:
// float                          FOVScale                       ( CPF_Parm )

void UPlayerInput::AdjustMouseSensitivity ( float FOVScale )
{
	static UFunction* pFnAdjustMouseSensitivity = NULL;

	if ( ! pFnAdjustMouseSensitivity )
		pFnAdjustMouseSensitivity = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.AdjustMouseSensitivity" );

	UPlayerInput_execAdjustMouseSensitivity_Parms AdjustMouseSensitivity_Parms;
	AdjustMouseSensitivity_Parms.FOVScale = FOVScale;

	this->ProcessEvent ( pFnAdjustMouseSensitivity, &AdjustMouseSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.PostProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PostProcessInput ( float DeltaTime )
{
	static UFunction* pFnPostProcessInput = NULL;

	if ( ! pFnPostProcessInput )
		pFnPostProcessInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.PostProcessInput" );

	UPlayerInput_execPostProcessInput_Parms PostProcessInput_Parms;
	PostProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPostProcessInput, &PostProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.PreProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PreProcessInput ( float DeltaTime )
{
	static UFunction* pFnPreProcessInput = NULL;

	if ( ! pFnPreProcessInput )
		pFnPreProcessInput = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.PreProcessInput" );

	UPlayerInput_execPreProcessInput_Parms PreProcessInput_Parms;
	PreProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPreProcessInput, &PreProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.DrawHUD
// [0x00020000] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void UPlayerInput::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.DrawHUD" );

	UPlayerInput_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerInput.SetSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UPlayerInput::SetSensitivity ( float F )
{
	static UFunction* pFnSetSensitivity = NULL;

	if ( ! pFnSetSensitivity )
		pFnSetSensitivity = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.SetSensitivity" );

	UPlayerInput_execSetSensitivity_Parms SetSensitivity_Parms;
	SetSensitivity_Parms.F = F;

	this->ProcessEvent ( pFnSetSensitivity, &SetSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.InvertTurn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerInput::InvertTurn ( )
{
	static UFunction* pFnInvertTurn = NULL;

	if ( ! pFnInvertTurn )
		pFnInvertTurn = UObject::FindObject< UFunction > ( "Function Engine.PlayerInput.InvertTurn" );

	UPlayerInput_execInvertTurn_Parms InvertTurn_Parms;

	this->ProcessEvent ( pFnInvertTurn, &InvertTurn_Parms, NULL );

	return InvertTurn_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.LogCurrentState
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScreenObject::LogCurrentState ( int Indent )
{
	static UFunction* pFnLogCurrentState = NULL;

	if ( ! pFnLogCurrentState )
		pFnLogCurrentState = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.LogCurrentState" );

	UUIScreenObject_execLogCurrentState_Parms LogCurrentState_Parms;
	LogCurrentState_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogCurrentState, &LogCurrentState_Parms, NULL );
};

// Function Engine.UIScreenObject.OnSetControllerId
// [0x00020002] 
// Parameters infos:
// class UUIAction_SetControllerId* Action                         ( CPF_Parm )

void UUIScreenObject::OnSetControllerId ( class UUIAction_SetControllerId* Action )
{
	static UFunction* pFnOnSetControllerId = NULL;

	if ( ! pFnOnSetControllerId )
		pFnOnSetControllerId = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnSetControllerId" );

	UUIScreenObject_execOnSetControllerId_Parms OnSetControllerId_Parms;
	OnSetControllerId_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetControllerId, &OnSetControllerId_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowMembershipMarketplaceUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowMembershipMarketplaceUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowMembershipMarketplaceUI ( class UUIAction_ShowMembershipMarketplaceUI* Action )
{
	static UFunction* pFnOnShowMembershipMarketplaceUI = NULL;

	if ( ! pFnOnShowMembershipMarketplaceUI )
		pFnOnShowMembershipMarketplaceUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowMembershipMarketplaceUI" );

	UUIScreenObject_execOnShowMembershipMarketplaceUI_Parms OnShowMembershipMarketplaceUI_Parms;
	OnShowMembershipMarketplaceUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowMembershipMarketplaceUI, &OnShowMembershipMarketplaceUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowContentMarketplaceUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowContentMarketplaceUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowContentMarketplaceUI ( class UUIAction_ShowContentMarketplaceUI* Action )
{
	static UFunction* pFnOnShowContentMarketplaceUI = NULL;

	if ( ! pFnOnShowContentMarketplaceUI )
		pFnOnShowContentMarketplaceUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowContentMarketplaceUI" );

	UUIScreenObject_execOnShowContentMarketplaceUI_Parms OnShowContentMarketplaceUI_Parms;
	OnShowContentMarketplaceUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowContentMarketplaceUI, &OnShowContentMarketplaceUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowGamerCardUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowGamerCardUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowGamerCardUI ( class UUIAction_ShowGamerCardUI* Action )
{
	static UFunction* pFnOnShowGamerCardUI = NULL;

	if ( ! pFnOnShowGamerCardUI )
		pFnOnShowGamerCardUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowGamerCardUI" );

	UUIScreenObject_execOnShowGamerCardUI_Parms OnShowGamerCardUI_Parms;
	OnShowGamerCardUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowGamerCardUI, &OnShowGamerCardUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowFeedbackUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowFeedbackUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowFeedbackUI ( class UUIAction_ShowFeedbackUI* Action )
{
	static UFunction* pFnOnShowFeedbackUI = NULL;

	if ( ! pFnOnShowFeedbackUI )
		pFnOnShowFeedbackUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowFeedbackUI" );

	UUIScreenObject_execOnShowFeedbackUI_Parms OnShowFeedbackUI_Parms;
	OnShowFeedbackUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowFeedbackUI, &OnShowFeedbackUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowMessagesUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowMessagesUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowMessagesUI ( class UUIAction_ShowMessagesUI* Action )
{
	static UFunction* pFnOnShowMessagesUI = NULL;

	if ( ! pFnOnShowMessagesUI )
		pFnOnShowMessagesUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowMessagesUI" );

	UUIScreenObject_execOnShowMessagesUI_Parms OnShowMessagesUI_Parms;
	OnShowMessagesUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowMessagesUI, &OnShowMessagesUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowFriendInviteUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowFriendInviteUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowFriendInviteUI ( class UUIAction_ShowFriendInviteUI* Action )
{
	static UFunction* pFnOnShowFriendInviteUI = NULL;

	if ( ! pFnOnShowFriendInviteUI )
		pFnOnShowFriendInviteUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowFriendInviteUI" );

	UUIScreenObject_execOnShowFriendInviteUI_Parms OnShowFriendInviteUI_Parms;
	OnShowFriendInviteUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowFriendInviteUI, &OnShowFriendInviteUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowAchievementsUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowAchievementsUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowAchievementsUI ( class UUIAction_ShowAchievementsUI* Action )
{
	static UFunction* pFnOnShowAchievementsUI = NULL;

	if ( ! pFnOnShowAchievementsUI )
		pFnOnShowAchievementsUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowAchievementsUI" );

	UUIScreenObject_execOnShowAchievementsUI_Parms OnShowAchievementsUI_Parms;
	OnShowAchievementsUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowAchievementsUI, &OnShowAchievementsUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowPlayersUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowPlayersUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowPlayersUI ( class UUIAction_ShowPlayersUI* Action )
{
	static UFunction* pFnOnShowPlayersUI = NULL;

	if ( ! pFnOnShowPlayersUI )
		pFnOnShowPlayersUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowPlayersUI" );

	UUIScreenObject_execOnShowPlayersUI_Parms OnShowPlayersUI_Parms;
	OnShowPlayersUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowPlayersUI, &OnShowPlayersUI_Parms, NULL );
};

// Function Engine.UIScreenObject.OnShowFriendsUI
// [0x00020002] 
// Parameters infos:
// class UUIAction_ShowFriendsUI* Action                         ( CPF_Parm )

void UUIScreenObject::OnShowFriendsUI ( class UUIAction_ShowFriendsUI* Action )
{
	static UFunction* pFnOnShowFriendsUI = NULL;

	if ( ! pFnOnShowFriendsUI )
		pFnOnShowFriendsUI = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnShowFriendsUI" );

	UUIScreenObject_execOnShowFriendsUI_Parms OnShowFriendsUI_Parms;
	OnShowFriendsUI_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowFriendsUI, &OnShowFriendsUI_Parms, NULL );
};

// Function Engine.UIScreenObject.GetNATType
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScreenObject::GetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetNATType" );

	UUIScreenObject_execGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanPlayOnline
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::CanPlayOnline ( int ControllerId )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.CanPlayOnline" );

	UUIScreenObject_execCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.HasLinkConnection
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::HasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.HasLinkConnection" );

	UUIScreenObject_execHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetLoginStatus
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIScreenObject::GetLoginStatus ( int ControllerId )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetLoginStatus" );

	UUIScreenObject_execGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetBestControllerId
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetBestControllerId ( )
{
	static UFunction* pFnGetBestControllerId = NULL;

	if ( ! pFnGetBestControllerId )
		pFnGetBestControllerId = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetBestControllerId" );

	UUIScreenObject_execGetBestControllerId_Parms GetBestControllerId_Parms;

	this->ProcessEvent ( pFnGetBestControllerId, &GetBestControllerId_Parms, NULL );

	return GetBestControllerId_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnConsoleCommand
// [0x00020002] 
// Parameters infos:
// class UUIAction_ConsoleCommand* Action                         ( CPF_Parm )

void UUIScreenObject::OnConsoleCommand ( class UUIAction_ConsoleCommand* Action )
{
	static UFunction* pFnOnConsoleCommand = NULL;

	if ( ! pFnOnConsoleCommand )
		pFnOnConsoleCommand = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnConsoleCommand" );

	UUIScreenObject_execOnConsoleCommand_Parms OnConsoleCommand_Parms;
	OnConsoleCommand_Parms.Action = Action;

	this->ProcessEvent ( pFnOnConsoleCommand, &OnConsoleCommand_Parms, NULL );
};

// Function Engine.UIScreenObject.DisableWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::DisableWidget ( int PlayerIndex )
{
	static UFunction* pFnDisableWidget = NULL;

	if ( ! pFnDisableWidget )
		pFnDisableWidget = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.DisableWidget" );

	UUIScreenObject_execDisableWidget_Parms DisableWidget_Parms;
	DisableWidget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDisableWidget, &DisableWidget_Parms, NULL );

	return DisableWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.EnableWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::EnableWidget ( int PlayerIndex )
{
	static UFunction* pFnEnableWidget = NULL;

	if ( ! pFnEnableWidget )
		pFnEnableWidget = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.EnableWidget" );

	UUIScreenObject_execEnableWidget_Parms EnableWidget_Parms;
	EnableWidget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnEnableWidget, &EnableWidget_Parms, NULL );

	return EnableWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnChangeVisibility
// [0x00020002] 
// Parameters infos:
// class UUIAction_ChangeVisibility* Action                         ( CPF_Parm )

void UUIScreenObject::OnChangeVisibility ( class UUIAction_ChangeVisibility* Action )
{
	static UFunction* pFnOnChangeVisibility = NULL;

	if ( ! pFnOnChangeVisibility )
		pFnOnChangeVisibility = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnChangeVisibility" );

	UUIScreenObject_execOnChangeVisibility_Parms OnChangeVisibility_Parms;
	OnChangeVisibility_Parms.Action = Action;

	this->ProcessEvent ( pFnOnChangeVisibility, &OnChangeVisibility_Parms, NULL );
};

// Function Engine.UIScreenObject.GetParent
// [0x00020000] 
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIScreenObject::GetParent ( )
{
	static UFunction* pFnGetParent = NULL;

	if ( ! pFnGetParent )
		pFnGetParent = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetParent" );

	UUIScreenObject_execGetParent_Parms GetParent_Parms;

	this->ProcessEvent ( pFnGetParent, &GetParent_Parms, NULL );

	return GetParent_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedUIActionKeyNames
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         out_KeyNames                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::eventGetSupportedUIActionKeyNames ( TArray< struct FName >* out_KeyNames )
{
	static UFunction* pFnGetSupportedUIActionKeyNames = NULL;

	if ( ! pFnGetSupportedUIActionKeyNames )
		pFnGetSupportedUIActionKeyNames = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetSupportedUIActionKeyNames" );

	UUIScreenObject_eventGetSupportedUIActionKeyNames_Parms GetSupportedUIActionKeyNames_Parms;

	this->ProcessEvent ( pFnGetSupportedUIActionKeyNames, &GetSupportedUIActionKeyNames_Parms, NULL );

	if ( out_KeyNames )
		memcpy ( out_KeyNames, &GetSupportedUIActionKeyNames_Parms.out_KeyNames, 0xC );
};

// Function Engine.UIScreenObject.SetInputMask
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  NewInputMask                   ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse )
{
	static UFunction* pFnSetInputMask = NULL;

	if ( ! pFnSetInputMask )
		pFnSetInputMask = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.SetInputMask" );

	UUIScreenObject_eventSetInputMask_Parms SetInputMask_Parms;
	SetInputMask_Parms.NewInputMask = NewInputMask;
	SetInputMask_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnSetInputMask, &SetInputMask_Parms, NULL );
};

// Function Engine.UIScreenObject.DisablePlayerInput
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventDisablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse )
{
	static UFunction* pFnDisablePlayerInput = NULL;

	if ( ! pFnDisablePlayerInput )
		pFnDisablePlayerInput = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.DisablePlayerInput" );

	UUIScreenObject_eventDisablePlayerInput_Parms DisablePlayerInput_Parms;
	DisablePlayerInput_Parms.PlayerIndex = PlayerIndex;
	DisablePlayerInput_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnDisablePlayerInput, &DisablePlayerInput_Parms, NULL );
};

// Function Engine.UIScreenObject.EnablePlayerInput
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventEnablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse )
{
	static UFunction* pFnEnablePlayerInput = NULL;

	if ( ! pFnEnablePlayerInput )
		pFnEnablePlayerInput = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.EnablePlayerInput" );

	UUIScreenObject_eventEnablePlayerInput_Parms EnablePlayerInput_Parms;
	EnablePlayerInput_Parms.PlayerIndex = PlayerIndex;
	EnablePlayerInput_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnEnablePlayerInput, &EnablePlayerInput_Parms, NULL );
};

// Function Engine.UIScreenObject.IsHidden
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsHidden ( )
{
	static UFunction* pFnIsHidden = NULL;

	if ( ! pFnIsHidden )
		pFnIsHidden = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsHidden" );

	UUIScreenObject_execIsHidden_Parms IsHidden_Parms;

	this->ProcessEvent ( pFnIsHidden, &IsHidden_Parms, NULL );

	return IsHidden_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsVisible ( )
{
	static UFunction* pFnIsVisible = NULL;

	if ( ! pFnIsVisible )
		pFnIsVisible = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsVisible" );

	UUIScreenObject_execIsVisible_Parms IsVisible_Parms;

	this->ProcessEvent ( pFnIsVisible, &IsVisible_Parms, NULL );

	return IsVisible_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScreenObject::SetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.SetVisibility" );

	UUIScreenObject_execSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bIsVisible = bIsVisible;

	pFnSetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );

	pFnSetVisibility->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.PrivateSetVisibility
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void UUIScreenObject::PrivateSetVisibility ( unsigned long bVisible )
{
	static UFunction* pFnPrivateSetVisibility = NULL;

	if ( ! pFnPrivateSetVisibility )
		pFnPrivateSetVisibility = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.PrivateSetVisibility" );

	UUIScreenObject_execPrivateSetVisibility_Parms PrivateSetVisibility_Parms;
	PrivateSetVisibility_Parms.bVisible = bVisible;

	pFnPrivateSetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrivateSetVisibility, &PrivateSetVisibility_Parms, NULL );

	pFnPrivateSetVisibility->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.IsLoggedIn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnIsLoggedIn = NULL;

	if ( ! pFnIsLoggedIn )
		pFnIsLoggedIn = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsLoggedIn" );

	UUIScreenObject_eventIsLoggedIn_Parms IsLoggedIn_Parms;
	IsLoggedIn_Parms.ControllerId = ControllerId;
	IsLoggedIn_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnIsLoggedIn, &IsLoggedIn_Parms, NULL );

	return IsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemovedFromParent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUIScreenObject::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RemovedFromParent" );

	UUIScreenObject_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UIScreenObject.RemovedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUIScreenObject::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RemovedChild" );

	UUIScreenObject_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UIScreenObject.AddedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUIScreenObject::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.AddedChild" );

	UUIScreenObject_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UIScreenObject.PostInitialize
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScreenObject::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.PostInitialize" );

	UUIScreenObject_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIScreenObject.Initialized
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScreenObject::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.Initialized" );

	UUIScreenObject_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIScreenObject.GetWidgetPathName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUIScreenObject::GetWidgetPathName ( )
{
	static UFunction* pFnGetWidgetPathName = NULL;

	if ( ! pFnGetWidgetPathName )
		pFnGetWidgetPathName = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetWidgetPathName" );

	UUIScreenObject_execGetWidgetPathName_Parms GetWidgetPathName_Parms;

	pFnGetWidgetPathName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWidgetPathName, &GetWidgetPathName_Parms, NULL );

	pFnGetWidgetPathName->FunctionFlags |= 0x400;

	return GetWidgetPathName_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFont*                   BaseFont                       ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetAspectRatioAutoScaleFactor ( class UFont* BaseFont )
{
	static UFunction* pFnGetAspectRatioAutoScaleFactor = NULL;

	if ( ! pFnGetAspectRatioAutoScaleFactor )
		pFnGetAspectRatioAutoScaleFactor = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor" );

	UUIScreenObject_execGetAspectRatioAutoScaleFactor_Parms GetAspectRatioAutoScaleFactor_Parms;
	GetAspectRatioAutoScaleFactor_Parms.BaseFont = BaseFont;

	pFnGetAspectRatioAutoScaleFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAspectRatioAutoScaleFactor, &GetAspectRatioAutoScaleFactor_Parms, NULL );

	pFnGetAspectRatioAutoScaleFactor->FunctionFlags |= 0x400;

	return GetAspectRatioAutoScaleFactor_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetInverseCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUIScreenObject::GetInverseCanvasToScreen ( )
{
	static UFunction* pFnGetInverseCanvasToScreen = NULL;

	if ( ! pFnGetInverseCanvasToScreen )
		pFnGetInverseCanvasToScreen = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetInverseCanvasToScreen" );

	UUIScreenObject_execGetInverseCanvasToScreen_Parms GetInverseCanvasToScreen_Parms;

	pFnGetInverseCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Parms, NULL );

	pFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;

	return GetInverseCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUIScreenObject::GetCanvasToScreen ( )
{
	static UFunction* pFnGetCanvasToScreen = NULL;

	if ( ! pFnGetCanvasToScreen )
		pFnGetCanvasToScreen = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetCanvasToScreen" );

	UUIScreenObject_execGetCanvasToScreen_Parms GetCanvasToScreen_Parms;

	pFnGetCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanvasToScreen, &GetCanvasToScreen_Parms, NULL );

	pFnGetCanvasToScreen->FunctionFlags |= 0x400;

	return GetCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToCanvas
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::PixelToCanvas ( struct FVector2D* PixelPosition )
{
	static UFunction* pFnPixelToCanvas = NULL;

	if ( ! pFnPixelToCanvas )
		pFnPixelToCanvas = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.PixelToCanvas" );

	UUIScreenObject_execPixelToCanvas_Parms PixelToCanvas_Parms;

	pFnPixelToCanvas->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPixelToCanvas, &PixelToCanvas_Parms, NULL );

	pFnPixelToCanvas->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &PixelToCanvas_Parms.PixelPosition, 0x8 );

	return PixelToCanvas_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToCanvas
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector4                ScreenPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::ScreenToCanvas ( struct FVector4* ScreenPosition )
{
	static UFunction* pFnScreenToCanvas = NULL;

	if ( ! pFnScreenToCanvas )
		pFnScreenToCanvas = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ScreenToCanvas" );

	UUIScreenObject_execScreenToCanvas_Parms ScreenToCanvas_Parms;

	pFnScreenToCanvas->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScreenToCanvas, &ScreenToCanvas_Parms, NULL );

	pFnScreenToCanvas->FunctionFlags |= 0x400;

	if ( ScreenPosition )
		memcpy ( ScreenPosition, &ScreenToCanvas_Parms.ScreenPosition, 0x10 );

	return ScreenToCanvas_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToScreen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector4                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector4 UUIScreenObject::PixelToScreen ( struct FVector2D* PixelPosition )
{
	static UFunction* pFnPixelToScreen = NULL;

	if ( ! pFnPixelToScreen )
		pFnPixelToScreen = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.PixelToScreen" );

	UUIScreenObject_execPixelToScreen_Parms PixelToScreen_Parms;

	pFnPixelToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPixelToScreen, &PixelToScreen_Parms, NULL );

	pFnPixelToScreen->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &PixelToScreen_Parms.PixelPosition, 0x8 );

	return PixelToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToPixel
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector4                ScreenPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector2D UUIScreenObject::ScreenToPixel ( struct FVector4* ScreenPosition )
{
	static UFunction* pFnScreenToPixel = NULL;

	if ( ! pFnScreenToPixel )
		pFnScreenToPixel = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ScreenToPixel" );

	UUIScreenObject_execScreenToPixel_Parms ScreenToPixel_Parms;

	pFnScreenToPixel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScreenToPixel, &ScreenToPixel_Parms, NULL );

	pFnScreenToPixel->FunctionFlags |= 0x400;

	if ( ScreenPosition )
		memcpy ( ScreenPosition, &ScreenToPixel_Parms.ScreenPosition, 0x10 );

	return ScreenToPixel_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanvasToScreen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector4                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CanvasPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector4 UUIScreenObject::CanvasToScreen ( struct FVector* CanvasPosition )
{
	static UFunction* pFnCanvasToScreen = NULL;

	if ( ! pFnCanvasToScreen )
		pFnCanvasToScreen = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.CanvasToScreen" );

	UUIScreenObject_execCanvasToScreen_Parms CanvasToScreen_Parms;

	pFnCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanvasToScreen, &CanvasToScreen_Parms, NULL );

	pFnCanvasToScreen->FunctionFlags |= 0x400;

	if ( CanvasPosition )
		memcpy ( CanvasPosition, &CanvasToScreen_Parms.CanvasPosition, 0xC );

	return CanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::DeProject ( struct FVector* PixelPosition )
{
	static UFunction* pFnDeProject = NULL;

	if ( ! pFnDeProject )
		pFnDeProject = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.DeProject" );

	UUIScreenObject_execDeProject_Parms DeProject_Parms;

	pFnDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeProject, &DeProject_Parms, NULL );

	pFnDeProject->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &DeProject_Parms.PixelPosition, 0xC );

	return DeProject_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Project
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CanvasPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::Project ( struct FVector* CanvasPosition )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.Project" );

	UUIScreenObject_execProject_Parms Project_Parms;

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	if ( CanvasPosition )
		memcpy ( CanvasPosition, &Project_Parms.CanvasPosition, 0xC );

	return Project_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetDockedWidgets
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  SourceFace                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIObject* >     out_DockedWidgets              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::GetDockedWidgets ( unsigned char SourceFace, unsigned char TargetFace, TArray< class UUIObject* >* out_DockedWidgets )
{
	static UFunction* pFnGetDockedWidgets = NULL;

	if ( ! pFnGetDockedWidgets )
		pFnGetDockedWidgets = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetDockedWidgets" );

	UUIScreenObject_execGetDockedWidgets_Parms GetDockedWidgets_Parms;
	GetDockedWidgets_Parms.SourceFace = SourceFace;
	GetDockedWidgets_Parms.TargetFace = TargetFace;

	pFnGetDockedWidgets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDockedWidgets, &GetDockedWidgets_Parms, NULL );

	pFnGetDockedWidgets->FunctionFlags |= 0x400;

	if ( out_DockedWidgets )
		memcpy ( out_DockedWidgets, &GetDockedWidgets_Parms.out_DockedWidgets, 0xC );
};

// Function Engine.UIScreenObject.GetPositionVector
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentPosition         ( CPF_OptionalParm | CPF_Parm )

struct FVector UUIScreenObject::GetPositionVector ( unsigned long bIncludeParentPosition )
{
	static UFunction* pFnGetPositionVector = NULL;

	if ( ! pFnGetPositionVector )
		pFnGetPositionVector = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetPositionVector" );

	UUIScreenObject_execGetPositionVector_Parms GetPositionVector_Parms;
	GetPositionVector_Parms.bIncludeParentPosition = bIncludeParentPosition;

	pFnGetPositionVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionVector, &GetPositionVector_Parms, NULL );

	pFnGetPositionVector->FunctionFlags |= 0x400;

	return GetPositionVector_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetBounds
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Dimension                      ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDockPadding             ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding )
{
	static UFunction* pFnGetBounds = NULL;

	if ( ! pFnGetBounds )
		pFnGetBounds = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetBounds" );

	UUIScreenObject_execGetBounds_Parms GetBounds_Parms;
	GetBounds_Parms.Dimension = Dimension;
	GetBounds_Parms.OutputType = OutputType;
	GetBounds_Parms.bIgnoreDockPadding = bIgnoreDockPadding;

	pFnGetBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBounds, &GetBounds_Parms, NULL );

	pFnGetBounds->FunctionFlags |= 0x400;

	return GetBounds_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bZeroOrigin                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDockPadding             ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetPosition ( unsigned char Face, unsigned char OutputType, unsigned long bZeroOrigin, unsigned long bIgnoreDockPadding )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetPosition" );

	UUIScreenObject_execGetPosition_Parms GetPosition_Parms;
	GetPosition_Parms.Face = Face;
	GetPosition_Parms.OutputType = OutputType;
	GetPosition_Parms.bZeroOrigin = bZeroOrigin;
	GetPosition_Parms.bIgnoreDockPadding = bIgnoreDockPadding;

	pFnGetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	pFnGetPosition->FunctionFlags |= 0x400;

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned char                  InputType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bZeroOrigin                    ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::SetPosition ( float NewValue, unsigned char Face, unsigned char InputType, unsigned long bZeroOrigin )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.SetPosition" );

	UUIScreenObject_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewValue = NewValue;
	SetPosition_Parms.Face = Face;
	SetPosition_Parms.InputType = InputType;
	SetPosition_Parms.bZeroOrigin = bZeroOrigin;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetBestPlayerIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetBestPlayerIndex ( )
{
	static UFunction* pFnGetBestPlayerIndex = NULL;

	if ( ! pFnGetBestPlayerIndex )
		pFnGetBestPlayerIndex = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetBestPlayerIndex" );

	UUIScreenObject_execGetBestPlayerIndex_Parms GetBestPlayerIndex_Parms;

	pFnGetBestPlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestPlayerIndex, &GetBestPlayerIndex_Parms, NULL );

	pFnGetBestPlayerIndex->FunctionFlags |= 0x400;

	return GetBestPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedPlayerCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetSupportedPlayerCount ( )
{
	static UFunction* pFnGetSupportedPlayerCount = NULL;

	if ( ! pFnGetSupportedPlayerCount )
		pFnGetSupportedPlayerCount = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetSupportedPlayerCount" );

	UUIScreenObject_execGetSupportedPlayerCount_Parms GetSupportedPlayerCount_Parms;

	pFnGetSupportedPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSupportedPlayerCount, &GetSupportedPlayerCount_Parms, NULL );

	pFnGetSupportedPlayerCount->FunctionFlags |= 0x400;

	return GetSupportedPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetActivePlayerCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetActivePlayerCount ( )
{
	static UFunction* pFnGetActivePlayerCount = NULL;

	if ( ! pFnGetActivePlayerCount )
		pFnGetActivePlayerCount = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetActivePlayerCount" );

	UUIScreenObject_execGetActivePlayerCount_Parms GetActivePlayerCount_Parms;

	pFnGetActivePlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActivePlayerCount, &GetActivePlayerCount_Parms, NULL );

	pFnGetActivePlayerCount->FunctionFlags |= 0x400;

	return GetActivePlayerCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.AcceptsPlayerInput
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::AcceptsPlayerInput ( int PlayerIndex )
{
	static UFunction* pFnAcceptsPlayerInput = NULL;

	if ( ! pFnAcceptsPlayerInput )
		pFnAcceptsPlayerInput = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.AcceptsPlayerInput" );

	UUIScreenObject_execAcceptsPlayerInput_Parms AcceptsPlayerInput_Parms;
	AcceptsPlayerInput_Parms.PlayerIndex = PlayerIndex;

	pFnAcceptsPlayerInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcceptsPlayerInput, &AcceptsPlayerInput_Parms, NULL );

	pFnAcceptsPlayerInput->FunctionFlags |= 0x400;

	return AcceptsPlayerInput_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsPressed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsPressed ( int PlayerIndex )
{
	static UFunction* pFnIsPressed = NULL;

	if ( ! pFnIsPressed )
		pFnIsPressed = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsPressed" );

	UUIScreenObject_execIsPressed_Parms IsPressed_Parms;
	IsPressed_Parms.PlayerIndex = PlayerIndex;

	pFnIsPressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPressed, &IsPressed_Parms, NULL );

	pFnIsPressed->FunctionFlags |= 0x400;

	return IsPressed_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsActive ( int PlayerIndex )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsActive" );

	UUIScreenObject_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.PlayerIndex = PlayerIndex;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsFocused
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsFocused ( int PlayerIndex )
{
	static UFunction* pFnIsFocused = NULL;

	if ( ! pFnIsFocused )
		pFnIsFocused = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsFocused" );

	UUIScreenObject_execIsFocused_Parms IsFocused_Parms;
	IsFocused_Parms.PlayerIndex = PlayerIndex;

	pFnIsFocused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFocused, &IsFocused_Parms, NULL );

	pFnIsFocused->FunctionFlags |= 0x400;

	return IsFocused_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCheckOwnerChain               ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsEnabled ( int PlayerIndex, unsigned long bCheckOwnerChain )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsEnabled" );

	UUIScreenObject_execIsEnabled_Parms IsEnabled_Parms;
	IsEnabled_Parms.PlayerIndex = PlayerIndex;
	IsEnabled_Parms.bCheckOwnerChain = bCheckOwnerChain;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OverrideLastFocusedControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIObject*               ChildToFocus                   ( CPF_Parm )

void UUIScreenObject::OverrideLastFocusedControl ( int PlayerIndex, class UUIObject* ChildToFocus )
{
	static UFunction* pFnOverrideLastFocusedControl = NULL;

	if ( ! pFnOverrideLastFocusedControl )
		pFnOverrideLastFocusedControl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OverrideLastFocusedControl" );

	UUIScreenObject_execOverrideLastFocusedControl_Parms OverrideLastFocusedControl_Parms;
	OverrideLastFocusedControl_Parms.PlayerIndex = PlayerIndex;
	OverrideLastFocusedControl_Parms.ChildToFocus = ChildToFocus;

	pFnOverrideLastFocusedControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverrideLastFocusedControl, &OverrideLastFocusedControl_Parms, NULL );

	pFnOverrideLastFocusedControl->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetLastFocusedControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::GetLastFocusedControl ( unsigned long bRecurse, int PlayerIndex )
{
	static UFunction* pFnGetLastFocusedControl = NULL;

	if ( ! pFnGetLastFocusedControl )
		pFnGetLastFocusedControl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetLastFocusedControl" );

	UUIScreenObject_execGetLastFocusedControl_Parms GetLastFocusedControl_Parms;
	GetLastFocusedControl_Parms.bRecurse = bRecurse;
	GetLastFocusedControl_Parms.PlayerIndex = PlayerIndex;

	pFnGetLastFocusedControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastFocusedControl, &GetLastFocusedControl_Parms, NULL );

	pFnGetLastFocusedControl->FunctionFlags |= 0x400;

	return GetLastFocusedControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetFocusedControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::GetFocusedControl ( unsigned long bRecurse, int PlayerIndex )
{
	static UFunction* pFnGetFocusedControl = NULL;

	if ( ! pFnGetFocusedControl )
		pFnGetFocusedControl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetFocusedControl" );

	UUIScreenObject_execGetFocusedControl_Parms GetFocusedControl_Parms;
	GetFocusedControl_Parms.bRecurse = bRecurse;
	GetFocusedControl_Parms.PlayerIndex = PlayerIndex;

	pFnGetFocusedControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFocusedControl, &GetFocusedControl_Parms, NULL );

	pFnGetFocusedControl->FunctionFlags |= 0x400;

	return GetFocusedControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.KillFocus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::KillFocus ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnKillFocus = NULL;

	if ( ! pFnKillFocus )
		pFnKillFocus = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.KillFocus" );

	UUIScreenObject_execKillFocus_Parms KillFocus_Parms;
	KillFocus_Parms.Sender = Sender;
	KillFocus_Parms.PlayerIndex = PlayerIndex;

	pFnKillFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillFocus, &KillFocus_Parms, NULL );

	pFnKillFocus->FunctionFlags |= 0x400;

	return KillFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocusToChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ChildToFocus                   ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetFocusToChild ( class UUIObject* ChildToFocus, int PlayerIndex )
{
	static UFunction* pFnSetFocusToChild = NULL;

	if ( ! pFnSetFocusToChild )
		pFnSetFocusToChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.SetFocusToChild" );

	UUIScreenObject_execSetFocusToChild_Parms SetFocusToChild_Parms;
	SetFocusToChild_Parms.ChildToFocus = ChildToFocus;
	SetFocusToChild_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocusToChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocusToChild, &SetFocusToChild_Parms, NULL );

	pFnSetFocusToChild->FunctionFlags |= 0x400;

	return SetFocusToChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetFocus ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnSetFocus = NULL;

	if ( ! pFnSetFocus )
		pFnSetFocus = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.SetFocus" );

	UUIScreenObject_execSetFocus_Parms SetFocus_Parms;
	SetFocus_Parms.Sender = Sender;
	SetFocus_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocus, &SetFocus_Parms, NULL );

	pFnSetFocus->FunctionFlags |= 0x400;

	return SetFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanPropagateFocusFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               TestChild                      ( CPF_Parm )

bool UUIScreenObject::CanPropagateFocusFor ( class UUIObject* TestChild )
{
	static UFunction* pFnCanPropagateFocusFor = NULL;

	if ( ! pFnCanPropagateFocusFor )
		pFnCanPropagateFocusFor = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.CanPropagateFocusFor" );

	UUIScreenObject_execCanPropagateFocusFor_Parms CanPropagateFocusFor_Parms;
	CanPropagateFocusFor_Parms.TestChild = TestChild;

	pFnCanPropagateFocusFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPropagateFocusFor, &CanPropagateFocusFor_Parms, NULL );

	pFnCanPropagateFocusFor->FunctionFlags |= 0x400;

	return CanPropagateFocusFor_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanAcceptFocus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::CanAcceptFocus ( int PlayerIndex )
{
	static UFunction* pFnCanAcceptFocus = NULL;

	if ( ! pFnCanAcceptFocus )
		pFnCanAcceptFocus = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.CanAcceptFocus" );

	UUIScreenObject_execCanAcceptFocus_Parms CanAcceptFocus_Parms;
	CanAcceptFocus_Parms.PlayerIndex = PlayerIndex;

	pFnCanAcceptFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanAcceptFocus, &CanAcceptFocus_Parms, NULL );

	pFnCanAcceptFocus->FunctionFlags |= 0x400;

	return CanAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsNeverFocused
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsNeverFocused ( )
{
	static UFunction* pFnIsNeverFocused = NULL;

	if ( ! pFnIsNeverFocused )
		pFnIsNeverFocused = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsNeverFocused" );

	UUIScreenObject_execIsNeverFocused_Parms IsNeverFocused_Parms;

	pFnIsNeverFocused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNeverFocused, &IsNeverFocused_Parms, NULL );

	pFnIsNeverFocused->FunctionFlags |= 0x400;

	return IsNeverFocused_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.NavigateFocus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// unsigned char                  Direction                      ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::NavigateFocus ( class UUIScreenObject* Sender, unsigned char Direction, int PlayerIndex )
{
	static UFunction* pFnNavigateFocus = NULL;

	if ( ! pFnNavigateFocus )
		pFnNavigateFocus = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NavigateFocus" );

	UUIScreenObject_execNavigateFocus_Parms NavigateFocus_Parms;
	NavigateFocus_Parms.Sender = Sender;
	NavigateFocus_Parms.Direction = Direction;
	NavigateFocus_Parms.PlayerIndex = PlayerIndex;

	pFnNavigateFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNavigateFocus, &NavigateFocus_Parms, NULL );

	pFnNavigateFocus->FunctionFlags |= 0x400;

	return NavigateFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PrevControlAPB
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         pSender                        ( CPF_Parm )

bool UUIScreenObject::PrevControlAPB ( class UUIScreenObject* pSender )
{
	static UFunction* pFnPrevControlAPB = NULL;

	if ( ! pFnPrevControlAPB )
		pFnPrevControlAPB = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.PrevControlAPB" );

	UUIScreenObject_execPrevControlAPB_Parms PrevControlAPB_Parms;
	PrevControlAPB_Parms.pSender = pSender;

	pFnPrevControlAPB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrevControlAPB, &PrevControlAPB_Parms, NULL );

	pFnPrevControlAPB->FunctionFlags |= 0x400;

	return PrevControlAPB_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.NextControlAPB
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         pSender                        ( CPF_Parm )

bool UUIScreenObject::NextControlAPB ( class UUIScreenObject* pSender )
{
	static UFunction* pFnNextControlAPB = NULL;

	if ( ! pFnNextControlAPB )
		pFnNextControlAPB = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NextControlAPB" );

	UUIScreenObject_execNextControlAPB_Parms NextControlAPB_Parms;
	NextControlAPB_Parms.pSender = pSender;

	pFnNextControlAPB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNextControlAPB, &NextControlAPB_Parms, NULL );

	pFnNextControlAPB->FunctionFlags |= 0x400;

	return NextControlAPB_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PrevControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::PrevControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnPrevControl = NULL;

	if ( ! pFnPrevControl )
		pFnPrevControl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.PrevControl" );

	UUIScreenObject_execPrevControl_Parms PrevControl_Parms;
	PrevControl_Parms.Sender = Sender;
	PrevControl_Parms.PlayerIndex = PlayerIndex;

	pFnPrevControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrevControl, &PrevControl_Parms, NULL );

	pFnPrevControl->FunctionFlags |= 0x400;

	return PrevControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.NextControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::NextControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnNextControl = NULL;

	if ( ! pFnNextControl )
		pFnNextControl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NextControl" );

	UUIScreenObject_execNextControl_Parms NextControl_Parms;
	NextControl_Parms.Sender = Sender;
	NextControl_Parms.PlayerIndex = PlayerIndex;

	pFnNextControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNextControl, &NextControl_Parms, NULL );

	pFnNextControl->FunctionFlags |= 0x400;

	return NextControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FocusLastControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::FocusLastControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnFocusLastControl = NULL;

	if ( ! pFnFocusLastControl )
		pFnFocusLastControl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.FocusLastControl" );

	UUIScreenObject_execFocusLastControl_Parms FocusLastControl_Parms;
	FocusLastControl_Parms.Sender = Sender;
	FocusLastControl_Parms.PlayerIndex = PlayerIndex;

	pFnFocusLastControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFocusLastControl, &FocusLastControl_Parms, NULL );

	pFnFocusLastControl->FunctionFlags |= 0x400;

	return FocusLastControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FocusFirstControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::FocusFirstControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnFocusFirstControl = NULL;

	if ( ! pFnFocusFirstControl )
		pFnFocusFirstControl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.FocusFirstControl" );

	UUIScreenObject_execFocusFirstControl_Parms FocusFirstControl_Parms;
	FocusFirstControl_Parms.Sender = Sender;
	FocusFirstControl_Parms.PlayerIndex = PlayerIndex;

	pFnFocusFirstControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFocusFirstControl, &FocusFirstControl_Parms, NULL );

	pFnFocusFirstControl->FunctionFlags |= 0x400;

	return FocusFirstControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingShift
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingShift ( int ControllerId )
{
	static UFunction* pFnIsHoldingShift = NULL;

	if ( ! pFnIsHoldingShift )
		pFnIsHoldingShift = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsHoldingShift" );

	UUIScreenObject_execIsHoldingShift_Parms IsHoldingShift_Parms;
	IsHoldingShift_Parms.ControllerId = ControllerId;

	pFnIsHoldingShift->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingShift, &IsHoldingShift_Parms, NULL );

	pFnIsHoldingShift->FunctionFlags |= 0x400;

	return IsHoldingShift_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingAlt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingAlt ( int ControllerId )
{
	static UFunction* pFnIsHoldingAlt = NULL;

	if ( ! pFnIsHoldingAlt )
		pFnIsHoldingAlt = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsHoldingAlt" );

	UUIScreenObject_execIsHoldingAlt_Parms IsHoldingAlt_Parms;
	IsHoldingAlt_Parms.ControllerId = ControllerId;

	pFnIsHoldingAlt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingAlt, &IsHoldingAlt_Parms, NULL );

	pFnIsHoldingAlt->FunctionFlags |= 0x400;

	return IsHoldingAlt_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingCtrl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingCtrl ( int ControllerId )
{
	static UFunction* pFnIsHoldingCtrl = NULL;

	if ( ! pFnIsHoldingCtrl )
		pFnIsHoldingCtrl = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsHoldingCtrl" );

	UUIScreenObject_execIsHoldingCtrl_Parms IsHoldingCtrl_Parms;
	IsHoldingCtrl_Parms.ControllerId = ControllerId;

	pFnIsHoldingCtrl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingCtrl, &IsHoldingCtrl_Parms, NULL );

	pFnIsHoldingCtrl->FunctionFlags |= 0x400;

	return IsHoldingCtrl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ConditionalPropagateEnabledState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ConditionalPropagateEnabledState ( int PlayerIndex, unsigned long bForce )
{
	static UFunction* pFnConditionalPropagateEnabledState = NULL;

	if ( ! pFnConditionalPropagateEnabledState )
		pFnConditionalPropagateEnabledState = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ConditionalPropagateEnabledState" );

	UUIScreenObject_execConditionalPropagateEnabledState_Parms ConditionalPropagateEnabledState_Parms;
	ConditionalPropagateEnabledState_Parms.PlayerIndex = PlayerIndex;
	ConditionalPropagateEnabledState_Parms.bForce = bForce;

	pFnConditionalPropagateEnabledState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConditionalPropagateEnabledState, &ConditionalPropagateEnabledState_Parms, NULL );

	pFnConditionalPropagateEnabledState->FunctionFlags |= 0x400;

	return ConditionalPropagateEnabledState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateStateByClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateToRemove                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                StateThatWasRemoved            ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::DeactivateStateByClass ( class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved )
{
	static UFunction* pFnDeactivateStateByClass = NULL;

	if ( ! pFnDeactivateStateByClass )
		pFnDeactivateStateByClass = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.DeactivateStateByClass" );

	UUIScreenObject_execDeactivateStateByClass_Parms DeactivateStateByClass_Parms;
	DeactivateStateByClass_Parms.StateToRemove = StateToRemove;
	DeactivateStateByClass_Parms.PlayerIndex = PlayerIndex;

	pFnDeactivateStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateStateByClass, &DeactivateStateByClass_Parms, NULL );

	pFnDeactivateStateByClass->FunctionFlags |= 0x400;

	if ( StateThatWasRemoved )
		*StateThatWasRemoved = DeactivateStateByClass_Parms.StateThatWasRemoved;

	return DeactivateStateByClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateToRemove                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::DeactivateState ( class UUIState* StateToRemove, int PlayerIndex )
{
	static UFunction* pFnDeactivateState = NULL;

	if ( ! pFnDeactivateState )
		pFnDeactivateState = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.DeactivateState" );

	UUIScreenObject_execDeactivateState_Parms DeactivateState_Parms;
	DeactivateState_Parms.StateToRemove = StateToRemove;
	DeactivateState_Parms.PlayerIndex = PlayerIndex;

	pFnDeactivateState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateState, &DeactivateState_Parms, NULL );

	pFnDeactivateState->FunctionFlags |= 0x400;

	return DeactivateState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateStateByClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateToActivate                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                StateThatWasAdded              ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::ActivateStateByClass ( class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded )
{
	static UFunction* pFnActivateStateByClass = NULL;

	if ( ! pFnActivateStateByClass )
		pFnActivateStateByClass = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ActivateStateByClass" );

	UUIScreenObject_execActivateStateByClass_Parms ActivateStateByClass_Parms;
	ActivateStateByClass_Parms.StateToActivate = StateToActivate;
	ActivateStateByClass_Parms.PlayerIndex = PlayerIndex;

	pFnActivateStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateStateByClass, &ActivateStateByClass_Parms, NULL );

	pFnActivateStateByClass->FunctionFlags |= 0x400;

	if ( StateThatWasAdded )
		*StateThatWasAdded = ActivateStateByClass_Parms.StateThatWasAdded;

	return ActivateStateByClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateToActivate                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::ActivateState ( class UUIState* StateToActivate, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ActivateState" );

	UUIScreenObject_execActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.StateToActivate = StateToActivate;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	pFnActivateState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	pFnActivateState->FunctionFlags |= 0x400;

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.HasActiveStateOfClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateClass                     ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// int                            StateIndex                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::HasActiveStateOfClass ( class UClass* StateClass, int PlayerIndex, int* StateIndex )
{
	static UFunction* pFnHasActiveStateOfClass = NULL;

	if ( ! pFnHasActiveStateOfClass )
		pFnHasActiveStateOfClass = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.HasActiveStateOfClass" );

	UUIScreenObject_execHasActiveStateOfClass_Parms HasActiveStateOfClass_Parms;
	HasActiveStateOfClass_Parms.StateClass = StateClass;
	HasActiveStateOfClass_Parms.PlayerIndex = PlayerIndex;

	pFnHasActiveStateOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasActiveStateOfClass, &HasActiveStateOfClass_Parms, NULL );

	pFnHasActiveStateOfClass->FunctionFlags |= 0x400;

	if ( StateIndex )
		*StateIndex = HasActiveStateOfClass_Parms.StateIndex;

	return HasActiveStateOfClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetCurrentState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class UUIState* UUIScreenObject::GetCurrentState ( int PlayerIndex )
{
	static UFunction* pFnGetCurrentState = NULL;

	if ( ! pFnGetCurrentState )
		pFnGetCurrentState = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetCurrentState" );

	UUIScreenObject_execGetCurrentState_Parms GetCurrentState_Parms;
	GetCurrentState_Parms.PlayerIndex = PlayerIndex;

	pFnGetCurrentState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentState, &GetCurrentState_Parms, NULL );

	pFnGetCurrentState->FunctionFlags |= 0x400;

	return GetCurrentState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnabled                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetEnabled ( unsigned long bEnabled, int PlayerIndex )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.SetEnabled" );

	UUIScreenObject_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;
	SetEnabled_Parms.PlayerIndex = PlayerIndex;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;

	return SetEnabled_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindEventsOfClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  EventClassToFind               ( CPF_Parm )
// class UUIState*                LimitScope                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bExactClass                    ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_EventInstances             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::FindEventsOfClass ( class UClass* EventClassToFind, class UUIState* LimitScope, unsigned long bExactClass, TArray< class UUIEvent* >* out_EventInstances )
{
	static UFunction* pFnFindEventsOfClass = NULL;

	if ( ! pFnFindEventsOfClass )
		pFnFindEventsOfClass = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.FindEventsOfClass" );

	UUIScreenObject_execFindEventsOfClass_Parms FindEventsOfClass_Parms;
	FindEventsOfClass_Parms.EventClassToFind = EventClassToFind;
	FindEventsOfClass_Parms.LimitScope = LimitScope;
	FindEventsOfClass_Parms.bExactClass = bExactClass;

	pFnFindEventsOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEventsOfClass, &FindEventsOfClass_Parms, NULL );

	pFnFindEventsOfClass->FunctionFlags |= 0x400;

	if ( out_EventInstances )
		memcpy ( out_EventInstances, &FindEventsOfClass_Parms.out_EventInstances, 0xC );
};

// Function Engine.UIScreenObject.ActivateEventByClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class UClass*                  EventClassToActivate           ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< class UUIEvent* >      out_ActivatedEvents            ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::ActivateEventByClass ( int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int > IndicesToActivate, TArray< class UUIEvent* >* out_ActivatedEvents )
{
	static UFunction* pFnActivateEventByClass = NULL;

	if ( ! pFnActivateEventByClass )
		pFnActivateEventByClass = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ActivateEventByClass" );

	UUIScreenObject_execActivateEventByClass_Parms ActivateEventByClass_Parms;
	ActivateEventByClass_Parms.PlayerIndex = PlayerIndex;
	ActivateEventByClass_Parms.EventClassToActivate = EventClassToActivate;
	ActivateEventByClass_Parms.InEventActivator = InEventActivator;
	ActivateEventByClass_Parms.bActivateImmediately = bActivateImmediately;
	memcpy ( &ActivateEventByClass_Parms.IndicesToActivate, &IndicesToActivate, 0xC );

	pFnActivateEventByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateEventByClass, &ActivateEventByClass_Parms, NULL );

	pFnActivateEventByClass->FunctionFlags |= 0x400;

	if ( out_ActivatedEvents )
		memcpy ( out_ActivatedEvents, &ActivateEventByClass_Parms.out_ActivatedEvents, 0xC );
};

// Function Engine.UIScreenObject.GetViewportHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportHeight ( )
{
	static UFunction* pFnGetViewportHeight = NULL;

	if ( ! pFnGetViewportHeight )
		pFnGetViewportHeight = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetViewportHeight" );

	UUIScreenObject_execGetViewportHeight_Parms GetViewportHeight_Parms;

	pFnGetViewportHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportHeight, &GetViewportHeight_Parms, NULL );

	pFnGetViewportHeight->FunctionFlags |= 0x400;

	return GetViewportHeight_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportWidth ( )
{
	static UFunction* pFnGetViewportWidth = NULL;

	if ( ! pFnGetViewportWidth )
		pFnGetViewportWidth = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetViewportWidth" );

	UUIScreenObject_execGetViewportWidth_Parms GetViewportWidth_Parms;

	pFnGetViewportWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportWidth, &GetViewportWidth_Parms, NULL );

	pFnGetViewportWidth->FunctionFlags |= 0x400;

	return GetViewportWidth_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportSize               ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportSize ( struct FVector2D* out_ViewportSize )
{
	static UFunction* pFnGetViewportSize = NULL;

	if ( ! pFnGetViewportSize )
		pFnGetViewportSize = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetViewportSize" );

	UUIScreenObject_execGetViewportSize_Parms GetViewportSize_Parms;

	pFnGetViewportSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportSize, &GetViewportSize_Parms, NULL );

	pFnGetViewportSize->FunctionFlags |= 0x400;

	if ( out_ViewportSize )
		memcpy ( out_ViewportSize, &GetViewportSize_Parms.out_ViewportSize, 0x8 );

	return GetViewportSize_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOrigin
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportOrigin             ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportOrigin ( struct FVector2D* out_ViewportOrigin )
{
	static UFunction* pFnGetViewportOrigin = NULL;

	if ( ! pFnGetViewportOrigin )
		pFnGetViewportOrigin = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetViewportOrigin" );

	UUIScreenObject_execGetViewportOrigin_Parms GetViewportOrigin_Parms;

	pFnGetViewportOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportOrigin, &GetViewportOrigin_Parms, NULL );

	pFnGetViewportOrigin->FunctionFlags |= 0x400;

	if ( out_ViewportOrigin )
		memcpy ( out_ViewportOrigin, &GetViewportOrigin_Parms.out_ViewportOrigin, 0x8 );

	return GetViewportOrigin_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportScale ( )
{
	static UFunction* pFnGetViewportScale = NULL;

	if ( ! pFnGetViewportScale )
		pFnGetViewportScale = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetViewportScale" );

	UUIScreenObject_execGetViewportScale_Parms GetViewportScale_Parms;

	pFnGetViewportScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportScale, &GetViewportScale_Parms, NULL );

	pFnGetViewportScale->FunctionFlags |= 0x400;

	return GetViewportScale_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOffset
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportOffset             ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportOffset ( struct FVector2D* out_ViewportOffset )
{
	static UFunction* pFnGetViewportOffset = NULL;

	if ( ! pFnGetViewportOffset )
		pFnGetViewportOffset = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetViewportOffset" );

	UUIScreenObject_execGetViewportOffset_Parms GetViewportOffset_Parms;

	pFnGetViewportOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportOffset, &GetViewportOffset_Parms, NULL );

	pFnGetViewportOffset->FunctionFlags |= 0x400;

	if ( out_ViewportOffset )
		memcpy ( out_ViewportOffset, &GetViewportOffset_Parms.out_ViewportOffset, 0x8 );

	return GetViewportOffset_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RebuildNavigationLinks
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIScreenObject::RebuildNavigationLinks ( )
{
	static UFunction* pFnRebuildNavigationLinks = NULL;

	if ( ! pFnRebuildNavigationLinks )
		pFnRebuildNavigationLinks = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RebuildNavigationLinks" );

	UUIScreenObject_execRebuildNavigationLinks_Parms RebuildNavigationLinks_Parms;

	pFnRebuildNavigationLinks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildNavigationLinks, &RebuildNavigationLinks_Parms, NULL );

	pFnRebuildNavigationLinks->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestPrimitiveReview
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bReinitializePrimitives        ( CPF_Parm )
// unsigned long                  bReviewPrimitiveUsage          ( CPF_Parm )

void UUIScreenObject::RequestPrimitiveReview ( unsigned long bReinitializePrimitives, unsigned long bReviewPrimitiveUsage )
{
	static UFunction* pFnRequestPrimitiveReview = NULL;

	if ( ! pFnRequestPrimitiveReview )
		pFnRequestPrimitiveReview = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RequestPrimitiveReview" );

	UUIScreenObject_execRequestPrimitiveReview_Parms RequestPrimitiveReview_Parms;
	RequestPrimitiveReview_Parms.bReinitializePrimitives = bReinitializePrimitives;
	RequestPrimitiveReview_Parms.bReviewPrimitiveUsage = bReviewPrimitiveUsage;

	pFnRequestPrimitiveReview->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestPrimitiveReview, &RequestPrimitiveReview_Parms, NULL );

	pFnRequestPrimitiveReview->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestFormattingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScreenObject::RequestFormattingUpdate ( )
{
	static UFunction* pFnRequestFormattingUpdate = NULL;

	if ( ! pFnRequestFormattingUpdate )
		pFnRequestFormattingUpdate = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RequestFormattingUpdate" );

	UUIScreenObject_execRequestFormattingUpdate_Parms RequestFormattingUpdate_Parms;

	pFnRequestFormattingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestFormattingUpdate, &RequestFormattingUpdate_Parms, NULL );

	pFnRequestFormattingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestSceneUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bDockingStackChanged           ( CPF_Parm )
// unsigned long                  bPositionsChanged              ( CPF_Parm )
// unsigned long                  bNavLinksOutdated              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bWidgetStylesChanged           ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::RequestSceneUpdate ( unsigned long bDockingStackChanged, unsigned long bPositionsChanged, unsigned long bNavLinksOutdated, unsigned long bWidgetStylesChanged )
{
	static UFunction* pFnRequestSceneUpdate = NULL;

	if ( ! pFnRequestSceneUpdate )
		pFnRequestSceneUpdate = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RequestSceneUpdate" );

	UUIScreenObject_execRequestSceneUpdate_Parms RequestSceneUpdate_Parms;
	RequestSceneUpdate_Parms.bDockingStackChanged = bDockingStackChanged;
	RequestSceneUpdate_Parms.bPositionsChanged = bPositionsChanged;
	RequestSceneUpdate_Parms.bNavLinksOutdated = bNavLinksOutdated;
	RequestSceneUpdate_Parms.bWidgetStylesChanged = bWidgetStylesChanged;

	pFnRequestSceneUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestSceneUpdate, &RequestSceneUpdate_Parms, NULL );

	pFnRequestSceneUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetObjectCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetObjectCount ( )
{
	static UFunction* pFnGetObjectCount = NULL;

	if ( ! pFnGetObjectCount )
		pFnGetObjectCount = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetObjectCount" );

	UUIScreenObject_execGetObjectCount_Parms GetObjectCount_Parms;

	pFnGetObjectCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectCount, &GetObjectCount_Parms, NULL );

	pFnGetObjectCount->FunctionFlags |= 0x400;

	return GetObjectCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetChildren
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIObject* >     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

TArray< class UUIObject* > UUIScreenObject::GetChildren ( unsigned long bRecurse, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetChildren" );

	UUIScreenObject_execGetChildren_Parms GetChildren_Parms;
	GetChildren_Parms.bRecurse = bRecurse;
	memcpy ( &GetChildren_Parms.ExclusionSet, &ExclusionSet, 0xC );

	pFnGetChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	pFnGetChildren->FunctionFlags |= 0x400;

	return GetChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ContainsChildOfClass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ContainsChildOfClass ( class UClass* SearchClass, unsigned long bRecurse )
{
	static UFunction* pFnContainsChildOfClass = NULL;

	if ( ! pFnContainsChildOfClass )
		pFnContainsChildOfClass = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ContainsChildOfClass" );

	UUIScreenObject_execContainsChildOfClass_Parms ContainsChildOfClass_Parms;
	ContainsChildOfClass_Parms.SearchClass = SearchClass;
	ContainsChildOfClass_Parms.bRecurse = bRecurse;

	pFnContainsChildOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsChildOfClass, &ContainsChildOfClass_Parms, NULL );

	pFnContainsChildOfClass->FunctionFlags |= 0x400;

	return ContainsChildOfClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ContainsChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Child                          ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ContainsChild ( class UUIObject* Child, unsigned long bRecurse )
{
	static UFunction* pFnContainsChild = NULL;

	if ( ! pFnContainsChild )
		pFnContainsChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ContainsChild" );

	UUIScreenObject_execContainsChild_Parms ContainsChild_Parms;
	ContainsChild_Parms.Child = Child;
	ContainsChild_Parms.bRecurse = bRecurse;

	pFnContainsChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsChild, &ContainsChild_Parms, NULL );

	pFnContainsChild->FunctionFlags |= 0x400;

	return ContainsChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChildIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )

int UUIScreenObject::FindChildIndex ( struct FName WidgetName )
{
	static UFunction* pFnFindChildIndex = NULL;

	if ( ! pFnFindChildIndex )
		pFnFindChildIndex = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.FindChildIndex" );

	UUIScreenObject_execFindChildIndex_Parms FindChildIndex_Parms;
	memcpy ( &FindChildIndex_Parms.WidgetName, &WidgetName, 0x8 );

	pFnFindChildIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChildIndex, &FindChildIndex_Parms, NULL );

	pFnFindChildIndex->FunctionFlags |= 0x400;

	return FindChildIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChildUsingID
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FWIDGET_ID              WidgetID                       ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::FindChildUsingID ( struct FWIDGET_ID WidgetID, unsigned long bRecurse )
{
	static UFunction* pFnFindChildUsingID = NULL;

	if ( ! pFnFindChildUsingID )
		pFnFindChildUsingID = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.FindChildUsingID" );

	UUIScreenObject_execFindChildUsingID_Parms FindChildUsingID_Parms;
	memcpy ( &FindChildUsingID_Parms.WidgetID, &WidgetID, 0x10 );
	FindChildUsingID_Parms.bRecurse = bRecurse;

	pFnFindChildUsingID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChildUsingID, &FindChildUsingID_Parms, NULL );

	pFnFindChildUsingID->FunctionFlags |= 0x400;

	return FindChildUsingID_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::FindChild ( struct FName WidgetName, unsigned long bRecurse )
{
	static UFunction* pFnFindChild = NULL;

	if ( ! pFnFindChild )
		pFnFindChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.FindChild" );

	UUIScreenObject_execFindChild_Parms FindChild_Parms;
	memcpy ( &FindChild_Parms.WidgetName, &WidgetName, 0x8 );
	FindChild_Parms.bRecurse = bRecurse;

	pFnFindChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChild, &FindChild_Parms, NULL );

	pFnFindChild->FunctionFlags |= 0x400;

	return FindChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ReplaceChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ExistingChild                  ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

bool UUIScreenObject::ReplaceChild ( class UUIObject* ExistingChild, class UUIObject* NewChild )
{
	static UFunction* pFnReplaceChild = NULL;

	if ( ! pFnReplaceChild )
		pFnReplaceChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.ReplaceChild" );

	UUIScreenObject_execReplaceChild_Parms ReplaceChild_Parms;
	ReplaceChild_Parms.ExistingChild = ExistingChild;
	ReplaceChild_Parms.NewChild = NewChild;

	pFnReplaceChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceChild, &ReplaceChild_Parms, NULL );

	pFnReplaceChild->FunctionFlags |= 0x400;

	return ReplaceChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemoveChildren
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIObject* >     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// TArray< class UUIObject* >     ChildrenToRemove               ( CPF_Parm | CPF_NeedCtorLink )

TArray< class UUIObject* > UUIScreenObject::RemoveChildren ( TArray< class UUIObject* > ChildrenToRemove )
{
	static UFunction* pFnRemoveChildren = NULL;

	if ( ! pFnRemoveChildren )
		pFnRemoveChildren = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RemoveChildren" );

	UUIScreenObject_execRemoveChildren_Parms RemoveChildren_Parms;
	memcpy ( &RemoveChildren_Parms.ChildrenToRemove, &ChildrenToRemove, 0xC );

	pFnRemoveChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveChildren, &RemoveChildren_Parms, NULL );

	pFnRemoveChildren->FunctionFlags |= 0x400;

	return RemoveChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemoveChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ExistingChild                  ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UUIScreenObject::RemoveChild ( class UUIObject* ExistingChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RemoveChild" );

	UUIScreenObject_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.ExistingChild = ExistingChild;
	memcpy ( &RemoveChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	pFnRemoveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );

	pFnRemoveChild->FunctionFlags |= 0x400;

	return RemoveChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.InsertChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               NewChild                       ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRenameExisting                ( CPF_OptionalParm | CPF_Parm )

int UUIScreenObject::InsertChild ( class UUIObject* NewChild, int InsertIndex, unsigned long bRenameExisting )
{
	static UFunction* pFnInsertChild = NULL;

	if ( ! pFnInsertChild )
		pFnInsertChild = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.InsertChild" );

	UUIScreenObject_execInsertChild_Parms InsertChild_Parms;
	InsertChild_Parms.NewChild = NewChild;
	InsertChild_Parms.InsertIndex = InsertIndex;
	InsertChild_Parms.bRenameExisting = bRenameExisting;

	pFnInsertChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertChild, &InsertChild_Parms, NULL );

	pFnInsertChild->FunctionFlags |= 0x400;

	return InsertChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Initialize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                inOwnerScene                   ( CPF_Parm )
// class UUIObject*               InOwner                        ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::Initialize ( class UUIScene* inOwnerScene, class UUIObject* InOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.Initialize" );

	UUIScreenObject_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.inOwnerScene = inOwnerScene;
	Initialize_Parms.InOwner = InOwner;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.CreateWidget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Owner                          ( CPF_Parm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// class UObject*                 WidgetArchetype                ( CPF_OptionalParm | CPF_Parm )
// struct FName                   WidgetName                     ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::CreateWidget ( class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, struct FName WidgetName )
{
	static UFunction* pFnCreateWidget = NULL;

	if ( ! pFnCreateWidget )
		pFnCreateWidget = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.CreateWidget" );

	UUIScreenObject_execCreateWidget_Parms CreateWidget_Parms;
	CreateWidget_Parms.Owner = Owner;
	CreateWidget_Parms.WidgetClass = WidgetClass;
	CreateWidget_Parms.WidgetArchetype = WidgetArchetype;
	memcpy ( &CreateWidget_Parms.WidgetName, &WidgetName, 0x8 );

	pFnCreateWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateWidget, &CreateWidget_Parms, NULL );

	pFnCreateWidget->FunctionFlags |= 0x400;

	return CreateWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PlayUISound
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FEnumeratedName         SoundCueName                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ComponentName                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UUIScreenObject::PlayUISound ( struct FEnumeratedName SoundCueName, int PlayerIndex, struct FString ComponentName )
{
	static UFunction* pFnPlayUISound = NULL;

	if ( ! pFnPlayUISound )
		pFnPlayUISound = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.PlayUISound" );

	UUIScreenObject_execPlayUISound_Parms PlayUISound_Parms;
	memcpy ( &PlayUISound_Parms.SoundCueName, &SoundCueName, 0x10 );
	PlayUISound_Parms.PlayerIndex = PlayerIndex;
	memcpy ( &PlayUISound_Parms.ComponentName, &ComponentName, 0xC );

	pFnPlayUISound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUISound, &PlayUISound_Parms, NULL );

	pFnPlayUISound->FunctionFlags |= 0x400;

	return PlayUISound_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPlayerOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class ULocalPlayer* UUIScreenObject::GetPlayerOwner ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.GetPlayerOwner" );

	UUIScreenObject_execGetPlayerOwner_Parms GetPlayerOwner_Parms;
	GetPlayerOwner_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.InitializePlayerTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScreenObject::InitializePlayerTracking ( )
{
	static UFunction* pFnInitializePlayerTracking = NULL;

	if ( ! pFnInitializePlayerTracking )
		pFnInitializePlayerTracking = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.InitializePlayerTracking" );

	UUIScreenObject_execInitializePlayerTracking_Parms InitializePlayerTracking_Parms;

	pFnInitializePlayerTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializePlayerTracking, &InitializePlayerTracking_Parms, NULL );

	pFnInitializePlayerTracking->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RemovePlayerData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIScreenObject::RemovePlayerData ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnRemovePlayerData = NULL;

	if ( ! pFnRemovePlayerData )
		pFnRemovePlayerData = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.RemovePlayerData" );

	UUIScreenObject_execRemovePlayerData_Parms RemovePlayerData_Parms;
	RemovePlayerData_Parms.PlayerIndex = PlayerIndex;
	RemovePlayerData_Parms.RemovedPlayer = RemovedPlayer;

	pFnRemovePlayerData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePlayerData, &RemovePlayerData_Parms, NULL );

	pFnRemovePlayerData->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.CreatePlayerData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIScreenObject::CreatePlayerData ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnCreatePlayerData = NULL;

	if ( ! pFnCreatePlayerData )
		pFnCreatePlayerData = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.CreatePlayerData" );

	UUIScreenObject_execCreatePlayerData_Parms CreatePlayerData_Parms;
	CreatePlayerData_Parms.PlayerIndex = PlayerIndex;
	CreatePlayerData_Parms.AddedPlayer = AddedPlayer;

	pFnCreatePlayerData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePlayerData, &CreatePlayerData_Parms, NULL );

	pFnCreatePlayerData->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.IsInitialized
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsInitialized ( )
{
	static UFunction* pFnIsInitialized = NULL;

	if ( ! pFnIsInitialized )
		pFnIsInitialized = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.IsInitialized" );

	UUIScreenObject_execIsInitialized_Parms IsInitialized_Parms;

	pFnIsInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInitialized, &IsInitialized_Parms, NULL );

	pFnIsInitialized->FunctionFlags |= 0x400;

	return IsInitialized_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnInitialSceneUpdate
// [0x00120000] 
// Parameters infos:

void UUIScreenObject::OnInitialSceneUpdate ( )
{
	static UFunction* pFnOnInitialSceneUpdate = NULL;

	if ( ! pFnOnInitialSceneUpdate )
		pFnOnInitialSceneUpdate = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnInitialSceneUpdate" );

	UUIScreenObject_execOnInitialSceneUpdate_Parms OnInitialSceneUpdate_Parms;

	this->ProcessEvent ( pFnOnInitialSceneUpdate, &OnInitialSceneUpdate_Parms, NULL );
};

// Function Engine.UIScreenObject.NotifyVisibilityChanged
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         SourceWidget                   ( CPF_Parm )
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScreenObject::NotifyVisibilityChanged ( class UUIScreenObject* SourceWidget, unsigned long bIsVisible )
{
	static UFunction* pFnNotifyVisibilityChanged = NULL;

	if ( ! pFnNotifyVisibilityChanged )
		pFnNotifyVisibilityChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NotifyVisibilityChanged" );

	UUIScreenObject_execNotifyVisibilityChanged_Parms NotifyVisibilityChanged_Parms;
	NotifyVisibilityChanged_Parms.SourceWidget = SourceWidget;
	NotifyVisibilityChanged_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnNotifyVisibilityChanged, &NotifyVisibilityChanged_Parms, NULL );
};

// Function Engine.UIScreenObject.NotifyActiveStateChanged
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                NewlyActiveState               ( CPF_Parm )
// class UUIState*                PreviouslyActiveState          ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::NotifyActiveStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState )
{
	static UFunction* pFnNotifyActiveStateChanged = NULL;

	if ( ! pFnNotifyActiveStateChanged )
		pFnNotifyActiveStateChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NotifyActiveStateChanged" );

	UUIScreenObject_execNotifyActiveStateChanged_Parms NotifyActiveStateChanged_Parms;
	NotifyActiveStateChanged_Parms.Sender = Sender;
	NotifyActiveStateChanged_Parms.PlayerIndex = PlayerIndex;
	NotifyActiveStateChanged_Parms.NewlyActiveState = NewlyActiveState;
	NotifyActiveStateChanged_Parms.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent ( pFnNotifyActiveStateChanged, &NotifyActiveStateChanged_Parms, NULL );
};

// Function Engine.UIScreenObject.NotifyResolutionChanged
// [0x00520000] 
// Parameters infos:
// struct FVector2D               OldViewportsize                ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector2D               NewViewportSize                ( CPF_Const | CPF_Parm | CPF_OutParm )

void UUIScreenObject::NotifyResolutionChanged ( struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize )
{
	static UFunction* pFnNotifyResolutionChanged = NULL;

	if ( ! pFnNotifyResolutionChanged )
		pFnNotifyResolutionChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NotifyResolutionChanged" );

	UUIScreenObject_execNotifyResolutionChanged_Parms NotifyResolutionChanged_Parms;

	this->ProcessEvent ( pFnNotifyResolutionChanged, &NotifyResolutionChanged_Parms, NULL );

	if ( OldViewportsize )
		memcpy ( OldViewportsize, &NotifyResolutionChanged_Parms.OldViewportsize, 0x8 );

	if ( NewViewportSize )
		memcpy ( NewViewportSize, &NotifyResolutionChanged_Parms.NewViewportSize, 0x8 );
};

// Function Engine.UIScreenObject.NotifyPositionChanged
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UUIScreenObject::NotifyPositionChanged ( class UUIScreenObject* Sender )
{
	static UFunction* pFnNotifyPositionChanged = NULL;

	if ( ! pFnNotifyPositionChanged )
		pFnNotifyPositionChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NotifyPositionChanged" );

	UUIScreenObject_execNotifyPositionChanged_Parms NotifyPositionChanged_Parms;
	NotifyPositionChanged_Parms.Sender = Sender;

	this->ProcessEvent ( pFnNotifyPositionChanged, &NotifyPositionChanged_Parms, NULL );
};

// Function Engine.UIScreenObject.OnProcessInputAxis
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSubscribedInputEventParameters EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnProcessInputAxis ( struct FSubscribedInputEventParameters* EventParms )
{
	static UFunction* pFnOnProcessInputAxis = NULL;

	if ( ! pFnOnProcessInputAxis )
		pFnOnProcessInputAxis = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnProcessInputAxis" );

	UUIScreenObject_execOnProcessInputAxis_Parms OnProcessInputAxis_Parms;

	this->ProcessEvent ( pFnOnProcessInputAxis, &OnProcessInputAxis_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnProcessInputAxis_Parms.EventParms, 0x28 );

	return OnProcessInputAxis_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnProcessInputKey
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSubscribedInputEventParameters EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnProcessInputKey ( struct FSubscribedInputEventParameters* EventParms )
{
	static UFunction* pFnOnProcessInputKey = NULL;

	if ( ! pFnOnProcessInputKey )
		pFnOnProcessInputKey = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnProcessInputKey" );

	UUIScreenObject_execOnProcessInputKey_Parms OnProcessInputKey_Parms;

	this->ProcessEvent ( pFnOnProcessInputKey, &OnProcessInputKey_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnProcessInputKey_Parms.EventParms, 0x28 );

	return OnProcessInputKey_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnRawInputAxis
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnRawInputAxis ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnRawInputAxis = NULL;

	if ( ! pFnOnRawInputAxis )
		pFnOnRawInputAxis = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnRawInputAxis" );

	UUIScreenObject_execOnRawInputAxis_Parms OnRawInputAxis_Parms;

	this->ProcessEvent ( pFnOnRawInputAxis, &OnRawInputAxis_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnRawInputAxis_Parms.EventParms, 0x20 );

	return OnRawInputAxis_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnRawInputKey
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnRawInputKey ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnRawInputKey = NULL;

	if ( ! pFnOnRawInputKey )
		pFnOnRawInputKey = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.OnRawInputKey" );

	UUIScreenObject_execOnRawInputKey_Parms OnRawInputKey_Parms;

	this->ProcessEvent ( pFnOnRawInputKey, &OnRawInputKey_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnRawInputKey_Parms.EventParms, 0x20 );

	return OnRawInputKey_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.NotifyActiveSkinChanged
// [0x00120000] 
// Parameters infos:

void UUIScreenObject::NotifyActiveSkinChanged ( )
{
	static UFunction* pFnNotifyActiveSkinChanged = NULL;

	if ( ! pFnNotifyActiveSkinChanged )
		pFnNotifyActiveSkinChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScreenObject.NotifyActiveSkinChanged" );

	UUIScreenObject_execNotifyActiveSkinChanged_Parms NotifyActiveSkinChanged_Parms;

	this->ProcessEvent ( pFnNotifyActiveSkinChanged, &NotifyActiveSkinChanged_Parms, NULL );
};

// Function Engine.UIComp_Event.UnregisterInputEvents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                InputEventOwner                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComp_Event::UnregisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex )
{
	static UFunction* pFnUnregisterInputEvents = NULL;

	if ( ! pFnUnregisterInputEvents )
		pFnUnregisterInputEvents = UObject::FindObject< UFunction > ( "Function Engine.UIComp_Event.UnregisterInputEvents" );

	UUIComp_Event_execUnregisterInputEvents_Parms UnregisterInputEvents_Parms;
	UnregisterInputEvents_Parms.InputEventOwner = InputEventOwner;
	UnregisterInputEvents_Parms.PlayerIndex = PlayerIndex;

	pFnUnregisterInputEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterInputEvents, &UnregisterInputEvents_Parms, NULL );

	pFnUnregisterInputEvents->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_Event.RegisterInputEvents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                InputEventOwner                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComp_Event::RegisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex )
{
	static UFunction* pFnRegisterInputEvents = NULL;

	if ( ! pFnRegisterInputEvents )
		pFnRegisterInputEvents = UObject::FindObject< UFunction > ( "Function Engine.UIComp_Event.RegisterInputEvents" );

	UUIComp_Event_execRegisterInputEvents_Parms RegisterInputEvents_Parms;
	RegisterInputEvents_Parms.InputEventOwner = InputEventOwner;
	RegisterInputEvents_Parms.PlayerIndex = PlayerIndex;

	pFnRegisterInputEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterInputEvents, &RegisterInputEvents_Parms, NULL );

	pFnRegisterInputEvents->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.RemoveSequenceObjects
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class USequenceObject* > ObjectsToRemove                ( CPF_Parm | CPF_NeedCtorLink )

void UUIEventContainer::RemoveSequenceObjects ( TArray< class USequenceObject* > ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = UObject::FindObject< UFunction > ( "Function Engine.UIEventContainer.RemoveSequenceObjects" );

	UUIEventContainer_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;
	memcpy ( &RemoveSequenceObjects_Parms.ObjectsToRemove, &ObjectsToRemove, 0xC );

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUIEventContainer::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEventContainer.RemoveSequenceObject" );

	UUIEventContainer_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.AddSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIEventContainer::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEventContainer.AddSequenceObject" );

	UUIEventContainer_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEventContainer.GetUIEvents
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_Events                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIEventContainer::GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = UObject::FindObject< UFunction > ( "Function Engine.UIEventContainer.GetUIEvents" );

	UUIEventContainer_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0xC );
};

// Function Engine.UIInputConfiguration.LoadInputAliasClasses
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIInputConfiguration::LoadInputAliasClasses ( )
{
	static UFunction* pFnLoadInputAliasClasses = NULL;

	if ( ! pFnLoadInputAliasClasses )
		pFnLoadInputAliasClasses = UObject::FindObject< UFunction > ( "Function Engine.UIInputConfiguration.LoadInputAliasClasses" );

	UUIInputConfiguration_execLoadInputAliasClasses_Parms LoadInputAliasClasses_Parms;

	pFnLoadInputAliasClasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadInputAliasClasses, &LoadInputAliasClasses_Parms, NULL );

	pFnLoadInputAliasClasses->FunctionFlags |= 0x400;
};

// Function Engine.UIInteraction.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UUIInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.NotifyGameSessionEnded" );

	UUIInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.UIInteraction.GetNATType
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIInteraction::eventGetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.GetNATType" );

	UUIInteraction_eventGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CanPlayOnline
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIInteraction::eventCanPlayOnline ( int ControllerId )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.CanPlayOnline" );

	UUIInteraction_eventCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsLoggedIn
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnIsLoggedIn = NULL;

	if ( ! pFnIsLoggedIn )
		pFnIsLoggedIn = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.IsLoggedIn" );

	UUIInteraction_eventIsLoggedIn_Parms IsLoggedIn_Parms;
	IsLoggedIn_Parms.ControllerId = ControllerId;
	IsLoggedIn_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnIsLoggedIn, &IsLoggedIn_Parms, NULL );

	return IsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIInteraction.HasLinkConnection
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIInteraction::eventHasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.HasLinkConnection" );

	UUIInteraction_eventHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLoginStatus
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

unsigned char UUIInteraction::eventGetLoginStatus ( int ControllerId )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.GetLoginStatus" );

	UUIInteraction_eventGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.UIInteraction.FindSceneByTag
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIInteraction::FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner )
{
	static UFunction* pFnFindSceneByTag = NULL;

	if ( ! pFnFindSceneByTag )
		pFnFindSceneByTag = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.FindSceneByTag" );

	UUIInteraction_execFindSceneByTag_Parms FindSceneByTag_Parms;
	memcpy ( &FindSceneByTag_Parms.SceneTag, &SceneTag, 0x8 );
	FindSceneByTag_Parms.SceneOwner = SceneOwner;

	this->ProcessEvent ( pFnFindSceneByTag, &FindSceneByTag_Parms, NULL );

	return FindSceneByTag_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CloseScene
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool UUIInteraction::CloseScene ( class UUIScene* Scene )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.CloseScene" );

	UUIInteraction_execCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.Scene = Scene;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.MergeScene
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SourceScene                    ( CPF_Parm )
// class UUIScene*                SceneTarget                    ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::MergeScene ( class UUIScene* SourceScene, class UUIScene* SceneTarget )
{
	static UFunction* pFnMergeScene = NULL;

	if ( ! pFnMergeScene )
		pFnMergeScene = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.MergeScene" );

	UUIInteraction_execMergeScene_Parms MergeScene_Parms;
	MergeScene_Parms.SourceScene = SourceScene;
	MergeScene_Parms.SceneTarget = SceneTarget;

	this->ProcessEvent ( pFnMergeScene, &MergeScene_Parms, NULL );

	return MergeScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.OpenScene
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIInteraction::OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.OpenScene" );

	UUIInteraction_execOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.Scene = Scene;
	OpenScene_Parms.SceneOwner = SceneOwner;

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	if ( OpenedScene )
		*OpenedScene = OpenScene_Parms.OpenedScene;

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CreateScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SceneClass                     ( CPF_Parm )
// struct FName                   SceneTag                       ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIInteraction::CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate )
{
	static UFunction* pFnCreateScene = NULL;

	if ( ! pFnCreateScene )
		pFnCreateScene = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.CreateScene" );

	UUIInteraction_execCreateScene_Parms CreateScene_Parms;
	CreateScene_Parms.SceneClass = SceneClass;
	memcpy ( &CreateScene_Parms.SceneTag, &SceneTag, 0x8 );
	CreateScene_Parms.SceneTemplate = SceneTemplate;

	pFnCreateScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateScene, &CreateScene_Parms, NULL );

	pFnCreateScene->FunctionFlags |= 0x400;

	return CreateScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetTransientScene
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIInteraction::GetTransientScene ( )
{
	static UFunction* pFnGetTransientScene = NULL;

	if ( ! pFnGetTransientScene )
		pFnGetTransientScene = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.GetTransientScene" );

	UUIInteraction_execGetTransientScene_Parms GetTransientScene_Parms;

	this->ProcessEvent ( pFnGetTransientScene, &GetTransientScene_Parms, NULL );

	return GetTransientScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.SetMousePosition
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewMouseX                      ( CPF_Parm )
// int                            NewMouseY                      ( CPF_Parm )

void UUIInteraction::SetMousePosition ( int NewMouseX, int NewMouseY )
{
	static UFunction* pFnSetMousePosition = NULL;

	if ( ! pFnSetMousePosition )
		pFnSetMousePosition = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.SetMousePosition" );

	UUIInteraction_execSetMousePosition_Parms SetMousePosition_Parms;
	SetMousePosition_Parms.NewMouseX = NewMouseX;
	SetMousePosition_Parms.NewMouseY = NewMouseY;

	this->ProcessEvent ( pFnSetMousePosition, &SetMousePosition_Parms, NULL );
};

// Function Engine.UIInteraction.CreateTransientWidget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// struct FName                   WidgetTag                      ( CPF_Parm )
// class UUIObject*               Owner                          ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIInteraction::CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner )
{
	static UFunction* pFnCreateTransientWidget = NULL;

	if ( ! pFnCreateTransientWidget )
		pFnCreateTransientWidget = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.CreateTransientWidget" );

	UUIInteraction_execCreateTransientWidget_Parms CreateTransientWidget_Parms;
	CreateTransientWidget_Parms.WidgetClass = WidgetClass;
	memcpy ( &CreateTransientWidget_Parms.WidgetTag, &WidgetTag, 0x8 );
	CreateTransientWidget_Parms.Owner = Owner;

	pFnCreateTransientWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTransientWidget, &CreateTransientWidget_Parms, NULL );

	pFnCreateTransientWidget->FunctionFlags |= 0x400;

	return CreateTransientWidget_Parms.ReturnValue;
};

// Function Engine.UIInteraction.NotifyPlayerRemoved
// [0x00820002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.NotifyPlayerRemoved" );

	UUIInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.UIInteraction.NotifyPlayerAdded
// [0x00820002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.NotifyPlayerAdded" );

	UUIInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.UIInteraction.PlayUISound
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FEnumeratedName         SoundCueName                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ComponentName                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UUIInteraction::PlayUISound ( struct FEnumeratedName SoundCueName, int PlayerIndex, struct FString ComponentName )
{
	static UFunction* pFnPlayUISound = NULL;

	if ( ! pFnPlayUISound )
		pFnPlayUISound = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.PlayUISound" );

	UUIInteraction_execPlayUISound_Parms PlayUISound_Parms;
	memcpy ( &PlayUISound_Parms.SoundCueName, &SoundCueName, 0x10 );
	PlayUISound_Parms.PlayerIndex = PlayerIndex;
	memcpy ( &PlayUISound_Parms.ComponentName, &ComponentName, 0xC );

	pFnPlayUISound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUISound, &PlayUISound_Parms, NULL );

	pFnPlayUISound->FunctionFlags |= 0x400;

	return PlayUISound_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsMenuLevel
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UUIInteraction::IsMenuLevel ( struct FString MapName )
{
	static UFunction* pFnIsMenuLevel = NULL;

	if ( ! pFnIsMenuLevel )
		pFnIsMenuLevel = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.IsMenuLevel" );

	UUIInteraction_execIsMenuLevel_Parms IsMenuLevel_Parms;
	memcpy ( &IsMenuLevel_Parms.MapName, &MapName, 0xC );

	pFnIsMenuLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMenuLevel, &IsMenuLevel_Parms, NULL );

	pFnIsMenuLevel->FunctionFlags |= 0x400;

	return IsMenuLevel_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetDataStoreClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIInteraction::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.GetDataStoreClient" );

	UUIInteraction_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	pFnGetDataStoreClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	pFnGetDataStoreClient->FunctionFlags |= 0x400;

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerControllerId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

int UUIInteraction::GetPlayerControllerId ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerControllerId = NULL;

	if ( ! pFnGetPlayerControllerId )
		pFnGetPlayerControllerId = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.GetPlayerControllerId" );

	UUIInteraction_execGetPlayerControllerId_Parms GetPlayerControllerId_Parms;
	GetPlayerControllerId_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerControllerId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerId, &GetPlayerControllerId_Parms, NULL );

	pFnGetPlayerControllerId->FunctionFlags |= 0x400;

	return GetPlayerControllerId_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

int UUIInteraction::GetPlayerIndex ( int ControllerId )
{
	static UFunction* pFnGetPlayerIndex = NULL;

	if ( ! pFnGetPlayerIndex )
		pFnGetPlayerIndex = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.GetPlayerIndex" );

	UUIInteraction_execGetPlayerIndex_Parms GetPlayerIndex_Parms;
	GetPlayerIndex_Parms.ControllerId = ControllerId;

	pFnGetPlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerIndex, &GetPlayerIndex_Parms, NULL );

	pFnGetPlayerIndex->FunctionFlags |= 0x400;

	return GetPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIInteraction::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = UObject::FindObject< UFunction > ( "Function Engine.UIInteraction.GetPlayerCount" );

	UUIInteraction_execGetPlayerCount_Parms GetPlayerCount_Parms;

	pFnGetPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	pFnGetPlayerCount->FunctionFlags |= 0x400;

	return GetPlayerCount_Parms.ReturnValue;
};

// Function Engine.UISceneClient.GetActiveScene
// [0x00020002] 
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUISceneClient::GetActiveScene ( )
{
	static UFunction* pFnGetActiveScene = NULL;

	if ( ! pFnGetActiveScene )
		pFnGetActiveScene = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.GetActiveScene" );

	UUISceneClient_execGetActiveScene_Parms GetActiveScene_Parms;

	this->ProcessEvent ( pFnGetActiveScene, &GetActiveScene_Parms, NULL );

	return GetActiveScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.GetInverseCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Const | CPF_OptionalParm | CPF_Parm )

struct FMatrix UUISceneClient::GetInverseCanvasToScreen ( class UUIObject* Widget )
{
	static UFunction* pFnGetInverseCanvasToScreen = NULL;

	if ( ! pFnGetInverseCanvasToScreen )
		pFnGetInverseCanvasToScreen = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.GetInverseCanvasToScreen" );

	UUISceneClient_execGetInverseCanvasToScreen_Parms GetInverseCanvasToScreen_Parms;
	GetInverseCanvasToScreen_Parms.Widget = Widget;

	pFnGetInverseCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Parms, NULL );

	pFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;

	return GetInverseCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.GetCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Const | CPF_OptionalParm | CPF_Parm )

struct FMatrix UUISceneClient::GetCanvasToScreen ( class UUIObject* Widget )
{
	static UFunction* pFnGetCanvasToScreen = NULL;

	if ( ! pFnGetCanvasToScreen )
		pFnGetCanvasToScreen = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.GetCanvasToScreen" );

	UUISceneClient_execGetCanvasToScreen_Parms GetCanvasToScreen_Parms;
	GetCanvasToScreen_Parms.Widget = Widget;

	pFnGetCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanvasToScreen, &GetCanvasToScreen_Parms, NULL );

	pFnGetCanvasToScreen->FunctionFlags |= 0x400;

	return GetCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.UpdateCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUISceneClient::UpdateCanvasToScreen ( )
{
	static UFunction* pFnUpdateCanvasToScreen = NULL;

	if ( ! pFnUpdateCanvasToScreen )
		pFnUpdateCanvasToScreen = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.UpdateCanvasToScreen" );

	UUISceneClient_execUpdateCanvasToScreen_Parms UpdateCanvasToScreen_Parms;

	pFnUpdateCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCanvasToScreen, &UpdateCanvasToScreen_Parms, NULL );

	pFnUpdateCanvasToScreen->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.ChangeMouseCursor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CursorName                     ( CPF_Parm )

bool UUISceneClient::ChangeMouseCursor ( struct FName CursorName )
{
	static UFunction* pFnChangeMouseCursor = NULL;

	if ( ! pFnChangeMouseCursor )
		pFnChangeMouseCursor = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.ChangeMouseCursor" );

	UUISceneClient_execChangeMouseCursor_Parms ChangeMouseCursor_Parms;
	memcpy ( &ChangeMouseCursor_Parms.CursorName, &CursorName, 0x8 );

	pFnChangeMouseCursor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeMouseCursor, &ChangeMouseCursor_Parms, NULL );

	pFnChangeMouseCursor->FunctionFlags |= 0x400;

	return ChangeMouseCursor_Parms.ReturnValue;
};

// Function Engine.UISceneClient.SetMousePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewMouseX                      ( CPF_Parm )
// int                            NewMouseY                      ( CPF_Parm )

void UUISceneClient::SetMousePosition ( int NewMouseX, int NewMouseY )
{
	static UFunction* pFnSetMousePosition = NULL;

	if ( ! pFnSetMousePosition )
		pFnSetMousePosition = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.SetMousePosition" );

	UUISceneClient_execSetMousePosition_Parms SetMousePosition_Parms;
	SetMousePosition_Parms.NewMouseX = NewMouseX;
	SetMousePosition_Parms.NewMouseY = NewMouseY;

	pFnSetMousePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMousePosition, &SetMousePosition_Parms, NULL );

	pFnSetMousePosition->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.CloseScene
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool UUISceneClient::CloseScene ( class UUIScene* Scene )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.CloseScene" );

	UUISceneClient_execCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.Scene = Scene;

	pFnCloseScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	pFnCloseScene->FunctionFlags |= 0x400;

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.OpenScene
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** OpenedScene )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.OpenScene" );

	UUISceneClient_execOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.Scene = Scene;
	OpenScene_Parms.SceneOwner = SceneOwner;

	pFnOpenScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	pFnOpenScene->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = OpenScene_Parms.OpenedScene;

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.InitializeScene
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                InitializedScene               ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::InitializeScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene )
{
	static UFunction* pFnInitializeScene = NULL;

	if ( ! pFnInitializeScene )
		pFnInitializeScene = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.InitializeScene" );

	UUISceneClient_execInitializeScene_Parms InitializeScene_Parms;
	InitializeScene_Parms.Scene = Scene;
	InitializeScene_Parms.SceneOwner = SceneOwner;

	pFnInitializeScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeScene, &InitializeScene_Parms, NULL );

	pFnInitializeScene->FunctionFlags |= 0x400;

	if ( InitializedScene )
		*InitializedScene = InitializeScene_Parms.InitializedScene;

	return InitializeScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.IsSceneInitialized
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool UUISceneClient::IsSceneInitialized ( class UUIScene* Scene )
{
	static UFunction* pFnIsSceneInitialized = NULL;

	if ( ! pFnIsSceneInitialized )
		pFnIsSceneInitialized = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.IsSceneInitialized" );

	UUISceneClient_execIsSceneInitialized_Parms IsSceneInitialized_Parms;
	IsSceneInitialized_Parms.Scene = Scene;

	pFnIsSceneInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSceneInitialized, &IsSceneInitialized_Parms, NULL );

	pFnIsSceneInitialized->FunctionFlags |= 0x400;

	return IsSceneInitialized_Parms.ReturnValue;
};

// Function Engine.UISceneClient.IsUIActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Flags                          ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::IsUIActive ( int Flags )
{
	static UFunction* pFnIsUIActive = NULL;

	if ( ! pFnIsUIActive )
		pFnIsUIActive = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.IsUIActive" );

	UUISceneClient_execIsUIActive_Parms IsUIActive_Parms;
	IsUIActive_Parms.Flags = Flags;

	pFnIsUIActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUIActive, &IsUIActive_Parms, NULL );

	pFnIsUIActive->FunctionFlags |= 0x400;

	return IsUIActive_Parms.ReturnValue;
};

// Function Engine.UISceneClient.ChangeActiveSkin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 NewActiveSkin                  ( CPF_Parm )

bool UUISceneClient::ChangeActiveSkin ( class UUISkin* NewActiveSkin )
{
	static UFunction* pFnChangeActiveSkin = NULL;

	if ( ! pFnChangeActiveSkin )
		pFnChangeActiveSkin = UObject::FindObject< UFunction > ( "Function Engine.UISceneClient.ChangeActiveSkin" );

	UUISceneClient_execChangeActiveSkin_Parms ChangeActiveSkin_Parms;
	ChangeActiveSkin_Parms.NewActiveSkin = NewActiveSkin;

	pFnChangeActiveSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeActiveSkin, &ChangeActiveSkin_Parms, NULL );

	pFnChangeActiveSkin->FunctionFlags |= 0x400;

	return ChangeActiveSkin_Parms.ReturnValue;
};

// Function Engine.UIState.RemoveSequenceObjects
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class USequenceObject* > ObjectsToRemove                ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIState::RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = UObject::FindObject< UFunction > ( "Function Engine.UIState.RemoveSequenceObjects" );

	UUIState_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;

	if ( ObjectsToRemove )
		memcpy ( ObjectsToRemove, &RemoveSequenceObjects_Parms.ObjectsToRemove, 0xC );
};

// Function Engine.UIState.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUIState::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIState.RemoveSequenceObject" );

	UUIState_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UIState.AddSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIState::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIState.AddSequenceObject" );

	UUIState_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIState.GetUIEvents
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_Events                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIState::GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = UObject::FindObject< UFunction > ( "Function Engine.UIState.GetUIEvents" );

	UUIState_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0xC );
};

// Function Engine.UIState.IsStateAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// class UUIState*                NewState                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex )
{
	static UFunction* pFnIsStateAllowed = NULL;

	if ( ! pFnIsStateAllowed )
		pFnIsStateAllowed = UObject::FindObject< UFunction > ( "Function Engine.UIState.IsStateAllowed" );

	UUIState_eventIsStateAllowed_Parms IsStateAllowed_Parms;
	IsStateAllowed_Parms.Target = Target;
	IsStateAllowed_Parms.NewState = NewState;
	IsStateAllowed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnIsStateAllowed, &IsStateAllowed_Parms, NULL );

	return IsStateAllowed_Parms.ReturnValue;
};

// Function Engine.UIState.OnDeactivate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bPoppedState                   ( CPF_Parm )

void UUIState::eventOnDeactivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPoppedState )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = UObject::FindObject< UFunction > ( "Function Engine.UIState.OnDeactivate" );

	UUIState_eventOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.Target = Target;
	OnDeactivate_Parms.PlayerIndex = PlayerIndex;
	OnDeactivate_Parms.bPoppedState = bPoppedState;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function Engine.UIState.OnActivate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bPushedState                   ( CPF_Parm )

void UUIState::eventOnActivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPushedState )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = UObject::FindObject< UFunction > ( "Function Engine.UIState.OnActivate" );

	UUIState_eventOnActivate_Parms OnActivate_Parms;
	OnActivate_Parms.Target = Target;
	OnActivate_Parms.PlayerIndex = PlayerIndex;
	OnActivate_Parms.bPushedState = bPushedState;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function Engine.UIState.DeactivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventDeactivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnDeactivateState = NULL;

	if ( ! pFnDeactivateState )
		pFnDeactivateState = UObject::FindObject< UFunction > ( "Function Engine.UIState.DeactivateState" );

	UUIState_eventDeactivateState_Parms DeactivateState_Parms;
	DeactivateState_Parms.Target = Target;
	DeactivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDeactivateState, &DeactivateState_Parms, NULL );

	return DeactivateState_Parms.ReturnValue;
};

// Function Engine.UIState.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = UObject::FindObject< UFunction > ( "Function Engine.UIState.ActivateState" );

	UUIState_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIState.IsActiveForPlayer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::IsActiveForPlayer ( int PlayerIndex )
{
	static UFunction* pFnIsActiveForPlayer = NULL;

	if ( ! pFnIsActiveForPlayer )
		pFnIsActiveForPlayer = UObject::FindObject< UFunction > ( "Function Engine.UIState.IsActiveForPlayer" );

	UUIState_execIsActiveForPlayer_Parms IsActiveForPlayer_Parms;
	IsActiveForPlayer_Parms.PlayerIndex = PlayerIndex;

	pFnIsActiveForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActiveForPlayer, &IsActiveForPlayer_Parms, NULL );

	pFnIsActiveForPlayer->FunctionFlags |= 0x400;

	return IsActiveForPlayer_Parms.ReturnValue;
};

// Function Engine.UIState.IsWidgetClassSupported
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )

bool UUIState::eventIsWidgetClassSupported ( class UClass* WidgetClass )
{
	static UFunction* pFnIsWidgetClassSupported = NULL;

	if ( ! pFnIsWidgetClassSupported )
		pFnIsWidgetClassSupported = UObject::FindObject< UFunction > ( "Function Engine.UIState.IsWidgetClassSupported" );

	UUIState_eventIsWidgetClassSupported_Parms IsWidgetClassSupported_Parms;
	IsWidgetClassSupported_Parms.WidgetClass = WidgetClass;

	this->ProcessEvent ( pFnIsWidgetClassSupported, &IsWidgetClassSupported_Parms, NULL );

	return IsWidgetClassSupported_Parms.ReturnValue;
};

// Function Engine.UIState_Disabled.IsStateAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// class UUIState*                NewState                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Disabled::eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex )
{
	static UFunction* pFnIsStateAllowed = NULL;

	if ( ! pFnIsStateAllowed )
		pFnIsStateAllowed = UObject::FindObject< UFunction > ( "Function Engine.UIState_Disabled.IsStateAllowed" );

	UUIState_Disabled_eventIsStateAllowed_Parms IsStateAllowed_Parms;
	IsStateAllowed_Parms.Target = Target;
	IsStateAllowed_Parms.NewState = NewState;
	IsStateAllowed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnIsStateAllowed, &IsStateAllowed_Parms, NULL );

	return IsStateAllowed_Parms.ReturnValue;
};

// Function Engine.UIState_Disabled.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Disabled::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = UObject::FindObject< UFunction > ( "Function Engine.UIState_Disabled.ActivateState" );

	UUIState_Disabled_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIString.ContainsMarkup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIString::ContainsMarkup ( )
{
	static UFunction* pFnContainsMarkup = NULL;

	if ( ! pFnContainsMarkup )
		pFnContainsMarkup = UObject::FindObject< UFunction > ( "Function Engine.UIString.ContainsMarkup" );

	UUIString_execContainsMarkup_Parms ContainsMarkup_Parms;

	pFnContainsMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsMarkup, &ContainsMarkup_Parms, NULL );

	pFnContainsMarkup->FunctionFlags |= 0x400;

	return ContainsMarkup_Parms.ReturnValue;
};

// Function Engine.UIString.GetAutoScaleValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               BoundingRegionSize             ( CPF_Parm )
// struct FVector2D               StringSize                     ( CPF_Parm )
// struct FVector2D               out_AutoScalePercent           ( CPF_Parm | CPF_OutParm )

void UUIString::GetAutoScaleValue ( struct FVector2D BoundingRegionSize, struct FVector2D StringSize, struct FVector2D* out_AutoScalePercent )
{
	static UFunction* pFnGetAutoScaleValue = NULL;

	if ( ! pFnGetAutoScaleValue )
		pFnGetAutoScaleValue = UObject::FindObject< UFunction > ( "Function Engine.UIString.GetAutoScaleValue" );

	UUIString_execGetAutoScaleValue_Parms GetAutoScaleValue_Parms;
	memcpy ( &GetAutoScaleValue_Parms.BoundingRegionSize, &BoundingRegionSize, 0x8 );
	memcpy ( &GetAutoScaleValue_Parms.StringSize, &StringSize, 0x8 );

	pFnGetAutoScaleValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAutoScaleValue, &GetAutoScaleValue_Parms, NULL );

	pFnGetAutoScaleValue->FunctionFlags |= 0x400;

	if ( out_AutoScalePercent )
		memcpy ( out_AutoScalePercent, &GetAutoScaleValue_Parms.out_AutoScalePercent, 0x8 );
};

// Function Engine.UIString.GetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bReturnProcessedText           ( CPF_OptionalParm | CPF_Parm )

struct FString UUIString::GetValue ( unsigned long bReturnProcessedText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = UObject::FindObject< UFunction > ( "Function Engine.UIString.GetValue" );

	UUIString_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnProcessedText = bReturnProcessedText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIString.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InputString                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreMarkup                  ( CPF_Parm )

bool UUIString::SetValue ( struct FString InputString, unsigned long bIgnoreMarkup )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UIString.SetValue" );

	UUIString_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.InputString, &InputString, 0xC );
	SetValue_Parms.bIgnoreMarkup = bIgnoreMarkup;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;

	return SetValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.ParseTagArrayDelimiter
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm | CPF_OutParm )

int UUIDataProvider::ParseTagArrayDelimiter ( struct FName* FieldName )
{
	static UFunction* pFnParseTagArrayDelimiter = NULL;

	if ( ! pFnParseTagArrayDelimiter )
		pFnParseTagArrayDelimiter = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.ParseTagArrayDelimiter" );

	UUIDataProvider_execParseTagArrayDelimiter_Parms ParseTagArrayDelimiter_Parms;

	this->ProcessEvent ( pFnParseTagArrayDelimiter, &ParseTagArrayDelimiter_Parms, NULL );

	if ( FieldName )
		memcpy ( FieldName, &ParseTagArrayDelimiter_Parms.FieldName, 0x8 );

	return ParseTagArrayDelimiter_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

bool UUIDataProvider::RemovePropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnRemovePropertyNotificationChangeRequest = NULL;

	if ( ! pFnRemovePropertyNotificationChangeRequest )
		pFnRemovePropertyNotificationChangeRequest = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest" );

	UUIDataProvider_execRemovePropertyNotificationChangeRequest_Parms RemovePropertyNotificationChangeRequest_Parms;
	memcpy ( &RemovePropertyNotificationChangeRequest_Parms.InDelegate, &InDelegate, 0xC );

	this->ProcessEvent ( pFnRemovePropertyNotificationChangeRequest, &RemovePropertyNotificationChangeRequest_Parms, NULL );

	return RemovePropertyNotificationChangeRequest_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAllowDuplicates               ( CPF_OptionalParm | CPF_Parm )

bool UUIDataProvider::AddPropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate, unsigned long bAllowDuplicates )
{
	static UFunction* pFnAddPropertyNotificationChangeRequest = NULL;

	if ( ! pFnAddPropertyNotificationChangeRequest )
		pFnAddPropertyNotificationChangeRequest = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest" );

	UUIDataProvider_execAddPropertyNotificationChangeRequest_Parms AddPropertyNotificationChangeRequest_Parms;
	memcpy ( &AddPropertyNotificationChangeRequest_Parms.InDelegate, &InDelegate, 0xC );
	AddPropertyNotificationChangeRequest_Parms.bAllowDuplicates = bAllowDuplicates;

	this->ProcessEvent ( pFnAddPropertyNotificationChangeRequest, &AddPropertyNotificationChangeRequest_Parms, NULL );

	return AddPropertyNotificationChangeRequest_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.NotifyPropertyChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider::eventNotifyPropertyChanged ( struct FName PropTag )
{
	static UFunction* pFnNotifyPropertyChanged = NULL;

	if ( ! pFnNotifyPropertyChanged )
		pFnNotifyPropertyChanged = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.NotifyPropertyChanged" );

	UUIDataProvider_eventNotifyPropertyChanged_Parms NotifyPropertyChanged_Parms;
	memcpy ( &NotifyPropertyChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnNotifyPropertyChanged, &NotifyPropertyChanged_Parms, NULL );
};

// Function Engine.UIDataProvider.IsCollectionDataType
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FieldType                      ( CPF_Parm )

bool UUIDataProvider::eventIsCollectionDataType ( unsigned char FieldType )
{
	static UFunction* pFnIsCollectionDataType = NULL;

	if ( ! pFnIsCollectionDataType )
		pFnIsCollectionDataType = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.IsCollectionDataType" );

	UUIDataProvider_eventIsCollectionDataType_Parms IsCollectionDataType_Parms;
	IsCollectionDataType_Parms.FieldType = FieldType;

	this->ProcessEvent ( pFnIsCollectionDataType, &IsCollectionDataType_Parms, NULL );

	return IsCollectionDataType_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.IsProviderDisabled
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataProvider::eventIsProviderDisabled ( )
{
	static UFunction* pFnIsProviderDisabled = NULL;

	if ( ! pFnIsProviderDisabled )
		pFnIsProviderDisabled = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.IsProviderDisabled" );

	UUIDataProvider_eventIsProviderDisabled_Parms IsProviderDisabled_Parms;

	this->ProcessEvent ( pFnIsProviderDisabled, &IsProviderDisabled_Parms, NULL );

	return IsProviderDisabled_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateFillerData
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 DataTag                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UUIDataProvider::eventGenerateFillerData ( struct FString DataTag )
{
	static UFunction* pFnGenerateFillerData = NULL;

	if ( ! pFnGenerateFillerData )
		pFnGenerateFillerData = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.GenerateFillerData" );

	UUIDataProvider_eventGenerateFillerData_Parms GenerateFillerData_Parms;
	memcpy ( &GenerateFillerData_Parms.DataTag, &DataTag, 0xC );

	this->ProcessEvent ( pFnGenerateFillerData, &GenerateFillerData_Parms, NULL );

	return GenerateFillerData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateScriptMarkupString
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   DataTag                        ( CPF_Parm )

struct FString UUIDataProvider::eventGenerateScriptMarkupString ( struct FName DataTag )
{
	static UFunction* pFnGenerateScriptMarkupString = NULL;

	if ( ! pFnGenerateScriptMarkupString )
		pFnGenerateScriptMarkupString = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.GenerateScriptMarkupString" );

	UUIDataProvider_eventGenerateScriptMarkupString_Parms GenerateScriptMarkupString_Parms;
	memcpy ( &GenerateScriptMarkupString_Parms.DataTag, &DataTag, 0x8 );

	this->ProcessEvent ( pFnGenerateScriptMarkupString, &GenerateScriptMarkupString_Parms, NULL );

	return GenerateScriptMarkupString_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.SetFieldValue
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataProvider::eventSetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnSetFieldValue = NULL;

	if ( ! pFnSetFieldValue )
		pFnSetFieldValue = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.SetFieldValue" );

	UUIDataProvider_eventSetFieldValue_Parms SetFieldValue_Parms;
	memcpy ( &SetFieldValue_Parms.FieldName, &FieldName, 0xC );
	SetFieldValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnSetFieldValue, &SetFieldValue_Parms, NULL );

	if ( FieldValue )
		memcpy ( FieldValue, &SetFieldValue_Parms.FieldValue, 0x40 );

	return SetFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetFieldValue
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataProvider::eventGetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnGetFieldValue = NULL;

	if ( ! pFnGetFieldValue )
		pFnGetFieldValue = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.GetFieldValue" );

	UUIDataProvider_eventGetFieldValue_Parms GetFieldValue_Parms;
	memcpy ( &GetFieldValue_Parms.FieldName, &FieldName, 0xC );
	GetFieldValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnGetFieldValue, &GetFieldValue_Parms, NULL );

	if ( FieldValue )
		memcpy ( FieldValue, &GetFieldValue_Parms.FieldValue, 0x40 );

	return GetFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.AllowPublishingToField
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )

bool UUIDataProvider::eventAllowPublishingToField ( struct FString FieldName, int ArrayIndex )
{
	static UFunction* pFnAllowPublishingToField = NULL;

	if ( ! pFnAllowPublishingToField )
		pFnAllowPublishingToField = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.AllowPublishingToField" );

	UUIDataProvider_eventAllowPublishingToField_Parms AllowPublishingToField_Parms;
	memcpy ( &AllowPublishingToField_Parms.FieldName, &FieldName, 0xC );
	AllowPublishingToField_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnAllowPublishingToField, &AllowPublishingToField_Parms, NULL );

	return AllowPublishingToField_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetSupportedScriptFields
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// TArray< struct FUIDataProviderField > out_Fields                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataProvider::eventGetSupportedScriptFields ( TArray< struct FUIDataProviderField >* out_Fields )
{
	static UFunction* pFnGetSupportedScriptFields = NULL;

	if ( ! pFnGetSupportedScriptFields )
		pFnGetSupportedScriptFields = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.GetSupportedScriptFields" );

	UUIDataProvider_eventGetSupportedScriptFields_Parms GetSupportedScriptFields_Parms;

	this->ProcessEvent ( pFnGetSupportedScriptFields, &GetSupportedScriptFields_Parms, NULL );

	if ( out_Fields )
		memcpy ( out_Fields, &GetSupportedScriptFields_Parms.out_Fields, 0xC );
};

// Function Engine.UIDataProvider.ParseArrayDelimiter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataTag                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataProvider::ParseArrayDelimiter ( struct FString* DataTag )
{
	static UFunction* pFnParseArrayDelimiter = NULL;

	if ( ! pFnParseArrayDelimiter )
		pFnParseArrayDelimiter = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.ParseArrayDelimiter" );

	UUIDataProvider_execParseArrayDelimiter_Parms ParseArrayDelimiter_Parms;

	pFnParseArrayDelimiter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseArrayDelimiter, &ParseArrayDelimiter_Parms, NULL );

	pFnParseArrayDelimiter->FunctionFlags |= 0x400;

	if ( DataTag )
		memcpy ( DataTag, &ParseArrayDelimiter_Parms.DataTag, 0xC );

	return ParseArrayDelimiter_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetProviderFieldType
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataTag                        ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned char                  out_ProviderFieldType          ( CPF_Parm | CPF_OutParm )

bool UUIDataProvider::GetProviderFieldType ( struct FString DataTag, unsigned char* out_ProviderFieldType )
{
	static UFunction* pFnGetProviderFieldType = NULL;

	if ( ! pFnGetProviderFieldType )
		pFnGetProviderFieldType = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.GetProviderFieldType" );

	UUIDataProvider_execGetProviderFieldType_Parms GetProviderFieldType_Parms;
	memcpy ( &GetProviderFieldType_Parms.DataTag, &DataTag, 0xC );

	pFnGetProviderFieldType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderFieldType, &GetProviderFieldType_Parms, NULL );

	pFnGetProviderFieldType->FunctionFlags |= 0x400;

	if ( out_ProviderFieldType )
		*out_ProviderFieldType = GetProviderFieldType_Parms.out_ProviderFieldType;

	return GetProviderFieldType_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.OnDataProviderPropertyChange
// [0x00120000] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider::OnDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnOnDataProviderPropertyChange = NULL;

	if ( ! pFnOnDataProviderPropertyChange )
		pFnOnDataProviderPropertyChange = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider.OnDataProviderPropertyChange" );

	UUIDataProvider_execOnDataProviderPropertyChange_Parms OnDataProviderPropertyChange_Parms;
	OnDataProviderPropertyChange_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnDataProviderPropertyChange_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnOnDataProviderPropertyChange, &OnDataProviderPropertyChange_Parms, NULL );
};

// Function Engine.UIDataStore.GetDataStoreClient
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIDataStore::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.GetDataStoreClient" );

	UUIDataStore_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIDataStore.OnCommit
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStore::OnCommit ( )
{
	static UFunction* pFnOnCommit = NULL;

	if ( ! pFnOnCommit )
		pFnOnCommit = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.OnCommit" );

	UUIDataStore_execOnCommit_Parms OnCommit_Parms;

	pFnOnCommit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnCommit, &OnCommit_Parms, NULL );

	pFnOnCommit->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore.RefreshSubscribers
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   PropertyTag                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInvalidateValues              ( CPF_OptionalParm | CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_OptionalParm | CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore::eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnRefreshSubscribers = NULL;

	if ( ! pFnRefreshSubscribers )
		pFnRefreshSubscribers = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.RefreshSubscribers" );

	UUIDataStore_eventRefreshSubscribers_Parms RefreshSubscribers_Parms;
	memcpy ( &RefreshSubscribers_Parms.PropertyTag, &PropertyTag, 0x8 );
	RefreshSubscribers_Parms.bInvalidateValues = bInvalidateValues;
	RefreshSubscribers_Parms.SourceProvider = SourceProvider;
	RefreshSubscribers_Parms.ArrayIndex = ArrayIndex;

	pFnRefreshSubscribers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscribers, &RefreshSubscribers_Parms, NULL );

	pFnRefreshSubscribers->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.NotifyGameSessionEnded" );

	UUIDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore.SubscriberDetached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberDetached = NULL;

	if ( ! pFnSubscriberDetached )
		pFnSubscriberDetached = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.SubscriberDetached" );

	UUIDataStore_eventSubscriberDetached_Parms SubscriberDetached_Parms;
	SubscriberDetached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberDetached, &SubscriberDetached_Parms, NULL );
};

// Function Engine.UIDataStore.SubscriberAttached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberAttached = NULL;

	if ( ! pFnSubscriberAttached )
		pFnSubscriberAttached = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.SubscriberAttached" );

	UUIDataStore_eventSubscriberAttached_Parms SubscriberAttached_Parms;
	SubscriberAttached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberAttached, &SubscriberAttached_Parms, NULL );
};

// Function Engine.UIDataStore.Unregistered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.Unregistered" );

	UUIDataStore_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore.Registered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.Registered" );

	UUIDataStore_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore.OnDataStoreValueUpdated
// [0x00120000] 
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStore::OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnOnDataStoreValueUpdated = NULL;

	if ( ! pFnOnDataStoreValueUpdated )
		pFnOnDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore.OnDataStoreValueUpdated" );

	UUIDataStore_execOnDataStoreValueUpdated_Parms OnDataStoreValueUpdated_Parms;
	OnDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	OnDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &OnDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	OnDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	OnDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnOnDataStoreValueUpdated, &OnDataStoreValueUpdated_Parms, NULL );
};

// Function Engine.UISkin.GetStyleGroups
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeInheritedGroups        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       StyleGroupArray                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISkin::GetStyleGroups ( unsigned long bIncludeInheritedGroups, TArray< struct FString >* StyleGroupArray )
{
	static UFunction* pFnGetStyleGroups = NULL;

	if ( ! pFnGetStyleGroups )
		pFnGetStyleGroups = UObject::FindObject< UFunction > ( "Function Engine.UISkin.GetStyleGroups" );

	UUISkin_execGetStyleGroups_Parms GetStyleGroups_Parms;
	GetStyleGroups_Parms.bIncludeInheritedGroups = bIncludeInheritedGroups;

	pFnGetStyleGroups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleGroups, &GetStyleGroups_Parms, NULL );

	pFnGetStyleGroups->FunctionFlags |= 0x400;

	if ( StyleGroupArray )
		memcpy ( StyleGroupArray, &GetStyleGroups_Parms.StyleGroupArray, 0xC );
};

// Function Engine.UISkin.FindStyleGroupIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

int UUISkin::FindStyleGroupIndex ( struct FString StyleGroupName )
{
	static UFunction* pFnFindStyleGroupIndex = NULL;

	if ( ! pFnFindStyleGroupIndex )
		pFnFindStyleGroupIndex = UObject::FindObject< UFunction > ( "Function Engine.UISkin.FindStyleGroupIndex" );

	UUISkin_execFindStyleGroupIndex_Parms FindStyleGroupIndex_Parms;
	memcpy ( &FindStyleGroupIndex_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnFindStyleGroupIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleGroupIndex, &FindStyleGroupIndex_Parms, NULL );

	pFnFindStyleGroupIndex->FunctionFlags |= 0x400;

	return FindStyleGroupIndex_Parms.ReturnValue;
};

// Function Engine.UISkin.GetStyleGroupAtIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )

struct FString UUISkin::GetStyleGroupAtIndex ( int Index )
{
	static UFunction* pFnGetStyleGroupAtIndex = NULL;

	if ( ! pFnGetStyleGroupAtIndex )
		pFnGetStyleGroupAtIndex = UObject::FindObject< UFunction > ( "Function Engine.UISkin.GetStyleGroupAtIndex" );

	UUISkin_execGetStyleGroupAtIndex_Parms GetStyleGroupAtIndex_Parms;
	GetStyleGroupAtIndex_Parms.Index = Index;

	pFnGetStyleGroupAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleGroupAtIndex, &GetStyleGroupAtIndex_Parms, NULL );

	pFnGetStyleGroupAtIndex->FunctionFlags |= 0x400;

	return GetStyleGroupAtIndex_Parms.ReturnValue;
};

// Function Engine.UISkin.RenameStyleGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OldStyleGroupName              ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NewStyleGroupName              ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::RenameStyleGroup ( struct FString OldStyleGroupName, struct FString NewStyleGroupName )
{
	static UFunction* pFnRenameStyleGroup = NULL;

	if ( ! pFnRenameStyleGroup )
		pFnRenameStyleGroup = UObject::FindObject< UFunction > ( "Function Engine.UISkin.RenameStyleGroup" );

	UUISkin_execRenameStyleGroup_Parms RenameStyleGroup_Parms;
	memcpy ( &RenameStyleGroup_Parms.OldStyleGroupName, &OldStyleGroupName, 0xC );
	memcpy ( &RenameStyleGroup_Parms.NewStyleGroupName, &NewStyleGroupName, 0xC );

	pFnRenameStyleGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRenameStyleGroup, &RenameStyleGroup_Parms, NULL );

	pFnRenameStyleGroup->FunctionFlags |= 0x400;

	return RenameStyleGroup_Parms.ReturnValue;
};

// Function Engine.UISkin.RemoveStyleGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::RemoveStyleGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnRemoveStyleGroupName = NULL;

	if ( ! pFnRemoveStyleGroupName )
		pFnRemoveStyleGroupName = UObject::FindObject< UFunction > ( "Function Engine.UISkin.RemoveStyleGroupName" );

	UUISkin_execRemoveStyleGroupName_Parms RemoveStyleGroupName_Parms;
	memcpy ( &RemoveStyleGroupName_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnRemoveStyleGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStyleGroupName, &RemoveStyleGroupName_Parms, NULL );

	pFnRemoveStyleGroupName->FunctionFlags |= 0x400;

	return RemoveStyleGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.AddStyleGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::AddStyleGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnAddStyleGroupName = NULL;

	if ( ! pFnAddStyleGroupName )
		pFnAddStyleGroupName = UObject::FindObject< UFunction > ( "Function Engine.UISkin.AddStyleGroupName" );

	UUISkin_execAddStyleGroupName_Parms AddStyleGroupName_Parms;
	memcpy ( &AddStyleGroupName_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnAddStyleGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddStyleGroupName, &AddStyleGroupName_Parms, NULL );

	pFnAddStyleGroupName->FunctionFlags |= 0x400;

	return AddStyleGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.IsInheritedGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::IsInheritedGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnIsInheritedGroupName = NULL;

	if ( ! pFnIsInheritedGroupName )
		pFnIsInheritedGroupName = UObject::FindObject< UFunction > ( "Function Engine.UISkin.IsInheritedGroupName" );

	UUISkin_execIsInheritedGroupName_Parms IsInheritedGroupName_Parms;
	memcpy ( &IsInheritedGroupName_Parms.StyleGroupName, &StyleGroupName, 0xC );

	pFnIsInheritedGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInheritedGroupName, &IsInheritedGroupName_Parms, NULL );

	pFnIsInheritedGroupName->FunctionFlags |= 0x400;

	return IsInheritedGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.GetSkinSoundCues
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FUISoundCue >   out_SoundCues                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISkin::GetSkinSoundCues ( TArray< struct FUISoundCue >* out_SoundCues )
{
	static UFunction* pFnGetSkinSoundCues = NULL;

	if ( ! pFnGetSkinSoundCues )
		pFnGetSkinSoundCues = UObject::FindObject< UFunction > ( "Function Engine.UISkin.GetSkinSoundCues" );

	UUISkin_execGetSkinSoundCues_Parms GetSkinSoundCues_Parms;

	pFnGetSkinSoundCues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkinSoundCues, &GetSkinSoundCues_Parms, NULL );

	pFnGetSkinSoundCues->FunctionFlags |= 0x400;

	if ( out_SoundCues )
		memcpy ( out_SoundCues, &GetSkinSoundCues_Parms.out_SoundCues, 0xC );
};

// Function Engine.UISkin.GetUISoundCue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// class USoundCue*               out_UISoundCue                 ( CPF_Parm | CPF_OutParm )

bool UUISkin::GetUISoundCue ( struct FName SoundCueName, class USoundCue** out_UISoundCue )
{
	static UFunction* pFnGetUISoundCue = NULL;

	if ( ! pFnGetUISoundCue )
		pFnGetUISoundCue = UObject::FindObject< UFunction > ( "Function Engine.UISkin.GetUISoundCue" );

	UUISkin_execGetUISoundCue_Parms GetUISoundCue_Parms;
	memcpy ( &GetUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );

	pFnGetUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUISoundCue, &GetUISoundCue_Parms, NULL );

	pFnGetUISoundCue->FunctionFlags |= 0x400;

	if ( out_UISoundCue )
		*out_UISoundCue = GetUISoundCue_Parms.out_UISoundCue;

	return GetUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.RemoveUISoundCue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )

bool UUISkin::RemoveUISoundCue ( struct FName SoundCueName )
{
	static UFunction* pFnRemoveUISoundCue = NULL;

	if ( ! pFnRemoveUISoundCue )
		pFnRemoveUISoundCue = UObject::FindObject< UFunction > ( "Function Engine.UISkin.RemoveUISoundCue" );

	UUISkin_execRemoveUISoundCue_Parms RemoveUISoundCue_Parms;
	memcpy ( &RemoveUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );

	pFnRemoveUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveUISoundCue, &RemoveUISoundCue_Parms, NULL );

	pFnRemoveUISoundCue->FunctionFlags |= 0x400;

	return RemoveUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.AddUISoundCue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// class USoundCue*               SoundToPlay                    ( CPF_Parm )

bool UUISkin::AddUISoundCue ( struct FName SoundCueName, class USoundCue* SoundToPlay )
{
	static UFunction* pFnAddUISoundCue = NULL;

	if ( ! pFnAddUISoundCue )
		pFnAddUISoundCue = UObject::FindObject< UFunction > ( "Function Engine.UISkin.AddUISoundCue" );

	UUISkin_execAddUISoundCue_Parms AddUISoundCue_Parms;
	memcpy ( &AddUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );
	AddUISoundCue_Parms.SoundToPlay = SoundToPlay;

	pFnAddUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddUISoundCue, &AddUISoundCue_Parms, NULL );

	pFnAddUISoundCue->FunctionFlags |= 0x400;

	return AddUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.GetCursorResource
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUITexture*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CursorName                     ( CPF_Parm )

class UUITexture* UUISkin::GetCursorResource ( struct FName CursorName )
{
	static UFunction* pFnGetCursorResource = NULL;

	if ( ! pFnGetCursorResource )
		pFnGetCursorResource = UObject::FindObject< UFunction > ( "Function Engine.UISkin.GetCursorResource" );

	UUISkin_execGetCursorResource_Parms GetCursorResource_Parms;
	memcpy ( &GetCursorResource_Parms.CursorName, &CursorName, 0x8 );

	pFnGetCursorResource->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorResource, &GetCursorResource_Parms, NULL );

	pFnGetCursorResource->FunctionFlags |= 0x400;

	return GetCursorResource_Parms.ReturnValue;
};

// Function Engine.UISkin.GetAvailableStyles
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeInheritedStyles        ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIStyle* >      out_Styles                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISkin::GetAvailableStyles ( unsigned long bIncludeInheritedStyles, TArray< class UUIStyle* >* out_Styles )
{
	static UFunction* pFnGetAvailableStyles = NULL;

	if ( ! pFnGetAvailableStyles )
		pFnGetAvailableStyles = UObject::FindObject< UFunction > ( "Function Engine.UISkin.GetAvailableStyles" );

	UUISkin_execGetAvailableStyles_Parms GetAvailableStyles_Parms;
	GetAvailableStyles_Parms.bIncludeInheritedStyles = bIncludeInheritedStyles;

	pFnGetAvailableStyles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableStyles, &GetAvailableStyles_Parms, NULL );

	pFnGetAvailableStyles->FunctionFlags |= 0x400;

	if ( out_Styles )
		memcpy ( out_Styles, &GetAvailableStyles_Parms.out_Styles, 0xC );
};

// Function Engine.UIStyle.GetDefaultStyle
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIStyle_Data* UUIStyle::eventGetDefaultStyle ( )
{
	static UFunction* pFnGetDefaultStyle = NULL;

	if ( ! pFnGetDefaultStyle )
		pFnGetDefaultStyle = UObject::FindObject< UFunction > ( "Function Engine.UIStyle.GetDefaultStyle" );

	UUIStyle_eventGetDefaultStyle_Parms GetDefaultStyle_Parms;

	this->ProcessEvent ( pFnGetDefaultStyle, &GetDefaultStyle_Parms, NULL );

	return GetDefaultStyle_Parms.ReturnValue;
};

// Function Engine.UIStyle.GetStyleForStateByClass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateClass                     ( CPF_Parm )

class UUIStyle_Data* UUIStyle::GetStyleForStateByClass ( class UClass* StateClass )
{
	static UFunction* pFnGetStyleForStateByClass = NULL;

	if ( ! pFnGetStyleForStateByClass )
		pFnGetStyleForStateByClass = UObject::FindObject< UFunction > ( "Function Engine.UIStyle.GetStyleForStateByClass" );

	UUIStyle_execGetStyleForStateByClass_Parms GetStyleForStateByClass_Parms;
	GetStyleForStateByClass_Parms.StateClass = StateClass;

	pFnGetStyleForStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleForStateByClass, &GetStyleForStateByClass_Parms, NULL );

	pFnGetStyleForStateByClass->FunctionFlags |= 0x400;

	return GetStyleForStateByClass_Parms.ReturnValue;
};

// Function Engine.UIStyle.GetStyleForState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateObject                    ( CPF_Parm )

class UUIStyle_Data* UUIStyle::GetStyleForState ( class UUIState* StateObject )
{
	static UFunction* pFnGetStyleForState = NULL;

	if ( ! pFnGetStyleForState )
		pFnGetStyleForState = UObject::FindObject< UFunction > ( "Function Engine.UIStyle.GetStyleForState" );

	UUIStyle_execGetStyleForState_Parms GetStyleForState_Parms;
	GetStyleForState_Parms.StateObject = StateObject;

	pFnGetStyleForState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleForState, &GetStyleForState_Parms, NULL );

	pFnGetStyleForState->FunctionFlags |= 0x400;

	return GetStyleForState_Parms.ReturnValue;
};

// Function Engine.UIObject.OnUIAnimEnd
// [0x00120000] 
// Parameters infos:
// class UUIObject*               AnimTarget                     ( CPF_Parm )
// int                            AnimIndex                      ( CPF_Parm )
// class UUIAnimationSeq*         AnimSeq                        ( CPF_Parm )

void UUIObject::OnUIAnimEnd ( class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq )
{
	static UFunction* pFnOnUIAnimEnd = NULL;

	if ( ! pFnOnUIAnimEnd )
		pFnOnUIAnimEnd = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnUIAnimEnd" );

	UUIObject_execOnUIAnimEnd_Parms OnUIAnimEnd_Parms;
	OnUIAnimEnd_Parms.AnimTarget = AnimTarget;
	OnUIAnimEnd_Parms.AnimIndex = AnimIndex;
	OnUIAnimEnd_Parms.AnimSeq = AnimSeq;

	this->ProcessEvent ( pFnOnUIAnimEnd, &OnUIAnimEnd_Parms, NULL );
};

// Function Engine.UIObject.UIAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            SeqIndex                       ( CPF_Parm )

void UUIObject::eventUIAnimEnd ( int SeqIndex )
{
	static UFunction* pFnUIAnimEnd = NULL;

	if ( ! pFnUIAnimEnd )
		pFnUIAnimEnd = UObject::FindObject< UFunction > ( "Function Engine.UIObject.UIAnimEnd" );

	UUIObject_eventUIAnimEnd_Parms UIAnimEnd_Parms;
	UIAnimEnd_Parms.SeqIndex = SeqIndex;

	this->ProcessEvent ( pFnUIAnimEnd, &UIAnimEnd_Parms, NULL );
};

// Function Engine.UIObject.ClearUIAnimation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// class UUIAnimationSeq*         AnimSeq                        ( CPF_OptionalParm | CPF_Parm )

void UUIObject::eventClearUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeq )
{
	static UFunction* pFnClearUIAnimation = NULL;

	if ( ! pFnClearUIAnimation )
		pFnClearUIAnimation = UObject::FindObject< UFunction > ( "Function Engine.UIObject.ClearUIAnimation" );

	UUIObject_eventClearUIAnimation_Parms ClearUIAnimation_Parms;
	memcpy ( &ClearUIAnimation_Parms.AnimName, &AnimName, 0x8 );
	ClearUIAnimation_Parms.AnimSeq = AnimSeq;

	this->ProcessEvent ( pFnClearUIAnimation, &ClearUIAnimation_Parms, NULL );
};

// Function Engine.UIObject.StopUIAnimation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// class UUIAnimationSeq*         AnimSeq                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFinalize                      ( CPF_OptionalParm | CPF_Parm )

void UUIObject::eventStopUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeq, unsigned long bFinalize )
{
	static UFunction* pFnStopUIAnimation = NULL;

	if ( ! pFnStopUIAnimation )
		pFnStopUIAnimation = UObject::FindObject< UFunction > ( "Function Engine.UIObject.StopUIAnimation" );

	UUIObject_eventStopUIAnimation_Parms StopUIAnimation_Parms;
	memcpy ( &StopUIAnimation_Parms.AnimName, &AnimName, 0x8 );
	StopUIAnimation_Parms.AnimSeq = AnimSeq;
	StopUIAnimation_Parms.bFinalize = bFinalize;

	this->ProcessEvent ( pFnStopUIAnimation, &StopUIAnimation_Parms, NULL );
};

// Function Engine.UIObject.PlayUIAnimation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// class UUIAnimationSeq*         AnimSeqTemplate                ( CPF_OptionalParm | CPF_Parm )
// float                          PlaybackRate                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          InitialPosition                ( CPF_OptionalParm | CPF_Parm )

void UUIObject::eventPlayUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeqTemplate, float PlaybackRate, unsigned long bLoop, float InitialPosition )
{
	static UFunction* pFnPlayUIAnimation = NULL;

	if ( ! pFnPlayUIAnimation )
		pFnPlayUIAnimation = UObject::FindObject< UFunction > ( "Function Engine.UIObject.PlayUIAnimation" );

	UUIObject_eventPlayUIAnimation_Parms PlayUIAnimation_Parms;
	memcpy ( &PlayUIAnimation_Parms.AnimName, &AnimName, 0x8 );
	PlayUIAnimation_Parms.AnimSeqTemplate = AnimSeqTemplate;
	PlayUIAnimation_Parms.PlaybackRate = PlaybackRate;
	PlayUIAnimation_Parms.bLoop = bLoop;
	PlayUIAnimation_Parms.InitialPosition = InitialPosition;

	this->ProcessEvent ( pFnPlayUIAnimation, &PlayUIAnimation_Parms, NULL );
};

// Function Engine.UIObject.AnimSetBottom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewBottom                      ( CPF_Parm )

void UUIObject::AnimSetBottom ( float NewBottom )
{
	static UFunction* pFnAnimSetBottom = NULL;

	if ( ! pFnAnimSetBottom )
		pFnAnimSetBottom = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetBottom" );

	UUIObject_execAnimSetBottom_Parms AnimSetBottom_Parms;
	AnimSetBottom_Parms.NewBottom = NewBottom;

	pFnAnimSetBottom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetBottom, &AnimSetBottom_Parms, NULL );

	pFnAnimSetBottom->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetRight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewRight                       ( CPF_Parm )

void UUIObject::AnimSetRight ( float NewRight )
{
	static UFunction* pFnAnimSetRight = NULL;

	if ( ! pFnAnimSetRight )
		pFnAnimSetRight = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetRight" );

	UUIObject_execAnimSetRight_Parms AnimSetRight_Parms;
	AnimSetRight_Parms.NewRight = NewRight;

	pFnAnimSetRight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetRight, &AnimSetRight_Parms, NULL );

	pFnAnimSetRight->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetTop
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewTop                         ( CPF_Parm )

void UUIObject::AnimSetTop ( float NewTop )
{
	static UFunction* pFnAnimSetTop = NULL;

	if ( ! pFnAnimSetTop )
		pFnAnimSetTop = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetTop" );

	UUIObject_execAnimSetTop_Parms AnimSetTop_Parms;
	AnimSetTop_Parms.NewTop = NewTop;

	pFnAnimSetTop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetTop, &AnimSetTop_Parms, NULL );

	pFnAnimSetTop->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetLeft
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewLeft                        ( CPF_Parm )

void UUIObject::AnimSetLeft ( float NewLeft )
{
	static UFunction* pFnAnimSetLeft = NULL;

	if ( ! pFnAnimSetLeft )
		pFnAnimSetLeft = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetLeft" );

	UUIObject_execAnimSetLeft_Parms AnimSetLeft_Parms;
	AnimSetLeft_Parms.NewLeft = NewLeft;

	pFnAnimSetLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetLeft, &AnimSetLeft_Parms, NULL );

	pFnAnimSetLeft->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void UUIObject::AnimSetScale ( float NewScale )
{
	static UFunction* pFnAnimSetScale = NULL;

	if ( ! pFnAnimSetScale )
		pFnAnimSetScale = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetScale" );

	UUIObject_execAnimSetScale_Parms AnimSetScale_Parms;
	AnimSetScale_Parms.NewScale = NewScale;

	pFnAnimSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetScale, &AnimSetScale_Parms, NULL );

	pFnAnimSetScale->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void UUIObject::AnimSetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnAnimSetRotation = NULL;

	if ( ! pFnAnimSetRotation )
		pFnAnimSetRotation = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetRotation" );

	UUIObject_execAnimSetRotation_Parms AnimSetRotation_Parms;
	memcpy ( &AnimSetRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnAnimSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetRotation, &AnimSetRotation_Parms, NULL );

	pFnAnimSetRotation->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetRelPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewPosition                    ( CPF_Parm )
// struct FVector                 InitialPosition                ( CPF_Parm )

void UUIObject::AnimSetRelPosition ( struct FVector NewPosition, struct FVector InitialPosition )
{
	static UFunction* pFnAnimSetRelPosition = NULL;

	if ( ! pFnAnimSetRelPosition )
		pFnAnimSetRelPosition = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetRelPosition" );

	UUIObject_execAnimSetRelPosition_Parms AnimSetRelPosition_Parms;
	memcpy ( &AnimSetRelPosition_Parms.NewPosition, &NewPosition, 0xC );
	memcpy ( &AnimSetRelPosition_Parms.InitialPosition, &InitialPosition, 0xC );

	pFnAnimSetRelPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetRelPosition, &AnimSetRelPosition_Parms, NULL );

	pFnAnimSetRelPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewPosition                    ( CPF_Parm )

void UUIObject::AnimSetPosition ( struct FVector NewPosition )
{
	static UFunction* pFnAnimSetPosition = NULL;

	if ( ! pFnAnimSetPosition )
		pFnAnimSetPosition = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetPosition" );

	UUIObject_execAnimSetPosition_Parms AnimSetPosition_Parms;
	memcpy ( &AnimSetPosition_Parms.NewPosition, &NewPosition, 0xC );

	pFnAnimSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetPosition, &AnimSetPosition_Parms, NULL );

	pFnAnimSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            NewColor                       ( CPF_Parm )

void UUIObject::AnimSetColor ( struct FLinearColor NewColor )
{
	static UFunction* pFnAnimSetColor = NULL;

	if ( ! pFnAnimSetColor )
		pFnAnimSetColor = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetColor" );

	UUIObject_execAnimSetColor_Parms AnimSetColor_Parms;
	memcpy ( &AnimSetColor_Parms.NewColor, &NewColor, 0x10 );

	pFnAnimSetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetColor, &AnimSetColor_Parms, NULL );

	pFnAnimSetColor->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIObject::AnimSetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnAnimSetVisibility = NULL;

	if ( ! pFnAnimSetVisibility )
		pFnAnimSetVisibility = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetVisibility" );

	UUIObject_execAnimSetVisibility_Parms AnimSetVisibility_Parms;
	AnimSetVisibility_Parms.bIsVisible = bIsVisible;

	pFnAnimSetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetVisibility, &AnimSetVisibility_Parms, NULL );

	pFnAnimSetVisibility->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AnimSetOpacity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewOpacity                     ( CPF_Parm )

void UUIObject::AnimSetOpacity ( float NewOpacity )
{
	static UFunction* pFnAnimSetOpacity = NULL;

	if ( ! pFnAnimSetOpacity )
		pFnAnimSetOpacity = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AnimSetOpacity" );

	UUIObject_execAnimSetOpacity_Parms AnimSetOpacity_Parms;
	AnimSetOpacity_Parms.NewOpacity = NewOpacity;

	pFnAnimSetOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimSetOpacity, &AnimSetOpacity_Parms, NULL );

	pFnAnimSetOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.OnSetDatastoreBinding
// [0x00020002] 
// Parameters infos:
// class UUIAction_SetDatastoreBinding* Action                         ( CPF_Parm )

void UUIObject::OnSetDatastoreBinding ( class UUIAction_SetDatastoreBinding* Action )
{
	static UFunction* pFnOnSetDatastoreBinding = NULL;

	if ( ! pFnOnSetDatastoreBinding )
		pFnOnSetDatastoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnSetDatastoreBinding" );

	UUIObject_execOnSetDatastoreBinding_Parms OnSetDatastoreBinding_Parms;
	OnSetDatastoreBinding_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetDatastoreBinding, &OnSetDatastoreBinding_Parms, NULL );
};

// Function Engine.UIObject.LogRenderBounds
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIObject::LogRenderBounds ( int Indent )
{
	static UFunction* pFnLogRenderBounds = NULL;

	if ( ! pFnLogRenderBounds )
		pFnLogRenderBounds = UObject::FindObject< UFunction > ( "Function Engine.UIObject.LogRenderBounds" );

	UUIObject_execLogRenderBounds_Parms LogRenderBounds_Parms;
	LogRenderBounds_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogRenderBounds, &LogRenderBounds_Parms, NULL );
};

// Function Engine.UIObject.GetParent
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIObject::GetParent ( )
{
	static UFunction* pFnGetParent = NULL;

	if ( ! pFnGetParent )
		pFnGetParent = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetParent" );

	UUIObject_execGetParent_Parms GetParent_Parms;

	this->ProcessEvent ( pFnGetParent, &GetParent_Parms, NULL );

	return GetParent_Parms.ReturnValue;
};

// Function Engine.UIObject.GetOwner
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIObject* UUIObject::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetOwner" );

	UUIObject_execGetOwner_Parms GetOwner_Parms;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIObject.GetScene
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIObject::GetScene ( )
{
	static UFunction* pFnGetScene = NULL;

	if ( ! pFnGetScene )
		pFnGetScene = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetScene" );

	UUIObject_execGetScene_Parms GetScene_Parms;

	this->ProcessEvent ( pFnGetScene, &GetScene_Parms, NULL );

	return GetScene_Parms.ReturnValue;
};

// Function Engine.UIObject.TickAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UUIObject::TickAnim ( float DeltaTime )
{
	static UFunction* pFnTickAnim = NULL;

	if ( ! pFnTickAnim )
		pFnTickAnim = UObject::FindObject< UFunction > ( "Function Engine.UIObject.TickAnim" );

	UUIObject_execTickAnim_Parms TickAnim_Parms;
	TickAnim_Parms.DeltaTime = DeltaTime;

	pFnTickAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickAnim, &TickAnim_Parms, NULL );

	pFnTickAnim->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.SetWidgetStyleByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StyleResolverTagToSet          ( CPF_Parm )
// struct FName                   StyleFriendlyName              ( CPF_Parm )

bool UUIObject::SetWidgetStyleByName ( struct FName StyleResolverTagToSet, struct FName StyleFriendlyName )
{
	static UFunction* pFnSetWidgetStyleByName = NULL;

	if ( ! pFnSetWidgetStyleByName )
		pFnSetWidgetStyleByName = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetWidgetStyleByName" );

	UUIObject_execSetWidgetStyleByName_Parms SetWidgetStyleByName_Parms;
	memcpy ( &SetWidgetStyleByName_Parms.StyleResolverTagToSet, &StyleResolverTagToSet, 0x8 );
	memcpy ( &SetWidgetStyleByName_Parms.StyleFriendlyName, &StyleFriendlyName, 0x8 );

	pFnSetWidgetStyleByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWidgetStyleByName, &SetWidgetStyleByName_Parms, NULL );

	pFnSetWidgetStyleByName->FunctionFlags |= 0x400;

	return SetWidgetStyleByName_Parms.ReturnValue;
};

// Function Engine.UIObject.FindStyleSubscriberIndexById
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StyleSubscriberId              ( CPF_Parm )

int UUIObject::FindStyleSubscriberIndexById ( struct FName StyleSubscriberId )
{
	static UFunction* pFnFindStyleSubscriberIndexById = NULL;

	if ( ! pFnFindStyleSubscriberIndexById )
		pFnFindStyleSubscriberIndexById = UObject::FindObject< UFunction > ( "Function Engine.UIObject.FindStyleSubscriberIndexById" );

	UUIObject_execFindStyleSubscriberIndexById_Parms FindStyleSubscriberIndexById_Parms;
	memcpy ( &FindStyleSubscriberIndexById_Parms.StyleSubscriberId, &StyleSubscriberId, 0x8 );

	pFnFindStyleSubscriberIndexById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleSubscriberIndexById, &FindStyleSubscriberIndexById_Parms, NULL );

	pFnFindStyleSubscriberIndexById->FunctionFlags |= 0x400;

	return FindStyleSubscriberIndexById_Parms.ReturnValue;
};

// Function Engine.UIObject.FindStyleSubscriberIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIStyleResolver*        Subscriber                     ( CPF_Const | CPF_Parm | CPF_OutParm )

int UUIObject::FindStyleSubscriberIndex ( class UUIStyleResolver** Subscriber )
{
	static UFunction* pFnFindStyleSubscriberIndex = NULL;

	if ( ! pFnFindStyleSubscriberIndex )
		pFnFindStyleSubscriberIndex = UObject::FindObject< UFunction > ( "Function Engine.UIObject.FindStyleSubscriberIndex" );

	UUIObject_execFindStyleSubscriberIndex_Parms FindStyleSubscriberIndex_Parms;

	pFnFindStyleSubscriberIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleSubscriberIndex, &FindStyleSubscriberIndex_Parms, NULL );

	pFnFindStyleSubscriberIndex->FunctionFlags |= 0x400;

	if ( Subscriber )
		*Subscriber = FindStyleSubscriberIndex_Parms.Subscriber;

	return FindStyleSubscriberIndex_Parms.ReturnValue;
};

// Function Engine.UIObject.RemoveStyleSubscriber
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyleResolver*        Subscriber                     ( CPF_Parm )

void UUIObject::RemoveStyleSubscriber ( class UUIStyleResolver* Subscriber )
{
	static UFunction* pFnRemoveStyleSubscriber = NULL;

	if ( ! pFnRemoveStyleSubscriber )
		pFnRemoveStyleSubscriber = UObject::FindObject< UFunction > ( "Function Engine.UIObject.RemoveStyleSubscriber" );

	UUIObject_execRemoveStyleSubscriber_Parms RemoveStyleSubscriber_Parms;
	RemoveStyleSubscriber_Parms.Subscriber = Subscriber;

	pFnRemoveStyleSubscriber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStyleSubscriber, &RemoveStyleSubscriber_Parms, NULL );

	pFnRemoveStyleSubscriber->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AddStyleSubscriber
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyleResolver*        Subscriber                     ( CPF_Parm )

void UUIObject::AddStyleSubscriber ( class UUIStyleResolver* Subscriber )
{
	static UFunction* pFnAddStyleSubscriber = NULL;

	if ( ! pFnAddStyleSubscriber )
		pFnAddStyleSubscriber = UObject::FindObject< UFunction > ( "Function Engine.UIObject.AddStyleSubscriber" );

	UUIObject_execAddStyleSubscriber_Parms AddStyleSubscriber_Parms;
	AddStyleSubscriber_Parms.Subscriber = Subscriber;

	pFnAddStyleSubscriber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddStyleSubscriber, &AddStyleSubscriber_Parms, NULL );

	pFnAddStyleSubscriber->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GetPositionExtent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned long                  bIncludeRotation               ( CPF_OptionalParm | CPF_Parm )

float UUIObject::GetPositionExtent ( unsigned char Face, unsigned long bIncludeRotation )
{
	static UFunction* pFnGetPositionExtent = NULL;

	if ( ! pFnGetPositionExtent )
		pFnGetPositionExtent = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetPositionExtent" );

	UUIObject_execGetPositionExtent_Parms GetPositionExtent_Parms;
	GetPositionExtent_Parms.Face = Face;
	GetPositionExtent_Parms.bIncludeRotation = bIncludeRotation;

	pFnGetPositionExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionExtent, &GetPositionExtent_Parms, NULL );

	pFnGetPositionExtent->FunctionFlags |= 0x400;

	return GetPositionExtent_Parms.ReturnValue;
};

// Function Engine.UIObject.GetPositionExtents
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeRotation               ( CPF_OptionalParm | CPF_Parm )
// float                          MinX                           ( CPF_Parm | CPF_OutParm )
// float                          MaxX                           ( CPF_Parm | CPF_OutParm )
// float                          MinY                           ( CPF_Parm | CPF_OutParm )
// float                          MaxY                           ( CPF_Parm | CPF_OutParm )

void UUIObject::GetPositionExtents ( unsigned long bIncludeRotation, float* MinX, float* MaxX, float* MinY, float* MaxY )
{
	static UFunction* pFnGetPositionExtents = NULL;

	if ( ! pFnGetPositionExtents )
		pFnGetPositionExtents = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetPositionExtents" );

	UUIObject_execGetPositionExtents_Parms GetPositionExtents_Parms;
	GetPositionExtents_Parms.bIncludeRotation = bIncludeRotation;

	pFnGetPositionExtents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionExtents, &GetPositionExtents_Parms, NULL );

	pFnGetPositionExtents->FunctionFlags |= 0x400;

	if ( MinX )
		*MinX = GetPositionExtents_Parms.MinX;

	if ( MaxX )
		*MaxX = GetPositionExtents_Parms.MaxX;

	if ( MinY )
		*MinY = GetPositionExtents_Parms.MinY;

	if ( MaxY )
		*MaxY = GetPositionExtents_Parms.MaxY;
};

// Function Engine.UIObject.NeedsActiveCursorUpdates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIObject::NeedsActiveCursorUpdates ( )
{
	static UFunction* pFnNeedsActiveCursorUpdates = NULL;

	if ( ! pFnNeedsActiveCursorUpdates )
		pFnNeedsActiveCursorUpdates = UObject::FindObject< UFunction > ( "Function Engine.UIObject.NeedsActiveCursorUpdates" );

	UUIObject_execNeedsActiveCursorUpdates_Parms NeedsActiveCursorUpdates_Parms;

	pFnNeedsActiveCursorUpdates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedsActiveCursorUpdates, &NeedsActiveCursorUpdates_Parms, NULL );

	pFnNeedsActiveCursorUpdates->FunctionFlags |= 0x400;

	return NeedsActiveCursorUpdates_Parms.ReturnValue;
};

// Function Engine.UIObject.SetActiveCursorUpdate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldReceiveCursorUpdates    ( CPF_Parm )

void UUIObject::SetActiveCursorUpdate ( unsigned long bShouldReceiveCursorUpdates )
{
	static UFunction* pFnSetActiveCursorUpdate = NULL;

	if ( ! pFnSetActiveCursorUpdate )
		pFnSetActiveCursorUpdate = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetActiveCursorUpdate" );

	UUIObject_execSetActiveCursorUpdate_Parms SetActiveCursorUpdate_Parms;
	SetActiveCursorUpdate_Parms.bShouldReceiveCursorUpdates = bShouldReceiveCursorUpdates;

	pFnSetActiveCursorUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveCursorUpdate, &SetActiveCursorUpdate_Parms, NULL );

	pFnSetActiveCursorUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.SetPrivateBehavior
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Behavior                       ( CPF_Parm )
// unsigned long                  Value                          ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIObject::SetPrivateBehavior ( int Behavior, unsigned long Value, unsigned long bRecurse )
{
	static UFunction* pFnSetPrivateBehavior = NULL;

	if ( ! pFnSetPrivateBehavior )
		pFnSetPrivateBehavior = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetPrivateBehavior" );

	UUIObject_execSetPrivateBehavior_Parms SetPrivateBehavior_Parms;
	SetPrivateBehavior_Parms.Behavior = Behavior;
	SetPrivateBehavior_Parms.Value = Value;
	SetPrivateBehavior_Parms.bRecurse = bRecurse;

	pFnSetPrivateBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPrivateBehavior, &SetPrivateBehavior_Parms, NULL );

	pFnSetPrivateBehavior->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.IsPrivateBehaviorSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Behavior                       ( CPF_Parm )

bool UUIObject::IsPrivateBehaviorSet ( int Behavior )
{
	static UFunction* pFnIsPrivateBehaviorSet = NULL;

	if ( ! pFnIsPrivateBehaviorSet )
		pFnIsPrivateBehaviorSet = UObject::FindObject< UFunction > ( "Function Engine.UIObject.IsPrivateBehaviorSet" );

	UUIObject_execIsPrivateBehaviorSet_Parms IsPrivateBehaviorSet_Parms;
	IsPrivateBehaviorSet_Parms.Behavior = Behavior;

	pFnIsPrivateBehaviorSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPrivateBehaviorSet, &IsPrivateBehaviorSet_Parms, NULL );

	pFnIsPrivateBehaviorSet->FunctionFlags |= 0x400;

	return IsPrivateBehaviorSet_Parms.ReturnValue;
};

// Function Engine.UIObject.CanAcceptFocus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::CanAcceptFocus ( int PlayerIndex )
{
	static UFunction* pFnCanAcceptFocus = NULL;

	if ( ! pFnCanAcceptFocus )
		pFnCanAcceptFocus = UObject::FindObject< UFunction > ( "Function Engine.UIObject.CanAcceptFocus" );

	UUIObject_execCanAcceptFocus_Parms CanAcceptFocus_Parms;
	CanAcceptFocus_Parms.PlayerIndex = PlayerIndex;

	pFnCanAcceptFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanAcceptFocus, &CanAcceptFocus_Parms, NULL );

	pFnCanAcceptFocus->FunctionFlags |= 0x400;

	return CanAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UIObject.SetForcedNavigationTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// class UUIObject*               NavTarget                      ( CPF_Parm )
// unsigned long                  bIsNullOverride                ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetForcedNavigationTarget ( unsigned char Face, class UUIObject* NavTarget, unsigned long bIsNullOverride )
{
	static UFunction* pFnSetForcedNavigationTarget = NULL;

	if ( ! pFnSetForcedNavigationTarget )
		pFnSetForcedNavigationTarget = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetForcedNavigationTarget" );

	UUIObject_execSetForcedNavigationTarget_Parms SetForcedNavigationTarget_Parms;
	SetForcedNavigationTarget_Parms.Face = Face;
	SetForcedNavigationTarget_Parms.NavTarget = NavTarget;
	SetForcedNavigationTarget_Parms.bIsNullOverride = bIsNullOverride;

	pFnSetForcedNavigationTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForcedNavigationTarget, &SetForcedNavigationTarget_Parms, NULL );

	pFnSetForcedNavigationTarget->FunctionFlags |= 0x400;

	return SetForcedNavigationTarget_Parms.ReturnValue;
};

// Function Engine.UIObject.SetNavigationTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// class UUIObject*               NewNavTarget                   ( CPF_Parm )

bool UUIObject::SetNavigationTarget ( unsigned char Face, class UUIObject* NewNavTarget )
{
	static UFunction* pFnSetNavigationTarget = NULL;

	if ( ! pFnSetNavigationTarget )
		pFnSetNavigationTarget = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetNavigationTarget" );

	UUIObject_execSetNavigationTarget_Parms SetNavigationTarget_Parms;
	SetNavigationTarget_Parms.Face = Face;
	SetNavigationTarget_Parms.NewNavTarget = NewNavTarget;

	pFnSetNavigationTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNavigationTarget, &SetNavigationTarget_Parms, NULL );

	pFnSetNavigationTarget->FunctionFlags |= 0x400;

	return SetNavigationTarget_Parms.ReturnValue;
};

// Function Engine.UIObject.IsDockedTo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetWidget                   ( CPF_Const | CPF_Parm )
// unsigned char                  SourceFace                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::IsDockedTo ( class UUIScreenObject* TargetWidget, unsigned char SourceFace, unsigned char TargetFace )
{
	static UFunction* pFnIsDockedTo = NULL;

	if ( ! pFnIsDockedTo )
		pFnIsDockedTo = UObject::FindObject< UFunction > ( "Function Engine.UIObject.IsDockedTo" );

	UUIObject_execIsDockedTo_Parms IsDockedTo_Parms;
	IsDockedTo_Parms.TargetWidget = TargetWidget;
	IsDockedTo_Parms.SourceFace = SourceFace;
	IsDockedTo_Parms.TargetFace = TargetFace;

	pFnIsDockedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDockedTo, &IsDockedTo_Parms, NULL );

	pFnIsDockedTo->FunctionFlags |= 0x400;

	return IsDockedTo_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_Parm )
// float                          PaddingValue                   ( CPF_Parm )
// unsigned char                  PaddingInputType               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bModifyPaddingScaleType        ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetDockParameters ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType )
{
	static UFunction* pFnSetDockParameters = NULL;

	if ( ! pFnSetDockParameters )
		pFnSetDockParameters = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetDockParameters" );

	UUIObject_execSetDockParameters_Parms SetDockParameters_Parms;
	SetDockParameters_Parms.SourceFace = SourceFace;
	SetDockParameters_Parms.Target = Target;
	SetDockParameters_Parms.TargetFace = TargetFace;
	SetDockParameters_Parms.PaddingValue = PaddingValue;
	SetDockParameters_Parms.PaddingInputType = PaddingInputType;
	SetDockParameters_Parms.bModifyPaddingScaleType = bModifyPaddingScaleType;

	pFnSetDockParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockParameters, &SetDockParameters_Parms, NULL );

	pFnSetDockParameters->FunctionFlags |= 0x400;

	return SetDockParameters_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockPadding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// float                          PaddingValue                   ( CPF_Parm )
// unsigned char                  PaddingInputType               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bModifyPaddingScaleType        ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetDockPadding ( unsigned char SourceFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType )
{
	static UFunction* pFnSetDockPadding = NULL;

	if ( ! pFnSetDockPadding )
		pFnSetDockPadding = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetDockPadding" );

	UUIObject_execSetDockPadding_Parms SetDockPadding_Parms;
	SetDockPadding_Parms.SourceFace = SourceFace;
	SetDockPadding_Parms.PaddingValue = PaddingValue;
	SetDockPadding_Parms.PaddingInputType = PaddingInputType;
	SetDockPadding_Parms.bModifyPaddingScaleType = bModifyPaddingScaleType;

	pFnSetDockPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockPadding, &SetDockPadding_Parms, NULL );

	pFnSetDockPadding->FunctionFlags |= 0x400;

	return SetDockPadding_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_Parm )

bool UUIObject::SetDockTarget ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace )
{
	static UFunction* pFnSetDockTarget = NULL;

	if ( ! pFnSetDockTarget )
		pFnSetDockTarget = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetDockTarget" );

	UUIObject_execSetDockTarget_Parms SetDockTarget_Parms;
	SetDockTarget_Parms.SourceFace = SourceFace;
	SetDockTarget_Parms.Target = Target;
	SetDockTarget_Parms.TargetFace = TargetFace;

	pFnSetDockTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockTarget, &SetDockTarget_Parms, NULL );

	pFnSetDockTarget->FunctionFlags |= 0x400;

	return SetDockTarget_Parms.ReturnValue;
};

// Function Engine.UIObject.IsContainedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               TestWidget                     ( CPF_Parm )

bool UUIObject::IsContainedBy ( class UUIObject* TestWidget )
{
	static UFunction* pFnIsContainedBy = NULL;

	if ( ! pFnIsContainedBy )
		pFnIsContainedBy = UObject::FindObject< UFunction > ( "Function Engine.UIObject.IsContainedBy" );

	UUIObject_execIsContainedBy_Parms IsContainedBy_Parms;
	IsContainedBy_Parms.TestWidget = TestWidget;

	pFnIsContainedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsContainedBy, &IsContainedBy_Parms, NULL );

	pFnIsContainedBy->FunctionFlags |= 0x400;

	return IsContainedBy_Parms.ReturnValue;
};

// Function Engine.UIObject.NotifyValueChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// int                            NotifyFlags                    ( CPF_OptionalParm | CPF_Parm )

void UUIObject::NotifyValueChanged ( int PlayerIndex, int NotifyFlags )
{
	static UFunction* pFnNotifyValueChanged = NULL;

	if ( ! pFnNotifyValueChanged )
		pFnNotifyValueChanged = UObject::FindObject< UFunction > ( "Function Engine.UIObject.NotifyValueChanged" );

	UUIObject_execNotifyValueChanged_Parms NotifyValueChanged_Parms;
	NotifyValueChanged_Parms.PlayerIndex = PlayerIndex;
	NotifyValueChanged_Parms.NotifyFlags = NotifyFlags;

	pFnNotifyValueChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyValueChanged, &NotifyValueChanged_Parms, NULL );

	pFnNotifyValueChanged->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GetRotationMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentRotations        ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIObject::GetRotationMatrix ( unsigned long bIncludeParentRotations )
{
	static UFunction* pFnGetRotationMatrix = NULL;

	if ( ! pFnGetRotationMatrix )
		pFnGetRotationMatrix = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetRotationMatrix" );

	UUIObject_execGetRotationMatrix_Parms GetRotationMatrix_Parms;
	GetRotationMatrix_Parms.bIncludeParentRotations = bIncludeParentRotations;

	pFnGetRotationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotationMatrix, &GetRotationMatrix_Parms, NULL );

	pFnGetRotationMatrix->FunctionFlags |= 0x400;

	return GetRotationMatrix_Parms.ReturnValue;
};

// Function Engine.UIObject.GenerateTransformMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentTransforms       ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIObject::GenerateTransformMatrix ( unsigned long bIncludeParentTransforms )
{
	static UFunction* pFnGenerateTransformMatrix = NULL;

	if ( ! pFnGenerateTransformMatrix )
		pFnGenerateTransformMatrix = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GenerateTransformMatrix" );

	UUIObject_execGenerateTransformMatrix_Parms GenerateTransformMatrix_Parms;
	GenerateTransformMatrix_Parms.bIncludeParentTransforms = bIncludeParentTransforms;

	pFnGenerateTransformMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateTransformMatrix, &GenerateTransformMatrix_Parms, NULL );

	pFnGenerateTransformMatrix->FunctionFlags |= 0x400;

	return GenerateTransformMatrix_Parms.ReturnValue;
};

// Function Engine.UIObject.GetAnchorPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRelativeToWidget              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPixelSpace                    ( CPF_OptionalParm | CPF_Parm )

struct FVector UUIObject::GetAnchorPosition ( unsigned long bRelativeToWidget, unsigned long bPixelSpace )
{
	static UFunction* pFnGetAnchorPosition = NULL;

	if ( ! pFnGetAnchorPosition )
		pFnGetAnchorPosition = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetAnchorPosition" );

	UUIObject_execGetAnchorPosition_Parms GetAnchorPosition_Parms;
	GetAnchorPosition_Parms.bRelativeToWidget = bRelativeToWidget;
	GetAnchorPosition_Parms.bPixelSpace = bPixelSpace;

	pFnGetAnchorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnchorPosition, &GetAnchorPosition_Parms, NULL );

	pFnGetAnchorPosition->FunctionFlags |= 0x400;

	return GetAnchorPosition_Parms.ReturnValue;
};

// Function Engine.UIObject.UpdateRotationMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIObject::UpdateRotationMatrix ( )
{
	static UFunction* pFnUpdateRotationMatrix = NULL;

	if ( ! pFnUpdateRotationMatrix )
		pFnUpdateRotationMatrix = UObject::FindObject< UFunction > ( "Function Engine.UIObject.UpdateRotationMatrix" );

	UUIObject_execUpdateRotationMatrix_Parms UpdateRotationMatrix_Parms;

	pFnUpdateRotationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRotationMatrix, &UpdateRotationMatrix_Parms, NULL );

	pFnUpdateRotationMatrix->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.RotateWidget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotationAmount              ( CPF_Parm )
// unsigned long                  bAccumulateRotation            ( CPF_OptionalParm | CPF_Parm )

void UUIObject::RotateWidget ( struct FRotator NewRotationAmount, unsigned long bAccumulateRotation )
{
	static UFunction* pFnRotateWidget = NULL;

	if ( ! pFnRotateWidget )
		pFnRotateWidget = UObject::FindObject< UFunction > ( "Function Engine.UIObject.RotateWidget" );

	UUIObject_execRotateWidget_Parms RotateWidget_Parms;
	memcpy ( &RotateWidget_Parms.NewRotationAmount, &NewRotationAmount, 0xC );
	RotateWidget_Parms.bAccumulateRotation = bAccumulateRotation;

	pFnRotateWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRotateWidget, &RotateWidget_Parms, NULL );

	pFnRotateWidget->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.SetAnchorPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewAnchorPosition              ( CPF_Parm )
// unsigned char                  InputType                      ( CPF_OptionalParm | CPF_Parm )

void UUIObject::SetAnchorPosition ( struct FVector NewAnchorPosition, unsigned char InputType )
{
	static UFunction* pFnSetAnchorPosition = NULL;

	if ( ! pFnSetAnchorPosition )
		pFnSetAnchorPosition = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetAnchorPosition" );

	UUIObject_execSetAnchorPosition_Parms SetAnchorPosition_Parms;
	memcpy ( &SetAnchorPosition_Parms.NewAnchorPosition, &NewAnchorPosition, 0xC );
	SetAnchorPosition_Parms.InputType = InputType;

	pFnSetAnchorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnchorPosition, &SetAnchorPosition_Parms, NULL );

	pFnSetAnchorPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.HasTransform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentTransforms       ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::HasTransform ( unsigned long bIncludeParentTransforms )
{
	static UFunction* pFnHasTransform = NULL;

	if ( ! pFnHasTransform )
		pFnHasTransform = UObject::FindObject< UFunction > ( "Function Engine.UIObject.HasTransform" );

	UUIObject_execHasTransform_Parms HasTransform_Parms;
	HasTransform_Parms.bIncludeParentTransforms = bIncludeParentTransforms;

	pFnHasTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasTransform, &HasTransform_Parms, NULL );

	pFnHasTransform->FunctionFlags |= 0x400;

	return HasTransform_Parms.ReturnValue;
};

// Function Engine.UIObject.GetToolTipValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUIObject::GetToolTipValue ( )
{
	static UFunction* pFnGetToolTipValue = NULL;

	if ( ! pFnGetToolTipValue )
		pFnGetToolTipValue = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetToolTipValue" );

	UUIObject_execGetToolTipValue_Parms GetToolTipValue_Parms;

	pFnGetToolTipValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetToolTipValue, &GetToolTipValue_Parms, NULL );

	pFnGetToolTipValue->FunctionFlags |= 0x400;

	return GetToolTipValue_Parms.ReturnValue;
};

// Function Engine.UIObject.GenerateSceneDataStoreMarkup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Group                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UUIObject::GenerateSceneDataStoreMarkup ( struct FString Group )
{
	static UFunction* pFnGenerateSceneDataStoreMarkup = NULL;

	if ( ! pFnGenerateSceneDataStoreMarkup )
		pFnGenerateSceneDataStoreMarkup = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GenerateSceneDataStoreMarkup" );

	UUIObject_execGenerateSceneDataStoreMarkup_Parms GenerateSceneDataStoreMarkup_Parms;
	memcpy ( &GenerateSceneDataStoreMarkup_Parms.Group, &Group, 0xC );

	pFnGenerateSceneDataStoreMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateSceneDataStoreMarkup, &GenerateSceneDataStoreMarkup_Parms, NULL );

	pFnGenerateSceneDataStoreMarkup->FunctionFlags |= 0x400;

	return GenerateSceneDataStoreMarkup_Parms.ReturnValue;
};

// Function Engine.UIObject.ClearDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BindingIndex                   ( CPF_Parm )

void UUIObject::ClearDefaultDataBinding ( int BindingIndex )
{
	static UFunction* pFnClearDefaultDataBinding = NULL;

	if ( ! pFnClearDefaultDataBinding )
		pFnClearDefaultDataBinding = UObject::FindObject< UFunction > ( "Function Engine.UIObject.ClearDefaultDataBinding" );

	UUIObject_execClearDefaultDataBinding_Parms ClearDefaultDataBinding_Parms;
	ClearDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnClearDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearDefaultDataBinding, &ClearDefaultDataBinding_Parms, NULL );

	pFnClearDefaultDataBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GetDefaultDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIObject::GetDefaultDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetDefaultDataStores = NULL;

	if ( ! pFnGetDefaultDataStores )
		pFnGetDefaultDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetDefaultDataStores" );

	UUIObject_execGetDefaultDataStores_Parms GetDefaultDataStores_Parms;

	pFnGetDefaultDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultDataStores, &GetDefaultDataStores_Parms, NULL );

	pFnGetDefaultDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetDefaultDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIObject.ResolveDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_Parm )

bool UUIObject::ResolveDefaultDataBinding ( int BindingIndex )
{
	static UFunction* pFnResolveDefaultDataBinding = NULL;

	if ( ! pFnResolveDefaultDataBinding )
		pFnResolveDefaultDataBinding = UObject::FindObject< UFunction > ( "Function Engine.UIObject.ResolveDefaultDataBinding" );

	UUIObject_execResolveDefaultDataBinding_Parms ResolveDefaultDataBinding_Parms;
	ResolveDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnResolveDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveDefaultDataBinding, &ResolveDefaultDataBinding_Parms, NULL );

	pFnResolveDefaultDataBinding->FunctionFlags |= 0x400;

	return ResolveDefaultDataBinding_Parms.ReturnValue;
};

// Function Engine.UIObject.GetDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_Parm )

struct FString UUIObject::GetDefaultDataBinding ( int BindingIndex )
{
	static UFunction* pFnGetDefaultDataBinding = NULL;

	if ( ! pFnGetDefaultDataBinding )
		pFnGetDefaultDataBinding = UObject::FindObject< UFunction > ( "Function Engine.UIObject.GetDefaultDataBinding" );

	UUIObject_execGetDefaultDataBinding_Parms GetDefaultDataBinding_Parms;
	GetDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultDataBinding, &GetDefaultDataBinding_Parms, NULL );

	pFnGetDefaultDataBinding->FunctionFlags |= 0x400;

	return GetDefaultDataBinding_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_Parm )

void UUIObject::SetDefaultDataBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDefaultDataBinding = NULL;

	if ( ! pFnSetDefaultDataBinding )
		pFnSetDefaultDataBinding = UObject::FindObject< UFunction > ( "Function Engine.UIObject.SetDefaultDataBinding" );

	UUIObject_execSetDefaultDataBinding_Parms SetDefaultDataBinding_Parms;
	memcpy ( &SetDefaultDataBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultDataBinding, &SetDefaultDataBinding_Parms, NULL );

	pFnSetDefaultDataBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.OnContextMenuItemSelected
// [0x00120000] 
// Parameters infos:
// class UUIContextMenu*          ContextMenu                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// int                            ItemIndex                      ( CPF_Parm )

void UUIObject::OnContextMenuItemSelected ( class UUIContextMenu* ContextMenu, int PlayerIndex, int ItemIndex )
{
	static UFunction* pFnOnContextMenuItemSelected = NULL;

	if ( ! pFnOnContextMenuItemSelected )
		pFnOnContextMenuItemSelected = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnContextMenuItemSelected" );

	UUIObject_execOnContextMenuItemSelected_Parms OnContextMenuItemSelected_Parms;
	OnContextMenuItemSelected_Parms.ContextMenu = ContextMenu;
	OnContextMenuItemSelected_Parms.PlayerIndex = PlayerIndex;
	OnContextMenuItemSelected_Parms.ItemIndex = ItemIndex;

	this->ProcessEvent ( pFnOnContextMenuItemSelected, &OnContextMenuItemSelected_Parms, NULL );
};

// Function Engine.UIObject.OnCloseContextMenu
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIContextMenu*          ContextMenu                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIObject::OnCloseContextMenu ( class UUIContextMenu* ContextMenu, int PlayerIndex )
{
	static UFunction* pFnOnCloseContextMenu = NULL;

	if ( ! pFnOnCloseContextMenu )
		pFnOnCloseContextMenu = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnCloseContextMenu" );

	UUIObject_execOnCloseContextMenu_Parms OnCloseContextMenu_Parms;
	OnCloseContextMenu_Parms.ContextMenu = ContextMenu;
	OnCloseContextMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnCloseContextMenu, &OnCloseContextMenu_Parms, NULL );

	return OnCloseContextMenu_Parms.ReturnValue;
};

// Function Engine.UIObject.OnOpenContextMenu
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIContextMenu*          CustomContextMenu              ( CPF_Parm | CPF_OutParm )

bool UUIObject::OnOpenContextMenu ( class UUIObject* Sender, int PlayerIndex, class UUIContextMenu** CustomContextMenu )
{
	static UFunction* pFnOnOpenContextMenu = NULL;

	if ( ! pFnOnOpenContextMenu )
		pFnOnOpenContextMenu = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnOpenContextMenu" );

	UUIObject_execOnOpenContextMenu_Parms OnOpenContextMenu_Parms;
	OnOpenContextMenu_Parms.Sender = Sender;
	OnOpenContextMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnOpenContextMenu, &OnOpenContextMenu_Parms, NULL );

	if ( CustomContextMenu )
		*CustomContextMenu = OnOpenContextMenu_Parms.CustomContextMenu;

	return OnOpenContextMenu_Parms.ReturnValue;
};

// Function Engine.UIObject.OnQueryToolTip
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Sender                         ( CPF_Parm )
// class UUIToolTip*              CustomToolTip                  ( CPF_Parm | CPF_OutParm )

bool UUIObject::OnQueryToolTip ( class UUIObject* Sender, class UUIToolTip** CustomToolTip )
{
	static UFunction* pFnOnQueryToolTip = NULL;

	if ( ! pFnOnQueryToolTip )
		pFnOnQueryToolTip = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnQueryToolTip" );

	UUIObject_execOnQueryToolTip_Parms OnQueryToolTip_Parms;
	OnQueryToolTip_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnQueryToolTip, &OnQueryToolTip_Parms, NULL );

	if ( CustomToolTip )
		*CustomToolTip = OnQueryToolTip_Parms.CustomToolTip;

	return OnQueryToolTip_Parms.ReturnValue;
};

// Function Engine.UIObject.OnDoubleClick
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnDoubleClick ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnDoubleClick = NULL;

	if ( ! pFnOnDoubleClick )
		pFnOnDoubleClick = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnDoubleClick" );

	UUIObject_execOnDoubleClick_Parms OnDoubleClick_Parms;
	OnDoubleClick_Parms.EventObject = EventObject;
	OnDoubleClick_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnDoubleClick, &OnDoubleClick_Parms, NULL );
};

// Function Engine.UIObject.OnClicked
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIObject::OnClicked ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnClicked = NULL;

	if ( ! pFnOnClicked )
		pFnOnClicked = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnClicked" );

	UUIObject_execOnClicked_Parms OnClicked_Parms;
	OnClicked_Parms.EventObject = EventObject;
	OnClicked_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnClicked, &OnClicked_Parms, NULL );

	return OnClicked_Parms.ReturnValue;
};

// Function Engine.UIObject.OnPressRelease
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnPressRelease ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnPressRelease = NULL;

	if ( ! pFnOnPressRelease )
		pFnOnPressRelease = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnPressRelease" );

	UUIObject_execOnPressRelease_Parms OnPressRelease_Parms;
	OnPressRelease_Parms.EventObject = EventObject;
	OnPressRelease_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPressRelease, &OnPressRelease_Parms, NULL );
};

// Function Engine.UIObject.OnPressRepeat
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnPressRepeat ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnPressRepeat = NULL;

	if ( ! pFnOnPressRepeat )
		pFnOnPressRepeat = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnPressRepeat" );

	UUIObject_execOnPressRepeat_Parms OnPressRepeat_Parms;
	OnPressRepeat_Parms.EventObject = EventObject;
	OnPressRepeat_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPressRepeat, &OnPressRepeat_Parms, NULL );
};

// Function Engine.UIObject.OnPressed
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnPressed ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnPressed = NULL;

	if ( ! pFnOnPressed )
		pFnOnPressed = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnPressed" );

	UUIObject_execOnPressed_Parms OnPressed_Parms;
	OnPressed_Parms.EventObject = EventObject;
	OnPressed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPressed, &OnPressed_Parms, NULL );
};

// Function Engine.UIObject.OnRefreshSubscriberValue
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            BindingIndex                   ( CPF_Parm )

bool UUIObject::OnRefreshSubscriberValue ( class UUIObject* Sender, int BindingIndex )
{
	static UFunction* pFnOnRefreshSubscriberValue = NULL;

	if ( ! pFnOnRefreshSubscriberValue )
		pFnOnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnRefreshSubscriberValue" );

	UUIObject_execOnRefreshSubscriberValue_Parms OnRefreshSubscriberValue_Parms;
	OnRefreshSubscriberValue_Parms.Sender = Sender;
	OnRefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	this->ProcessEvent ( pFnOnRefreshSubscriberValue, &OnRefreshSubscriberValue_Parms, NULL );

	return OnRefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIObject.OnValueChanged
// [0x00120000] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnValueChanged ( class UUIObject* Sender, int PlayerIndex )
{
	static UFunction* pFnOnValueChanged = NULL;

	if ( ! pFnOnValueChanged )
		pFnOnValueChanged = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnValueChanged" );

	UUIObject_execOnValueChanged_Parms OnValueChanged_Parms;
	OnValueChanged_Parms.Sender = Sender;
	OnValueChanged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnValueChanged, &OnValueChanged_Parms, NULL );
};

// Function Engine.UIObject.OnPostSceneUpdate
// [0x00120000] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )

void UUIObject::OnPostSceneUpdate ( class UUIObject* Sender )
{
	static UFunction* pFnOnPostSceneUpdate = NULL;

	if ( ! pFnOnPostSceneUpdate )
		pFnOnPostSceneUpdate = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnPostSceneUpdate" );

	UUIObject_execOnPostSceneUpdate_Parms OnPostSceneUpdate_Parms;
	OnPostSceneUpdate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnPostSceneUpdate, &OnPostSceneUpdate_Parms, NULL );
};

// Function Engine.UIObject.OnPreSceneUpdate
// [0x00120000] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )

void UUIObject::OnPreSceneUpdate ( class UUIObject* Sender )
{
	static UFunction* pFnOnPreSceneUpdate = NULL;

	if ( ! pFnOnPreSceneUpdate )
		pFnOnPreSceneUpdate = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnPreSceneUpdate" );

	UUIObject_execOnPreSceneUpdate_Parms OnPreSceneUpdate_Parms;
	OnPreSceneUpdate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnPreSceneUpdate, &OnPreSceneUpdate_Parms, NULL );
};

// Function Engine.UIObject.OnCreate
// [0x00120000] 
// Parameters infos:
// class UUIObject*               CreatedWidget                  ( CPF_Parm )
// class UUIScreenObject*         CreatorContainer               ( CPF_Parm )

void UUIObject::OnCreate ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer )
{
	static UFunction* pFnOnCreate = NULL;

	if ( ! pFnOnCreate )
		pFnOnCreate = UObject::FindObject< UFunction > ( "Function Engine.UIObject.OnCreate" );

	UUIObject_execOnCreate_Parms OnCreate_Parms;
	OnCreate_Parms.CreatedWidget = CreatedWidget;
	OnCreate_Parms.CreatorContainer = CreatorContainer;

	this->ProcessEvent ( pFnOnCreate, &OnCreate_Parms, NULL );
};

// Function Engine.ConsoleEntry.SetValue
// [0x00020002] 
// Parameters infos:
// struct FString                 NewValue                       ( CPF_Parm | CPF_NeedCtorLink )

void UConsoleEntry::SetValue ( struct FString NewValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.ConsoleEntry.SetValue" );

	UConsoleEntry_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewValue, &NewValue, 0xC );

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function Engine.ConsoleEntry.SetupDockingLinks
// [0x00020002] 
// Parameters infos:

void UConsoleEntry::SetupDockingLinks ( )
{
	static UFunction* pFnSetupDockingLinks = NULL;

	if ( ! pFnSetupDockingLinks )
		pFnSetupDockingLinks = UObject::FindObject< UFunction > ( "Function Engine.ConsoleEntry.SetupDockingLinks" );

	UConsoleEntry_execSetupDockingLinks_Parms SetupDockingLinks_Parms;

	this->ProcessEvent ( pFnSetupDockingLinks, &SetupDockingLinks_Parms, NULL );
};

// Function Engine.ConsoleEntry.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UConsoleEntry::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.ConsoleEntry.PostInitialize" );

	UConsoleEntry_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.ConsoleEntry.RemovedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UConsoleEntry::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = UObject::FindObject< UFunction > ( "Function Engine.ConsoleEntry.RemovedChild" );

	UConsoleEntry_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.ConsoleEntry.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UConsoleEntry::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = UObject::FindObject< UFunction > ( "Function Engine.ConsoleEntry.AddedChild" );

	UConsoleEntry_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UILabel.OnGetTextValue
// [0x00020002] 
// Parameters infos:
// class UUIAction_GetTextValue*  Action                         ( CPF_Parm )

void UUILabel::OnGetTextValue ( class UUIAction_GetTextValue* Action )
{
	static UFunction* pFnOnGetTextValue = NULL;

	if ( ! pFnOnGetTextValue )
		pFnOnGetTextValue = UObject::FindObject< UFunction > ( "Function Engine.UILabel.OnGetTextValue" );

	UUILabel_execOnGetTextValue_Parms OnGetTextValue_Parms;
	OnGetTextValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTextValue, &OnGetTextValue_Parms, NULL );
};

// Function Engine.UILabel.OnSetLabelText
// [0x00020002] 
// Parameters infos:
// class UUIAction_SetLabelText*  Action                         ( CPF_Parm )

void UUILabel::OnSetLabelText ( class UUIAction_SetLabelText* Action )
{
	static UFunction* pFnOnSetLabelText = NULL;

	if ( ! pFnOnSetLabelText )
		pFnOnSetLabelText = UObject::FindObject< UFunction > ( "Function Engine.UILabel.OnSetLabelText" );

	UUILabel_execOnSetLabelText_Parms OnSetLabelText_Parms;
	OnSetLabelText_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetLabelText, &OnSetLabelText_Parms, NULL );
};

// Function Engine.UILabel.IgnoreMarkup
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShouldIgnoreMarkup            ( CPF_Parm )

void UUILabel::IgnoreMarkup ( unsigned long bShouldIgnoreMarkup )
{
	static UFunction* pFnIgnoreMarkup = NULL;

	if ( ! pFnIgnoreMarkup )
		pFnIgnoreMarkup = UObject::FindObject< UFunction > ( "Function Engine.UILabel.IgnoreMarkup" );

	UUILabel_execIgnoreMarkup_Parms IgnoreMarkup_Parms;
	IgnoreMarkup_Parms.bShouldIgnoreMarkup = bShouldIgnoreMarkup;

	this->ProcessEvent ( pFnIgnoreMarkup, &IgnoreMarkup_Parms, NULL );
};

// Function Engine.UILabel.GetValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUILabel::eventGetValue ( )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = UObject::FindObject< UFunction > ( "Function Engine.UILabel.GetValue" );

	UUILabel_eventGetValue_Parms GetValue_Parms;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UILabel.SetArrayValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FString >       ValueArray                     ( CPF_Parm | CPF_NeedCtorLink )

void UUILabel::SetArrayValue ( TArray< struct FString > ValueArray )
{
	static UFunction* pFnSetArrayValue = NULL;

	if ( ! pFnSetArrayValue )
		pFnSetArrayValue = UObject::FindObject< UFunction > ( "Function Engine.UILabel.SetArrayValue" );

	UUILabel_execSetArrayValue_Parms SetArrayValue_Parms;
	memcpy ( &SetArrayValue_Parms.ValueArray, &ValueArray, 0xC );

	this->ProcessEvent ( pFnSetArrayValue, &SetArrayValue_Parms, NULL );
};

// Function Engine.UILabel.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUILabel::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UILabel.ClearBoundDataStores" );

	UUILabel_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUILabel::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UILabel.GetBoundDataStores" );

	UUILabel_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UILabel.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUILabel::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UILabel.NotifyDataStoreValueUpdated" );

	UUILabel_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.RefreshSubscriberValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUILabel::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UILabel.RefreshSubscriberValue" );

	UUILabel_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabel.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUILabel::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UILabel.GetDataStoreBinding" );

	UUILabel_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UILabel.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUILabel::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UILabel.SetDataStoreBinding" );

	UUILabel_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUILabel::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = UObject::FindObject< UFunction > ( "Function Engine.UILabel.SetTextAlignment" );

	UUILabel_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.SetValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UUILabel::SetValue ( struct FString NewText )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UILabel.SetValue" );

	UUILabel_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0xC );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIToolTip.UpdateToolTipPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIToolTip::UpdateToolTipPosition ( )
{
	static UFunction* pFnUpdateToolTipPosition = NULL;

	if ( ! pFnUpdateToolTipPosition )
		pFnUpdateToolTipPosition = UObject::FindObject< UFunction > ( "Function Engine.UIToolTip.UpdateToolTipPosition" );

	UUIToolTip_execUpdateToolTipPosition_Parms UpdateToolTipPosition_Parms;

	pFnUpdateToolTipPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateToolTipPosition, &UpdateToolTipPosition_Parms, NULL );

	pFnUpdateToolTipPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIToolTip.EndTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIToolTip::EndTracking ( )
{
	static UFunction* pFnEndTracking = NULL;

	if ( ! pFnEndTracking )
		pFnEndTracking = UObject::FindObject< UFunction > ( "Function Engine.UIToolTip.EndTracking" );

	UUIToolTip_execEndTracking_Parms EndTracking_Parms;

	pFnEndTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndTracking, &EndTracking_Parms, NULL );

	pFnEndTracking->FunctionFlags |= 0x400;

	return EndTracking_Parms.ReturnValue;
};

// Function Engine.UIToolTip.BeginTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIToolTip*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIToolTip* UUIToolTip::BeginTracking ( )
{
	static UFunction* pFnBeginTracking = NULL;

	if ( ! pFnBeginTracking )
		pFnBeginTracking = UObject::FindObject< UFunction > ( "Function Engine.UIToolTip.BeginTracking" );

	UUIToolTip_execBeginTracking_Parms BeginTracking_Parms;

	pFnBeginTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginTracking, &BeginTracking_Parms, NULL );

	pFnBeginTracking->FunctionFlags |= 0x400;

	return BeginTracking_Parms.ReturnValue;
};

// Function Engine.UIToolTip.CanShowToolTip
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIToolTip*              Sender                         ( CPF_Parm )

bool UUIToolTip::CanShowToolTip ( class UUIToolTip* Sender )
{
	static UFunction* pFnCanShowToolTip = NULL;

	if ( ! pFnCanShowToolTip )
		pFnCanShowToolTip = UObject::FindObject< UFunction > ( "Function Engine.UIToolTip.CanShowToolTip" );

	UUIToolTip_execCanShowToolTip_Parms CanShowToolTip_Parms;
	CanShowToolTip_Parms.Sender = Sender;

	this->ProcessEvent ( pFnCanShowToolTip, &CanShowToolTip_Parms, NULL );

	return CanShowToolTip_Parms.ReturnValue;
};

// Function Engine.UIToolTip.DeactivateToolTip
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIToolTip::DeactivateToolTip ( )
{
	static UFunction* pFnDeactivateToolTip = NULL;

	if ( ! pFnDeactivateToolTip )
		pFnDeactivateToolTip = UObject::FindObject< UFunction > ( "Function Engine.UIToolTip.DeactivateToolTip" );

	UUIToolTip_execDeactivateToolTip_Parms DeactivateToolTip_Parms;

	this->ProcessEvent ( pFnDeactivateToolTip, &DeactivateToolTip_Parms, NULL );

	return DeactivateToolTip_Parms.ReturnValue;
};

// Function Engine.UIToolTip.ActivateToolTip
// [0x00120002] 
// Parameters infos:
// class UUIToolTip*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIToolTip*              Sender                         ( CPF_Parm )

class UUIToolTip* UUIToolTip::ActivateToolTip ( class UUIToolTip* Sender )
{
	static UFunction* pFnActivateToolTip = NULL;

	if ( ! pFnActivateToolTip )
		pFnActivateToolTip = UObject::FindObject< UFunction > ( "Function Engine.UIToolTip.ActivateToolTip" );

	UUIToolTip_execActivateToolTip_Parms ActivateToolTip_Parms;
	ActivateToolTip_Parms.Sender = Sender;

	this->ProcessEvent ( pFnActivateToolTip, &ActivateToolTip_Parms, NULL );

	return ActivateToolTip_Parms.ReturnValue;
};

// Function Engine.cUIBaseToolTip.GetBounds
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Dimension                      ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDockPadding             ( CPF_OptionalParm | CPF_Parm )

float UcUIBaseToolTip::GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding )
{
	static UFunction* pFnGetBounds = NULL;

	if ( ! pFnGetBounds )
		pFnGetBounds = UObject::FindObject< UFunction > ( "Function Engine.cUIBaseToolTip.GetBounds" );

	UcUIBaseToolTip_execGetBounds_Parms GetBounds_Parms;
	GetBounds_Parms.Dimension = Dimension;
	GetBounds_Parms.OutputType = OutputType;
	GetBounds_Parms.bIgnoreDockPadding = bIgnoreDockPadding;

	pFnGetBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBounds, &GetBounds_Parms, NULL );

	pFnGetBounds->FunctionFlags |= 0x400;

	return GetBounds_Parms.ReturnValue;
};

// Function Engine.cUIBaseToolTip.SetValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UcUIBaseToolTip::SetValue ( struct FString NewText )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.cUIBaseToolTip.SetValue" );

	UcUIBaseToolTip_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0xC );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.cUIDataStore_Localisation.SetInputLanguageId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sInputLangId                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bHasIME                        ( CPF_Parm )
// unsigned long                  bIMEActive                     ( CPF_Parm )

void UcUIDataStore_Localisation::SetInputLanguageId ( struct FString sInputLangId, unsigned long bHasIME, unsigned long bIMEActive )
{
	static UFunction* pFnSetInputLanguageId = NULL;

	if ( ! pFnSetInputLanguageId )
		pFnSetInputLanguageId = UObject::FindObject< UFunction > ( "Function Engine.cUIDataStore_Localisation.SetInputLanguageId" );

	UcUIDataStore_Localisation_execSetInputLanguageId_Parms SetInputLanguageId_Parms;
	memcpy ( &SetInputLanguageId_Parms.sInputLangId, &sInputLangId, 0xC );
	SetInputLanguageId_Parms.bHasIME = bHasIME;
	SetInputLanguageId_Parms.bIMEActive = bIMEActive;

	pFnSetInputLanguageId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputLanguageId, &SetInputLanguageId_Parms, NULL );

	pFnSetInputLanguageId->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_GameState::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameState.NotifyGameSessionEnded" );

	UUIDataStore_GameState_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// [0x00120000] 
// Parameters infos:

void UUIDataStore_GameState::OnRefreshDataFieldValue ( )
{
	static UFunction* pFnOnRefreshDataFieldValue = NULL;

	if ( ! pFnOnRefreshDataFieldValue )
		pFnOnRefreshDataFieldValue = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue" );

	UUIDataStore_GameState_execOnRefreshDataFieldValue_Parms OnRefreshDataFieldValue_Parms;

	this->ProcessEvent ( pFnOnRefreshDataFieldValue, &OnRefreshDataFieldValue_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.OnAddTeamProvider
// [0x00120000] 
// Parameters infos:
// class UTeamDataProvider*       Provider                       ( CPF_Parm )

void UCurrentGameDataStore::OnAddTeamProvider ( class UTeamDataProvider* Provider )
{
	static UFunction* pFnOnAddTeamProvider = NULL;

	if ( ! pFnOnAddTeamProvider )
		pFnOnAddTeamProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.OnAddTeamProvider" );

	UCurrentGameDataStore_execOnAddTeamProvider_Parms OnAddTeamProvider_Parms;
	OnAddTeamProvider_Parms.Provider = Provider;

	this->ProcessEvent ( pFnOnAddTeamProvider, &OnAddTeamProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCurrentGameDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.NotifyGameSessionEnded" );

	UCurrentGameDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.RefreshTeamDataProviders
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::RefreshTeamDataProviders ( )
{
	static UFunction* pFnRefreshTeamDataProviders = NULL;

	if ( ! pFnRefreshTeamDataProviders )
		pFnRefreshTeamDataProviders = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.RefreshTeamDataProviders" );

	UCurrentGameDataStore_execRefreshTeamDataProviders_Parms RefreshTeamDataProviders_Parms;

	this->ProcessEvent ( pFnRefreshTeamDataProviders, &RefreshTeamDataProviders_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.RefreshPlayerDataProviders
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::RefreshPlayerDataProviders ( )
{
	static UFunction* pFnRefreshPlayerDataProviders = NULL;

	if ( ! pFnRefreshPlayerDataProviders )
		pFnRefreshPlayerDataProviders = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.RefreshPlayerDataProviders" );

	UCurrentGameDataStore_execRefreshPlayerDataProviders_Parms RefreshPlayerDataProviders_Parms;

	this->ProcessEvent ( pFnRefreshPlayerDataProviders, &RefreshPlayerDataProviders_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.NotifyTeamChange
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::NotifyTeamChange ( )
{
	static UFunction* pFnNotifyTeamChange = NULL;

	if ( ! pFnNotifyTeamChange )
		pFnNotifyTeamChange = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.NotifyTeamChange" );

	UCurrentGameDataStore_execNotifyTeamChange_Parms NotifyTeamChange_Parms;

	this->ProcessEvent ( pFnNotifyTeamChange, &NotifyTeamChange_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.NotifyPlayersChanged
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::NotifyPlayersChanged ( )
{
	static UFunction* pFnNotifyPlayersChanged = NULL;

	if ( ! pFnNotifyPlayersChanged )
		pFnNotifyPlayersChanged = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.NotifyPlayersChanged" );

	UCurrentGameDataStore_execNotifyPlayersChanged_Parms NotifyPlayersChanged_Parms;

	this->ProcessEvent ( pFnNotifyPlayersChanged, &NotifyPlayersChanged_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.Timer
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.Timer" );

	UCurrentGameDataStore_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.TeamDataProviderPropertyChange
// [0x00020002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UCurrentGameDataStore::TeamDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnTeamDataProviderPropertyChange = NULL;

	if ( ! pFnTeamDataProviderPropertyChange )
		pFnTeamDataProviderPropertyChange = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.TeamDataProviderPropertyChange" );

	UCurrentGameDataStore_execTeamDataProviderPropertyChange_Parms TeamDataProviderPropertyChange_Parms;
	TeamDataProviderPropertyChange_Parms.SourceProvider = SourceProvider;
	memcpy ( &TeamDataProviderPropertyChange_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnTeamDataProviderPropertyChange, &TeamDataProviderPropertyChange_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.PlayerDataProviderPropertyChange
// [0x00020002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UCurrentGameDataStore::PlayerDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnPlayerDataProviderPropertyChange = NULL;

	if ( ! pFnPlayerDataProviderPropertyChange )
		pFnPlayerDataProviderPropertyChange = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.PlayerDataProviderPropertyChange" );

	UCurrentGameDataStore_execPlayerDataProviderPropertyChange_Parms PlayerDataProviderPropertyChange_Parms;
	PlayerDataProviderPropertyChange_Parms.SourceProvider = SourceProvider;
	memcpy ( &PlayerDataProviderPropertyChange_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnPlayerDataProviderPropertyChange, &PlayerDataProviderPropertyChange_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.ClearDataProviders
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UCurrentGameDataStore::ClearDataProviders ( )
{
	static UFunction* pFnClearDataProviders = NULL;

	if ( ! pFnClearDataProviders )
		pFnClearDataProviders = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.ClearDataProviders" );

	UCurrentGameDataStore_execClearDataProviders_Parms ClearDataProviders_Parms;

	this->ProcessEvent ( pFnClearDataProviders, &ClearDataProviders_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.GetTeamDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UTeamDataProvider*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeamInfo*               TI                             ( CPF_Parm )

class UTeamDataProvider* UCurrentGameDataStore::GetTeamDataProvider ( class ATeamInfo* TI )
{
	static UFunction* pFnGetTeamDataProvider = NULL;

	if ( ! pFnGetTeamDataProvider )
		pFnGetTeamDataProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.GetTeamDataProvider" );

	UCurrentGameDataStore_execGetTeamDataProvider_Parms GetTeamDataProvider_Parms;
	GetTeamDataProvider_Parms.TI = TI;

	this->ProcessEvent ( pFnGetTeamDataProvider, &GetTeamDataProvider_Parms, NULL );

	return GetTeamDataProvider_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.GetPlayerDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UPlayerDataProvider*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

class UPlayerDataProvider* UCurrentGameDataStore::GetPlayerDataProvider ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetPlayerDataProvider = NULL;

	if ( ! pFnGetPlayerDataProvider )
		pFnGetPlayerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.GetPlayerDataProvider" );

	UCurrentGameDataStore_execGetPlayerDataProvider_Parms GetPlayerDataProvider_Parms;
	GetPlayerDataProvider_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetPlayerDataProvider, &GetPlayerDataProvider_Parms, NULL );

	return GetPlayerDataProvider_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.FindTeamDataProviderIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeamInfo*               TI                             ( CPF_Parm )

int UCurrentGameDataStore::FindTeamDataProviderIndex ( class ATeamInfo* TI )
{
	static UFunction* pFnFindTeamDataProviderIndex = NULL;

	if ( ! pFnFindTeamDataProviderIndex )
		pFnFindTeamDataProviderIndex = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.FindTeamDataProviderIndex" );

	UCurrentGameDataStore_execFindTeamDataProviderIndex_Parms FindTeamDataProviderIndex_Parms;
	FindTeamDataProviderIndex_Parms.TI = TI;

	this->ProcessEvent ( pFnFindTeamDataProviderIndex, &FindTeamDataProviderIndex_Parms, NULL );

	return FindTeamDataProviderIndex_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.FindPlayerDataProviderIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

int UCurrentGameDataStore::FindPlayerDataProviderIndex ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnFindPlayerDataProviderIndex = NULL;

	if ( ! pFnFindPlayerDataProviderIndex )
		pFnFindPlayerDataProviderIndex = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.FindPlayerDataProviderIndex" );

	UCurrentGameDataStore_execFindPlayerDataProviderIndex_Parms FindPlayerDataProviderIndex_Parms;
	FindPlayerDataProviderIndex_Parms.PRI = PRI;

	this->ProcessEvent ( pFnFindPlayerDataProviderIndex, &FindPlayerDataProviderIndex_Parms, NULL );

	return FindPlayerDataProviderIndex_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.RemoveTeamDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ATeamInfo*               TI                             ( CPF_Parm )

void UCurrentGameDataStore::RemoveTeamDataProvider ( class ATeamInfo* TI )
{
	static UFunction* pFnRemoveTeamDataProvider = NULL;

	if ( ! pFnRemoveTeamDataProvider )
		pFnRemoveTeamDataProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.RemoveTeamDataProvider" );

	UCurrentGameDataStore_execRemoveTeamDataProvider_Parms RemoveTeamDataProvider_Parms;
	RemoveTeamDataProvider_Parms.TI = TI;

	this->ProcessEvent ( pFnRemoveTeamDataProvider, &RemoveTeamDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.AddTeamDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ATeamInfo*               TI                             ( CPF_Parm )

void UCurrentGameDataStore::AddTeamDataProvider ( class ATeamInfo* TI )
{
	static UFunction* pFnAddTeamDataProvider = NULL;

	if ( ! pFnAddTeamDataProvider )
		pFnAddTeamDataProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.AddTeamDataProvider" );

	UCurrentGameDataStore_execAddTeamDataProvider_Parms AddTeamDataProvider_Parms;
	AddTeamDataProvider_Parms.TI = TI;

	this->ProcessEvent ( pFnAddTeamDataProvider, &AddTeamDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.RemovePlayerDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void UCurrentGameDataStore::RemovePlayerDataProvider ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnRemovePlayerDataProvider = NULL;

	if ( ! pFnRemovePlayerDataProvider )
		pFnRemovePlayerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.RemovePlayerDataProvider" );

	UCurrentGameDataStore_execRemovePlayerDataProvider_Parms RemovePlayerDataProvider_Parms;
	RemovePlayerDataProvider_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRemovePlayerDataProvider, &RemovePlayerDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.AddPlayerDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void UCurrentGameDataStore::AddPlayerDataProvider ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPlayerDataProvider = NULL;

	if ( ! pFnAddPlayerDataProvider )
		pFnAddPlayerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.AddPlayerDataProvider" );

	UCurrentGameDataStore_execAddPlayerDataProvider_Parms AddPlayerDataProvider_Parms;
	AddPlayerDataProvider_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPlayerDataProvider, &AddPlayerDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.CreateGameDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AGameReplicationInfo*    GRI                            ( CPF_Parm )

void UCurrentGameDataStore::CreateGameDataProvider ( class AGameReplicationInfo* GRI )
{
	static UFunction* pFnCreateGameDataProvider = NULL;

	if ( ! pFnCreateGameDataProvider )
		pFnCreateGameDataProvider = UObject::FindObject< UFunction > ( "Function Engine.CurrentGameDataStore.CreateGameDataProvider" );

	UCurrentGameDataStore_execCreateGameDataProvider_Parms CreateGameDataProvider_Parms;
	CreateGameDataProvider_Parms.GRI = GRI;

	this->ProcessEvent ( pFnCreateGameDataProvider, &CreateGameDataProvider_Parms, NULL );
};

// Function Engine.UIPropertyDataProvider.GetCustomPropertyValue
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue PropertyValue                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIPropertyDataProvider::eventGetCustomPropertyValue ( int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue )
{
	static UFunction* pFnGetCustomPropertyValue = NULL;

	if ( ! pFnGetCustomPropertyValue )
		pFnGetCustomPropertyValue = UObject::FindObject< UFunction > ( "Function Engine.UIPropertyDataProvider.GetCustomPropertyValue" );

	UUIPropertyDataProvider_eventGetCustomPropertyValue_Parms GetCustomPropertyValue_Parms;
	GetCustomPropertyValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnGetCustomPropertyValue, &GetCustomPropertyValue_Parms, NULL );

	if ( PropertyValue )
		memcpy ( PropertyValue, &GetCustomPropertyValue_Parms.PropertyValue, 0x40 );

	return GetCustomPropertyValue_Parms.ReturnValue;
};

// Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UProperty*               UnsupportedProperty            ( CPF_Parm )

bool UUIPropertyDataProvider::CanSupportComplexPropertyType ( class UProperty* UnsupportedProperty )
{
	static UFunction* pFnCanSupportComplexPropertyType = NULL;

	if ( ! pFnCanSupportComplexPropertyType )
		pFnCanSupportComplexPropertyType = UObject::FindObject< UFunction > ( "Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType" );

	UUIPropertyDataProvider_execCanSupportComplexPropertyType_Parms CanSupportComplexPropertyType_Parms;
	CanSupportComplexPropertyType_Parms.UnsupportedProperty = UnsupportedProperty;

	this->ProcessEvent ( pFnCanSupportComplexPropertyType, &CanSupportComplexPropertyType_Parms, NULL );

	return CanSupportComplexPropertyType_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.CleanupDataProvider
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDynamicDataProvider::CleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicDataProvider.CleanupDataProvider" );

	UUIDynamicDataProvider_execCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.GetDataSource
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* UUIDynamicDataProvider::GetDataSource ( )
{
	static UFunction* pFnGetDataSource = NULL;

	if ( ! pFnGetDataSource )
		pFnGetDataSource = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicDataProvider.GetDataSource" );

	UUIDynamicDataProvider_execGetDataSource_Parms GetDataSource_Parms;

	this->ProcessEvent ( pFnGetDataSource, &GetDataSource_Parms, NULL );

	return GetDataSource_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.IsValidDataSourceClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PotentialDataSourceClass       ( CPF_Parm )

bool UUIDynamicDataProvider::eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass )
{
	static UFunction* pFnIsValidDataSourceClass = NULL;

	if ( ! pFnIsValidDataSourceClass )
		pFnIsValidDataSourceClass = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicDataProvider.IsValidDataSourceClass" );

	UUIDynamicDataProvider_eventIsValidDataSourceClass_Parms IsValidDataSourceClass_Parms;
	IsValidDataSourceClass_Parms.PotentialDataSourceClass = PotentialDataSourceClass;

	this->ProcessEvent ( pFnIsValidDataSourceClass, &IsValidDataSourceClass_Parms, NULL );

	return IsValidDataSourceClass_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UUIDynamicDataProvider::eventProviderInstanceUnbound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceUnbound = NULL;

	if ( ! pFnProviderInstanceUnbound )
		pFnProviderInstanceUnbound = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound" );

	UUIDynamicDataProvider_eventProviderInstanceUnbound_Parms ProviderInstanceUnbound_Parms;
	ProviderInstanceUnbound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceUnbound, &ProviderInstanceUnbound_Parms, NULL );
};

// Function Engine.UIDynamicDataProvider.ProviderInstanceBound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UUIDynamicDataProvider::eventProviderInstanceBound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceBound = NULL;

	if ( ! pFnProviderInstanceBound )
		pFnProviderInstanceBound = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicDataProvider.ProviderInstanceBound" );

	UUIDynamicDataProvider_eventProviderInstanceBound_Parms ProviderInstanceBound_Parms;
	ProviderInstanceBound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceBound, &ProviderInstanceBound_Parms, NULL );
};

// Function Engine.UIDynamicDataProvider.UnbindProviderInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDynamicDataProvider::UnbindProviderInstance ( )
{
	static UFunction* pFnUnbindProviderInstance = NULL;

	if ( ! pFnUnbindProviderInstance )
		pFnUnbindProviderInstance = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicDataProvider.UnbindProviderInstance" );

	UUIDynamicDataProvider_execUnbindProviderInstance_Parms UnbindProviderInstance_Parms;

	pFnUnbindProviderInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnbindProviderInstance, &UnbindProviderInstance_Parms, NULL );

	pFnUnbindProviderInstance->FunctionFlags |= 0x400;

	return UnbindProviderInstance_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.BindProviderInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 DataSourceInstance             ( CPF_Parm )

bool UUIDynamicDataProvider::BindProviderInstance ( class UObject* DataSourceInstance )
{
	static UFunction* pFnBindProviderInstance = NULL;

	if ( ! pFnBindProviderInstance )
		pFnBindProviderInstance = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicDataProvider.BindProviderInstance" );

	UUIDynamicDataProvider_execBindProviderInstance_Parms BindProviderInstance_Parms;
	BindProviderInstance_Parms.DataSourceInstance = DataSourceInstance;

	pFnBindProviderInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBindProviderInstance, &BindProviderInstance_Parms, NULL );

	pFnBindProviderInstance->FunctionFlags |= 0x400;

	return BindProviderInstance_Parms.ReturnValue;
};

// Function Engine.GameInfoDataProvider.ProviderInstanceBound
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UGameInfoDataProvider::eventProviderInstanceBound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceBound = NULL;

	if ( ! pFnProviderInstanceBound )
		pFnProviderInstanceBound = UObject::FindObject< UFunction > ( "Function Engine.GameInfoDataProvider.ProviderInstanceBound" );

	UGameInfoDataProvider_eventProviderInstanceBound_Parms ProviderInstanceBound_Parms;
	ProviderInstanceBound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceBound, &ProviderInstanceBound_Parms, NULL );
};

// Function Engine.GameUISceneClient.AnimLookupSequence
// [0x00020002] 
// Parameters infos:
// class UUIAnimationSeq*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SequenceName                   ( CPF_Parm )

class UUIAnimationSeq* UGameUISceneClient::AnimLookupSequence ( struct FName SequenceName )
{
	static UFunction* pFnAnimLookupSequence = NULL;

	if ( ! pFnAnimLookupSequence )
		pFnAnimLookupSequence = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.AnimLookupSequence" );

	UGameUISceneClient_execAnimLookupSequence_Parms AnimLookupSequence_Parms;
	memcpy ( &AnimLookupSequence_Parms.SequenceName, &SequenceName, 0x8 );

	this->ProcessEvent ( pFnAnimLookupSequence, &AnimLookupSequence_Parms, NULL );

	return AnimLookupSequence_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.AnimUnSubscribe
// [0x00020002] 
// Parameters infos:
// class UUIObject*               Target                         ( CPF_Parm )

void UGameUISceneClient::AnimUnSubscribe ( class UUIObject* Target )
{
	static UFunction* pFnAnimUnSubscribe = NULL;

	if ( ! pFnAnimUnSubscribe )
		pFnAnimUnSubscribe = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.AnimUnSubscribe" );

	UGameUISceneClient_execAnimUnSubscribe_Parms AnimUnSubscribe_Parms;
	AnimUnSubscribe_Parms.Target = Target;

	this->ProcessEvent ( pFnAnimUnSubscribe, &AnimUnSubscribe_Parms, NULL );
};

// Function Engine.GameUISceneClient.AnimSubscribe
// [0x00020002] 
// Parameters infos:
// class UUIObject*               Target                         ( CPF_Parm )

void UGameUISceneClient::AnimSubscribe ( class UUIObject* Target )
{
	static UFunction* pFnAnimSubscribe = NULL;

	if ( ! pFnAnimSubscribe )
		pFnAnimSubscribe = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.AnimSubscribe" );

	UGameUISceneClient_execAnimSubscribe_Parms AnimSubscribe_Parms;
	AnimSubscribe_Parms.Target = Target;

	this->ProcessEvent ( pFnAnimSubscribe, &AnimSubscribe_Parms, NULL );
};

// Function Engine.GameUISceneClient.GetUIScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGameUISceneClient::GetUIScale ( )
{
	static UFunction* pFnGetUIScale = NULL;

	if ( ! pFnGetUIScale )
		pFnGetUIScale = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.GetUIScale" );

	UGameUISceneClient_execGetUIScale_Parms GetUIScale_Parms;

	pFnGetUIScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIScale, &GetUIScale_Parms, NULL );

	pFnGetUIScale->FunctionFlags |= 0x400;

	return GetUIScale_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.SetUIScale
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// float                          fNewUIScale                    ( CPF_Parm )

void UGameUISceneClient::SetUIScale ( float fNewUIScale )
{
	static UFunction* pFnSetUIScale = NULL;

	if ( ! pFnSetUIScale )
		pFnSetUIScale = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.SetUIScale" );

	UGameUISceneClient_execSetUIScale_Parms SetUIScale_Parms;
	SetUIScale_Parms.fNewUIScale = fNewUIScale;

	pFnSetUIScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUIScale, &SetUIScale_Parms, NULL );

	pFnSetUIScale->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.ShowMenuProgression
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowMenuProgression ( )
{
	static UFunction* pFnShowMenuProgression = NULL;

	if ( ! pFnShowMenuProgression )
		pFnShowMenuProgression = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ShowMenuProgression" );

	UGameUISceneClient_execShowMenuProgression_Parms ShowMenuProgression_Parms;

	this->ProcessEvent ( pFnShowMenuProgression, &ShowMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowDataStores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bVerbose                       ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::ShowDataStores ( unsigned long bVerbose )
{
	static UFunction* pFnShowDataStores = NULL;

	if ( ! pFnShowDataStores )
		pFnShowDataStores = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ShowDataStores" );

	UGameUISceneClient_execShowDataStores_Parms ShowDataStores_Parms;
	ShowDataStores_Parms.bVerbose = bVerbose;

	this->ProcessEvent ( pFnShowDataStores, &ShowDataStores_Parms, NULL );
};

// Function Engine.GameUISceneClient.RefreshFormatting
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::RefreshFormatting ( )
{
	static UFunction* pFnRefreshFormatting = NULL;

	if ( ! pFnRefreshFormatting )
		pFnRefreshFormatting = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.RefreshFormatting" );

	UGameUISceneClient_execRefreshFormatting_Parms RefreshFormatting_Parms;

	this->ProcessEvent ( pFnRefreshFormatting, &RefreshFormatting_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowDataStoreField
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 DataStoreMarkup                ( CPF_Parm | CPF_NeedCtorLink )

void UGameUISceneClient::ShowDataStoreField ( struct FString DataStoreMarkup )
{
	static UFunction* pFnShowDataStoreField = NULL;

	if ( ! pFnShowDataStoreField )
		pFnShowDataStoreField = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ShowDataStoreField" );

	UGameUISceneClient_execShowDataStoreField_Parms ShowDataStoreField_Parms;
	memcpy ( &ShowDataStoreField_Parms.DataStoreMarkup, &DataStoreMarkup, 0xC );

	this->ProcessEvent ( pFnShowDataStoreField, &ShowDataStoreField_Parms, NULL );
};

// Function Engine.GameUISceneClient.CloseMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   SceneName                      ( CPF_Parm )

void UGameUISceneClient::CloseMenu ( struct FName SceneName )
{
	static UFunction* pFnCloseMenu = NULL;

	if ( ! pFnCloseMenu )
		pFnCloseMenu = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.CloseMenu" );

	UGameUISceneClient_execCloseMenu_Parms CloseMenu_Parms;
	memcpy ( &CloseMenu_Parms.SceneName, &SceneName, 0x8 );

	this->ProcessEvent ( pFnCloseMenu, &CloseMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.OpenMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MenuPath                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::OpenMenu ( struct FString MenuPath, int PlayerIndex )
{
	static UFunction* pFnOpenMenu = NULL;

	if ( ! pFnOpenMenu )
		pFnOpenMenu = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.OpenMenu" );

	UGameUISceneClient_execOpenMenu_Parms OpenMenu_Parms;
	memcpy ( &OpenMenu_Parms.MenuPath, &MenuPath, 0xC );
	OpenMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOpenMenu, &OpenMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.CreateMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  SceneClass                     ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::CreateMenu ( class UClass* SceneClass, int PlayerIndex )
{
	static UFunction* pFnCreateMenu = NULL;

	if ( ! pFnCreateMenu )
		pFnCreateMenu = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.CreateMenu" );

	UGameUISceneClient_execCreateMenu_Parms CreateMenu_Parms;
	CreateMenu_Parms.SceneClass = SceneClass;
	CreateMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCreateMenu, &CreateMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.ToggleDebugInput
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::ToggleDebugInput ( unsigned long bEnable )
{
	static UFunction* pFnToggleDebugInput = NULL;

	if ( ! pFnToggleDebugInput )
		pFnToggleDebugInput = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ToggleDebugInput" );

	UGameUISceneClient_execToggleDebugInput_Parms ToggleDebugInput_Parms;
	ToggleDebugInput_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnToggleDebugInput, &ToggleDebugInput_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowMenuStates
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowMenuStates ( )
{
	static UFunction* pFnShowMenuStates = NULL;

	if ( ! pFnShowMenuStates )
		pFnShowMenuStates = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ShowMenuStates" );

	UGameUISceneClient_execShowMenuStates_Parms ShowMenuStates_Parms;

	this->ProcessEvent ( pFnShowMenuStates, &ShowMenuStates_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowRenderBounds
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowRenderBounds ( )
{
	static UFunction* pFnShowRenderBounds = NULL;

	if ( ! pFnShowRenderBounds )
		pFnShowRenderBounds = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ShowRenderBounds" );

	UGameUISceneClient_execShowRenderBounds_Parms ShowRenderBounds_Parms;

	this->ProcessEvent ( pFnShowRenderBounds, &ShowRenderBounds_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowDockingStacks
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowDockingStacks ( )
{
	static UFunction* pFnShowDockingStacks = NULL;

	if ( ! pFnShowDockingStacks )
		pFnShowDockingStacks = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ShowDockingStacks" );

	UGameUISceneClient_execShowDockingStacks_Parms ShowDockingStacks_Parms;

	this->ProcessEvent ( pFnShowDockingStacks, &ShowDockingStacks_Parms, NULL );
};

// Function Engine.GameUISceneClient.RestoreMenuProgression
// [0x00020002] 
// Parameters infos:
// class UUIScene*                BaseScene                      ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::RestoreMenuProgression ( class UUIScene* BaseScene )
{
	static UFunction* pFnRestoreMenuProgression = NULL;

	if ( ! pFnRestoreMenuProgression )
		pFnRestoreMenuProgression = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.RestoreMenuProgression" );

	UGameUISceneClient_execRestoreMenuProgression_Parms RestoreMenuProgression_Parms;
	RestoreMenuProgression_Parms.BaseScene = BaseScene;

	this->ProcessEvent ( pFnRestoreMenuProgression, &RestoreMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.ClearMenuProgression
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::ClearMenuProgression ( )
{
	static UFunction* pFnClearMenuProgression = NULL;

	if ( ! pFnClearMenuProgression )
		pFnClearMenuProgression = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ClearMenuProgression" );

	UGameUISceneClient_execClearMenuProgression_Parms ClearMenuProgression_Parms;

	this->ProcessEvent ( pFnClearMenuProgression, &ClearMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.SaveMenuProgression
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::SaveMenuProgression ( )
{
	static UFunction* pFnSaveMenuProgression = NULL;

	if ( ! pFnSaveMenuProgression )
		pFnSaveMenuProgression = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.SaveMenuProgression" );

	UGameUISceneClient_execSaveMenuProgression_Parms SaveMenuProgression_Parms;

	this->ProcessEvent ( pFnSaveMenuProgression, &SaveMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.GetActiveScene
// [0x00020002] 
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UGameUISceneClient::GetActiveScene ( )
{
	static UFunction* pFnGetActiveScene = NULL;

	if ( ! pFnGetActiveScene )
		pFnGetActiveScene = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.GetActiveScene" );

	UGameUISceneClient_execGetActiveScene_Parms GetActiveScene_Parms;

	this->ProcessEvent ( pFnGetActiveScene, &GetActiveScene_Parms, NULL );

	return GetActiveScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.NotifyPlayerRemoved" );

	UGameUISceneClient_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyPlayerAdded
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.NotifyPlayerAdded" );

	UGameUISceneClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLinkStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bConnected                     ( CPF_Parm )

void UGameUISceneClient::NotifyLinkStatusChanged ( unsigned long bConnected )
{
	static UFunction* pFnNotifyLinkStatusChanged = NULL;

	if ( ! pFnNotifyLinkStatusChanged )
		pFnNotifyLinkStatusChanged = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.NotifyLinkStatusChanged" );

	UGameUISceneClient_execNotifyLinkStatusChanged_Parms NotifyLinkStatusChanged_Parms;
	NotifyLinkStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyLinkStatusChanged, &NotifyLinkStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewConnectionStatus            ( CPF_Parm )

void UGameUISceneClient::NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus )
{
	static UFunction* pFnNotifyOnlineServiceStatusChanged = NULL;

	if ( ! pFnNotifyOnlineServiceStatusChanged )
		pFnNotifyOnlineServiceStatusChanged = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged" );

	UGameUISceneClient_execNotifyOnlineServiceStatusChanged_Parms NotifyOnlineServiceStatusChanged_Parms;
	NotifyOnlineServiceStatusChanged_Parms.NewConnectionStatus = NewConnectionStatus;

	this->ProcessEvent ( pFnNotifyOnlineServiceStatusChanged, &NotifyOnlineServiceStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.NotifyGameSessionEnded" );

	UGameUISceneClient_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyClientTravel
// [0x00020002] 
// Parameters infos:
// class APlayerController*       TravellingPlayer               ( CPF_Parm )
// struct FString                 TravelURL                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void UGameUISceneClient::NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnNotifyClientTravel = NULL;

	if ( ! pFnNotifyClientTravel )
		pFnNotifyClientTravel = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.NotifyClientTravel" );

	UGameUISceneClient_execNotifyClientTravel_Parms NotifyClientTravel_Parms;
	NotifyClientTravel_Parms.TravellingPlayer = TravellingPlayer;
	memcpy ( &NotifyClientTravel_Parms.TravelURL, &TravelURL, 0xC );
	NotifyClientTravel_Parms.TravelType = TravelType;
	NotifyClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnNotifyClientTravel, &NotifyClientTravel_Parms, NULL );
};

// Function Engine.GameUISceneClient.CanShowToolTips
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::eventCanShowToolTips ( )
{
	static UFunction* pFnCanShowToolTips = NULL;

	if ( ! pFnCanShowToolTips )
		pFnCanShowToolTips = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.CanShowToolTips" );

	UGameUISceneClient_eventCanShowToolTips_Parms CanShowToolTips_Parms;

	this->ProcessEvent ( pFnCanShowToolTips, &CanShowToolTips_Parms, NULL );

	return CanShowToolTips_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.ConditionalPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )

void UGameUISceneClient::eventConditionalPause ( unsigned long bDesiredPauseState )
{
	static UFunction* pFnConditionalPause = NULL;

	if ( ! pFnConditionalPause )
		pFnConditionalPause = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.ConditionalPause" );

	UGameUISceneClient_eventConditionalPause_Parms ConditionalPause_Parms;
	ConditionalPause_Parms.bDesiredPauseState = bDesiredPauseState;

	this->ProcessEvent ( pFnConditionalPause, &ConditionalPause_Parms, NULL );
};

// Function Engine.GameUISceneClient.SetActiveControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               NewActiveControl               ( CPF_Parm )

bool UGameUISceneClient::SetActiveControl ( class UUIObject* NewActiveControl )
{
	static UFunction* pFnSetActiveControl = NULL;

	if ( ! pFnSetActiveControl )
		pFnSetActiveControl = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.SetActiveControl" );

	UGameUISceneClient_execSetActiveControl_Parms SetActiveControl_Parms;
	SetActiveControl_Parms.NewActiveControl = NewActiveControl;

	pFnSetActiveControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveControl, &SetActiveControl_Parms, NULL );

	pFnSetActiveControl->FunctionFlags |= 0x400;

	return SetActiveControl_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::CanUnpauseInternalUI ( )
{
	static UFunction* pFnCanUnpauseInternalUI = NULL;

	if ( ! pFnCanUnpauseInternalUI )
		pFnCanUnpauseInternalUI = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.CanUnpauseInternalUI" );

	UGameUISceneClient_execCanUnpauseInternalUI_Parms CanUnpauseInternalUI_Parms;

	pFnCanUnpauseInternalUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanUnpauseInternalUI, &CanUnpauseInternalUI_Parms, NULL );

	pFnCanUnpauseInternalUI->FunctionFlags |= 0x400;

	return CanUnpauseInternalUI_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.RequestCursorRenderUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameUISceneClient::RequestCursorRenderUpdate ( )
{
	static UFunction* pFnRequestCursorRenderUpdate = NULL;

	if ( ! pFnRequestCursorRenderUpdate )
		pFnRequestCursorRenderUpdate = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.RequestCursorRenderUpdate" );

	UGameUISceneClient_execRequestCursorRenderUpdate_Parms RequestCursorRenderUpdate_Parms;

	pFnRequestCursorRenderUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestCursorRenderUpdate, &RequestCursorRenderUpdate_Parms, NULL );

	pFnRequestCursorRenderUpdate->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameUISceneClient::RequestInputProcessingUpdate ( )
{
	static UFunction* pFnRequestInputProcessingUpdate = NULL;

	if ( ! pFnRequestInputProcessingUpdate )
		pFnRequestInputProcessingUpdate = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.RequestInputProcessingUpdate" );

	UGameUISceneClient_execRequestInputProcessingUpdate_Parms RequestInputProcessingUpdate_Parms;

	pFnRequestInputProcessingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestInputProcessingUpdate, &RequestInputProcessingUpdate_Parms, NULL );

	pFnRequestInputProcessingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.FindSceneByTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner )
{
	static UFunction* pFnFindSceneByTag = NULL;

	if ( ! pFnFindSceneByTag )
		pFnFindSceneByTag = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.FindSceneByTag" );

	UGameUISceneClient_execFindSceneByTag_Parms FindSceneByTag_Parms;
	memcpy ( &FindSceneByTag_Parms.SceneTag, &SceneTag, 0x8 );
	FindSceneByTag_Parms.SceneOwner = SceneOwner;

	pFnFindSceneByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSceneByTag, &FindSceneByTag_Parms, NULL );

	pFnFindSceneByTag->FunctionFlags |= 0x400;

	return FindSceneByTag_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateTransientWidget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// struct FName                   WidgetTag                      ( CPF_Parm )
// class UUIObject*               Owner                          ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UGameUISceneClient::CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner )
{
	static UFunction* pFnCreateTransientWidget = NULL;

	if ( ! pFnCreateTransientWidget )
		pFnCreateTransientWidget = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.CreateTransientWidget" );

	UGameUISceneClient_execCreateTransientWidget_Parms CreateTransientWidget_Parms;
	CreateTransientWidget_Parms.WidgetClass = WidgetClass;
	memcpy ( &CreateTransientWidget_Parms.WidgetTag, &WidgetTag, 0x8 );
	CreateTransientWidget_Parms.Owner = Owner;

	pFnCreateTransientWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTransientWidget, &CreateTransientWidget_Parms, NULL );

	pFnCreateTransientWidget->FunctionFlags |= 0x400;

	return CreateTransientWidget_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SceneClass                     ( CPF_Parm )
// struct FName                   SceneTag                       ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate )
{
	static UFunction* pFnCreateScene = NULL;

	if ( ! pFnCreateScene )
		pFnCreateScene = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.CreateScene" );

	UGameUISceneClient_execCreateScene_Parms CreateScene_Parms;
	CreateScene_Parms.SceneClass = SceneClass;
	memcpy ( &CreateScene_Parms.SceneTag, &SceneTag, 0x8 );
	CreateScene_Parms.SceneTemplate = SceneTemplate;

	pFnCreateScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateScene, &CreateScene_Parms, NULL );

	pFnCreateScene->FunctionFlags |= 0x400;

	return CreateScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetTransientScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UGameUISceneClient::GetTransientScene ( )
{
	static UFunction* pFnGetTransientScene = NULL;

	if ( ! pFnGetTransientScene )
		pFnGetTransientScene = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.GetTransientScene" );

	UGameUISceneClient_execGetTransientScene_Parms GetTransientScene_Parms;

	pFnGetTransientScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTransientScene, &GetTransientScene_Parms, NULL );

	pFnGetTransientScene->FunctionFlags |= 0x400;

	return GetTransientScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetCurrentNetMode
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UGameUISceneClient::GetCurrentNetMode ( )
{
	static UFunction* pFnGetCurrentNetMode = NULL;

	if ( ! pFnGetCurrentNetMode )
		pFnGetCurrentNetMode = UObject::FindObject< UFunction > ( "Function Engine.GameUISceneClient.GetCurrentNetMode" );

	UGameUISceneClient_execGetCurrentNetMode_Parms GetCurrentNetMode_Parms;

	pFnGetCurrentNetMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentNetMode, &GetCurrentNetMode_Parms, NULL );

	pFnGetCurrentNetMode->FunctionFlags |= 0x400;

	return GetCurrentNetMode_Parms.ReturnValue;
};

// Function Engine.PlayerOwnerDataProvider.CleanupDataProvider
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerOwnerDataProvider::CleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = UObject::FindObject< UFunction > ( "Function Engine.PlayerOwnerDataProvider.CleanupDataProvider" );

	UPlayerOwnerDataProvider_execCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.PlayerOwnerDataProvider.SetPlayerDataProvider
// [0x00020002] 
// Parameters infos:
// class UPlayerDataProvider*     NewPlayerData                  ( CPF_Parm )

void UPlayerOwnerDataProvider::SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData )
{
	static UFunction* pFnSetPlayerDataProvider = NULL;

	if ( ! pFnSetPlayerDataProvider )
		pFnSetPlayerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.PlayerOwnerDataProvider.SetPlayerDataProvider" );

	UPlayerOwnerDataProvider_execSetPlayerDataProvider_Parms SetPlayerDataProvider_Parms;
	SetPlayerDataProvider_Parms.NewPlayerData = NewPlayerData;

	this->ProcessEvent ( pFnSetPlayerDataProvider, &SetPlayerDataProvider_Parms, NULL );
};

// Function Engine.PlayerOwnerDataStore.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerOwnerDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.PlayerOwnerDataStore.NotifyGameSessionEnded" );

	UPlayerOwnerDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.PlayerOwnerDataStore.ClearDataProviders
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UPlayerOwnerDataStore::ClearDataProviders ( )
{
	static UFunction* pFnClearDataProviders = NULL;

	if ( ! pFnClearDataProviders )
		pFnClearDataProviders = UObject::FindObject< UFunction > ( "Function Engine.PlayerOwnerDataStore.ClearDataProviders" );

	UPlayerOwnerDataStore_execClearDataProviders_Parms ClearDataProviders_Parms;

	this->ProcessEvent ( pFnClearDataProviders, &ClearDataProviders_Parms, NULL );
};

// Function Engine.PlayerOwnerDataStore.SetPlayerDataProvider
// [0x00020002] 
// Parameters infos:
// class UPlayerDataProvider*     NewPlayerData                  ( CPF_Parm )

void UPlayerOwnerDataStore::SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData )
{
	static UFunction* pFnSetPlayerDataProvider = NULL;

	if ( ! pFnSetPlayerDataProvider )
		pFnSetPlayerDataProvider = UObject::FindObject< UFunction > ( "Function Engine.PlayerOwnerDataStore.SetPlayerDataProvider" );

	UPlayerOwnerDataStore_execSetPlayerDataProvider_Parms SetPlayerDataProvider_Parms;
	SetPlayerDataProvider_Parms.NewPlayerData = NewPlayerData;

	this->ProcessEvent ( pFnSetPlayerDataProvider, &SetPlayerDataProvider_Parms, NULL );
};

// Function Engine.UISettingsProvider.CleanupDataProvider
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUISettingsProvider::CleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = UObject::FindObject< UFunction > ( "Function Engine.UISettingsProvider.CleanupDataProvider" );

	UUISettingsProvider_execCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.UISettingsProvider.OnModifiedProperty
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// class UUIObject*               Widget                         ( CPF_Parm )

bool UUISettingsProvider::OnModifiedProperty ( struct FName PropertyName, class UUIObject* Widget )
{
	static UFunction* pFnOnModifiedProperty = NULL;

	if ( ! pFnOnModifiedProperty )
		pFnOnModifiedProperty = UObject::FindObject< UFunction > ( "Function Engine.UISettingsProvider.OnModifiedProperty" );

	UUISettingsProvider_execOnModifiedProperty_Parms OnModifiedProperty_Parms;
	memcpy ( &OnModifiedProperty_Parms.PropertyName, &PropertyName, 0x8 );
	OnModifiedProperty_Parms.Widget = Widget;

	this->ProcessEvent ( pFnOnModifiedProperty, &OnModifiedProperty_Parms, NULL );

	return OnModifiedProperty_Parms.ReturnValue;
};

// Function Engine.UISettingsProvider.SavePropertyValue
// [0x00020000] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_Parm )
// class UUIObject*               Widget                         ( CPF_Parm )

void UUISettingsProvider::SavePropertyValue ( struct FName PropertyName, class UUIObject* Widget )
{
	static UFunction* pFnSavePropertyValue = NULL;

	if ( ! pFnSavePropertyValue )
		pFnSavePropertyValue = UObject::FindObject< UFunction > ( "Function Engine.UISettingsProvider.SavePropertyValue" );

	UUISettingsProvider_execSavePropertyValue_Parms SavePropertyValue_Parms;
	memcpy ( &SavePropertyValue_Parms.PropertyName, &PropertyName, 0x8 );
	SavePropertyValue_Parms.Widget = Widget;

	this->ProcessEvent ( pFnSavePropertyValue, &SavePropertyValue_Parms, NULL );
};

// Function Engine.UISettingsProvider.LoadPropertyValue
// [0x00020000] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_Parm )
// class UUIObject*               Widget                         ( CPF_Parm )

void UUISettingsProvider::LoadPropertyValue ( struct FName PropertyName, class UUIObject* Widget )
{
	static UFunction* pFnLoadPropertyValue = NULL;

	if ( ! pFnLoadPropertyValue )
		pFnLoadPropertyValue = UObject::FindObject< UFunction > ( "Function Engine.UISettingsProvider.LoadPropertyValue" );

	UUISettingsProvider_execLoadPropertyValue_Parms LoadPropertyValue_Parms;
	memcpy ( &LoadPropertyValue_Parms.PropertyName, &PropertyName, 0x8 );
	LoadPropertyValue_Parms.Widget = Widget;

	this->ProcessEvent ( pFnLoadPropertyValue, &LoadPropertyValue_Parms, NULL );
};

// Function Engine.UIDataStore_PlayerSettings.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_PlayerSettings::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_PlayerSettings.NotifyGameSessionEnded" );

	UUIDataStore_PlayerSettings_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore_PlayerSettings.ClearDataProviders
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UUIDataStore_PlayerSettings::ClearDataProviders ( )
{
	static UFunction* pFnClearDataProviders = NULL;

	if ( ! pFnClearDataProviders )
		pFnClearDataProviders = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_PlayerSettings.ClearDataProviders" );

	UUIDataStore_PlayerSettings_execClearDataProviders_Parms ClearDataProviders_Parms;

	this->ProcessEvent ( pFnClearDataProviders, &ClearDataProviders_Parms, NULL );
};

// Function Engine.UIDataStore_PlayerSettings.GetPlayerOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ULocalPlayer* UUIDataStore_PlayerSettings::GetPlayerOwner ( )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_PlayerSettings.GetPlayerOwner" );

	UUIDataStore_PlayerSettings_execGetPlayerOwner_Parms GetPlayerOwner_Parms;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.PlayerSettingsProvider.OnUnregister
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UPlayerSettingsProvider::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = UObject::FindObject< UFunction > ( "Function Engine.PlayerSettingsProvider.OnUnregister" );

	UPlayerSettingsProvider_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.PlayerSettingsProvider.OnRegister
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UPlayerSettingsProvider::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.PlayerSettingsProvider.OnRegister" );

	UPlayerSettingsProvider_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.PowerupDataProvider.IsValidDataSourceClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PotentialDataSourceClass       ( CPF_Parm )

bool UPowerupDataProvider::eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass )
{
	static UFunction* pFnIsValidDataSourceClass = NULL;

	if ( ! pFnIsValidDataSourceClass )
		pFnIsValidDataSourceClass = UObject::FindObject< UFunction > ( "Function Engine.PowerupDataProvider.IsValidDataSourceClass" );

	UPowerupDataProvider_eventIsValidDataSourceClass_Parms IsValidDataSourceClass_Parms;
	IsValidDataSourceClass_Parms.PotentialDataSourceClass = PotentialDataSourceClass;

	this->ProcessEvent ( pFnIsValidDataSourceClass, &IsValidDataSourceClass_Parms, NULL );

	return IsValidDataSourceClass_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.FindCollectionValueIndex
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToFind                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int USceneDataStore::FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind )
{
	static UFunction* pFnFindCollectionValueIndex = NULL;

	if ( ! pFnFindCollectionValueIndex )
		pFnFindCollectionValueIndex = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.FindCollectionValueIndex" );

	USceneDataStore_execFindCollectionValueIndex_Parms FindCollectionValueIndex_Parms;
	memcpy ( &FindCollectionValueIndex_Parms.FieldName, &FieldName, 0x8 );
	FindCollectionValueIndex_Parms.bPersistent = bPersistent;
	memcpy ( &FindCollectionValueIndex_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnFindCollectionValueIndex, &FindCollectionValueIndex_Parms, NULL );

	if ( ValueToFind )
		memcpy ( ValueToFind, &FindCollectionValueIndex_Parms.ValueToFind, 0xC );

	return FindCollectionValueIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.GetCollectionValue
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 out_Value                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value )
{
	static UFunction* pFnGetCollectionValue = NULL;

	if ( ! pFnGetCollectionValue )
		pFnGetCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.GetCollectionValue" );

	USceneDataStore_execGetCollectionValue_Parms GetCollectionValue_Parms;
	memcpy ( &GetCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValue_Parms.ValueIndex = ValueIndex;
	GetCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnGetCollectionValue, &GetCollectionValue_Parms, NULL );

	if ( out_Value )
		memcpy ( out_Value, &GetCollectionValue_Parms.out_Value, 0xC );

	return GetCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ClearCollectionValueArray
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool USceneDataStore::ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnClearCollectionValueArray = NULL;

	if ( ! pFnClearCollectionValueArray )
		pFnClearCollectionValueArray = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.ClearCollectionValueArray" );

	USceneDataStore_execClearCollectionValueArray_Parms ClearCollectionValueArray_Parms;
	memcpy ( &ClearCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	ClearCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &ClearCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnClearCollectionValueArray, &ClearCollectionValueArray_Parms, NULL );

	return ClearCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ReplaceCollectionValueByIndex
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValueByIndex = NULL;

	if ( ! pFnReplaceCollectionValueByIndex )
		pFnReplaceCollectionValueByIndex = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.ReplaceCollectionValueByIndex" );

	USceneDataStore_execReplaceCollectionValueByIndex_Parms ReplaceCollectionValueByIndex_Parms;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	ReplaceCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnReplaceCollectionValueByIndex, &ReplaceCollectionValueByIndex_Parms, NULL );

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValueByIndex_Parms.NewValue, 0xC );

	return ReplaceCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ReplaceCollectionValue
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 CurrentValue                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValue = NULL;

	if ( ! pFnReplaceCollectionValue )
		pFnReplaceCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.ReplaceCollectionValue" );

	USceneDataStore_execReplaceCollectionValue_Parms ReplaceCollectionValue_Parms;
	memcpy ( &ReplaceCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnReplaceCollectionValue, &ReplaceCollectionValue_Parms, NULL );

	if ( CurrentValue )
		memcpy ( CurrentValue, &ReplaceCollectionValue_Parms.CurrentValue, 0xC );

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValue_Parms.NewValue, 0xC );

	return ReplaceCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.RemoveCollectionValueByIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool USceneDataStore::RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnRemoveCollectionValueByIndex = NULL;

	if ( ! pFnRemoveCollectionValueByIndex )
		pFnRemoveCollectionValueByIndex = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.RemoveCollectionValueByIndex" );

	USceneDataStore_execRemoveCollectionValueByIndex_Parms RemoveCollectionValueByIndex_Parms;
	memcpy ( &RemoveCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	RemoveCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnRemoveCollectionValueByIndex, &RemoveCollectionValueByIndex_Parms, NULL );

	return RemoveCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.RemoveCollectionValue
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToRemove                  ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove )
{
	static UFunction* pFnRemoveCollectionValue = NULL;

	if ( ! pFnRemoveCollectionValue )
		pFnRemoveCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.RemoveCollectionValue" );

	USceneDataStore_execRemoveCollectionValue_Parms RemoveCollectionValue_Parms;
	memcpy ( &RemoveCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnRemoveCollectionValue, &RemoveCollectionValue_Parms, NULL );

	if ( ValueToRemove )
		memcpy ( ValueToRemove, &RemoveCollectionValue_Parms.ValueToRemove, 0xC );

	return RemoveCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.InsertCollectionValue
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowDuplicateValues          ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnInsertCollectionValue = NULL;

	if ( ! pFnInsertCollectionValue )
		pFnInsertCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.InsertCollectionValue" );

	USceneDataStore_execInsertCollectionValue_Parms InsertCollectionValue_Parms;
	memcpy ( &InsertCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	InsertCollectionValue_Parms.InsertIndex = InsertIndex;
	InsertCollectionValue_Parms.bPersistent = bPersistent;
	InsertCollectionValue_Parms.bAllowDuplicateValues = bAllowDuplicateValues;
	memcpy ( &InsertCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnInsertCollectionValue, &InsertCollectionValue_Parms, NULL );

	if ( NewValue )
		memcpy ( NewValue, &InsertCollectionValue_Parms.NewValue, 0xC );

	return InsertCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.SetCollectionValueArray
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bClearExisting                 ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       CollectionValues               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* CollectionValues )
{
	static UFunction* pFnSetCollectionValueArray = NULL;

	if ( ! pFnSetCollectionValueArray )
		pFnSetCollectionValueArray = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.SetCollectionValueArray" );

	USceneDataStore_execSetCollectionValueArray_Parms SetCollectionValueArray_Parms;
	memcpy ( &SetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	SetCollectionValueArray_Parms.bClearExisting = bClearExisting;
	SetCollectionValueArray_Parms.InsertIndex = InsertIndex;
	SetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &SetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnSetCollectionValueArray, &SetCollectionValueArray_Parms, NULL );

	if ( CollectionValues )
		memcpy ( CollectionValues, &SetCollectionValueArray_Parms.CollectionValues, 0xC );

	return SetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.GetCollectionValueArray
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       out_DataValueArray             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* out_DataValueArray )
{
	static UFunction* pFnGetCollectionValueArray = NULL;

	if ( ! pFnGetCollectionValueArray )
		pFnGetCollectionValueArray = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.GetCollectionValueArray" );

	USceneDataStore_execGetCollectionValueArray_Parms GetCollectionValueArray_Parms;
	memcpy ( &GetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnGetCollectionValueArray, &GetCollectionValueArray_Parms, NULL );

	if ( out_DataValueArray )
		memcpy ( out_DataValueArray, &GetCollectionValueArray_Parms.out_DataValueArray, 0xC );

	return GetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ClearFields
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReinitializeRuntimeFields     ( CPF_OptionalParm | CPF_Parm )

bool USceneDataStore::ClearFields ( unsigned long bReinitializeRuntimeFields )
{
	static UFunction* pFnClearFields = NULL;

	if ( ! pFnClearFields )
		pFnClearFields = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.ClearFields" );

	USceneDataStore_execClearFields_Parms ClearFields_Parms;
	ClearFields_Parms.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	this->ProcessEvent ( pFnClearFields, &ClearFields_Parms, NULL );

	return ClearFields_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.FindFieldIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bSearchPersistentFields        ( CPF_OptionalParm | CPF_Parm )

int USceneDataStore::FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields )
{
	static UFunction* pFnFindFieldIndex = NULL;

	if ( ! pFnFindFieldIndex )
		pFnFindFieldIndex = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.FindFieldIndex" );

	USceneDataStore_execFindFieldIndex_Parms FindFieldIndex_Parms;
	memcpy ( &FindFieldIndex_Parms.FieldName, &FieldName, 0x8 );
	FindFieldIndex_Parms.bSearchPersistentFields = bSearchPersistentFields;

	this->ProcessEvent ( pFnFindFieldIndex, &FindFieldIndex_Parms, NULL );

	return FindFieldIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.RemoveField
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

bool USceneDataStore::RemoveField ( struct FName FieldName )
{
	static UFunction* pFnRemoveField = NULL;

	if ( ! pFnRemoveField )
		pFnRemoveField = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.RemoveField" );

	USceneDataStore_execRemoveField_Parms RemoveField_Parms;
	memcpy ( &RemoveField_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnRemoveField, &RemoveField_Parms, NULL );

	return RemoveField_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.AddField
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned char                  FieldType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// int                            out_InsertPosition             ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USceneDataStore::AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition )
{
	static UFunction* pFnAddField = NULL;

	if ( ! pFnAddField )
		pFnAddField = UObject::FindObject< UFunction > ( "Function Engine.SceneDataStore.AddField" );

	USceneDataStore_execAddField_Parms AddField_Parms;
	memcpy ( &AddField_Parms.FieldName, &FieldName, 0x8 );
	AddField_Parms.FieldType = FieldType;
	AddField_Parms.bPersistent = bPersistent;

	this->ProcessEvent ( pFnAddField, &AddField_Parms, NULL );

	if ( out_InsertPosition )
		*out_InsertPosition = AddField_Parms.out_InsertPosition;

	return AddField_Parms.ReturnValue;
};

// Function Engine.UIDataStore_SessionSettings.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_SessionSettings::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_SessionSettings.NotifyGameSessionEnded" );

	UUIDataStore_SessionSettings_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore_SessionSettings.ClearDataProviders
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UUIDataStore_SessionSettings::ClearDataProviders ( )
{
	static UFunction* pFnClearDataProviders = NULL;

	if ( ! pFnClearDataProviders )
		pFnClearDataProviders = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_SessionSettings.ClearDataProviders" );

	UUIDataStore_SessionSettings_execClearDataProviders_Parms ClearDataProviders_Parms;

	this->ProcessEvent ( pFnClearDataProviders, &ClearDataProviders_Parms, NULL );
};

// Function Engine.SessionSettingsProvider.CleanupDataProvider
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USessionSettingsProvider::CleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = UObject::FindObject< UFunction > ( "Function Engine.SessionSettingsProvider.CleanupDataProvider" );

	USessionSettingsProvider_execCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.SessionSettingsProvider.IsValidDataSourceClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PotentialDataSourceClass       ( CPF_Parm )

bool USessionSettingsProvider::eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass )
{
	static UFunction* pFnIsValidDataSourceClass = NULL;

	if ( ! pFnIsValidDataSourceClass )
		pFnIsValidDataSourceClass = UObject::FindObject< UFunction > ( "Function Engine.SessionSettingsProvider.IsValidDataSourceClass" );

	USessionSettingsProvider_eventIsValidDataSourceClass_Parms IsValidDataSourceClass_Parms;
	IsValidDataSourceClass_Parms.PotentialDataSourceClass = PotentialDataSourceClass;

	this->ProcessEvent ( pFnIsValidDataSourceClass, &IsValidDataSourceClass_Parms, NULL );

	return IsValidDataSourceClass_Parms.ReturnValue;
};

// Function Engine.SessionSettingsProvider.ProviderClientUnbound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UClass*                  DataSourceClass                ( CPF_Parm )

void USessionSettingsProvider::eventProviderClientUnbound ( class UClass* DataSourceClass )
{
	static UFunction* pFnProviderClientUnbound = NULL;

	if ( ! pFnProviderClientUnbound )
		pFnProviderClientUnbound = UObject::FindObject< UFunction > ( "Function Engine.SessionSettingsProvider.ProviderClientUnbound" );

	USessionSettingsProvider_eventProviderClientUnbound_Parms ProviderClientUnbound_Parms;
	ProviderClientUnbound_Parms.DataSourceClass = DataSourceClass;

	this->ProcessEvent ( pFnProviderClientUnbound, &ProviderClientUnbound_Parms, NULL );
};

// Function Engine.SessionSettingsProvider.ProviderClientBound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UClass*                  DataSourceClass                ( CPF_Parm )

void USessionSettingsProvider::eventProviderClientBound ( class UClass* DataSourceClass )
{
	static UFunction* pFnProviderClientBound = NULL;

	if ( ! pFnProviderClientBound )
		pFnProviderClientBound = UObject::FindObject< UFunction > ( "Function Engine.SessionSettingsProvider.ProviderClientBound" );

	USessionSettingsProvider_eventProviderClientBound_Parms ProviderClientBound_Parms;
	ProviderClientBound_Parms.DataSourceClass = DataSourceClass;

	this->ProcessEvent ( pFnProviderClientBound, &ProviderClientBound_Parms, NULL );
};

// Function Engine.SessionSettingsProvider.UnbindProviderClient
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USessionSettingsProvider::UnbindProviderClient ( )
{
	static UFunction* pFnUnbindProviderClient = NULL;

	if ( ! pFnUnbindProviderClient )
		pFnUnbindProviderClient = UObject::FindObject< UFunction > ( "Function Engine.SessionSettingsProvider.UnbindProviderClient" );

	USessionSettingsProvider_execUnbindProviderClient_Parms UnbindProviderClient_Parms;

	pFnUnbindProviderClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnbindProviderClient, &UnbindProviderClient_Parms, NULL );

	pFnUnbindProviderClient->FunctionFlags |= 0x400;

	return UnbindProviderClient_Parms.ReturnValue;
};

// Function Engine.SessionSettingsProvider.BindProviderClient
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DataSourceClass                ( CPF_Parm )

bool USessionSettingsProvider::BindProviderClient ( class UClass* DataSourceClass )
{
	static UFunction* pFnBindProviderClient = NULL;

	if ( ! pFnBindProviderClient )
		pFnBindProviderClient = UObject::FindObject< UFunction > ( "Function Engine.SessionSettingsProvider.BindProviderClient" );

	USessionSettingsProvider_execBindProviderClient_Parms BindProviderClient_Parms;
	BindProviderClient_Parms.DataSourceClass = DataSourceClass;

	pFnBindProviderClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBindProviderClient, &BindProviderClient_Parms, NULL );

	pFnBindProviderClient->FunctionFlags |= 0x400;

	return BindProviderClient_Parms.ReturnValue;
};

// Function Engine.TeamDataProvider.RegeneratePlayerLists
// [0x00020002] 
// Parameters infos:
// TArray< class UPlayerDataProvider* > AllPlayers                     ( CPF_Parm | CPF_NeedCtorLink )

void UTeamDataProvider::RegeneratePlayerLists ( TArray< class UPlayerDataProvider* > AllPlayers )
{
	static UFunction* pFnRegeneratePlayerLists = NULL;

	if ( ! pFnRegeneratePlayerLists )
		pFnRegeneratePlayerLists = UObject::FindObject< UFunction > ( "Function Engine.TeamDataProvider.RegeneratePlayerLists" );

	UTeamDataProvider_execRegeneratePlayerLists_Parms RegeneratePlayerLists_Parms;
	memcpy ( &RegeneratePlayerLists_Parms.AllPlayers, &AllPlayers, 0xC );

	this->ProcessEvent ( pFnRegeneratePlayerLists, &RegeneratePlayerLists_Parms, NULL );
};

// Function Engine.UIAnimationSeq.ApplyAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIObject*               TargetWidget                   ( CPF_Parm )
// int                            TrackIndex                     ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// int                            LFI                            ( CPF_Parm )
// int                            NFI                            ( CPF_Parm )
// struct FUIAnimSeqRef           AnimRefInst                    ( CPF_Parm )

void UUIAnimationSeq::ApplyAnimation ( class UUIObject* TargetWidget, int TrackIndex, float Position, int LFI, int NFI, struct FUIAnimSeqRef AnimRefInst )
{
	static UFunction* pFnApplyAnimation = NULL;

	if ( ! pFnApplyAnimation )
		pFnApplyAnimation = UObject::FindObject< UFunction > ( "Function Engine.UIAnimationSeq.ApplyAnimation" );

	UUIAnimationSeq_execApplyAnimation_Parms ApplyAnimation_Parms;
	ApplyAnimation_Parms.TargetWidget = TargetWidget;
	ApplyAnimation_Parms.TrackIndex = TrackIndex;
	ApplyAnimation_Parms.Position = Position;
	ApplyAnimation_Parms.LFI = LFI;
	ApplyAnimation_Parms.NFI = NFI;
	memcpy ( &ApplyAnimation_Parms.AnimRefInst, &AnimRefInst, 0x2C );

	pFnApplyAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyAnimation, &ApplyAnimation_Parms, NULL );

	pFnApplyAnimation->FunctionFlags |= 0x400;
};

// Function Engine.UIButton.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIButton::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIButton.SaveSubscriberValue" );

	UUIButton_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIButton.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIButton::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIButton.ClearBoundDataStores" );

	UUIButton_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIButton.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIButton::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIButton.GetBoundDataStores" );

	UUIButton_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIButton.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIButton::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIButton.NotifyDataStoreValueUpdated" );

	UUIButton_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIButton.RefreshSubscriberValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIButton::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIButton.RefreshSubscriberValue" );

	UUIButton_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIButton.GetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIButton::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIButton.GetDataStoreBinding" );

	UUIButton_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIButton.SetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIButton::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIButton.SetDataStoreBinding" );

	UUIButton_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIButton.OnSetImage
// [0x00020002] 
// Parameters infos:
// class UcUIAction_SetImage*     Action                         ( CPF_Parm )

void UUIButton::OnSetImage ( class UcUIAction_SetImage* Action )
{
	static UFunction* pFnOnSetImage = NULL;

	if ( ! pFnOnSetImage )
		pFnOnSetImage = UObject::FindObject< UFunction > ( "Function Engine.UIButton.OnSetImage" );

	UUIButton_execOnSetImage_Parms OnSetImage_Parms;
	OnSetImage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetImage, &OnSetImage_Parms, NULL );
};

// Function Engine.UIButton.SetImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIButton::SetImage ( class USurface* NewImage )
{
	static UFunction* pFnSetImage = NULL;

	if ( ! pFnSetImage )
		pFnSetImage = UObject::FindObject< UFunction > ( "Function Engine.UIButton.SetImage" );

	UUIButton_execSetImage_Parms SetImage_Parms;
	SetImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetImage, &SetImage_Parms, NULL );
};

// Function Engine.UILabelButton.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUILabelButton::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.SaveSubscriberValue" );

	UUILabelButton_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabelButton.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUILabelButton::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.ClearBoundDataStores" );

	UUILabelButton_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUILabelButton::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.GetBoundDataStores" );

	UUILabelButton_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UILabelButton.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUILabelButton::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.NotifyDataStoreValueUpdated" );

	UUILabelButton_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.RefreshSubscriberValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUILabelButton::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.RefreshSubscriberValue" );

	UUILabelButton_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabelButton.GetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUILabelButton::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.GetDataStoreBinding" );

	UUILabelButton_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UILabelButton.SetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUILabelButton::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.SetDataStoreBinding" );

	UUILabelButton_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUILabelButton::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.SetTextAlignment" );

	UUILabelButton_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.OnGetTextValue
// [0x00020002] 
// Parameters infos:
// class UUIAction_GetTextValue*  Action                         ( CPF_Parm )

void UUILabelButton::OnGetTextValue ( class UUIAction_GetTextValue* Action )
{
	static UFunction* pFnOnGetTextValue = NULL;

	if ( ! pFnOnGetTextValue )
		pFnOnGetTextValue = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.OnGetTextValue" );

	UUILabelButton_execOnGetTextValue_Parms OnGetTextValue_Parms;
	OnGetTextValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTextValue, &OnGetTextValue_Parms, NULL );
};

// Function Engine.UILabelButton.OnSetLabelText
// [0x00020002] 
// Parameters infos:
// class UUIAction_SetLabelText*  Action                         ( CPF_Parm )

void UUILabelButton::OnSetLabelText ( class UUIAction_SetLabelText* Action )
{
	static UFunction* pFnOnSetLabelText = NULL;

	if ( ! pFnOnSetLabelText )
		pFnOnSetLabelText = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.OnSetLabelText" );

	UUILabelButton_execOnSetLabelText_Parms OnSetLabelText_Parms;
	OnSetLabelText_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetLabelText, &OnSetLabelText_Parms, NULL );
};

// Function Engine.UILabelButton.GetCaption
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUILabelButton::eventGetCaption ( )
{
	static UFunction* pFnGetCaption = NULL;

	if ( ! pFnGetCaption )
		pFnGetCaption = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.GetCaption" );

	UUILabelButton_eventGetCaption_Parms GetCaption_Parms;

	this->ProcessEvent ( pFnGetCaption, &GetCaption_Parms, NULL );

	return GetCaption_Parms.ReturnValue;
};

// Function Engine.UILabelButton.SetCaption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UUILabelButton::SetCaption ( struct FString NewText )
{
	static UFunction* pFnSetCaption = NULL;

	if ( ! pFnSetCaption )
		pFnSetCaption = UObject::FindObject< UFunction > ( "Function Engine.UILabelButton.SetCaption" );

	UUILabelButton_execSetCaption_Parms SetCaption_Parms;
	memcpy ( &SetCaption_Parms.NewText, &NewText, 0xC );

	pFnSetCaption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaption, &SetCaption_Parms, NULL );

	pFnSetCaption->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButton.GetCalloutInputProxy
// [0x00020002] 
// Parameters infos:
// class UUIEvent_CalloutButtonInputProxy* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateIfNecessary             ( CPF_OptionalParm | CPF_Parm )

class UUIEvent_CalloutButtonInputProxy* UUICalloutButton::GetCalloutInputProxy ( unsigned long bCreateIfNecessary )
{
	static UFunction* pFnGetCalloutInputProxy = NULL;

	if ( ! pFnGetCalloutInputProxy )
		pFnGetCalloutInputProxy = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.GetCalloutInputProxy" );

	UUICalloutButton_execGetCalloutInputProxy_Parms GetCalloutInputProxy_Parms;
	GetCalloutInputProxy_Parms.bCreateIfNecessary = bCreateIfNecessary;

	this->ProcessEvent ( pFnGetCalloutInputProxy, &GetCalloutInputProxy_Parms, NULL );

	return GetCalloutInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.VerifyDefaultMarkupString
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICalloutButton::VerifyDefaultMarkupString ( )
{
	static UFunction* pFnVerifyDefaultMarkupString = NULL;

	if ( ! pFnVerifyDefaultMarkupString )
		pFnVerifyDefaultMarkupString = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.VerifyDefaultMarkupString" );

	UUICalloutButton_execVerifyDefaultMarkupString_Parms VerifyDefaultMarkupString_Parms;

	this->ProcessEvent ( pFnVerifyDefaultMarkupString, &VerifyDefaultMarkupString_Parms, NULL );

	return VerifyDefaultMarkupString_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetPanelOwner
// [0x00020002] 
// Parameters infos:
// class UUICalloutButtonPanel*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUICalloutButtonPanel* UUICalloutButton::GetPanelOwner ( )
{
	static UFunction* pFnGetPanelOwner = NULL;

	if ( ! pFnGetPanelOwner )
		pFnGetPanelOwner = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.GetPanelOwner" );

	UUICalloutButton_execGetPanelOwner_Parms GetPanelOwner_Parms;

	this->ProcessEvent ( pFnGetPanelOwner, &GetPanelOwner_Parms, NULL );

	return GetPanelOwner_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUICalloutButton::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.RemovedFromParent" );

	UUICalloutButton_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UICalloutButton.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButton::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.PostInitialize" );

	UUICalloutButton_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UICalloutButton.GenerateCompleteCaptionMarkup
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   InputAlias                     ( CPF_OptionalParm | CPF_Parm )

struct FString UUICalloutButton::eventGenerateCompleteCaptionMarkup ( struct FName InputAlias )
{
	static UFunction* pFnGenerateCompleteCaptionMarkup = NULL;

	if ( ! pFnGenerateCompleteCaptionMarkup )
		pFnGenerateCompleteCaptionMarkup = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.GenerateCompleteCaptionMarkup" );

	UUICalloutButton_eventGenerateCompleteCaptionMarkup_Parms GenerateCompleteCaptionMarkup_Parms;
	memcpy ( &GenerateCompleteCaptionMarkup_Parms.InputAlias, &InputAlias, 0x8 );

	this->ProcessEvent ( pFnGenerateCompleteCaptionMarkup, &GenerateCompleteCaptionMarkup_Parms, NULL );

	return GenerateCompleteCaptionMarkup_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetCalloutMarkupString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   AlternateInputAlias            ( CPF_OptionalParm | CPF_Parm )

struct FString UUICalloutButton::eventGetCalloutMarkupString ( struct FName AlternateInputAlias )
{
	static UFunction* pFnGetCalloutMarkupString = NULL;

	if ( ! pFnGetCalloutMarkupString )
		pFnGetCalloutMarkupString = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.GetCalloutMarkupString" );

	UUICalloutButton_eventGetCalloutMarkupString_Parms GetCalloutMarkupString_Parms;
	memcpy ( &GetCalloutMarkupString_Parms.AlternateInputAlias, &AlternateInputAlias, 0x8 );

	this->ProcessEvent ( pFnGetCalloutMarkupString, &GetCalloutMarkupString_Parms, NULL );

	return GetCalloutMarkupString_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetCalloutDataStoreName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUICalloutButton::eventGetCalloutDataStoreName ( )
{
	static UFunction* pFnGetCalloutDataStoreName = NULL;

	if ( ! pFnGetCalloutDataStoreName )
		pFnGetCalloutDataStoreName = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.GetCalloutDataStoreName" );

	UUICalloutButton_eventGetCalloutDataStoreName_Parms GetCalloutDataStoreName_Parms;

	this->ProcessEvent ( pFnGetCalloutDataStoreName, &GetCalloutDataStoreName_Parms, NULL );

	return GetCalloutDataStoreName_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SetInputAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewInputAlias                  ( CPF_Parm )

bool UUICalloutButton::eventSetInputAlias ( struct FName NewInputAlias )
{
	static UFunction* pFnSetInputAlias = NULL;

	if ( ! pFnSetInputAlias )
		pFnSetInputAlias = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.SetInputAlias" );

	UUICalloutButton_eventSetInputAlias_Parms SetInputAlias_Parms;
	memcpy ( &SetInputAlias_Parms.NewInputAlias, &NewInputAlias, 0x8 );

	this->ProcessEvent ( pFnSetInputAlias, &SetInputAlias_Parms, NULL );

	return SetInputAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.OnReceivedInputKey
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUICalloutButton::OnReceivedInputKey ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnReceivedInputKey = NULL;

	if ( ! pFnOnReceivedInputKey )
		pFnOnReceivedInputKey = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.OnReceivedInputKey" );

	UUICalloutButton_execOnReceivedInputKey_Parms OnReceivedInputKey_Parms;

	pFnOnReceivedInputKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnReceivedInputKey, &OnReceivedInputKey_Parms, NULL );

	pFnOnReceivedInputKey->FunctionFlags |= 0x400;

	if ( EventParms )
		memcpy ( EventParms, &OnReceivedInputKey_Parms.EventParms, 0x20 );

	return OnReceivedInputKey_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.UnsubscribeFromInputProxy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEvent_CalloutButtonInputProxy* InputProxy                     ( CPF_Parm )

bool UUICalloutButton::UnsubscribeFromInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy )
{
	static UFunction* pFnUnsubscribeFromInputProxy = NULL;

	if ( ! pFnUnsubscribeFromInputProxy )
		pFnUnsubscribeFromInputProxy = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.UnsubscribeFromInputProxy" );

	UUICalloutButton_execUnsubscribeFromInputProxy_Parms UnsubscribeFromInputProxy_Parms;
	UnsubscribeFromInputProxy_Parms.InputProxy = InputProxy;

	pFnUnsubscribeFromInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnsubscribeFromInputProxy, &UnsubscribeFromInputProxy_Parms, NULL );

	pFnUnsubscribeFromInputProxy->FunctionFlags |= 0x400;

	return UnsubscribeFromInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SubscribeToInputProxy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEvent_CalloutButtonInputProxy* InputProxy                     ( CPF_Parm )

bool UUICalloutButton::SubscribeToInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy )
{
	static UFunction* pFnSubscribeToInputProxy = NULL;

	if ( ! pFnSubscribeToInputProxy )
		pFnSubscribeToInputProxy = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.SubscribeToInputProxy" );

	UUICalloutButton_execSubscribeToInputProxy_Parms SubscribeToInputProxy_Parms;
	SubscribeToInputProxy_Parms.InputProxy = InputProxy;

	pFnSubscribeToInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubscribeToInputProxy, &SubscribeToInputProxy_Parms, NULL );

	pFnSubscribeToInputProxy->FunctionFlags |= 0x400;

	return SubscribeToInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SetInputTag
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   NewInputAlias                  ( CPF_Parm )

void UUICalloutButton::SetInputTag ( struct FName NewInputAlias )
{
	static UFunction* pFnSetInputTag = NULL;

	if ( ! pFnSetInputTag )
		pFnSetInputTag = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.SetInputTag" );

	UUICalloutButton_execSetInputTag_Parms SetInputTag_Parms;
	memcpy ( &SetInputTag_Parms.NewInputAlias, &NewInputAlias, 0x8 );

	pFnSetInputTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputTag, &SetInputTag_Parms, NULL );

	pFnSetInputTag->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButton.GetCalloutDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore_InputAlias* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            AlternatePlayer                ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore_InputAlias* UUICalloutButton::GetCalloutDataStore ( class ULocalPlayer* AlternatePlayer )
{
	static UFunction* pFnGetCalloutDataStore = NULL;

	if ( ! pFnGetCalloutDataStore )
		pFnGetCalloutDataStore = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButton.GetCalloutDataStore" );

	UUICalloutButton_execGetCalloutDataStore_Parms GetCalloutDataStore_Parms;
	GetCalloutDataStore_Parms.AlternatePlayer = AlternatePlayer;

	pFnGetCalloutDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCalloutDataStore, &GetCalloutDataStore_Parms, NULL );

	pFnGetCalloutDataStore->FunctionFlags |= 0x400;

	return GetCalloutDataStore_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.InitializeInputProxy
// [0x00020002] 
// Parameters infos:

void UUICalloutButtonPanel::InitializeInputProxy ( )
{
	static UFunction* pFnInitializeInputProxy = NULL;

	if ( ! pFnInitializeInputProxy )
		pFnInitializeInputProxy = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.InitializeInputProxy" );

	UUICalloutButtonPanel_execInitializeInputProxy_Parms InitializeInputProxy_Parms;

	this->ProcessEvent ( pFnInitializeInputProxy, &InitializeInputProxy_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.ConfigureChildButton
// [0x00020002] 
// Parameters infos:
// class UUICalloutButton*        ChildButton                    ( CPF_Parm )

void UUICalloutButtonPanel::ConfigureChildButton ( class UUICalloutButton* ChildButton )
{
	static UFunction* pFnConfigureChildButton = NULL;

	if ( ! pFnConfigureChildButton )
		pFnConfigureChildButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.ConfigureChildButton" );

	UUICalloutButtonPanel_execConfigureChildButton_Parms ConfigureChildButton_Parms;
	ConfigureChildButton_Parms.ChildButton = ChildButton;

	this->ProcessEvent ( pFnConfigureChildButton, &ConfigureChildButton_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUICalloutButtonPanel::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.RemovedFromParent" );

	UUICalloutButtonPanel_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButtonPanel::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.PostInitialize" );

	UUICalloutButtonPanel_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.CanButtonAcceptFocus
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InputAliasTag                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventCanButtonAcceptFocus ( struct FName InputAliasTag, int PlayerIndex )
{
	static UFunction* pFnCanButtonAcceptFocus = NULL;

	if ( ! pFnCanButtonAcceptFocus )
		pFnCanButtonAcceptFocus = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.CanButtonAcceptFocus" );

	UUICalloutButtonPanel_eventCanButtonAcceptFocus_Parms CanButtonAcceptFocus_Parms;
	memcpy ( &CanButtonAcceptFocus_Parms.InputAliasTag, &InputAliasTag, 0x8 );
	CanButtonAcceptFocus_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCanButtonAcceptFocus, &CanButtonAcceptFocus_Parms, NULL );

	return CanButtonAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.ContainsButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

bool UUICalloutButtonPanel::eventContainsButton ( struct FName ButtonInputAlias )
{
	static UFunction* pFnContainsButton = NULL;

	if ( ! pFnContainsButton )
		pFnContainsButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.ContainsButton" );

	UUICalloutButtonPanel_eventContainsButton_Parms ContainsButton_Parms;
	memcpy ( &ContainsButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnContainsButton, &ContainsButton_Parms, NULL );

	return ContainsButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.FindButtonIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

int UUICalloutButtonPanel::eventFindButtonIndex ( struct FName ButtonInputAlias )
{
	static UFunction* pFnFindButtonIndex = NULL;

	if ( ! pFnFindButtonIndex )
		pFnFindButtonIndex = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.FindButtonIndex" );

	UUICalloutButtonPanel_eventFindButtonIndex_Parms FindButtonIndex_Parms;
	memcpy ( &FindButtonIndex_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnFindButtonIndex, &FindButtonIndex_Parms, NULL );

	return FindButtonIndex_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.FindButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUICalloutButton*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

class UUICalloutButton* UUICalloutButtonPanel::eventFindButton ( struct FName ButtonInputAlias )
{
	static UFunction* pFnFindButton = NULL;

	if ( ! pFnFindButton )
		pFnFindButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.FindButton" );

	UUICalloutButtonPanel_eventFindButton_Parms FindButton_Parms;
	memcpy ( &FindButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnFindButton, &FindButton_Parms, NULL );

	return FindButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.EnableButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bEnableButton                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUpdateButtonVisibility        ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventEnableButton ( struct FName ButtonInputAlias, int PlayerIndex, unsigned long bEnableButton, unsigned long bUpdateButtonVisibility )
{
	static UFunction* pFnEnableButton = NULL;

	if ( ! pFnEnableButton )
		pFnEnableButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.EnableButton" );

	UUICalloutButtonPanel_eventEnableButton_Parms EnableButton_Parms;
	memcpy ( &EnableButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	EnableButton_Parms.PlayerIndex = PlayerIndex;
	EnableButton_Parms.bEnableButton = bEnableButton;
	EnableButton_Parms.bUpdateButtonVisibility = bUpdateButtonVisibility;

	this->ProcessEvent ( pFnEnableButton, &EnableButton_Parms, NULL );

	return EnableButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.ShowButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// unsigned long                  bShowButton                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventShowButton ( struct FName ButtonInputAlias, unsigned long bShowButton )
{
	static UFunction* pFnShowButton = NULL;

	if ( ! pFnShowButton )
		pFnShowButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.ShowButton" );

	UUICalloutButtonPanel_eventShowButton_Parms ShowButton_Parms;
	memcpy ( &ShowButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	ShowButton_Parms.bShowButton = bShowButton;

	this->ProcessEvent ( pFnShowButton, &ShowButton_Parms, NULL );

	return ShowButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonCallback
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FScriptDelegate         NewClickHandler                ( CPF_Parm | CPF_NeedCtorLink )

bool UUICalloutButtonPanel::eventSetButtonCallback ( struct FName ButtonInputAlias, struct FScriptDelegate NewClickHandler )
{
	static UFunction* pFnSetButtonCallback = NULL;

	if ( ! pFnSetButtonCallback )
		pFnSetButtonCallback = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.SetButtonCallback" );

	UUICalloutButtonPanel_eventSetButtonCallback_Parms SetButtonCallback_Parms;
	memcpy ( &SetButtonCallback_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonCallback_Parms.NewClickHandler, &NewClickHandler, 0xC );

	this->ProcessEvent ( pFnSetButtonCallback, &SetButtonCallback_Parms, NULL );

	return SetButtonCallback_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonInputAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FName                   NewButtonInputAlias            ( CPF_Parm | CPF_CoerceParm )

bool UUICalloutButtonPanel::eventSetButtonInputAlias ( struct FName ButtonInputAlias, struct FName NewButtonInputAlias )
{
	static UFunction* pFnSetButtonInputAlias = NULL;

	if ( ! pFnSetButtonInputAlias )
		pFnSetButtonInputAlias = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.SetButtonInputAlias" );

	UUICalloutButtonPanel_eventSetButtonInputAlias_Parms SetButtonInputAlias_Parms;
	memcpy ( &SetButtonInputAlias_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonInputAlias_Parms.NewButtonInputAlias, &NewButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnSetButtonInputAlias, &SetButtonInputAlias_Parms, NULL );

	return SetButtonInputAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonCaption
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FString                 NewButtonCaption               ( CPF_Parm | CPF_NeedCtorLink )

bool UUICalloutButtonPanel::eventSetButtonCaption ( struct FName ButtonInputAlias, struct FString NewButtonCaption )
{
	static UFunction* pFnSetButtonCaption = NULL;

	if ( ! pFnSetButtonCaption )
		pFnSetButtonCaption = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.SetButtonCaption" );

	UUICalloutButtonPanel_eventSetButtonCaption_Parms SetButtonCaption_Parms;
	memcpy ( &SetButtonCaption_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonCaption_Parms.NewButtonCaption, &NewButtonCaption, 0xC );

	this->ProcessEvent ( pFnSetButtonCaption, &SetButtonCaption_Parms, NULL );

	return SetButtonCaption_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveButtonByAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

bool UUICalloutButtonPanel::eventRemoveButtonByAlias ( struct FName ButtonInputAlias )
{
	static UFunction* pFnRemoveButtonByAlias = NULL;

	if ( ! pFnRemoveButtonByAlias )
		pFnRemoveButtonByAlias = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.RemoveButtonByAlias" );

	UUICalloutButtonPanel_eventRemoveButtonByAlias_Parms RemoveButtonByAlias_Parms;
	memcpy ( &RemoveButtonByAlias_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnRemoveButtonByAlias, &RemoveButtonByAlias_Parms, NULL );

	return RemoveButtonByAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        ButtonToRemove                 ( CPF_Parm )

bool UUICalloutButtonPanel::eventRemoveButton ( class UUICalloutButton* ButtonToRemove )
{
	static UFunction* pFnRemoveButton = NULL;

	if ( ! pFnRemoveButton )
		pFnRemoveButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.RemoveButton" );

	UUICalloutButtonPanel_eventRemoveButton_Parms RemoveButton_Parms;
	RemoveButton_Parms.ButtonToRemove = ButtonToRemove;

	this->ProcessEvent ( pFnRemoveButton, &RemoveButton_Parms, NULL );

	return RemoveButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.InsertButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        NewButton                      ( CPF_Parm )

int UUICalloutButtonPanel::eventInsertButton ( class UUICalloutButton* NewButton )
{
	static UFunction* pFnInsertButton = NULL;

	if ( ! pFnInsertButton )
		pFnInsertButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.InsertButton" );

	UUICalloutButtonPanel_eventInsertButton_Parms InsertButton_Parms;
	InsertButton_Parms.NewButton = NewButton;

	this->ProcessEvent ( pFnInsertButton, &InsertButton_Parms, NULL );

	return InsertButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RequestButtonDockingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediately                   ( CPF_OptionalParm | CPF_Parm )

void UUICalloutButtonPanel::RequestButtonDockingUpdate ( unsigned long bImmediately )
{
	static UFunction* pFnRequestButtonDockingUpdate = NULL;

	if ( ! pFnRequestButtonDockingUpdate )
		pFnRequestButtonDockingUpdate = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.RequestButtonDockingUpdate" );

	UUICalloutButtonPanel_execRequestButtonDockingUpdate_Parms RequestButtonDockingUpdate_Parms;
	RequestButtonDockingUpdate_Parms.bImmediately = bImmediately;

	pFnRequestButtonDockingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestButtonDockingUpdate, &RequestButtonDockingUpdate_Parms, NULL );

	pFnRequestButtonDockingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButtonPanel.FindBestInsertionIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        ButtonToInsert                 ( CPF_Parm )
// unsigned long                  bSearchChildrenArray           ( CPF_OptionalParm | CPF_Parm )

int UUICalloutButtonPanel::FindBestInsertionIndex ( class UUICalloutButton* ButtonToInsert, unsigned long bSearchChildrenArray )
{
	static UFunction* pFnFindBestInsertionIndex = NULL;

	if ( ! pFnFindBestInsertionIndex )
		pFnFindBestInsertionIndex = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.FindBestInsertionIndex" );

	UUICalloutButtonPanel_execFindBestInsertionIndex_Parms FindBestInsertionIndex_Parms;
	FindBestInsertionIndex_Parms.ButtonToInsert = ButtonToInsert;
	FindBestInsertionIndex_Parms.bSearchChildrenArray = bSearchChildrenArray;

	pFnFindBestInsertionIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBestInsertionIndex, &FindBestInsertionIndex_Parms, NULL );

	pFnFindBestInsertionIndex->FunctionFlags |= 0x400;

	return FindBestInsertionIndex_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.GetCalloutInputProxy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIEvent_CalloutButtonInputProxy* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateIfNecessary             ( CPF_OptionalParm | CPF_Parm )

class UUIEvent_CalloutButtonInputProxy* UUICalloutButtonPanel::GetCalloutInputProxy ( unsigned long bCreateIfNecessary )
{
	static UFunction* pFnGetCalloutInputProxy = NULL;

	if ( ! pFnGetCalloutInputProxy )
		pFnGetCalloutInputProxy = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.GetCalloutInputProxy" );

	UUICalloutButtonPanel_execGetCalloutInputProxy_Parms GetCalloutInputProxy_Parms;
	GetCalloutInputProxy_Parms.bCreateIfNecessary = bCreateIfNecessary;

	pFnGetCalloutInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCalloutInputProxy, &GetCalloutInputProxy_Parms, NULL );

	pFnGetCalloutInputProxy->FunctionFlags |= 0x400;

	return GetCalloutInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.CreateCalloutButton
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUICalloutButton*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FName                   ButtonName                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInsertChild                   ( CPF_OptionalParm | CPF_Parm )

class UUICalloutButton* UUICalloutButtonPanel::CreateCalloutButton ( struct FName ButtonInputAlias, struct FName ButtonName, unsigned long bInsertChild )
{
	static UFunction* pFnCreateCalloutButton = NULL;

	if ( ! pFnCreateCalloutButton )
		pFnCreateCalloutButton = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.CreateCalloutButton" );

	UUICalloutButtonPanel_execCreateCalloutButton_Parms CreateCalloutButton_Parms;
	memcpy ( &CreateCalloutButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &CreateCalloutButton_Parms.ButtonName, &ButtonName, 0x8 );
	CreateCalloutButton_Parms.bInsertChild = bInsertChild;

	pFnCreateCalloutButton->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateCalloutButton, &CreateCalloutButton_Parms, NULL );

	pFnCreateCalloutButton->FunctionFlags |= 0x400;

	return CreateCalloutButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.GetAvailableCalloutButtonAliases
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FName >         AvailableAliases               ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUICalloutButtonPanel::GetAvailableCalloutButtonAliases ( class ULocalPlayer* PlayerOwner, TArray< struct FName >* AvailableAliases )
{
	static UFunction* pFnGetAvailableCalloutButtonAliases = NULL;

	if ( ! pFnGetAvailableCalloutButtonAliases )
		pFnGetAvailableCalloutButtonAliases = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.GetAvailableCalloutButtonAliases" );

	UUICalloutButtonPanel_execGetAvailableCalloutButtonAliases_Parms GetAvailableCalloutButtonAliases_Parms;
	GetAvailableCalloutButtonAliases_Parms.PlayerOwner = PlayerOwner;

	pFnGetAvailableCalloutButtonAliases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableCalloutButtonAliases, &GetAvailableCalloutButtonAliases_Parms, NULL );

	pFnGetAvailableCalloutButtonAliases->FunctionFlags |= 0x400;

	if ( AvailableAliases )
		memcpy ( AvailableAliases, &GetAvailableCalloutButtonAliases_Parms.AvailableAliases, 0xC );
};

// Function Engine.UICalloutButtonPanel.RemovedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUICalloutButtonPanel::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.RemovedChild" );

	UUICalloutButtonPanel_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUICalloutButtonPanel::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.AddedChild" );

	UUICalloutButtonPanel_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.SynchronizeInputAliases
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButtonPanel::eventSynchronizeInputAliases ( )
{
	static UFunction* pFnSynchronizeInputAliases = NULL;

	if ( ! pFnSynchronizeInputAliases )
		pFnSynchronizeInputAliases = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.SynchronizeInputAliases" );

	UUICalloutButtonPanel_eventSynchronizeInputAliases_Parms SynchronizeInputAliases_Parms;

	this->ProcessEvent ( pFnSynchronizeInputAliases, &SynchronizeInputAliases_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.PopulateCalloutButtonArray
// [0x00020002] 
// Parameters infos:

void UUICalloutButtonPanel::PopulateCalloutButtonArray ( )
{
	static UFunction* pFnPopulateCalloutButtonArray = NULL;

	if ( ! pFnPopulateCalloutButtonArray )
		pFnPopulateCalloutButtonArray = UObject::FindObject< UFunction > ( "Function Engine.UICalloutButtonPanel.PopulateCalloutButtonArray" );

	UUICalloutButtonPanel_execPopulateCalloutButtonArray_Parms PopulateCalloutButtonArray_Parms;

	this->ProcessEvent ( pFnPopulateCalloutButtonArray, &PopulateCalloutButtonArray_Parms, NULL );
};

// Function Engine.UICheckbox.OnSetBoolValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIAction_SetBoolValue*  Action                         ( CPF_Parm )

void UUICheckbox::OnSetBoolValue ( class UUIAction_SetBoolValue* Action )
{
	static UFunction* pFnOnSetBoolValue = NULL;

	if ( ! pFnOnSetBoolValue )
		pFnOnSetBoolValue = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.OnSetBoolValue" );

	UUICheckbox_execOnSetBoolValue_Parms OnSetBoolValue_Parms;
	OnSetBoolValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetBoolValue, &OnSetBoolValue_Parms, NULL );
};

// Function Engine.UICheckbox.SetValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldBeChecked               ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUICheckbox::SetValue ( unsigned long bShouldBeChecked, int PlayerIndex )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.SetValue" );

	UUICheckbox_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.bShouldBeChecked = bShouldBeChecked;
	SetValue_Parms.PlayerIndex = PlayerIndex;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UICheckbox.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUICheckbox::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.SaveSubscriberValue" );

	UUICheckbox_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UICheckbox.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUICheckbox::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.ClearBoundDataStores" );

	UUICheckbox_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UICheckbox.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUICheckbox::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.GetBoundDataStores" );

	UUICheckbox_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UICheckbox.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUICheckbox::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.NotifyDataStoreValueUpdated" );

	UUICheckbox_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UICheckbox.RefreshSubscriberValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUICheckbox::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.RefreshSubscriberValue" );

	UUICheckbox_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UICheckbox.GetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUICheckbox::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.GetDataStoreBinding" );

	UUICheckbox_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UICheckbox.SetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUICheckbox::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.SetDataStoreBinding" );

	UUICheckbox_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UICheckbox.IsChecked
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICheckbox::IsChecked ( )
{
	static UFunction* pFnIsChecked = NULL;

	if ( ! pFnIsChecked )
		pFnIsChecked = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.IsChecked" );

	UUICheckbox_execIsChecked_Parms IsChecked_Parms;

	this->ProcessEvent ( pFnIsChecked, &IsChecked_Parms, NULL );

	return IsChecked_Parms.ReturnValue;
};

// Function Engine.UICheckbox.SetCheckImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUICheckbox::SetCheckImage ( class USurface* NewImage )
{
	static UFunction* pFnSetCheckImage = NULL;

	if ( ! pFnSetCheckImage )
		pFnSetCheckImage = UObject::FindObject< UFunction > ( "Function Engine.UICheckbox.SetCheckImage" );

	UUICheckbox_execSetCheckImage_Parms SetCheckImage_Parms;
	SetCheckImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetCheckImage, &SetCheckImage_Parms, NULL );
};

// Function Engine.UIComboBox.OnGetTextValue
// [0x00020002] 
// Parameters infos:
// class UUIAction_GetTextValue*  Action                         ( CPF_Parm )

void UUIComboBox::OnGetTextValue ( class UUIAction_GetTextValue* Action )
{
	static UFunction* pFnOnGetTextValue = NULL;

	if ( ! pFnOnGetTextValue )
		pFnOnGetTextValue = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.OnGetTextValue" );

	UUIComboBox_execOnGetTextValue_Parms OnGetTextValue_Parms;
	OnGetTextValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTextValue, &OnGetTextValue_Parms, NULL );
};

// Function Engine.UIComboBox.ListItemSelected
// [0x00020002] 
// Parameters infos:
// class UUIList*                 Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIComboBox::ListItemSelected ( class UUIList* Sender, int PlayerIndex )
{
	static UFunction* pFnListItemSelected = NULL;

	if ( ! pFnListItemSelected )
		pFnListItemSelected = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.ListItemSelected" );

	UUIComboBox_execListItemSelected_Parms ListItemSelected_Parms;
	ListItemSelected_Parms.Sender = Sender;
	ListItemSelected_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnListItemSelected, &ListItemSelected_Parms, NULL );
};

// Function Engine.UIComboBox.SelectedItemChanged
// [0x00020002] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComboBox::SelectedItemChanged ( class UUIObject* Sender, int PlayerIndex )
{
	static UFunction* pFnSelectedItemChanged = NULL;

	if ( ! pFnSelectedItemChanged )
		pFnSelectedItemChanged = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.SelectedItemChanged" );

	UUIComboBox_execSelectedItemChanged_Parms SelectedItemChanged_Parms;
	SelectedItemChanged_Parms.Sender = Sender;
	SelectedItemChanged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSelectedItemChanged, &SelectedItemChanged_Parms, NULL );
};

// Function Engine.UIComboBox.EditboxTextChanged
// [0x00020002] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComboBox::EditboxTextChanged ( class UUIObject* Sender, int PlayerIndex )
{
	static UFunction* pFnEditboxTextChanged = NULL;

	if ( ! pFnEditboxTextChanged )
		pFnEditboxTextChanged = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.EditboxTextChanged" );

	UUIComboBox_execEditboxTextChanged_Parms EditboxTextChanged_Parms;
	EditboxTextChanged_Parms.Sender = Sender;
	EditboxTextChanged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnEditboxTextChanged, &EditboxTextChanged_Parms, NULL );
};

// Function Engine.UIComboBox.ShowListClickHandler
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIComboBox::ShowListClickHandler ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnShowListClickHandler = NULL;

	if ( ! pFnShowListClickHandler )
		pFnShowListClickHandler = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.ShowListClickHandler" );

	UUIComboBox_execShowListClickHandler_Parms ShowListClickHandler_Parms;
	ShowListClickHandler_Parms.EventObject = EventObject;
	ShowListClickHandler_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnShowListClickHandler, &ShowListClickHandler_Parms, NULL );

	return ShowListClickHandler_Parms.ReturnValue;
};

// Function Engine.UIComboBox.ButtonPressed
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComboBox::ButtonPressed ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnButtonPressed = NULL;

	if ( ! pFnButtonPressed )
		pFnButtonPressed = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.ButtonPressed" );

	UUIComboBox_execButtonPressed_Parms ButtonPressed_Parms;
	ButtonPressed_Parms.EventObject = EventObject;
	ButtonPressed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnButtonPressed, &ButtonPressed_Parms, NULL );
};

// Function Engine.UIComboBox.EditboxPressed
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComboBox::EditboxPressed ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnEditboxPressed = NULL;

	if ( ! pFnEditboxPressed )
		pFnEditboxPressed = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.EditboxPressed" );

	UUIComboBox_execEditboxPressed_Parms EditboxPressed_Parms;
	EditboxPressed_Parms.EventObject = EventObject;
	EditboxPressed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnEditboxPressed, &EditboxPressed_Parms, NULL );
};

// Function Engine.UIComboBox.SetListDocking
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDockToButton                  ( CPF_Parm )

void UUIComboBox::SetListDocking ( unsigned long bDockToButton )
{
	static UFunction* pFnSetListDocking = NULL;

	if ( ! pFnSetListDocking )
		pFnSetListDocking = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.SetListDocking" );

	UUIComboBox_execSetListDocking_Parms SetListDocking_Parms;
	SetListDocking_Parms.bDockToButton = bDockToButton;

	this->ProcessEvent ( pFnSetListDocking, &SetListDocking_Parms, NULL );
};

// Function Engine.UIComboBox.IsListDockedToButton
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIComboBox::IsListDockedToButton ( )
{
	static UFunction* pFnIsListDockedToButton = NULL;

	if ( ! pFnIsListDockedToButton )
		pFnIsListDockedToButton = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.IsListDockedToButton" );

	UUIComboBox_execIsListDockedToButton_Parms IsListDockedToButton_Parms;

	this->ProcessEvent ( pFnIsListDockedToButton, &IsListDockedToButton_Parms, NULL );

	return IsListDockedToButton_Parms.ReturnValue;
};

// Function Engine.UIComboBox.SetEditboxText
// [0x00020002] 
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bListItemsOnly                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipNotification              ( CPF_OptionalParm | CPF_Parm )

void UUIComboBox::SetEditboxText ( struct FString NewText, int PlayerIndex, unsigned long bListItemsOnly, unsigned long bSkipNotification )
{
	static UFunction* pFnSetEditboxText = NULL;

	if ( ! pFnSetEditboxText )
		pFnSetEditboxText = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.SetEditboxText" );

	UUIComboBox_execSetEditboxText_Parms SetEditboxText_Parms;
	memcpy ( &SetEditboxText_Parms.NewText, &NewText, 0xC );
	SetEditboxText_Parms.PlayerIndex = PlayerIndex;
	SetEditboxText_Parms.bListItemsOnly = bListItemsOnly;
	SetEditboxText_Parms.bSkipNotification = bSkipNotification;

	this->ProcessEvent ( pFnSetEditboxText, &SetEditboxText_Parms, NULL );
};

// Function Engine.UIComboBox.HideList
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIComboBox::eventHideList ( int PlayerIndex )
{
	static UFunction* pFnHideList = NULL;

	if ( ! pFnHideList )
		pFnHideList = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.HideList" );

	UUIComboBox_eventHideList_Parms HideList_Parms;
	HideList_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnHideList, &HideList_Parms, NULL );
};

// Function Engine.UIComboBox.ShowList
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIComboBox::eventShowList ( int PlayerIndex )
{
	static UFunction* pFnShowList = NULL;

	if ( ! pFnShowList )
		pFnShowList = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.ShowList" );

	UUIComboBox_eventShowList_Parms ShowList_Parms;
	ShowList_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnShowList, &ShowList_Parms, NULL );
};

// Function Engine.UIComboBox.SetVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIComboBox::SetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.SetVisibility" );

	UUIComboBox_execSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bIsVisible = bIsVisible;

	pFnSetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );

	pFnSetVisibility->FunctionFlags |= 0x400;
};

// Function Engine.UIComboBox.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIComboBox::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.PostInitialize" );

	UUIComboBox_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIComboBox.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIComboBox::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.SaveSubscriberValue" );

	UUIComboBox_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIComboBox.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIComboBox::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.ClearBoundDataStores" );

	UUIComboBox_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIComboBox.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIComboBox::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.GetBoundDataStores" );

	UUIComboBox_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIComboBox.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIComboBox::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.NotifyDataStoreValueUpdated" );

	UUIComboBox_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIComboBox.RefreshSubscriberValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIComboBox::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.RefreshSubscriberValue" );

	UUIComboBox_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIComboBox.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIComboBox::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.GetDataStoreBinding" );

	UUIComboBox_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIComboBox.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIComboBox::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.SetDataStoreBinding" );

	UUIComboBox_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIComboBox.CreateCustomComboList
// [0x00120000] 
// Parameters infos:
// class UUIList*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIComboBox*             ListOwner                      ( CPF_Parm )

class UUIList* UUIComboBox::CreateCustomComboList ( class UUIComboBox* ListOwner )
{
	static UFunction* pFnCreateCustomComboList = NULL;

	if ( ! pFnCreateCustomComboList )
		pFnCreateCustomComboList = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.CreateCustomComboList" );

	UUIComboBox_execCreateCustomComboList_Parms CreateCustomComboList_Parms;
	CreateCustomComboList_Parms.ListOwner = ListOwner;

	this->ProcessEvent ( pFnCreateCustomComboList, &CreateCustomComboList_Parms, NULL );

	return CreateCustomComboList_Parms.ReturnValue;
};

// Function Engine.UIComboBox.CreateCustomComboButton
// [0x00120000] 
// Parameters infos:
// class UUIToggleButton*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIComboBox*             ButtonOwner                    ( CPF_Parm )

class UUIToggleButton* UUIComboBox::CreateCustomComboButton ( class UUIComboBox* ButtonOwner )
{
	static UFunction* pFnCreateCustomComboButton = NULL;

	if ( ! pFnCreateCustomComboButton )
		pFnCreateCustomComboButton = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.CreateCustomComboButton" );

	UUIComboBox_execCreateCustomComboButton_Parms CreateCustomComboButton_Parms;
	CreateCustomComboButton_Parms.ButtonOwner = ButtonOwner;

	this->ProcessEvent ( pFnCreateCustomComboButton, &CreateCustomComboButton_Parms, NULL );

	return CreateCustomComboButton_Parms.ReturnValue;
};

// Function Engine.UIComboBox.CreateCustomComboEditbox
// [0x00120000] 
// Parameters infos:
// class UUIEditBox*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIComboBox*             EditboxOwner                   ( CPF_Parm )

class UUIEditBox* UUIComboBox::CreateCustomComboEditbox ( class UUIComboBox* EditboxOwner )
{
	static UFunction* pFnCreateCustomComboEditbox = NULL;

	if ( ! pFnCreateCustomComboEditbox )
		pFnCreateCustomComboEditbox = UObject::FindObject< UFunction > ( "Function Engine.UIComboBox.CreateCustomComboEditbox" );

	UUIComboBox_execCreateCustomComboEditbox_Parms CreateCustomComboEditbox_Parms;
	CreateCustomComboEditbox_Parms.EditboxOwner = EditboxOwner;

	this->ProcessEvent ( pFnCreateCustomComboEditbox, &CreateCustomComboEditbox_Parms, NULL );

	return CreateCustomComboEditbox_Parms.ReturnValue;
};

// Function Engine.UIList.OnChildRepositioned
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UUIList::OnChildRepositioned ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnChildRepositioned = NULL;

	if ( ! pFnOnChildRepositioned )
		pFnOnChildRepositioned = UObject::FindObject< UFunction > ( "Function Engine.UIList.OnChildRepositioned" );

	UUIList_execOnChildRepositioned_Parms OnChildRepositioned_Parms;
	OnChildRepositioned_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnChildRepositioned, &OnChildRepositioned_Parms, NULL );
};

// Function Engine.UIList.OnStateChanged
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                NewlyActiveState               ( CPF_Parm )
// class UUIState*                PreviouslyActiveState          ( CPF_OptionalParm | CPF_Parm )

void UUIList::OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState )
{
	static UFunction* pFnOnStateChanged = NULL;

	if ( ! pFnOnStateChanged )
		pFnOnStateChanged = UObject::FindObject< UFunction > ( "Function Engine.UIList.OnStateChanged" );

	UUIList_execOnStateChanged_Parms OnStateChanged_Parms;
	OnStateChanged_Parms.Sender = Sender;
	OnStateChanged_Parms.PlayerIndex = PlayerIndex;
	OnStateChanged_Parms.NewlyActiveState = NewlyActiveState;
	OnStateChanged_Parms.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent ( pFnOnStateChanged, &OnStateChanged_Parms, NULL );
};

// Function Engine.UIList.ClickedScrollZone
// [0x00020002] 
// Parameters infos:
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionPerc                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIList::ClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex )
{
	static UFunction* pFnClickedScrollZone = NULL;

	if ( ! pFnClickedScrollZone )
		pFnClickedScrollZone = UObject::FindObject< UFunction > ( "Function Engine.UIList.ClickedScrollZone" );

	UUIList_execClickedScrollZone_Parms ClickedScrollZone_Parms;
	ClickedScrollZone_Parms.Sender = Sender;
	ClickedScrollZone_Parms.PositionPerc = PositionPerc;
	ClickedScrollZone_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnClickedScrollZone, &ClickedScrollZone_Parms, NULL );
};

// Function Engine.UIList.ShouldRenderColumnHeaders
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::ShouldRenderColumnHeaders ( )
{
	static UFunction* pFnShouldRenderColumnHeaders = NULL;

	if ( ! pFnShouldRenderColumnHeaders )
		pFnShouldRenderColumnHeaders = UObject::FindObject< UFunction > ( "Function Engine.UIList.ShouldRenderColumnHeaders" );

	UUIList_execShouldRenderColumnHeaders_Parms ShouldRenderColumnHeaders_Parms;

	this->ProcessEvent ( pFnShouldRenderColumnHeaders, &ShouldRenderColumnHeaders_Parms, NULL );

	return ShouldRenderColumnHeaders_Parms.ReturnValue;
};

// Function Engine.UIList.EnableColumnHeaderRendering
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShouldRenderColHeaders        ( CPF_OptionalParm | CPF_Parm )

void UUIList::EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders )
{
	static UFunction* pFnEnableColumnHeaderRendering = NULL;

	if ( ! pFnEnableColumnHeaderRendering )
		pFnEnableColumnHeaderRendering = UObject::FindObject< UFunction > ( "Function Engine.UIList.EnableColumnHeaderRendering" );

	UUIList_execEnableColumnHeaderRendering_Parms EnableColumnHeaderRendering_Parms;
	EnableColumnHeaderRendering_Parms.bShouldRenderColHeaders = bShouldRenderColHeaders;

	this->ProcessEvent ( pFnEnableColumnHeaderRendering, &EnableColumnHeaderRendering_Parms, NULL );
};

// Function Engine.UIList.IsValueChangeNotificationEnabled
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::eventIsValueChangeNotificationEnabled ( )
{
	static UFunction* pFnIsValueChangeNotificationEnabled = NULL;

	if ( ! pFnIsValueChangeNotificationEnabled )
		pFnIsValueChangeNotificationEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIList.IsValueChangeNotificationEnabled" );

	UUIList_eventIsValueChangeNotificationEnabled_Parms IsValueChangeNotificationEnabled_Parms;

	this->ProcessEvent ( pFnIsValueChangeNotificationEnabled, &IsValueChangeNotificationEnabled_Parms, NULL );

	return IsValueChangeNotificationEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.DisableValueChangeNotification
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventDisableValueChangeNotification ( )
{
	static UFunction* pFnDisableValueChangeNotification = NULL;

	if ( ! pFnDisableValueChangeNotification )
		pFnDisableValueChangeNotification = UObject::FindObject< UFunction > ( "Function Engine.UIList.DisableValueChangeNotification" );

	UUIList_eventDisableValueChangeNotification_Parms DisableValueChangeNotification_Parms;

	this->ProcessEvent ( pFnDisableValueChangeNotification, &DisableValueChangeNotification_Parms, NULL );
};

// Function Engine.UIList.EnableValueChangeNotification
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventEnableValueChangeNotification ( )
{
	static UFunction* pFnEnableValueChangeNotification = NULL;

	if ( ! pFnEnableValueChangeNotification )
		pFnEnableValueChangeNotification = UObject::FindObject< UFunction > ( "Function Engine.UIList.EnableValueChangeNotification" );

	UUIList_eventEnableValueChangeNotification_Parms EnableValueChangeNotification_Parms;

	this->ProcessEvent ( pFnEnableValueChangeNotification, &EnableValueChangeNotification_Parms, NULL );
};

// Function Engine.UIList.IsSetIndexEnabled
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::eventIsSetIndexEnabled ( )
{
	static UFunction* pFnIsSetIndexEnabled = NULL;

	if ( ! pFnIsSetIndexEnabled )
		pFnIsSetIndexEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIList.IsSetIndexEnabled" );

	UUIList_eventIsSetIndexEnabled_Parms IsSetIndexEnabled_Parms;

	this->ProcessEvent ( pFnIsSetIndexEnabled, &IsSetIndexEnabled_Parms, NULL );

	return IsSetIndexEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.DisableSetIndex
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventDisableSetIndex ( )
{
	static UFunction* pFnDisableSetIndex = NULL;

	if ( ! pFnDisableSetIndex )
		pFnDisableSetIndex = UObject::FindObject< UFunction > ( "Function Engine.UIList.DisableSetIndex" );

	UUIList_eventDisableSetIndex_Parms DisableSetIndex_Parms;

	this->ProcessEvent ( pFnDisableSetIndex, &DisableSetIndex_Parms, NULL );
};

// Function Engine.UIList.EnableSetIndex
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventEnableSetIndex ( )
{
	static UFunction* pFnEnableSetIndex = NULL;

	if ( ! pFnEnableSetIndex )
		pFnEnableSetIndex = UObject::FindObject< UFunction > ( "Function Engine.UIList.EnableSetIndex" );

	UUIList_eventEnableSetIndex_Parms EnableSetIndex_Parms;

	this->ProcessEvent ( pFnEnableSetIndex, &EnableSetIndex_Parms, NULL );
};

// Function Engine.UIList.DecrementAllMutexes
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  bDispatchUpdates               ( CPF_OptionalParm | CPF_Parm )

void UUIList::eventDecrementAllMutexes ( unsigned long bDispatchUpdates )
{
	static UFunction* pFnDecrementAllMutexes = NULL;

	if ( ! pFnDecrementAllMutexes )
		pFnDecrementAllMutexes = UObject::FindObject< UFunction > ( "Function Engine.UIList.DecrementAllMutexes" );

	UUIList_eventDecrementAllMutexes_Parms DecrementAllMutexes_Parms;
	DecrementAllMutexes_Parms.bDispatchUpdates = bDispatchUpdates;

	this->ProcessEvent ( pFnDecrementAllMutexes, &DecrementAllMutexes_Parms, NULL );
};

// Function Engine.UIList.IncrementAllMutexes
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventIncrementAllMutexes ( )
{
	static UFunction* pFnIncrementAllMutexes = NULL;

	if ( ! pFnIncrementAllMutexes )
		pFnIncrementAllMutexes = UObject::FindObject< UFunction > ( "Function Engine.UIList.IncrementAllMutexes" );

	UUIList_eventIncrementAllMutexes_Parms IncrementAllMutexes_Parms;

	this->ProcessEvent ( pFnIncrementAllMutexes, &IncrementAllMutexes_Parms, NULL );
};

// Function Engine.UIList.AllMutexesDisabled
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::eventAllMutexesDisabled ( )
{
	static UFunction* pFnAllMutexesDisabled = NULL;

	if ( ! pFnAllMutexesDisabled )
		pFnAllMutexesDisabled = UObject::FindObject< UFunction > ( "Function Engine.UIList.AllMutexesDisabled" );

	UUIList_eventAllMutexesDisabled_Parms AllMutexesDisabled_Parms;

	this->ProcessEvent ( pFnAllMutexesDisabled, &AllMutexesDisabled_Parms, NULL );

	return AllMutexesDisabled_Parms.ReturnValue;
};

// Function Engine.UIList.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIList::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UIList.PostInitialize" );

	UUIList_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIList.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIList::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.UIList.Initialized" );

	UUIList_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIList.OnGetTextValue
// [0x00020002] 
// Parameters infos:
// class UUIAction_GetTextValue*  Action                         ( CPF_Parm )

void UUIList::OnGetTextValue ( class UUIAction_GetTextValue* Action )
{
	static UFunction* pFnOnGetTextValue = NULL;

	if ( ! pFnOnGetTextValue )
		pFnOnGetTextValue = UObject::FindObject< UFunction > ( "Function Engine.UIList.OnGetTextValue" );

	UUIList_execOnGetTextValue_Parms OnGetTextValue_Parms;
	OnGetTextValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTextValue, &OnGetTextValue_Parms, NULL );
};

// Function Engine.UIList.OnSetListIndex
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// class UUIAction_SetListIndex*  Action                         ( CPF_Parm )

void UUIList::OnSetListIndex ( class UUIAction_SetListIndex* Action )
{
	static UFunction* pFnOnSetListIndex = NULL;

	if ( ! pFnOnSetListIndex )
		pFnOnSetListIndex = UObject::FindObject< UFunction > ( "Function Engine.UIList.OnSetListIndex" );

	UUIList_execOnSetListIndex_Parms OnSetListIndex_Parms;
	OnSetListIndex_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetListIndex, &OnSetListIndex_Parms, NULL );
};

// Function Engine.UIList.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIList::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIList.SaveSubscriberValue" );

	UUIList_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIList.IsElementAutoSizingEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::IsElementAutoSizingEnabled ( )
{
	static UFunction* pFnIsElementAutoSizingEnabled = NULL;

	if ( ! pFnIsElementAutoSizingEnabled )
		pFnIsElementAutoSizingEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIList.IsElementAutoSizingEnabled" );

	UUIList_execIsElementAutoSizingEnabled_Parms IsElementAutoSizingEnabled_Parms;

	pFnIsElementAutoSizingEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsElementAutoSizingEnabled, &IsElementAutoSizingEnabled_Parms, NULL );

	pFnIsElementAutoSizingEnabled->FunctionFlags |= 0x400;

	return IsElementAutoSizingEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIList::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIList.ClearBoundDataStores" );

	UUIList_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIList.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIList::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetBoundDataStores" );

	UUIList_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIList.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIList::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIList.NotifyDataStoreValueUpdated" );

	UUIList_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIList.RefreshSubscriberValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIList::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIList.RefreshSubscriberValue" );

	UUIList_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIList.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIList::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetDataStoreBinding" );

	UUIList_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIList.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIList::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIList.SetDataStoreBinding" );

	UUIList_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIList.IsHotTrackingEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::IsHotTrackingEnabled ( )
{
	static UFunction* pFnIsHotTrackingEnabled = NULL;

	if ( ! pFnIsHotTrackingEnabled )
		pFnIsHotTrackingEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIList.IsHotTrackingEnabled" );

	UUIList_execIsHotTrackingEnabled_Parms IsHotTrackingEnabled_Parms;

	pFnIsHotTrackingEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHotTrackingEnabled, &IsHotTrackingEnabled_Parms, NULL );

	pFnIsHotTrackingEnabled->FunctionFlags |= 0x400;

	return IsHotTrackingEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.SetHotTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldUpdateItemUnderCursor   ( CPF_Parm )

void UUIList::SetHotTracking ( unsigned long bShouldUpdateItemUnderCursor )
{
	static UFunction* pFnSetHotTracking = NULL;

	if ( ! pFnSetHotTracking )
		pFnSetHotTracking = UObject::FindObject< UFunction > ( "Function Engine.UIList.SetHotTracking" );

	UUIList_execSetHotTracking_Parms SetHotTracking_Parms;
	SetHotTracking_Parms.bShouldUpdateItemUnderCursor = bShouldUpdateItemUnderCursor;

	pFnSetHotTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHotTracking, &SetHotTracking_Parms, NULL );

	pFnSetHotTracking->FunctionFlags |= 0x400;
};

// Function Engine.UIList.CanSelectElement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

bool UUIList::CanSelectElement ( int ElementIndex )
{
	static UFunction* pFnCanSelectElement = NULL;

	if ( ! pFnCanSelectElement )
		pFnCanSelectElement = UObject::FindObject< UFunction > ( "Function Engine.UIList.CanSelectElement" );

	UUIList_execCanSelectElement_Parms CanSelectElement_Parms;
	CanSelectElement_Parms.ElementIndex = ElementIndex;

	pFnCanSelectElement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSelectElement, &CanSelectElement_Parms, NULL );

	pFnCanSelectElement->FunctionFlags |= 0x400;

	return CanSelectElement_Parms.ReturnValue;
};

// Function Engine.UIList.IsElementEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

bool UUIList::IsElementEnabled ( int ElementIndex )
{
	static UFunction* pFnIsElementEnabled = NULL;

	if ( ! pFnIsElementEnabled )
		pFnIsElementEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIList.IsElementEnabled" );

	UUIList_execIsElementEnabled_Parms IsElementEnabled_Parms;
	IsElementEnabled_Parms.ElementIndex = ElementIndex;

	pFnIsElementEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsElementEnabled, &IsElementEnabled_Parms, NULL );

	pFnIsElementEnabled->FunctionFlags |= 0x400;

	return IsElementEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.SetTopIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewTopIndex                    ( CPF_Parm )
// unsigned long                  bClampValue                    ( CPF_OptionalParm | CPF_Parm )

bool UUIList::SetTopIndex ( int NewTopIndex, unsigned long bClampValue )
{
	static UFunction* pFnSetTopIndex = NULL;

	if ( ! pFnSetTopIndex )
		pFnSetTopIndex = UObject::FindObject< UFunction > ( "Function Engine.UIList.SetTopIndex" );

	UUIList_execSetTopIndex_Parms SetTopIndex_Parms;
	SetTopIndex_Parms.NewTopIndex = NewTopIndex;
	SetTopIndex_Parms.bClampValue = bClampValue;

	pFnSetTopIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTopIndex, &SetTopIndex_Parms, NULL );

	pFnSetTopIndex->FunctionFlags |= 0x400;

	return SetTopIndex_Parms.ReturnValue;
};

// Function Engine.UIList.SetIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewIndex                       ( CPF_Parm )
// unsigned long                  bClampValue                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipNotification              ( CPF_OptionalParm | CPF_Parm )

bool UUIList::SetIndex ( int NewIndex, unsigned long bClampValue, unsigned long bSkipNotification )
{
	static UFunction* pFnSetIndex = NULL;

	if ( ! pFnSetIndex )
		pFnSetIndex = UObject::FindObject< UFunction > ( "Function Engine.UIList.SetIndex" );

	UUIList_execSetIndex_Parms SetIndex_Parms;
	SetIndex_Parms.NewIndex = NewIndex;
	SetIndex_Parms.bClampValue = bClampValue;
	SetIndex_Parms.bSkipNotification = bSkipNotification;

	pFnSetIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIndex, &SetIndex_Parms, NULL );

	pFnSetIndex->FunctionFlags |= 0x400;

	return SetIndex_Parms.ReturnValue;
};

// Function Engine.UIList.FindItemIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ItemValue                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            CellIndex                      ( CPF_OptionalParm | CPF_Parm )

int UUIList::FindItemIndex ( struct FString ItemValue, int CellIndex )
{
	static UFunction* pFnFindItemIndex = NULL;

	if ( ! pFnFindItemIndex )
		pFnFindItemIndex = UObject::FindObject< UFunction > ( "Function Engine.UIList.FindItemIndex" );

	UUIList_execFindItemIndex_Parms FindItemIndex_Parms;
	memcpy ( &FindItemIndex_Parms.ItemValue, &ItemValue, 0xC );
	FindItemIndex_Parms.CellIndex = CellIndex;

	pFnFindItemIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindItemIndex, &FindItemIndex_Parms, NULL );

	pFnFindItemIndex->FunctionFlags |= 0x400;

	return FindItemIndex_Parms.ReturnValue;
};

// Function Engine.UIList.GetElementValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ElementIndex                   ( CPF_Parm )
// int                            CellIndex                      ( CPF_OptionalParm | CPF_Parm )

struct FString UUIList::GetElementValue ( int ElementIndex, int CellIndex )
{
	static UFunction* pFnGetElementValue = NULL;

	if ( ! pFnGetElementValue )
		pFnGetElementValue = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetElementValue" );

	UUIList_execGetElementValue_Parms GetElementValue_Parms;
	GetElementValue_Parms.ElementIndex = ElementIndex;
	GetElementValue_Parms.CellIndex = CellIndex;

	pFnGetElementValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetElementValue, &GetElementValue_Parms, NULL );

	pFnGetElementValue->FunctionFlags |= 0x400;

	return GetElementValue_Parms.ReturnValue;
};

// Function Engine.UIList.GetCurrentItem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetCurrentItem ( )
{
	static UFunction* pFnGetCurrentItem = NULL;

	if ( ! pFnGetCurrentItem )
		pFnGetCurrentItem = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetCurrentItem" );

	UUIList_execGetCurrentItem_Parms GetCurrentItem_Parms;

	pFnGetCurrentItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentItem, &GetCurrentItem_Parms, NULL );

	pFnGetCurrentItem->FunctionFlags |= 0x400;

	return GetCurrentItem_Parms.ReturnValue;
};

// Function Engine.UIList.SelectElement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ElementIndex                   ( CPF_Parm )
// unsigned long                  bSelected                      ( CPF_OptionalParm | CPF_Parm )

void UUIList::SelectElement ( int ElementIndex, unsigned long bSelected )
{
	static UFunction* pFnSelectElement = NULL;

	if ( ! pFnSelectElement )
		pFnSelectElement = UObject::FindObject< UFunction > ( "Function Engine.UIList.SelectElement" );

	UUIList_execSelectElement_Parms SelectElement_Parms;
	SelectElement_Parms.ElementIndex = ElementIndex;
	SelectElement_Parms.bSelected = bSelected;

	pFnSelectElement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectElement, &SelectElement_Parms, NULL );

	pFnSelectElement->FunctionFlags |= 0x400;
};

// Function Engine.UIList.GetSelectedItems
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< int >                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< int > UUIList::GetSelectedItems ( )
{
	static UFunction* pFnGetSelectedItems = NULL;

	if ( ! pFnGetSelectedItems )
		pFnGetSelectedItems = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetSelectedItems" );

	UUIList_execGetSelectedItems_Parms GetSelectedItems_Parms;

	pFnGetSelectedItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedItems, &GetSelectedItems_Parms, NULL );

	pFnGetSelectedItems->FunctionFlags |= 0x400;

	return GetSelectedItems_Parms.ReturnValue;
};

// Function Engine.UIList.GetResizeColumn
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCellHitDetectionInfo   ClickedCell                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

int UUIList::GetResizeColumn ( struct FCellHitDetectionInfo* ClickedCell )
{
	static UFunction* pFnGetResizeColumn = NULL;

	if ( ! pFnGetResizeColumn )
		pFnGetResizeColumn = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetResizeColumn" );

	UUIList_execGetResizeColumn_Parms GetResizeColumn_Parms;

	pFnGetResizeColumn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResizeColumn, &GetResizeColumn_Parms, NULL );

	pFnGetResizeColumn->FunctionFlags |= 0x400;

	if ( ClickedCell )
		memcpy ( ClickedCell, &GetResizeColumn_Parms.ClickedCell, 0x14 );

	return GetResizeColumn_Parms.ReturnValue;
};

// Function Engine.UIList.CalculateIndexFromCursorLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireValidIndex             ( CPF_OptionalParm | CPF_Parm )

int UUIList::CalculateIndexFromCursorLocation ( unsigned long bRequireValidIndex )
{
	static UFunction* pFnCalculateIndexFromCursorLocation = NULL;

	if ( ! pFnCalculateIndexFromCursorLocation )
		pFnCalculateIndexFromCursorLocation = UObject::FindObject< UFunction > ( "Function Engine.UIList.CalculateIndexFromCursorLocation" );

	UUIList_execCalculateIndexFromCursorLocation_Parms CalculateIndexFromCursorLocation_Parms;
	CalculateIndexFromCursorLocation_Parms.bRequireValidIndex = bRequireValidIndex;

	pFnCalculateIndexFromCursorLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateIndexFromCursorLocation, &CalculateIndexFromCursorLocation_Parms, NULL );

	pFnCalculateIndexFromCursorLocation->FunctionFlags |= 0x400;

	return CalculateIndexFromCursorLocation_Parms.ReturnValue;
};

// Function Engine.UIList.GetClientRegion
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bColHeader                     ( CPF_OptionalParm | CPF_Parm )

struct FVector2D UUIList::GetClientRegion ( unsigned long bColHeader )
{
	static UFunction* pFnGetClientRegion = NULL;

	if ( ! pFnGetClientRegion )
		pFnGetClientRegion = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetClientRegion" );

	UUIList_execGetClientRegion_Parms GetClientRegion_Parms;
	GetClientRegion_Parms.bColHeader = bColHeader;

	pFnGetClientRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClientRegion, &GetClientRegion_Parms, NULL );

	pFnGetClientRegion->FunctionFlags |= 0x400;

	return GetClientRegion_Parms.ReturnValue;
};

// Function Engine.UIList.GetRowHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            RowIndex                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bColHeader                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )

float UUIList::GetRowHeight ( int RowIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue )
{
	static UFunction* pFnGetRowHeight = NULL;

	if ( ! pFnGetRowHeight )
		pFnGetRowHeight = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetRowHeight" );

	UUIList_execGetRowHeight_Parms GetRowHeight_Parms;
	GetRowHeight_Parms.RowIndex = RowIndex;
	GetRowHeight_Parms.bColHeader = bColHeader;
	GetRowHeight_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnGetRowHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRowHeight, &GetRowHeight_Parms, NULL );

	pFnGetRowHeight->FunctionFlags |= 0x400;

	return GetRowHeight_Parms.ReturnValue;
};

// Function Engine.UIList.GetColumnWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ColumnIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bColHeader                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )

float UUIList::GetColumnWidth ( int ColumnIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue )
{
	static UFunction* pFnGetColumnWidth = NULL;

	if ( ! pFnGetColumnWidth )
		pFnGetColumnWidth = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetColumnWidth" );

	UUIList_execGetColumnWidth_Parms GetColumnWidth_Parms;
	GetColumnWidth_Parms.ColumnIndex = ColumnIndex;
	GetColumnWidth_Parms.bColHeader = bColHeader;
	GetColumnWidth_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnGetColumnWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColumnWidth, &GetColumnWidth_Parms, NULL );

	pFnGetColumnWidth->FunctionFlags |= 0x400;

	return GetColumnWidth_Parms.ReturnValue;
};

// Function Engine.UIList.SetRowCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewRowCount                    ( CPF_Parm )

void UUIList::SetRowCount ( int NewRowCount )
{
	static UFunction* pFnSetRowCount = NULL;

	if ( ! pFnSetRowCount )
		pFnSetRowCount = UObject::FindObject< UFunction > ( "Function Engine.UIList.SetRowCount" );

	UUIList_execSetRowCount_Parms SetRowCount_Parms;
	SetRowCount_Parms.NewRowCount = NewRowCount;

	pFnSetRowCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRowCount, &SetRowCount_Parms, NULL );

	pFnSetRowCount->FunctionFlags |= 0x400;
};

// Function Engine.UIList.SetColumnCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewColumnCount                 ( CPF_Parm )

void UUIList::SetColumnCount ( int NewColumnCount )
{
	static UFunction* pFnSetColumnCount = NULL;

	if ( ! pFnSetColumnCount )
		pFnSetColumnCount = UObject::FindObject< UFunction > ( "Function Engine.UIList.SetColumnCount" );

	UUIList_execSetColumnCount_Parms SetColumnCount_Parms;
	SetColumnCount_Parms.NewColumnCount = NewColumnCount;

	pFnSetColumnCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColumnCount, &SetColumnCount_Parms, NULL );

	pFnSetColumnCount->FunctionFlags |= 0x400;
};

// Function Engine.UIList.GetTotalColumnCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetTotalColumnCount ( )
{
	static UFunction* pFnGetTotalColumnCount = NULL;

	if ( ! pFnGetTotalColumnCount )
		pFnGetTotalColumnCount = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetTotalColumnCount" );

	UUIList_execGetTotalColumnCount_Parms GetTotalColumnCount_Parms;

	pFnGetTotalColumnCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalColumnCount, &GetTotalColumnCount_Parms, NULL );

	pFnGetTotalColumnCount->FunctionFlags |= 0x400;

	return GetTotalColumnCount_Parms.ReturnValue;
};

// Function Engine.UIList.GetTotalRowCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetTotalRowCount ( )
{
	static UFunction* pFnGetTotalRowCount = NULL;

	if ( ! pFnGetTotalRowCount )
		pFnGetTotalRowCount = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetTotalRowCount" );

	UUIList_execGetTotalRowCount_Parms GetTotalRowCount_Parms;

	pFnGetTotalRowCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalRowCount, &GetTotalRowCount_Parms, NULL );

	pFnGetTotalRowCount->FunctionFlags |= 0x400;

	return GetTotalRowCount_Parms.ReturnValue;
};

// Function Engine.UIList.GetMaxNumVisibleColumns
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetMaxNumVisibleColumns ( )
{
	static UFunction* pFnGetMaxNumVisibleColumns = NULL;

	if ( ! pFnGetMaxNumVisibleColumns )
		pFnGetMaxNumVisibleColumns = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetMaxNumVisibleColumns" );

	UUIList_execGetMaxNumVisibleColumns_Parms GetMaxNumVisibleColumns_Parms;

	pFnGetMaxNumVisibleColumns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxNumVisibleColumns, &GetMaxNumVisibleColumns_Parms, NULL );

	pFnGetMaxNumVisibleColumns->FunctionFlags |= 0x400;

	return GetMaxNumVisibleColumns_Parms.ReturnValue;
};

// Function Engine.UIList.GetMaxNumVisibleRows
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetMaxNumVisibleRows ( )
{
	static UFunction* pFnGetMaxNumVisibleRows = NULL;

	if ( ! pFnGetMaxNumVisibleRows )
		pFnGetMaxNumVisibleRows = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetMaxNumVisibleRows" );

	UUIList_execGetMaxNumVisibleRows_Parms GetMaxNumVisibleRows_Parms;

	pFnGetMaxNumVisibleRows->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxNumVisibleRows, &GetMaxNumVisibleRows_Parms, NULL );

	pFnGetMaxNumVisibleRows->FunctionFlags |= 0x400;

	return GetMaxNumVisibleRows_Parms.ReturnValue;
};

// Function Engine.UIList.GetMaxVisibleElementCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetMaxVisibleElementCount ( )
{
	static UFunction* pFnGetMaxVisibleElementCount = NULL;

	if ( ! pFnGetMaxVisibleElementCount )
		pFnGetMaxVisibleElementCount = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetMaxVisibleElementCount" );

	UUIList_execGetMaxVisibleElementCount_Parms GetMaxVisibleElementCount_Parms;

	pFnGetMaxVisibleElementCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxVisibleElementCount, &GetMaxVisibleElementCount_Parms, NULL );

	pFnGetMaxVisibleElementCount->FunctionFlags |= 0x400;

	return GetMaxVisibleElementCount_Parms.ReturnValue;
};

// Function Engine.UIList.GetItemCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetItemCount ( )
{
	static UFunction* pFnGetItemCount = NULL;

	if ( ! pFnGetItemCount )
		pFnGetItemCount = UObject::FindObject< UFunction > ( "Function Engine.UIList.GetItemCount" );

	UUIList_execGetItemCount_Parms GetItemCount_Parms;

	pFnGetItemCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetItemCount, &GetItemCount_Parms, NULL );

	pFnGetItemCount->FunctionFlags |= 0x400;

	return GetItemCount_Parms.ReturnValue;
};

// Function Engine.UIList.RemoveElement
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementToRemove                ( CPF_Parm )

int UUIList::RemoveElement ( int ElementToRemove )
{
	static UFunction* pFnRemoveElement = NULL;

	if ( ! pFnRemoveElement )
		pFnRemoveElement = UObject::FindObject< UFunction > ( "Function Engine.UIList.RemoveElement" );

	UUIList_execRemoveElement_Parms RemoveElement_Parms;
	RemoveElement_Parms.ElementToRemove = ElementToRemove;

	pFnRemoveElement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveElement, &RemoveElement_Parms, NULL );

	pFnRemoveElement->FunctionFlags |= 0x400;

	return RemoveElement_Parms.ReturnValue;
};

// Function Engine.UIList.ScrollVerticalPage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPageChange                    ( CPF_Parm )

bool UUIList::ScrollVerticalPage ( int nPageChange )
{
	static UFunction* pFnScrollVerticalPage = NULL;

	if ( ! pFnScrollVerticalPage )
		pFnScrollVerticalPage = UObject::FindObject< UFunction > ( "Function Engine.UIList.ScrollVerticalPage" );

	UUIList_execScrollVerticalPage_Parms ScrollVerticalPage_Parms;
	ScrollVerticalPage_Parms.nPageChange = nPageChange;

	pFnScrollVerticalPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollVerticalPage, &ScrollVerticalPage_Parms, NULL );

	pFnScrollVerticalPage->FunctionFlags |= 0x400;

	return ScrollVerticalPage_Parms.ReturnValue;
};

// Function Engine.UIList.ScrollVertical
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionChange                 ( CPF_Parm )
// unsigned long                  bPositionMaxed                 ( CPF_OptionalParm | CPF_Parm )

bool UUIList::ScrollVertical ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed )
{
	static UFunction* pFnScrollVertical = NULL;

	if ( ! pFnScrollVertical )
		pFnScrollVertical = UObject::FindObject< UFunction > ( "Function Engine.UIList.ScrollVertical" );

	UUIList_execScrollVertical_Parms ScrollVertical_Parms;
	ScrollVertical_Parms.Sender = Sender;
	ScrollVertical_Parms.PositionChange = PositionChange;
	ScrollVertical_Parms.bPositionMaxed = bPositionMaxed;

	pFnScrollVertical->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollVertical, &ScrollVertical_Parms, NULL );

	pFnScrollVertical->FunctionFlags |= 0x400;

	return ScrollVertical_Parms.ReturnValue;
};

// Function Engine.UIList.IsHoldingCtrl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIList::IsHoldingCtrl ( int ControllerId )
{
	static UFunction* pFnIsHoldingCtrl = NULL;

	if ( ! pFnIsHoldingCtrl )
		pFnIsHoldingCtrl = UObject::FindObject< UFunction > ( "Function Engine.UIList.IsHoldingCtrl" );

	UUIList_execIsHoldingCtrl_Parms IsHoldingCtrl_Parms;
	IsHoldingCtrl_Parms.ControllerId = ControllerId;

	pFnIsHoldingCtrl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingCtrl, &IsHoldingCtrl_Parms, NULL );

	pFnIsHoldingCtrl->FunctionFlags |= 0x400;

	return IsHoldingCtrl_Parms.ReturnValue;
};

// Function Engine.UIList.OnListElementsSorted
// [0x00120000] 
// Parameters infos:
// class UUIList*                 Sender                         ( CPF_Parm )

void UUIList::OnListElementsSorted ( class UUIList* Sender )
{
	static UFunction* pFnOnListElementsSorted = NULL;

	if ( ! pFnOnListElementsSorted )
		pFnOnListElementsSorted = UObject::FindObject< UFunction > ( "Function Engine.UIList.OnListElementsSorted" );

	UUIList_execOnListElementsSorted_Parms OnListElementsSorted_Parms;
	OnListElementsSorted_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnListElementsSorted, &OnListElementsSorted_Parms, NULL );
};

// Function Engine.UIList.OnSubmitSelection
// [0x00120000] 
// Parameters infos:
// class UUIList*                 Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIList::OnSubmitSelection ( class UUIList* Sender, int PlayerIndex )
{
	static UFunction* pFnOnSubmitSelection = NULL;

	if ( ! pFnOnSubmitSelection )
		pFnOnSubmitSelection = UObject::FindObject< UFunction > ( "Function Engine.UIList.OnSubmitSelection" );

	UUIList_execOnSubmitSelection_Parms OnSubmitSelection_Parms;
	OnSubmitSelection_Parms.Sender = Sender;
	OnSubmitSelection_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnSubmitSelection, &OnSubmitSelection_Parms, NULL );
};

// Function Engine.UIComp_ListPresenterBase.GetElementValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ElementIndex                   ( CPF_Parm )
// int                            CellIndex                      ( CPF_OptionalParm | CPF_Parm )

struct FString UUIComp_ListPresenterBase::GetElementValue ( int ElementIndex, int CellIndex )
{
	static UFunction* pFnGetElementValue = NULL;

	if ( ! pFnGetElementValue )
		pFnGetElementValue = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenterBase.GetElementValue" );

	UUIComp_ListPresenterBase_execGetElementValue_Parms GetElementValue_Parms;
	GetElementValue_Parms.ElementIndex = ElementIndex;
	GetElementValue_Parms.CellIndex = CellIndex;

	pFnGetElementValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetElementValue, &GetElementValue_Parms, NULL );

	pFnGetElementValue->FunctionFlags |= 0x400;

	return GetElementValue_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.EnableColumnHeaderRendering
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldRenderColHeaders        ( CPF_OptionalParm | CPF_Parm )

void UUIComp_ListPresenterBase::EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders )
{
	static UFunction* pFnEnableColumnHeaderRendering = NULL;

	if ( ! pFnEnableColumnHeaderRendering )
		pFnEnableColumnHeaderRendering = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenterBase.EnableColumnHeaderRendering" );

	UUIComp_ListPresenterBase_execEnableColumnHeaderRendering_Parms EnableColumnHeaderRendering_Parms;
	EnableColumnHeaderRendering_Parms.bShouldRenderColHeaders = bShouldRenderColHeaders;

	pFnEnableColumnHeaderRendering->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableColumnHeaderRendering, &EnableColumnHeaderRendering_Parms, NULL );

	pFnEnableColumnHeaderRendering->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_ListPresenterBase.ShouldRenderColumnHeaders
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIComp_ListPresenterBase::ShouldRenderColumnHeaders ( )
{
	static UFunction* pFnShouldRenderColumnHeaders = NULL;

	if ( ! pFnShouldRenderColumnHeaders )
		pFnShouldRenderColumnHeaders = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenterBase.ShouldRenderColumnHeaders" );

	UUIComp_ListPresenterBase_execShouldRenderColumnHeaders_Parms ShouldRenderColumnHeaders_Parms;

	pFnShouldRenderColumnHeaders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldRenderColumnHeaders, &ShouldRenderColumnHeaders_Parms, NULL );

	pFnShouldRenderColumnHeaders->FunctionFlags |= 0x400;

	return ShouldRenderColumnHeaders_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.ShouldAdjustListBounds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_ListPresenterBase::ShouldAdjustListBounds ( unsigned char Orientation )
{
	static UFunction* pFnShouldAdjustListBounds = NULL;

	if ( ! pFnShouldAdjustListBounds )
		pFnShouldAdjustListBounds = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenterBase.ShouldAdjustListBounds" );

	UUIComp_ListPresenterBase_execShouldAdjustListBounds_Parms ShouldAdjustListBounds_Parms;
	ShouldAdjustListBounds_Parms.Orientation = Orientation;

	pFnShouldAdjustListBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldAdjustListBounds, &ShouldAdjustListBounds_Parms, NULL );

	pFnShouldAdjustListBounds->FunctionFlags |= 0x400;

	return ShouldAdjustListBounds_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.CalculateAutoSizeColumnWidth
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ColIndex                       ( CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )
// float                          out_ColWidth                   ( CPF_Parm | CPF_OutParm )
// float                          out_StylePadding               ( CPF_Parm | CPF_OutParm )

void UUIComp_ListPresenterBase::CalculateAutoSizeColumnWidth ( int ColIndex, unsigned long bReturnUnformattedValue, float* out_ColWidth, float* out_StylePadding )
{
	static UFunction* pFnCalculateAutoSizeColumnWidth = NULL;

	if ( ! pFnCalculateAutoSizeColumnWidth )
		pFnCalculateAutoSizeColumnWidth = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenterBase.CalculateAutoSizeColumnWidth" );

	UUIComp_ListPresenterBase_execCalculateAutoSizeColumnWidth_Parms CalculateAutoSizeColumnWidth_Parms;
	CalculateAutoSizeColumnWidth_Parms.ColIndex = ColIndex;
	CalculateAutoSizeColumnWidth_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnCalculateAutoSizeColumnWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateAutoSizeColumnWidth, &CalculateAutoSizeColumnWidth_Parms, NULL );

	pFnCalculateAutoSizeColumnWidth->FunctionFlags |= 0x400;

	if ( out_ColWidth )
		*out_ColWidth = CalculateAutoSizeColumnWidth_Parms.out_ColWidth;

	if ( out_StylePadding )
		*out_StylePadding = CalculateAutoSizeColumnWidth_Parms.out_StylePadding;
};

// Function Engine.UIComp_ListPresenterBase.CalculateAutoSizeRowHeight
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            RowIndex                       ( CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )
// float                          out_RowHeight                  ( CPF_Parm | CPF_OutParm )
// float                          out_StylePadding               ( CPF_Parm | CPF_OutParm )

void UUIComp_ListPresenterBase::CalculateAutoSizeRowHeight ( int RowIndex, unsigned long bReturnUnformattedValue, float* out_RowHeight, float* out_StylePadding )
{
	static UFunction* pFnCalculateAutoSizeRowHeight = NULL;

	if ( ! pFnCalculateAutoSizeRowHeight )
		pFnCalculateAutoSizeRowHeight = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenterBase.CalculateAutoSizeRowHeight" );

	UUIComp_ListPresenterBase_execCalculateAutoSizeRowHeight_Parms CalculateAutoSizeRowHeight_Parms;
	CalculateAutoSizeRowHeight_Parms.RowIndex = RowIndex;
	CalculateAutoSizeRowHeight_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnCalculateAutoSizeRowHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateAutoSizeRowHeight, &CalculateAutoSizeRowHeight_Parms, NULL );

	pFnCalculateAutoSizeRowHeight->FunctionFlags |= 0x400;

	if ( out_RowHeight )
		*out_RowHeight = CalculateAutoSizeRowHeight_Parms.out_RowHeight;

	if ( out_StylePadding )
		*out_StylePadding = CalculateAutoSizeRowHeight_Parms.out_StylePadding;
};

// Function Engine.UIComp_ListPresenterBase.GetCellSchemaProvider
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIListElementCellProvider* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIListElementCellProvider* UUIComp_ListPresenterBase::GetCellSchemaProvider ( )
{
	static UFunction* pFnGetCellSchemaProvider = NULL;

	if ( ! pFnGetCellSchemaProvider )
		pFnGetCellSchemaProvider = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenterBase.GetCellSchemaProvider" );

	UUIComp_ListPresenterBase_execGetCellSchemaProvider_Parms GetCellSchemaProvider_Parms;

	pFnGetCellSchemaProvider->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCellSchemaProvider, &GetCellSchemaProvider_Parms, NULL );

	pFnGetCellSchemaProvider->FunctionFlags |= 0x400;

	return GetCellSchemaProvider_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenter.FindElementIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DataSourceIndex                ( CPF_Parm )

int UUIComp_ListPresenter::FindElementIndex ( int DataSourceIndex )
{
	static UFunction* pFnFindElementIndex = NULL;

	if ( ! pFnFindElementIndex )
		pFnFindElementIndex = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListPresenter.FindElementIndex" );

	UUIComp_ListPresenter_execFindElementIndex_Parms FindElementIndex_Parms;
	FindElementIndex_Parms.DataSourceIndex = DataSourceIndex;

	pFnFindElementIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindElementIndex, &FindElementIndex_Parms, NULL );

	pFnFindElementIndex->FunctionFlags |= 0x400;

	return FindElementIndex_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.FindMenuItemIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct FString                 ItemToFind                     ( CPF_Parm | CPF_NeedCtorLink )

int UUIContextMenu::eventFindMenuItemIndex ( class UUIObject* Widget, struct FString ItemToFind )
{
	static UFunction* pFnFindMenuItemIndex = NULL;

	if ( ! pFnFindMenuItemIndex )
		pFnFindMenuItemIndex = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.FindMenuItemIndex" );

	UUIContextMenu_eventFindMenuItemIndex_Parms FindMenuItemIndex_Parms;
	FindMenuItemIndex_Parms.Widget = Widget;
	memcpy ( &FindMenuItemIndex_Parms.ItemToFind, &ItemToFind, 0xC );

	this->ProcessEvent ( pFnFindMenuItemIndex, &FindMenuItemIndex_Parms, NULL );

	return FindMenuItemIndex_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.GetMenuItem
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// int                            IndexToGet                     ( CPF_Parm )
// struct FString                 out_MenuItem                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIContextMenu::eventGetMenuItem ( class UUIObject* Widget, int IndexToGet, struct FString* out_MenuItem )
{
	static UFunction* pFnGetMenuItem = NULL;

	if ( ! pFnGetMenuItem )
		pFnGetMenuItem = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.GetMenuItem" );

	UUIContextMenu_eventGetMenuItem_Parms GetMenuItem_Parms;
	GetMenuItem_Parms.Widget = Widget;
	GetMenuItem_Parms.IndexToGet = IndexToGet;

	this->ProcessEvent ( pFnGetMenuItem, &GetMenuItem_Parms, NULL );

	if ( out_MenuItem )
		memcpy ( out_MenuItem, &GetMenuItem_Parms.out_MenuItem, 0xC );

	return GetMenuItem_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.GetAllMenuItems
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// TArray< struct FString >       out_MenuItems                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIContextMenu::eventGetAllMenuItems ( class UUIObject* Widget, TArray< struct FString >* out_MenuItems )
{
	static UFunction* pFnGetAllMenuItems = NULL;

	if ( ! pFnGetAllMenuItems )
		pFnGetAllMenuItems = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.GetAllMenuItems" );

	UUIContextMenu_eventGetAllMenuItems_Parms GetAllMenuItems_Parms;
	GetAllMenuItems_Parms.Widget = Widget;

	this->ProcessEvent ( pFnGetAllMenuItems, &GetAllMenuItems_Parms, NULL );

	if ( out_MenuItems )
		memcpy ( out_MenuItems, &GetAllMenuItems_Parms.out_MenuItems, 0xC );

	return GetAllMenuItems_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.RemoveMenuItemAtIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// int                            IndexToRemove                  ( CPF_Parm )

bool UUIContextMenu::eventRemoveMenuItemAtIndex ( class UUIObject* Widget, int IndexToRemove )
{
	static UFunction* pFnRemoveMenuItemAtIndex = NULL;

	if ( ! pFnRemoveMenuItemAtIndex )
		pFnRemoveMenuItemAtIndex = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.RemoveMenuItemAtIndex" );

	UUIContextMenu_eventRemoveMenuItemAtIndex_Parms RemoveMenuItemAtIndex_Parms;
	RemoveMenuItemAtIndex_Parms.Widget = Widget;
	RemoveMenuItemAtIndex_Parms.IndexToRemove = IndexToRemove;

	this->ProcessEvent ( pFnRemoveMenuItemAtIndex, &RemoveMenuItemAtIndex_Parms, NULL );

	return RemoveMenuItemAtIndex_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.RemoveMenuItem
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct FString                 ItemToRemove                   ( CPF_Parm | CPF_NeedCtorLink )

bool UUIContextMenu::eventRemoveMenuItem ( class UUIObject* Widget, struct FString ItemToRemove )
{
	static UFunction* pFnRemoveMenuItem = NULL;

	if ( ! pFnRemoveMenuItem )
		pFnRemoveMenuItem = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.RemoveMenuItem" );

	UUIContextMenu_eventRemoveMenuItem_Parms RemoveMenuItem_Parms;
	RemoveMenuItem_Parms.Widget = Widget;
	memcpy ( &RemoveMenuItem_Parms.ItemToRemove, &ItemToRemove, 0xC );

	this->ProcessEvent ( pFnRemoveMenuItem, &RemoveMenuItem_Parms, NULL );

	return RemoveMenuItem_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.ClearMenuItems
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )

bool UUIContextMenu::eventClearMenuItems ( class UUIObject* Widget )
{
	static UFunction* pFnClearMenuItems = NULL;

	if ( ! pFnClearMenuItems )
		pFnClearMenuItems = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.ClearMenuItems" );

	UUIContextMenu_eventClearMenuItems_Parms ClearMenuItems_Parms;
	ClearMenuItems_Parms.Widget = Widget;

	this->ProcessEvent ( pFnClearMenuItems, &ClearMenuItems_Parms, NULL );

	return ClearMenuItems_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.InsertMenuItem
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct FString                 Item                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowDuplicates               ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::eventInsertMenuItem ( class UUIObject* Widget, struct FString Item, int InsertIndex, unsigned long bAllowDuplicates )
{
	static UFunction* pFnInsertMenuItem = NULL;

	if ( ! pFnInsertMenuItem )
		pFnInsertMenuItem = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.InsertMenuItem" );

	UUIContextMenu_eventInsertMenuItem_Parms InsertMenuItem_Parms;
	InsertMenuItem_Parms.Widget = Widget;
	memcpy ( &InsertMenuItem_Parms.Item, &Item, 0xC );
	InsertMenuItem_Parms.InsertIndex = InsertIndex;
	InsertMenuItem_Parms.bAllowDuplicates = bAllowDuplicates;

	this->ProcessEvent ( pFnInsertMenuItem, &InsertMenuItem_Parms, NULL );

	return InsertMenuItem_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.SetMenuItems
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// TArray< struct FString >       NewMenuItems                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bClearExisting                 ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::eventSetMenuItems ( class UUIObject* Widget, TArray< struct FString > NewMenuItems, unsigned long bClearExisting, int InsertIndex )
{
	static UFunction* pFnSetMenuItems = NULL;

	if ( ! pFnSetMenuItems )
		pFnSetMenuItems = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.SetMenuItems" );

	UUIContextMenu_eventSetMenuItems_Parms SetMenuItems_Parms;
	SetMenuItems_Parms.Widget = Widget;
	memcpy ( &SetMenuItems_Parms.NewMenuItems, &NewMenuItems, 0xC );
	SetMenuItems_Parms.bClearExisting = bClearExisting;
	SetMenuItems_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnSetMenuItems, &SetMenuItems_Parms, NULL );

	return SetMenuItems_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.Close
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::Close ( int PlayerIndex )
{
	static UFunction* pFnClose = NULL;

	if ( ! pFnClose )
		pFnClose = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.Close" );

	UUIContextMenu_execClose_Parms Close_Parms;
	Close_Parms.PlayerIndex = PlayerIndex;

	pFnClose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClose, &Close_Parms, NULL );

	pFnClose->FunctionFlags |= 0x400;

	return Close_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.Open
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::Open ( int PlayerIndex )
{
	static UFunction* pFnOpen = NULL;

	if ( ! pFnOpen )
		pFnOpen = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.Open" );

	UUIContextMenu_execOpen_Parms Open_Parms;
	Open_Parms.PlayerIndex = PlayerIndex;

	pFnOpen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpen, &Open_Parms, NULL );

	pFnOpen->FunctionFlags |= 0x400;

	return Open_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.IsActiveContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIContextMenu::IsActiveContextMenu ( )
{
	static UFunction* pFnIsActiveContextMenu = NULL;

	if ( ! pFnIsActiveContextMenu )
		pFnIsActiveContextMenu = UObject::FindObject< UFunction > ( "Function Engine.UIContextMenu.IsActiveContextMenu" );

	UUIContextMenu_execIsActiveContextMenu_Parms IsActiveContextMenu_Parms;

	pFnIsActiveContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActiveContextMenu, &IsActiveContextMenu_Parms, NULL );

	pFnIsActiveContextMenu->FunctionFlags |= 0x400;

	return IsActiveContextMenu_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawComponents.OnFadeComplete
// [0x00120000] 
// Parameters infos:
// class UUIComp_DrawComponents*  Sender                         ( CPF_Parm | CPF_EditInline )

void UUIComp_DrawComponents::OnFadeComplete ( class UUIComp_DrawComponents* Sender )
{
	static UFunction* pFnOnFadeComplete = NULL;

	if ( ! pFnOnFadeComplete )
		pFnOnFadeComplete = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawComponents.OnFadeComplete" );

	UUIComp_DrawComponents_execOnFadeComplete_Parms OnFadeComplete_Parms;
	OnFadeComplete_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnFadeComplete, &OnFadeComplete_Parms, NULL );
};

// Function Engine.UIComp_DrawComponents.ResetFade
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawComponents::ResetFade ( )
{
	static UFunction* pFnResetFade = NULL;

	if ( ! pFnResetFade )
		pFnResetFade = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawComponents.ResetFade" );

	UUIComp_DrawComponents_execResetFade_Parms ResetFade_Parms;

	pFnResetFade->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetFade, &ResetFade_Parms, NULL );

	pFnResetFade->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawComponents.Pulse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          MaxAlpha                       ( CPF_OptionalParm | CPF_Parm )
// float                          MinAlpha                       ( CPF_OptionalParm | CPF_Parm )
// float                          PulseRate                      ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawComponents::Pulse ( float MaxAlpha, float MinAlpha, float PulseRate )
{
	static UFunction* pFnPulse = NULL;

	if ( ! pFnPulse )
		pFnPulse = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawComponents.Pulse" );

	UUIComp_DrawComponents_execPulse_Parms Pulse_Parms;
	Pulse_Parms.MaxAlpha = MaxAlpha;
	Pulse_Parms.MinAlpha = MinAlpha;
	Pulse_Parms.PulseRate = PulseRate;

	pFnPulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPulse, &Pulse_Parms, NULL );

	pFnPulse->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawComponents.Fade
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FromAlpha                      ( CPF_Parm )
// float                          ToAlpha                        ( CPF_Parm )
// float                          TargetFadeTime                 ( CPF_Parm )

void UUIComp_DrawComponents::Fade ( float FromAlpha, float ToAlpha, float TargetFadeTime )
{
	static UFunction* pFnFade = NULL;

	if ( ! pFnFade )
		pFnFade = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawComponents.Fade" );

	UUIComp_DrawComponents_execFade_Parms Fade_Parms;
	Fade_Parms.FromAlpha = FromAlpha;
	Fade_Parms.ToAlpha = ToAlpha;
	Fade_Parms.TargetFadeTime = TargetFadeTime;

	pFnFade->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFade, &Fade_Parms, NULL );

	pFnFade->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAutoSizePadding
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NearValue                      ( CPF_Parm )
// float                          FarValue                       ( CPF_Parm )
// unsigned char                  NearScaleType                  ( CPF_Parm )
// unsigned char                  FarScaleType                   ( CPF_Parm )

void UUIComp_DrawString::eventSetAutoSizePadding ( unsigned char Orientation, float NearValue, float FarValue, unsigned char NearScaleType, unsigned char FarScaleType )
{
	static UFunction* pFnSetAutoSizePadding = NULL;

	if ( ! pFnSetAutoSizePadding )
		pFnSetAutoSizePadding = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetAutoSizePadding" );

	UUIComp_DrawString_eventSetAutoSizePadding_Parms SetAutoSizePadding_Parms;
	SetAutoSizePadding_Parms.Orientation = Orientation;
	SetAutoSizePadding_Parms.NearValue = NearValue;
	SetAutoSizePadding_Parms.FarValue = FarValue;
	SetAutoSizePadding_Parms.NearScaleType = NearScaleType;
	SetAutoSizePadding_Parms.FarScaleType = FarScaleType;

	this->ProcessEvent ( pFnSetAutoSizePadding, &SetAutoSizePadding_Parms, NULL );
};

// Function Engine.UIComp_DrawString.EnableAutoSizing
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned long                  bShouldEnable                  ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::eventEnableAutoSizing ( unsigned char Orientation, unsigned long bShouldEnable )
{
	static UFunction* pFnEnableAutoSizing = NULL;

	if ( ! pFnEnableAutoSizing )
		pFnEnableAutoSizing = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.EnableAutoSizing" );

	UUIComp_DrawString_eventEnableAutoSizing_Parms EnableAutoSizing_Parms;
	EnableAutoSizing_Parms.Orientation = Orientation;
	EnableAutoSizing_Parms.bShouldEnable = bShouldEnable;

	this->ProcessEvent ( pFnEnableAutoSizing, &EnableAutoSizing_Parms, NULL );
};

// Function Engine.UIComp_DrawString.IsAutoSizeEnabled
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_DrawString::IsAutoSizeEnabled ( unsigned char Orientation )
{
	static UFunction* pFnIsAutoSizeEnabled = NULL;

	if ( ! pFnIsAutoSizeEnabled )
		pFnIsAutoSizeEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.IsAutoSizeEnabled" );

	UUIComp_DrawString_execIsAutoSizeEnabled_Parms IsAutoSizeEnabled_Parms;
	IsAutoSizeEnabled_Parms.Orientation = Orientation;

	this->ProcessEvent ( pFnIsAutoSizeEnabled, &IsAutoSizeEnabled_Parms, NULL );

	return IsAutoSizeEnabled_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetAutoSizeExtent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          MinValue                       ( CPF_Parm )
// float                          MaxValue                       ( CPF_Parm )
// unsigned char                  MinScaleType                   ( CPF_Parm )
// unsigned char                  MaxScaleType                   ( CPF_Parm )

void UUIComp_DrawString::SetAutoSizeExtent ( unsigned char Orientation, float MinValue, float MaxValue, unsigned char MinScaleType, unsigned char MaxScaleType )
{
	static UFunction* pFnSetAutoSizeExtent = NULL;

	if ( ! pFnSetAutoSizeExtent )
		pFnSetAutoSizeExtent = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetAutoSizeExtent" );

	UUIComp_DrawString_execSetAutoSizeExtent_Parms SetAutoSizeExtent_Parms;
	SetAutoSizeExtent_Parms.Orientation = Orientation;
	SetAutoSizeExtent_Parms.MinValue = MinValue;
	SetAutoSizeExtent_Parms.MaxValue = MaxValue;
	SetAutoSizeExtent_Parms.MinScaleType = MinScaleType;
	SetAutoSizeExtent_Parms.MaxScaleType = MaxScaleType;

	pFnSetAutoSizeExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAutoSizeExtent, &SetAutoSizeExtent_Parms, NULL );

	pFnSetAutoSizeExtent->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.NotifyResolveStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIComp_DrawString::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.NotifyResolveStyle" );

	UUIComp_DrawString_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIComp_DrawString::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetStyleResolverTag" );

	UUIComp_DrawString_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIComp_DrawString::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetStyleResolverTag" );

	UUIComp_DrawString_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetFinalStringStyle
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUICombinedStyleData    FinalStyleData                 ( CPF_Parm | CPF_OutParm )

bool UUIComp_DrawString::GetFinalStringStyle ( struct FUICombinedStyleData* FinalStyleData )
{
	static UFunction* pFnGetFinalStringStyle = NULL;

	if ( ! pFnGetFinalStringStyle )
		pFnGetFinalStringStyle = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetFinalStringStyle" );

	UUIComp_DrawString_execGetFinalStringStyle_Parms GetFinalStringStyle_Parms;

	pFnGetFinalStringStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFinalStringStyle, &GetFinalStringStyle_Parms, NULL );

	pFnGetFinalStringStyle->FunctionFlags |= 0x400;

	if ( FinalStyleData )
		memcpy ( FinalStyleData, &GetFinalStringStyle_Parms.FinalStyleData, 0x90 );

	return GetFinalStringStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetAppliedStringStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Combo*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                DesiredMenuState               ( CPF_OptionalParm | CPF_Parm )

class UUIStyle_Combo* UUIComp_DrawString::GetAppliedStringStyle ( class UUIState* DesiredMenuState )
{
	static UFunction* pFnGetAppliedStringStyle = NULL;

	if ( ! pFnGetAppliedStringStyle )
		pFnGetAppliedStringStyle = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetAppliedStringStyle" );

	UUIComp_DrawString_execGetAppliedStringStyle_Parms GetAppliedStringStyle_Parms;
	GetAppliedStringStyle_Parms.DesiredMenuState = DesiredMenuState;

	pFnGetAppliedStringStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppliedStringStyle, &GetAppliedStringStyle_Parms, NULL );

	pFnGetAppliedStringStyle->FunctionFlags |= 0x400;

	return GetAppliedStringStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetWrapMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIComp_DrawString::GetWrapMode ( )
{
	static UFunction* pFnGetWrapMode = NULL;

	if ( ! pFnGetWrapMode )
		pFnGetWrapMode = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetWrapMode" );

	UUIComp_DrawString_execGetWrapMode_Parms GetWrapMode_Parms;

	pFnGetWrapMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWrapMode, &GetWrapMode_Parms, NULL );

	pFnGetWrapMode->FunctionFlags |= 0x400;

	return GetWrapMode_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.DisableCustomSpacingAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomSpacingAdjust ( )
{
	static UFunction* pFnDisableCustomSpacingAdjust = NULL;

	if ( ! pFnDisableCustomSpacingAdjust )
		pFnDisableCustomSpacingAdjust = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomSpacingAdjust" );

	UUIComp_DrawString_execDisableCustomSpacingAdjust_Parms DisableCustomSpacingAdjust_Parms;

	pFnDisableCustomSpacingAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomSpacingAdjust, &DisableCustomSpacingAdjust_Parms, NULL );

	pFnDisableCustomSpacingAdjust->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomScale ( )
{
	static UFunction* pFnDisableCustomScale = NULL;

	if ( ! pFnDisableCustomScale )
		pFnDisableCustomScale = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomScale" );

	UUIComp_DrawString_execDisableCustomScale_Parms DisableCustomScale_Parms;

	pFnDisableCustomScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomScale, &DisableCustomScale_Parms, NULL );

	pFnDisableCustomScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAutoScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAutoScaling ( )
{
	static UFunction* pFnDisableCustomAutoScaling = NULL;

	if ( ! pFnDisableCustomAutoScaling )
		pFnDisableCustomAutoScaling = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomAutoScaling" );

	UUIComp_DrawString_execDisableCustomAutoScaling_Parms DisableCustomAutoScaling_Parms;

	pFnDisableCustomAutoScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAutoScaling, &DisableCustomAutoScaling_Parms, NULL );

	pFnDisableCustomAutoScaling->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomClipAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomClipAlignment ( )
{
	static UFunction* pFnDisableCustomClipAlignment = NULL;

	if ( ! pFnDisableCustomClipAlignment )
		pFnDisableCustomClipAlignment = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomClipAlignment" );

	UUIComp_DrawString_execDisableCustomClipAlignment_Parms DisableCustomClipAlignment_Parms;

	pFnDisableCustomClipAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomClipAlignment, &DisableCustomClipAlignment_Parms, NULL );

	pFnDisableCustomClipAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomClipMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomClipMode ( )
{
	static UFunction* pFnDisableCustomClipMode = NULL;

	if ( ! pFnDisableCustomClipMode )
		pFnDisableCustomClipMode = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomClipMode" );

	UUIComp_DrawString_execDisableCustomClipMode_Parms DisableCustomClipMode_Parms;

	pFnDisableCustomClipMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomClipMode, &DisableCustomClipMode_Parms, NULL );

	pFnDisableCustomClipMode->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAlignment ( )
{
	static UFunction* pFnDisableCustomAlignment = NULL;

	if ( ! pFnDisableCustomAlignment )
		pFnDisableCustomAlignment = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomAlignment" );

	UUIComp_DrawString_execDisableCustomAlignment_Parms DisableCustomAlignment_Parms;

	pFnDisableCustomAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAlignment, &DisableCustomAlignment_Parms, NULL );

	pFnDisableCustomAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAttributes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAttributes ( )
{
	static UFunction* pFnDisableCustomAttributes = NULL;

	if ( ! pFnDisableCustomAttributes )
		pFnDisableCustomAttributes = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomAttributes" );

	UUIComp_DrawString_execDisableCustomAttributes_Parms DisableCustomAttributes_Parms;

	pFnDisableCustomAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAttributes, &DisableCustomAttributes_Parms, NULL );

	pFnDisableCustomAttributes->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomFont
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomFont ( )
{
	static UFunction* pFnDisableCustomFont = NULL;

	if ( ! pFnDisableCustomFont )
		pFnDisableCustomFont = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomFont" );

	UUIComp_DrawString_execDisableCustomFont_Parms DisableCustomFont_Parms;

	pFnDisableCustomFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomFont, &DisableCustomFont_Parms, NULL );

	pFnDisableCustomFont->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomPadding ( )
{
	static UFunction* pFnDisableCustomPadding = NULL;

	if ( ! pFnDisableCustomPadding )
		pFnDisableCustomPadding = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomPadding" );

	UUIComp_DrawString_execDisableCustomPadding_Parms DisableCustomPadding_Parms;

	pFnDisableCustomPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomPadding, &DisableCustomPadding_Parms, NULL );

	pFnDisableCustomPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomOpacity ( )
{
	static UFunction* pFnDisableCustomOpacity = NULL;

	if ( ! pFnDisableCustomOpacity )
		pFnDisableCustomOpacity = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomOpacity" );

	UUIComp_DrawString_execDisableCustomOpacity_Parms DisableCustomOpacity_Parms;

	pFnDisableCustomOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomOpacity, &DisableCustomOpacity_Parms, NULL );

	pFnDisableCustomOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomColor ( )
{
	static UFunction* pFnDisableCustomColor = NULL;

	if ( ! pFnDisableCustomColor )
		pFnDisableCustomColor = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.DisableCustomColor" );

	UUIComp_DrawString_execDisableCustomColor_Parms DisableCustomColor_Parms;

	pFnDisableCustomColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomColor, &DisableCustomColor_Parms, NULL );

	pFnDisableCustomColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSpacingAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewSpacingAdjust               ( CPF_Parm )

void UUIComp_DrawString::SetSpacingAdjust ( unsigned char Orientation, float NewSpacingAdjust )
{
	static UFunction* pFnSetSpacingAdjust = NULL;

	if ( ! pFnSetSpacingAdjust )
		pFnSetSpacingAdjust = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetSpacingAdjust" );

	UUIComp_DrawString_execSetSpacingAdjust_Parms SetSpacingAdjust_Parms;
	SetSpacingAdjust_Parms.Orientation = Orientation;
	SetSpacingAdjust_Parms.NewSpacingAdjust = NewSpacingAdjust;

	pFnSetSpacingAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSpacingAdjust, &SetSpacingAdjust_Parms, NULL );

	pFnSetSpacingAdjust->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewScale                       ( CPF_Parm )

void UUIComp_DrawString::SetScale ( unsigned char Orientation, float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetScale" );

	UUIComp_DrawString_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.Orientation = Orientation;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAutoScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewAutoScaleMode               ( CPF_Parm )
// float                          NewMinScaleValue               ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::SetAutoScaling ( unsigned char NewAutoScaleMode, float NewMinScaleValue )
{
	static UFunction* pFnSetAutoScaling = NULL;

	if ( ! pFnSetAutoScaling )
		pFnSetAutoScaling = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetAutoScaling" );

	UUIComp_DrawString_execSetAutoScaling_Parms SetAutoScaling_Parms;
	SetAutoScaling_Parms.NewAutoScaleMode = NewAutoScaleMode;
	SetAutoScaling_Parms.NewMinScaleValue = NewMinScaleValue;

	pFnSetAutoScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAutoScaling, &SetAutoScaling_Parms, NULL );

	pFnSetAutoScaling->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetClipAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewClipAlignment               ( CPF_Parm )

void UUIComp_DrawString::SetClipAlignment ( unsigned char NewClipAlignment )
{
	static UFunction* pFnSetClipAlignment = NULL;

	if ( ! pFnSetClipAlignment )
		pFnSetClipAlignment = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetClipAlignment" );

	UUIComp_DrawString_execSetClipAlignment_Parms SetClipAlignment_Parms;
	SetClipAlignment_Parms.NewClipAlignment = NewClipAlignment;

	pFnSetClipAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClipAlignment, &SetClipAlignment_Parms, NULL );

	pFnSetClipAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetWrapMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewClipMode                    ( CPF_Parm )

void UUIComp_DrawString::SetWrapMode ( unsigned char NewClipMode )
{
	static UFunction* pFnSetWrapMode = NULL;

	if ( ! pFnSetWrapMode )
		pFnSetWrapMode = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetWrapMode" );

	UUIComp_DrawString_execSetWrapMode_Parms SetWrapMode_Parms;
	SetWrapMode_Parms.NewClipMode = NewClipMode;

	pFnSetWrapMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWrapMode, &SetWrapMode_Parms, NULL );

	pFnSetWrapMode->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  NewAlignment                   ( CPF_Parm )

void UUIComp_DrawString::SetAlignment ( unsigned char Orientation, unsigned char NewAlignment )
{
	static UFunction* pFnSetAlignment = NULL;

	if ( ! pFnSetAlignment )
		pFnSetAlignment = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetAlignment" );

	UUIComp_DrawString_execSetAlignment_Parms SetAlignment_Parms;
	SetAlignment_Parms.Orientation = Orientation;
	SetAlignment_Parms.NewAlignment = NewAlignment;

	pFnSetAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAlignment, &SetAlignment_Parms, NULL );

	pFnSetAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAttributes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FUITextAttributes       NewAttributes                  ( CPF_Parm )

void UUIComp_DrawString::SetAttributes ( struct FUITextAttributes NewAttributes )
{
	static UFunction* pFnSetAttributes = NULL;

	if ( ! pFnSetAttributes )
		pFnSetAttributes = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetAttributes" );

	UUIComp_DrawString_execSetAttributes_Parms SetAttributes_Parms;
	memcpy ( &SetAttributes_Parms.NewAttributes, &NewAttributes, 0x4 );

	pFnSetAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttributes, &SetAttributes_Parms, NULL );

	pFnSetAttributes->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetFont
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   NewFont                        ( CPF_Parm )

void UUIComp_DrawString::SetFont ( class UFont* NewFont )
{
	static UFunction* pFnSetFont = NULL;

	if ( ! pFnSetFont )
		pFnSetFont = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetFont" );

	UUIComp_DrawString_execSetFont_Parms SetFont_Parms;
	SetFont_Parms.NewFont = NewFont;

	pFnSetFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFont, &SetFont_Parms, NULL );

	pFnSetFont->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          HorizontalPadding              ( CPF_Parm )
// float                          VerticalPadding                ( CPF_Parm )

void UUIComp_DrawString::SetPadding ( float HorizontalPadding, float VerticalPadding )
{
	static UFunction* pFnSetPadding = NULL;

	if ( ! pFnSetPadding )
		pFnSetPadding = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetPadding" );

	UUIComp_DrawString_execSetPadding_Parms SetPadding_Parms;
	SetPadding_Parms.HorizontalPadding = HorizontalPadding;
	SetPadding_Parms.VerticalPadding = VerticalPadding;

	pFnSetPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPadding, &SetPadding_Parms, NULL );

	pFnSetPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewOpacity                     ( CPF_Parm )

void UUIComp_DrawString::SetOpacity ( float NewOpacity )
{
	static UFunction* pFnSetOpacity = NULL;

	if ( ! pFnSetOpacity )
		pFnSetOpacity = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetOpacity" );

	UUIComp_DrawString_execSetOpacity_Parms SetOpacity_Parms;
	SetOpacity_Parms.NewOpacity = NewOpacity;

	pFnSetOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOpacity, &SetOpacity_Parms, NULL );

	pFnSetOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLinearColor            NewColor                       ( CPF_Parm )

void UUIComp_DrawString::SetColor ( struct FLinearColor NewColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetColor" );

	UUIComp_DrawString_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.NewColor, &NewColor, 0x10 );

	pFnSetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );

	pFnSetColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  NewValue                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionAlignment ( unsigned char Orientation, unsigned char NewValue )
{
	static UFunction* pFnSetSubregionAlignment = NULL;

	if ( ! pFnSetSubregionAlignment )
		pFnSetSubregionAlignment = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetSubregionAlignment" );

	UUIComp_DrawString_execSetSubregionAlignment_Parms SetSubregionAlignment_Parms;
	SetSubregionAlignment_Parms.Orientation = Orientation;
	SetSubregionAlignment_Parms.NewValue = NewValue;

	pFnSetSubregionAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionAlignment, &SetSubregionAlignment_Parms, NULL );

	pFnSetSubregionAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionOffset
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionOffset ( unsigned char Orientation, float NewValue, unsigned char EvalType )
{
	static UFunction* pFnSetSubregionOffset = NULL;

	if ( ! pFnSetSubregionOffset )
		pFnSetSubregionOffset = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetSubregionOffset" );

	UUIComp_DrawString_execSetSubregionOffset_Parms SetSubregionOffset_Parms;
	SetSubregionOffset_Parms.Orientation = Orientation;
	SetSubregionOffset_Parms.NewValue = NewValue;
	SetSubregionOffset_Parms.EvalType = EvalType;

	pFnSetSubregionOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionOffset, &SetSubregionOffset_Parms, NULL );

	pFnSetSubregionOffset->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionSize ( unsigned char Orientation, float NewValue, unsigned char EvalType )
{
	static UFunction* pFnSetSubregionSize = NULL;

	if ( ! pFnSetSubregionSize )
		pFnSetSubregionSize = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetSubregionSize" );

	UUIComp_DrawString_execSetSubregionSize_Parms SetSubregionSize_Parms;
	SetSubregionSize_Parms.Orientation = Orientation;
	SetSubregionSize_Parms.NewValue = NewValue;
	SetSubregionSize_Parms.EvalType = EvalType;

	pFnSetSubregionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionSize, &SetSubregionSize_Parms, NULL );

	pFnSetSubregionSize->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.EnableSubregion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned long                  bShouldEnable                  ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::EnableSubregion ( unsigned char Orientation, unsigned long bShouldEnable )
{
	static UFunction* pFnEnableSubregion = NULL;

	if ( ! pFnEnableSubregion )
		pFnEnableSubregion = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.EnableSubregion" );

	UUIComp_DrawString_execEnableSubregion_Parms EnableSubregion_Parms;
	EnableSubregion_Parms.Orientation = Orientation;
	EnableSubregion_Parms.bShouldEnable = bShouldEnable;

	pFnEnableSubregion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableSubregion, &EnableSubregion_Parms, NULL );

	pFnEnableSubregion->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.GetSubregionAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

unsigned char UUIComp_DrawString::GetSubregionAlignment ( unsigned char Orientation )
{
	static UFunction* pFnGetSubregionAlignment = NULL;

	if ( ! pFnGetSubregionAlignment )
		pFnGetSubregionAlignment = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetSubregionAlignment" );

	UUIComp_DrawString_execGetSubregionAlignment_Parms GetSubregionAlignment_Parms;
	GetSubregionAlignment_Parms.Orientation = Orientation;

	pFnGetSubregionAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionAlignment, &GetSubregionAlignment_Parms, NULL );

	pFnGetSubregionAlignment->FunctionFlags |= 0x400;

	return GetSubregionAlignment_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetSubregionOffset
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )

float UUIComp_DrawString::GetSubregionOffset ( unsigned char Orientation, unsigned char OutputType )
{
	static UFunction* pFnGetSubregionOffset = NULL;

	if ( ! pFnGetSubregionOffset )
		pFnGetSubregionOffset = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetSubregionOffset" );

	UUIComp_DrawString_execGetSubregionOffset_Parms GetSubregionOffset_Parms;
	GetSubregionOffset_Parms.Orientation = Orientation;
	GetSubregionOffset_Parms.OutputType = OutputType;

	pFnGetSubregionOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionOffset, &GetSubregionOffset_Parms, NULL );

	pFnGetSubregionOffset->FunctionFlags |= 0x400;

	return GetSubregionOffset_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetSubregionSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )

float UUIComp_DrawString::GetSubregionSize ( unsigned char Orientation, unsigned char OutputType )
{
	static UFunction* pFnGetSubregionSize = NULL;

	if ( ! pFnGetSubregionSize )
		pFnGetSubregionSize = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetSubregionSize" );

	UUIComp_DrawString_execGetSubregionSize_Parms GetSubregionSize_Parms;
	GetSubregionSize_Parms.Orientation = Orientation;
	GetSubregionSize_Parms.OutputType = OutputType;

	pFnGetSubregionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionSize, &GetSubregionSize_Parms, NULL );

	pFnGetSubregionSize->FunctionFlags |= 0x400;

	return GetSubregionSize_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.IsSubregionEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_DrawString::IsSubregionEnabled ( unsigned char Orientation )
{
	static UFunction* pFnIsSubregionEnabled = NULL;

	if ( ! pFnIsSubregionEnabled )
		pFnIsSubregionEnabled = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.IsSubregionEnabled" );

	UUIComp_DrawString_execIsSubregionEnabled_Parms IsSubregionEnabled_Parms;
	IsSubregionEnabled_Parms.Orientation = Orientation;

	pFnIsSubregionEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSubregionEnabled, &IsSubregionEnabled_Parms, NULL );

	pFnIsSubregionEnabled->FunctionFlags |= 0x400;

	return IsSubregionEnabled_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.RefreshValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::RefreshValue ( )
{
	static UFunction* pFnRefreshValue = NULL;

	if ( ! pFnRefreshValue )
		pFnRefreshValue = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.RefreshValue" );

	UUIComp_DrawString_execRefreshValue_Parms RefreshValue_Parms;

	pFnRefreshValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshValue, &RefreshValue_Parms, NULL );

	pFnRefreshValue->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.GetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bReturnProcessedText           ( CPF_OptionalParm | CPF_Parm )

struct FString UUIComp_DrawString::GetValue ( unsigned long bReturnProcessedText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.GetValue" );

	UUIComp_DrawString_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnProcessedText = bReturnProcessedText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIComp_DrawString::SetValue ( struct FString NewText )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawString.SetValue" );

	UUIComp_DrawString_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0xC );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.NotifyResolveStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIComp_DrawImage::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.NotifyResolveStyle" );

	UUIComp_DrawImage_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.SetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIComp_DrawImage::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.SetStyleResolverTag" );

	UUIComp_DrawImage_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.GetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIComp_DrawImage::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.GetStyleResolverTag" );

	UUIComp_DrawImage_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.GetImage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USurface*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USurface* UUIComp_DrawImage::GetImage ( )
{
	static UFunction* pFnGetImage = NULL;

	if ( ! pFnGetImage )
		pFnGetImage = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.GetImage" );

	UUIComp_DrawImage_execGetImage_Parms GetImage_Parms;

	pFnGetImage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImage, &GetImage_Parms, NULL );

	pFnGetImage->FunctionFlags |= 0x400;

	return GetImage_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.DisableCustomFormatting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomFormatting ( )
{
	static UFunction* pFnDisableCustomFormatting = NULL;

	if ( ! pFnDisableCustomFormatting )
		pFnDisableCustomFormatting = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.DisableCustomFormatting" );

	UUIComp_DrawImage_execDisableCustomFormatting_Parms DisableCustomFormatting_Parms;

	pFnDisableCustomFormatting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomFormatting, &DisableCustomFormatting_Parms, NULL );

	pFnDisableCustomFormatting->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomPadding ( )
{
	static UFunction* pFnDisableCustomPadding = NULL;

	if ( ! pFnDisableCustomPadding )
		pFnDisableCustomPadding = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.DisableCustomPadding" );

	UUIComp_DrawImage_execDisableCustomPadding_Parms DisableCustomPadding_Parms;

	pFnDisableCustomPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomPadding, &DisableCustomPadding_Parms, NULL );

	pFnDisableCustomPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomOpacity ( )
{
	static UFunction* pFnDisableCustomOpacity = NULL;

	if ( ! pFnDisableCustomOpacity )
		pFnDisableCustomOpacity = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.DisableCustomOpacity" );

	UUIComp_DrawImage_execDisableCustomOpacity_Parms DisableCustomOpacity_Parms;

	pFnDisableCustomOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomOpacity, &DisableCustomOpacity_Parms, NULL );

	pFnDisableCustomOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomColor ( )
{
	static UFunction* pFnDisableCustomColor = NULL;

	if ( ! pFnDisableCustomColor )
		pFnDisableCustomColor = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.DisableCustomColor" );

	UUIComp_DrawImage_execDisableCustomColor_Parms DisableCustomColor_Parms;

	pFnDisableCustomColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomColor, &DisableCustomColor_Parms, NULL );

	pFnDisableCustomColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomCoordinates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomCoordinates ( )
{
	static UFunction* pFnDisableCustomCoordinates = NULL;

	if ( ! pFnDisableCustomCoordinates )
		pFnDisableCustomCoordinates = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.DisableCustomCoordinates" );

	UUIComp_DrawImage_execDisableCustomCoordinates_Parms DisableCustomCoordinates_Parms;

	pFnDisableCustomCoordinates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomCoordinates, &DisableCustomCoordinates_Parms, NULL );

	pFnDisableCustomCoordinates->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetFormatting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// struct FUIImageAdjustmentData  NewFormattingData              ( CPF_Parm )

void UUIComp_DrawImage::SetFormatting ( unsigned char Orientation, struct FUIImageAdjustmentData NewFormattingData )
{
	static UFunction* pFnSetFormatting = NULL;

	if ( ! pFnSetFormatting )
		pFnSetFormatting = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.SetFormatting" );

	UUIComp_DrawImage_execSetFormatting_Parms SetFormatting_Parms;
	SetFormatting_Parms.Orientation = Orientation;
	memcpy ( &SetFormatting_Parms.NewFormattingData, &NewFormattingData, 0x10 );

	pFnSetFormatting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFormatting, &SetFormatting_Parms, NULL );

	pFnSetFormatting->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          HorizontalPadding              ( CPF_Parm )
// float                          VerticalPadding                ( CPF_Parm )

void UUIComp_DrawImage::SetPadding ( float HorizontalPadding, float VerticalPadding )
{
	static UFunction* pFnSetPadding = NULL;

	if ( ! pFnSetPadding )
		pFnSetPadding = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.SetPadding" );

	UUIComp_DrawImage_execSetPadding_Parms SetPadding_Parms;
	SetPadding_Parms.HorizontalPadding = HorizontalPadding;
	SetPadding_Parms.VerticalPadding = VerticalPadding;

	pFnSetPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPadding, &SetPadding_Parms, NULL );

	pFnSetPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewOpacity                     ( CPF_Parm )

void UUIComp_DrawImage::SetOpacity ( float NewOpacity )
{
	static UFunction* pFnSetOpacity = NULL;

	if ( ! pFnSetOpacity )
		pFnSetOpacity = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.SetOpacity" );

	UUIComp_DrawImage_execSetOpacity_Parms SetOpacity_Parms;
	SetOpacity_Parms.NewOpacity = NewOpacity;

	pFnSetOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOpacity, &SetOpacity_Parms, NULL );

	pFnSetOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLinearColor            NewColor                       ( CPF_Parm )

void UUIComp_DrawImage::SetColor ( struct FLinearColor NewColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.SetColor" );

	UUIComp_DrawImage_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.NewColor, &NewColor, 0x10 );

	pFnSetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );

	pFnSetColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetCoordinates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FTextureCoordinates     NewCoordinates                 ( CPF_Parm )

void UUIComp_DrawImage::SetCoordinates ( struct FTextureCoordinates NewCoordinates )
{
	static UFunction* pFnSetCoordinates = NULL;

	if ( ! pFnSetCoordinates )
		pFnSetCoordinates = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.SetCoordinates" );

	UUIComp_DrawImage_execSetCoordinates_Parms SetCoordinates_Parms;
	memcpy ( &SetCoordinates_Parms.NewCoordinates, &NewCoordinates, 0x10 );

	pFnSetCoordinates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCoordinates, &SetCoordinates_Parms, NULL );

	pFnSetCoordinates->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetImage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIComp_DrawImage::SetImage ( class USurface* NewImage )
{
	static UFunction* pFnSetImage = NULL;

	if ( ! pFnSetImage )
		pFnSetImage = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.SetImage" );

	UUIComp_DrawImage_execSetImage_Parms SetImage_Parms;
	SetImage_Parms.NewImage = NewImage;

	pFnSetImage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetImage, &SetImage_Parms, NULL );

	pFnSetImage->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.GetAppliedImageStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Image*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                DesiredMenuState               ( CPF_OptionalParm | CPF_Parm )

class UUIStyle_Image* UUIComp_DrawImage::GetAppliedImageStyle ( class UUIState* DesiredMenuState )
{
	static UFunction* pFnGetAppliedImageStyle = NULL;

	if ( ! pFnGetAppliedImageStyle )
		pFnGetAppliedImageStyle = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawImage.GetAppliedImageStyle" );

	UUIComp_DrawImage_execGetAppliedImageStyle_Parms GetAppliedImageStyle_Parms;
	GetAppliedImageStyle_Parms.DesiredMenuState = DesiredMenuState;

	pFnGetAppliedImageStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppliedImageStyle, &GetAppliedImageStyle_Parms, NULL );

	pFnGetAppliedImageStyle->FunctionFlags |= 0x400;

	return GetAppliedImageStyle_Parms.ReturnValue;
};

// Function Engine.UIEditBox.OnGetTextValue
// [0x00020002] 
// Parameters infos:
// class UUIAction_GetTextValue*  Action                         ( CPF_Parm )

void UUIEditBox::OnGetTextValue ( class UUIAction_GetTextValue* Action )
{
	static UFunction* pFnOnGetTextValue = NULL;

	if ( ! pFnOnGetTextValue )
		pFnOnGetTextValue = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.OnGetTextValue" );

	UUIEditBox_execOnGetTextValue_Parms OnGetTextValue_Parms;
	OnGetTextValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTextValue, &OnGetTextValue_Parms, NULL );
};

// Function Engine.UIEditBox.OnSetLabelText
// [0x00020002] 
// Parameters infos:
// class UUIAction_SetLabelText*  Action                         ( CPF_Parm )

void UUIEditBox::OnSetLabelText ( class UUIAction_SetLabelText* Action )
{
	static UFunction* pFnOnSetLabelText = NULL;

	if ( ! pFnOnSetLabelText )
		pFnOnSetLabelText = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.OnSetLabelText" );

	UUIEditBox_execOnSetLabelText_Parms OnSetLabelText_Parms;
	OnSetLabelText_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetLabelText, &OnSetLabelText_Parms, NULL );
};

// Function Engine.UIEditBox.IgnoreMarkup
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShouldIgnoreMarkup            ( CPF_Parm )

void UUIEditBox::IgnoreMarkup ( unsigned long bShouldIgnoreMarkup )
{
	static UFunction* pFnIgnoreMarkup = NULL;

	if ( ! pFnIgnoreMarkup )
		pFnIgnoreMarkup = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.IgnoreMarkup" );

	UUIEditBox_execIgnoreMarkup_Parms IgnoreMarkup_Parms;
	IgnoreMarkup_Parms.bShouldIgnoreMarkup = bShouldIgnoreMarkup;

	this->ProcessEvent ( pFnIgnoreMarkup, &IgnoreMarkup_Parms, NULL );
};

// Function Engine.UIEditBox.RefreshMaxCharacters
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIEditBox::RefreshMaxCharacters ( )
{
	static UFunction* pFnRefreshMaxCharacters = NULL;

	if ( ! pFnRefreshMaxCharacters )
		pFnRefreshMaxCharacters = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.RefreshMaxCharacters" );

	UUIEditBox_execRefreshMaxCharacters_Parms RefreshMaxCharacters_Parms;

	pFnRefreshMaxCharacters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshMaxCharacters, &RefreshMaxCharacters_Parms, NULL );

	pFnRefreshMaxCharacters->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.SetReadOnly
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShouldBeReadOnly              ( CPF_Parm )

void UUIEditBox::SetReadOnly ( unsigned long bShouldBeReadOnly )
{
	static UFunction* pFnSetReadOnly = NULL;

	if ( ! pFnSetReadOnly )
		pFnSetReadOnly = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.SetReadOnly" );

	UUIEditBox_execSetReadOnly_Parms SetReadOnly_Parms;
	SetReadOnly_Parms.bShouldBeReadOnly = bShouldBeReadOnly;

	this->ProcessEvent ( pFnSetReadOnly, &SetReadOnly_Parms, NULL );
};

// Function Engine.UIEditBox.IsReadOnly
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEditBox::IsReadOnly ( )
{
	static UFunction* pFnIsReadOnly = NULL;

	if ( ! pFnIsReadOnly )
		pFnIsReadOnly = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.IsReadOnly" );

	UUIEditBox_execIsReadOnly_Parms IsReadOnly_Parms;

	this->ProcessEvent ( pFnIsReadOnly, &IsReadOnly_Parms, NULL );

	return IsReadOnly_Parms.ReturnValue;
};

// Function Engine.UIEditBox.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIEditBox::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.Initialized" );

	UUIEditBox_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIEditBox.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEditBox::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.SaveSubscriberValue" );

	UUIEditBox_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIEditBox.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIEditBox::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.ClearBoundDataStores" );

	UUIEditBox_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIEditBox::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.GetBoundDataStores" );

	UUIEditBox_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIEditBox.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIEditBox::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.NotifyDataStoreValueUpdated" );

	UUIEditBox_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.RefreshSubscriberValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEditBox::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.RefreshSubscriberValue" );

	UUIEditBox_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIEditBox.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIEditBox::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.GetDataStoreBinding" );

	UUIEditBox_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIEditBox.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIEditBox::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.SetDataStoreBinding" );

	UUIEditBox_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.CalculateCaretPositionFromCursorLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

int UUIEditBox::CalculateCaretPositionFromCursorLocation ( int PlayerIndex )
{
	static UFunction* pFnCalculateCaretPositionFromCursorLocation = NULL;

	if ( ! pFnCalculateCaretPositionFromCursorLocation )
		pFnCalculateCaretPositionFromCursorLocation = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.CalculateCaretPositionFromCursorLocation" );

	UUIEditBox_execCalculateCaretPositionFromCursorLocation_Parms CalculateCaretPositionFromCursorLocation_Parms;
	CalculateCaretPositionFromCursorLocation_Parms.PlayerIndex = PlayerIndex;

	pFnCalculateCaretPositionFromCursorLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateCaretPositionFromCursorLocation, &CalculateCaretPositionFromCursorLocation_Parms, NULL );

	pFnCalculateCaretPositionFromCursorLocation->FunctionFlags |= 0x400;

	return CalculateCaretPositionFromCursorLocation_Parms.ReturnValue;
};

// Function Engine.UIEditBox.GetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bReturnUserText                ( CPF_OptionalParm | CPF_Parm )

struct FString UUIEditBox::GetValue ( unsigned long bReturnUserText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.GetValue" );

	UUIEditBox_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnUserText = bReturnUserText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIEditBox.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipNotification              ( CPF_OptionalParm | CPF_Parm )

void UUIEditBox::SetValue ( struct FString NewText, int PlayerIndex, unsigned long bSkipNotification )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.SetValue" );

	UUIEditBox_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0xC );
	SetValue_Parms.PlayerIndex = PlayerIndex;
	SetValue_Parms.bSkipNotification = bSkipNotification;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.SetBackgroundImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIEditBox::SetBackgroundImage ( class USurface* NewImage )
{
	static UFunction* pFnSetBackgroundImage = NULL;

	if ( ! pFnSetBackgroundImage )
		pFnSetBackgroundImage = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.SetBackgroundImage" );

	UUIEditBox_execSetBackgroundImage_Parms SetBackgroundImage_Parms;
	SetBackgroundImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBackgroundImage, &SetBackgroundImage_Parms, NULL );
};

// Function Engine.UIEditBox.OnSubmitText
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEditBox*              Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIEditBox::OnSubmitText ( class UUIEditBox* Sender, int PlayerIndex )
{
	static UFunction* pFnOnSubmitText = NULL;

	if ( ! pFnOnSubmitText )
		pFnOnSubmitText = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.OnSubmitText" );

	UUIEditBox_execOnSubmitText_Parms OnSubmitText_Parms;
	OnSubmitText_Parms.Sender = Sender;
	OnSubmitText_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnSubmitText, &OnSubmitText_Parms, NULL );

	return OnSubmitText_Parms.ReturnValue;
};

// Function Engine.UIEditBox.OnScrollBarSpaceClicked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionPerc                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIEditBox::OnScrollBarSpaceClicked ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex )
{
	static UFunction* pFnOnScrollBarSpaceClicked = NULL;

	if ( ! pFnOnScrollBarSpaceClicked )
		pFnOnScrollBarSpaceClicked = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.OnScrollBarSpaceClicked" );

	UUIEditBox_execOnScrollBarSpaceClicked_Parms OnScrollBarSpaceClicked_Parms;
	OnScrollBarSpaceClicked_Parms.Sender = Sender;
	OnScrollBarSpaceClicked_Parms.PositionPerc = PositionPerc;
	OnScrollBarSpaceClicked_Parms.PlayerIndex = PlayerIndex;

	pFnOnScrollBarSpaceClicked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollBarSpaceClicked, &OnScrollBarSpaceClicked_Parms, NULL );

	pFnOnScrollBarSpaceClicked->FunctionFlags |= 0x400;
};

// Function Engine.UIEditBox.OnScrollBarMoved
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionChange                 ( CPF_Parm )
// unsigned long                  bPositionMaxed                 ( CPF_OptionalParm | CPF_Parm )

bool UUIEditBox::OnScrollBarMoved ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed )
{
	static UFunction* pFnOnScrollBarMoved = NULL;

	if ( ! pFnOnScrollBarMoved )
		pFnOnScrollBarMoved = UObject::FindObject< UFunction > ( "Function Engine.UIEditBox.OnScrollBarMoved" );

	UUIEditBox_execOnScrollBarMoved_Parms OnScrollBarMoved_Parms;
	OnScrollBarMoved_Parms.Sender = Sender;
	OnScrollBarMoved_Parms.PositionChange = PositionChange;
	OnScrollBarMoved_Parms.bPositionMaxed = bPositionMaxed;

	pFnOnScrollBarMoved->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnScrollBarMoved, &OnScrollBarMoved_Parms, NULL );

	pFnOnScrollBarMoved->FunctionFlags |= 0x400;

	return OnScrollBarMoved_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.GetSelectedText
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUIComp_DrawStringEditbox::GetSelectedText ( )
{
	static UFunction* pFnGetSelectedText = NULL;

	if ( ! pFnGetSelectedText )
		pFnGetSelectedText = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.GetSelectedText" );

	UUIComp_DrawStringEditbox_execGetSelectedText_Parms GetSelectedText_Parms;

	pFnGetSelectedText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedText, &GetSelectedText_Parms, NULL );

	pFnGetSelectedText->FunctionFlags |= 0x400;

	return GetSelectedText_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.GetSelectionRange
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            out_StartIndex                 ( CPF_Parm | CPF_OutParm )
// int                            out_EndIndex                   ( CPF_Parm | CPF_OutParm )

bool UUIComp_DrawStringEditbox::GetSelectionRange ( int* out_StartIndex, int* out_EndIndex )
{
	static UFunction* pFnGetSelectionRange = NULL;

	if ( ! pFnGetSelectionRange )
		pFnGetSelectionRange = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.GetSelectionRange" );

	UUIComp_DrawStringEditbox_execGetSelectionRange_Parms GetSelectionRange_Parms;

	pFnGetSelectionRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectionRange, &GetSelectionRange_Parms, NULL );

	pFnGetSelectionRange->FunctionFlags |= 0x400;

	if ( out_StartIndex )
		*out_StartIndex = GetSelectionRange_Parms.out_StartIndex;

	if ( out_EndIndex )
		*out_EndIndex = GetSelectionRange_Parms.out_EndIndex;

	return GetSelectionRange_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.ClearSelection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIComp_DrawStringEditbox::ClearSelection ( )
{
	static UFunction* pFnClearSelection = NULL;

	if ( ! pFnClearSelection )
		pFnClearSelection = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.ClearSelection" );

	UUIComp_DrawStringEditbox_execClearSelection_Parms ClearSelection_Parms;

	pFnClearSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSelection, &ClearSelection_Parms, NULL );

	pFnClearSelection->FunctionFlags |= 0x400;

	return ClearSelection_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetSelectionEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            EndIndex                       ( CPF_Parm )

bool UUIComp_DrawStringEditbox::SetSelectionEnd ( int EndIndex )
{
	static UFunction* pFnSetSelectionEnd = NULL;

	if ( ! pFnSetSelectionEnd )
		pFnSetSelectionEnd = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.SetSelectionEnd" );

	UUIComp_DrawStringEditbox_execSetSelectionEnd_Parms SetSelectionEnd_Parms;
	SetSelectionEnd_Parms.EndIndex = EndIndex;

	pFnSetSelectionEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSelectionEnd, &SetSelectionEnd_Parms, NULL );

	pFnSetSelectionEnd->FunctionFlags |= 0x400;

	return SetSelectionEnd_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetSelectionStart
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartIndex                     ( CPF_Parm )

bool UUIComp_DrawStringEditbox::SetSelectionStart ( int StartIndex )
{
	static UFunction* pFnSetSelectionStart = NULL;

	if ( ! pFnSetSelectionStart )
		pFnSetSelectionStart = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.SetSelectionStart" );

	UUIComp_DrawStringEditbox_execSetSelectionStart_Parms SetSelectionStart_Parms;
	SetSelectionStart_Parms.StartIndex = StartIndex;

	pFnSetSelectionStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSelectionStart, &SetSelectionStart_Parms, NULL );

	pFnSetSelectionStart->FunctionFlags |= 0x400;

	return SetSelectionStart_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetSelectionRange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartIndex                     ( CPF_Parm )
// int                            EndIndex                       ( CPF_Parm )

bool UUIComp_DrawStringEditbox::SetSelectionRange ( int StartIndex, int EndIndex )
{
	static UFunction* pFnSetSelectionRange = NULL;

	if ( ! pFnSetSelectionRange )
		pFnSetSelectionRange = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.SetSelectionRange" );

	UUIComp_DrawStringEditbox_execSetSelectionRange_Parms SetSelectionRange_Parms;
	SetSelectionRange_Parms.StartIndex = StartIndex;
	SetSelectionRange_Parms.EndIndex = EndIndex;

	pFnSetSelectionRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSelectionRange, &SetSelectionRange_Parms, NULL );

	pFnSetSelectionRange->FunctionFlags |= 0x400;

	return SetSelectionRange_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.GetUserTextLength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIComp_DrawStringEditbox::GetUserTextLength ( )
{
	static UFunction* pFnGetUserTextLength = NULL;

	if ( ! pFnGetUserTextLength )
		pFnGetUserTextLength = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.GetUserTextLength" );

	UUIComp_DrawStringEditbox_execGetUserTextLength_Parms GetUserTextLength_Parms;

	pFnGetUserTextLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUserTextLength, &GetUserTextLength_Parms, NULL );

	pFnGetUserTextLength->FunctionFlags |= 0x400;

	return GetUserTextLength_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawStringEditbox.SetUserText
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NewValue                       ( CPF_Parm | CPF_NeedCtorLink )

bool UUIComp_DrawStringEditbox::SetUserText ( struct FString NewValue )
{
	static UFunction* pFnSetUserText = NULL;

	if ( ! pFnSetUserText )
		pFnSetUserText = UObject::FindObject< UFunction > ( "Function Engine.UIComp_DrawStringEditbox.SetUserText" );

	UUIComp_DrawStringEditbox_execSetUserText_Parms SetUserText_Parms;
	memcpy ( &SetUserText_Parms.NewValue, &NewValue, 0xC );

	pFnSetUserText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUserText, &SetUserText_Parms, NULL );

	pFnSetUserText->FunctionFlags |= 0x400;

	return SetUserText_Parms.ReturnValue;
};

// Function Engine.UIComp_ListElementSorter.ResortItems
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCaseSensitive                 ( CPF_OptionalParm | CPF_Parm )

bool UUIComp_ListElementSorter::ResortItems ( unsigned long bCaseSensitive )
{
	static UFunction* pFnResortItems = NULL;

	if ( ! pFnResortItems )
		pFnResortItems = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListElementSorter.ResortItems" );

	UUIComp_ListElementSorter_execResortItems_Parms ResortItems_Parms;
	ResortItems_Parms.bCaseSensitive = bCaseSensitive;

	pFnResortItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResortItems, &ResortItems_Parms, NULL );

	pFnResortItems->FunctionFlags |= 0x400;

	return ResortItems_Parms.ReturnValue;
};

// Function Engine.UIComp_ListElementSorter.SortItems
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ColumnIndex                    ( CPF_Parm )
// unsigned long                  bSecondarySort                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCaseSensitive                 ( CPF_OptionalParm | CPF_Parm )

bool UUIComp_ListElementSorter::SortItems ( int ColumnIndex, unsigned long bSecondarySort, unsigned long bCaseSensitive )
{
	static UFunction* pFnSortItems = NULL;

	if ( ! pFnSortItems )
		pFnSortItems = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListElementSorter.SortItems" );

	UUIComp_ListElementSorter_execSortItems_Parms SortItems_Parms;
	SortItems_Parms.ColumnIndex = ColumnIndex;
	SortItems_Parms.bSecondarySort = bSecondarySort;
	SortItems_Parms.bCaseSensitive = bCaseSensitive;

	pFnSortItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortItems, &SortItems_Parms, NULL );

	pFnSortItems->FunctionFlags |= 0x400;

	return SortItems_Parms.ReturnValue;
};

// Function Engine.UIComp_ListElementSorter.ResetSortColumns
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bResort                        ( CPF_OptionalParm | CPF_Parm )

void UUIComp_ListElementSorter::ResetSortColumns ( unsigned long bResort )
{
	static UFunction* pFnResetSortColumns = NULL;

	if ( ! pFnResetSortColumns )
		pFnResetSortColumns = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListElementSorter.ResetSortColumns" );

	UUIComp_ListElementSorter_execResetSortColumns_Parms ResetSortColumns_Parms;
	ResetSortColumns_Parms.bResort = bResort;

	pFnResetSortColumns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetSortColumns, &ResetSortColumns_Parms, NULL );

	pFnResetSortColumns->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_ListElementSorter.OverrideListSort
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIList*                 Sender                         ( CPF_Parm )
// struct FName                   CollectionFieldName            ( CPF_Parm )
// struct FUIListSortingParameters SortParameters                 ( CPF_Const | CPF_Parm | CPF_OutParm )
// TArray< int >                  OrderedIndices                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIComp_ListElementSorter::OverrideListSort ( class UUIList* Sender, struct FName CollectionFieldName, struct FUIListSortingParameters* SortParameters, TArray< int >* OrderedIndices )
{
	static UFunction* pFnOverrideListSort = NULL;

	if ( ! pFnOverrideListSort )
		pFnOverrideListSort = UObject::FindObject< UFunction > ( "Function Engine.UIComp_ListElementSorter.OverrideListSort" );

	UUIComp_ListElementSorter_execOverrideListSort_Parms OverrideListSort_Parms;
	OverrideListSort_Parms.Sender = Sender;
	memcpy ( &OverrideListSort_Parms.CollectionFieldName, &CollectionFieldName, 0x8 );

	this->ProcessEvent ( pFnOverrideListSort, &OverrideListSort_Parms, NULL );

	if ( SortParameters )
		memcpy ( SortParameters, &OverrideListSort_Parms.SortParameters, 0xC );

	if ( OrderedIndices )
		memcpy ( OrderedIndices, &OverrideListSort_Parms.OrderedIndices, 0xC );

	return OverrideListSort_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePlayerDataBase::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister" );

	UUIDataProvider_OnlinePlayerDataBase_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePlayerDataBase::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister" );

	UUIDataProvider_OnlinePlayerDataBase_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineClanMates.OnClanMatesReadComplete
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineClanMates::OnClanMatesReadComplete ( )
{
	static UFunction* pFnOnClanMatesReadComplete = NULL;

	if ( ! pFnOnClanMatesReadComplete )
		pFnOnClanMatesReadComplete = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineClanMates.OnClanMatesReadComplete" );

	UUIDataProvider_OnlineClanMates_execOnClanMatesReadComplete_Parms OnClanMatesReadComplete_Parms;

	this->ProcessEvent ( pFnOnClanMatesReadComplete, &OnClanMatesReadComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineClanMates.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineClanMates::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineClanMates.OnRegister" );

	UUIDataProvider_OnlineClanMates_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviterName                    ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName )
{
	static UFunction* pFnOnGameInviteReceived = NULL;

	if ( ! pFnOnGameInviteReceived )
		pFnOnGameInviteReceived = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived" );

	UUIDataProvider_OnlineFriendMessages_execOnGameInviteReceived_Parms OnGameInviteReceived_Parms;
	OnGameInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnGameInviteReceived_Parms.InviterName, &InviterName, 0xC );

	this->ProcessEvent ( pFnOnGameInviteReceived, &OnGameInviteReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineFriendMessages::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange" );

	UUIDataProvider_OnlineFriendMessages_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived" );

	UUIDataProvider_OnlineFriendMessages_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x8 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0xC );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived" );

	UUIDataProvider_OnlineFriendMessages_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0xC );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineFriendMessages::ReadMessages ( )
{
	static UFunction* pFnReadMessages = NULL;

	if ( ! pFnReadMessages )
		pFnReadMessages = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages" );

	UUIDataProvider_OnlineFriendMessages_execReadMessages_Parms ReadMessages_Parms;

	this->ProcessEvent ( pFnReadMessages, &ReadMessages_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriendMessages::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister" );

	UUIDataProvider_OnlineFriendMessages_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineFriendMessages::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister" );

	UUIDataProvider_OnlineFriendMessages_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriends::eventRefreshFriendsList ( )
{
	static UFunction* pFnRefreshFriendsList = NULL;

	if ( ! pFnRefreshFriendsList )
		pFnRefreshFriendsList = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList" );

	UUIDataProvider_OnlineFriends_eventRefreshFriendsList_Parms RefreshFriendsList_Parms;

	this->ProcessEvent ( pFnRefreshFriendsList, &RefreshFriendsList_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineFriends::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriends.OnLoginChange" );

	UUIDataProvider_OnlineFriends_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_OnlineFriends::OnFriendsReadComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFriendsReadComplete = NULL;

	if ( ! pFnOnFriendsReadComplete )
		pFnOnFriendsReadComplete = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete" );

	UUIDataProvider_OnlineFriends_execOnFriendsReadComplete_Parms OnFriendsReadComplete_Parms;
	OnFriendsReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFriendsReadComplete, &OnFriendsReadComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriends::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriends.OnUnregister" );

	UUIDataProvider_OnlineFriends_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineFriends::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineFriends.OnRegister" );

	UUIDataProvider_OnlineFriends_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayers.OnPlayersReadComplete
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlinePlayers::OnPlayersReadComplete ( )
{
	static UFunction* pFnOnPlayersReadComplete = NULL;

	if ( ! pFnOnPlayersReadComplete )
		pFnOnPlayersReadComplete = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlinePlayers.OnPlayersReadComplete" );

	UUIDataProvider_OnlinePlayers_execOnPlayersReadComplete_Parms OnPlayersReadComplete_Parms;

	this->ProcessEvent ( pFnOnPlayersReadComplete, &OnPlayersReadComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayers.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePlayers::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlinePlayers.OnRegister" );

	UUIDataProvider_OnlinePlayers_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.SaveProfileData
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataProvider_OnlineProfileSettings::eventSaveProfileData ( )
{
	static UFunction* pFnSaveProfileData = NULL;

	if ( ! pFnSaveProfileData )
		pFnSaveProfileData = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineProfileSettings.SaveProfileData" );

	UUIDataProvider_OnlineProfileSettings_eventSaveProfileData_Parms SaveProfileData_Parms;

	this->ProcessEvent ( pFnSaveProfileData, &SaveProfileData_Parms, NULL );

	return SaveProfileData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.OnLoginChange
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineProfileSettings::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineProfileSettings.OnLoginChange" );

	UUIDataProvider_OnlineProfileSettings_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.OnReadProfileComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_OnlineProfileSettings::OnReadProfileComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadProfileComplete = NULL;

	if ( ! pFnOnReadProfileComplete )
		pFnOnReadProfileComplete = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineProfileSettings.OnReadProfileComplete" );

	UUIDataProvider_OnlineProfileSettings_execOnReadProfileComplete_Parms OnReadProfileComplete_Parms;
	OnReadProfileComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadProfileComplete, &OnReadProfileComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineProfileSettings::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineProfileSettings.OnUnregister" );

	UUIDataProvider_OnlineProfileSettings_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineProfileSettings::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.UIDataProvider_OnlineProfileSettings.OnRegister" );

	UUIDataProvider_OnlineProfileSettings_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// struct FUIProviderScriptFieldValue ValueToSearchFor               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataStore_GameResource::FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor )
{
	static UFunction* pFnFindProviderIndexByFieldValue = NULL;

	if ( ! pFnFindProviderIndexByFieldValue )
		pFnFindProviderIndexByFieldValue = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue" );

	UUIDataStore_GameResource_execFindProviderIndexByFieldValue_Parms FindProviderIndexByFieldValue_Parms;
	memcpy ( &FindProviderIndexByFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &FindProviderIndexByFieldValue_Parms.SearchField, &SearchField, 0x8 );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderIndexByFieldValue, &FindProviderIndexByFieldValue_Parms, NULL );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= 0x400;

	if ( ValueToSearchFor )
		memcpy ( ValueToSearchFor, &FindProviderIndexByFieldValue_Parms.ValueToSearchFor, 0x40 );

	return FindProviderIndexByFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetProviderFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// int                            ProviderIndex                  ( CPF_Parm )
// struct FUIProviderScriptFieldValue out_FieldValue                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_GameResource::GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue )
{
	static UFunction* pFnGetProviderFieldValue = NULL;

	if ( ! pFnGetProviderFieldValue )
		pFnGetProviderFieldValue = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameResource.GetProviderFieldValue" );

	UUIDataStore_GameResource_execGetProviderFieldValue_Parms GetProviderFieldValue_Parms;
	memcpy ( &GetProviderFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &GetProviderFieldValue_Parms.SearchField, &SearchField, 0x8 );
	GetProviderFieldValue_Parms.ProviderIndex = ProviderIndex;

	pFnGetProviderFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderFieldValue, &GetProviderFieldValue_Parms, NULL );

	pFnGetProviderFieldValue->FunctionFlags |= 0x400;

	if ( out_FieldValue )
		memcpy ( out_FieldValue, &GetProviderFieldValue_Parms.out_FieldValue, 0x40 );

	return GetProviderFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetResourceProviderFields
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// TArray< struct FName >         ProviderFieldTags              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_GameResource::GetResourceProviderFields ( struct FName ProviderTag, TArray< struct FName >* ProviderFieldTags )
{
	static UFunction* pFnGetResourceProviderFields = NULL;

	if ( ! pFnGetResourceProviderFields )
		pFnGetResourceProviderFields = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameResource.GetResourceProviderFields" );

	UUIDataStore_GameResource_execGetResourceProviderFields_Parms GetResourceProviderFields_Parms;
	memcpy ( &GetResourceProviderFields_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviderFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviderFields, &GetResourceProviderFields_Parms, NULL );

	pFnGetResourceProviderFields->FunctionFlags |= 0x400;

	if ( ProviderFieldTags )
		memcpy ( ProviderFieldTags, &GetResourceProviderFields_Parms.ProviderFieldTags, 0xC );

	return GetResourceProviderFields_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetResourceProviders
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// TArray< class UUIResourceDataProvider* > out_Providers                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_GameResource::GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceDataProvider* >* out_Providers )
{
	static UFunction* pFnGetResourceProviders = NULL;

	if ( ! pFnGetResourceProviders )
		pFnGetResourceProviders = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameResource.GetResourceProviders" );

	UUIDataStore_GameResource_execGetResourceProviders_Parms GetResourceProviders_Parms;
	memcpy ( &GetResourceProviders_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviders, &GetResourceProviders_Parms, NULL );

	pFnGetResourceProviders->FunctionFlags |= 0x400;

	if ( out_Providers )
		memcpy ( out_Providers, &GetResourceProviders_Parms.out_Providers, 0xC );

	return GetResourceProviders_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetProviderCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_GameResource::GetProviderCount ( struct FName ProviderTag )
{
	static UFunction* pFnGetProviderCount = NULL;

	if ( ! pFnGetProviderCount )
		pFnGetProviderCount = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameResource.GetProviderCount" );

	UUIDataStore_GameResource_execGetProviderCount_Parms GetProviderCount_Parms;
	memcpy ( &GetProviderCount_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetProviderCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderCount, &GetProviderCount_Parms, NULL );

	pFnGetProviderCount->FunctionFlags |= 0x400;

	return GetProviderCount_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GenerateProviderAccessTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProviderIndex                  ( CPF_Parm )
// int                            InstanceIndex                  ( CPF_Parm )

struct FName UUIDataStore_GameResource::GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex )
{
	static UFunction* pFnGenerateProviderAccessTag = NULL;

	if ( ! pFnGenerateProviderAccessTag )
		pFnGenerateProviderAccessTag = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameResource.GenerateProviderAccessTag" );

	UUIDataStore_GameResource_execGenerateProviderAccessTag_Parms GenerateProviderAccessTag_Parms;
	GenerateProviderAccessTag_Parms.ProviderIndex = ProviderIndex;
	GenerateProviderAccessTag_Parms.InstanceIndex = InstanceIndex;

	pFnGenerateProviderAccessTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateProviderAccessTag, &GenerateProviderAccessTag_Parms, NULL );

	pFnGenerateProviderAccessTag->FunctionFlags |= 0x400;

	return GenerateProviderAccessTag_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.FindProviderTypeIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_GameResource::FindProviderTypeIndex ( struct FName ProviderTag )
{
	static UFunction* pFnFindProviderTypeIndex = NULL;

	if ( ! pFnFindProviderTypeIndex )
		pFnFindProviderTypeIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_GameResource.FindProviderTypeIndex" );

	UUIDataStore_GameResource_execFindProviderTypeIndex_Parms FindProviderTypeIndex_Parms;
	memcpy ( &FindProviderTypeIndex_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnFindProviderTypeIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderTypeIndex, &FindProviderTypeIndex_Parms, NULL );

	pFnFindProviderTypeIndex->FunctionFlags |= 0x400;

	return FindProviderTypeIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  DesiredPlatform                ( CPF_Parm )

bool UUIDataStore_InputAlias::HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform )
{
	static UFunction* pFnHasAliasMappingForPlatform = NULL;

	if ( ! pFnHasAliasMappingForPlatform )
		pFnHasAliasMappingForPlatform = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform" );

	UUIDataStore_InputAlias_execHasAliasMappingForPlatform_Parms HasAliasMappingForPlatform_Parms;
	memcpy ( &HasAliasMappingForPlatform_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	HasAliasMappingForPlatform_Parms.DesiredPlatform = DesiredPlatform;

	pFnHasAliasMappingForPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasAliasMappingForPlatform, &HasAliasMappingForPlatform_Parms, NULL );

	pFnHasAliasMappingForPlatform->FunctionFlags |= 0x400;

	return HasAliasMappingForPlatform_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )

int UUIDataStore_InputAlias::FindInputAliasIndex ( struct FName DesiredAlias )
{
	static UFunction* pFnFindInputAliasIndex = NULL;

	if ( ! pFnFindInputAliasIndex )
		pFnFindInputAliasIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.FindInputAliasIndex" );

	UUIDataStore_InputAlias_execFindInputAliasIndex_Parms FindInputAliasIndex_Parms;
	memcpy ( &FindInputAliasIndex_Parms.DesiredAlias, &DesiredAlias, 0x8 );

	pFnFindInputAliasIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInputAliasIndex, &FindInputAliasIndex_Parms, NULL );

	pFnFindInputAliasIndex->FunctionFlags |= 0x400;

	return FindInputAliasIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyDataByIndex = NULL;

	if ( ! pFnGetAliasInputKeyDataByIndex )
		pFnGetAliasInputKeyDataByIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex" );

	UUIDataStore_InputAlias_execGetAliasInputKeyDataByIndex_Parms GetAliasInputKeyDataByIndex_Parms;
	GetAliasInputKeyDataByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyDataByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyDataByIndex, &GetAliasInputKeyDataByIndex_Parms, NULL );

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyDataByIndex_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyDataByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyData = NULL;

	if ( ! pFnGetAliasInputKeyData )
		pFnGetAliasInputKeyData = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData" );

	UUIDataStore_InputAlias_execGetAliasInputKeyData_Parms GetAliasInputKeyData_Parms;
	memcpy ( &GetAliasInputKeyData_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyData_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyData, &GetAliasInputKeyData_Parms, NULL );

	pFnGetAliasInputKeyData->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyData_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyData_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyNameByIndex = NULL;

	if ( ! pFnGetAliasInputKeyNameByIndex )
		pFnGetAliasInputKeyNameByIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex" );

	UUIDataStore_InputAlias_execGetAliasInputKeyNameByIndex_Parms GetAliasInputKeyNameByIndex_Parms;
	GetAliasInputKeyNameByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyNameByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyNameByIndex, &GetAliasInputKeyNameByIndex_Parms, NULL );

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= 0x400;

	return GetAliasInputKeyNameByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyName = NULL;

	if ( ! pFnGetAliasInputKeyName )
		pFnGetAliasInputKeyName = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName" );

	UUIDataStore_InputAlias_execGetAliasInputKeyName_Parms GetAliasInputKeyName_Parms;
	memcpy ( &GetAliasInputKeyName_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyName_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyName, &GetAliasInputKeyName_Parms, NULL );

	pFnGetAliasInputKeyName->FunctionFlags |= 0x400;

	return GetAliasInputKeyName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkupByIndex = NULL;

	if ( ! pFnGetAliasFontMarkupByIndex )
		pFnGetAliasFontMarkupByIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex" );

	UUIDataStore_InputAlias_execGetAliasFontMarkupByIndex_Parms GetAliasFontMarkupByIndex_Parms;
	GetAliasFontMarkupByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasFontMarkupByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkupByIndex, &GetAliasFontMarkupByIndex_Parms, NULL );

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= 0x400;

	return GetAliasFontMarkupByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkup = NULL;

	if ( ! pFnGetAliasFontMarkup )
		pFnGetAliasFontMarkup = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup" );

	UUIDataStore_InputAlias_execGetAliasFontMarkup_Parms GetAliasFontMarkup_Parms;
	memcpy ( &GetAliasFontMarkup_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasFontMarkup_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkup, &GetAliasFontMarkup_Parms, NULL );

	pFnGetAliasFontMarkup->FunctionFlags |= 0x400;

	return GetAliasFontMarkup_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlineGameSearch::ClearAllSearchResults ( )
{
	static UFunction* pFnClearAllSearchResults = NULL;

	if ( ! pFnClearAllSearchResults )
		pFnClearAllSearchResults = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults" );

	UUIDataStore_OnlineGameSearch_execClearAllSearchResults_Parms ClearAllSearchResults_Parms;

	this->ProcessEvent ( pFnClearAllSearchResults, &ClearAllSearchResults_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventMoveToPrevious ( unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnMoveToPrevious = NULL;

	if ( ! pFnMoveToPrevious )
		pFnMoveToPrevious = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious" );

	UUIDataStore_OnlineGameSearch_eventMoveToPrevious_Parms MoveToPrevious_Parms;
	MoveToPrevious_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnMoveToPrevious, &MoveToPrevious_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.MoveToNext
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventMoveToNext ( unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnMoveToNext = NULL;

	if ( ! pFnMoveToNext )
		pFnMoveToNext = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.MoveToNext" );

	UUIDataStore_OnlineGameSearch_eventMoveToNext_Parms MoveToNext_Parms;
	MoveToNext_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnMoveToNext, &MoveToNext_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SearchName                     ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventSetCurrentByName ( struct FName SearchName, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSetCurrentByName = NULL;

	if ( ! pFnSetCurrentByName )
		pFnSetCurrentByName = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName" );

	UUIDataStore_OnlineGameSearch_eventSetCurrentByName_Parms SetCurrentByName_Parms;
	memcpy ( &SetCurrentByName_Parms.SearchName, &SearchName, 0x8 );
	SetCurrentByName_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSetCurrentByName, &SetCurrentByName_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            NewIndex                       ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventSetCurrentByIndex ( int NewIndex, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSetCurrentByIndex = NULL;

	if ( ! pFnSetCurrentByIndex )
		pFnSetCurrentByIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex" );

	UUIDataStore_OnlineGameSearch_eventSetCurrentByIndex_Parms SetCurrentByIndex_Parms;
	SetCurrentByIndex_Parms.NewIndex = NewIndex;
	SetCurrentByIndex_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSetCurrentByIndex, &SetCurrentByIndex_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SearchTag                      ( CPF_Parm )

int UUIDataStore_OnlineGameSearch::FindSearchConfigurationIndex ( struct FName SearchTag )
{
	static UFunction* pFnFindSearchConfigurationIndex = NULL;

	if ( ! pFnFindSearchConfigurationIndex )
		pFnFindSearchConfigurationIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex" );

	UUIDataStore_OnlineGameSearch_execFindSearchConfigurationIndex_Parms FindSearchConfigurationIndex_Parms;
	memcpy ( &FindSearchConfigurationIndex_Parms.SearchTag, &SearchTag, 0x8 );

	this->ProcessEvent ( pFnFindSearchConfigurationIndex, &FindSearchConfigurationIndex_Parms, NULL );

	return FindSearchConfigurationIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::eventGetActiveGameSearch ( )
{
	static UFunction* pFnGetActiveGameSearch = NULL;

	if ( ! pFnGetActiveGameSearch )
		pFnGetActiveGameSearch = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch" );

	UUIDataStore_OnlineGameSearch_eventGetActiveGameSearch_Parms GetActiveGameSearch_Parms;

	this->ProcessEvent ( pFnGetActiveGameSearch, &GetActiveGameSearch_Parms, NULL );

	return GetActiveGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::eventGetCurrentGameSearch ( )
{
	static UFunction* pFnGetCurrentGameSearch = NULL;

	if ( ! pFnGetCurrentGameSearch )
		pFnGetCurrentGameSearch = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch" );

	UUIDataStore_OnlineGameSearch_eventGetCurrentGameSearch_Parms GetCurrentGameSearch_Parms;

	this->ProcessEvent ( pFnGetCurrentGameSearch, &GetCurrentGameSearch_Parms, NULL );

	return GetCurrentGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.BuildSearchResults
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStore_OnlineGameSearch::BuildSearchResults ( )
{
	static UFunction* pFnBuildSearchResults = NULL;

	if ( ! pFnBuildSearchResults )
		pFnBuildSearchResults = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.BuildSearchResults" );

	UUIDataStore_OnlineGameSearch_execBuildSearchResults_Parms BuildSearchResults_Parms;

	pFnBuildSearchResults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildSearchResults, &BuildSearchResults_Parms, NULL );

	pFnBuildSearchResults->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )

bool UUIDataStore_OnlineGameSearch::eventShowHostGamercard ( unsigned char ControllerIndex, int ListIndex )
{
	static UFunction* pFnShowHostGamercard = NULL;

	if ( ! pFnShowHostGamercard )
		pFnShowHostGamercard = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard" );

	UUIDataStore_OnlineGameSearch_eventShowHostGamercard_Parms ShowHostGamercard_Parms;
	ShowHostGamercard_Parms.ControllerIndex = ControllerIndex;
	ShowHostGamercard_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnShowHostGamercard, &ShowHostGamercard_Parms, NULL );

	return ShowHostGamercard_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ListIndex                      ( CPF_Parm )
// struct FOnlineGameSearchResult Result                         ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_OnlineGameSearch::eventGetSearchResultFromIndex ( int ListIndex, struct FOnlineGameSearchResult* Result )
{
	static UFunction* pFnGetSearchResultFromIndex = NULL;

	if ( ! pFnGetSearchResultFromIndex )
		pFnGetSearchResultFromIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex" );

	UUIDataStore_OnlineGameSearch_eventGetSearchResultFromIndex_Parms GetSearchResultFromIndex_Parms;
	GetSearchResultFromIndex_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnGetSearchResultFromIndex, &GetSearchResultFromIndex_Parms, NULL );

	if ( Result )
		memcpy ( Result, &GetSearchResultFromIndex_Parms.Result, 0x8 );

	return GetSearchResultFromIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlineGameSearch::OnSearchComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnSearchComplete = NULL;

	if ( ! pFnOnSearchComplete )
		pFnOnSearchComplete = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete" );

	UUIDataStore_OnlineGameSearch_execOnSearchComplete_Parms OnSearchComplete_Parms;
	OnSearchComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnSearchComplete, &OnSearchComplete_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerId                   ( CPF_Parm )
// class UOnlineGameSearch*       Search                         ( CPF_Parm )

bool UUIDataStore_OnlineGameSearch::OverrideQuerySubmission ( unsigned char ControllerId, class UOnlineGameSearch* Search )
{
	static UFunction* pFnOverrideQuerySubmission = NULL;

	if ( ! pFnOverrideQuerySubmission )
		pFnOverrideQuerySubmission = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission" );

	UUIDataStore_OnlineGameSearch_execOverrideQuerySubmission_Parms OverrideQuerySubmission_Parms;
	OverrideQuerySubmission_Parms.ControllerId = ControllerId;
	OverrideQuerySubmission_Parms.Search = Search;

	this->ProcessEvent ( pFnOverrideQuerySubmission, &OverrideQuerySubmission_Parms, NULL );

	return OverrideQuerySubmission_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

bool UUIDataStore_OnlineGameSearch::eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSubmitGameSearch = NULL;

	if ( ! pFnSubmitGameSearch )
		pFnSubmitGameSearch = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch" );

	UUIDataStore_OnlineGameSearch_eventSubmitGameSearch_Parms SubmitGameSearch_Parms;
	SubmitGameSearch_Parms.ControllerIndex = ControllerIndex;
	SubmitGameSearch_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSubmitGameSearch, &SubmitGameSearch_Parms, NULL );

	return SubmitGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_OnlineGameSearch::InvalidateCurrentSearchResults ( )
{
	static UFunction* pFnInvalidateCurrentSearchResults = NULL;

	if ( ! pFnInvalidateCurrentSearchResults )
		pFnInvalidateCurrentSearchResults = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults" );

	UUIDataStore_OnlineGameSearch_execInvalidateCurrentSearchResults_Parms InvalidateCurrentSearchResults_Parms;

	this->ProcessEvent ( pFnInvalidateCurrentSearchResults, &InvalidateCurrentSearchResults_Parms, NULL );

	return InvalidateCurrentSearchResults_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSearch::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSearch.Init" );

	UUIDataStore_OnlineGameSearch_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSettings::eventMoveToPrevious ( )
{
	static UFunction* pFnMoveToPrevious = NULL;

	if ( ! pFnMoveToPrevious )
		pFnMoveToPrevious = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious" );

	UUIDataStore_OnlineGameSettings_eventMoveToPrevious_Parms MoveToPrevious_Parms;

	this->ProcessEvent ( pFnMoveToPrevious, &MoveToPrevious_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.MoveToNext
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSettings::eventMoveToNext ( )
{
	static UFunction* pFnMoveToNext = NULL;

	if ( ! pFnMoveToNext )
		pFnMoveToNext = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSettings.MoveToNext" );

	UUIDataStore_OnlineGameSettings_eventMoveToNext_Parms MoveToNext_Parms;

	this->ProcessEvent ( pFnMoveToNext, &MoveToNext_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SettingsName                   ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventSetCurrentByName ( struct FName SettingsName )
{
	static UFunction* pFnSetCurrentByName = NULL;

	if ( ! pFnSetCurrentByName )
		pFnSetCurrentByName = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName" );

	UUIDataStore_OnlineGameSettings_eventSetCurrentByName_Parms SetCurrentByName_Parms;
	memcpy ( &SetCurrentByName_Parms.SettingsName, &SettingsName, 0x8 );

	this->ProcessEvent ( pFnSetCurrentByName, &SetCurrentByName_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            NewIndex                       ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventSetCurrentByIndex ( int NewIndex )
{
	static UFunction* pFnSetCurrentByIndex = NULL;

	if ( ! pFnSetCurrentByIndex )
		pFnSetCurrentByIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex" );

	UUIDataStore_OnlineGameSettings_eventSetCurrentByIndex_Parms SetCurrentByIndex_Parms;
	SetCurrentByIndex_Parms.NewIndex = NewIndex;

	this->ProcessEvent ( pFnSetCurrentByIndex, &SetCurrentByIndex_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataProvider_Settings* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIDataProvider_Settings* UUIDataStore_OnlineGameSettings::eventGetCurrentProvider ( )
{
	static UFunction* pFnGetCurrentProvider = NULL;

	if ( ! pFnGetCurrentProvider )
		pFnGetCurrentProvider = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider" );

	UUIDataStore_OnlineGameSettings_eventGetCurrentProvider_Parms GetCurrentProvider_Parms;

	this->ProcessEvent ( pFnGetCurrentProvider, &GetCurrentProvider_Parms, NULL );

	return GetCurrentProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSettings* UUIDataStore_OnlineGameSettings::eventGetCurrentGameSettings ( )
{
	static UFunction* pFnGetCurrentGameSettings = NULL;

	if ( ! pFnGetCurrentGameSettings )
		pFnGetCurrentGameSettings = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings" );

	UUIDataStore_OnlineGameSettings_eventGetCurrentGameSettings_Parms GetCurrentGameSettings_Parms;

	this->ProcessEvent ( pFnGetCurrentGameSettings, &GetCurrentGameSettings_Parms, NULL );

	return GetCurrentGameSettings_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSettings.CreateGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )

bool UUIDataStore_OnlineGameSettings::eventCreateGame ( unsigned char ControllerIndex )
{
	static UFunction* pFnCreateGame = NULL;

	if ( ! pFnCreateGame )
		pFnCreateGame = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineGameSettings.CreateGame" );

	UUIDataStore_OnlineGameSettings_eventCreateGame_Parms CreateGame_Parms;
	CreateGame_Parms.ControllerIndex = ControllerIndex;

	this->ProcessEvent ( pFnCreateGame, &CreateGame_Parms, NULL );

	return CreateGame_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.SaveProfileData
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_OnlinePlayerData::eventSaveProfileData ( )
{
	static UFunction* pFnSaveProfileData = NULL;

	if ( ! pFnSaveProfileData )
		pFnSaveProfileData = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.SaveProfileData" );

	UUIDataStore_OnlinePlayerData_eventSaveProfileData_Parms SaveProfileData_Parms;

	this->ProcessEvent ( pFnSaveProfileData, &SaveProfileData_Parms, NULL );

	return SaveProfileData_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlinePlayerData::OnDownloadableContentQueryDone ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDownloadableContentQueryDone = NULL;

	if ( ! pFnOnDownloadableContentQueryDone )
		pFnOnDownloadableContentQueryDone = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone" );

	UUIDataStore_OnlinePlayerData_execOnDownloadableContentQueryDone_Parms OnDownloadableContentQueryDone_Parms;
	OnDownloadableContentQueryDone_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDownloadableContentQueryDone, &OnDownloadableContentQueryDone_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnProviderChanged
// [0x00020002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlinePlayerData::OnProviderChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnOnProviderChanged = NULL;

	if ( ! pFnOnProviderChanged )
		pFnOnProviderChanged = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.OnProviderChanged" );

	UUIDataStore_OnlinePlayerData_execOnProviderChanged_Parms OnProviderChanged_Parms;
	OnProviderChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnProviderChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnOnProviderChanged, &OnProviderChanged_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlinePlayerData::eventRegisterDelegates ( )
{
	static UFunction* pFnRegisterDelegates = NULL;

	if ( ! pFnRegisterDelegates )
		pFnRegisterDelegates = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates" );

	UUIDataStore_OnlinePlayerData_eventRegisterDelegates_Parms RegisterDelegates_Parms;

	this->ProcessEvent ( pFnRegisterDelegates, &RegisterDelegates_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::OnPlayerDataChange ( )
{
	static UFunction* pFnOnPlayerDataChange = NULL;

	if ( ! pFnOnPlayerDataChange )
		pFnOnPlayerDataChange = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange" );

	UUIDataStore_OnlinePlayerData_execOnPlayerDataChange_Parms OnPlayerDataChange_Parms;

	this->ProcessEvent ( pFnOnPlayerDataChange, &OnPlayerDataChange_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange" );

	UUIDataStore_OnlinePlayerData_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlinePlayerData::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.OnUnregister" );

	UUIDataStore_OnlinePlayerData_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataStore_OnlinePlayerData::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlinePlayerData.OnRegister" );

	UUIDataStore_OnlinePlayerData_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.SortResultsByRank
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStore_OnlineStats::SortResultsByRank ( )
{
	static UFunction* pFnSortResultsByRank = NULL;

	if ( ! pFnSortResultsByRank )
		pFnSortResultsByRank = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineStats.SortResultsByRank" );

	UUIDataStore_OnlineStats_execSortResultsByRank_Parms SortResultsByRank_Parms;

	pFnSortResultsByRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortResultsByRank, &SortResultsByRank_Parms, NULL );

	pFnSortResultsByRank->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_OnlineStats.OnReadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlineStats::OnReadComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadComplete = NULL;

	if ( ! pFnOnReadComplete )
		pFnOnReadComplete = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineStats.OnReadComplete" );

	UUIDataStore_OnlineStats_execOnReadComplete_Parms OnReadComplete_Parms;
	OnReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadComplete, &OnReadComplete_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.ShowGamercard
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConrollerIndex                 ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )

bool UUIDataStore_OnlineStats::eventShowGamercard ( unsigned char ConrollerIndex, int ListIndex )
{
	static UFunction* pFnShowGamercard = NULL;

	if ( ! pFnShowGamercard )
		pFnShowGamercard = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineStats.ShowGamercard" );

	UUIDataStore_OnlineStats_eventShowGamercard_Parms ShowGamercard_Parms;
	ShowGamercard_Parms.ConrollerIndex = ConrollerIndex;
	ShowGamercard_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnShowGamercard, &ShowGamercard_Parms, NULL );

	return ShowGamercard_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.RefreshStats
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )

bool UUIDataStore_OnlineStats::eventRefreshStats ( unsigned char ControllerIndex )
{
	static UFunction* pFnRefreshStats = NULL;

	if ( ! pFnRefreshStats )
		pFnRefreshStats = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineStats.RefreshStats" );

	UUIDataStore_OnlineStats_eventRefreshStats_Parms RefreshStats_Parms;
	RefreshStats_Parms.ControllerIndex = ControllerIndex;

	this->ProcessEvent ( pFnRefreshStats, &RefreshStats_Parms, NULL );

	return RefreshStats_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlineStats::SetStatsReadInfo ( )
{
	static UFunction* pFnSetStatsReadInfo = NULL;

	if ( ! pFnSetStatsReadInfo )
		pFnSetStatsReadInfo = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo" );

	UUIDataStore_OnlineStats_execSetStatsReadInfo_Parms SetStatsReadInfo_Parms;

	this->ProcessEvent ( pFnSetStatsReadInfo, &SetStatsReadInfo_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineStats::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_OnlineStats.Init" );

	UUIDataStore_OnlineStats_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.UIDataStore_Registry.GetDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIDynamicFieldProvider* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIDynamicFieldProvider* UUIDataStore_Registry::GetDataProvider ( )
{
	static UFunction* pFnGetDataProvider = NULL;

	if ( ! pFnGetDataProvider )
		pFnGetDataProvider = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_Registry.GetDataProvider" );

	UUIDataStore_Registry_execGetDataProvider_Parms GetDataProvider_Parms;

	this->ProcessEvent ( pFnGetDataProvider, &GetDataProvider_Parms, NULL );

	return GetDataProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 MappedString                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataStore_StringAliasMap::GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString )
{
	static UFunction* pFnGetStringWithFieldName = NULL;

	if ( ! pFnGetStringWithFieldName )
		pFnGetStringWithFieldName = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName" );

	UUIDataStore_StringAliasMap_execGetStringWithFieldName_Parms GetStringWithFieldName_Parms;
	memcpy ( &GetStringWithFieldName_Parms.FieldName, &FieldName, 0xC );

	pFnGetStringWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringWithFieldName, &GetStringWithFieldName_Parms, NULL );

	pFnGetStringWithFieldName->FunctionFlags |= 0x400;

	if ( MappedString )
		memcpy ( MappedString, &GetStringWithFieldName_Parms.MappedString, 0xC );

	return GetStringWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SetName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int UUIDataStore_StringAliasMap::FindMappingWithFieldName ( struct FString FieldName, struct FString SetName )
{
	static UFunction* pFnFindMappingWithFieldName = NULL;

	if ( ! pFnFindMappingWithFieldName )
		pFnFindMappingWithFieldName = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName" );

	UUIDataStore_StringAliasMap_execFindMappingWithFieldName_Parms FindMappingWithFieldName_Parms;
	memcpy ( &FindMappingWithFieldName_Parms.FieldName, &FieldName, 0xC );
	memcpy ( &FindMappingWithFieldName_Parms.SetName, &SetName, 0xC );

	pFnFindMappingWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMappingWithFieldName, &FindMappingWithFieldName_Parms, NULL );

	pFnFindMappingWithFieldName->FunctionFlags |= 0x400;

	return FindMappingWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner ( )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = UObject::FindObject< UFunction > ( "Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner" );

	UUIDataStore_StringAliasMap_execGetPlayerOwner_Parms GetPlayerOwner_Parms;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStoreSubscriber::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIDataStoreSubscriber.ClearBoundDataStores" );

	UUIDataStoreSubscriber_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataStoreSubscriber::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIDataStoreSubscriber.GetBoundDataStores" );

	UUIDataStoreSubscriber_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated" );

	UUIDataStoreSubscriber_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIDataStoreSubscriber::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue" );

	UUIDataStoreSubscriber_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStoreSubscriber::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIDataStoreSubscriber.GetDataStoreBinding" );

	UUIDataStoreSubscriber_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIDataStoreSubscriber::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIDataStoreSubscriber.SetDataStoreBinding" );

	UUIDataStoreSubscriber_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStorePublisher::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIDataStorePublisher.SaveSubscriberValue" );

	UUIDataStorePublisher_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToFind                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDynamicFieldProvider::FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind )
{
	static UFunction* pFnFindCollectionValueIndex = NULL;

	if ( ! pFnFindCollectionValueIndex )
		pFnFindCollectionValueIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex" );

	UUIDynamicFieldProvider_execFindCollectionValueIndex_Parms FindCollectionValueIndex_Parms;
	memcpy ( &FindCollectionValueIndex_Parms.FieldName, &FieldName, 0x8 );
	FindCollectionValueIndex_Parms.bPersistent = bPersistent;
	memcpy ( &FindCollectionValueIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnFindCollectionValueIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindCollectionValueIndex, &FindCollectionValueIndex_Parms, NULL );

	pFnFindCollectionValueIndex->FunctionFlags |= 0x400;

	if ( ValueToFind )
		memcpy ( ValueToFind, &FindCollectionValueIndex_Parms.ValueToFind, 0xC );

	return FindCollectionValueIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 out_Value                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value )
{
	static UFunction* pFnGetCollectionValue = NULL;

	if ( ! pFnGetCollectionValue )
		pFnGetCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.GetCollectionValue" );

	UUIDynamicFieldProvider_execGetCollectionValue_Parms GetCollectionValue_Parms;
	memcpy ( &GetCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValue_Parms.ValueIndex = ValueIndex;
	GetCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnGetCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValue, &GetCollectionValue_Parms, NULL );

	pFnGetCollectionValue->FunctionFlags |= 0x400;

	if ( out_Value )
		memcpy ( out_Value, &GetCollectionValue_Parms.out_Value, 0xC );

	return GetCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnClearCollectionValueArray = NULL;

	if ( ! pFnClearCollectionValueArray )
		pFnClearCollectionValueArray = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray" );

	UUIDynamicFieldProvider_execClearCollectionValueArray_Parms ClearCollectionValueArray_Parms;
	memcpy ( &ClearCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	ClearCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &ClearCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnClearCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCollectionValueArray, &ClearCollectionValueArray_Parms, NULL );

	pFnClearCollectionValueArray->FunctionFlags |= 0x400;

	return ClearCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValueByIndex = NULL;

	if ( ! pFnReplaceCollectionValueByIndex )
		pFnReplaceCollectionValueByIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex" );

	UUIDynamicFieldProvider_execReplaceCollectionValueByIndex_Parms ReplaceCollectionValueByIndex_Parms;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	ReplaceCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnReplaceCollectionValueByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceCollectionValueByIndex, &ReplaceCollectionValueByIndex_Parms, NULL );

	pFnReplaceCollectionValueByIndex->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValueByIndex_Parms.NewValue, 0xC );

	return ReplaceCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 CurrentValue                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValue = NULL;

	if ( ! pFnReplaceCollectionValue )
		pFnReplaceCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue" );

	UUIDynamicFieldProvider_execReplaceCollectionValue_Parms ReplaceCollectionValue_Parms;
	memcpy ( &ReplaceCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnReplaceCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceCollectionValue, &ReplaceCollectionValue_Parms, NULL );

	pFnReplaceCollectionValue->FunctionFlags |= 0x400;

	if ( CurrentValue )
		memcpy ( CurrentValue, &ReplaceCollectionValue_Parms.CurrentValue, 0xC );

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValue_Parms.NewValue, 0xC );

	return ReplaceCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnRemoveCollectionValueByIndex = NULL;

	if ( ! pFnRemoveCollectionValueByIndex )
		pFnRemoveCollectionValueByIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex" );

	UUIDynamicFieldProvider_execRemoveCollectionValueByIndex_Parms RemoveCollectionValueByIndex_Parms;
	memcpy ( &RemoveCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	RemoveCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnRemoveCollectionValueByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCollectionValueByIndex, &RemoveCollectionValueByIndex_Parms, NULL );

	pFnRemoveCollectionValueByIndex->FunctionFlags |= 0x400;

	return RemoveCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToRemove                  ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove )
{
	static UFunction* pFnRemoveCollectionValue = NULL;

	if ( ! pFnRemoveCollectionValue )
		pFnRemoveCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.RemoveCollectionValue" );

	UUIDynamicFieldProvider_execRemoveCollectionValue_Parms RemoveCollectionValue_Parms;
	memcpy ( &RemoveCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnRemoveCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCollectionValue, &RemoveCollectionValue_Parms, NULL );

	pFnRemoveCollectionValue->FunctionFlags |= 0x400;

	if ( ValueToRemove )
		memcpy ( ValueToRemove, &RemoveCollectionValue_Parms.ValueToRemove, 0xC );

	return RemoveCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InsertCollectionValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowDuplicateValues          ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnInsertCollectionValue = NULL;

	if ( ! pFnInsertCollectionValue )
		pFnInsertCollectionValue = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.InsertCollectionValue" );

	UUIDynamicFieldProvider_execInsertCollectionValue_Parms InsertCollectionValue_Parms;
	memcpy ( &InsertCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	InsertCollectionValue_Parms.InsertIndex = InsertIndex;
	InsertCollectionValue_Parms.bPersistent = bPersistent;
	InsertCollectionValue_Parms.bAllowDuplicateValues = bAllowDuplicateValues;
	memcpy ( &InsertCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnInsertCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertCollectionValue, &InsertCollectionValue_Parms, NULL );

	pFnInsertCollectionValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &InsertCollectionValue_Parms.NewValue, 0xC );

	return InsertCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SetCollectionValueArray
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bClearExisting                 ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       CollectionValues               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* CollectionValues )
{
	static UFunction* pFnSetCollectionValueArray = NULL;

	if ( ! pFnSetCollectionValueArray )
		pFnSetCollectionValueArray = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.SetCollectionValueArray" );

	UUIDynamicFieldProvider_execSetCollectionValueArray_Parms SetCollectionValueArray_Parms;
	memcpy ( &SetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	SetCollectionValueArray_Parms.bClearExisting = bClearExisting;
	SetCollectionValueArray_Parms.InsertIndex = InsertIndex;
	SetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &SetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnSetCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollectionValueArray, &SetCollectionValueArray_Parms, NULL );

	pFnSetCollectionValueArray->FunctionFlags |= 0x400;

	if ( CollectionValues )
		memcpy ( CollectionValues, &SetCollectionValueArray_Parms.CollectionValues, 0xC );

	return SetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueArray
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FString >       out_DataValueArray             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* out_DataValueArray )
{
	static UFunction* pFnGetCollectionValueArray = NULL;

	if ( ! pFnGetCollectionValueArray )
		pFnGetCollectionValueArray = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.GetCollectionValueArray" );

	UUIDynamicFieldProvider_execGetCollectionValueArray_Parms GetCollectionValueArray_Parms;
	memcpy ( &GetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnGetCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValueArray, &GetCollectionValueArray_Parms, NULL );

	pFnGetCollectionValueArray->FunctionFlags |= 0x400;

	if ( out_DataValueArray )
		memcpy ( out_DataValueArray, &GetCollectionValueArray_Parms.out_DataValueArray, 0xC );

	return GetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FName >         out_CellTagArray               ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetCollectionValueSchema ( struct FName FieldName, unsigned long bPersistent, TArray< struct FName >* out_CellTagArray )
{
	static UFunction* pFnGetCollectionValueSchema = NULL;

	if ( ! pFnGetCollectionValueSchema )
		pFnGetCollectionValueSchema = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema" );

	UUIDynamicFieldProvider_execGetCollectionValueSchema_Parms GetCollectionValueSchema_Parms;
	memcpy ( &GetCollectionValueSchema_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueSchema_Parms.bPersistent = bPersistent;

	pFnGetCollectionValueSchema->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValueSchema, &GetCollectionValueSchema_Parms, NULL );

	pFnGetCollectionValueSchema->FunctionFlags |= 0x400;

	if ( out_CellTagArray )
		memcpy ( out_CellTagArray, &GetCollectionValueSchema_Parms.out_CellTagArray, 0xC );

	return GetCollectionValueSchema_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SavePersistentProviderData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIDynamicFieldProvider::SavePersistentProviderData ( )
{
	static UFunction* pFnSavePersistentProviderData = NULL;

	if ( ! pFnSavePersistentProviderData )
		pFnSavePersistentProviderData = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.SavePersistentProviderData" );

	UUIDynamicFieldProvider_execSavePersistentProviderData_Parms SavePersistentProviderData_Parms;

	pFnSavePersistentProviderData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePersistentProviderData, &SavePersistentProviderData_Parms, NULL );

	pFnSavePersistentProviderData->FunctionFlags |= 0x400;
};

// Function Engine.UIDynamicFieldProvider.SetField
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bChangeExistingOnly            ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::SetField ( struct FName FieldName, unsigned long bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnSetField = NULL;

	if ( ! pFnSetField )
		pFnSetField = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.SetField" );

	UUIDynamicFieldProvider_execSetField_Parms SetField_Parms;
	memcpy ( &SetField_Parms.FieldName, &FieldName, 0x8 );
	SetField_Parms.bChangeExistingOnly = bChangeExistingOnly;

	pFnSetField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetField, &SetField_Parms, NULL );

	pFnSetField->FunctionFlags |= 0x400;

	if ( FieldValue )
		memcpy ( FieldValue, &SetField_Parms.FieldValue, 0x40 );

	return SetField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetField
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct FUIProviderScriptFieldValue out_Field                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetField ( struct FName FieldName, struct FUIProviderScriptFieldValue* out_Field )
{
	static UFunction* pFnGetField = NULL;

	if ( ! pFnGetField )
		pFnGetField = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.GetField" );

	UUIDynamicFieldProvider_execGetField_Parms GetField_Parms;
	memcpy ( &GetField_Parms.FieldName, &FieldName, 0x8 );

	pFnGetField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetField, &GetField_Parms, NULL );

	pFnGetField->FunctionFlags |= 0x400;

	if ( out_Field )
		memcpy ( out_Field, &GetField_Parms.out_Field, 0x40 );

	return GetField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearFields
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReinitializeRuntimeFields     ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::ClearFields ( unsigned long bReinitializeRuntimeFields )
{
	static UFunction* pFnClearFields = NULL;

	if ( ! pFnClearFields )
		pFnClearFields = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.ClearFields" );

	UUIDynamicFieldProvider_execClearFields_Parms ClearFields_Parms;
	ClearFields_Parms.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	pFnClearFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearFields, &ClearFields_Parms, NULL );

	pFnClearFields->FunctionFlags |= 0x400;

	return ClearFields_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindFieldIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bSearchPersistentFields        ( CPF_OptionalParm | CPF_Parm )

int UUIDynamicFieldProvider::FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields )
{
	static UFunction* pFnFindFieldIndex = NULL;

	if ( ! pFnFindFieldIndex )
		pFnFindFieldIndex = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.FindFieldIndex" );

	UUIDynamicFieldProvider_execFindFieldIndex_Parms FindFieldIndex_Parms;
	memcpy ( &FindFieldIndex_Parms.FieldName, &FieldName, 0x8 );
	FindFieldIndex_Parms.bSearchPersistentFields = bSearchPersistentFields;

	pFnFindFieldIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindFieldIndex, &FindFieldIndex_Parms, NULL );

	pFnFindFieldIndex->FunctionFlags |= 0x400;

	return FindFieldIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveField
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

bool UUIDynamicFieldProvider::RemoveField ( struct FName FieldName )
{
	static UFunction* pFnRemoveField = NULL;

	if ( ! pFnRemoveField )
		pFnRemoveField = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.RemoveField" );

	UUIDynamicFieldProvider_execRemoveField_Parms RemoveField_Parms;
	memcpy ( &RemoveField_Parms.FieldName, &FieldName, 0x8 );

	pFnRemoveField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveField, &RemoveField_Parms, NULL );

	pFnRemoveField->FunctionFlags |= 0x400;

	return RemoveField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.AddField
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned char                  FieldType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// int                            out_InsertPosition             ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition )
{
	static UFunction* pFnAddField = NULL;

	if ( ! pFnAddField )
		pFnAddField = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.AddField" );

	UUIDynamicFieldProvider_execAddField_Parms AddField_Parms;
	memcpy ( &AddField_Parms.FieldName, &FieldName, 0x8 );
	AddField_Parms.FieldType = FieldType;
	AddField_Parms.bPersistent = bPersistent;

	pFnAddField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddField, &AddField_Parms, NULL );

	pFnAddField->FunctionFlags |= 0x400;

	if ( out_InsertPosition )
		*out_InsertPosition = AddField_Parms.out_InsertPosition;

	return AddField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDynamicFieldProvider::InitializeRuntimeFields ( )
{
	static UFunction* pFnInitializeRuntimeFields = NULL;

	if ( ! pFnInitializeRuntimeFields )
		pFnInitializeRuntimeFields = UObject::FindObject< UFunction > ( "Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields" );

	UUIDynamicFieldProvider_execInitializeRuntimeFields_Parms InitializeRuntimeFields_Parms;

	pFnInitializeRuntimeFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeRuntimeFields, &InitializeRuntimeFields_Parms, NULL );

	pFnInitializeRuntimeFields->FunctionFlags |= 0x400;
};

// Function Engine.UIFrameBox.SetBackgroundImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ImageToSet                     ( CPF_Parm )
// class USurface*                NewImage                       ( CPF_Parm )

void UUIFrameBox::SetBackgroundImage ( unsigned char ImageToSet, class USurface* NewImage )
{
	static UFunction* pFnSetBackgroundImage = NULL;

	if ( ! pFnSetBackgroundImage )
		pFnSetBackgroundImage = UObject::FindObject< UFunction > ( "Function Engine.UIFrameBox.SetBackgroundImage" );

	UUIFrameBox_execSetBackgroundImage_Parms SetBackgroundImage_Parms;
	SetBackgroundImage_Parms.ImageToSet = ImageToSet;
	SetBackgroundImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBackgroundImage, &SetBackgroundImage_Parms, NULL );
};

// Function Engine.UIImage.SaveSubscriberValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIImage::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIImage.SaveSubscriberValue" );

	UUIImage_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIImage.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIImage::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIImage.ClearBoundDataStores" );

	UUIImage_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIImage::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIImage.GetBoundDataStores" );

	UUIImage_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIImage.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIImage::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIImage.NotifyDataStoreValueUpdated" );

	UUIImage_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.RefreshSubscriberValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIImage::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIImage.RefreshSubscriberValue" );

	UUIImage_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIImage.GetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIImage::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIImage.GetDataStoreBinding" );

	UUIImage_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIImage.SetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIImage::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIImage.SetDataStoreBinding" );

	UUIImage_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.OnSetImage
// [0x00020002] 
// Parameters infos:
// class UcUIAction_SetImage*     Action                         ( CPF_Parm )

void UUIImage::OnSetImage ( class UcUIAction_SetImage* Action )
{
	static UFunction* pFnOnSetImage = NULL;

	if ( ! pFnOnSetImage )
		pFnOnSetImage = UObject::FindObject< UFunction > ( "Function Engine.UIImage.OnSetImage" );

	UUIImage_execOnSetImage_Parms OnSetImage_Parms;
	OnSetImage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetImage, &OnSetImage_Parms, NULL );
};

// Function Engine.UIImage.SetValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIImage::SetValue ( class USurface* NewImage )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UIImage.SetValue" );

	UUIImage_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function Engine.UINumericEditBox.GetNumericValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUINumericEditBox::GetNumericValue ( )
{
	static UFunction* pFnGetNumericValue = NULL;

	if ( ! pFnGetNumericValue )
		pFnGetNumericValue = UObject::FindObject< UFunction > ( "Function Engine.UINumericEditBox.GetNumericValue" );

	UUINumericEditBox_execGetNumericValue_Parms GetNumericValue_Parms;

	pFnGetNumericValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumericValue, &GetNumericValue_Parms, NULL );

	pFnGetNumericValue->FunctionFlags |= 0x400;

	return GetNumericValue_Parms.ReturnValue;
};

// Function Engine.UINumericEditBox.SetNumericValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          NewValue                       ( CPF_Parm )
// unsigned long                  bForceRefreshString            ( CPF_OptionalParm | CPF_Parm )

bool UUINumericEditBox::SetNumericValue ( float NewValue, unsigned long bForceRefreshString )
{
	static UFunction* pFnSetNumericValue = NULL;

	if ( ! pFnSetNumericValue )
		pFnSetNumericValue = UObject::FindObject< UFunction > ( "Function Engine.UINumericEditBox.SetNumericValue" );

	UUINumericEditBox_execSetNumericValue_Parms SetNumericValue_Parms;
	SetNumericValue_Parms.NewValue = NewValue;
	SetNumericValue_Parms.bForceRefreshString = bForceRefreshString;

	pFnSetNumericValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNumericValue, &SetNumericValue_Parms, NULL );

	pFnSetNumericValue->FunctionFlags |= 0x400;

	return SetNumericValue_Parms.ReturnValue;
};

// Function Engine.UINumericEditBox.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUINumericEditBox::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UINumericEditBox.PostInitialize" );

	UUINumericEditBox_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UINumericEditBox.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUINumericEditBox::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.UINumericEditBox.Initialized" );

	UUINumericEditBox_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UINumericEditBox.DecrementValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUINumericEditBox::DecrementValue ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnDecrementValue = NULL;

	if ( ! pFnDecrementValue )
		pFnDecrementValue = UObject::FindObject< UFunction > ( "Function Engine.UINumericEditBox.DecrementValue" );

	UUINumericEditBox_execDecrementValue_Parms DecrementValue_Parms;
	DecrementValue_Parms.Sender = Sender;
	DecrementValue_Parms.PlayerIndex = PlayerIndex;

	pFnDecrementValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementValue, &DecrementValue_Parms, NULL );

	pFnDecrementValue->FunctionFlags |= 0x400;
};

// Function Engine.UINumericEditBox.IncrementValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUINumericEditBox::IncrementValue ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnIncrementValue = NULL;

	if ( ! pFnIncrementValue )
		pFnIncrementValue = UObject::FindObject< UFunction > ( "Function Engine.UINumericEditBox.IncrementValue" );

	UUINumericEditBox_execIncrementValue_Parms IncrementValue_Parms;
	IncrementValue_Parms.Sender = Sender;
	IncrementValue_Parms.PlayerIndex = PlayerIndex;

	pFnIncrementValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementValue, &IncrementValue_Parms, NULL );

	pFnIncrementValue->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionListBase.OnButtonClicked
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIOptionListBase::OnButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnOnButtonClicked = NULL;

	if ( ! pFnOnButtonClicked )
		pFnOnButtonClicked = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.OnButtonClicked" );

	UUIOptionListBase_execOnButtonClicked_Parms OnButtonClicked_Parms;
	OnButtonClicked_Parms.Sender = Sender;
	OnButtonClicked_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnButtonClicked, &OnButtonClicked_Parms, NULL );

	return OnButtonClicked_Parms.ReturnValue;
};

// Function Engine.UIOptionListBase.InitializeInternalControls
// [0x00020002] 
// Parameters infos:

void UUIOptionListBase::InitializeInternalControls ( )
{
	static UFunction* pFnInitializeInternalControls = NULL;

	if ( ! pFnInitializeInternalControls )
		pFnInitializeInternalControls = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.InitializeInternalControls" );

	UUIOptionListBase_execInitializeInternalControls_Parms InitializeInternalControls_Parms;

	this->ProcessEvent ( pFnInitializeInternalControls, &InitializeInternalControls_Parms, NULL );
};

// Function Engine.UIOptionListBase.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIOptionListBase::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.Initialized" );

	UUIOptionListBase_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIOptionListBase.Created
// [0x00020002] 
// Parameters infos:
// class UUIObject*               CreatedWidget                  ( CPF_Parm )
// class UUIScreenObject*         CreatorContainer               ( CPF_Parm )

void UUIOptionListBase::Created ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer )
{
	static UFunction* pFnCreated = NULL;

	if ( ! pFnCreated )
		pFnCreated = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.Created" );

	UUIOptionListBase_execCreated_Parms Created_Parms;
	Created_Parms.CreatedWidget = CreatedWidget;
	Created_Parms.CreatorContainer = CreatorContainer;

	this->ProcessEvent ( pFnCreated, &Created_Parms, NULL );
};

// Function Engine.UIOptionListBase.OnMoveSelectionRight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UUIOptionListBase::OnMoveSelectionRight ( int PlayerIndex )
{
	static UFunction* pFnOnMoveSelectionRight = NULL;

	if ( ! pFnOnMoveSelectionRight )
		pFnOnMoveSelectionRight = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.OnMoveSelectionRight" );

	UUIOptionListBase_execOnMoveSelectionRight_Parms OnMoveSelectionRight_Parms;
	OnMoveSelectionRight_Parms.PlayerIndex = PlayerIndex;

	pFnOnMoveSelectionRight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMoveSelectionRight, &OnMoveSelectionRight_Parms, NULL );

	pFnOnMoveSelectionRight->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionListBase.OnMoveSelectionLeft
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UUIOptionListBase::OnMoveSelectionLeft ( int PlayerIndex )
{
	static UFunction* pFnOnMoveSelectionLeft = NULL;

	if ( ! pFnOnMoveSelectionLeft )
		pFnOnMoveSelectionLeft = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.OnMoveSelectionLeft" );

	UUIOptionListBase_execOnMoveSelectionLeft_Parms OnMoveSelectionLeft_Parms;
	OnMoveSelectionLeft_Parms.PlayerIndex = PlayerIndex;

	pFnOnMoveSelectionLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMoveSelectionLeft, &OnMoveSelectionLeft_Parms, NULL );

	pFnOnMoveSelectionLeft->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionListBase.HasNextValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIOptionListBase::HasNextValue ( )
{
	static UFunction* pFnHasNextValue = NULL;

	if ( ! pFnHasNextValue )
		pFnHasNextValue = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.HasNextValue" );

	UUIOptionListBase_execHasNextValue_Parms HasNextValue_Parms;

	pFnHasNextValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasNextValue, &HasNextValue_Parms, NULL );

	pFnHasNextValue->FunctionFlags |= 0x400;

	return HasNextValue_Parms.ReturnValue;
};

// Function Engine.UIOptionListBase.HasPrevValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIOptionListBase::HasPrevValue ( )
{
	static UFunction* pFnHasPrevValue = NULL;

	if ( ! pFnHasPrevValue )
		pFnHasPrevValue = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.HasPrevValue" );

	UUIOptionListBase_execHasPrevValue_Parms HasPrevValue_Parms;

	pFnHasPrevValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasPrevValue, &HasPrevValue_Parms, NULL );

	pFnHasPrevValue->FunctionFlags |= 0x400;

	return HasPrevValue_Parms.ReturnValue;
};

// Function Engine.UIOptionListBase.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIOptionListBase::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.SaveSubscriberValue" );

	UUIOptionListBase_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIOptionListBase.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIOptionListBase::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.ClearBoundDataStores" );

	UUIOptionListBase_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionListBase.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIOptionListBase::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.GetBoundDataStores" );

	UUIOptionListBase_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIOptionListBase.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIOptionListBase::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.NotifyDataStoreValueUpdated" );

	UUIOptionListBase_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionListBase.RefreshSubscriberValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIOptionListBase::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.RefreshSubscriberValue" );

	UUIOptionListBase_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIOptionListBase.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIOptionListBase::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.GetDataStoreBinding" );

	UUIOptionListBase_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIOptionListBase.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIOptionListBase::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.SetDataStoreBinding" );

	UUIOptionListBase_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionListBase.CreateCustomIncrementButton
// [0x00120000] 
// Parameters infos:
// class UUIOptionListButton*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIOptionListBase*       ButtonOwner                    ( CPF_Parm )

class UUIOptionListButton* UUIOptionListBase::CreateCustomIncrementButton ( class UUIOptionListBase* ButtonOwner )
{
	static UFunction* pFnCreateCustomIncrementButton = NULL;

	if ( ! pFnCreateCustomIncrementButton )
		pFnCreateCustomIncrementButton = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.CreateCustomIncrementButton" );

	UUIOptionListBase_execCreateCustomIncrementButton_Parms CreateCustomIncrementButton_Parms;
	CreateCustomIncrementButton_Parms.ButtonOwner = ButtonOwner;

	this->ProcessEvent ( pFnCreateCustomIncrementButton, &CreateCustomIncrementButton_Parms, NULL );

	return CreateCustomIncrementButton_Parms.ReturnValue;
};

// Function Engine.UIOptionListBase.CreateCustomDecrementButton
// [0x00120000] 
// Parameters infos:
// class UUIOptionListButton*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIOptionListBase*       ButtonOwner                    ( CPF_Parm )

class UUIOptionListButton* UUIOptionListBase::CreateCustomDecrementButton ( class UUIOptionListBase* ButtonOwner )
{
	static UFunction* pFnCreateCustomDecrementButton = NULL;

	if ( ! pFnCreateCustomDecrementButton )
		pFnCreateCustomDecrementButton = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListBase.CreateCustomDecrementButton" );

	UUIOptionListBase_execCreateCustomDecrementButton_Parms CreateCustomDecrementButton_Parms;
	CreateCustomDecrementButton_Parms.ButtonOwner = ButtonOwner;

	this->ProcessEvent ( pFnCreateCustomDecrementButton, &CreateCustomDecrementButton_Parms, NULL );

	return CreateCustomDecrementButton_Parms.ReturnValue;
};

// Function Engine.UINumericOptionList.GetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPercentageValue               ( CPF_OptionalParm | CPF_Parm )

float UUINumericOptionList::GetValue ( unsigned long bPercentageValue )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = UObject::FindObject< UFunction > ( "Function Engine.UINumericOptionList.GetValue" );

	UUINumericOptionList_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bPercentageValue = bPercentageValue;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UINumericOptionList.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          NewValue                       ( CPF_Parm | CPF_CoerceParm )
// unsigned long                  bPercentageValue               ( CPF_OptionalParm | CPF_Parm )

bool UUINumericOptionList::SetValue ( float NewValue, unsigned long bPercentageValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UINumericOptionList.SetValue" );

	UUINumericOptionList_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.NewValue = NewValue;
	SetValue_Parms.bPercentageValue = bPercentageValue;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;

	return SetValue_Parms.ReturnValue;
};

// Function Engine.UIOptionList.OnSetListIndex
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// class UUIAction_SetListIndex*  Action                         ( CPF_Parm )

void UUIOptionList::OnSetListIndex ( class UUIAction_SetListIndex* Action )
{
	static UFunction* pFnOnSetListIndex = NULL;

	if ( ! pFnOnSetListIndex )
		pFnOnSetListIndex = UObject::FindObject< UFunction > ( "Function Engine.UIOptionList.OnSetListIndex" );

	UUIOptionList_execOnSetListIndex_Parms OnSetListIndex_Parms;
	OnSetListIndex_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetListIndex, &OnSetListIndex_Parms, NULL );
};

// Function Engine.UIOptionList.SetCurrentIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            NewIndex                       ( CPF_Parm )

void UUIOptionList::SetCurrentIndex ( int NewIndex )
{
	static UFunction* pFnSetCurrentIndex = NULL;

	if ( ! pFnSetCurrentIndex )
		pFnSetCurrentIndex = UObject::FindObject< UFunction > ( "Function Engine.UIOptionList.SetCurrentIndex" );

	UUIOptionList_execSetCurrentIndex_Parms SetCurrentIndex_Parms;
	SetCurrentIndex_Parms.NewIndex = NewIndex;

	pFnSetCurrentIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentIndex, &SetCurrentIndex_Parms, NULL );

	pFnSetCurrentIndex->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionList.GetCurrentIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIOptionList::GetCurrentIndex ( )
{
	static UFunction* pFnGetCurrentIndex = NULL;

	if ( ! pFnGetCurrentIndex )
		pFnGetCurrentIndex = UObject::FindObject< UFunction > ( "Function Engine.UIOptionList.GetCurrentIndex" );

	UUIOptionList_execGetCurrentIndex_Parms GetCurrentIndex_Parms;

	pFnGetCurrentIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentIndex, &GetCurrentIndex_Parms, NULL );

	pFnGetCurrentIndex->FunctionFlags |= 0x400;

	return GetCurrentIndex_Parms.ReturnValue;
};

// Function Engine.UIOptionList.SetNextValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIOptionList::SetNextValue ( )
{
	static UFunction* pFnSetNextValue = NULL;

	if ( ! pFnSetNextValue )
		pFnSetNextValue = UObject::FindObject< UFunction > ( "Function Engine.UIOptionList.SetNextValue" );

	UUIOptionList_execSetNextValue_Parms SetNextValue_Parms;

	pFnSetNextValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNextValue, &SetNextValue_Parms, NULL );

	pFnSetNextValue->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionList.SetPrevValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIOptionList::SetPrevValue ( )
{
	static UFunction* pFnSetPrevValue = NULL;

	if ( ! pFnSetPrevValue )
		pFnSetPrevValue = UObject::FindObject< UFunction > ( "Function Engine.UIOptionList.SetPrevValue" );

	UUIOptionList_execSetPrevValue_Parms SetPrevValue_Parms;

	pFnSetPrevValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPrevValue, &SetPrevValue_Parms, NULL );

	pFnSetPrevValue->FunctionFlags |= 0x400;
};

// Function Engine.UIOptionList.GetListValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ListIndex                      ( CPF_Parm )
// struct FString                 OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIOptionList::GetListValue ( int ListIndex, struct FString* OutValue )
{
	static UFunction* pFnGetListValue = NULL;

	if ( ! pFnGetListValue )
		pFnGetListValue = UObject::FindObject< UFunction > ( "Function Engine.UIOptionList.GetListValue" );

	UUIOptionList_execGetListValue_Parms GetListValue_Parms;
	GetListValue_Parms.ListIndex = ListIndex;

	pFnGetListValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetListValue, &GetListValue_Parms, NULL );

	pFnGetListValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetListValue_Parms.OutValue, 0xC );

	return GetListValue_Parms.ReturnValue;
};

// Function Engine.UIOptionListButton.UpdateButtonState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIOptionListButton::UpdateButtonState ( int PlayerIndex )
{
	static UFunction* pFnUpdateButtonState = NULL;

	if ( ! pFnUpdateButtonState )
		pFnUpdateButtonState = UObject::FindObject< UFunction > ( "Function Engine.UIOptionListButton.UpdateButtonState" );

	UUIOptionListButton_execUpdateButtonState_Parms UpdateButtonState_Parms;
	UpdateButtonState_Parms.PlayerIndex = PlayerIndex;

	pFnUpdateButtonState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateButtonState, &UpdateButtonState_Parms, NULL );

	pFnUpdateButtonState->FunctionFlags |= 0x400;
};

// Function Engine.UIPanel.OnSetImage
// [0x00020002] 
// Parameters infos:
// class UcUIAction_SetImage*     Action                         ( CPF_Parm )

void UUIPanel::OnSetImage ( class UcUIAction_SetImage* Action )
{
	static UFunction* pFnOnSetImage = NULL;

	if ( ! pFnOnSetImage )
		pFnOnSetImage = UObject::FindObject< UFunction > ( "Function Engine.UIPanel.OnSetImage" );

	UUIPanel_execOnSetImage_Parms OnSetImage_Parms;
	OnSetImage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetImage, &OnSetImage_Parms, NULL );
};

// Function Engine.UIPanel.SetBackgroundImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIPanel::SetBackgroundImage ( class USurface* NewImage )
{
	static UFunction* pFnSetBackgroundImage = NULL;

	if ( ! pFnSetBackgroundImage )
		pFnSetBackgroundImage = UObject::FindObject< UFunction > ( "Function Engine.UIPanel.SetBackgroundImage" );

	UUIPanel_execSetBackgroundImage_Parms SetBackgroundImage_Parms;
	SetBackgroundImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBackgroundImage, &SetBackgroundImage_Parms, NULL );
};

// Function Engine.UIPrefabInstance.DetachFromSourcePrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIPrefabInstance::DetachFromSourcePrefab ( )
{
	static UFunction* pFnDetachFromSourcePrefab = NULL;

	if ( ! pFnDetachFromSourcePrefab )
		pFnDetachFromSourcePrefab = UObject::FindObject< UFunction > ( "Function Engine.UIPrefabInstance.DetachFromSourcePrefab" );

	UUIPrefabInstance_execDetachFromSourcePrefab_Parms DetachFromSourcePrefab_Parms;

	pFnDetachFromSourcePrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachFromSourcePrefab, &DetachFromSourcePrefab_Parms, NULL );

	pFnDetachFromSourcePrefab->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.AnimEnd
// [0x00020000] 
// Parameters infos:
// class UUIObject*               AnimTarget                     ( CPF_Parm )
// int                            AnimIndex                      ( CPF_Parm )
// class UUIAnimationSeq*         AnimSeq                        ( CPF_Parm )

void UUIScene::AnimEnd ( class UUIObject* AnimTarget, int AnimIndex, class UUIAnimationSeq* AnimSeq )
{
	static UFunction* pFnAnimEnd = NULL;

	if ( ! pFnAnimEnd )
		pFnAnimEnd = UObject::FindObject< UFunction > ( "Function Engine.UIScene.AnimEnd" );

	UUIScene_execAnimEnd_Parms AnimEnd_Parms;
	AnimEnd_Parms.AnimTarget = AnimTarget;
	AnimEnd_Parms.AnimIndex = AnimIndex;
	AnimEnd_Parms.AnimSeq = AnimSeq;

	this->ProcessEvent ( pFnAnimEnd, &AnimEnd_Parms, NULL );
};

// Function Engine.UIScene.LogCurrentState
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScene::LogCurrentState ( int Indent )
{
	static UFunction* pFnLogCurrentState = NULL;

	if ( ! pFnLogCurrentState )
		pFnLogCurrentState = UObject::FindObject< UFunction > ( "Function Engine.UIScene.LogCurrentState" );

	UUIScene_execLogCurrentState_Parms LogCurrentState_Parms;
	LogCurrentState_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogCurrentState, &LogCurrentState_Parms, NULL );
};

// Function Engine.UIScene.LogRenderBounds
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScene::LogRenderBounds ( int Indent )
{
	static UFunction* pFnLogRenderBounds = NULL;

	if ( ! pFnLogRenderBounds )
		pFnLogRenderBounds = UObject::FindObject< UFunction > ( "Function Engine.UIScene.LogRenderBounds" );

	UUIScene_execLogRenderBounds_Parms LogRenderBounds_Parms;
	LogRenderBounds_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogRenderBounds, &LogRenderBounds_Parms, NULL );
};

// Function Engine.UIScene.LogDockingStack
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScene::eventLogDockingStack ( )
{
	static UFunction* pFnLogDockingStack = NULL;

	if ( ! pFnLogDockingStack )
		pFnLogDockingStack = UObject::FindObject< UFunction > ( "Function Engine.UIScene.LogDockingStack" );

	UUIScene_eventLogDockingStack_Parms LogDockingStack_Parms;

	this->ProcessEvent ( pFnLogDockingStack, &LogDockingStack_Parms, NULL );
};

// Function Engine.UIScene.CloseScene
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToClose                   ( CPF_Parm )
// unsigned long                  bSkipKismetNotify              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipAnimation                 ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::eventCloseScene ( class UUIScene* SceneToClose, unsigned long bSkipKismetNotify, unsigned long bSkipAnimation )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = UObject::FindObject< UFunction > ( "Function Engine.UIScene.CloseScene" );

	UUIScene_eventCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.SceneToClose = SceneToClose;
	CloseScene_Parms.bSkipKismetNotify = bSkipKismetNotify;
	CloseScene_Parms.bSkipAnimation = bSkipAnimation;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UIScene.OpenScene
// [0x00020002] 
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToOpen                    ( CPF_Parm )
// unsigned long                  bSkipAnimation                 ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         SceneActivatedDelegate         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         SceneDeactivatedDelegate       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class UUIScene* UUIScene::OpenScene ( class UUIScene* SceneToOpen, unsigned long bSkipAnimation, struct FScriptDelegate SceneActivatedDelegate, struct FScriptDelegate SceneDeactivatedDelegate )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = UObject::FindObject< UFunction > ( "Function Engine.UIScene.OpenScene" );

	UUIScene_execOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.SceneToOpen = SceneToOpen;
	OpenScene_Parms.bSkipAnimation = bSkipAnimation;
	memcpy ( &OpenScene_Parms.SceneActivatedDelegate, &SceneActivatedDelegate, 0xC );
	memcpy ( &OpenScene_Parms.SceneDeactivatedDelegate, &SceneDeactivatedDelegate, 0xC );

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UIScene.NotifyLinkStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bConnected                     ( CPF_Parm )

void UUIScene::NotifyLinkStatusChanged ( unsigned long bConnected )
{
	static UFunction* pFnNotifyLinkStatusChanged = NULL;

	if ( ! pFnNotifyLinkStatusChanged )
		pFnNotifyLinkStatusChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScene.NotifyLinkStatusChanged" );

	UUIScene_execNotifyLinkStatusChanged_Parms NotifyLinkStatusChanged_Parms;
	NotifyLinkStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyLinkStatusChanged, &NotifyLinkStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyOnlineServiceStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewConnectionStatus            ( CPF_Parm )

void UUIScene::NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus )
{
	static UFunction* pFnNotifyOnlineServiceStatusChanged = NULL;

	if ( ! pFnNotifyOnlineServiceStatusChanged )
		pFnNotifyOnlineServiceStatusChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScene.NotifyOnlineServiceStatusChanged" );

	UUIScene_execNotifyOnlineServiceStatusChanged_Parms NotifyOnlineServiceStatusChanged_Parms;
	NotifyOnlineServiceStatusChanged_Parms.NewConnectionStatus = NewConnectionStatus;

	this->ProcessEvent ( pFnNotifyOnlineServiceStatusChanged, &NotifyOnlineServiceStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyGameSessionEnded
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIScene::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = UObject::FindObject< UFunction > ( "Function Engine.UIScene.NotifyGameSessionEnded" );

	UUIScene_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	pFnNotifyGameSessionEnded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	pFnNotifyGameSessionEnded->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.NotifyPreClientTravel
// [0x00020000] 
// Parameters infos:
// struct FString                 TravelURL                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamless                    ( CPF_Parm )

void UUIScene::NotifyPreClientTravel ( struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamless )
{
	static UFunction* pFnNotifyPreClientTravel = NULL;

	if ( ! pFnNotifyPreClientTravel )
		pFnNotifyPreClientTravel = UObject::FindObject< UFunction > ( "Function Engine.UIScene.NotifyPreClientTravel" );

	UUIScene_execNotifyPreClientTravel_Parms NotifyPreClientTravel_Parms;
	memcpy ( &NotifyPreClientTravel_Parms.TravelURL, &TravelURL, 0xC );
	NotifyPreClientTravel_Parms.TravelType = TravelType;
	NotifyPreClientTravel_Parms.bIsSeamless = bIsSeamless;

	this->ProcessEvent ( pFnNotifyPreClientTravel, &NotifyPreClientTravel_Parms, NULL );
};

// Function Engine.UIScene.SceneCreated
// [0x00020000] 
// Parameters infos:
// class UUIScene*                CreatedScene                   ( CPF_Parm )

void UUIScene::SceneCreated ( class UUIScene* CreatedScene )
{
	static UFunction* pFnSceneCreated = NULL;

	if ( ! pFnSceneCreated )
		pFnSceneCreated = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SceneCreated" );

	UUIScene_execSceneCreated_Parms SceneCreated_Parms;
	SceneCreated_Parms.CreatedScene = CreatedScene;

	this->ProcessEvent ( pFnSceneCreated, &SceneCreated_Parms, NULL );
};

// Function Engine.UIScene.SetVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScene::SetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SetVisibility" );

	UUIScene_execSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bIsVisible = bIsVisible;

	pFnSetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );

	pFnSetVisibility->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.RemovedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUIScene::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = UObject::FindObject< UFunction > ( "Function Engine.UIScene.RemovedChild" );

	UUIScene_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UIScene.SetInputMask
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  NewInputMask                   ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScene::eventSetInputMask ( unsigned char NewInputMask, unsigned long bRecurse )
{
	static UFunction* pFnSetInputMask = NULL;

	if ( ! pFnSetInputMask )
		pFnSetInputMask = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SetInputMask" );

	UUIScene_eventSetInputMask_Parms SetInputMask_Parms;
	SetInputMask_Parms.NewInputMask = NewInputMask;
	SetInputMask_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnSetInputMask, &SetInputMask_Parms, NULL );
};

// Function Engine.UIScene.CalculateInputMask
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIScene::eventCalculateInputMask ( )
{
	static UFunction* pFnCalculateInputMask = NULL;

	if ( ! pFnCalculateInputMask )
		pFnCalculateInputMask = UObject::FindObject< UFunction > ( "Function Engine.UIScene.CalculateInputMask" );

	UUIScene_eventCalculateInputMask_Parms CalculateInputMask_Parms;

	this->ProcessEvent ( pFnCalculateInputMask, &CalculateInputMask_Parms, NULL );
};

// Function Engine.UIScene.SceneDeactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScene::eventSceneDeactivated ( )
{
	static UFunction* pFnSceneDeactivated = NULL;

	if ( ! pFnSceneDeactivated )
		pFnSceneDeactivated = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SceneDeactivated" );

	UUIScene_eventSceneDeactivated_Parms SceneDeactivated_Parms;

	this->ProcessEvent ( pFnSceneDeactivated, &SceneDeactivated_Parms, NULL );
};

// Function Engine.UIScene.SceneActivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIScene::eventSceneActivated ( unsigned long bInitialActivation )
{
	static UFunction* pFnSceneActivated = NULL;

	if ( ! pFnSceneActivated )
		pFnSceneActivated = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SceneActivated" );

	UUIScene_eventSceneActivated_Parms SceneActivated_Parms;
	SceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnSceneActivated, &SceneActivated_Parms, NULL );
};

// Function Engine.UIScene.SetActiveContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIContextMenu*          NewContextMenu                 ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScene::SetActiveContextMenu ( class UUIContextMenu* NewContextMenu, int PlayerIndex )
{
	static UFunction* pFnSetActiveContextMenu = NULL;

	if ( ! pFnSetActiveContextMenu )
		pFnSetActiveContextMenu = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SetActiveContextMenu" );

	UUIScene_execSetActiveContextMenu_Parms SetActiveContextMenu_Parms;
	SetActiveContextMenu_Parms.NewContextMenu = NewContextMenu;
	SetActiveContextMenu_Parms.PlayerIndex = PlayerIndex;

	pFnSetActiveContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveContextMenu, &SetActiveContextMenu_Parms, NULL );

	pFnSetActiveContextMenu->FunctionFlags |= 0x400;

	return SetActiveContextMenu_Parms.ReturnValue;
};

// Function Engine.UIScene.GetActiveContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIContextMenu*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIContextMenu* UUIScene::GetActiveContextMenu ( )
{
	static UFunction* pFnGetActiveContextMenu = NULL;

	if ( ! pFnGetActiveContextMenu )
		pFnGetActiveContextMenu = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetActiveContextMenu" );

	UUIScene_execGetActiveContextMenu_Parms GetActiveContextMenu_Parms;

	pFnGetActiveContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveContextMenu, &GetActiveContextMenu_Parms, NULL );

	pFnGetActiveContextMenu->FunctionFlags |= 0x400;

	return GetActiveContextMenu_Parms.ReturnValue;
};

// Function Engine.UIScene.SetActiveToolTip
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIToolTip*              NewToolTip                     ( CPF_Parm )

bool UUIScene::SetActiveToolTip ( class UUIToolTip* NewToolTip )
{
	static UFunction* pFnSetActiveToolTip = NULL;

	if ( ! pFnSetActiveToolTip )
		pFnSetActiveToolTip = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SetActiveToolTip" );

	UUIScene_execSetActiveToolTip_Parms SetActiveToolTip_Parms;
	SetActiveToolTip_Parms.NewToolTip = NewToolTip;

	pFnSetActiveToolTip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveToolTip, &SetActiveToolTip_Parms, NULL );

	pFnSetActiveToolTip->FunctionFlags |= 0x400;

	return SetActiveToolTip_Parms.ReturnValue;
};

// Function Engine.UIScene.GetActiveToolTip
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIToolTip*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIToolTip* UUIScene::GetActiveToolTip ( )
{
	static UFunction* pFnGetActiveToolTip = NULL;

	if ( ! pFnGetActiveToolTip )
		pFnGetActiveToolTip = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetActiveToolTip" );

	UUIScene_execGetActiveToolTip_Parms GetActiveToolTip_Parms;

	pFnGetActiveToolTip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveToolTip, &GetActiveToolTip_Parms, NULL );

	pFnGetActiveToolTip->FunctionFlags |= 0x400;

	return GetActiveToolTip_Parms.ReturnValue;
};

// Function Engine.UIScene.GetDefaultContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIContextMenu*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIContextMenu* UUIScene::GetDefaultContextMenu ( )
{
	static UFunction* pFnGetDefaultContextMenu = NULL;

	if ( ! pFnGetDefaultContextMenu )
		pFnGetDefaultContextMenu = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetDefaultContextMenu" );

	UUIScene_execGetDefaultContextMenu_Parms GetDefaultContextMenu_Parms;

	pFnGetDefaultContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultContextMenu, &GetDefaultContextMenu_Parms, NULL );

	pFnGetDefaultContextMenu->FunctionFlags |= 0x400;

	return GetDefaultContextMenu_Parms.ReturnValue;
};

// Function Engine.UIScene.GetDefaultToolTip
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIToolTip*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIToolTip* UUIScene::GetDefaultToolTip ( )
{
	static UFunction* pFnGetDefaultToolTip = NULL;

	if ( ! pFnGetDefaultToolTip )
		pFnGetDefaultToolTip = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetDefaultToolTip" );

	UUIScene_execGetDefaultToolTip_Parms GetDefaultToolTip_Parms;

	pFnGetDefaultToolTip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultToolTip, &GetDefaultToolTip_Parms, NULL );

	pFnGetDefaultToolTip->FunctionFlags |= 0x400;

	return GetDefaultToolTip_Parms.ReturnValue;
};

// Function Engine.UIScene.IsSceneActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bTopmostScene                  ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::IsSceneActive ( unsigned long bTopmostScene )
{
	static UFunction* pFnIsSceneActive = NULL;

	if ( ! pFnIsSceneActive )
		pFnIsSceneActive = UObject::FindObject< UFunction > ( "Function Engine.UIScene.IsSceneActive" );

	UUIScene_execIsSceneActive_Parms IsSceneActive_Parms;
	IsSceneActive_Parms.bTopmostScene = bTopmostScene;

	pFnIsSceneActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSceneActive, &IsSceneActive_Parms, NULL );

	pFnIsSceneActive->FunctionFlags |= 0x400;

	return IsSceneActive_Parms.ReturnValue;
};

// Function Engine.UIScene.GetWorldInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* UUIScene::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetWorldInfo" );

	UUIScene_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.UIScene.SetSceneInputMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewInputMode                   ( CPF_Parm )

void UUIScene::SetSceneInputMode ( unsigned char NewInputMode )
{
	static UFunction* pFnSetSceneInputMode = NULL;

	if ( ! pFnSetSceneInputMode )
		pFnSetSceneInputMode = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SetSceneInputMode" );

	UUIScene_execSetSceneInputMode_Parms SetSceneInputMode_Parms;
	SetSceneInputMode_Parms.NewInputMode = NewInputMode;

	pFnSetSceneInputMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSceneInputMode, &SetSceneInputMode_Parms, NULL );

	pFnSetSceneInputMode->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.GetPreviousScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireMatchingPlayerOwner    ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIScene::GetPreviousScene ( unsigned long bRequireMatchingPlayerOwner )
{
	static UFunction* pFnGetPreviousScene = NULL;

	if ( ! pFnGetPreviousScene )
		pFnGetPreviousScene = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetPreviousScene" );

	UUIScene_execGetPreviousScene_Parms GetPreviousScene_Parms;
	GetPreviousScene_Parms.bRequireMatchingPlayerOwner = bRequireMatchingPlayerOwner;

	pFnGetPreviousScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousScene, &GetPreviousScene_Parms, NULL );

	pFnGetPreviousScene->FunctionFlags |= 0x400;

	return GetPreviousScene_Parms.ReturnValue;
};

// Function Engine.UIScene.ResolveDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            InPlayerOwner                  ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UUIScene::ResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner )
{
	static UFunction* pFnResolveDataStore = NULL;

	if ( ! pFnResolveDataStore )
		pFnResolveDataStore = UObject::FindObject< UFunction > ( "Function Engine.UIScene.ResolveDataStore" );

	UUIScene_execResolveDataStore_Parms ResolveDataStore_Parms;
	memcpy ( &ResolveDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	ResolveDataStore_Parms.InPlayerOwner = InPlayerOwner;

	pFnResolveDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveDataStore, &ResolveDataStore_Parms, NULL );

	pFnResolveDataStore->FunctionFlags |= 0x400;

	return ResolveDataStore_Parms.ReturnValue;
};

// Function Engine.UIScene.UnbindSubscribers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::UnbindSubscribers ( )
{
	static UFunction* pFnUnbindSubscribers = NULL;

	if ( ! pFnUnbindSubscribers )
		pFnUnbindSubscribers = UObject::FindObject< UFunction > ( "Function Engine.UIScene.UnbindSubscribers" );

	UUIScene_execUnbindSubscribers_Parms UnbindSubscribers_Parms;

	pFnUnbindSubscribers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnbindSubscribers, &UnbindSubscribers_Parms, NULL );

	pFnUnbindSubscribers->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.SaveSceneDataValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bUnbindSubscribers             ( CPF_OptionalParm | CPF_Parm )

void UUIScene::SaveSceneDataValues ( unsigned long bUnbindSubscribers )
{
	static UFunction* pFnSaveSceneDataValues = NULL;

	if ( ! pFnSaveSceneDataValues )
		pFnSaveSceneDataValues = UObject::FindObject< UFunction > ( "Function Engine.UIScene.SaveSceneDataValues" );

	UUIScene_execSaveSceneDataValues_Parms SaveSceneDataValues_Parms;
	SaveSceneDataValues_Parms.bUnbindSubscribers = bUnbindSubscribers;

	pFnSaveSceneDataValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSceneDataValues, &SaveSceneDataValues_Parms, NULL );

	pFnSaveSceneDataValues->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.LoadSceneDataValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::LoadSceneDataValues ( )
{
	static UFunction* pFnLoadSceneDataValues = NULL;

	if ( ! pFnLoadSceneDataValues )
		pFnLoadSceneDataValues = UObject::FindObject< UFunction > ( "Function Engine.UIScene.LoadSceneDataValues" );

	UUIScene_execLoadSceneDataValues_Parms LoadSceneDataValues_Parms;

	pFnLoadSceneDataValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadSceneDataValues, &LoadSceneDataValues_Parms, NULL );

	pFnLoadSceneDataValues->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.GetSceneDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USceneDataStore*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USceneDataStore* UUIScene::GetSceneDataStore ( )
{
	static UFunction* pFnGetSceneDataStore = NULL;

	if ( ! pFnGetSceneDataStore )
		pFnGetSceneDataStore = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetSceneDataStore" );

	UUIScene_execGetSceneDataStore_Parms GetSceneDataStore_Parms;

	pFnGetSceneDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneDataStore, &GetSceneDataStore_Parms, NULL );

	pFnGetSceneDataStore->FunctionFlags |= 0x400;

	return GetSceneDataStore_Parms.ReturnValue;
};

// Function Engine.UIScene.FindTickableObjectIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITickableObject*       ObjectToFind                   ( CPF_Parm )

int UUIScene::FindTickableObjectIndex ( class UUITickableObject* ObjectToFind )
{
	static UFunction* pFnFindTickableObjectIndex = NULL;

	if ( ! pFnFindTickableObjectIndex )
		pFnFindTickableObjectIndex = UObject::FindObject< UFunction > ( "Function Engine.UIScene.FindTickableObjectIndex" );

	UUIScene_execFindTickableObjectIndex_Parms FindTickableObjectIndex_Parms;
	FindTickableObjectIndex_Parms.ObjectToFind = ObjectToFind;

	pFnFindTickableObjectIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTickableObjectIndex, &FindTickableObjectIndex_Parms, NULL );

	pFnFindTickableObjectIndex->FunctionFlags |= 0x400;

	return FindTickableObjectIndex_Parms.ReturnValue;
};

// Function Engine.UIScene.UnregisterTickableObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITickableObject*       ObjectToRemove                 ( CPF_Parm )

bool UUIScene::UnregisterTickableObject ( class UUITickableObject* ObjectToRemove )
{
	static UFunction* pFnUnregisterTickableObject = NULL;

	if ( ! pFnUnregisterTickableObject )
		pFnUnregisterTickableObject = UObject::FindObject< UFunction > ( "Function Engine.UIScene.UnregisterTickableObject" );

	UUIScene_execUnregisterTickableObject_Parms UnregisterTickableObject_Parms;
	UnregisterTickableObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnUnregisterTickableObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterTickableObject, &UnregisterTickableObject_Parms, NULL );

	pFnUnregisterTickableObject->FunctionFlags |= 0x400;

	return UnregisterTickableObject_Parms.ReturnValue;
};

// Function Engine.UIScene.RegisterTickableObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITickableObject*       ObjectToRegister               ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::RegisterTickableObject ( class UUITickableObject* ObjectToRegister, int InsertIndex )
{
	static UFunction* pFnRegisterTickableObject = NULL;

	if ( ! pFnRegisterTickableObject )
		pFnRegisterTickableObject = UObject::FindObject< UFunction > ( "Function Engine.UIScene.RegisterTickableObject" );

	UUIScene_execRegisterTickableObject_Parms RegisterTickableObject_Parms;
	RegisterTickableObject_Parms.ObjectToRegister = ObjectToRegister;
	RegisterTickableObject_Parms.InsertIndex = InsertIndex;

	pFnRegisterTickableObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterTickableObject, &RegisterTickableObject_Parms, NULL );

	pFnRegisterTickableObject->FunctionFlags |= 0x400;

	return RegisterTickableObject_Parms.ReturnValue;
};

// Function Engine.UIScene.ResolveScenePositions
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::ResolveScenePositions ( )
{
	static UFunction* pFnResolveScenePositions = NULL;

	if ( ! pFnResolveScenePositions )
		pFnResolveScenePositions = UObject::FindObject< UFunction > ( "Function Engine.UIScene.ResolveScenePositions" );

	UUIScene_execResolveScenePositions_Parms ResolveScenePositions_Parms;

	pFnResolveScenePositions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveScenePositions, &ResolveScenePositions_Parms, NULL );

	pFnResolveScenePositions->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.RebuildDockingStack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::RebuildDockingStack ( )
{
	static UFunction* pFnRebuildDockingStack = NULL;

	if ( ! pFnRebuildDockingStack )
		pFnRebuildDockingStack = UObject::FindObject< UFunction > ( "Function Engine.UIScene.RebuildDockingStack" );

	UUIScene_execRebuildDockingStack_Parms RebuildDockingStack_Parms;

	pFnRebuildDockingStack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildDockingStack, &RebuildDockingStack_Parms, NULL );

	pFnRebuildDockingStack->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.ForceImmediateSceneUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::ForceImmediateSceneUpdate ( )
{
	static UFunction* pFnForceImmediateSceneUpdate = NULL;

	if ( ! pFnForceImmediateSceneUpdate )
		pFnForceImmediateSceneUpdate = UObject::FindObject< UFunction > ( "Function Engine.UIScene.ForceImmediateSceneUpdate" );

	UUIScene_execForceImmediateSceneUpdate_Parms ForceImmediateSceneUpdate_Parms;

	pFnForceImmediateSceneUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceImmediateSceneUpdate, &ForceImmediateSceneUpdate_Parms, NULL );

	pFnForceImmediateSceneUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.ShouldModulateBackgroundAlpha
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AlphaModulationPercent         ( CPF_Parm | CPF_OutParm )

bool UUIScene::ShouldModulateBackgroundAlpha ( float* AlphaModulationPercent )
{
	static UFunction* pFnShouldModulateBackgroundAlpha = NULL;

	if ( ! pFnShouldModulateBackgroundAlpha )
		pFnShouldModulateBackgroundAlpha = UObject::FindObject< UFunction > ( "Function Engine.UIScene.ShouldModulateBackgroundAlpha" );

	UUIScene_execShouldModulateBackgroundAlpha_Parms ShouldModulateBackgroundAlpha_Parms;

	this->ProcessEvent ( pFnShouldModulateBackgroundAlpha, &ShouldModulateBackgroundAlpha_Parms, NULL );

	if ( AlphaModulationPercent )
		*AlphaModulationPercent = ShouldModulateBackgroundAlpha_Parms.AlphaModulationPercent;

	return ShouldModulateBackgroundAlpha_Parms.ReturnValue;
};

// Function Engine.UIScene.OnTopSceneChanged
// [0x00120000] 
// Parameters infos:
// class UUIScene*                NewTopScene                    ( CPF_Parm )

void UUIScene::OnTopSceneChanged ( class UUIScene* NewTopScene )
{
	static UFunction* pFnOnTopSceneChanged = NULL;

	if ( ! pFnOnTopSceneChanged )
		pFnOnTopSceneChanged = UObject::FindObject< UFunction > ( "Function Engine.UIScene.OnTopSceneChanged" );

	UUIScene_execOnTopSceneChanged_Parms OnTopSceneChanged_Parms;
	OnTopSceneChanged_Parms.NewTopScene = NewTopScene;

	this->ProcessEvent ( pFnOnTopSceneChanged, &OnTopSceneChanged_Parms, NULL );
};

// Function Engine.UIScene.OnSceneDeactivated
// [0x00120000] 
// Parameters infos:
// class UUIScene*                DeactivatedScene               ( CPF_Parm )

void UUIScene::OnSceneDeactivated ( class UUIScene* DeactivatedScene )
{
	static UFunction* pFnOnSceneDeactivated = NULL;

	if ( ! pFnOnSceneDeactivated )
		pFnOnSceneDeactivated = UObject::FindObject< UFunction > ( "Function Engine.UIScene.OnSceneDeactivated" );

	UUIScene_execOnSceneDeactivated_Parms OnSceneDeactivated_Parms;
	OnSceneDeactivated_Parms.DeactivatedScene = DeactivatedScene;

	this->ProcessEvent ( pFnOnSceneDeactivated, &OnSceneDeactivated_Parms, NULL );
};

// Function Engine.UIScene.OnSceneActivated
// [0x00120000] 
// Parameters infos:
// class UUIScene*                ActivatedScene                 ( CPF_Parm )
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIScene::OnSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation )
{
	static UFunction* pFnOnSceneActivated = NULL;

	if ( ! pFnOnSceneActivated )
		pFnOnSceneActivated = UObject::FindObject< UFunction > ( "Function Engine.UIScene.OnSceneActivated" );

	UUIScene_execOnSceneActivated_Parms OnSceneActivated_Parms;
	OnSceneActivated_Parms.ActivatedScene = ActivatedScene;
	OnSceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnOnSceneActivated, &OnSceneActivated_Parms, NULL );
};

// Function Engine.UIScene.GetSceneInputMode
// [0x00120002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScene::GetSceneInputMode ( )
{
	static UFunction* pFnGetSceneInputMode = NULL;

	if ( ! pFnGetSceneInputMode )
		pFnGetSceneInputMode = UObject::FindObject< UFunction > ( "Function Engine.UIScene.GetSceneInputMode" );

	UUIScene_execGetSceneInputMode_Parms GetSceneInputMode_Parms;

	this->ProcessEvent ( pFnGetSceneInputMode, &GetSceneInputMode_Parms, NULL );

	return GetSceneInputMode_Parms.ReturnValue;
};

// Function Engine.UIProgressBar.OnSetImage
// [0x00020002] 
// Parameters infos:
// class UcUIAction_SetImage*     Action                         ( CPF_Parm )

void UUIProgressBar::OnSetImage ( class UcUIAction_SetImage* Action )
{
	static UFunction* pFnOnSetImage = NULL;

	if ( ! pFnOnSetImage )
		pFnOnSetImage = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.OnSetImage" );

	UUIProgressBar_execOnSetImage_Parms OnSetImage_Parms;
	OnSetImage_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetImage, &OnSetImage_Parms, NULL );
};

// Function Engine.UIProgressBar.SetOverlayImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIProgressBar::SetOverlayImage ( class USurface* NewImage )
{
	static UFunction* pFnSetOverlayImage = NULL;

	if ( ! pFnSetOverlayImage )
		pFnSetOverlayImage = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.SetOverlayImage" );

	UUIProgressBar_execSetOverlayImage_Parms SetOverlayImage_Parms;
	SetOverlayImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetOverlayImage, &SetOverlayImage_Parms, NULL );
};

// Function Engine.UIProgressBar.SetFillImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIProgressBar::SetFillImage ( class USurface* NewImage )
{
	static UFunction* pFnSetFillImage = NULL;

	if ( ! pFnSetFillImage )
		pFnSetFillImage = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.SetFillImage" );

	UUIProgressBar_execSetFillImage_Parms SetFillImage_Parms;
	SetFillImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetFillImage, &SetFillImage_Parms, NULL );
};

// Function Engine.UIProgressBar.SetBackgroundImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIProgressBar::SetBackgroundImage ( class USurface* NewImage )
{
	static UFunction* pFnSetBackgroundImage = NULL;

	if ( ! pFnSetBackgroundImage )
		pFnSetBackgroundImage = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.SetBackgroundImage" );

	UUIProgressBar_execSetBackgroundImage_Parms SetBackgroundImage_Parms;
	SetBackgroundImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBackgroundImage, &SetBackgroundImage_Parms, NULL );
};

// Function Engine.UIProgressBar.GetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPercentageValue               ( CPF_OptionalParm | CPF_Parm )

float UUIProgressBar::GetValue ( unsigned long bPercentageValue )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.GetValue" );

	UUIProgressBar_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bPercentageValue = bPercentageValue;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIProgressBar.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          NewValue                       ( CPF_Parm | CPF_CoerceParm )
// unsigned long                  bPercentageValue               ( CPF_OptionalParm | CPF_Parm )

bool UUIProgressBar::SetValue ( float NewValue, unsigned long bPercentageValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.SetValue" );

	UUIProgressBar_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.NewValue = NewValue;
	SetValue_Parms.bPercentageValue = bPercentageValue;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;

	return SetValue_Parms.ReturnValue;
};

// Function Engine.UIProgressBar.SaveSubscriberValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIProgressBar::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.SaveSubscriberValue" );

	UUIProgressBar_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIProgressBar.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIProgressBar::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.ClearBoundDataStores" );

	UUIProgressBar_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIProgressBar.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIProgressBar::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.GetBoundDataStores" );

	UUIProgressBar_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIProgressBar.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIProgressBar::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.NotifyDataStoreValueUpdated" );

	UUIProgressBar_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIProgressBar.RefreshSubscriberValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIProgressBar::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.RefreshSubscriberValue" );

	UUIProgressBar_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIProgressBar.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIProgressBar::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.GetDataStoreBinding" );

	UUIProgressBar_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIProgressBar.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIProgressBar::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.SetDataStoreBinding" );

	UUIProgressBar_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIProgressBar.OnGetProgressBarValue
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// class UUIAction_GetProgressBarValue* Action                         ( CPF_Parm )

void UUIProgressBar::OnGetProgressBarValue ( class UUIAction_GetProgressBarValue* Action )
{
	static UFunction* pFnOnGetProgressBarValue = NULL;

	if ( ! pFnOnGetProgressBarValue )
		pFnOnGetProgressBarValue = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.OnGetProgressBarValue" );

	UUIProgressBar_execOnGetProgressBarValue_Parms OnGetProgressBarValue_Parms;
	OnGetProgressBarValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetProgressBarValue, &OnGetProgressBarValue_Parms, NULL );
};

// Function Engine.UIProgressBar.OnSetProgressBarValue
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// class UUIAction_SetProgressBarValue* Action                         ( CPF_Parm )

void UUIProgressBar::OnSetProgressBarValue ( class UUIAction_SetProgressBarValue* Action )
{
	static UFunction* pFnOnSetProgressBarValue = NULL;

	if ( ! pFnOnSetProgressBarValue )
		pFnOnSetProgressBarValue = UObject::FindObject< UFunction > ( "Function Engine.UIProgressBar.OnSetProgressBarValue" );

	UUIProgressBar_execOnSetProgressBarValue_Parms OnSetProgressBarValue_Parms;
	OnSetProgressBarValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetProgressBarValue, &OnSetProgressBarValue_Parms, NULL );
};

// Function Engine.UIScrollbar.GetMarkerSizePercent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetMarkerSizePercent ( )
{
	static UFunction* pFnGetMarkerSizePercent = NULL;

	if ( ! pFnGetMarkerSizePercent )
		pFnGetMarkerSizePercent = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.GetMarkerSizePercent" );

	UUIScrollbar_execGetMarkerSizePercent_Parms GetMarkerSizePercent_Parms;

	this->ProcessEvent ( pFnGetMarkerSizePercent, &GetMarkerSizePercent_Parms, NULL );

	return GetMarkerSizePercent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetMarkerPosPercent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetMarkerPosPercent ( )
{
	static UFunction* pFnGetMarkerPosPercent = NULL;

	if ( ! pFnGetMarkerPosPercent )
		pFnGetMarkerPosPercent = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.GetMarkerPosPercent" );

	UUIScrollbar_execGetMarkerPosPercent_Parms GetMarkerPosPercent_Parms;

	this->ProcessEvent ( pFnGetMarkerPosPercent, &GetMarkerPosPercent_Parms, NULL );

	return GetMarkerPosPercent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetNudgePercent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetNudgePercent ( )
{
	static UFunction* pFnGetNudgePercent = NULL;

	if ( ! pFnGetNudgePercent )
		pFnGetNudgePercent = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.GetNudgePercent" );

	UUIScrollbar_execGetNudgePercent_Parms GetNudgePercent_Parms;

	this->ProcessEvent ( pFnGetNudgePercent, &GetNudgePercent_Parms, NULL );

	return GetNudgePercent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetNudgeValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetNudgeValue ( )
{
	static UFunction* pFnGetNudgeValue = NULL;

	if ( ! pFnGetNudgeValue )
		pFnGetNudgeValue = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.GetNudgeValue" );

	UUIScrollbar_execGetNudgeValue_Parms GetNudgeValue_Parms;

	this->ProcessEvent ( pFnGetNudgeValue, &GetNudgeValue_Parms, NULL );

	return GetNudgeValue_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScrollbar::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.PostInitialize" );

	UUIScrollbar_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIScrollbar.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScrollbar::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.Initialized" );

	UUIScrollbar_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIScrollbar.DragScroll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScrollbarMarkerButton* Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::DragScroll ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex )
{
	static UFunction* pFnDragScroll = NULL;

	if ( ! pFnDragScroll )
		pFnDragScroll = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.DragScroll" );

	UUIScrollbar_execDragScroll_Parms DragScroll_Parms;
	DragScroll_Parms.Sender = Sender;
	DragScroll_Parms.PlayerIndex = PlayerIndex;

	pFnDragScroll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDragScroll, &DragScroll_Parms, NULL );

	pFnDragScroll->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.DragScrollEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::DragScrollEnd ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnDragScrollEnd = NULL;

	if ( ! pFnDragScrollEnd )
		pFnDragScrollEnd = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.DragScrollEnd" );

	UUIScrollbar_execDragScrollEnd_Parms DragScrollEnd_Parms;
	DragScrollEnd_Parms.Sender = Sender;
	DragScrollEnd_Parms.PlayerIndex = PlayerIndex;

	pFnDragScrollEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDragScrollEnd, &DragScrollEnd_Parms, NULL );

	pFnDragScrollEnd->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.DragScrollBegin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::DragScrollBegin ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnDragScrollBegin = NULL;

	if ( ! pFnDragScrollBegin )
		pFnDragScrollBegin = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.DragScrollBegin" );

	UUIScrollbar_execDragScrollBegin_Parms DragScrollBegin_Parms;
	DragScrollBegin_Parms.Sender = Sender;
	DragScrollBegin_Parms.PlayerIndex = PlayerIndex;

	pFnDragScrollBegin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDragScrollBegin, &DragScrollBegin_Parms, NULL );

	pFnDragScrollBegin->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.ScrollDecrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::ScrollDecrement ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnScrollDecrement = NULL;

	if ( ! pFnScrollDecrement )
		pFnScrollDecrement = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.ScrollDecrement" );

	UUIScrollbar_execScrollDecrement_Parms ScrollDecrement_Parms;
	ScrollDecrement_Parms.Sender = Sender;
	ScrollDecrement_Parms.PlayerIndex = PlayerIndex;

	pFnScrollDecrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollDecrement, &ScrollDecrement_Parms, NULL );

	pFnScrollDecrement->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.ScrollIncrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::ScrollIncrement ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnScrollIncrement = NULL;

	if ( ! pFnScrollIncrement )
		pFnScrollIncrement = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.ScrollIncrement" );

	UUIScrollbar_execScrollIncrement_Parms ScrollIncrement_Parms;
	ScrollIncrement_Parms.Sender = Sender;
	ScrollIncrement_Parms.PlayerIndex = PlayerIndex;

	pFnScrollIncrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollIncrement, &ScrollIncrement_Parms, NULL );

	pFnScrollIncrement->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.EnableCornerPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  FlagValue                      ( CPF_Parm )

void UUIScrollbar::EnableCornerPadding ( unsigned long FlagValue )
{
	static UFunction* pFnEnableCornerPadding = NULL;

	if ( ! pFnEnableCornerPadding )
		pFnEnableCornerPadding = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.EnableCornerPadding" );

	UUIScrollbar_execEnableCornerPadding_Parms EnableCornerPadding_Parms;
	EnableCornerPadding_Parms.FlagValue = FlagValue;

	pFnEnableCornerPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCornerPadding, &EnableCornerPadding_Parms, NULL );

	pFnEnableCornerPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetNudgeSizePixels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NudgePixels                    ( CPF_Parm )

void UUIScrollbar::SetNudgeSizePixels ( float NudgePixels )
{
	static UFunction* pFnSetNudgeSizePixels = NULL;

	if ( ! pFnSetNudgeSizePixels )
		pFnSetNudgeSizePixels = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.SetNudgeSizePixels" );

	UUIScrollbar_execSetNudgeSizePixels_Parms SetNudgeSizePixels_Parms;
	SetNudgeSizePixels_Parms.NudgePixels = NudgePixels;

	pFnSetNudgeSizePixels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNudgeSizePixels, &SetNudgeSizePixels_Parms, NULL );

	pFnSetNudgeSizePixels->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetNudgeSizePercent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NudgePercentage                ( CPF_Parm )

void UUIScrollbar::SetNudgeSizePercent ( float NudgePercentage )
{
	static UFunction* pFnSetNudgeSizePercent = NULL;

	if ( ! pFnSetNudgeSizePercent )
		pFnSetNudgeSizePercent = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.SetNudgeSizePercent" );

	UUIScrollbar_execSetNudgeSizePercent_Parms SetNudgeSizePercent_Parms;
	SetNudgeSizePercent_Parms.NudgePercentage = NudgePercentage;

	pFnSetNudgeSizePercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNudgeSizePercent, &SetNudgeSizePercent_Parms, NULL );

	pFnSetNudgeSizePercent->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetMarkerPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          PositionPercentage             ( CPF_Parm )

void UUIScrollbar::SetMarkerPosition ( float PositionPercentage )
{
	static UFunction* pFnSetMarkerPosition = NULL;

	if ( ! pFnSetMarkerPosition )
		pFnSetMarkerPosition = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.SetMarkerPosition" );

	UUIScrollbar_execSetMarkerPosition_Parms SetMarkerPosition_Parms;
	SetMarkerPosition_Parms.PositionPercentage = PositionPercentage;

	pFnSetMarkerPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMarkerPosition, &SetMarkerPosition_Parms, NULL );

	pFnSetMarkerPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetMarkerSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          SizePercentage                 ( CPF_Parm )

void UUIScrollbar::SetMarkerSize ( float SizePercentage )
{
	static UFunction* pFnSetMarkerSize = NULL;

	if ( ! pFnSetMarkerSize )
		pFnSetMarkerSize = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.SetMarkerSize" );

	UUIScrollbar_execSetMarkerSize_Parms SetMarkerSize_Parms;
	SetMarkerSize_Parms.SizePercentage = SizePercentage;

	pFnSetMarkerSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMarkerSize, &SetMarkerSize_Parms, NULL );

	pFnSetMarkerSize->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.GetScrollZoneWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetScrollZoneWidth ( )
{
	static UFunction* pFnGetScrollZoneWidth = NULL;

	if ( ! pFnGetScrollZoneWidth )
		pFnGetScrollZoneWidth = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.GetScrollZoneWidth" );

	UUIScrollbar_execGetScrollZoneWidth_Parms GetScrollZoneWidth_Parms;

	pFnGetScrollZoneWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScrollZoneWidth, &GetScrollZoneWidth_Parms, NULL );

	pFnGetScrollZoneWidth->FunctionFlags |= 0x400;

	return GetScrollZoneWidth_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetScrollZoneExtent
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ScrollZoneStart                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

float UUIScrollbar::GetScrollZoneExtent ( float* ScrollZoneStart )
{
	static UFunction* pFnGetScrollZoneExtent = NULL;

	if ( ! pFnGetScrollZoneExtent )
		pFnGetScrollZoneExtent = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.GetScrollZoneExtent" );

	UUIScrollbar_execGetScrollZoneExtent_Parms GetScrollZoneExtent_Parms;

	pFnGetScrollZoneExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScrollZoneExtent, &GetScrollZoneExtent_Parms, NULL );

	pFnGetScrollZoneExtent->FunctionFlags |= 0x400;

	if ( ScrollZoneStart )
		*ScrollZoneStart = GetScrollZoneExtent_Parms.ScrollZoneStart;

	return GetScrollZoneExtent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetMarkerButtonPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetMarkerButtonPosition ( )
{
	static UFunction* pFnGetMarkerButtonPosition = NULL;

	if ( ! pFnGetMarkerButtonPosition )
		pFnGetMarkerButtonPosition = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.GetMarkerButtonPosition" );

	UUIScrollbar_execGetMarkerButtonPosition_Parms GetMarkerButtonPosition_Parms;

	pFnGetMarkerButtonPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMarkerButtonPosition, &GetMarkerButtonPosition_Parms, NULL );

	pFnGetMarkerButtonPosition->FunctionFlags |= 0x400;

	return GetMarkerButtonPosition_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.OnClickedScrollZone
// [0x00120000] 
// Parameters infos:
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionPerc                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::OnClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex )
{
	static UFunction* pFnOnClickedScrollZone = NULL;

	if ( ! pFnOnClickedScrollZone )
		pFnOnClickedScrollZone = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.OnClickedScrollZone" );

	UUIScrollbar_execOnClickedScrollZone_Parms OnClickedScrollZone_Parms;
	OnClickedScrollZone_Parms.Sender = Sender;
	OnClickedScrollZone_Parms.PositionPerc = PositionPerc;
	OnClickedScrollZone_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnClickedScrollZone, &OnClickedScrollZone_Parms, NULL );
};

// Function Engine.UIScrollbar.OnScrollActivity
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionChange                 ( CPF_Parm )
// unsigned long                  bPositionMaxed                 ( CPF_OptionalParm | CPF_Parm )

bool UUIScrollbar::OnScrollActivity ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed )
{
	static UFunction* pFnOnScrollActivity = NULL;

	if ( ! pFnOnScrollActivity )
		pFnOnScrollActivity = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbar.OnScrollActivity" );

	UUIScrollbar_execOnScrollActivity_Parms OnScrollActivity_Parms;
	OnScrollActivity_Parms.Sender = Sender;
	OnScrollActivity_Parms.PositionChange = PositionChange;
	OnScrollActivity_Parms.bPositionMaxed = bPositionMaxed;

	this->ProcessEvent ( pFnOnScrollActivity, &OnScrollActivity_Parms, NULL );

	return OnScrollActivity_Parms.ReturnValue;
};

// Function Engine.UIScrollbarMarkerButton.OnButtonDragged
// [0x00120000] 
// Parameters infos:
// class UUIScrollbarMarkerButton* Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbarMarkerButton::OnButtonDragged ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex )
{
	static UFunction* pFnOnButtonDragged = NULL;

	if ( ! pFnOnButtonDragged )
		pFnOnButtonDragged = UObject::FindObject< UFunction > ( "Function Engine.UIScrollbarMarkerButton.OnButtonDragged" );

	UUIScrollbarMarkerButton_execOnButtonDragged_Parms OnButtonDragged_Parms;
	OnButtonDragged_Parms.Sender = Sender;
	OnButtonDragged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnButtonDragged, &OnButtonDragged_Parms, NULL );
};

// Function Engine.UIScrollFrame.OnApplyScrolling
// [0x00020002] 
// Parameters infos:
// class UUIAction_ApplyScrolling* Action                         ( CPF_Parm )

void UUIScrollFrame::OnApplyScrolling ( class UUIAction_ApplyScrolling* Action )
{
	static UFunction* pFnOnApplyScrolling = NULL;

	if ( ! pFnOnApplyScrolling )
		pFnOnApplyScrolling = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.OnApplyScrolling" );

	UUIScrollFrame_execOnApplyScrolling_Parms OnApplyScrolling_Parms;
	OnApplyScrolling_Parms.Action = Action;

	this->ProcessEvent ( pFnOnApplyScrolling, &OnApplyScrolling_Parms, NULL );
};

// Function Engine.UIScrollFrame.ScrollZoneClicked
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionPerc                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollFrame::eventScrollZoneClicked ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex )
{
	static UFunction* pFnScrollZoneClicked = NULL;

	if ( ! pFnScrollZoneClicked )
		pFnScrollZoneClicked = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.ScrollZoneClicked" );

	UUIScrollFrame_eventScrollZoneClicked_Parms ScrollZoneClicked_Parms;
	ScrollZoneClicked_Parms.Sender = Sender;
	ScrollZoneClicked_Parms.PositionPerc = PositionPerc;
	ScrollZoneClicked_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnScrollZoneClicked, &ScrollZoneClicked_Parms, NULL );
};

// Function Engine.UIScrollFrame.OnChildRepositioned
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UUIScrollFrame::OnChildRepositioned ( class UUIScreenObject* Sender )
{
	static UFunction* pFnOnChildRepositioned = NULL;

	if ( ! pFnOnChildRepositioned )
		pFnOnChildRepositioned = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.OnChildRepositioned" );

	UUIScrollFrame_execOnChildRepositioned_Parms OnChildRepositioned_Parms;
	OnChildRepositioned_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnChildRepositioned, &OnChildRepositioned_Parms, NULL );
};

// Function Engine.UIScrollFrame.RemovedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUIScrollFrame::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.RemovedChild" );

	UUIScrollFrame_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UIScrollFrame.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUIScrollFrame::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.AddedChild" );

	UUIScrollFrame_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UIScrollFrame.GetVisibleRegionPercentage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

float UUIScrollFrame::GetVisibleRegionPercentage ( unsigned char Orientation )
{
	static UFunction* pFnGetVisibleRegionPercentage = NULL;

	if ( ! pFnGetVisibleRegionPercentage )
		pFnGetVisibleRegionPercentage = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.GetVisibleRegionPercentage" );

	UUIScrollFrame_execGetVisibleRegionPercentage_Parms GetVisibleRegionPercentage_Parms;
	GetVisibleRegionPercentage_Parms.Orientation = Orientation;

	pFnGetVisibleRegionPercentage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVisibleRegionPercentage, &GetVisibleRegionPercentage_Parms, NULL );

	pFnGetVisibleRegionPercentage->FunctionFlags |= 0x400;

	return GetVisibleRegionPercentage_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.GetClipRegion
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          MinX                           ( CPF_Parm | CPF_OutParm )
// float                          MinY                           ( CPF_Parm | CPF_OutParm )
// float                          MaxX                           ( CPF_Parm | CPF_OutParm )
// float                          MaxY                           ( CPF_Parm | CPF_OutParm )

void UUIScrollFrame::GetClipRegion ( float* MinX, float* MinY, float* MaxX, float* MaxY )
{
	static UFunction* pFnGetClipRegion = NULL;

	if ( ! pFnGetClipRegion )
		pFnGetClipRegion = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.GetClipRegion" );

	UUIScrollFrame_execGetClipRegion_Parms GetClipRegion_Parms;

	pFnGetClipRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClipRegion, &GetClipRegion_Parms, NULL );

	pFnGetClipRegion->FunctionFlags |= 0x400;

	if ( MinX )
		*MinX = GetClipRegion_Parms.MinX;

	if ( MinY )
		*MinY = GetClipRegion_Parms.MinY;

	if ( MaxX )
		*MaxX = GetClipRegion_Parms.MaxX;

	if ( MaxY )
		*MaxY = GetClipRegion_Parms.MaxY;
};

// Function Engine.UIScrollFrame.GetClientRegionSizeVector
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D UUIScrollFrame::GetClientRegionSizeVector ( )
{
	static UFunction* pFnGetClientRegionSizeVector = NULL;

	if ( ! pFnGetClientRegionSizeVector )
		pFnGetClientRegionSizeVector = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.GetClientRegionSizeVector" );

	UUIScrollFrame_execGetClientRegionSizeVector_Parms GetClientRegionSizeVector_Parms;

	pFnGetClientRegionSizeVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClientRegionSizeVector, &GetClientRegionSizeVector_Parms, NULL );

	pFnGetClientRegionSizeVector->FunctionFlags |= 0x400;

	return GetClientRegionSizeVector_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.GetClientRegionPositionVector
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D UUIScrollFrame::GetClientRegionPositionVector ( )
{
	static UFunction* pFnGetClientRegionPositionVector = NULL;

	if ( ! pFnGetClientRegionPositionVector )
		pFnGetClientRegionPositionVector = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.GetClientRegionPositionVector" );

	UUIScrollFrame_execGetClientRegionPositionVector_Parms GetClientRegionPositionVector_Parms;

	pFnGetClientRegionPositionVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClientRegionPositionVector, &GetClientRegionPositionVector_Parms, NULL );

	pFnGetClientRegionPositionVector->FunctionFlags |= 0x400;

	return GetClientRegionPositionVector_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.GetClientRegionSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

float UUIScrollFrame::GetClientRegionSize ( unsigned char Orientation )
{
	static UFunction* pFnGetClientRegionSize = NULL;

	if ( ! pFnGetClientRegionSize )
		pFnGetClientRegionSize = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.GetClientRegionSize" );

	UUIScrollFrame_execGetClientRegionSize_Parms GetClientRegionSize_Parms;
	GetClientRegionSize_Parms.Orientation = Orientation;

	pFnGetClientRegionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClientRegionSize, &GetClientRegionSize_Parms, NULL );

	pFnGetClientRegionSize->FunctionFlags |= 0x400;

	return GetClientRegionSize_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.GetClientRegionPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

float UUIScrollFrame::GetClientRegionPosition ( unsigned char Orientation )
{
	static UFunction* pFnGetClientRegionPosition = NULL;

	if ( ! pFnGetClientRegionPosition )
		pFnGetClientRegionPosition = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.GetClientRegionPosition" );

	UUIScrollFrame_execGetClientRegionPosition_Parms GetClientRegionPosition_Parms;
	GetClientRegionPosition_Parms.Orientation = Orientation;

	pFnGetClientRegionPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClientRegionPosition, &GetClientRegionPosition_Parms, NULL );

	pFnGetClientRegionPosition->FunctionFlags |= 0x400;

	return GetClientRegionPosition_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.SetClientRegionPositionVector
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               NewPosition                    ( CPF_Parm )

bool UUIScrollFrame::SetClientRegionPositionVector ( struct FVector2D NewPosition )
{
	static UFunction* pFnSetClientRegionPositionVector = NULL;

	if ( ! pFnSetClientRegionPositionVector )
		pFnSetClientRegionPositionVector = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.SetClientRegionPositionVector" );

	UUIScrollFrame_execSetClientRegionPositionVector_Parms SetClientRegionPositionVector_Parms;
	memcpy ( &SetClientRegionPositionVector_Parms.NewPosition, &NewPosition, 0x8 );

	pFnSetClientRegionPositionVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClientRegionPositionVector, &SetClientRegionPositionVector_Parms, NULL );

	pFnSetClientRegionPositionVector->FunctionFlags |= 0x400;

	return SetClientRegionPositionVector_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.SetClientRegionPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewPosition                    ( CPF_Parm )

bool UUIScrollFrame::SetClientRegionPosition ( unsigned char Orientation, float NewPosition )
{
	static UFunction* pFnSetClientRegionPosition = NULL;

	if ( ! pFnSetClientRegionPosition )
		pFnSetClientRegionPosition = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.SetClientRegionPosition" );

	UUIScrollFrame_execSetClientRegionPosition_Parms SetClientRegionPosition_Parms;
	SetClientRegionPosition_Parms.Orientation = Orientation;
	SetClientRegionPosition_Parms.NewPosition = NewPosition;

	pFnSetClientRegionPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClientRegionPosition, &SetClientRegionPosition_Parms, NULL );

	pFnSetClientRegionPosition->FunctionFlags |= 0x400;

	return SetClientRegionPosition_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.ScrollRegion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionChange                 ( CPF_Parm )
// unsigned long                  bPositionMaxed                 ( CPF_OptionalParm | CPF_Parm )

bool UUIScrollFrame::ScrollRegion ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed )
{
	static UFunction* pFnScrollRegion = NULL;

	if ( ! pFnScrollRegion )
		pFnScrollRegion = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.ScrollRegion" );

	UUIScrollFrame_execScrollRegion_Parms ScrollRegion_Parms;
	ScrollRegion_Parms.Sender = Sender;
	ScrollRegion_Parms.PositionChange = PositionChange;
	ScrollRegion_Parms.bPositionMaxed = bPositionMaxed;

	pFnScrollRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollRegion, &ScrollRegion_Parms, NULL );

	pFnScrollRegion->FunctionFlags |= 0x400;

	return ScrollRegion_Parms.ReturnValue;
};

// Function Engine.UIScrollFrame.ReapplyFormatting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediately                   ( CPF_OptionalParm | CPF_Parm )

void UUIScrollFrame::ReapplyFormatting ( unsigned long bImmediately )
{
	static UFunction* pFnReapplyFormatting = NULL;

	if ( ! pFnReapplyFormatting )
		pFnReapplyFormatting = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.ReapplyFormatting" );

	UUIScrollFrame_execReapplyFormatting_Parms ReapplyFormatting_Parms;
	ReapplyFormatting_Parms.bImmediately = bImmediately;

	pFnReapplyFormatting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReapplyFormatting, &ReapplyFormatting_Parms, NULL );

	pFnReapplyFormatting->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollFrame.RefreshScrollbars
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediately                   ( CPF_OptionalParm | CPF_Parm )

void UUIScrollFrame::RefreshScrollbars ( unsigned long bImmediately )
{
	static UFunction* pFnRefreshScrollbars = NULL;

	if ( ! pFnRefreshScrollbars )
		pFnRefreshScrollbars = UObject::FindObject< UFunction > ( "Function Engine.UIScrollFrame.RefreshScrollbars" );

	UUIScrollFrame_execRefreshScrollbars_Parms RefreshScrollbars_Parms;
	RefreshScrollbars_Parms.bImmediately = bImmediately;

	pFnRefreshScrollbars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshScrollbars, &RefreshScrollbars_Parms, NULL );

	pFnRefreshScrollbars->FunctionFlags |= 0x400;
};

// Function Engine.UISlider.OnStateChanged
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                NewlyActiveState               ( CPF_Parm )
// class UUIState*                PreviouslyActiveState          ( CPF_OptionalParm | CPF_Parm )

void UUISlider::OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState )
{
	static UFunction* pFnOnStateChanged = NULL;

	if ( ! pFnOnStateChanged )
		pFnOnStateChanged = UObject::FindObject< UFunction > ( "Function Engine.UISlider.OnStateChanged" );

	UUISlider_execOnStateChanged_Parms OnStateChanged_Parms;
	OnStateChanged_Parms.Sender = Sender;
	OnStateChanged_Parms.PlayerIndex = PlayerIndex;
	OnStateChanged_Parms.NewlyActiveState = NewlyActiveState;
	OnStateChanged_Parms.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent ( pFnOnStateChanged, &OnStateChanged_Parms, NULL );
};

// Function Engine.UISlider.SetMarkerImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUISlider::SetMarkerImage ( class USurface* NewImage )
{
	static UFunction* pFnSetMarkerImage = NULL;

	if ( ! pFnSetMarkerImage )
		pFnSetMarkerImage = UObject::FindObject< UFunction > ( "Function Engine.UISlider.SetMarkerImage" );

	UUISlider_execSetMarkerImage_Parms SetMarkerImage_Parms;
	SetMarkerImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetMarkerImage, &SetMarkerImage_Parms, NULL );
};

// Function Engine.UISlider.SetBarImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUISlider::SetBarImage ( class USurface* NewImage )
{
	static UFunction* pFnSetBarImage = NULL;

	if ( ! pFnSetBarImage )
		pFnSetBarImage = UObject::FindObject< UFunction > ( "Function Engine.UISlider.SetBarImage" );

	UUISlider_execSetBarImage_Parms SetBarImage_Parms;
	SetBarImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBarImage, &SetBarImage_Parms, NULL );
};

// Function Engine.UISlider.SetBackgroundImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUISlider::SetBackgroundImage ( class USurface* NewImage )
{
	static UFunction* pFnSetBackgroundImage = NULL;

	if ( ! pFnSetBackgroundImage )
		pFnSetBackgroundImage = UObject::FindObject< UFunction > ( "Function Engine.UISlider.SetBackgroundImage" );

	UUISlider_execSetBackgroundImage_Parms SetBackgroundImage_Parms;
	SetBackgroundImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetBackgroundImage, &SetBackgroundImage_Parms, NULL );
};

// Function Engine.UISlider.GetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPercentageValue               ( CPF_OptionalParm | CPF_Parm )

float UUISlider::GetValue ( unsigned long bPercentageValue )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = UObject::FindObject< UFunction > ( "Function Engine.UISlider.GetValue" );

	UUISlider_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bPercentageValue = bPercentageValue;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UISlider.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          NewValue                       ( CPF_Parm | CPF_CoerceParm )
// unsigned long                  bPercentageValue               ( CPF_OptionalParm | CPF_Parm )

bool UUISlider::SetValue ( float NewValue, unsigned long bPercentageValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UISlider.SetValue" );

	UUISlider_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.NewValue = NewValue;
	SetValue_Parms.bPercentageValue = bPercentageValue;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;

	return SetValue_Parms.ReturnValue;
};

// Function Engine.UISlider.SaveSubscriberValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUISlider::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UISlider.SaveSubscriberValue" );

	UUISlider_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UISlider.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUISlider::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UISlider.ClearBoundDataStores" );

	UUISlider_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UISlider.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISlider::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UISlider.GetBoundDataStores" );

	UUISlider_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UISlider.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUISlider::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UISlider.NotifyDataStoreValueUpdated" );

	UUISlider_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UISlider.RefreshSubscriberValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUISlider::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UISlider.RefreshSubscriberValue" );

	UUISlider_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UISlider.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUISlider::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UISlider.GetDataStoreBinding" );

	UUISlider_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UISlider.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUISlider::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UISlider.SetDataStoreBinding" );

	UUISlider_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIState_Focused.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Focused::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = UObject::FindObject< UFunction > ( "Function Engine.UIState_Focused.ActivateState" );

	UUIState_Focused_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIState_TargetedTab.IsWidgetClassSupported
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )

bool UUIState_TargetedTab::eventIsWidgetClassSupported ( class UClass* WidgetClass )
{
	static UFunction* pFnIsWidgetClassSupported = NULL;

	if ( ! pFnIsWidgetClassSupported )
		pFnIsWidgetClassSupported = UObject::FindObject< UFunction > ( "Function Engine.UIState_TargetedTab.IsWidgetClassSupported" );

	UUIState_TargetedTab_eventIsWidgetClassSupported_Parms IsWidgetClassSupported_Parms;
	IsWidgetClassSupported_Parms.WidgetClass = WidgetClass;

	this->ProcessEvent ( pFnIsWidgetClassSupported, &IsWidgetClassSupported_Parms, NULL );

	return IsWidgetClassSupported_Parms.ReturnValue;
};

// Function Engine.UIStringRenderer.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUIStringRenderer::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = UObject::FindObject< UFunction > ( "Function Engine.UIStringRenderer.SetTextAlignment" );

	UUIStringRenderer_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIStyleResolver.NotifyResolveStyle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIStyleResolver::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = UObject::FindObject< UFunction > ( "Function Engine.UIStyleResolver.NotifyResolveStyle" );

	UUIStyleResolver_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIStyleResolver.SetStyleResolverTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIStyleResolver::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = UObject::FindObject< UFunction > ( "Function Engine.UIStyleResolver.SetStyleResolverTag" );

	UUIStyleResolver_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIStyleResolver.GetStyleResolverTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIStyleResolver::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = UObject::FindObject< UFunction > ( "Function Engine.UIStyleResolver.GetStyleResolverTag" );

	UUIStyleResolver_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UITabButton.SaveSubscriberValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUITabButton::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.SaveSubscriberValue" );

	UUITabButton_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UITabButton.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUITabButton::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.ClearBoundDataStores" );

	UUITabButton_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UITabButton.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUITabButton::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.GetBoundDataStores" );

	UUITabButton_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UITabButton.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUITabButton::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.NotifyDataStoreValueUpdated" );

	UUITabButton_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UITabButton.RefreshSubscriberValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUITabButton::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.RefreshSubscriberValue" );

	UUITabButton_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UITabButton.GetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUITabButton::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.GetDataStoreBinding" );

	UUITabButton_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UITabButton.SetDataStoreBinding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUITabButton::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.SetDataStoreBinding" );

	UUITabButton_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UITabButton.OnStateChanged
// [0x00020000] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                NewlyActiveState               ( CPF_Parm )
// class UUIState*                PreviouslyActiveState          ( CPF_OptionalParm | CPF_Parm )

void UUITabButton::OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState )
{
	static UFunction* pFnOnStateChanged = NULL;

	if ( ! pFnOnStateChanged )
		pFnOnStateChanged = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.OnStateChanged" );

	UUITabButton_execOnStateChanged_Parms OnStateChanged_Parms;
	OnStateChanged_Parms.Sender = Sender;
	OnStateChanged_Parms.PlayerIndex = PlayerIndex;
	OnStateChanged_Parms.NewlyActiveState = NewlyActiveState;
	OnStateChanged_Parms.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent ( pFnOnStateChanged, &OnStateChanged_Parms, NULL );
};

// Function Engine.UITabButton.GetTabPage
// [0x00020002] 
// Parameters infos:
// class UUITabPage*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUITabPage* UUITabButton::GetTabPage ( )
{
	static UFunction* pFnGetTabPage = NULL;

	if ( ! pFnGetTabPage )
		pFnGetTabPage = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.GetTabPage" );

	UUITabButton_execGetTabPage_Parms GetTabPage_Parms;

	this->ProcessEvent ( pFnGetTabPage, &GetTabPage_Parms, NULL );

	return GetTabPage_Parms.ReturnValue;
};

// Function Engine.UITabButton.IsTargeted
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// int                            StateIndex                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUITabButton::IsTargeted ( int PlayerIndex, int* StateIndex )
{
	static UFunction* pFnIsTargeted = NULL;

	if ( ! pFnIsTargeted )
		pFnIsTargeted = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.IsTargeted" );

	UUITabButton_execIsTargeted_Parms IsTargeted_Parms;
	IsTargeted_Parms.PlayerIndex = PlayerIndex;

	pFnIsTargeted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargeted, &IsTargeted_Parms, NULL );

	pFnIsTargeted->FunctionFlags |= 0x400;

	if ( StateIndex )
		*StateIndex = IsTargeted_Parms.StateIndex;

	return IsTargeted_Parms.ReturnValue;
};

// Function Engine.UITabButton.CanActivateButton
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUITabButton::CanActivateButton ( int PlayerIndex )
{
	static UFunction* pFnCanActivateButton = NULL;

	if ( ! pFnCanActivateButton )
		pFnCanActivateButton = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.CanActivateButton" );

	UUITabButton_execCanActivateButton_Parms CanActivateButton_Parms;
	CanActivateButton_Parms.PlayerIndex = PlayerIndex;

	pFnCanActivateButton->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanActivateButton, &CanActivateButton_Parms, NULL );

	pFnCanActivateButton->FunctionFlags |= 0x400;

	return CanActivateButton_Parms.ReturnValue;
};

// Function Engine.UITabButton.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUITabButton::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.RemovedFromParent" );

	UUITabButton_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UITabButton.RemovedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// TArray< class UUIObject* >     ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUITabButton::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, TArray< class UUIObject* > ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.RemovedChild" );

	UUITabButton_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0xC );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UITabButton.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUITabButton::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.AddedChild" );

	UUITabButton_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UITabButton.IsActivationAllowed
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabButton*            Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUITabButton::IsActivationAllowed ( class UUITabButton* Sender, int PlayerIndex )
{
	static UFunction* pFnIsActivationAllowed = NULL;

	if ( ! pFnIsActivationAllowed )
		pFnIsActivationAllowed = UObject::FindObject< UFunction > ( "Function Engine.UITabButton.IsActivationAllowed" );

	UUITabButton_execIsActivationAllowed_Parms IsActivationAllowed_Parms;
	IsActivationAllowed_Parms.Sender = Sender;
	IsActivationAllowed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnIsActivationAllowed, &IsActivationAllowed_Parms, NULL );

	return IsActivationAllowed_Parms.ReturnValue;
};

// Function Engine.UITabControl.TabButtonClicked
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUITabControl::TabButtonClicked ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnTabButtonClicked = NULL;

	if ( ! pFnTabButtonClicked )
		pFnTabButtonClicked = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.TabButtonClicked" );

	UUITabControl_execTabButtonClicked_Parms TabButtonClicked_Parms;
	TabButtonClicked_Parms.EventObject = EventObject;
	TabButtonClicked_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnTabButtonClicked, &TabButtonClicked_Parms, NULL );
};

// Function Engine.UITabControl.ProcessInputKey
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUITabControl::ProcessInputKey ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnProcessInputKey = NULL;

	if ( ! pFnProcessInputKey )
		pFnProcessInputKey = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.ProcessInputKey" );

	UUITabControl_execProcessInputKey_Parms ProcessInputKey_Parms;

	this->ProcessEvent ( pFnProcessInputKey, &ProcessInputKey_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &ProcessInputKey_Parms.EventParms, 0x20 );

	return ProcessInputKey_Parms.ReturnValue;
};

// Function Engine.UITabControl.FindPageIndexByPageRef
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabPage*              SearchPage                     ( CPF_Parm )

int UUITabControl::FindPageIndexByPageRef ( class UUITabPage* SearchPage )
{
	static UFunction* pFnFindPageIndexByPageRef = NULL;

	if ( ! pFnFindPageIndexByPageRef )
		pFnFindPageIndexByPageRef = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.FindPageIndexByPageRef" );

	UUITabControl_execFindPageIndexByPageRef_Parms FindPageIndexByPageRef_Parms;
	FindPageIndexByPageRef_Parms.SearchPage = SearchPage;

	this->ProcessEvent ( pFnFindPageIndexByPageRef, &FindPageIndexByPageRef_Parms, NULL );

	return FindPageIndexByPageRef_Parms.ReturnValue;
};

// Function Engine.UITabControl.FindPageIndexByButton
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabButton*            SearchButton                   ( CPF_Parm )

int UUITabControl::FindPageIndexByButton ( class UUITabButton* SearchButton )
{
	static UFunction* pFnFindPageIndexByButton = NULL;

	if ( ! pFnFindPageIndexByButton )
		pFnFindPageIndexByButton = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.FindPageIndexByButton" );

	UUITabControl_execFindPageIndexByButton_Parms FindPageIndexByButton_Parms;
	FindPageIndexByButton_Parms.SearchButton = SearchButton;

	this->ProcessEvent ( pFnFindPageIndexByButton, &FindPageIndexByButton_Parms, NULL );

	return FindPageIndexByButton_Parms.ReturnValue;
};

// Function Engine.UITabControl.FindPageIndexByCaption
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PageCaption                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bMarkupString                  ( CPF_OptionalParm | CPF_Parm )

int UUITabControl::FindPageIndexByCaption ( struct FString PageCaption, unsigned long bMarkupString )
{
	static UFunction* pFnFindPageIndexByCaption = NULL;

	if ( ! pFnFindPageIndexByCaption )
		pFnFindPageIndexByCaption = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.FindPageIndexByCaption" );

	UUITabControl_execFindPageIndexByCaption_Parms FindPageIndexByCaption_Parms;
	memcpy ( &FindPageIndexByCaption_Parms.PageCaption, &PageCaption, 0xC );
	FindPageIndexByCaption_Parms.bMarkupString = bMarkupString;

	this->ProcessEvent ( pFnFindPageIndexByCaption, &FindPageIndexByCaption_Parms, NULL );

	return FindPageIndexByCaption_Parms.ReturnValue;
};

// Function Engine.UITabControl.ActivateBestTab
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bFocusPage                     ( CPF_OptionalParm | CPF_Parm )
// int                            StartIndex                     ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::ActivateBestTab ( int PlayerIndex, unsigned long bFocusPage, int StartIndex )
{
	static UFunction* pFnActivateBestTab = NULL;

	if ( ! pFnActivateBestTab )
		pFnActivateBestTab = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.ActivateBestTab" );

	UUITabControl_execActivateBestTab_Parms ActivateBestTab_Parms;
	ActivateBestTab_Parms.PlayerIndex = PlayerIndex;
	ActivateBestTab_Parms.bFocusPage = bFocusPage;
	ActivateBestTab_Parms.StartIndex = StartIndex;

	this->ProcessEvent ( pFnActivateBestTab, &ActivateBestTab_Parms, NULL );

	return ActivateBestTab_Parms.ReturnValue;
};

// Function Engine.UITabControl.ActivatePageByCaption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PageCaption                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bFocusPage                     ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::ActivatePageByCaption ( struct FString PageCaption, int PlayerIndex, unsigned long bFocusPage )
{
	static UFunction* pFnActivatePageByCaption = NULL;

	if ( ! pFnActivatePageByCaption )
		pFnActivatePageByCaption = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.ActivatePageByCaption" );

	UUITabControl_execActivatePageByCaption_Parms ActivatePageByCaption_Parms;
	memcpy ( &ActivatePageByCaption_Parms.PageCaption, &PageCaption, 0xC );
	ActivatePageByCaption_Parms.PlayerIndex = PlayerIndex;
	ActivatePageByCaption_Parms.bFocusPage = bFocusPage;

	this->ProcessEvent ( pFnActivatePageByCaption, &ActivatePageByCaption_Parms, NULL );

	return ActivatePageByCaption_Parms.ReturnValue;
};

// Function Engine.UITabControl.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUITabControl::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.AddedChild" );

	UUITabControl_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UITabControl.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUITabControl::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.PostInitialize" );

	UUITabControl_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UITabControl.EnableTabPage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabPage*              PageToEnable                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bEnablePage                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivatePage                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFocusPage                     ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::eventEnableTabPage ( class UUITabPage* PageToEnable, int PlayerIndex, unsigned long bEnablePage, unsigned long bActivatePage, unsigned long bFocusPage )
{
	static UFunction* pFnEnableTabPage = NULL;

	if ( ! pFnEnableTabPage )
		pFnEnableTabPage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.EnableTabPage" );

	UUITabControl_eventEnableTabPage_Parms EnableTabPage_Parms;
	EnableTabPage_Parms.PageToEnable = PageToEnable;
	EnableTabPage_Parms.PlayerIndex = PlayerIndex;
	EnableTabPage_Parms.bEnablePage = bEnablePage;
	EnableTabPage_Parms.bActivatePage = bActivatePage;
	EnableTabPage_Parms.bFocusPage = bFocusPage;

	this->ProcessEvent ( pFnEnableTabPage, &EnableTabPage_Parms, NULL );

	return EnableTabPage_Parms.ReturnValue;
};

// Function Engine.UITabControl.ActivatePreviousPage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bFocusPage                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowWrapping                 ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::eventActivatePreviousPage ( int PlayerIndex, unsigned long bFocusPage, unsigned long bAllowWrapping )
{
	static UFunction* pFnActivatePreviousPage = NULL;

	if ( ! pFnActivatePreviousPage )
		pFnActivatePreviousPage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.ActivatePreviousPage" );

	UUITabControl_eventActivatePreviousPage_Parms ActivatePreviousPage_Parms;
	ActivatePreviousPage_Parms.PlayerIndex = PlayerIndex;
	ActivatePreviousPage_Parms.bFocusPage = bFocusPage;
	ActivatePreviousPage_Parms.bAllowWrapping = bAllowWrapping;

	this->ProcessEvent ( pFnActivatePreviousPage, &ActivatePreviousPage_Parms, NULL );

	return ActivatePreviousPage_Parms.ReturnValue;
};

// Function Engine.UITabControl.ActivateNextPage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bFocusPage                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowWrapping                 ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::eventActivateNextPage ( int PlayerIndex, unsigned long bFocusPage, unsigned long bAllowWrapping )
{
	static UFunction* pFnActivateNextPage = NULL;

	if ( ! pFnActivateNextPage )
		pFnActivateNextPage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.ActivateNextPage" );

	UUITabControl_eventActivateNextPage_Parms ActivateNextPage_Parms;
	ActivateNextPage_Parms.PlayerIndex = PlayerIndex;
	ActivateNextPage_Parms.bFocusPage = bFocusPage;
	ActivateNextPage_Parms.bAllowWrapping = bAllowWrapping;

	this->ProcessEvent ( pFnActivateNextPage, &ActivateNextPage_Parms, NULL );

	return ActivateNextPage_Parms.ReturnValue;
};

// Function Engine.UITabControl.ActivatePage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabPage*              PageToActivate                 ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bFocusPage                     ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::eventActivatePage ( class UUITabPage* PageToActivate, int PlayerIndex, unsigned long bFocusPage )
{
	static UFunction* pFnActivatePage = NULL;

	if ( ! pFnActivatePage )
		pFnActivatePage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.ActivatePage" );

	UUITabControl_eventActivatePage_Parms ActivatePage_Parms;
	ActivatePage_Parms.PageToActivate = PageToActivate;
	ActivatePage_Parms.PlayerIndex = PlayerIndex;
	ActivatePage_Parms.bFocusPage = bFocusPage;

	this->ProcessEvent ( pFnActivatePage, &ActivatePage_Parms, NULL );

	return ActivatePage_Parms.ReturnValue;
};

// Function Engine.UITabControl.ReplacePage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabPage*              ExistingPage                   ( CPF_Parm )
// class UUITabPage*              NewPage                        ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bFocusPage                     ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::eventReplacePage ( class UUITabPage* ExistingPage, class UUITabPage* NewPage, int PlayerIndex, unsigned long bFocusPage )
{
	static UFunction* pFnReplacePage = NULL;

	if ( ! pFnReplacePage )
		pFnReplacePage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.ReplacePage" );

	UUITabControl_eventReplacePage_Parms ReplacePage_Parms;
	ReplacePage_Parms.ExistingPage = ExistingPage;
	ReplacePage_Parms.NewPage = NewPage;
	ReplacePage_Parms.PlayerIndex = PlayerIndex;
	ReplacePage_Parms.bFocusPage = bFocusPage;

	this->ProcessEvent ( pFnReplacePage, &ReplacePage_Parms, NULL );

	return ReplacePage_Parms.ReturnValue;
};

// Function Engine.UITabControl.RemovePage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabPage*              PageToRemove                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUITabControl::eventRemovePage ( class UUITabPage* PageToRemove, int PlayerIndex )
{
	static UFunction* pFnRemovePage = NULL;

	if ( ! pFnRemovePage )
		pFnRemovePage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.RemovePage" );

	UUITabControl_eventRemovePage_Parms RemovePage_Parms;
	RemovePage_Parms.PageToRemove = PageToRemove;
	RemovePage_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnRemovePage, &RemovePage_Parms, NULL );

	return RemovePage_Parms.ReturnValue;
};

// Function Engine.UITabControl.InsertPage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabPage*              PageToInsert                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )

bool UUITabControl::eventInsertPage ( class UUITabPage* PageToInsert, int PlayerIndex, int InsertIndex, unsigned long bActivateImmediately )
{
	static UFunction* pFnInsertPage = NULL;

	if ( ! pFnInsertPage )
		pFnInsertPage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.InsertPage" );

	UUITabControl_eventInsertPage_Parms InsertPage_Parms;
	InsertPage_Parms.PageToInsert = PageToInsert;
	InsertPage_Parms.PlayerIndex = PlayerIndex;
	InsertPage_Parms.InsertIndex = InsertIndex;
	InsertPage_Parms.bActivateImmediately = bActivateImmediately;

	this->ProcessEvent ( pFnInsertPage, &InsertPage_Parms, NULL );

	return InsertPage_Parms.ReturnValue;
};

// Function Engine.UITabControl.PrivateActivatePage
// [0x00080802] ( FUNC_Event )
// Parameters infos:
// class UUITabPage*              PageToActivate                 ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUITabControl::eventPrivateActivatePage ( class UUITabPage* PageToActivate, int PlayerIndex )
{
	static UFunction* pFnPrivateActivatePage = NULL;

	if ( ! pFnPrivateActivatePage )
		pFnPrivateActivatePage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.PrivateActivatePage" );

	UUITabControl_eventPrivateActivatePage_Parms PrivateActivatePage_Parms;
	PrivateActivatePage_Parms.PageToActivate = PageToActivate;
	PrivateActivatePage_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnPrivateActivatePage, &PrivateActivatePage_Parms, NULL );
};

// Function Engine.UITabControl.MovePageRight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PageIndex                      ( CPF_Parm )

bool UUITabControl::MovePageRight ( int PageIndex )
{
	static UFunction* pFnMovePageRight = NULL;

	if ( ! pFnMovePageRight )
		pFnMovePageRight = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.MovePageRight" );

	UUITabControl_execMovePageRight_Parms MovePageRight_Parms;
	MovePageRight_Parms.PageIndex = PageIndex;

	pFnMovePageRight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovePageRight, &MovePageRight_Parms, NULL );

	pFnMovePageRight->FunctionFlags |= 0x400;

	return MovePageRight_Parms.ReturnValue;
};

// Function Engine.UITabControl.MovePageLeft
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PageIndex                      ( CPF_Parm )

bool UUITabControl::MovePageLeft ( int PageIndex )
{
	static UFunction* pFnMovePageLeft = NULL;

	if ( ! pFnMovePageLeft )
		pFnMovePageLeft = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.MovePageLeft" );

	UUITabControl_execMovePageLeft_Parms MovePageLeft_Parms;
	MovePageLeft_Parms.PageIndex = PageIndex;

	pFnMovePageLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovePageLeft, &MovePageLeft_Parms, NULL );

	pFnMovePageLeft->FunctionFlags |= 0x400;

	return MovePageLeft_Parms.ReturnValue;
};

// Function Engine.UITabControl.CreateTabPage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUITabPage*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TabPageClass                   ( CPF_Parm )
// class UUITabPage*              PagePrefab                     ( CPF_OptionalParm | CPF_Parm )

class UUITabPage* UUITabControl::CreateTabPage ( class UClass* TabPageClass, class UUITabPage* PagePrefab )
{
	static UFunction* pFnCreateTabPage = NULL;

	if ( ! pFnCreateTabPage )
		pFnCreateTabPage = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.CreateTabPage" );

	UUITabControl_execCreateTabPage_Parms CreateTabPage_Parms;
	CreateTabPage_Parms.TabPageClass = TabPageClass;
	CreateTabPage_Parms.PagePrefab = PagePrefab;

	pFnCreateTabPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTabPage, &CreateTabPage_Parms, NULL );

	pFnCreateTabPage->FunctionFlags |= 0x400;

	return CreateTabPage_Parms.ReturnValue;
};

// Function Engine.UITabControl.FindTargetedTab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUITabButton*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

class UUITabButton* UUITabControl::FindTargetedTab ( int PlayerIndex )
{
	static UFunction* pFnFindTargetedTab = NULL;

	if ( ! pFnFindTargetedTab )
		pFnFindTargetedTab = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.FindTargetedTab" );

	UUITabControl_execFindTargetedTab_Parms FindTargetedTab_Parms;
	FindTargetedTab_Parms.PlayerIndex = PlayerIndex;

	pFnFindTargetedTab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTargetedTab, &FindTargetedTab_Parms, NULL );

	pFnFindTargetedTab->FunctionFlags |= 0x400;

	return FindTargetedTab_Parms.ReturnValue;
};

// Function Engine.UITabControl.GetPageAtIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUITabPage*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PageIndex                      ( CPF_Parm )

class UUITabPage* UUITabControl::GetPageAtIndex ( int PageIndex )
{
	static UFunction* pFnGetPageAtIndex = NULL;

	if ( ! pFnGetPageAtIndex )
		pFnGetPageAtIndex = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.GetPageAtIndex" );

	UUITabControl_execGetPageAtIndex_Parms GetPageAtIndex_Parms;
	GetPageAtIndex_Parms.PageIndex = PageIndex;

	pFnGetPageAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPageAtIndex, &GetPageAtIndex_Parms, NULL );

	pFnGetPageAtIndex->FunctionFlags |= 0x400;

	return GetPageAtIndex_Parms.ReturnValue;
};

// Function Engine.UITabControl.GetPageCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUITabControl::GetPageCount ( )
{
	static UFunction* pFnGetPageCount = NULL;

	if ( ! pFnGetPageCount )
		pFnGetPageCount = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.GetPageCount" );

	UUITabControl_execGetPageCount_Parms GetPageCount_Parms;

	pFnGetPageCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPageCount, &GetPageCount_Parms, NULL );

	pFnGetPageCount->FunctionFlags |= 0x400;

	return GetPageCount_Parms.ReturnValue;
};

// Function Engine.UITabControl.RequestLayoutUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUITabControl::RequestLayoutUpdate ( )
{
	static UFunction* pFnRequestLayoutUpdate = NULL;

	if ( ! pFnRequestLayoutUpdate )
		pFnRequestLayoutUpdate = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.RequestLayoutUpdate" );

	UUITabControl_execRequestLayoutUpdate_Parms RequestLayoutUpdate_Parms;

	pFnRequestLayoutUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestLayoutUpdate, &RequestLayoutUpdate_Parms, NULL );

	pFnRequestLayoutUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UITabControl.OnPageRemoved
// [0x00120000] 
// Parameters infos:
// class UUITabControl*           Sender                         ( CPF_Parm )
// class UUITabPage*              OldPage                        ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUITabControl::OnPageRemoved ( class UUITabControl* Sender, class UUITabPage* OldPage, int PlayerIndex )
{
	static UFunction* pFnOnPageRemoved = NULL;

	if ( ! pFnOnPageRemoved )
		pFnOnPageRemoved = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.OnPageRemoved" );

	UUITabControl_execOnPageRemoved_Parms OnPageRemoved_Parms;
	OnPageRemoved_Parms.Sender = Sender;
	OnPageRemoved_Parms.OldPage = OldPage;
	OnPageRemoved_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPageRemoved, &OnPageRemoved_Parms, NULL );
};

// Function Engine.UITabControl.OnPageInserted
// [0x00120000] 
// Parameters infos:
// class UUITabControl*           Sender                         ( CPF_Parm )
// class UUITabPage*              NewPage                        ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUITabControl::OnPageInserted ( class UUITabControl* Sender, class UUITabPage* NewPage, int PlayerIndex )
{
	static UFunction* pFnOnPageInserted = NULL;

	if ( ! pFnOnPageInserted )
		pFnOnPageInserted = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.OnPageInserted" );

	UUITabControl_execOnPageInserted_Parms OnPageInserted_Parms;
	OnPageInserted_Parms.Sender = Sender;
	OnPageInserted_Parms.NewPage = NewPage;
	OnPageInserted_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPageInserted, &OnPageInserted_Parms, NULL );
};

// Function Engine.UITabControl.OnPageActivated
// [0x00120000] 
// Parameters infos:
// class UUITabControl*           Sender                         ( CPF_Parm )
// class UUITabPage*              NewlyActivePage                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUITabControl::OnPageActivated ( class UUITabControl* Sender, class UUITabPage* NewlyActivePage, int PlayerIndex )
{
	static UFunction* pFnOnPageActivated = NULL;

	if ( ! pFnOnPageActivated )
		pFnOnPageActivated = UObject::FindObject< UFunction > ( "Function Engine.UITabControl.OnPageActivated" );

	UUITabControl_execOnPageActivated_Parms OnPageActivated_Parms;
	OnPageActivated_Parms.Sender = Sender;
	OnPageActivated_Parms.NewlyActivePage = NewlyActivePage;
	OnPageActivated_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPageActivated, &OnPageActivated_Parms, NULL );
};

// Function Engine.UITabPage.IsActivePage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUITabPage::IsActivePage ( )
{
	static UFunction* pFnIsActivePage = NULL;

	if ( ! pFnIsActivePage )
		pFnIsActivePage = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.IsActivePage" );

	UUITabPage_execIsActivePage_Parms IsActivePage_Parms;

	this->ProcessEvent ( pFnIsActivePage, &IsActivePage_Parms, NULL );

	return IsActivePage_Parms.ReturnValue;
};

// Function Engine.UITabPage.SetTabCaption
// [0x00020002] 
// Parameters infos:
// struct FString                 NewButtonMarkup                ( CPF_Parm | CPF_NeedCtorLink )

void UUITabPage::SetTabCaption ( struct FString NewButtonMarkup )
{
	static UFunction* pFnSetTabCaption = NULL;

	if ( ! pFnSetTabCaption )
		pFnSetTabCaption = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.SetTabCaption" );

	UUITabPage_execSetTabCaption_Parms SetTabCaption_Parms;
	memcpy ( &SetTabCaption_Parms.NewButtonMarkup, &NewButtonMarkup, 0xC );

	this->ProcessEvent ( pFnSetTabCaption, &SetTabCaption_Parms, NULL );
};

// Function Engine.UITabPage.OnActiveStateChanged
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                NewlyActiveState               ( CPF_Parm )
// class UUIState*                PreviouslyActiveState          ( CPF_OptionalParm | CPF_Parm )

void UUITabPage::OnActiveStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState )
{
	static UFunction* pFnOnActiveStateChanged = NULL;

	if ( ! pFnOnActiveStateChanged )
		pFnOnActiveStateChanged = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.OnActiveStateChanged" );

	UUITabPage_execOnActiveStateChanged_Parms OnActiveStateChanged_Parms;
	OnActiveStateChanged_Parms.Sender = Sender;
	OnActiveStateChanged_Parms.PlayerIndex = PlayerIndex;
	OnActiveStateChanged_Parms.NewlyActiveState = NewlyActiveState;
	OnActiveStateChanged_Parms.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent ( pFnOnActiveStateChanged, &OnActiveStateChanged_Parms, NULL );
};

// Function Engine.UITabPage.CanActivatePage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUITabPage::CanActivatePage ( int PlayerIndex )
{
	static UFunction* pFnCanActivatePage = NULL;

	if ( ! pFnCanActivatePage )
		pFnCanActivatePage = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.CanActivatePage" );

	UUITabPage_execCanActivatePage_Parms CanActivatePage_Parms;
	CanActivatePage_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCanActivatePage, &CanActivatePage_Parms, NULL );

	return CanActivatePage_Parms.ReturnValue;
};

// Function Engine.UITabPage.AddedToTabControl
// [0x00020000] 
// Parameters infos:
// class UUITabControl*           TabControl                     ( CPF_Parm )

void UUITabPage::AddedToTabControl ( class UUITabControl* TabControl )
{
	static UFunction* pFnAddedToTabControl = NULL;

	if ( ! pFnAddedToTabControl )
		pFnAddedToTabControl = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.AddedToTabControl" );

	UUITabPage_execAddedToTabControl_Parms AddedToTabControl_Parms;
	AddedToTabControl_Parms.TabControl = TabControl;

	this->ProcessEvent ( pFnAddedToTabControl, &AddedToTabControl_Parms, NULL );
};

// Function Engine.UITabPage.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUITabPage::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.ClearBoundDataStores" );

	UUITabPage_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UITabPage.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUITabPage::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.GetBoundDataStores" );

	UUITabPage_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UITabPage.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUITabPage::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.NotifyDataStoreValueUpdated" );

	UUITabPage_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UITabPage.RefreshSubscriberValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUITabPage::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.RefreshSubscriberValue" );

	UUITabPage_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UITabPage.GetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUITabPage::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.GetDataStoreBinding" );

	UUITabPage_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UITabPage.SetDataStoreBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUITabPage::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.SetDataStoreBinding" );

	UUITabPage_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UITabPage.GetTabButton
// [0x00020002] 
// Parameters infos:
// class UUITabButton*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabControl*           TabControl                     ( CPF_OptionalParm | CPF_Parm )

class UUITabButton* UUITabPage::GetTabButton ( class UUITabControl* TabControl )
{
	static UFunction* pFnGetTabButton = NULL;

	if ( ! pFnGetTabButton )
		pFnGetTabButton = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.GetTabButton" );

	UUITabPage_execGetTabButton_Parms GetTabButton_Parms;
	GetTabButton_Parms.TabControl = TabControl;

	this->ProcessEvent ( pFnGetTabButton, &GetTabButton_Parms, NULL );

	return GetTabButton_Parms.ReturnValue;
};

// Function Engine.UITabPage.GetOwnerTabControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUITabControl*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUITabControl* UUITabPage::GetOwnerTabControl ( )
{
	static UFunction* pFnGetOwnerTabControl = NULL;

	if ( ! pFnGetOwnerTabControl )
		pFnGetOwnerTabControl = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.GetOwnerTabControl" );

	UUITabPage_execGetOwnerTabControl_Parms GetOwnerTabControl_Parms;

	pFnGetOwnerTabControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerTabControl, &GetOwnerTabControl_Parms, NULL );

	pFnGetOwnerTabControl->FunctionFlags |= 0x400;

	return GetOwnerTabControl_Parms.ReturnValue;
};

// Function Engine.UITabPage.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUITabPage::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.RemovedFromParent" );

	UUITabPage_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UITabPage.LinkToTabButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabButton*            NewButton                      ( CPF_Parm )
// class UUITabControl*           TabControl                     ( CPF_Parm )

bool UUITabPage::eventLinkToTabButton ( class UUITabButton* NewButton, class UUITabControl* TabControl )
{
	static UFunction* pFnLinkToTabButton = NULL;

	if ( ! pFnLinkToTabButton )
		pFnLinkToTabButton = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.LinkToTabButton" );

	UUITabPage_eventLinkToTabButton_Parms LinkToTabButton_Parms;
	LinkToTabButton_Parms.NewButton = NewButton;
	LinkToTabButton_Parms.TabControl = TabControl;

	this->ProcessEvent ( pFnLinkToTabButton, &LinkToTabButton_Parms, NULL );

	return LinkToTabButton_Parms.ReturnValue;
};

// Function Engine.UITabPage.CreateTabButton
// [0x00082802] ( FUNC_Event )
// Parameters infos:
// class UUITabButton*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITabControl*           TabControl                     ( CPF_Parm )

class UUITabButton* UUITabPage::eventCreateTabButton ( class UUITabControl* TabControl )
{
	static UFunction* pFnCreateTabButton = NULL;

	if ( ! pFnCreateTabButton )
		pFnCreateTabButton = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.CreateTabButton" );

	UUITabPage_eventCreateTabButton_Parms CreateTabButton_Parms;
	CreateTabButton_Parms.TabControl = TabControl;

	this->ProcessEvent ( pFnCreateTabButton, &CreateTabButton_Parms, NULL );

	return CreateTabButton_Parms.ReturnValue;
};

// Function Engine.UITabPage.ActivatePage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bActivate                      ( CPF_Parm )
// unsigned long                  bTakeFocus                     ( CPF_OptionalParm | CPF_Parm )

bool UUITabPage::eventActivatePage ( int PlayerIndex, unsigned long bActivate, unsigned long bTakeFocus )
{
	static UFunction* pFnActivatePage = NULL;

	if ( ! pFnActivatePage )
		pFnActivatePage = UObject::FindObject< UFunction > ( "Function Engine.UITabPage.ActivatePage" );

	UUITabPage_eventActivatePage_Parms ActivatePage_Parms;
	ActivatePage_Parms.PlayerIndex = PlayerIndex;
	ActivatePage_Parms.bActivate = bActivate;
	ActivatePage_Parms.bTakeFocus = bTakeFocus;

	this->ProcessEvent ( pFnActivatePage, &ActivatePage_Parms, NULL );

	return ActivatePage_Parms.ReturnValue;
};

// Function Engine.UITexture.GetSurface
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USurface* UUITexture::GetSurface ( )
{
	static UFunction* pFnGetSurface = NULL;

	if ( ! pFnGetSurface )
		pFnGetSurface = UObject::FindObject< UFunction > ( "Function Engine.UITexture.GetSurface" );

	UUITexture_execGetSurface_Parms GetSurface_Parms;

	this->ProcessEvent ( pFnGetSurface, &GetSurface_Parms, NULL );

	return GetSurface_Parms.ReturnValue;
};

// Function Engine.UITexture.HasValidStyleData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUITexture::HasValidStyleData ( )
{
	static UFunction* pFnHasValidStyleData = NULL;

	if ( ! pFnHasValidStyleData )
		pFnHasValidStyleData = UObject::FindObject< UFunction > ( "Function Engine.UITexture.HasValidStyleData" );

	UUITexture_execHasValidStyleData_Parms HasValidStyleData_Parms;

	pFnHasValidStyleData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasValidStyleData, &HasValidStyleData_Parms, NULL );

	pFnHasValidStyleData->FunctionFlags |= 0x400;

	return HasValidStyleData_Parms.ReturnValue;
};

// Function Engine.UITexture.SetImageStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Image*          NewImageStyle                  ( CPF_Parm )

void UUITexture::SetImageStyle ( class UUIStyle_Image* NewImageStyle )
{
	static UFunction* pFnSetImageStyle = NULL;

	if ( ! pFnSetImageStyle )
		pFnSetImageStyle = UObject::FindObject< UFunction > ( "Function Engine.UITexture.SetImageStyle" );

	UUITexture_execSetImageStyle_Parms SetImageStyle_Parms;
	SetImageStyle_Parms.NewImageStyle = NewImageStyle;

	pFnSetImageStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetImageStyle, &SetImageStyle_Parms, NULL );

	pFnSetImageStyle->FunctionFlags |= 0x400;
};

// Function Engine.UIToggleButton.OnSetBoolValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIAction_SetBoolValue*  Action                         ( CPF_Parm )

void UUIToggleButton::OnSetBoolValue ( class UUIAction_SetBoolValue* Action )
{
	static UFunction* pFnOnSetBoolValue = NULL;

	if ( ! pFnOnSetBoolValue )
		pFnOnSetBoolValue = UObject::FindObject< UFunction > ( "Function Engine.UIToggleButton.OnSetBoolValue" );

	UUIToggleButton_execOnSetBoolValue_Parms OnSetBoolValue_Parms;
	OnSetBoolValue_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetBoolValue, &OnSetBoolValue_Parms, NULL );
};

// Function Engine.UIToggleButton.ButtonClicked
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIToggleButton::ButtonClicked ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnButtonClicked = NULL;

	if ( ! pFnButtonClicked )
		pFnButtonClicked = UObject::FindObject< UFunction > ( "Function Engine.UIToggleButton.ButtonClicked" );

	UUIToggleButton_execButtonClicked_Parms ButtonClicked_Parms;
	ButtonClicked_Parms.Sender = Sender;
	ButtonClicked_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnButtonClicked, &ButtonClicked_Parms, NULL );

	return ButtonClicked_Parms.ReturnValue;
};

// Function Engine.UIToggleButton.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldBeChecked               ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIToggleButton::SetValue ( unsigned long bShouldBeChecked, int PlayerIndex )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.UIToggleButton.SetValue" );

	UUIToggleButton_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.bShouldBeChecked = bShouldBeChecked;
	SetValue_Parms.PlayerIndex = PlayerIndex;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIToggleButton.IsChecked
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIToggleButton::IsChecked ( )
{
	static UFunction* pFnIsChecked = NULL;

	if ( ! pFnIsChecked )
		pFnIsChecked = UObject::FindObject< UFunction > ( "Function Engine.UIToggleButton.IsChecked" );

	UUIToggleButton_execIsChecked_Parms IsChecked_Parms;

	this->ProcessEvent ( pFnIsChecked, &IsChecked_Parms, NULL );

	return IsChecked_Parms.ReturnValue;
};

// Function Engine.UIToggleButton.SetCaption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIToggleButton::SetCaption ( struct FString NewText )
{
	static UFunction* pFnSetCaption = NULL;

	if ( ! pFnSetCaption )
		pFnSetCaption = UObject::FindObject< UFunction > ( "Function Engine.UIToggleButton.SetCaption" );

	UUIToggleButton_execSetCaption_Parms SetCaption_Parms;
	memcpy ( &SetCaption_Parms.NewText, &NewText, 0xC );

	pFnSetCaption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaption, &SetCaption_Parms, NULL );

	pFnSetCaption->FunctionFlags |= 0x400;
};

// Function Engine.UIToggleButton.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIToggleButton::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = UObject::FindObject< UFunction > ( "Function Engine.UIToggleButton.NotifyDataStoreValueUpdated" );

	UUIToggleButton_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.SeqVar_UIRange.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqVar_UIRange::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqVar_UIRange.IsValidLevelSequenceObject" );

	USeqVar_UIRange_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqVar_UniqueNetId.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqVar_UniqueNetId::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqVar_UniqueNetId.IsValidLevelSequenceObject" );

	USeqVar_UniqueNetId_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction.HasDynamicOutputLinks
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIAction::eventHasDynamicOutputLinks ( )
{
	static UFunction* pFnHasDynamicOutputLinks = NULL;

	if ( ! pFnHasDynamicOutputLinks )
		pFnHasDynamicOutputLinks = UObject::FindObject< UFunction > ( "Function Engine.UIAction.HasDynamicOutputLinks" );

	UUIAction_eventHasDynamicOutputLinks_Parms HasDynamicOutputLinks_Parms;

	this->ProcessEvent ( pFnHasDynamicOutputLinks, &HasDynamicOutputLinks_Parms, NULL );

	return HasDynamicOutputLinks_Parms.ReturnValue;
};

// Function Engine.UIAction.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction.GetObjClassVersion" );

	UUIAction_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIAction::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIAction.IsValidUISequenceObject" );

	UUIAction_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIAction::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIAction.IsValidLevelSequenceObject" );

	UUIAction_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction.GetOwnerScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIAction::GetOwnerScene ( )
{
	static UFunction* pFnGetOwnerScene = NULL;

	if ( ! pFnGetOwnerScene )
		pFnGetOwnerScene = UObject::FindObject< UFunction > ( "Function Engine.UIAction.GetOwnerScene" );

	UUIAction_execGetOwnerScene_Parms GetOwnerScene_Parms;

	pFnGetOwnerScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerScene, &GetOwnerScene_Parms, NULL );

	pFnGetOwnerScene->FunctionFlags |= 0x400;

	return GetOwnerScene_Parms.ReturnValue;
};

// Function Engine.UIAction.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIAction::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = UObject::FindObject< UFunction > ( "Function Engine.UIAction.GetOwner" );

	UUIAction_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIAction_ChangeState.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_ChangeState::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ChangeState.GetObjClassVersion" );

	UUIAction_ChangeState_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_Scene.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIAction_Scene::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIAction_Scene.IsValidLevelSequenceObject" );

	UUIAction_Scene_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction_DisplaySurvey.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_DisplaySurvey::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_DisplaySurvey.GetObjClassVersion" );

	UUIAction_DisplaySurvey_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_FocusActions.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_FocusActions::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_FocusActions.GetObjClassVersion" );

	UUIAction_FocusActions_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_GetCellValue.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_GetCellValue::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetCellValue.GetObjClassVersion" );

	UUIAction_GetCellValue_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_GetDatafieldValue.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_GetDatafieldValue::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetDatafieldValue.GetObjClassVersion" );

	UUIAction_GetDatafieldValue_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_GetListIndex.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_GetListIndex::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetListIndex.GetObjClassVersion" );

	UUIAction_GetListIndex_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_GetLoggedInPlayerCount.GetLoginStatus
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_GetLoggedInPlayerCount::eventGetLoginStatus ( )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetLoggedInPlayerCount.GetLoginStatus" );

	UUIAction_GetLoggedInPlayerCount_eventGetLoginStatus_Parms GetLoginStatus_Parms;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );
};

// Function Engine.UIAction_GetNATType.GetNATType
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  OutNATType                     ( CPF_Parm | CPF_OutParm )

bool UUIAction_GetNATType::eventGetNATType ( unsigned char* OutNATType )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetNATType.GetNATType" );

	UUIAction_GetNATType_eventGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	if ( OutNATType )
		*OutNATType = GetNATType_Parms.OutNATType;

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIAction_GetPrivilegeLevel.GetPrivilegeLevel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

unsigned char UUIAction_GetPrivilegeLevel::eventGetPrivilegeLevel ( int ControllerId )
{
	static UFunction* pFnGetPrivilegeLevel = NULL;

	if ( ! pFnGetPrivilegeLevel )
		pFnGetPrivilegeLevel = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetPrivilegeLevel.GetPrivilegeLevel" );

	UUIAction_GetPrivilegeLevel_eventGetPrivilegeLevel_Parms GetPrivilegeLevel_Parms;
	GetPrivilegeLevel_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetPrivilegeLevel, &GetPrivilegeLevel_Parms, NULL );

	return GetPrivilegeLevel_Parms.ReturnValue;
};

// Function Engine.UIAction_JoinOnlineGame.BuildJoinURL
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 ResolvedConnectionURL          ( CPF_Parm | CPF_NeedCtorLink )

struct FString UUIAction_JoinOnlineGame::BuildJoinURL ( struct FString ResolvedConnectionURL )
{
	static UFunction* pFnBuildJoinURL = NULL;

	if ( ! pFnBuildJoinURL )
		pFnBuildJoinURL = UObject::FindObject< UFunction > ( "Function Engine.UIAction_JoinOnlineGame.BuildJoinURL" );

	UUIAction_JoinOnlineGame_execBuildJoinURL_Parms BuildJoinURL_Parms;
	memcpy ( &BuildJoinURL_Parms.ResolvedConnectionURL, &ResolvedConnectionURL, 0xC );

	this->ProcessEvent ( pFnBuildJoinURL, &BuildJoinURL_Parms, NULL );

	return BuildJoinURL_Parms.ReturnValue;
};

// Function Engine.UIAction_JoinOnlineGame.OnJoinGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIAction_JoinOnlineGame::OnJoinGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinGameComplete = NULL;

	if ( ! pFnOnJoinGameComplete )
		pFnOnJoinGameComplete = UObject::FindObject< UFunction > ( "Function Engine.UIAction_JoinOnlineGame.OnJoinGameComplete" );

	UUIAction_JoinOnlineGame_execOnJoinGameComplete_Parms OnJoinGameComplete_Parms;
	memcpy ( &OnJoinGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinGameComplete, &OnJoinGameComplete_Parms, NULL );
};

// Function Engine.UIAction_JoinOnlineGame.JoinOnlineGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ControllerId                   ( CPF_Parm )
// struct FOnlineGameSearchResult GameToJoin                     ( CPF_Parm )
// class AWorldInfo*              InWorldInfo                    ( CPF_Parm )

void UUIAction_JoinOnlineGame::eventJoinOnlineGame ( unsigned char ControllerId, struct FOnlineGameSearchResult GameToJoin, class AWorldInfo* InWorldInfo )
{
	static UFunction* pFnJoinOnlineGame = NULL;

	if ( ! pFnJoinOnlineGame )
		pFnJoinOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.UIAction_JoinOnlineGame.JoinOnlineGame" );

	UUIAction_JoinOnlineGame_eventJoinOnlineGame_Parms JoinOnlineGame_Parms;
	JoinOnlineGame_Parms.ControllerId = ControllerId;
	memcpy ( &JoinOnlineGame_Parms.GameToJoin, &GameToJoin, 0x8 );
	JoinOnlineGame_Parms.InWorldInfo = InWorldInfo;

	this->ProcessEvent ( pFnJoinOnlineGame, &JoinOnlineGame_Parms, NULL );
};

// Function Engine.UIAction_OpenScene.OnSceneDeactivatedCallback
// [0x00120000] 
// Parameters infos:

void UUIAction_OpenScene::OnSceneDeactivatedCallback ( )
{
	static UFunction* pFnOnSceneDeactivatedCallback = NULL;

	if ( ! pFnOnSceneDeactivatedCallback )
		pFnOnSceneDeactivatedCallback = UObject::FindObject< UFunction > ( "Function Engine.UIAction_OpenScene.OnSceneDeactivatedCallback" );

	UUIAction_OpenScene_execOnSceneDeactivatedCallback_Parms OnSceneDeactivatedCallback_Parms;

	this->ProcessEvent ( pFnOnSceneDeactivatedCallback, &OnSceneDeactivatedCallback_Parms, NULL );
};

// Function Engine.UIAction_OpenScene.OnSceneActivatedCallback
// [0x00120000] 
// Parameters infos:

void UUIAction_OpenScene::OnSceneActivatedCallback ( )
{
	static UFunction* pFnOnSceneActivatedCallback = NULL;

	if ( ! pFnOnSceneActivatedCallback )
		pFnOnSceneActivatedCallback = UObject::FindObject< UFunction > ( "Function Engine.UIAction_OpenScene.OnSceneActivatedCallback" );

	UUIAction_OpenScene_execOnSceneActivatedCallback_Parms OnSceneActivatedCallback_Parms;

	this->ProcessEvent ( pFnOnSceneActivatedCallback, &OnSceneActivatedCallback_Parms, NULL );
};

// Function Engine.UIAction_OpenScene.AssociateCallbacks
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIAction_OpenScene::AssociateCallbacks ( )
{
	static UFunction* pFnAssociateCallbacks = NULL;

	if ( ! pFnAssociateCallbacks )
		pFnAssociateCallbacks = UObject::FindObject< UFunction > ( "Function Engine.UIAction_OpenScene.AssociateCallbacks" );

	UUIAction_OpenScene_execAssociateCallbacks_Parms AssociateCallbacks_Parms;

	pFnAssociateCallbacks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAssociateCallbacks, &AssociateCallbacks_Parms, NULL );

	pFnAssociateCallbacks->FunctionFlags |= 0x400;
};

// Function Engine.UIAction_PublishValue.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIAction_PublishValue::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIAction_PublishValue.IsValidUISequenceObject" );

	UUIAction_PublishValue_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction_RefreshBindingValue.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIAction_RefreshBindingValue::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIAction_RefreshBindingValue.IsValidUISequenceObject" );

	UUIAction_RefreshBindingValue_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction_SaveProfileSettings.OnProfileWriteComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIAction_SaveProfileSettings::OnProfileWriteComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnProfileWriteComplete = NULL;

	if ( ! pFnOnProfileWriteComplete )
		pFnOnProfileWriteComplete = UObject::FindObject< UFunction > ( "Function Engine.UIAction_SaveProfileSettings.OnProfileWriteComplete" );

	UUIAction_SaveProfileSettings_execOnProfileWriteComplete_Parms OnProfileWriteComplete_Parms;
	OnProfileWriteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnProfileWriteComplete, &OnProfileWriteComplete_Parms, NULL );
};

// Function Engine.UIAction_SaveProfileSettings.ClearDelegate
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_SaveProfileSettings::eventClearDelegate ( )
{
	static UFunction* pFnClearDelegate = NULL;

	if ( ! pFnClearDelegate )
		pFnClearDelegate = UObject::FindObject< UFunction > ( "Function Engine.UIAction_SaveProfileSettings.ClearDelegate" );

	UUIAction_SaveProfileSettings_eventClearDelegate_Parms ClearDelegate_Parms;

	this->ProcessEvent ( pFnClearDelegate, &ClearDelegate_Parms, NULL );
};

// Function Engine.UIAction_SaveProfileSettings.RegisterDelegate
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_SaveProfileSettings::eventRegisterDelegate ( )
{
	static UFunction* pFnRegisterDelegate = NULL;

	if ( ! pFnRegisterDelegate )
		pFnRegisterDelegate = UObject::FindObject< UFunction > ( "Function Engine.UIAction_SaveProfileSettings.RegisterDelegate" );

	UUIAction_SaveProfileSettings_eventRegisterDelegate_Parms RegisterDelegate_Parms;

	this->ProcessEvent ( pFnRegisterDelegate, &RegisterDelegate_Parms, NULL );
};

// Function Engine.UIAction_SetDatafieldValue.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_SetDatafieldValue::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_SetDatafieldValue.GetObjClassVersion" );

	UUIAction_SetDatafieldValue_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_SetFocus.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_SetFocus::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_SetFocus.GetObjClassVersion" );

	UUIAction_SetFocus_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_ShowDeviceSelectionUI.OnDeviceSelectionComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIAction_ShowDeviceSelectionUI::OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDeviceSelectionComplete = NULL;

	if ( ! pFnOnDeviceSelectionComplete )
		pFnOnDeviceSelectionComplete = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowDeviceSelectionUI.OnDeviceSelectionComplete" );

	UUIAction_ShowDeviceSelectionUI_execOnDeviceSelectionComplete_Parms OnDeviceSelectionComplete_Parms;
	OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Parms, NULL );
};

// Function Engine.UIAction_ShowDeviceSelectionUI.SelectDevice
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_ShowDeviceSelectionUI::eventSelectDevice ( )
{
	static UFunction* pFnSelectDevice = NULL;

	if ( ! pFnSelectDevice )
		pFnSelectDevice = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowDeviceSelectionUI.SelectDevice" );

	UUIAction_ShowDeviceSelectionUI_eventSelectDevice_Parms SelectDevice_Parms;

	this->ProcessEvent ( pFnSelectDevice, &SelectDevice_Parms, NULL );
};

// Function Engine.UIAction_ShowDeviceSelectionUI.WriteToVariables
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIAction_ShowDeviceSelectionUI::WriteToVariables ( )
{
	static UFunction* pFnWriteToVariables = NULL;

	if ( ! pFnWriteToVariables )
		pFnWriteToVariables = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowDeviceSelectionUI.WriteToVariables" );

	UUIAction_ShowDeviceSelectionUI_execWriteToVariables_Parms WriteToVariables_Parms;

	pFnWriteToVariables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWriteToVariables, &WriteToVariables_Parms, NULL );

	pFnWriteToVariables->FunctionFlags |= 0x400;
};

// Function Engine.UIAction_ShowKeyboardUI.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_ShowKeyboardUI::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowKeyboardUI.GetObjClassVersion" );

	UUIAction_ShowKeyboardUI_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_ShowKeyboardUI.OnKeyboardInputDone
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIAction_ShowKeyboardUI::OnKeyboardInputDone ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnKeyboardInputDone = NULL;

	if ( ! pFnOnKeyboardInputDone )
		pFnOnKeyboardInputDone = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowKeyboardUI.OnKeyboardInputDone" );

	UUIAction_ShowKeyboardUI_execOnKeyboardInputDone_Parms OnKeyboardInputDone_Parms;
	OnKeyboardInputDone_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnKeyboardInputDone, &OnKeyboardInputDone_Parms, NULL );
};

// Function Engine.UIAction_ShowKeyboardUI.ReadKeyboardInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_ShowKeyboardUI::eventReadKeyboardInput ( )
{
	static UFunction* pFnReadKeyboardInput = NULL;

	if ( ! pFnReadKeyboardInput )
		pFnReadKeyboardInput = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowKeyboardUI.ReadKeyboardInput" );

	UUIAction_ShowKeyboardUI_eventReadKeyboardInput_Parms ReadKeyboardInput_Parms;

	this->ProcessEvent ( pFnReadKeyboardInput, &ReadKeyboardInput_Parms, NULL );
};

// Function Engine.UIAction_ShowLoginUI.OnLoginCancelled
// [0x00020002] 
// Parameters infos:

void UUIAction_ShowLoginUI::OnLoginCancelled ( )
{
	static UFunction* pFnOnLoginCancelled = NULL;

	if ( ! pFnOnLoginCancelled )
		pFnOnLoginCancelled = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowLoginUI.OnLoginCancelled" );

	UUIAction_ShowLoginUI_execOnLoginCancelled_Parms OnLoginCancelled_Parms;

	this->ProcessEvent ( pFnOnLoginCancelled, &OnLoginCancelled_Parms, NULL );
};

// Function Engine.UIAction_ShowLoginUI.OnLoginChanged
// [0x00020002] 
// Parameters infos:

void UUIAction_ShowLoginUI::OnLoginChanged ( )
{
	static UFunction* pFnOnLoginChanged = NULL;

	if ( ! pFnOnLoginChanged )
		pFnOnLoginChanged = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowLoginUI.OnLoginChanged" );

	UUIAction_ShowLoginUI_execOnLoginChanged_Parms OnLoginChanged_Parms;

	this->ProcessEvent ( pFnOnLoginChanged, &OnLoginChanged_Parms, NULL );
};

// Function Engine.UIAction_ShowLoginUI.ShowUI
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_ShowLoginUI::eventShowUI ( )
{
	static UFunction* pFnShowUI = NULL;

	if ( ! pFnShowUI )
		pFnShowUI = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowLoginUI.ShowUI" );

	UUIAction_ShowLoginUI_eventShowUI_Parms ShowUI_Parms;

	this->ProcessEvent ( pFnShowUI, &ShowUI_Parms, NULL );
};

// Function Engine.UICond_IsFocused.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICond_IsFocused::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UICond_IsFocused.IsValidLevelSequenceObject" );

	UUICond_IsFocused_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.GetObjClassVersion" );

	UUIEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent.ShouldAlwaysInstance
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent::eventShouldAlwaysInstance ( )
{
	static UFunction* pFnShouldAlwaysInstance = NULL;

	if ( ! pFnShouldAlwaysInstance )
		pFnShouldAlwaysInstance = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.ShouldAlwaysInstance" );

	UUIEvent_eventShouldAlwaysInstance_Parms ShouldAlwaysInstance_Parms;

	this->ProcessEvent ( pFnShouldAlwaysInstance, &ShouldAlwaysInstance_Parms, NULL );

	return ShouldAlwaysInstance_Parms.ReturnValue;
};

// Function Engine.UIEvent.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.IsValidUISequenceObject" );

	UUIEvent_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.IsValidLevelSequenceObject" );

	UUIEvent_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.ActivateUIEvent
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::ActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnActivateUIEvent = NULL;

	if ( ! pFnActivateUIEvent )
		pFnActivateUIEvent = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.ActivateUIEvent" );

	UUIEvent_execActivateUIEvent_Parms ActivateUIEvent_Parms;
	ActivateUIEvent_Parms.ControllerIndex = ControllerIndex;
	ActivateUIEvent_Parms.InEventOwner = InEventOwner;
	ActivateUIEvent_Parms.InEventActivator = InEventActivator;
	ActivateUIEvent_Parms.bActivateImmediately = bActivateImmediately;

	pFnActivateUIEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateUIEvent, &ActivateUIEvent_Parms, NULL );

	pFnActivateUIEvent->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &ActivateUIEvent_Parms.IndicesToActivate, 0xC );

	return ActivateUIEvent_Parms.ReturnValue;
};

// Function Engine.UIEvent.ConditionalActivateUIEvent
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::ConditionalActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnConditionalActivateUIEvent = NULL;

	if ( ! pFnConditionalActivateUIEvent )
		pFnConditionalActivateUIEvent = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.ConditionalActivateUIEvent" );

	UUIEvent_execConditionalActivateUIEvent_Parms ConditionalActivateUIEvent_Parms;
	ConditionalActivateUIEvent_Parms.ControllerIndex = ControllerIndex;
	ConditionalActivateUIEvent_Parms.InEventOwner = InEventOwner;
	ConditionalActivateUIEvent_Parms.InEventActivator = InEventActivator;
	ConditionalActivateUIEvent_Parms.bActivateImmediately = bActivateImmediately;

	pFnConditionalActivateUIEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConditionalActivateUIEvent, &ConditionalActivateUIEvent_Parms, NULL );

	pFnConditionalActivateUIEvent->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &ConditionalActivateUIEvent_Parms.IndicesToActivate, 0xC );

	return ConditionalActivateUIEvent_Parms.ReturnValue;
};

// Function Engine.UIEvent.CanBeActivated
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::CanBeActivated ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.CanBeActivated" );

	UUIEvent_execCanBeActivated_Parms CanBeActivated_Parms;
	CanBeActivated_Parms.ControllerIndex = ControllerIndex;
	CanBeActivated_Parms.InEventOwner = InEventOwner;
	CanBeActivated_Parms.InEventActivator = InEventActivator;
	CanBeActivated_Parms.bActivateImmediately = bActivateImmediately;

	pFnCanBeActivated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );

	pFnCanBeActivated->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &CanBeActivated_Parms.IndicesToActivate, 0xC );

	return CanBeActivated_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetOwnerScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIEvent::GetOwnerScene ( )
{
	static UFunction* pFnGetOwnerScene = NULL;

	if ( ! pFnGetOwnerScene )
		pFnGetOwnerScene = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.GetOwnerScene" );

	UUIEvent_execGetOwnerScene_Parms GetOwnerScene_Parms;

	pFnGetOwnerScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerScene, &GetOwnerScene_Parms, NULL );

	pFnGetOwnerScene->FunctionFlags |= 0x400;

	return GetOwnerScene_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIEvent::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.GetOwner" );

	UUIEvent_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIEvent.AllowEventActivation
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_Parm )
// TArray< int >                  IndicesToActivate              ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::AllowEventActivation ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, TArray< int >* IndicesToActivate )
{
	static UFunction* pFnAllowEventActivation = NULL;

	if ( ! pFnAllowEventActivation )
		pFnAllowEventActivation = UObject::FindObject< UFunction > ( "Function Engine.UIEvent.AllowEventActivation" );

	UUIEvent_execAllowEventActivation_Parms AllowEventActivation_Parms;
	AllowEventActivation_Parms.ControllerIndex = ControllerIndex;
	AllowEventActivation_Parms.InEventOwner = InEventOwner;
	AllowEventActivation_Parms.InEventActivator = InEventActivator;
	AllowEventActivation_Parms.bActivateImmediately = bActivateImmediately;

	this->ProcessEvent ( pFnAllowEventActivation, &AllowEventActivation_Parms, NULL );

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &AllowEventActivation_Parms.IndicesToActivate, 0xC );

	return AllowEventActivation_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent_CalloutButtonInputProxy::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CalloutButtonInputProxy.GetObjClassVersion" );

	UUIEvent_CalloutButtonInputProxy_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent_CalloutButtonInputProxy::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CalloutButtonInputProxy.IsPastingIntoUISequenceAllowed" );

	UUIEvent_CalloutButtonInputProxy_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CalloutButtonInputProxy.IsValidUISequenceObject" );

	UUIEvent_CalloutButtonInputProxy_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.FindButtonAliasIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

int UUIEvent_CalloutButtonInputProxy::FindButtonAliasIndex ( struct FName ButtonAliasName )
{
	static UFunction* pFnFindButtonAliasIndex = NULL;

	if ( ! pFnFindButtonAliasIndex )
		pFnFindButtonAliasIndex = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CalloutButtonInputProxy.FindButtonAliasIndex" );

	UUIEvent_CalloutButtonInputProxy_execFindButtonAliasIndex_Parms FindButtonAliasIndex_Parms;
	memcpy ( &FindButtonAliasIndex_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnFindButtonAliasIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindButtonAliasIndex, &FindButtonAliasIndex_Parms, NULL );

	pFnFindButtonAliasIndex->FunctionFlags |= 0x400;

	return FindButtonAliasIndex_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.ChangeButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CurrentAliasName               ( CPF_Parm )
// struct FName                   NewAliasName                   ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::ChangeButtonAlias ( struct FName CurrentAliasName, struct FName NewAliasName )
{
	static UFunction* pFnChangeButtonAlias = NULL;

	if ( ! pFnChangeButtonAlias )
		pFnChangeButtonAlias = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CalloutButtonInputProxy.ChangeButtonAlias" );

	UUIEvent_CalloutButtonInputProxy_execChangeButtonAlias_Parms ChangeButtonAlias_Parms;
	memcpy ( &ChangeButtonAlias_Parms.CurrentAliasName, &CurrentAliasName, 0x8 );
	memcpy ( &ChangeButtonAlias_Parms.NewAliasName, &NewAliasName, 0x8 );

	pFnChangeButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeButtonAlias, &ChangeButtonAlias_Parms, NULL );

	pFnChangeButtonAlias->FunctionFlags |= 0x400;

	return ChangeButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.UnregisterButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::UnregisterButtonAlias ( struct FName ButtonAliasName )
{
	static UFunction* pFnUnregisterButtonAlias = NULL;

	if ( ! pFnUnregisterButtonAlias )
		pFnUnregisterButtonAlias = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CalloutButtonInputProxy.UnregisterButtonAlias" );

	UUIEvent_CalloutButtonInputProxy_execUnregisterButtonAlias_Parms UnregisterButtonAlias_Parms;
	memcpy ( &UnregisterButtonAlias_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnUnregisterButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterButtonAlias, &UnregisterButtonAlias_Parms, NULL );

	pFnUnregisterButtonAlias->FunctionFlags |= 0x400;

	return UnregisterButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.RegisterButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::RegisterButtonAlias ( struct FName ButtonAliasName )
{
	static UFunction* pFnRegisterButtonAlias = NULL;

	if ( ! pFnRegisterButtonAlias )
		pFnRegisterButtonAlias = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CalloutButtonInputProxy.RegisterButtonAlias" );

	UUIEvent_CalloutButtonInputProxy_execRegisterButtonAlias_Parms RegisterButtonAlias_Parms;
	memcpy ( &RegisterButtonAlias_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnRegisterButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterButtonAlias, &RegisterButtonAlias_Parms, NULL );

	pFnRegisterButtonAlias->FunctionFlags |= 0x400;

	return RegisterButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_CheckValueChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_CheckValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_CheckValueChanged.IsValidUISequenceObject" );

	UUIEvent_CheckValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_ComboboxValueChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_ComboboxValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_ComboboxValueChanged.IsValidUISequenceObject" );

	UUIEvent_ComboboxValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_ListIndexChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_ListIndexChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_ListIndexChanged.IsValidUISequenceObject" );

	UUIEvent_ListIndexChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_MetaObject.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent_MetaObject::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_MetaObject.IsPastingIntoUISequenceAllowed" );

	UUIEvent_MetaObject_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.UIEvent_MetaObject.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_MetaObject::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_MetaObject.IsValidUISequenceObject" );

	UUIEvent_MetaObject_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_NumericOptionListValueChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_NumericOptionListValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_NumericOptionListValueChanged.IsValidUISequenceObject" );

	UUIEvent_NumericOptionListValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_OptionListValueChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_OptionListValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_OptionListValueChanged.IsValidUISequenceObject" );

	UUIEvent_OptionListValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_ProcessInput.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_ProcessInput::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_ProcessInput.IsValidUISequenceObject" );

	UUIEvent_ProcessInput_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_ProgressBarValueChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_ProgressBarValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_ProgressBarValueChanged.IsValidUISequenceObject" );

	UUIEvent_ProgressBarValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_ScrollbarPositionChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_ScrollbarPositionChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_ScrollbarPositionChanged.IsValidUISequenceObject" );

	UUIEvent_ScrollbarPositionChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_SliderValueChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_SliderValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_SliderValueChanged.IsValidUISequenceObject" );

	UUIEvent_SliderValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_SubmitListData.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_SubmitListData::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_SubmitListData.IsValidUISequenceObject" );

	UUIEvent_SubmitListData_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_SubmitTextData.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_SubmitTextData::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_SubmitTextData.IsValidUISequenceObject" );

	UUIEvent_SubmitTextData_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_TabControl.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_TabControl::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_TabControl.IsValidUISequenceObject" );

	UUIEvent_TabControl_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_TextValueChanged.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_TextValueChanged::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_TextValueChanged.IsValidUISequenceObject" );

	UUIEvent_TextValueChanged_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UISequence.RemoveSequenceObjects
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class USequenceObject* > ObjectsToRemove                ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISequence::RemoveSequenceObjects ( TArray< class USequenceObject* >* ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = UObject::FindObject< UFunction > ( "Function Engine.UISequence.RemoveSequenceObjects" );

	UUISequence_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;

	if ( ObjectsToRemove )
		memcpy ( ObjectsToRemove, &RemoveSequenceObjects_Parms.ObjectsToRemove, 0xC );
};

// Function Engine.UISequence.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUISequence::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UISequence.RemoveSequenceObject" );

	UUISequence_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UISequence.AddSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUISequence::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UISequence.AddSequenceObject" );

	UUISequence_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UISequence.GetUIEvents
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIEvent* >      out_Events                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISequence::GetUIEvents ( class UClass* LimitClass, TArray< class UUIEvent* >* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = UObject::FindObject< UFunction > ( "Function Engine.UISequence.GetUIEvents" );

	UUISequence_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0xC );
};

// Function Engine.UISequence.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUISequence::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = UObject::FindObject< UFunction > ( "Function Engine.UISequence.GetOwner" );

	UUISequence_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIStateSequence.GetOwnerState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIState* UUIStateSequence::GetOwnerState ( )
{
	static UFunction* pFnGetOwnerState = NULL;

	if ( ! pFnGetOwnerState )
		pFnGetOwnerState = UObject::FindObject< UFunction > ( "Function Engine.UIStateSequence.GetOwnerState" );

	UUIStateSequence_execGetOwnerState_Parms GetOwnerState_Parms;

	pFnGetOwnerState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerState, &GetOwnerState_Parms, NULL );

	pFnGetOwnerState->FunctionFlags |= 0x400;

	return GetOwnerState_Parms.ReturnValue;
};

// Function Engine.FluidInfluenceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void AFluidInfluenceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.FluidInfluenceActor.OnToggle" );

	AFluidInfluenceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FluidSurfaceActor.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AFluidSurfaceActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.FluidSurfaceActor.Touch" );

	AFluidSurfaceActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.FluidSurfaceComponent.SetDetailPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )

void UFluidSurfaceComponent::SetDetailPosition ( struct FVector WorldPos )
{
	static UFunction* pFnSetDetailPosition = NULL;

	if ( ! pFnSetDetailPosition )
		pFnSetDetailPosition = UObject::FindObject< UFunction > ( "Function Engine.FluidSurfaceComponent.SetDetailPosition" );

	UFluidSurfaceComponent_execSetDetailPosition_Parms SetDetailPosition_Parms;
	memcpy ( &SetDetailPosition_Parms.WorldPos, &WorldPos, 0xC );

	pFnSetDetailPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDetailPosition, &SetDetailPosition_Parms, NULL );

	pFnSetDetailPosition->FunctionFlags |= 0x400;
};

// Function Engine.FluidSurfaceComponent.ApplyForce
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bImpulse                       ( CPF_OptionalParm | CPF_Parm )

void UFluidSurfaceComponent::ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse )
{
	static UFunction* pFnApplyForce = NULL;

	if ( ! pFnApplyForce )
		pFnApplyForce = UObject::FindObject< UFunction > ( "Function Engine.FluidSurfaceComponent.ApplyForce" );

	UFluidSurfaceComponent_execApplyForce_Parms ApplyForce_Parms;
	memcpy ( &ApplyForce_Parms.WorldPos, &WorldPos, 0xC );
	ApplyForce_Parms.Strength = Strength;
	ApplyForce_Parms.Radius = Radius;
	ApplyForce_Parms.bImpulse = bImpulse;

	pFnApplyForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyForce, &ApplyForce_Parms, NULL );

	pFnApplyForce->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetIsActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bInIsActive                    ( CPF_Parm )

void ULensFlareComponent::SetIsActive ( unsigned long bInIsActive )
{
	static UFunction* pFnSetIsActive = NULL;

	if ( ! pFnSetIsActive )
		pFnSetIsActive = UObject::FindObject< UFunction > ( "Function Engine.LensFlareComponent.SetIsActive" );

	ULensFlareComponent_execSetIsActive_Parms SetIsActive_Parms;
	SetIsActive_Parms.bInIsActive = bInIsActive;

	pFnSetIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIsActive, &SetIsActive_Parms, NULL );

	pFnSetIsActive->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetSourceColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            InSourceColor                  ( CPF_Parm )

void ULensFlareComponent::SetSourceColor ( struct FLinearColor InSourceColor )
{
	static UFunction* pFnSetSourceColor = NULL;

	if ( ! pFnSetSourceColor )
		pFnSetSourceColor = UObject::FindObject< UFunction > ( "Function Engine.LensFlareComponent.SetSourceColor" );

	ULensFlareComponent_execSetSourceColor_Parms SetSourceColor_Parms;
	memcpy ( &SetSourceColor_Parms.InSourceColor, &InSourceColor, 0x10 );

	pFnSetSourceColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSourceColor, &SetSourceColor_Parms, NULL );

	pFnSetSourceColor->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULensFlare*              NewTemplate                    ( CPF_Parm )

void ULensFlareComponent::SetTemplate ( class ULensFlare* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function Engine.LensFlareComponent.SetTemplate" );

	ULensFlareComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareSource.SetActorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void ALensFlareSource::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = UObject::FindObject< UFunction > ( "Function Engine.LensFlareSource.SetActorParameter" );

	ALensFlareSource_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetExtColorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Red                            ( CPF_Parm )
// float                          Green                          ( CPF_Parm )
// float                          Blue                           ( CPF_Parm )
// float                          Alpha                          ( CPF_Parm )

void ALensFlareSource::SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha )
{
	static UFunction* pFnSetExtColorParameter = NULL;

	if ( ! pFnSetExtColorParameter )
		pFnSetExtColorParameter = UObject::FindObject< UFunction > ( "Function Engine.LensFlareSource.SetExtColorParameter" );

	ALensFlareSource_execSetExtColorParameter_Parms SetExtColorParameter_Parms;
	memcpy ( &SetExtColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetExtColorParameter_Parms.Red = Red;
	SetExtColorParameter_Parms.Green = Green;
	SetExtColorParameter_Parms.Blue = Blue;
	SetExtColorParameter_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSetExtColorParameter, &SetExtColorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetColorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Param                          ( CPF_Parm )

void ALensFlareSource::SetColorParameter ( struct FName ParameterName, struct FLinearColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = UObject::FindObject< UFunction > ( "Function Engine.LensFlareSource.SetColorParameter" );

	ALensFlareSource_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x10 );

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetVectorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void ALensFlareSource::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = UObject::FindObject< UFunction > ( "Function Engine.LensFlareSource.SetVectorParameter" );

	ALensFlareSource_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetFloatParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void ALensFlareSource::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = UObject::FindObject< UFunction > ( "Function Engine.LensFlareSource.SetFloatParameter" );

	ALensFlareSource_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALensFlareSource::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.LensFlareSource.OnToggle" );

	ALensFlareSource_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.LensFlareSource.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULensFlare*              NewTemplate                    ( CPF_Parm )

void ALensFlareSource::SetTemplate ( class ULensFlare* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function Engine.LensFlareSource.SetTemplate" );

	ALensFlareSource_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.AudioDevice.SetSoundMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewSoundMode                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm )

void UAudioDevice::SetSoundMode ( unsigned char NewSoundMode, float FadeTime )
{
	static UFunction* pFnSetSoundMode = NULL;

	if ( ! pFnSetSoundMode )
		pFnSetSoundMode = UObject::FindObject< UFunction > ( "Function Engine.AudioDevice.SetSoundMode" );

	UAudioDevice_execSetSoundMode_Parms SetSoundMode_Parms;
	SetSoundMode_Parms.NewSoundMode = NewSoundMode;
	SetSoundMode_Parms.FadeTime = FadeTime;

	pFnSetSoundMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoundMode, &SetSoundMode_Parms, NULL );

	pFnSetSoundMode->FunctionFlags |= 0x400;
};

// Function Engine.LocalMessage.PartiallyDuplicates
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch1                        ( CPF_Parm )
// int                            Switch2                        ( CPF_Parm )
// class UObject*                 OptionalObject1                ( CPF_Parm )
// class UObject*                 OptionalObject2                ( CPF_Parm )

bool ULocalMessage::PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 )
{
	static UFunction* pFnPartiallyDuplicates = NULL;

	if ( ! pFnPartiallyDuplicates )
		pFnPartiallyDuplicates = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.PartiallyDuplicates" );

	ULocalMessage_execPartiallyDuplicates_Parms PartiallyDuplicates_Parms;
	PartiallyDuplicates_Parms.Switch1 = Switch1;
	PartiallyDuplicates_Parms.Switch2 = Switch2;
	PartiallyDuplicates_Parms.OptionalObject1 = OptionalObject1;
	PartiallyDuplicates_Parms.OptionalObject2 = OptionalObject2;

	this->ProcessEvent ( pFnPartiallyDuplicates, &PartiallyDuplicates_Parms, NULL );

	return PartiallyDuplicates_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsKeyObjectiveMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool ULocalMessage::IsKeyObjectiveMessage ( int Switch )
{
	static UFunction* pFnIsKeyObjectiveMessage = NULL;

	if ( ! pFnIsKeyObjectiveMessage )
		pFnIsKeyObjectiveMessage = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.IsKeyObjectiveMessage" );

	ULocalMessage_execIsKeyObjectiveMessage_Parms IsKeyObjectiveMessage_Parms;
	IsKeyObjectiveMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsKeyObjectiveMessage, &IsKeyObjectiveMessage_Parms, NULL );

	return IsKeyObjectiveMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsConsoleMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool ULocalMessage::IsConsoleMessage ( int Switch )
{
	static UFunction* pFnIsConsoleMessage = NULL;

	if ( ! pFnIsConsoleMessage )
		pFnIsConsoleMessage = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.IsConsoleMessage" );

	ULocalMessage_execIsConsoleMessage_Parms IsConsoleMessage_Parms;
	IsConsoleMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsConsoleMessage, &IsConsoleMessage_Parms, NULL );

	return IsConsoleMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetLifeTime
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

float ULocalMessage::GetLifeTime ( int Switch )
{
	static UFunction* pFnGetLifeTime = NULL;

	if ( ! pFnGetLifeTime )
		pFnGetLifeTime = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.GetLifeTime" );

	ULocalMessage_execGetLifeTime_Parms GetLifeTime_Parms;
	GetLifeTime_Parms.Switch = Switch;

	this->ProcessEvent ( pFnGetLifeTime, &GetLifeTime_Parms, NULL );

	return GetLifeTime_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetFontSize
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI1                    ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI2                    ( CPF_Parm )
// class APlayerReplicationInfo*  LocalPlayer                    ( CPF_Parm )

int ULocalMessage::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
{
	static UFunction* pFnGetFontSize = NULL;

	if ( ! pFnGetFontSize )
		pFnGetFontSize = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.GetFontSize" );

	ULocalMessage_execGetFontSize_Parms GetFontSize_Parms;
	GetFontSize_Parms.Switch = Switch;
	GetFontSize_Parms.RelatedPRI1 = RelatedPRI1;
	GetFontSize_Parms.RelatedPRI2 = RelatedPRI2;
	GetFontSize_Parms.LocalPlayer = LocalPlayer;

	this->ProcessEvent ( pFnGetFontSize, &GetFontSize_Parms, NULL );

	return GetFontSize_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetPos
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class AHUD*                    myHUD                          ( CPF_Parm )

float ULocalMessage::GetPos ( int Switch, class AHUD* myHUD )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.GetPos" );

	ULocalMessage_execGetPos_Parms GetPos_Parms;
	GetPos_Parms.Switch = Switch;
	GetPos_Parms.myHUD = myHUD;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );

	return GetPos_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetColor
// [0x00022002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor ULocalMessage::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.GetColor" );

	ULocalMessage_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetConsoleColor
// [0x00022002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )

struct FColor ULocalMessage::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI )
{
	static UFunction* pFnGetConsoleColor = NULL;

	if ( ! pFnGetConsoleColor )
		pFnGetConsoleColor = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.GetConsoleColor" );

	ULocalMessage_execGetConsoleColor_Parms GetConsoleColor_Parms;
	GetConsoleColor_Parms.RelatedPRI = RelatedPRI;

	this->ProcessEvent ( pFnGetConsoleColor, &GetConsoleColor_Parms, NULL );

	return GetConsoleColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString ULocalMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.GetString" );

	ULocalMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.LocalMessage.ClientReceive
// [0x00022002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ULocalMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = UObject::FindObject< UFunction > ( "Function Engine.LocalMessage.ClientReceive" );

	ULocalMessage_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleHidden::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject" );

	USeqAct_ToggleHidden_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_AttachToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AttachToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_AttachToActor.GetObjClassVersion" );

	USeqAct_AttachToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_MakeNoise.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_MakeNoise::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_MakeNoise.GetObjClassVersion" );

	USeqAct_MakeNoise_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_TakeDamage::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_TakeDamage.GetObjClassVersion" );

	USeqEvent_TakeDamage_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Reset
// [0x00020002] 
// Parameters infos:

void USeqEvent_TakeDamage::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_TakeDamage.Reset" );

	USeqEvent_TakeDamage_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.HandleDamage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class UClass*                  InDamageType                   ( CPF_Parm )
// int                            inAmount                       ( CPF_Parm )

void USeqEvent_TakeDamage::HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* InDamageType, int inAmount )
{
	static UFunction* pFnHandleDamage = NULL;

	if ( ! pFnHandleDamage )
		pFnHandleDamage = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_TakeDamage.HandleDamage" );

	USeqEvent_TakeDamage_execHandleDamage_Parms HandleDamage_Parms;
	HandleDamage_Parms.InOriginator = InOriginator;
	HandleDamage_Parms.InInstigator = InInstigator;
	HandleDamage_Parms.InDamageType = InDamageType;
	HandleDamage_Parms.inAmount = inAmount;

	this->ProcessEvent ( pFnHandleDamage, &HandleDamage_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InDamageType                   ( CPF_Parm )

bool USeqEvent_TakeDamage::IsValidDamageType ( class UClass* InDamageType )
{
	static UFunction* pFnIsValidDamageType = NULL;

	if ( ! pFnIsValidDamageType )
		pFnIsValidDamageType = UObject::FindObject< UFunction > ( "Function Engine.SeqEvent_TakeDamage.IsValidDamageType" );

	USeqEvent_TakeDamage_execIsValidDamageType_Parms IsValidDamageType_Parms;
	IsValidDamageType_Parms.InDamageType = InDamageType;

	this->ProcessEvent ( pFnIsValidDamageType, &IsValidDamageType_Parms, NULL );

	return IsValidDamageType_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FString >       Accounts                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::GetLocalAccountNames ( TArray< struct FString >* Accounts )
{
	static UFunction* pFnGetLocalAccountNames = NULL;

	if ( ! pFnGetLocalAccountNames )
		pFnGetLocalAccountNames = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.GetLocalAccountNames" );

	UOnlineAccountInterface_execGetLocalAccountNames_Parms GetLocalAccountNames_Parms;

	this->ProcessEvent ( pFnGetLocalAccountNames, &GetLocalAccountNames_Parms, NULL );

	if ( Accounts )
		memcpy ( Accounts, &GetLocalAccountNames_Parms.Accounts, 0xC );

	return GetLocalAccountNames_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::DeleteLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnDeleteLocalAccount = NULL;

	if ( ! pFnDeleteLocalAccount )
		pFnDeleteLocalAccount = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.DeleteLocalAccount" );

	UOnlineAccountInterface_execDeleteLocalAccount_Parms DeleteLocalAccount_Parms;
	memcpy ( &DeleteLocalAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &DeleteLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnDeleteLocalAccount, &DeleteLocalAccount_Parms, NULL );

	return DeleteLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.RenameLocalAccount
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NewUserName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 OldUserName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password )
{
	static UFunction* pFnRenameLocalAccount = NULL;

	if ( ! pFnRenameLocalAccount )
		pFnRenameLocalAccount = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.RenameLocalAccount" );

	UOnlineAccountInterface_execRenameLocalAccount_Parms RenameLocalAccount_Parms;
	memcpy ( &RenameLocalAccount_Parms.NewUserName, &NewUserName, 0xC );
	memcpy ( &RenameLocalAccount_Parms.OldUserName, &OldUserName, 0xC );
	memcpy ( &RenameLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnRenameLocalAccount, &RenameLocalAccount_Parms, NULL );

	return RenameLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.CreateLocalAccount
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::CreateLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnCreateLocalAccount = NULL;

	if ( ! pFnCreateLocalAccount )
		pFnCreateLocalAccount = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.CreateLocalAccount" );

	UOnlineAccountInterface_execCreateLocalAccount_Parms CreateLocalAccount_Parms;
	memcpy ( &CreateLocalAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &CreateLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnCreateLocalAccount, &CreateLocalAccount_Parms, NULL );

	return CreateLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnClearCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnClearCreateOnlineAccountCompletedDelegate )
		pFnClearCreateOnlineAccountCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate" );

	UOnlineAccountInterface_execClearCreateOnlineAccountCompletedDelegate_Parms ClearCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &ClearCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0xC );

	this->ProcessEvent ( pFnClearCreateOnlineAccountCompletedDelegate, &ClearCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnAddCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnAddCreateOnlineAccountCompletedDelegate )
		pFnAddCreateOnlineAccountCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate" );

	UOnlineAccountInterface_execAddCreateOnlineAccountCompletedDelegate_Parms AddCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &AddCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0xC );

	this->ProcessEvent ( pFnAddCreateOnlineAccountCompletedDelegate, &AddCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// [0x00120000] 
// Parameters infos:
// unsigned char                  ErrorStatus                    ( CPF_Parm )

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus )
{
	static UFunction* pFnOnCreateOnlineAccountCompleted = NULL;

	if ( ! pFnOnCreateOnlineAccountCompleted )
		pFnOnCreateOnlineAccountCompleted = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted" );

	UOnlineAccountInterface_execOnCreateOnlineAccountCompleted_Parms OnCreateOnlineAccountCompleted_Parms;
	OnCreateOnlineAccountCompleted_Parms.ErrorStatus = ErrorStatus;

	this->ProcessEvent ( pFnOnCreateOnlineAccountCompleted, &OnCreateOnlineAccountCompleted_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 EmailAddress                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ProductKey                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey )
{
	static UFunction* pFnCreateOnlineAccount = NULL;

	if ( ! pFnCreateOnlineAccount )
		pFnCreateOnlineAccount = UObject::FindObject< UFunction > ( "Function Engine.OnlineAccountInterface.CreateOnlineAccount" );

	UOnlineAccountInterface_execCreateOnlineAccount_Parms CreateOnlineAccount_Parms;
	memcpy ( &CreateOnlineAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.Password, &Password, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.EmailAddress, &EmailAddress, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.ProductKey, &ProductKey, 0xC );

	this->ProcessEvent ( pFnCreateOnlineAccount, &CreateOnlineAccount_Parms, NULL );

	return CreateOnlineAccount_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.DeleteMessage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )

bool UOnlinePlayerInterface::DeleteMessage ( unsigned char LocalUserNum, int MessageIndex )
{
	static UFunction* pFnDeleteMessage = NULL;

	if ( ! pFnDeleteMessage )
		pFnDeleteMessage = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.DeleteMessage" );

	UOnlinePlayerInterface_execDeleteMessage_Parms DeleteMessage_Parms;
	DeleteMessage_Parms.LocalUserNum = LocalUserNum;
	DeleteMessage_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnDeleteMessage, &DeleteMessage_Parms, NULL );

	return DeleteMessage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnClearFriendMessageReceivedDelegate = NULL;

	if ( ! pFnClearFriendMessageReceivedDelegate )
		pFnClearFriendMessageReceivedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate" );

	UOnlinePlayerInterface_execClearFriendMessageReceivedDelegate_Parms ClearFriendMessageReceivedDelegate_Parms;
	ClearFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0xC );

	this->ProcessEvent ( pFnClearFriendMessageReceivedDelegate, &ClearFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnAddFriendMessageReceivedDelegate = NULL;

	if ( ! pFnAddFriendMessageReceivedDelegate )
		pFnAddFriendMessageReceivedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate" );

	UOnlinePlayerInterface_execAddFriendMessageReceivedDelegate_Parms AddFriendMessageReceivedDelegate_Parms;
	AddFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0xC );

	this->ProcessEvent ( pFnAddFriendMessageReceivedDelegate, &AddFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnFriendMessageReceived" );

	UOnlinePlayerInterface_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x8 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0xC );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.GetFriendMessages
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FOnlineFriendMessage > FriendMessages                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::GetFriendMessages ( unsigned char LocalUserNum, TArray< struct FOnlineFriendMessage >* FriendMessages )
{
	static UFunction* pFnGetFriendMessages = NULL;

	if ( ! pFnGetFriendMessages )
		pFnGetFriendMessages = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.GetFriendMessages" );

	UOnlinePlayerInterface_execGetFriendMessages_Parms GetFriendMessages_Parms;
	GetFriendMessages_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetFriendMessages, &GetFriendMessages_Parms, NULL );

	if ( FriendMessages )
		memcpy ( FriendMessages, &GetFriendMessages_Parms.FriendMessages, 0xC );
};

// Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnClearJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinFriendGameCompleteDelegate )
		pFnClearJoinFriendGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate" );

	UOnlinePlayerInterface_execClearJoinFriendGameCompleteDelegate_Parms ClearJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearJoinFriendGameCompleteDelegate, &ClearJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnAddJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinFriendGameCompleteDelegate )
		pFnAddJoinFriendGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate" );

	UOnlinePlayerInterface_execAddJoinFriendGameCompleteDelegate_Parms AddJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &AddJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddJoinFriendGameCompleteDelegate, &AddJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnJoinFriendGameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinFriendGameComplete = NULL;

	if ( ! pFnOnJoinFriendGameComplete )
		pFnOnJoinFriendGameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete" );

	UOnlinePlayerInterface_execOnJoinFriendGameComplete_Parms OnJoinFriendGameComplete_Parms;
	OnJoinFriendGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinFriendGameComplete, &OnJoinFriendGameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.JoinFriendGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )

bool UOnlinePlayerInterface::JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend )
{
	static UFunction* pFnJoinFriendGame = NULL;

	if ( ! pFnJoinFriendGame )
		pFnJoinFriendGame = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.JoinFriendGame" );

	UOnlinePlayerInterface_execJoinFriendGame_Parms JoinFriendGame_Parms;
	JoinFriendGame_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &JoinFriendGame_Parms.Friend, &Friend, 0x8 );

	this->ProcessEvent ( pFnJoinFriendGame, &JoinFriendGame_Parms, NULL );

	return JoinFriendGame_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnClearReceivedGameInviteDelegate = NULL;

	if ( ! pFnClearReceivedGameInviteDelegate )
		pFnClearReceivedGameInviteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate" );

	UOnlinePlayerInterface_execClearReceivedGameInviteDelegate_Parms ClearReceivedGameInviteDelegate_Parms;
	ClearReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReceivedGameInviteDelegate, &ClearReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnAddReceivedGameInviteDelegate = NULL;

	if ( ! pFnAddReceivedGameInviteDelegate )
		pFnAddReceivedGameInviteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate" );

	UOnlinePlayerInterface_execAddReceivedGameInviteDelegate_Parms AddReceivedGameInviteDelegate_Parms;
	AddReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReceivedGameInviteDelegate, &AddReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviterName                    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName )
{
	static UFunction* pFnOnReceivedGameInvite = NULL;

	if ( ! pFnOnReceivedGameInvite )
		pFnOnReceivedGameInvite = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnReceivedGameInvite" );

	UOnlinePlayerInterface_execOnReceivedGameInvite_Parms OnReceivedGameInvite_Parms;
	OnReceivedGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnReceivedGameInvite_Parms.InviterName, &InviterName, 0xC );

	this->ProcessEvent ( pFnOnReceivedGameInvite, &OnReceivedGameInvite_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FUniqueNetId >  Friends                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendGameInviteToFriends ( unsigned char LocalUserNum, TArray< struct FUniqueNetId > Friends, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriends = NULL;

	if ( ! pFnSendGameInviteToFriends )
		pFnSendGameInviteToFriends = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.SendGameInviteToFriends" );

	UOnlinePlayerInterface_execSendGameInviteToFriends_Parms SendGameInviteToFriends_Parms;
	SendGameInviteToFriends_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriends_Parms.Friends, &Friends, 0xC );
	memcpy ( &SendGameInviteToFriends_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSendGameInviteToFriends, &SendGameInviteToFriends_Parms, NULL );

	return SendGameInviteToFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriend = NULL;

	if ( ! pFnSendGameInviteToFriend )
		pFnSendGameInviteToFriend = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.SendGameInviteToFriend" );

	UOnlinePlayerInterface_execSendGameInviteToFriend_Parms SendGameInviteToFriend_Parms;
	SendGameInviteToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriend_Parms.Friend, &Friend, 0x8 );
	memcpy ( &SendGameInviteToFriend_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSendGameInviteToFriend, &SendGameInviteToFriend_Parms, NULL );

	return SendGameInviteToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendMessageToFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message )
{
	static UFunction* pFnSendMessageToFriend = NULL;

	if ( ! pFnSendMessageToFriend )
		pFnSendMessageToFriend = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.SendMessageToFriend" );

	UOnlinePlayerInterface_execSendMessageToFriend_Parms SendMessageToFriend_Parms;
	SendMessageToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendMessageToFriend_Parms.Friend, &Friend, 0x8 );
	memcpy ( &SendMessageToFriend_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnSendMessageToFriend, &SendMessageToFriend_Parms, NULL );

	return SendMessageToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnClearFriendInviteReceivedDelegate = NULL;

	if ( ! pFnClearFriendInviteReceivedDelegate )
		pFnClearFriendInviteReceivedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate" );

	UOnlinePlayerInterface_execClearFriendInviteReceivedDelegate_Parms ClearFriendInviteReceivedDelegate_Parms;
	ClearFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0xC );

	this->ProcessEvent ( pFnClearFriendInviteReceivedDelegate, &ClearFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnAddFriendInviteReceivedDelegate = NULL;

	if ( ! pFnAddFriendInviteReceivedDelegate )
		pFnAddFriendInviteReceivedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate" );

	UOnlinePlayerInterface_execAddFriendInviteReceivedDelegate_Parms AddFriendInviteReceivedDelegate_Parms;
	AddFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0xC );

	this->ProcessEvent ( pFnAddFriendInviteReceivedDelegate, &AddFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnFriendInviteReceived" );

	UOnlinePlayerInterface_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0xC );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.RemoveFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            FormerFriend                   ( CPF_Parm )

bool UOnlinePlayerInterface::RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend )
{
	static UFunction* pFnRemoveFriend = NULL;

	if ( ! pFnRemoveFriend )
		pFnRemoveFriend = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.RemoveFriend" );

	UOnlinePlayerInterface_execRemoveFriend_Parms RemoveFriend_Parms;
	RemoveFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &RemoveFriend_Parms.FormerFriend, &FormerFriend, 0x8 );

	this->ProcessEvent ( pFnRemoveFriend, &RemoveFriend_Parms, NULL );

	return RemoveFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.DenyFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnDenyFriendInvite = NULL;

	if ( ! pFnDenyFriendInvite )
		pFnDenyFriendInvite = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.DenyFriendInvite" );

	UOnlinePlayerInterface_execDenyFriendInvite_Parms DenyFriendInvite_Parms;
	DenyFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &DenyFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );

	this->ProcessEvent ( pFnDenyFriendInvite, &DenyFriendInvite_Parms, NULL );

	return DenyFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AcceptFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnAcceptFriendInvite = NULL;

	if ( ! pFnAcceptFriendInvite )
		pFnAcceptFriendInvite = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AcceptFriendInvite" );

	UOnlinePlayerInterface_execAcceptFriendInvite_Parms AcceptFriendInvite_Parms;
	AcceptFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );

	this->ProcessEvent ( pFnAcceptFriendInvite, &AcceptFriendInvite_Parms, NULL );

	return AcceptFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnClearAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnClearAddFriendByNameCompleteDelegate )
		pFnClearAddFriendByNameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate" );

	UOnlinePlayerInterface_execClearAddFriendByNameCompleteDelegate_Parms ClearAddFriendByNameCompleteDelegate_Parms;
	ClearAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0xC );

	this->ProcessEvent ( pFnClearAddFriendByNameCompleteDelegate, &ClearAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnAddAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnAddAddFriendByNameCompleteDelegate )
		pFnAddAddFriendByNameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate" );

	UOnlinePlayerInterface_execAddAddFriendByNameCompleteDelegate_Parms AddAddFriendByNameCompleteDelegate_Parms;
	AddAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0xC );

	this->ProcessEvent ( pFnAddAddFriendByNameCompleteDelegate, &AddAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnAddFriendByNameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnAddFriendByNameComplete = NULL;

	if ( ! pFnOnAddFriendByNameComplete )
		pFnOnAddFriendByNameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete" );

	UOnlinePlayerInterface_execOnAddFriendByNameComplete_Parms OnAddFriendByNameComplete_Parms;
	OnAddFriendByNameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnAddFriendByNameComplete, &OnAddFriendByNameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendByName
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 FriendName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message )
{
	static UFunction* pFnAddFriendByName = NULL;

	if ( ! pFnAddFriendByName )
		pFnAddFriendByName = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddFriendByName" );

	UOnlinePlayerInterface_execAddFriendByName_Parms AddFriendByName_Parms;
	AddFriendByName_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendByName_Parms.FriendName, &FriendName, 0xC );
	memcpy ( &AddFriendByName_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnAddFriendByName, &AddFriendByName_Parms, NULL );

	return AddFriendByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AddFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            NewFriend                      ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message )
{
	static UFunction* pFnAddFriend = NULL;

	if ( ! pFnAddFriend )
		pFnAddFriend = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddFriend" );

	UOnlinePlayerInterface_execAddFriend_Parms AddFriend_Parms;
	AddFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriend_Parms.NewFriend, &NewFriend, 0x8 );
	memcpy ( &AddFriend_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnAddFriend, &AddFriend_Parms, NULL );

	return AddFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnKeyboardInputComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnKeyboardInputComplete = NULL;

	if ( ! pFnOnKeyboardInputComplete )
		pFnOnKeyboardInputComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete" );

	UOnlinePlayerInterface_execOnKeyboardInputComplete_Parms OnKeyboardInputComplete_Parms;
	OnKeyboardInputComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnKeyboardInputComplete, &OnKeyboardInputComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// [0x00420000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  bWasCanceled                   ( CPF_Parm | CPF_OutParm )

struct FString UOnlinePlayerInterface::GetKeyboardInputResults ( unsigned char* bWasCanceled )
{
	static UFunction* pFnGetKeyboardInputResults = NULL;

	if ( ! pFnGetKeyboardInputResults )
		pFnGetKeyboardInputResults = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.GetKeyboardInputResults" );

	UOnlinePlayerInterface_execGetKeyboardInputResults_Parms GetKeyboardInputResults_Parms;

	this->ProcessEvent ( pFnGetKeyboardInputResults, &GetKeyboardInputResults_Parms, NULL );

	if ( bWasCanceled )
		*bWasCanceled = GetKeyboardInputResults_Parms.bWasCanceled;

	return GetKeyboardInputResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnClearKeyboardInputDoneDelegate = NULL;

	if ( ! pFnClearKeyboardInputDoneDelegate )
		pFnClearKeyboardInputDoneDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate" );

	UOnlinePlayerInterface_execClearKeyboardInputDoneDelegate_Parms ClearKeyboardInputDoneDelegate_Parms;
	memcpy ( &ClearKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0xC );

	this->ProcessEvent ( pFnClearKeyboardInputDoneDelegate, &ClearKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnAddKeyboardInputDoneDelegate = NULL;

	if ( ! pFnAddKeyboardInputDoneDelegate )
		pFnAddKeyboardInputDoneDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate" );

	UOnlinePlayerInterface_execAddKeyboardInputDoneDelegate_Parms AddKeyboardInputDoneDelegate_Parms;
	memcpy ( &AddKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0xC );

	this->ProcessEvent ( pFnAddKeyboardInputDoneDelegate, &AddKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 TitleText                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 DescriptionText                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsPassword                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldValidate                ( CPF_OptionalParm | CPF_Parm )
// struct FString                 DefaultText                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxResultLength                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength )
{
	static UFunction* pFnShowKeyboardUI = NULL;

	if ( ! pFnShowKeyboardUI )
		pFnShowKeyboardUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ShowKeyboardUI" );

	UOnlinePlayerInterface_execShowKeyboardUI_Parms ShowKeyboardUI_Parms;
	ShowKeyboardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowKeyboardUI_Parms.TitleText, &TitleText, 0xC );
	memcpy ( &ShowKeyboardUI_Parms.DescriptionText, &DescriptionText, 0xC );
	ShowKeyboardUI_Parms.bIsPassword = bIsPassword;
	ShowKeyboardUI_Parms.bShouldValidate = bShouldValidate;
	memcpy ( &ShowKeyboardUI_Parms.DefaultText, &DefaultText, 0xC );
	ShowKeyboardUI_Parms.MaxResultLength = MaxResultLength;

	this->ProcessEvent ( pFnShowKeyboardUI, &ShowKeyboardUI_Parms, NULL );

	return ShowKeyboardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            StatusId                       ( CPF_Parm )
// TArray< struct FLocalizedStringSetting > LocalizedStringSettings        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FSettingsProperty > Properties                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, TArray< struct FLocalizedStringSetting >* LocalizedStringSettings, TArray< struct FSettingsProperty >* Properties )
{
	static UFunction* pFnSetOnlineStatus = NULL;

	if ( ! pFnSetOnlineStatus )
		pFnSetOnlineStatus = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.SetOnlineStatus" );

	UOnlinePlayerInterface_execSetOnlineStatus_Parms SetOnlineStatus_Parms;
	SetOnlineStatus_Parms.LocalUserNum = LocalUserNum;
	SetOnlineStatus_Parms.StatusId = StatusId;

	this->ProcessEvent ( pFnSetOnlineStatus, &SetOnlineStatus_Parms, NULL );

	if ( LocalizedStringSettings )
		memcpy ( LocalizedStringSettings, &SetOnlineStatus_Parms.LocalizedStringSettings, 0xC );

	if ( Properties )
		memcpy ( Properties, &SetOnlineStatus_Parms.Properties, 0xC );
};

// Function Engine.OnlinePlayerInterface.GetFriendsList
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FOnlineFriend > Friends                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlinePlayerInterface::GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, TArray< struct FOnlineFriend >* Friends )
{
	static UFunction* pFnGetFriendsList = NULL;

	if ( ! pFnGetFriendsList )
		pFnGetFriendsList = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.GetFriendsList" );

	UOnlinePlayerInterface_execGetFriendsList_Parms GetFriendsList_Parms;
	GetFriendsList_Parms.LocalUserNum = LocalUserNum;
	GetFriendsList_Parms.Count = Count;
	GetFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnGetFriendsList, &GetFriendsList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &GetFriendsList_Parms.Friends, 0xC );

	return GetFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsCompleteDelegate )
		pFnClearReadFriendsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate" );

	UOnlinePlayerInterface_execClearReadFriendsCompleteDelegate_Parms ClearReadFriendsCompleteDelegate_Parms;
	ClearReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadFriendsCompleteDelegate, &ClearReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsCompleteDelegate )
		pFnAddReadFriendsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate" );

	UOnlinePlayerInterface_execAddReadFriendsCompleteDelegate_Parms AddReadFriendsCompleteDelegate_Parms;
	AddReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadFriendsCompleteDelegate, &AddReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadFriendsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsComplete = NULL;

	if ( ! pFnOnReadFriendsComplete )
		pFnOnReadFriendsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnReadFriendsComplete" );

	UOnlinePlayerInterface_execOnReadFriendsComplete_Parms OnReadFriendsComplete_Parms;
	OnReadFriendsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsComplete, &OnReadFriendsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadFriendsList
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt )
{
	static UFunction* pFnReadFriendsList = NULL;

	if ( ! pFnReadFriendsList )
		pFnReadFriendsList = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ReadFriendsList" );

	UOnlinePlayerInterface_execReadFriendsList_Parms ReadFriendsList_Parms;
	ReadFriendsList_Parms.LocalUserNum = LocalUserNum;
	ReadFriendsList_Parms.Count = Count;
	ReadFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnReadFriendsList, &ReadFriendsList_Parms, NULL );

	return ReadFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearWriteProfileSettingsCompleteDelegate )
		pFnClearWriteProfileSettingsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate" );

	UOnlinePlayerInterface_execClearWriteProfileSettingsCompleteDelegate_Parms ClearWriteProfileSettingsCompleteDelegate_Parms;
	ClearWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearWriteProfileSettingsCompleteDelegate, &ClearWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddWriteProfileSettingsCompleteDelegate )
		pFnAddWriteProfileSettingsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate" );

	UOnlinePlayerInterface_execAddWriteProfileSettingsCompleteDelegate_Parms AddWriteProfileSettingsCompleteDelegate_Parms;
	AddWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddWriteProfileSettingsCompleteDelegate, &AddWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnWriteProfileSettingsComplete = NULL;

	if ( ! pFnOnWriteProfileSettingsComplete )
		pFnOnWriteProfileSettingsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete" );

	UOnlinePlayerInterface_execOnWriteProfileSettingsComplete_Parms OnWriteProfileSettingsComplete_Parms;
	OnWriteProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnWriteProfileSettingsComplete, &OnWriteProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlinePlayerInterface::WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnWriteProfileSettings = NULL;

	if ( ! pFnWriteProfileSettings )
		pFnWriteProfileSettings = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.WriteProfileSettings" );

	UOnlinePlayerInterface_execWriteProfileSettings_Parms WriteProfileSettings_Parms;
	WriteProfileSettings_Parms.LocalUserNum = LocalUserNum;
	WriteProfileSettings_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnWriteProfileSettings, &WriteProfileSettings_Parms, NULL );

	return WriteProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetProfileSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineProfileSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetProfileSettings = NULL;

	if ( ! pFnGetProfileSettings )
		pFnGetProfileSettings = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.GetProfileSettings" );

	UOnlinePlayerInterface_execGetProfileSettings_Parms GetProfileSettings_Parms;
	GetProfileSettings_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetProfileSettings, &GetProfileSettings_Parms, NULL );

	return GetProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearReadProfileSettingsCompleteDelegate )
		pFnClearReadProfileSettingsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate" );

	UOnlinePlayerInterface_execClearReadProfileSettingsCompleteDelegate_Parms ClearReadProfileSettingsCompleteDelegate_Parms;
	ClearReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadProfileSettingsCompleteDelegate, &ClearReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddReadProfileSettingsCompleteDelegate )
		pFnAddReadProfileSettingsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate" );

	UOnlinePlayerInterface_execAddReadProfileSettingsCompleteDelegate_Parms AddReadProfileSettingsCompleteDelegate_Parms;
	AddReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadProfileSettingsCompleteDelegate, &AddReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadProfileSettingsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadProfileSettingsComplete = NULL;

	if ( ! pFnOnReadProfileSettingsComplete )
		pFnOnReadProfileSettingsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete" );

	UOnlinePlayerInterface_execOnReadProfileSettingsComplete_Parms OnReadProfileSettingsComplete_Parms;
	OnReadProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlinePlayerInterface::ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnReadProfileSettings = NULL;

	if ( ! pFnReadProfileSettings )
		pFnReadProfileSettings = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ReadProfileSettings" );

	UOnlinePlayerInterface_execReadProfileSettings_Parms ReadProfileSettings_Parms;
	ReadProfileSettings_Parms.LocalUserNum = LocalUserNum;
	ReadProfileSettings_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnReadProfileSettings, &ReadProfileSettings_Parms, NULL );

	return ReadProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnClearFriendsChangeDelegate = NULL;

	if ( ! pFnClearFriendsChangeDelegate )
		pFnClearFriendsChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate" );

	UOnlinePlayerInterface_execClearFriendsChangeDelegate_Parms ClearFriendsChangeDelegate_Parms;
	ClearFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0xC );

	this->ProcessEvent ( pFnClearFriendsChangeDelegate, &ClearFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnAddFriendsChangeDelegate = NULL;

	if ( ! pFnAddFriendsChangeDelegate )
		pFnAddFriendsChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate" );

	UOnlinePlayerInterface_execAddFriendsChangeDelegate_Parms AddFriendsChangeDelegate_Parms;
	AddFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0xC );

	this->ProcessEvent ( pFnAddFriendsChangeDelegate, &AddFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnClearMutingChangeDelegate = NULL;

	if ( ! pFnClearMutingChangeDelegate )
		pFnClearMutingChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate" );

	UOnlinePlayerInterface_execClearMutingChangeDelegate_Parms ClearMutingChangeDelegate_Parms;
	memcpy ( &ClearMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0xC );

	this->ProcessEvent ( pFnClearMutingChangeDelegate, &ClearMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnAddMutingChangeDelegate = NULL;

	if ( ! pFnAddMutingChangeDelegate )
		pFnAddMutingChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate" );

	UOnlinePlayerInterface_execAddMutingChangeDelegate_Parms AddMutingChangeDelegate_Parms;
	memcpy ( &AddMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0xC );

	this->ProcessEvent ( pFnAddMutingChangeDelegate, &AddMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnClearLoginCancelledDelegate = NULL;

	if ( ! pFnClearLoginCancelledDelegate )
		pFnClearLoginCancelledDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate" );

	UOnlinePlayerInterface_execClearLoginCancelledDelegate_Parms ClearLoginCancelledDelegate_Parms;
	memcpy ( &ClearLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0xC );

	this->ProcessEvent ( pFnClearLoginCancelledDelegate, &ClearLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnAddLoginCancelledDelegate = NULL;

	if ( ! pFnAddLoginCancelledDelegate )
		pFnAddLoginCancelledDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate" );

	UOnlinePlayerInterface_execAddLoginCancelledDelegate_Parms AddLoginCancelledDelegate_Parms;
	memcpy ( &AddLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0xC );

	this->ProcessEvent ( pFnAddLoginCancelledDelegate, &AddLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlinePlayerInterface::ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearLoginChangeDelegate = NULL;

	if ( ! pFnClearLoginChangeDelegate )
		pFnClearLoginChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate" );

	UOnlinePlayerInterface_execClearLoginChangeDelegate_Parms ClearLoginChangeDelegate_Parms;
	memcpy ( &ClearLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );
	ClearLoginChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearLoginChangeDelegate, &ClearLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlinePlayerInterface::AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddLoginChangeDelegate = NULL;

	if ( ! pFnAddLoginChangeDelegate )
		pFnAddLoginChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate" );

	UOnlinePlayerInterface_execAddLoginChangeDelegate_Parms AddLoginChangeDelegate_Parms;
	memcpy ( &AddLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );
	AddLoginChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddLoginChangeDelegate, &AddLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::ShowFriendsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowFriendsUI = NULL;

	if ( ! pFnShowFriendsUI )
		pFnShowFriendsUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ShowFriendsUI" );

	UOnlinePlayerInterface_execShowFriendsUI_Parms ShowFriendsUI_Parms;
	ShowFriendsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowFriendsUI, &ShowFriendsUI_Parms, NULL );

	return ShowFriendsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsMuted
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsMuted = NULL;

	if ( ! pFnIsMuted )
		pFnIsMuted = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.IsMuted" );

	UOnlinePlayerInterface_execIsMuted_Parms IsMuted_Parms;
	IsMuted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsMuted_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsMuted, &IsMuted_Parms, NULL );

	return IsMuted_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AreAnyFriends
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FFriendsQuery > Query                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AreAnyFriends ( unsigned char LocalUserNum, TArray< struct FFriendsQuery >* Query )
{
	static UFunction* pFnAreAnyFriends = NULL;

	if ( ! pFnAreAnyFriends )
		pFnAreAnyFriends = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AreAnyFriends" );

	UOnlinePlayerInterface_execAreAnyFriends_Parms AreAnyFriends_Parms;
	AreAnyFriends_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAreAnyFriends, &AreAnyFriends_Parms, NULL );

	if ( Query )
		memcpy ( Query, &AreAnyFriends_Parms.Query, 0xC );

	return AreAnyFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsFriend = NULL;

	if ( ! pFnIsFriend )
		pFnIsFriend = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.IsFriend" );

	UOnlinePlayerInterface_execIsFriend_Parms IsFriend_Parms;
	IsFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsFriend_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsFriend, &IsFriend_Parms, NULL );

	return IsFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanShowPresenceInformation ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanShowPresenceInformation = NULL;

	if ( ! pFnCanShowPresenceInformation )
		pFnCanShowPresenceInformation = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.CanShowPresenceInformation" );

	UOnlinePlayerInterface_execCanShowPresenceInformation_Parms CanShowPresenceInformation_Parms;
	CanShowPresenceInformation_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanShowPresenceInformation, &CanShowPresenceInformation_Parms, NULL );

	return CanShowPresenceInformation_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanViewPlayerProfiles ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanViewPlayerProfiles = NULL;

	if ( ! pFnCanViewPlayerProfiles )
		pFnCanViewPlayerProfiles = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles" );

	UOnlinePlayerInterface_execCanViewPlayerProfiles_Parms CanViewPlayerProfiles_Parms;
	CanViewPlayerProfiles_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanViewPlayerProfiles, &CanViewPlayerProfiles_Parms, NULL );

	return CanViewPlayerProfiles_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanPurchaseContent ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanPurchaseContent = NULL;

	if ( ! pFnCanPurchaseContent )
		pFnCanPurchaseContent = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.CanPurchaseContent" );

	UOnlinePlayerInterface_execCanPurchaseContent_Parms CanPurchaseContent_Parms;
	CanPurchaseContent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanPurchaseContent, &CanPurchaseContent_Parms, NULL );

	return CanPurchaseContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanDownloadUserContent ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanDownloadUserContent = NULL;

	if ( ! pFnCanDownloadUserContent )
		pFnCanDownloadUserContent = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.CanDownloadUserContent" );

	UOnlinePlayerInterface_execCanDownloadUserContent_Parms CanDownloadUserContent_Parms;
	CanDownloadUserContent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanDownloadUserContent, &CanDownloadUserContent_Parms, NULL );

	return CanDownloadUserContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanCommunicate
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanCommunicate ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.CanCommunicate" );

	UOnlinePlayerInterface_execCanCommunicate_Parms CanCommunicate_Parms;
	CanCommunicate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPlayOnline
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanPlayOnline ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.CanPlayOnline" );

	UOnlinePlayerInterface_execCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

struct FString UOnlinePlayerInterface::GetPlayerNickname ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerNickname = NULL;

	if ( ! pFnGetPlayerNickname )
		pFnGetPlayerNickname = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.GetPlayerNickname" );

	UOnlinePlayerInterface_execGetPlayerNickname_Parms GetPlayerNickname_Parms;
	GetPlayerNickname_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerNickname, &GetPlayerNickname_Parms, NULL );

	return GetPlayerNickname_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID )
{
	static UFunction* pFnGetUniquePlayerId = NULL;

	if ( ! pFnGetUniquePlayerId )
		pFnGetUniquePlayerId = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.GetUniquePlayerId" );

	UOnlinePlayerInterface_execGetUniquePlayerId_Parms GetUniquePlayerId_Parms;
	GetUniquePlayerId_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetUniquePlayerId, &GetUniquePlayerId_Parms, NULL );

	if ( PlayerID )
		memcpy ( PlayerID, &GetUniquePlayerId_Parms.PlayerID, 0x8 );

	return GetUniquePlayerId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetLoginStatus
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::GetLoginStatus ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.GetLoginStatus" );

	UOnlinePlayerInterface_execGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnClearLogoutCompletedDelegate = NULL;

	if ( ! pFnClearLogoutCompletedDelegate )
		pFnClearLogoutCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate" );

	UOnlinePlayerInterface_execClearLogoutCompletedDelegate_Parms ClearLogoutCompletedDelegate_Parms;
	ClearLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0xC );

	this->ProcessEvent ( pFnClearLogoutCompletedDelegate, &ClearLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnAddLogoutCompletedDelegate = NULL;

	if ( ! pFnAddLogoutCompletedDelegate )
		pFnAddLogoutCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate" );

	UOnlinePlayerInterface_execAddLogoutCompletedDelegate_Parms AddLogoutCompletedDelegate_Parms;
	AddLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0xC );

	this->ProcessEvent ( pFnAddLogoutCompletedDelegate, &AddLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnLogoutCompleted ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnLogoutCompleted = NULL;

	if ( ! pFnOnLogoutCompleted )
		pFnOnLogoutCompleted = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnLogoutCompleted" );

	UOnlinePlayerInterface_execOnLogoutCompleted_Parms OnLogoutCompleted_Parms;
	OnLogoutCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnLogoutCompleted, &OnLogoutCompleted_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.Logout
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::Logout ( unsigned char LocalUserNum )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.Logout" );

	UOnlinePlayerInterface_execLogout_Parms Logout_Parms;
	Logout_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );

	return Logout_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnClearLoginFailedDelegate = NULL;

	if ( ! pFnClearLoginFailedDelegate )
		pFnClearLoginFailedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate" );

	UOnlinePlayerInterface_execClearLoginFailedDelegate_Parms ClearLoginFailedDelegate_Parms;
	ClearLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );

	this->ProcessEvent ( pFnClearLoginFailedDelegate, &ClearLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnAddLoginFailedDelegate = NULL;

	if ( ! pFnAddLoginFailedDelegate )
		pFnAddLoginFailedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate" );

	UOnlinePlayerInterface_execAddLoginFailedDelegate_Parms AddLoginFailedDelegate_Parms;
	AddLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0xC );

	this->ProcessEvent ( pFnAddLoginFailedDelegate, &AddLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginFailed
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnLoginFailed" );

	UOnlinePlayerInterface_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AutoLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlinePlayerInterface::AutoLogin ( )
{
	static UFunction* pFnAutoLogin = NULL;

	if ( ! pFnAutoLogin )
		pFnAutoLogin = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.AutoLogin" );

	UOnlinePlayerInterface_execAutoLogin_Parms AutoLogin_Parms;

	this->ProcessEvent ( pFnAutoLogin, &AutoLogin_Parms, NULL );

	return AutoLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.Login
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 LoginName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWantsLocalOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.Login" );

	UOnlinePlayerInterface_execLogin_Parms Login_Parms;
	Login_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &Login_Parms.LoginName, &LoginName, 0xC );
	memcpy ( &Login_Parms.Password, &Password, 0xC );
	Login_Parms.bWantsLocalOnly = bWantsLocalOnly;

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	return Login_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowLoginUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bShowOnlineOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowLoginUI ( unsigned long bShowOnlineOnly )
{
	static UFunction* pFnShowLoginUI = NULL;

	if ( ! pFnShowLoginUI )
		pFnShowLoginUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.ShowLoginUI" );

	UOnlinePlayerInterface_execShowLoginUI_Parms ShowLoginUI_Parms;
	ShowLoginUI_Parms.bShowOnlineOnly = bShowOnlineOnly;

	this->ProcessEvent ( pFnShowLoginUI, &ShowLoginUI_Parms, NULL );

	return ShowLoginUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.OnFriendsChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnFriendsChange ( )
{
	static UFunction* pFnOnFriendsChange = NULL;

	if ( ! pFnOnFriendsChange )
		pFnOnFriendsChange = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnFriendsChange" );

	UOnlinePlayerInterface_execOnFriendsChange_Parms OnFriendsChange_Parms;

	this->ProcessEvent ( pFnOnFriendsChange, &OnFriendsChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnMutingChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnMutingChange ( )
{
	static UFunction* pFnOnMutingChange = NULL;

	if ( ! pFnOnMutingChange )
		pFnOnMutingChange = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnMutingChange" );

	UOnlinePlayerInterface_execOnMutingChange_Parms OnMutingChange_Parms;

	this->ProcessEvent ( pFnOnMutingChange, &OnMutingChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnLoginCancelled ( )
{
	static UFunction* pFnOnLoginCancelled = NULL;

	if ( ! pFnOnLoginCancelled )
		pFnOnLoginCancelled = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnLoginCancelled" );

	UOnlinePlayerInterface_execOnLoginCancelled_Parms OnLoginCancelled_Parms;

	this->ProcessEvent ( pFnOnLoginCancelled, &OnLoginCancelled_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterface.OnLoginChange" );

	UOnlinePlayerInterface_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowPlayersUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowPlayersUI = NULL;

	if ( ! pFnShowPlayersUI )
		pFnShowPlayersUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI" );

	UOnlinePlayerInterfaceEx_execShowPlayersUI_Parms ShowPlayersUI_Parms;
	ShowPlayersUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowPlayersUI, &ShowPlayersUI_Parms, NULL );

	return ShowPlayersUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFriendsInviteUI = NULL;

	if ( ! pFnShowFriendsInviteUI )
		pFnShowFriendsInviteUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI" );

	UOnlinePlayerInterfaceEx_execShowFriendsInviteUI_Parms ShowFriendsInviteUI_Parms;
	ShowFriendsInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFriendsInviteUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowFriendsInviteUI, &ShowFriendsInviteUI_Parms, NULL );

	return ShowFriendsInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnClearProfileDataChangedDelegate = NULL;

	if ( ! pFnClearProfileDataChangedDelegate )
		pFnClearProfileDataChangedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate" );

	UOnlinePlayerInterfaceEx_execClearProfileDataChangedDelegate_Parms ClearProfileDataChangedDelegate_Parms;
	ClearProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0xC );

	this->ProcessEvent ( pFnClearProfileDataChangedDelegate, &ClearProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnAddProfileDataChangedDelegate = NULL;

	if ( ! pFnAddProfileDataChangedDelegate )
		pFnAddProfileDataChangedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate" );

	UOnlinePlayerInterfaceEx_execAddProfileDataChangedDelegate_Parms AddProfileDataChangedDelegate_Parms;
	AddProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0xC );

	this->ProcessEvent ( pFnAddProfileDataChangedDelegate, &AddProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterfaceEx::OnProfileDataChanged ( )
{
	static UFunction* pFnOnProfileDataChanged = NULL;

	if ( ! pFnOnProfileDataChanged )
		pFnOnProfileDataChanged = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged" );

	UOnlinePlayerInterfaceEx_execOnProfileDataChanged_Parms OnProfileDataChanged_Parms;

	this->ProcessEvent ( pFnOnProfileDataChanged, &OnProfileDataChanged_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            PictureId                      ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId )
{
	static UFunction* pFnUnlockGamerPicture = NULL;

	if ( ! pFnUnlockGamerPicture )
		pFnUnlockGamerPicture = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture" );

	UOnlinePlayerInterfaceEx_execUnlockGamerPicture_Parms UnlockGamerPicture_Parms;
	UnlockGamerPicture_Parms.LocalUserNum = LocalUserNum;
	UnlockGamerPicture_Parms.PictureId = PictureId;

	this->ProcessEvent ( pFnUnlockGamerPicture, &UnlockGamerPicture_Parms, NULL );

	return UnlockGamerPicture_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.OnUnlockAchievementComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnUnlockAchievementComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnlockAchievementComplete = NULL;

	if ( ! pFnOnUnlockAchievementComplete )
		pFnOnUnlockAchievementComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.OnUnlockAchievementComplete" );

	UOnlinePlayerInterfaceEx_execOnUnlockAchievementComplete_Parms OnUnlockAchievementComplete_Parms;
	OnUnlockAchievementComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnlockAchievementComplete, &OnUnlockAchievementComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ClearUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnClearUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnClearUnlockAchievementCompleteDelegate )
		pFnClearUnlockAchievementCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ClearUnlockAchievementCompleteDelegate" );

	UOnlinePlayerInterfaceEx_execClearUnlockAchievementCompleteDelegate_Parms ClearUnlockAchievementCompleteDelegate_Parms;
	ClearUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUnlockAchievementCompleteDelegate, &ClearUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnAddUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnAddUnlockAchievementCompleteDelegate )
		pFnAddUnlockAchievementCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.AddUnlockAchievementCompleteDelegate" );

	UOnlinePlayerInterfaceEx_execAddUnlockAchievementCompleteDelegate_Parms AddUnlockAchievementCompleteDelegate_Parms;
	AddUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUnlockAchievementCompleteDelegate, &AddUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            AchievementId                  ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockAchievement ( unsigned char LocalUserNum, int AchievementId )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement" );

	UOnlinePlayerInterfaceEx_execUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.LocalUserNum = LocalUserNum;
	UnlockAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );

	return UnlockAchievement_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DeviceID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::IsDeviceValid ( int DeviceID )
{
	static UFunction* pFnIsDeviceValid = NULL;

	if ( ! pFnIsDeviceValid )
		pFnIsDeviceValid = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid" );

	UOnlinePlayerInterfaceEx_execIsDeviceValid_Parms IsDeviceValid_Parms;
	IsDeviceValid_Parms.DeviceID = DeviceID;

	this->ProcessEvent ( pFnIsDeviceValid, &IsDeviceValid_Parms, NULL );

	return IsDeviceValid_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDeviceSelectionComplete = NULL;

	if ( ! pFnOnDeviceSelectionComplete )
		pFnOnDeviceSelectionComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete" );

	UOnlinePlayerInterfaceEx_execOnDeviceSelectionComplete_Parms OnDeviceSelectionComplete_Parms;
	OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// [0x00420000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 DeviceName                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName )
{
	static UFunction* pFnGetDeviceSelectionResults = NULL;

	if ( ! pFnGetDeviceSelectionResults )
		pFnGetDeviceSelectionResults = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults" );

	UOnlinePlayerInterfaceEx_execGetDeviceSelectionResults_Parms GetDeviceSelectionResults_Parms;
	GetDeviceSelectionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetDeviceSelectionResults, &GetDeviceSelectionResults_Parms, NULL );

	if ( DeviceName )
		memcpy ( DeviceName, &GetDeviceSelectionResults_Parms.DeviceName, 0xC );

	return GetDeviceSelectionResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnClearDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnClearDeviceSelectionDoneDelegate )
		pFnClearDeviceSelectionDoneDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate" );

	UOnlinePlayerInterfaceEx_execClearDeviceSelectionDoneDelegate_Parms ClearDeviceSelectionDoneDelegate_Parms;
	ClearDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0xC );

	this->ProcessEvent ( pFnClearDeviceSelectionDoneDelegate, &ClearDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnAddDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnAddDeviceSelectionDoneDelegate )
		pFnAddDeviceSelectionDoneDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate" );

	UOnlinePlayerInterfaceEx_execAddDeviceSelectionDoneDelegate_Parms AddDeviceSelectionDoneDelegate_Parms;
	AddDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0xC );

	this->ProcessEvent ( pFnAddDeviceSelectionDoneDelegate, &AddDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            SizeNeeded                     ( CPF_Parm )
// unsigned long                  bForceShowUI                   ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShowUI )
{
	static UFunction* pFnShowDeviceSelectionUI = NULL;

	if ( ! pFnShowDeviceSelectionUI )
		pFnShowDeviceSelectionUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI" );

	UOnlinePlayerInterfaceEx_execShowDeviceSelectionUI_Parms ShowDeviceSelectionUI_Parms;
	ShowDeviceSelectionUI_Parms.LocalUserNum = LocalUserNum;
	ShowDeviceSelectionUI_Parms.SizeNeeded = SizeNeeded;
	ShowDeviceSelectionUI_Parms.bForceShowUI = bForceShowUI;

	this->ProcessEvent ( pFnShowDeviceSelectionUI, &ShowDeviceSelectionUI_Parms, NULL );

	return ShowDeviceSelectionUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMembershipMarketplaceUI = NULL;

	if ( ! pFnShowMembershipMarketplaceUI )
		pFnShowMembershipMarketplaceUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI" );

	UOnlinePlayerInterfaceEx_execShowMembershipMarketplaceUI_Parms ShowMembershipMarketplaceUI_Parms;
	ShowMembershipMarketplaceUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMembershipMarketplaceUI, &ShowMembershipMarketplaceUI_Parms, NULL );

	return ShowMembershipMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowContentMarketplaceUI = NULL;

	if ( ! pFnShowContentMarketplaceUI )
		pFnShowContentMarketplaceUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI" );

	UOnlinePlayerInterfaceEx_execShowContentMarketplaceUI_Parms ShowContentMarketplaceUI_Parms;
	ShowContentMarketplaceUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowContentMarketplaceUI, &ShowContentMarketplaceUI_Parms, NULL );

	return ShowContentMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviteText                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText )
{
	static UFunction* pFnShowInviteUI = NULL;

	if ( ! pFnShowInviteUI )
		pFnShowInviteUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI" );

	UOnlinePlayerInterfaceEx_execShowInviteUI_Parms ShowInviteUI_Parms;
	ShowInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowInviteUI_Parms.InviteText, &InviteText, 0xC );

	this->ProcessEvent ( pFnShowInviteUI, &ShowInviteUI_Parms, NULL );

	return ShowInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowAchievementsUI = NULL;

	if ( ! pFnShowAchievementsUI )
		pFnShowAchievementsUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI" );

	UOnlinePlayerInterfaceEx_execShowAchievementsUI_Parms ShowAchievementsUI_Parms;
	ShowAchievementsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowAchievementsUI, &ShowAchievementsUI_Parms, NULL );

	return ShowAchievementsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMessagesUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMessagesUI = NULL;

	if ( ! pFnShowMessagesUI )
		pFnShowMessagesUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI" );

	UOnlinePlayerInterfaceEx_execShowMessagesUI_Parms ShowMessagesUI_Parms;
	ShowMessagesUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMessagesUI, &ShowMessagesUI_Parms, NULL );

	return ShowMessagesUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowGamerCardUI = NULL;

	if ( ! pFnShowGamerCardUI )
		pFnShowGamerCardUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI" );

	UOnlinePlayerInterfaceEx_execShowGamerCardUI_Parms ShowGamerCardUI_Parms;
	ShowGamerCardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowGamerCardUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowGamerCardUI, &ShowGamerCardUI_Parms, NULL );

	return ShowGamerCardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFeedbackUI = NULL;

	if ( ! pFnShowFeedbackUI )
		pFnShowFeedbackUI = UObject::FindObject< UFunction > ( "Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI" );

	UOnlinePlayerInterfaceEx_execShowFeedbackUI_Parms ShowFeedbackUI_Parms;
	ShowFeedbackUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFeedbackUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowFeedbackUI, &ShowFeedbackUI_Parms, NULL );

	return ShowFeedbackUI_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.GetTitleFileState
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

unsigned char UOnlineSystemInterface::GetTitleFileState ( struct FString Filename )
{
	static UFunction* pFnGetTitleFileState = NULL;

	if ( ! pFnGetTitleFileState )
		pFnGetTitleFileState = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.GetTitleFileState" );

	UOnlineSystemInterface_execGetTitleFileState_Parms GetTitleFileState_Parms;
	memcpy ( &GetTitleFileState_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileState, &GetTitleFileState_Parms, NULL );

	return GetTitleFileState_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.GetTitleFileContents
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        FileContents                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineSystemInterface::GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents )
{
	static UFunction* pFnGetTitleFileContents = NULL;

	if ( ! pFnGetTitleFileContents )
		pFnGetTitleFileContents = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.GetTitleFileContents" );

	UOnlineSystemInterface_execGetTitleFileContents_Parms GetTitleFileContents_Parms;
	memcpy ( &GetTitleFileContents_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileContents, &GetTitleFileContents_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &GetTitleFileContents_Parms.FileContents, 0xC );

	return GetTitleFileContents_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnClearReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnClearReadTitleFileCompleteDelegate )
		pFnClearReadTitleFileCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.ClearReadTitleFileCompleteDelegate" );

	UOnlineSystemInterface_execClearReadTitleFileCompleteDelegate_Parms ClearReadTitleFileCompleteDelegate_Parms;
	memcpy ( &ClearReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadTitleFileCompleteDelegate, &ClearReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnAddReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnAddReadTitleFileCompleteDelegate )
		pFnAddReadTitleFileCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.AddReadTitleFileCompleteDelegate" );

	UOnlineSystemInterface_execAddReadTitleFileCompleteDelegate_Parms AddReadTitleFileCompleteDelegate_Parms;
	memcpy ( &AddReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadTitleFileCompleteDelegate, &AddReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ReadTitleFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FileToRead                     ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineSystemInterface::ReadTitleFile ( struct FString FileToRead )
{
	static UFunction* pFnReadTitleFile = NULL;

	if ( ! pFnReadTitleFile )
		pFnReadTitleFile = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.ReadTitleFile" );

	UOnlineSystemInterface_execReadTitleFile_Parms ReadTitleFile_Parms;
	memcpy ( &ReadTitleFile_Parms.FileToRead, &FileToRead, 0xC );

	this->ProcessEvent ( pFnReadTitleFile, &ReadTitleFile_Parms, NULL );

	return ReadTitleFile_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.OnReadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.OnReadTitleFileComplete" );

	UOnlineSystemInterface_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnClearStorageDeviceChangeDelegate = NULL;

	if ( ! pFnClearStorageDeviceChangeDelegate )
		pFnClearStorageDeviceChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate" );

	UOnlineSystemInterface_execClearStorageDeviceChangeDelegate_Parms ClearStorageDeviceChangeDelegate_Parms;
	memcpy ( &ClearStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0xC );

	this->ProcessEvent ( pFnClearStorageDeviceChangeDelegate, &ClearStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnAddStorageDeviceChangeDelegate = NULL;

	if ( ! pFnAddStorageDeviceChangeDelegate )
		pFnAddStorageDeviceChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate" );

	UOnlineSystemInterface_execAddStorageDeviceChangeDelegate_Parms AddStorageDeviceChangeDelegate_Parms;
	memcpy ( &AddStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0xC );

	this->ProcessEvent ( pFnAddStorageDeviceChangeDelegate, &AddStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnStorageDeviceChange ( )
{
	static UFunction* pFnOnStorageDeviceChange = NULL;

	if ( ! pFnOnStorageDeviceChange )
		pFnOnStorageDeviceChange = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.OnStorageDeviceChange" );

	UOnlineSystemInterface_execOnStorageDeviceChange_Parms OnStorageDeviceChange_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChange, &OnStorageDeviceChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNATType
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.GetNATType" );

	UOnlineSystemInterface_execGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnClearConnectionStatusChangeDelegate = NULL;

	if ( ! pFnClearConnectionStatusChangeDelegate )
		pFnClearConnectionStatusChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate" );

	UOnlineSystemInterface_execClearConnectionStatusChangeDelegate_Parms ClearConnectionStatusChangeDelegate_Parms;
	memcpy ( &ClearConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0xC );

	this->ProcessEvent ( pFnClearConnectionStatusChangeDelegate, &ClearConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnAddConnectionStatusChangeDelegate = NULL;

	if ( ! pFnAddConnectionStatusChangeDelegate )
		pFnAddConnectionStatusChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate" );

	UOnlineSystemInterface_execAddConnectionStatusChangeDelegate_Parms AddConnectionStatusChangeDelegate_Parms;
	memcpy ( &AddConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0xC );

	this->ProcessEvent ( pFnAddConnectionStatusChangeDelegate, &AddConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  ConnectionStatus               ( CPF_Parm )

void UOnlineSystemInterface::OnConnectionStatusChange ( unsigned char ConnectionStatus )
{
	static UFunction* pFnOnConnectionStatusChange = NULL;

	if ( ! pFnOnConnectionStatusChange )
		pFnOnConnectionStatusChange = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.OnConnectionStatusChange" );

	UOnlineSystemInterface_execOnConnectionStatusChange_Parms OnConnectionStatusChange_Parms;
	OnConnectionStatusChange_Parms.ConnectionStatus = ConnectionStatus;

	this->ProcessEvent ( pFnOnConnectionStatusChange, &OnConnectionStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.IsControllerConnected
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UOnlineSystemInterface::IsControllerConnected ( int ControllerId )
{
	static UFunction* pFnIsControllerConnected = NULL;

	if ( ! pFnIsControllerConnected )
		pFnIsControllerConnected = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.IsControllerConnected" );

	UOnlineSystemInterface_execIsControllerConnected_Parms IsControllerConnected_Parms;
	IsControllerConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsControllerConnected, &IsControllerConnected_Parms, NULL );

	return IsControllerConnected_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnClearControllerChangeDelegate = NULL;

	if ( ! pFnClearControllerChangeDelegate )
		pFnClearControllerChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate" );

	UOnlineSystemInterface_execClearControllerChangeDelegate_Parms ClearControllerChangeDelegate_Parms;
	memcpy ( &ClearControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0xC );

	this->ProcessEvent ( pFnClearControllerChangeDelegate, &ClearControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnAddControllerChangeDelegate = NULL;

	if ( ! pFnAddControllerChangeDelegate )
		pFnAddControllerChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.AddControllerChangeDelegate" );

	UOnlineSystemInterface_execAddControllerChangeDelegate_Parms AddControllerChangeDelegate_Parms;
	memcpy ( &AddControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0xC );

	this->ProcessEvent ( pFnAddControllerChangeDelegate, &AddControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnControllerChange
// [0x00120000] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnControllerChange ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChange = NULL;

	if ( ! pFnOnControllerChange )
		pFnOnControllerChange = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.OnControllerChange" );

	UOnlineSystemInterface_execOnControllerChange_Parms OnControllerChange_Parms;
	OnControllerChange_Parms.ControllerId = ControllerId;
	OnControllerChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChange, &OnControllerChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  NewPos                         ( CPF_Parm )

void UOnlineSystemInterface::SetNetworkNotificationPosition ( unsigned char NewPos )
{
	static UFunction* pFnSetNetworkNotificationPosition = NULL;

	if ( ! pFnSetNetworkNotificationPosition )
		pFnSetNetworkNotificationPosition = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition" );

	UOnlineSystemInterface_execSetNetworkNotificationPosition_Parms SetNetworkNotificationPosition_Parms;
	SetNetworkNotificationPosition_Parms.NewPos = NewPos;

	this->ProcessEvent ( pFnSetNetworkNotificationPosition, &SetNetworkNotificationPosition_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNetworkNotificationPosition ( )
{
	static UFunction* pFnGetNetworkNotificationPosition = NULL;

	if ( ! pFnGetNetworkNotificationPosition )
		pFnGetNetworkNotificationPosition = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition" );

	UOnlineSystemInterface_execGetNetworkNotificationPosition_Parms GetNetworkNotificationPosition_Parms;

	this->ProcessEvent ( pFnGetNetworkNotificationPosition, &GetNetworkNotificationPosition_Parms, NULL );

	return GetNetworkNotificationPosition_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnClearExternalUIChangeDelegate = NULL;

	if ( ! pFnClearExternalUIChangeDelegate )
		pFnClearExternalUIChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate" );

	UOnlineSystemInterface_execClearExternalUIChangeDelegate_Parms ClearExternalUIChangeDelegate_Parms;
	memcpy ( &ClearExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0xC );

	this->ProcessEvent ( pFnClearExternalUIChangeDelegate, &ClearExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnAddExternalUIChangeDelegate = NULL;

	if ( ! pFnAddExternalUIChangeDelegate )
		pFnAddExternalUIChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate" );

	UOnlineSystemInterface_execAddExternalUIChangeDelegate_Parms AddExternalUIChangeDelegate_Parms;
	memcpy ( &AddExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0xC );

	this->ProcessEvent ( pFnAddExternalUIChangeDelegate, &AddExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnExternalUIChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void UOnlineSystemInterface::OnExternalUIChange ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChange = NULL;

	if ( ! pFnOnExternalUIChange )
		pFnOnExternalUIChange = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.OnExternalUIChange" );

	UOnlineSystemInterface_execOnExternalUIChange_Parms OnExternalUIChange_Parms;
	OnExternalUIChange_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChange, &OnExternalUIChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnClearLinkStatusChangeDelegate = NULL;

	if ( ! pFnClearLinkStatusChangeDelegate )
		pFnClearLinkStatusChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate" );

	UOnlineSystemInterface_execClearLinkStatusChangeDelegate_Parms ClearLinkStatusChangeDelegate_Parms;
	memcpy ( &ClearLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0xC );

	this->ProcessEvent ( pFnClearLinkStatusChangeDelegate, &ClearLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnAddLinkStatusChangeDelegate = NULL;

	if ( ! pFnAddLinkStatusChangeDelegate )
		pFnAddLinkStatusChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate" );

	UOnlineSystemInterface_execAddLinkStatusChangeDelegate_Parms AddLinkStatusChangeDelegate_Parms;
	memcpy ( &AddLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0xC );

	this->ProcessEvent ( pFnAddLinkStatusChangeDelegate, &AddLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnLinkStatusChange ( unsigned long bIsConnected )
{
	static UFunction* pFnOnLinkStatusChange = NULL;

	if ( ! pFnOnLinkStatusChange )
		pFnOnLinkStatusChange = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.OnLinkStatusChange" );

	UOnlineSystemInterface_execOnLinkStatusChange_Parms OnLinkStatusChange_Parms;
	OnLinkStatusChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnLinkStatusChange, &OnLinkStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.HasLinkConnection
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::HasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = UObject::FindObject< UFunction > ( "Function Engine.OnlineSystemInterface.HasLinkConnection" );

	UOnlineSystemInterface_execHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.RecalculateSkillRating
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::RecalculateSkillRating ( struct FName SessionName, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.RecalculateSkillRating" );

	UOnlineGameInterface_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;
	memcpy ( &RecalculateSkillRating_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );

	if ( Players )
		memcpy ( Players, &RecalculateSkillRating_Parms.Players, 0xC );

	return RecalculateSkillRating_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.AcceptGameInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName )
{
	static UFunction* pFnAcceptGameInvite = NULL;

	if ( ! pFnAcceptGameInvite )
		pFnAcceptGameInvite = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AcceptGameInvite" );

	UOnlineGameInterface_execAcceptGameInvite_Parms AcceptGameInvite_Parms;
	AcceptGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptGameInvite_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnAcceptGameInvite, &AcceptGameInvite_Parms, NULL );

	return AcceptGameInvite_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.OnGameInviteAccepted
// [0x00120000] 
// Parameters infos:
// class UOnlineGameSettings*     GameInviteSettings             ( CPF_Parm )

void UOnlineGameInterface::OnGameInviteAccepted ( class UOnlineGameSettings* GameInviteSettings )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnGameInviteAccepted" );

	UOnlineGameInterface_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;
	OnGameInviteAccepted_Parms.GameInviteSettings = GameInviteSettings;

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );
};

// Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnClearGameInviteAcceptedDelegate = NULL;

	if ( ! pFnClearGameInviteAcceptedDelegate )
		pFnClearGameInviteAcceptedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate" );

	UOnlineGameInterface_execClearGameInviteAcceptedDelegate_Parms ClearGameInviteAcceptedDelegate_Parms;
	ClearGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0xC );

	this->ProcessEvent ( pFnClearGameInviteAcceptedDelegate, &ClearGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnAddGameInviteAcceptedDelegate = NULL;

	if ( ! pFnAddGameInviteAcceptedDelegate )
		pFnAddGameInviteAcceptedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate" );

	UOnlineGameInterface_execAddGameInviteAcceptedDelegate_Parms AddGameInviteAcceptedDelegate_Parms;
	AddGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0xC );

	this->ProcessEvent ( pFnAddGameInviteAcceptedDelegate, &AddGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.GetArbitratedPlayers
// [0x00020000] 
// Parameters infos:
// TArray< struct FOnlineArbitrationRegistrant > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   SessionName                    ( CPF_Parm )

TArray< struct FOnlineArbitrationRegistrant > UOnlineGameInterface::GetArbitratedPlayers ( struct FName SessionName )
{
	static UFunction* pFnGetArbitratedPlayers = NULL;

	if ( ! pFnGetArbitratedPlayers )
		pFnGetArbitratedPlayers = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.GetArbitratedPlayers" );

	UOnlineGameInterface_execGetArbitratedPlayers_Parms GetArbitratedPlayers_Parms;
	memcpy ( &GetArbitratedPlayers_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetArbitratedPlayers, &GetArbitratedPlayers_Parms, NULL );

	return GetArbitratedPlayers_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnClearArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnClearArbitrationRegistrationCompleteDelegate )
		pFnClearArbitrationRegistrationCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate" );

	UOnlineGameInterface_execClearArbitrationRegistrationCompleteDelegate_Parms ClearArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &ClearArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearArbitrationRegistrationCompleteDelegate, &ClearArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnAddArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnAddArbitrationRegistrationCompleteDelegate )
		pFnAddArbitrationRegistrationCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate" );

	UOnlineGameInterface_execAddArbitrationRegistrationCompleteDelegate_Parms AddArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &AddArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddArbitrationRegistrationCompleteDelegate, &AddArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegistrationComplete = NULL;

	if ( ! pFnOnArbitrationRegistrationComplete )
		pFnOnArbitrationRegistrationComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete" );

	UOnlineGameInterface_execOnArbitrationRegistrationComplete_Parms OnArbitrationRegistrationComplete_Parms;
	memcpy ( &OnArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegistrationComplete, &OnArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterForArbitration
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterForArbitration ( struct FName SessionName )
{
	static UFunction* pFnRegisterForArbitration = NULL;

	if ( ! pFnRegisterForArbitration )
		pFnRegisterForArbitration = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.RegisterForArbitration" );

	UOnlineGameInterface_execRegisterForArbitration_Parms RegisterForArbitration_Parms;
	memcpy ( &RegisterForArbitration_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRegisterForArbitration, &RegisterForArbitration_Parms, NULL );

	return RegisterForArbitration_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearEndOnlineGameCompleteDelegate )
		pFnClearEndOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execClearEndOnlineGameCompleteDelegate_Parms ClearEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearEndOnlineGameCompleteDelegate, &ClearEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddEndOnlineGameCompleteDelegate )
		pFnAddEndOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execAddEndOnlineGameCompleteDelegate_Parms AddEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddEndOnlineGameCompleteDelegate, &AddEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndOnlineGameComplete = NULL;

	if ( ! pFnOnEndOnlineGameComplete )
		pFnOnEndOnlineGameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnEndOnlineGameComplete" );

	UOnlineGameInterface_execOnEndOnlineGameComplete_Parms OnEndOnlineGameComplete_Parms;
	memcpy ( &OnEndOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndOnlineGameComplete, &OnEndOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.EndOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::EndOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnEndOnlineGame = NULL;

	if ( ! pFnEndOnlineGame )
		pFnEndOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.EndOnlineGame" );

	UOnlineGameInterface_execEndOnlineGame_Parms EndOnlineGame_Parms;
	memcpy ( &EndOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnEndOnlineGame, &EndOnlineGame_Parms, NULL );

	return EndOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearStartOnlineGameCompleteDelegate )
		pFnClearStartOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execClearStartOnlineGameCompleteDelegate_Parms ClearStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearStartOnlineGameCompleteDelegate, &ClearStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddStartOnlineGameCompleteDelegate )
		pFnAddStartOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execAddStartOnlineGameCompleteDelegate_Parms AddStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddStartOnlineGameCompleteDelegate, &AddStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnStartOnlineGameComplete" );

	UOnlineGameInterface_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.StartOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::StartOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.StartOnlineGame" );

	UOnlineGameInterface_execStartOnlineGame_Parms StartOnlineGame_Parms;
	memcpy ( &StartOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );

	return StartOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearUnregisterPlayerCompleteDelegate )
		pFnClearUnregisterPlayerCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate" );

	UOnlineGameInterface_execClearUnregisterPlayerCompleteDelegate_Parms ClearUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUnregisterPlayerCompleteDelegate, &ClearUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddUnregisterPlayerCompleteDelegate )
		pFnAddUnregisterPlayerCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate" );

	UOnlineGameInterface_execAddUnregisterPlayerCompleteDelegate_Parms AddUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUnregisterPlayerCompleteDelegate, &AddUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUnregisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnregisterPlayerComplete = NULL;

	if ( ! pFnOnUnregisterPlayerComplete )
		pFnOnUnregisterPlayerComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete" );

	UOnlineGameInterface_execOnUnregisterPlayerComplete_Parms OnUnregisterPlayerComplete_Parms;
	memcpy ( &OnUnregisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	OnUnregisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnregisterPlayerComplete, &OnUnregisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UnregisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineGameInterface::UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.UnregisterPlayer" );

	UOnlineGameInterface_execUnregisterPlayer_Parms UnregisterPlayer_Parms;
	memcpy ( &UnregisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &UnregisterPlayer_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );

	return UnregisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearRegisterPlayerCompleteDelegate )
		pFnClearRegisterPlayerCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate" );

	UOnlineGameInterface_execClearRegisterPlayerCompleteDelegate_Parms ClearRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearRegisterPlayerCompleteDelegate, &ClearRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddRegisterPlayerCompleteDelegate )
		pFnAddRegisterPlayerCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate" );

	UOnlineGameInterface_execAddRegisterPlayerCompleteDelegate_Parms AddRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddRegisterPlayerCompleteDelegate, &AddRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnRegisterPlayerComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterPlayerComplete = NULL;

	if ( ! pFnOnRegisterPlayerComplete )
		pFnOnRegisterPlayerComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnRegisterPlayerComplete" );

	UOnlineGameInterface_execOnRegisterPlayerComplete_Parms OnRegisterPlayerComplete_Parms;
	memcpy ( &OnRegisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	OnRegisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterPlayerComplete, &OnRegisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasInvited                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited )
{
	static UFunction* pFnRegisterPlayer = NULL;

	if ( ! pFnRegisterPlayer )
		pFnRegisterPlayer = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.RegisterPlayer" );

	UOnlineGameInterface_execRegisterPlayer_Parms RegisterPlayer_Parms;
	memcpy ( &RegisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &RegisterPlayer_Parms.PlayerID, &PlayerID, 0x8 );
	RegisterPlayer_Parms.bWasInvited = bWasInvited;

	this->ProcessEvent ( pFnRegisterPlayer, &RegisterPlayer_Parms, NULL );

	return RegisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetResolvedConnectString
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FString                 ConnectInfo                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo )
{
	static UFunction* pFnGetResolvedConnectString = NULL;

	if ( ! pFnGetResolvedConnectString )
		pFnGetResolvedConnectString = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.GetResolvedConnectString" );

	UOnlineGameInterface_execGetResolvedConnectString_Parms GetResolvedConnectString_Parms;
	memcpy ( &GetResolvedConnectString_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetResolvedConnectString, &GetResolvedConnectString_Parms, NULL );

	if ( ConnectInfo )
		memcpy ( ConnectInfo, &GetResolvedConnectString_Parms.ConnectInfo, 0xC );

	return GetResolvedConnectString_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinOnlineGameCompleteDelegate )
		pFnClearJoinOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execClearJoinOnlineGameCompleteDelegate_Parms ClearJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearJoinOnlineGameCompleteDelegate, &ClearJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinOnlineGameCompleteDelegate )
		pFnAddJoinOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execAddJoinOnlineGameCompleteDelegate_Parms AddJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddJoinOnlineGameCompleteDelegate, &AddJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinOnlineGameComplete = NULL;

	if ( ! pFnOnJoinOnlineGameComplete )
		pFnOnJoinOnlineGameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete" );

	UOnlineGameInterface_execOnJoinOnlineGameComplete_Parms OnJoinOnlineGameComplete_Parms;
	memcpy ( &OnJoinOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinOnlineGameComplete, &OnJoinOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.JoinOnlineGame
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame )
{
	static UFunction* pFnJoinOnlineGame = NULL;

	if ( ! pFnJoinOnlineGame )
		pFnJoinOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.JoinOnlineGame" );

	UOnlineGameInterface_execJoinOnlineGame_Parms JoinOnlineGame_Parms;
	JoinOnlineGame_Parms.PlayerNum = PlayerNum;
	memcpy ( &JoinOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnJoinOnlineGame, &JoinOnlineGame_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &JoinOnlineGame_Parms.DesiredGame, 0x8 );

	return JoinOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.QueryNonAdvertisedData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartAt                        ( CPF_Parm )
// int                            NumberToQuery                  ( CPF_Parm )

bool UOnlineGameInterface::QueryNonAdvertisedData ( int StartAt, int NumberToQuery )
{
	static UFunction* pFnQueryNonAdvertisedData = NULL;

	if ( ! pFnQueryNonAdvertisedData )
		pFnQueryNonAdvertisedData = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.QueryNonAdvertisedData" );

	UOnlineGameInterface_execQueryNonAdvertisedData_Parms QueryNonAdvertisedData_Parms;
	QueryNonAdvertisedData_Parms.StartAt = StartAt;
	QueryNonAdvertisedData_Parms.NumberToQuery = NumberToQuery;

	this->ProcessEvent ( pFnQueryNonAdvertisedData, &QueryNonAdvertisedData_Parms, NULL );

	return QueryNonAdvertisedData_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.FreeSearchResults
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSearch*       Search                         ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::FreeSearchResults ( class UOnlineGameSearch* Search )
{
	static UFunction* pFnFreeSearchResults = NULL;

	if ( ! pFnFreeSearchResults )
		pFnFreeSearchResults = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.FreeSearchResults" );

	UOnlineGameInterface_execFreeSearchResults_Parms FreeSearchResults_Parms;
	FreeSearchResults_Parms.Search = Search;

	this->ProcessEvent ( pFnFreeSearchResults, &FreeSearchResults_Parms, NULL );

	return FreeSearchResults_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSearch
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch ( )
{
	static UFunction* pFnGetGameSearch = NULL;

	if ( ! pFnGetGameSearch )
		pFnGetGameSearch = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.GetGameSearch" );

	UOnlineGameInterface_execGetGameSearch_Parms GetGameSearch_Parms;

	this->ProcessEvent ( pFnGetGameSearch, &GetGameSearch_Parms, NULL );

	return GetGameSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

bool UOnlineGameInterface::BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnBindPlatformSpecificSessionToSearch = NULL;

	if ( ! pFnBindPlatformSpecificSessionToSearch )
		pFnBindPlatformSpecificSessionToSearch = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch" );

	UOnlineGameInterface_execBindPlatformSpecificSessionToSearch_Parms BindPlatformSpecificSessionToSearch_Parms;
	BindPlatformSpecificSessionToSearch_Parms.SearchingPlayerNum = SearchingPlayerNum;
	BindPlatformSpecificSessionToSearch_Parms.SearchSettings = SearchSettings;
	memcpy ( &BindPlatformSpecificSessionToSearch_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x40 );

	this->ProcessEvent ( pFnBindPlatformSpecificSessionToSearch, &BindPlatformSpecificSessionToSearch_Parms, NULL );

	return BindPlatformSpecificSessionToSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfoBySessionName = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfoBySessionName )
		pFnReadPlatformSpecificSessionInfoBySessionName = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName" );

	UOnlineGameInterface_execReadPlatformSpecificSessionInfoBySessionName_Parms ReadPlatformSpecificSessionInfoBySessionName_Parms;
	memcpy ( &ReadPlatformSpecificSessionInfoBySessionName_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfoBySessionName, &ReadPlatformSpecificSessionInfoBySessionName_Parms, NULL );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfoBySessionName_Parms.PlatformSpecificInfo, 0x40 );

	return ReadPlatformSpecificSessionInfoBySessionName_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfo = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfo )
		pFnReadPlatformSpecificSessionInfo = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo" );

	UOnlineGameInterface_execReadPlatformSpecificSessionInfo_Parms ReadPlatformSpecificSessionInfo_Parms;

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfo, &ReadPlatformSpecificSessionInfo_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &ReadPlatformSpecificSessionInfo_Parms.DesiredGame, 0x8 );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfo_Parms.PlatformSpecificInfo, 0x40 );

	return ReadPlatformSpecificSessionInfo_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearCancelFindOnlineGamesCompleteDelegate )
		pFnClearCancelFindOnlineGamesCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate" );

	UOnlineGameInterface_execClearCancelFindOnlineGamesCompleteDelegate_Parms ClearCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearCancelFindOnlineGamesCompleteDelegate, &ClearCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddCancelFindOnlineGamesCompleteDelegate )
		pFnAddCancelFindOnlineGamesCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate" );

	UOnlineGameInterface_execAddCancelFindOnlineGamesCompleteDelegate_Parms AddCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddCancelFindOnlineGamesCompleteDelegate, &AddCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCancelFindOnlineGamesComplete = NULL;

	if ( ! pFnOnCancelFindOnlineGamesComplete )
		pFnOnCancelFindOnlineGamesComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete" );

	UOnlineGameInterface_execOnCancelFindOnlineGamesComplete_Parms OnCancelFindOnlineGamesComplete_Parms;
	OnCancelFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCancelFindOnlineGamesComplete, &OnCancelFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CancelFindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineGameInterface::CancelFindOnlineGames ( )
{
	static UFunction* pFnCancelFindOnlineGames = NULL;

	if ( ! pFnCancelFindOnlineGames )
		pFnCancelFindOnlineGames = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.CancelFindOnlineGames" );

	UOnlineGameInterface_execCancelFindOnlineGames_Parms CancelFindOnlineGames_Parms;

	this->ProcessEvent ( pFnCancelFindOnlineGames, &CancelFindOnlineGames_Parms, NULL );

	return CancelFindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearFindOnlineGamesCompleteDelegate )
		pFnClearFindOnlineGamesCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate" );

	UOnlineGameInterface_execClearFindOnlineGamesCompleteDelegate_Parms ClearFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearFindOnlineGamesCompleteDelegate, &ClearFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddFindOnlineGamesCompleteDelegate )
		pFnAddFindOnlineGamesCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate" );

	UOnlineGameInterface_execAddFindOnlineGamesCompleteDelegate_Parms AddFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddFindOnlineGamesCompleteDelegate, &AddFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesComplete = NULL;

	if ( ! pFnOnFindOnlineGamesComplete )
		pFnOnFindOnlineGamesComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete" );

	UOnlineGameInterface_execOnFindOnlineGamesComplete_Parms OnFindOnlineGamesComplete_Parms;
	OnFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesComplete, &OnFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.FindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )

bool UOnlineGameInterface::FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings )
{
	static UFunction* pFnFindOnlineGames = NULL;

	if ( ! pFnFindOnlineGames )
		pFnFindOnlineGames = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.FindOnlineGames" );

	UOnlineGameInterface_execFindOnlineGames_Parms FindOnlineGames_Parms;
	FindOnlineGames_Parms.SearchingPlayerNum = SearchingPlayerNum;
	FindOnlineGames_Parms.SearchSettings = SearchSettings;

	this->ProcessEvent ( pFnFindOnlineGames, &FindOnlineGames_Parms, NULL );

	return FindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearDestroyOnlineGameCompleteDelegate )
		pFnClearDestroyOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execClearDestroyOnlineGameCompleteDelegate_Parms ClearDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearDestroyOnlineGameCompleteDelegate, &ClearDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddDestroyOnlineGameCompleteDelegate )
		pFnAddDestroyOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execAddDestroyOnlineGameCompleteDelegate_Parms AddDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddDestroyOnlineGameCompleteDelegate, &AddDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyOnlineGameComplete = NULL;

	if ( ! pFnOnDestroyOnlineGameComplete )
		pFnOnDestroyOnlineGameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete" );

	UOnlineGameInterface_execOnDestroyOnlineGameComplete_Parms OnDestroyOnlineGameComplete_Parms;
	memcpy ( &OnDestroyOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyOnlineGameComplete, &OnDestroyOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.DestroyOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::DestroyOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnDestroyOnlineGame = NULL;

	if ( ! pFnDestroyOnlineGame )
		pFnDestroyOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.DestroyOnlineGame" );

	UOnlineGameInterface_execDestroyOnlineGame_Parms DestroyOnlineGame_Parms;
	memcpy ( &DestroyOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnDestroyOnlineGame, &DestroyOnlineGame_Parms, NULL );

	return DestroyOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings ( struct FName SessionName )
{
	static UFunction* pFnGetGameSettings = NULL;

	if ( ! pFnGetGameSettings )
		pFnGetGameSettings = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.GetGameSettings" );

	UOnlineGameInterface_execGetGameSettings_Parms GetGameSettings_Parms;
	memcpy ( &GetGameSettings_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetGameSettings, &GetGameSettings_Parms, NULL );

	return GetGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearUpdateOnlineGameCompleteDelegate )
		pFnClearUpdateOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execClearUpdateOnlineGameCompleteDelegate_Parms ClearUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUpdateOnlineGameCompleteDelegate, &ClearUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddUpdateOnlineGameCompleteDelegate )
		pFnAddUpdateOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execAddUpdateOnlineGameCompleteDelegate_Parms AddUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUpdateOnlineGameCompleteDelegate, &AddUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUpdateOnlineGameComplete = NULL;

	if ( ! pFnOnUpdateOnlineGameComplete )
		pFnOnUpdateOnlineGameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete" );

	UOnlineGameInterface_execOnUpdateOnlineGameComplete_Parms OnUpdateOnlineGameComplete_Parms;
	memcpy ( &OnUpdateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnUpdateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUpdateOnlineGameComplete, &OnUpdateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UpdateOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     UpdatedGameSettings            ( CPF_Parm )
// unsigned long                  bShouldRefreshOnlineData       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData )
{
	static UFunction* pFnUpdateOnlineGame = NULL;

	if ( ! pFnUpdateOnlineGame )
		pFnUpdateOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.UpdateOnlineGame" );

	UOnlineGameInterface_execUpdateOnlineGame_Parms UpdateOnlineGame_Parms;
	memcpy ( &UpdateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	UpdateOnlineGame_Parms.UpdatedGameSettings = UpdatedGameSettings;
	UpdateOnlineGame_Parms.bShouldRefreshOnlineData = bShouldRefreshOnlineData;

	this->ProcessEvent ( pFnUpdateOnlineGame, &UpdateOnlineGame_Parms, NULL );

	return UpdateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearCreateOnlineGameCompleteDelegate )
		pFnClearCreateOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execClearCreateOnlineGameCompleteDelegate_Parms ClearCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearCreateOnlineGameCompleteDelegate, &ClearCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddCreateOnlineGameCompleteDelegate )
		pFnAddCreateOnlineGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate" );

	UOnlineGameInterface_execAddCreateOnlineGameCompleteDelegate_Parms AddCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddCreateOnlineGameCompleteDelegate, &AddCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCreateOnlineGameComplete = NULL;

	if ( ! pFnOnCreateOnlineGameComplete )
		pFnOnCreateOnlineGameComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete" );

	UOnlineGameInterface_execOnCreateOnlineGameComplete_Parms OnCreateOnlineGameComplete_Parms;
	memcpy ( &OnCreateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnCreateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCreateOnlineGameComplete, &OnCreateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CreateOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  HostingPlayerNum               ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     NewGameSettings                ( CPF_Parm )

bool UOnlineGameInterface::CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings )
{
	static UFunction* pFnCreateOnlineGame = NULL;

	if ( ! pFnCreateOnlineGame )
		pFnCreateOnlineGame = UObject::FindObject< UFunction > ( "Function Engine.OnlineGameInterface.CreateOnlineGame" );

	UOnlineGameInterface_execCreateOnlineGame_Parms CreateOnlineGame_Parms;
	CreateOnlineGame_Parms.HostingPlayerNum = HostingPlayerNum;
	memcpy ( &CreateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	CreateOnlineGame_Parms.NewGameSettings = NewGameSettings;

	this->ProcessEvent ( pFnCreateOnlineGame, &CreateOnlineGame_Parms, NULL );

	return CreateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            NewDownloads                   ( CPF_Parm | CPF_OutParm )
// int                            TotalDownloads                 ( CPF_Parm | CPF_OutParm )

void UOnlineContentInterface::GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads )
{
	static UFunction* pFnGetAvailableDownloadCounts = NULL;

	if ( ! pFnGetAvailableDownloadCounts )
		pFnGetAvailableDownloadCounts = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.GetAvailableDownloadCounts" );

	UOnlineContentInterface_execGetAvailableDownloadCounts_Parms GetAvailableDownloadCounts_Parms;
	GetAvailableDownloadCounts_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetAvailableDownloadCounts, &GetAvailableDownloadCounts_Parms, NULL );

	if ( NewDownloads )
		*NewDownloads = GetAvailableDownloadCounts_Parms.NewDownloads;

	if ( TotalDownloads )
		*TotalDownloads = GetAvailableDownloadCounts_Parms.TotalDownloads;
};

// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnClearQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnClearQueryAvailableDownloadsComplete )
		pFnClearQueryAvailableDownloadsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete" );

	UOnlineContentInterface_execClearQueryAvailableDownloadsComplete_Parms ClearQueryAvailableDownloadsComplete_Parms;
	ClearQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0xC );

	this->ProcessEvent ( pFnClearQueryAvailableDownloadsComplete, &ClearQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnAddQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnAddQueryAvailableDownloadsComplete )
		pFnAddQueryAvailableDownloadsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete" );

	UOnlineContentInterface_execAddQueryAvailableDownloadsComplete_Parms AddQueryAvailableDownloadsComplete_Parms;
	AddQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0xC );

	this->ProcessEvent ( pFnAddQueryAvailableDownloadsComplete, &AddQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnOnQueryAvailableDownloadsComplete )
		pFnOnQueryAvailableDownloadsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete" );

	UOnlineContentInterface_execOnQueryAvailableDownloadsComplete_Parms OnQueryAvailableDownloadsComplete_Parms;
	OnQueryAvailableDownloadsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnQueryAvailableDownloadsComplete, &OnQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineContentInterface::QueryAvailableDownloads ( unsigned char LocalUserNum )
{
	static UFunction* pFnQueryAvailableDownloads = NULL;

	if ( ! pFnQueryAvailableDownloads )
		pFnQueryAvailableDownloads = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.QueryAvailableDownloads" );

	UOnlineContentInterface_execQueryAvailableDownloads_Parms QueryAvailableDownloads_Parms;
	QueryAvailableDownloads_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnQueryAvailableDownloads, &QueryAvailableDownloads_Parms, NULL );

	return QueryAvailableDownloads_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FOnlineContent > ContentList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlineContentInterface::GetContentList ( unsigned char LocalUserNum, TArray< struct FOnlineContent >* ContentList )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.GetContentList" );

	UOnlineContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentList )
		memcpy ( ContentList, &GetContentList_Parms.ContentList, 0xC );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ReadContentList
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineContentInterface::ReadContentList ( unsigned char LocalUserNum )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.ReadContentList" );

	UOnlineContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnClearReadContentComplete = NULL;

	if ( ! pFnClearReadContentComplete )
		pFnClearReadContentComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.ClearReadContentComplete" );

	UOnlineContentInterface_execClearReadContentComplete_Parms ClearReadContentComplete_Parms;
	ClearReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadContentComplete, &ClearReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnAddReadContentComplete = NULL;

	if ( ! pFnAddReadContentComplete )
		pFnAddReadContentComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.AddReadContentComplete" );

	UOnlineContentInterface_execAddReadContentComplete_Parms AddReadContentComplete_Parms;
	AddReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadContentComplete, &AddReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnReadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnReadContentComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentComplete = NULL;

	if ( ! pFnOnReadContentComplete )
		pFnOnReadContentComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.OnReadContentComplete" );

	UOnlineContentInterface_execOnReadContentComplete_Parms OnReadContentComplete_Parms;
	OnReadContentComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentComplete, &OnReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearContentChangeDelegate = NULL;

	if ( ! pFnClearContentChangeDelegate )
		pFnClearContentChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.ClearContentChangeDelegate" );

	UOnlineContentInterface_execClearContentChangeDelegate_Parms ClearContentChangeDelegate_Parms;
	memcpy ( &ClearContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0xC );
	ClearContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearContentChangeDelegate, &ClearContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddContentChangeDelegate = NULL;

	if ( ! pFnAddContentChangeDelegate )
		pFnAddContentChangeDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.AddContentChangeDelegate" );

	UOnlineContentInterface_execAddContentChangeDelegate_Parms AddContentChangeDelegate_Parms;
	memcpy ( &AddContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0xC );
	AddContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddContentChangeDelegate, &AddContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnContentChange
// [0x00120000] 
// Parameters infos:

void UOnlineContentInterface::OnContentChange ( )
{
	static UFunction* pFnOnContentChange = NULL;

	if ( ! pFnOnContentChange )
		pFnOnContentChange = UObject::FindObject< UFunction > ( "Function Engine.OnlineContentInterface.OnContentChange" );

	UOnlineContentInterface_execOnContentChange_Parms OnContentChange_Parms;

	this->ProcessEvent ( pFnOnContentChange, &OnContentChange_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.UnmuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnmuteAll ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnmuteAll = NULL;

	if ( ! pFnUnmuteAll )
		pFnUnmuteAll = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.UnmuteAll" );

	UOnlineVoiceInterface_execUnmuteAll_Parms UnmuteAll_Parms;
	UnmuteAll_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnmuteAll, &UnmuteAll_Parms, NULL );

	return UnmuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAllowFriends                  ( CPF_Parm )

bool UOnlineVoiceInterface::MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends )
{
	static UFunction* pFnMuteAll = NULL;

	if ( ! pFnMuteAll )
		pFnMuteAll = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.MuteAll" );

	UOnlineVoiceInterface_execMuteAll_Parms MuteAll_Parms;
	MuteAll_Parms.LocalUserNum = LocalUserNum;
	MuteAll_Parms.bAllowFriends = bAllowFriends;

	this->ProcessEvent ( pFnMuteAll, &MuteAll_Parms, NULL );

	return MuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class USpeechRecognition*      SpeechRecogObj                 ( CPF_Parm )

bool UOnlineVoiceInterface::SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj )
{
	static UFunction* pFnSetSpeechRecognitionObject = NULL;

	if ( ! pFnSetSpeechRecognitionObject )
		pFnSetSpeechRecognitionObject = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject" );

	UOnlineVoiceInterface_execSetSpeechRecognitionObject_Parms SetSpeechRecognitionObject_Parms;
	SetSpeechRecognitionObject_Parms.LocalUserNum = LocalUserNum;
	SetSpeechRecognitionObject_Parms.SpeechRecogObj = SpeechRecogObj;

	this->ProcessEvent ( pFnSetSpeechRecognitionObject, &SetSpeechRecognitionObject_Parms, NULL );

	return SetSpeechRecognitionObject_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SelectVocabulary
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            VocabularyId                   ( CPF_Parm )

bool UOnlineVoiceInterface::SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId )
{
	static UFunction* pFnSelectVocabulary = NULL;

	if ( ! pFnSelectVocabulary )
		pFnSelectVocabulary = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.SelectVocabulary" );

	UOnlineVoiceInterface_execSelectVocabulary_Parms SelectVocabulary_Parms;
	SelectVocabulary_Parms.LocalUserNum = LocalUserNum;
	SelectVocabulary_Parms.VocabularyId = VocabularyId;

	this->ProcessEvent ( pFnSelectVocabulary, &SelectVocabulary_Parms, NULL );

	return SelectVocabulary_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnClearRecognitionCompleteDelegate = NULL;

	if ( ! pFnClearRecognitionCompleteDelegate )
		pFnClearRecognitionCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate" );

	UOnlineVoiceInterface_execClearRecognitionCompleteDelegate_Parms ClearRecognitionCompleteDelegate_Parms;
	ClearRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0xC );

	this->ProcessEvent ( pFnClearRecognitionCompleteDelegate, &ClearRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnAddRecognitionCompleteDelegate = NULL;

	if ( ! pFnAddRecognitionCompleteDelegate )
		pFnAddRecognitionCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate" );

	UOnlineVoiceInterface_execAddRecognitionCompleteDelegate_Parms AddRecognitionCompleteDelegate_Parms;
	AddRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0xC );

	this->ProcessEvent ( pFnAddRecognitionCompleteDelegate, &AddRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnRecognitionComplete
// [0x00120000] 
// Parameters infos:

void UOnlineVoiceInterface::OnRecognitionComplete ( )
{
	static UFunction* pFnOnRecognitionComplete = NULL;

	if ( ! pFnOnRecognitionComplete )
		pFnOnRecognitionComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.OnRecognitionComplete" );

	UOnlineVoiceInterface_execOnRecognitionComplete_Parms OnRecognitionComplete_Parms;

	this->ProcessEvent ( pFnOnRecognitionComplete, &OnRecognitionComplete_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.GetRecognitionResults
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FSpeechRecognizedWord > Words                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineVoiceInterface::GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words )
{
	static UFunction* pFnGetRecognitionResults = NULL;

	if ( ! pFnGetRecognitionResults )
		pFnGetRecognitionResults = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.GetRecognitionResults" );

	UOnlineVoiceInterface_execGetRecognitionResults_Parms GetRecognitionResults_Parms;
	GetRecognitionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetRecognitionResults, &GetRecognitionResults_Parms, NULL );

	if ( Words )
		memcpy ( Words, &GetRecognitionResults_Parms.Words, 0xC );

	return GetRecognitionResults_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StopSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopSpeechRecognition = NULL;

	if ( ! pFnStopSpeechRecognition )
		pFnStopSpeechRecognition = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.StopSpeechRecognition" );

	UOnlineVoiceInterface_execStopSpeechRecognition_Parms StopSpeechRecognition_Parms;
	StopSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopSpeechRecognition, &StopSpeechRecognition_Parms, NULL );

	return StopSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StartSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StartSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartSpeechRecognition = NULL;

	if ( ! pFnStartSpeechRecognition )
		pFnStartSpeechRecognition = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.StartSpeechRecognition" );

	UOnlineVoiceInterface_execStartSpeechRecognition_Parms StartSpeechRecognition_Parms;
	StartSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartSpeechRecognition, &StartSpeechRecognition_Parms, NULL );

	return StartSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StopNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopNetworkedVoice = NULL;

	if ( ! pFnStopNetworkedVoice )
		pFnStopNetworkedVoice = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.StopNetworkedVoice" );

	UOnlineVoiceInterface_execStopNetworkedVoice_Parms StopNetworkedVoice_Parms;
	StopNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopNetworkedVoice, &StopNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.StartNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StartNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartNetworkedVoice = NULL;

	if ( ! pFnStartNetworkedVoice )
		pFnStartNetworkedVoice = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.StartNetworkedVoice" );

	UOnlineVoiceInterface_execStartNetworkedVoice_Parms StartNetworkedVoice_Parms;
	StartNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartNetworkedVoice, &StartNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnClearPlayerTalkingDelegate = NULL;

	if ( ! pFnClearPlayerTalkingDelegate )
		pFnClearPlayerTalkingDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate" );

	UOnlineVoiceInterface_execClearPlayerTalkingDelegate_Parms ClearPlayerTalkingDelegate_Parms;
	memcpy ( &ClearPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0xC );

	this->ProcessEvent ( pFnClearPlayerTalkingDelegate, &ClearPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnAddPlayerTalkingDelegate = NULL;

	if ( ! pFnAddPlayerTalkingDelegate )
		pFnAddPlayerTalkingDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate" );

	UOnlineVoiceInterface_execAddPlayerTalkingDelegate_Parms AddPlayerTalkingDelegate_Parms;
	memcpy ( &AddPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0xC );

	this->ProcessEvent ( pFnAddPlayerTalkingDelegate, &AddPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnPlayerTalking
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            Player                         ( CPF_Parm )

void UOnlineVoiceInterface::OnPlayerTalking ( struct FUniqueNetId Player )
{
	static UFunction* pFnOnPlayerTalking = NULL;

	if ( ! pFnOnPlayerTalking )
		pFnOnPlayerTalking = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.OnPlayerTalking" );

	UOnlineVoiceInterface_execOnPlayerTalking_Parms OnPlayerTalking_Parms;
	memcpy ( &OnPlayerTalking_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnOnPlayerTalking, &OnPlayerTalking_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnmuteRemoteTalker = NULL;

	if ( ! pFnUnmuteRemoteTalker )
		pFnUnmuteRemoteTalker = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker" );

	UOnlineVoiceInterface_execUnmuteRemoteTalker_Parms UnmuteRemoteTalker_Parms;
	UnmuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &UnmuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnmuteRemoteTalker, &UnmuteRemoteTalker_Parms, NULL );

	return UnmuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnMuteRemoteTalker = NULL;

	if ( ! pFnMuteRemoteTalker )
		pFnMuteRemoteTalker = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.MuteRemoteTalker" );

	UOnlineVoiceInterface_execMuteRemoteTalker_Parms MuteRemoteTalker_Parms;
	MuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &MuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnMuteRemoteTalker, &MuteRemoteTalker_Parms, NULL );

	return MuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            Priority                       ( CPF_Parm )

bool UOnlineVoiceInterface::SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority )
{
	static UFunction* pFnSetRemoteTalkerPriority = NULL;

	if ( ! pFnSetRemoteTalkerPriority )
		pFnSetRemoteTalkerPriority = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority" );

	UOnlineVoiceInterface_execSetRemoteTalkerPriority_Parms SetRemoteTalkerPriority_Parms;
	SetRemoteTalkerPriority_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SetRemoteTalkerPriority_Parms.PlayerID, &PlayerID, 0x8 );
	SetRemoteTalkerPriority_Parms.Priority = Priority;

	this->ProcessEvent ( pFnSetRemoteTalkerPriority, &SetRemoteTalkerPriority_Parms, NULL );

	return SetRemoteTalkerPriority_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsHeadsetPresent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsHeadsetPresent ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsHeadsetPresent = NULL;

	if ( ! pFnIsHeadsetPresent )
		pFnIsHeadsetPresent = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.IsHeadsetPresent" );

	UOnlineVoiceInterface_execIsHeadsetPresent_Parms IsHeadsetPresent_Parms;
	IsHeadsetPresent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsHeadsetPresent, &IsHeadsetPresent_Parms, NULL );

	return IsHeadsetPresent_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::IsRemotePlayerTalking ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsRemotePlayerTalking = NULL;

	if ( ! pFnIsRemotePlayerTalking )
		pFnIsRemotePlayerTalking = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking" );

	UOnlineVoiceInterface_execIsRemotePlayerTalking_Parms IsRemotePlayerTalking_Parms;
	memcpy ( &IsRemotePlayerTalking_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsRemotePlayerTalking, &IsRemotePlayerTalking_Parms, NULL );

	return IsRemotePlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsLocalPlayerTalking ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsLocalPlayerTalking = NULL;

	if ( ! pFnIsLocalPlayerTalking )
		pFnIsLocalPlayerTalking = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking" );

	UOnlineVoiceInterface_execIsLocalPlayerTalking_Parms IsLocalPlayerTalking_Parms;
	IsLocalPlayerTalking_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsLocalPlayerTalking, &IsLocalPlayerTalking_Parms, NULL );

	return IsLocalPlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterRemoteTalker = NULL;

	if ( ! pFnUnregisterRemoteTalker )
		pFnUnregisterRemoteTalker = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker" );

	UOnlineVoiceInterface_execUnregisterRemoteTalker_Parms UnregisterRemoteTalker_Parms;
	memcpy ( &UnregisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnregisterRemoteTalker, &UnregisterRemoteTalker_Parms, NULL );

	return UnregisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnRegisterRemoteTalker = NULL;

	if ( ! pFnRegisterRemoteTalker )
		pFnRegisterRemoteTalker = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.RegisterRemoteTalker" );

	UOnlineVoiceInterface_execRegisterRemoteTalker_Parms RegisterRemoteTalker_Parms;
	memcpy ( &RegisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnRegisterRemoteTalker, &RegisterRemoteTalker_Parms, NULL );

	return RegisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnregisterLocalTalker = NULL;

	if ( ! pFnUnregisterLocalTalker )
		pFnUnregisterLocalTalker = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.UnregisterLocalTalker" );

	UOnlineVoiceInterface_execUnregisterLocalTalker_Parms UnregisterLocalTalker_Parms;
	UnregisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnregisterLocalTalker, &UnregisterLocalTalker_Parms, NULL );

	return UnregisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnRegisterLocalTalker = NULL;

	if ( ! pFnRegisterLocalTalker )
		pFnRegisterLocalTalker = UObject::FindObject< UFunction > ( "Function Engine.OnlineVoiceInterface.RegisterLocalTalker" );

	UOnlineVoiceInterface_execRegisterLocalTalker_Parms RegisterLocalTalker_Parms;
	RegisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnRegisterLocalTalker, &RegisterLocalTalker_Parms, NULL );

	return RegisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.RegisterStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FString                 ClientStatGuid                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid )
{
	static UFunction* pFnRegisterStatGuid = NULL;

	if ( ! pFnRegisterStatGuid )
		pFnRegisterStatGuid = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.RegisterStatGuid" );

	UOnlineStatsInterface_execRegisterStatGuid_Parms RegisterStatGuid_Parms;
	memcpy ( &RegisterStatGuid_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnRegisterStatGuid, &RegisterStatGuid_Parms, NULL );

	if ( ClientStatGuid )
		memcpy ( ClientStatGuid, &RegisterStatGuid_Parms.ClientStatGuid, 0xC );

	return RegisterStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetClientStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineStatsInterface::GetClientStatGuid ( )
{
	static UFunction* pFnGetClientStatGuid = NULL;

	if ( ! pFnGetClientStatGuid )
		pFnGetClientStatGuid = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.GetClientStatGuid" );

	UOnlineStatsInterface_execGetClientStatGuid_Parms GetClientStatGuid_Parms;

	this->ProcessEvent ( pFnGetClientStatGuid, &GetClientStatGuid_Parms, NULL );

	return GetClientStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnClearRegisterHostStatGuidCompleteDelegateDelegate = NULL;

	if ( ! pFnClearRegisterHostStatGuidCompleteDelegateDelegate )
		pFnClearRegisterHostStatGuidCompleteDelegateDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate" );

	UOnlineStatsInterface_execClearRegisterHostStatGuidCompleteDelegateDelegate_Parms ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms;
	memcpy ( &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearRegisterHostStatGuidCompleteDelegateDelegate, &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnAddRegisterHostStatGuidCompleteDelegate = NULL;

	if ( ! pFnAddRegisterHostStatGuidCompleteDelegate )
		pFnAddRegisterHostStatGuidCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate" );

	UOnlineStatsInterface_execAddRegisterHostStatGuidCompleteDelegate_Parms AddRegisterHostStatGuidCompleteDelegate_Parms;
	memcpy ( &AddRegisterHostStatGuidCompleteDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddRegisterHostStatGuidCompleteDelegate, &AddRegisterHostStatGuidCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete" );

	UOnlineStatsInterface_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 HostStatGuid                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::RegisterHostStatGuid ( struct FString* HostStatGuid )
{
	static UFunction* pFnRegisterHostStatGuid = NULL;

	if ( ! pFnRegisterHostStatGuid )
		pFnRegisterHostStatGuid = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.RegisterHostStatGuid" );

	UOnlineStatsInterface_execRegisterHostStatGuid_Parms RegisterHostStatGuid_Parms;

	this->ProcessEvent ( pFnRegisterHostStatGuid, &RegisterHostStatGuid_Parms, NULL );

	if ( HostStatGuid )
		memcpy ( HostStatGuid, &RegisterHostStatGuid_Parms.HostStatGuid, 0xC );

	return RegisterHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetHostStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineStatsInterface::GetHostStatGuid ( )
{
	static UFunction* pFnGetHostStatGuid = NULL;

	if ( ! pFnGetHostStatGuid )
		pFnGetHostStatGuid = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.GetHostStatGuid" );

	UOnlineStatsInterface_execGetHostStatGuid_Parms GetHostStatGuid_Parms;

	this->ProcessEvent ( pFnGetHostStatGuid, &GetHostStatGuid_Parms, NULL );

	return GetHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FOnlinePlayerScore > PlayerScores                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::WriteOnlinePlayerScores ( struct FName SessionName, TArray< struct FOnlinePlayerScore >* PlayerScores )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores" );

	UOnlineStatsInterface_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;
	memcpy ( &WriteOnlinePlayerScores_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );

	if ( PlayerScores )
		memcpy ( PlayerScores, &WriteOnlinePlayerScores_Parms.PlayerScores, 0xC );

	return WriteOnlinePlayerScores_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearFlushOnlineStatsCompleteDelegate )
		pFnClearFlushOnlineStatsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate" );

	UOnlineStatsInterface_execClearFlushOnlineStatsCompleteDelegate_Parms ClearFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearFlushOnlineStatsCompleteDelegate, &ClearFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddFlushOnlineStatsCompleteDelegate )
		pFnAddFlushOnlineStatsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate" );

	UOnlineStatsInterface_execAddFlushOnlineStatsCompleteDelegate_Parms AddFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddFlushOnlineStatsCompleteDelegate, &AddFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFlushOnlineStatsComplete = NULL;

	if ( ! pFnOnFlushOnlineStatsComplete )
		pFnOnFlushOnlineStatsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete" );

	UOnlineStatsInterface_execOnFlushOnlineStatsComplete_Parms OnFlushOnlineStatsComplete_Parms;
	memcpy ( &OnFlushOnlineStatsComplete_Parms.SessionName, &SessionName, 0x8 );
	OnFlushOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFlushOnlineStatsComplete, &OnFlushOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.FlushOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineStatsInterface::FlushOnlineStats ( struct FName SessionName )
{
	static UFunction* pFnFlushOnlineStats = NULL;

	if ( ! pFnFlushOnlineStats )
		pFnFlushOnlineStats = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.FlushOnlineStats" );

	UOnlineStatsInterface_execFlushOnlineStats_Parms FlushOnlineStats_Parms;
	memcpy ( &FlushOnlineStats_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnFlushOnlineStats, &FlushOnlineStats_Parms, NULL );

	return FlushOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            Player                         ( CPF_Parm )
// class UOnlineStatsWrite*       StatsWrite                     ( CPF_Parm )

bool UOnlineStatsInterface::WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.WriteOnlineStats" );

	UOnlineStatsInterface_execWriteOnlineStats_Parms WriteOnlineStats_Parms;
	memcpy ( &WriteOnlineStats_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &WriteOnlineStats_Parms.Player, &Player, 0x8 );
	WriteOnlineStats_Parms.StatsWrite = StatsWrite;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );

	return WriteOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.FreeStats
// [0x00020000] 
// Parameters infos:
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

void UOnlineStatsInterface::FreeStats ( class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnFreeStats = NULL;

	if ( ! pFnFreeStats )
		pFnFreeStats = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.FreeStats" );

	UOnlineStatsInterface_execFreeStats_Parms FreeStats_Parms;
	FreeStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnFreeStats, &FreeStats_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnReadOnlineStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadOnlineStatsComplete = NULL;

	if ( ! pFnOnReadOnlineStatsComplete )
		pFnOnReadOnlineStatsComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete" );

	UOnlineStatsInterface_execOnReadOnlineStatsComplete_Parms OnReadOnlineStatsComplete_Parms;
	OnReadOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadOnlineStatsComplete, &OnReadOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearReadOnlineStatsCompleteDelegate )
		pFnClearReadOnlineStatsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate" );

	UOnlineStatsInterface_execClearReadOnlineStatsCompleteDelegate_Parms ClearReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadOnlineStatsCompleteDelegate, &ClearReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddReadOnlineStatsCompleteDelegate )
		pFnAddReadOnlineStatsCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate" );

	UOnlineStatsInterface_execAddReadOnlineStatsCompleteDelegate_Parms AddReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadOnlineStatsCompleteDelegate, &AddReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            NumRows                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows )
{
	static UFunction* pFnReadOnlineStatsByRankAroundPlayer = NULL;

	if ( ! pFnReadOnlineStatsByRankAroundPlayer )
		pFnReadOnlineStatsByRankAroundPlayer = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer" );

	UOnlineStatsInterface_execReadOnlineStatsByRankAroundPlayer_Parms ReadOnlineStatsByRankAroundPlayer_Parms;
	ReadOnlineStatsByRankAroundPlayer_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsByRankAroundPlayer_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRankAroundPlayer_Parms.NumRows = NumRows;

	this->ProcessEvent ( pFnReadOnlineStatsByRankAroundPlayer, &ReadOnlineStatsByRankAroundPlayer_Parms, NULL );

	return ReadOnlineStatsByRankAroundPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            StartIndex                     ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead )
{
	static UFunction* pFnReadOnlineStatsByRank = NULL;

	if ( ! pFnReadOnlineStatsByRank )
		pFnReadOnlineStatsByRank = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank" );

	UOnlineStatsInterface_execReadOnlineStatsByRank_Parms ReadOnlineStatsByRank_Parms;
	ReadOnlineStatsByRank_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRank_Parms.StartIndex = StartIndex;
	ReadOnlineStatsByRank_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadOnlineStatsByRank, &ReadOnlineStatsByRank_Parms, NULL );

	return ReadOnlineStatsByRank_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnReadOnlineStatsForFriends = NULL;

	if ( ! pFnReadOnlineStatsForFriends )
		pFnReadOnlineStatsForFriends = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends" );

	UOnlineStatsInterface_execReadOnlineStatsForFriends_Parms ReadOnlineStatsForFriends_Parms;
	ReadOnlineStatsForFriends_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsForFriends_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStatsForFriends, &ReadOnlineStatsForFriends_Parms, NULL );

	return ReadOnlineStatsForFriends_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStats
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::ReadOnlineStats ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnReadOnlineStats = NULL;

	if ( ! pFnReadOnlineStats )
		pFnReadOnlineStats = UObject::FindObject< UFunction > ( "Function Engine.OnlineStatsInterface.ReadOnlineStats" );

	UOnlineStatsInterface_execReadOnlineStats_Parms ReadOnlineStats_Parms;
	ReadOnlineStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStats, &ReadOnlineStats_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ReadOnlineStats_Parms.Players, 0xC );

	return ReadOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.GetContentAnnouncements
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

struct FString UOnlineNewsInterface::GetContentAnnouncements ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetContentAnnouncements = NULL;

	if ( ! pFnGetContentAnnouncements )
		pFnGetContentAnnouncements = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.GetContentAnnouncements" );

	UOnlineNewsInterface_execGetContentAnnouncements_Parms GetContentAnnouncements_Parms;
	GetContentAnnouncements_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetContentAnnouncements, &GetContentAnnouncements_Parms, NULL );

	return GetContentAnnouncements_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.ClearReadContentAnnouncementsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentAnnouncementsDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::ClearReadContentAnnouncementsCompletedDelegate ( struct FScriptDelegate ReadContentAnnouncementsDelegate )
{
	static UFunction* pFnClearReadContentAnnouncementsCompletedDelegate = NULL;

	if ( ! pFnClearReadContentAnnouncementsCompletedDelegate )
		pFnClearReadContentAnnouncementsCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.ClearReadContentAnnouncementsCompletedDelegate" );

	UOnlineNewsInterface_execClearReadContentAnnouncementsCompletedDelegate_Parms ClearReadContentAnnouncementsCompletedDelegate_Parms;
	memcpy ( &ClearReadContentAnnouncementsCompletedDelegate_Parms.ReadContentAnnouncementsDelegate, &ReadContentAnnouncementsDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadContentAnnouncementsCompletedDelegate, &ClearReadContentAnnouncementsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.AddReadContentAnnouncementsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentAnnouncementsDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::AddReadContentAnnouncementsCompletedDelegate ( struct FScriptDelegate ReadContentAnnouncementsDelegate )
{
	static UFunction* pFnAddReadContentAnnouncementsCompletedDelegate = NULL;

	if ( ! pFnAddReadContentAnnouncementsCompletedDelegate )
		pFnAddReadContentAnnouncementsCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.AddReadContentAnnouncementsCompletedDelegate" );

	UOnlineNewsInterface_execAddReadContentAnnouncementsCompletedDelegate_Parms AddReadContentAnnouncementsCompletedDelegate_Parms;
	memcpy ( &AddReadContentAnnouncementsCompletedDelegate_Parms.ReadContentAnnouncementsDelegate, &ReadContentAnnouncementsDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadContentAnnouncementsCompletedDelegate, &AddReadContentAnnouncementsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.OnReadContentAnnouncementsCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineNewsInterface::OnReadContentAnnouncementsCompleted ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentAnnouncementsCompleted = NULL;

	if ( ! pFnOnReadContentAnnouncementsCompleted )
		pFnOnReadContentAnnouncementsCompleted = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.OnReadContentAnnouncementsCompleted" );

	UOnlineNewsInterface_execOnReadContentAnnouncementsCompleted_Parms OnReadContentAnnouncementsCompleted_Parms;
	OnReadContentAnnouncementsCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentAnnouncementsCompleted, &OnReadContentAnnouncementsCompleted_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.ReadContentAnnouncements
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineNewsInterface::ReadContentAnnouncements ( unsigned char LocalUserNum )
{
	static UFunction* pFnReadContentAnnouncements = NULL;

	if ( ! pFnReadContentAnnouncements )
		pFnReadContentAnnouncements = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.ReadContentAnnouncements" );

	UOnlineNewsInterface_execReadContentAnnouncements_Parms ReadContentAnnouncements_Parms;
	ReadContentAnnouncements_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnReadContentAnnouncements, &ReadContentAnnouncements_Parms, NULL );

	return ReadContentAnnouncements_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.GetGameNews
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

struct FString UOnlineNewsInterface::GetGameNews ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetGameNews = NULL;

	if ( ! pFnGetGameNews )
		pFnGetGameNews = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.GetGameNews" );

	UOnlineNewsInterface_execGetGameNews_Parms GetGameNews_Parms;
	GetGameNews_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetGameNews, &GetGameNews_Parms, NULL );

	return GetGameNews_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.ClearReadGameNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadGameNewsDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::ClearReadGameNewsCompletedDelegate ( struct FScriptDelegate ReadGameNewsDelegate )
{
	static UFunction* pFnClearReadGameNewsCompletedDelegate = NULL;

	if ( ! pFnClearReadGameNewsCompletedDelegate )
		pFnClearReadGameNewsCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.ClearReadGameNewsCompletedDelegate" );

	UOnlineNewsInterface_execClearReadGameNewsCompletedDelegate_Parms ClearReadGameNewsCompletedDelegate_Parms;
	memcpy ( &ClearReadGameNewsCompletedDelegate_Parms.ReadGameNewsDelegate, &ReadGameNewsDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadGameNewsCompletedDelegate, &ClearReadGameNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.AddReadGameNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadGameNewsDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::AddReadGameNewsCompletedDelegate ( struct FScriptDelegate ReadGameNewsDelegate )
{
	static UFunction* pFnAddReadGameNewsCompletedDelegate = NULL;

	if ( ! pFnAddReadGameNewsCompletedDelegate )
		pFnAddReadGameNewsCompletedDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.AddReadGameNewsCompletedDelegate" );

	UOnlineNewsInterface_execAddReadGameNewsCompletedDelegate_Parms AddReadGameNewsCompletedDelegate_Parms;
	memcpy ( &AddReadGameNewsCompletedDelegate_Parms.ReadGameNewsDelegate, &ReadGameNewsDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadGameNewsCompletedDelegate, &AddReadGameNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.OnReadGameNewsCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineNewsInterface::OnReadGameNewsCompleted ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadGameNewsCompleted = NULL;

	if ( ! pFnOnReadGameNewsCompleted )
		pFnOnReadGameNewsCompleted = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.OnReadGameNewsCompleted" );

	UOnlineNewsInterface_execOnReadGameNewsCompleted_Parms OnReadGameNewsCompleted_Parms;
	OnReadGameNewsCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadGameNewsCompleted, &OnReadGameNewsCompleted_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.ReadGameNews
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineNewsInterface::ReadGameNews ( unsigned char LocalUserNum )
{
	static UFunction* pFnReadGameNews = NULL;

	if ( ! pFnReadGameNews )
		pFnReadGameNews = UObject::FindObject< UFunction > ( "Function Engine.OnlineNewsInterface.ReadGameNews" );

	UOnlineNewsInterface_execReadGameNews_Parms ReadGameNews_Parms;
	ReadGameNews_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnReadGameNews, &ReadGameNews_Parms, NULL );

	return ReadGameNews_Parms.ReturnValue;
};

// Function Engine.AccessControl.IsIDBanned
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetID                          ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AAccessControl::IsIDBanned ( struct FUniqueNetId* NetID )
{
	static UFunction* pFnIsIDBanned = NULL;

	if ( ! pFnIsIDBanned )
		pFnIsIDBanned = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.IsIDBanned" );

	AAccessControl_execIsIDBanned_Parms IsIDBanned_Parms;

	this->ProcessEvent ( pFnIsIDBanned, &IsIDBanned_Parms, NULL );

	if ( NetID )
		memcpy ( NetID, &IsIDBanned_Parms.NetID, 0x8 );

	return IsIDBanned_Parms.ReturnValue;
};

// Function Engine.AccessControl.CheckIPPolicy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::CheckIPPolicy ( struct FString Address )
{
	static UFunction* pFnCheckIPPolicy = NULL;

	if ( ! pFnCheckIPPolicy )
		pFnCheckIPPolicy = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.CheckIPPolicy" );

	AAccessControl_execCheckIPPolicy_Parms CheckIPPolicy_Parms;
	memcpy ( &CheckIPPolicy_Parms.Address, &Address, 0xC );

	this->ProcessEvent ( pFnCheckIPPolicy, &CheckIPPolicy_Parms, NULL );

	return CheckIPPolicy_Parms.ReturnValue;
};

// Function Engine.AccessControl.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSpectator                     ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AAccessControl::eventPreLogin ( struct FString Options, struct FString Address, unsigned long bSpectator, struct FString* OutError )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.PreLogin" );

	AAccessControl_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );
	PreLogin_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &PreLogin_Parms.OutError, 0xC );
};

// Function Engine.AccessControl.ValidLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ValidLogin ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnValidLogin = NULL;

	if ( ! pFnValidLogin )
		pFnValidLogin = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.ValidLogin" );

	AAccessControl_execValidLogin_Parms ValidLogin_Parms;
	memcpy ( &ValidLogin_Parms.UserName, &UserName, 0xC );
	memcpy ( &ValidLogin_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnValidLogin, &ValidLogin_Parms, NULL );

	return ValidLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.ParseAdminOptions
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ParseAdminOptions ( struct FString Options )
{
	static UFunction* pFnParseAdminOptions = NULL;

	if ( ! pFnParseAdminOptions )
		pFnParseAdminOptions = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.ParseAdminOptions" );

	AAccessControl_execParseAdminOptions_Parms ParseAdminOptions_Parms;
	memcpy ( &ParseAdminOptions_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnParseAdminOptions, &ParseAdminOptions_Parms, NULL );

	return ParseAdminOptions_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminExited
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminExited ( class APlayerController* P )
{
	static UFunction* pFnAdminExited = NULL;

	if ( ! pFnAdminExited )
		pFnAdminExited = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.AdminExited" );

	AAccessControl_execAdminExited_Parms AdminExited_Parms;
	AdminExited_Parms.P = P;

	this->ProcessEvent ( pFnAdminExited, &AdminExited_Parms, NULL );
};

// Function Engine.AccessControl.AdminEntered
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminEntered ( class APlayerController* P )
{
	static UFunction* pFnAdminEntered = NULL;

	if ( ! pFnAdminEntered )
		pFnAdminEntered = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.AdminEntered" );

	AAccessControl_execAdminEntered_Parms AdminEntered_Parms;
	AdminEntered_Parms.P = P;

	this->ProcessEvent ( pFnAdminEntered, &AdminEntered_Parms, NULL );
};

// Function Engine.AccessControl.AdminLogout
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::AdminLogout ( class APlayerController* P )
{
	static UFunction* pFnAdminLogout = NULL;

	if ( ! pFnAdminLogout )
		pFnAdminLogout = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.AdminLogout" );

	AAccessControl_execAdminLogout_Parms AdminLogout_Parms;
	AdminLogout_Parms.P = P;

	this->ProcessEvent ( pFnAdminLogout, &AdminLogout_Parms, NULL );

	return AdminLogout_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::AdminLogin ( class APlayerController* P, struct FString Password )
{
	static UFunction* pFnAdminLogin = NULL;

	if ( ! pFnAdminLogin )
		pFnAdminLogin = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.AdminLogin" );

	AAccessControl_execAdminLogin_Parms AdminLogin_Parms;
	AdminLogin_Parms.P = P;
	memcpy ( &AdminLogin_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnAdminLogin, &AdminLogin_Parms, NULL );

	return AdminLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       C                              ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::KickPlayer ( class APlayerController* C, struct FString KickReason )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.KickPlayer" );

	AAccessControl_execKickPlayer_Parms KickPlayer_Parms;
	KickPlayer_Parms.C = C;
	memcpy ( &KickPlayer_Parms.KickReason, &KickReason, 0xC );

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );

	return KickPlayer_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::KickBan ( struct FString Target )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.KickBan" );

	AAccessControl_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.AccessControl.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::Kick ( struct FString Target )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.Kick" );

	AAccessControl_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.AccessControl.GetControllerFromString
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

class AController* AAccessControl::GetControllerFromString ( struct FString Target )
{
	static UFunction* pFnGetControllerFromString = NULL;

	if ( ! pFnGetControllerFromString )
		pFnGetControllerFromString = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.GetControllerFromString" );

	AAccessControl_execGetControllerFromString_Parms GetControllerFromString_Parms;
	memcpy ( &GetControllerFromString_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnGetControllerFromString, &GetControllerFromString_Parms, NULL );

	return GetControllerFromString_Parms.ReturnValue;
};

// Function Engine.AccessControl.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAccessControl::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.RequiresPassword" );

	AAccessControl_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.SetGamePassword
// [0x00020002] 
// Parameters infos:
// struct FString                 P                              ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::SetGamePassword ( struct FString P )
{
	static UFunction* pFnSetGamePassword = NULL;

	if ( ! pFnSetGamePassword )
		pFnSetGamePassword = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.SetGamePassword" );

	AAccessControl_execSetGamePassword_Parms SetGamePassword_Parms;
	memcpy ( &SetGamePassword_Parms.P, &P, 0xC );

	this->ProcessEvent ( pFnSetGamePassword, &SetGamePassword_Parms, NULL );
};

// Function Engine.AccessControl.SetAdminPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 P                              ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::SetAdminPassword ( struct FString P )
{
	static UFunction* pFnSetAdminPassword = NULL;

	if ( ! pFnSetAdminPassword )
		pFnSetAdminPassword = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.SetAdminPassword" );

	AAccessControl_execSetAdminPassword_Parms SetAdminPassword_Parms;
	memcpy ( &SetAdminPassword_Parms.P, &P, 0xC );

	this->ProcessEvent ( pFnSetAdminPassword, &SetAdminPassword_Parms, NULL );

	return SetAdminPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.IsAdmin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::IsAdmin ( class APlayerController* P )
{
	static UFunction* pFnIsAdmin = NULL;

	if ( ! pFnIsAdmin )
		pFnIsAdmin = UObject::FindObject< UFunction > ( "Function Engine.AccessControl.IsAdmin" );

	AAccessControl_execIsAdmin_Parms IsAdmin_Parms;
	IsAdmin_Parms.P = P;

	this->ProcessEvent ( pFnIsAdmin, &IsAdmin_Parms, NULL );

	return IsAdmin_Parms.ReturnValue;
};

// Function Engine.Admin.ServerSwitch
// [0x002200C0] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerSwitch ( struct FString URL )
{
	static UFunction* pFnServerSwitch = NULL;

	if ( ! pFnServerSwitch )
		pFnServerSwitch = UObject::FindObject< UFunction > ( "Function Engine.Admin.ServerSwitch" );

	AAdmin_execServerSwitch_Parms ServerSwitch_Parms;
	memcpy ( &ServerSwitch_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnServerSwitch, &ServerSwitch_Parms, NULL );
};

// Function Engine.Admin.Switch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Switch ( struct FString URL )
{
	static UFunction* pFnSwitch = NULL;

	if ( ! pFnSwitch )
		pFnSwitch = UObject::FindObject< UFunction > ( "Function Engine.Admin.Switch" );

	AAdmin_execSwitch_Parms Switch_Parms;
	memcpy ( &Switch_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSwitch, &Switch_Parms, NULL );
};

// Function Engine.Admin.ServerRestartMap
// [0x002200C0] 
// Parameters infos:

void AAdmin::ServerRestartMap ( )
{
	static UFunction* pFnServerRestartMap = NULL;

	if ( ! pFnServerRestartMap )
		pFnServerRestartMap = UObject::FindObject< UFunction > ( "Function Engine.Admin.ServerRestartMap" );

	AAdmin_execServerRestartMap_Parms ServerRestartMap_Parms;

	this->ProcessEvent ( pFnServerRestartMap, &ServerRestartMap_Parms, NULL );
};

// Function Engine.Admin.RestartMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::RestartMap ( )
{
	static UFunction* pFnRestartMap = NULL;

	if ( ! pFnRestartMap )
		pFnRestartMap = UObject::FindObject< UFunction > ( "Function Engine.Admin.RestartMap" );

	AAdmin_execRestartMap_Parms RestartMap_Parms;

	this->ProcessEvent ( pFnRestartMap, &RestartMap_Parms, NULL );
};

// Function Engine.Admin.PlayerList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::PlayerList ( )
{
	static UFunction* pFnPlayerList = NULL;

	if ( ! pFnPlayerList )
		pFnPlayerList = UObject::FindObject< UFunction > ( "Function Engine.Admin.PlayerList" );

	AAdmin_execPlayerList_Parms PlayerList_Parms;

	this->ProcessEvent ( pFnPlayerList, &PlayerList_Parms, NULL );
};

// Function Engine.Admin.ServerKick
// [0x002200C0] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerKick ( struct FString S )
{
	static UFunction* pFnServerKick = NULL;

	if ( ! pFnServerKick )
		pFnServerKick = UObject::FindObject< UFunction > ( "Function Engine.Admin.ServerKick" );

	AAdmin_execServerKick_Parms ServerKick_Parms;
	memcpy ( &ServerKick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerKick, &ServerKick_Parms, NULL );
};

// Function Engine.Admin.Kick
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = UObject::FindObject< UFunction > ( "Function Engine.Admin.Kick" );

	AAdmin_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.Admin.ServerKickBan
// [0x002200C0] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerKickBan ( struct FString S )
{
	static UFunction* pFnServerKickBan = NULL;

	if ( ! pFnServerKickBan )
		pFnServerKickBan = UObject::FindObject< UFunction > ( "Function Engine.Admin.ServerKickBan" );

	AAdmin_execServerKickBan_Parms ServerKickBan_Parms;
	memcpy ( &ServerKickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerKickBan, &ServerKickBan_Parms, NULL );
};

// Function Engine.Admin.KickBan
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = UObject::FindObject< UFunction > ( "Function Engine.Admin.KickBan" );

	AAdmin_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.Admin.ServerAdmin
// [0x002200C0] 
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerAdmin ( struct FString CommandLine )
{
	static UFunction* pFnServerAdmin = NULL;

	if ( ! pFnServerAdmin )
		pFnServerAdmin = UObject::FindObject< UFunction > ( "Function Engine.Admin.ServerAdmin" );

	AAdmin_execServerAdmin_Parms ServerAdmin_Parms;
	memcpy ( &ServerAdmin_Parms.CommandLine, &CommandLine, 0xC );

	this->ProcessEvent ( pFnServerAdmin, &ServerAdmin_Parms, NULL );
};

// Function Engine.Admin.Admin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Admin ( struct FString CommandLine )
{
	static UFunction* pFnAdmin = NULL;

	if ( ! pFnAdmin )
		pFnAdmin = UObject::FindObject< UFunction > ( "Function Engine.Admin.Admin" );

	AAdmin_execAdmin_Parms Admin_Parms;
	memcpy ( &Admin_Parms.CommandLine, &CommandLine, 0xC );

	this->ProcessEvent ( pFnAdmin, &Admin_Parms, NULL );
};

// Function Engine.Admin.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAdmin::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.Admin.PostBeginPlay" );

	AAdmin_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterSpawnable.PostFactorySpawn
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USequence*               ParentSequence                 ( CPF_Parm )

void AEmitterSpawnable::eventPostFactorySpawn ( class USequence* ParentSequence )
{
	static UFunction* pFnPostFactorySpawn = NULL;

	if ( ! pFnPostFactorySpawn )
		pFnPostFactorySpawn = UObject::FindObject< UFunction > ( "Function Engine.EmitterSpawnable.PostFactorySpawn" );

	AEmitterSpawnable_eventPostFactorySpawn_Parms PostFactorySpawn_Parms;
	PostFactorySpawn_Parms.ParentSequence = ParentSequence;

	this->ProcessEvent ( pFnPostFactorySpawn, &PostFactorySpawn_Parms, NULL );
};

// Function Engine.EmitterSpawnable.OnParticleSystemFinished
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* FinishedComponent              ( CPF_Parm | CPF_EditInline )

void AEmitterSpawnable::OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = UObject::FindObject< UFunction > ( "Function Engine.EmitterSpawnable.OnParticleSystemFinished" );

	AEmitterSpawnable_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.FinishedComponent = FinishedComponent;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.EmitterSpawnable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitterSpawnable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.EmitterSpawnable.ReplicatedEvent" );

	AEmitterSpawnable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.EmitterSpawnable.SetTemplate
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitterSpawnable::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function Engine.EmitterSpawnable.SetTemplate" );

	AEmitterSpawnable_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleGodMode::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject" );

	USeqAct_ToggleGodMode_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleAffectedByHitEffects::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject" );

	USeqAct_ToggleAffectedByHitEffects_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveManualCoverTypeSlots = NULL;

	if ( ! pFnClientReceiveManualCoverTypeSlots )
		pFnClientReceiveManualCoverTypeSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots" );

	ACoverReplicator_execClientReceiveManualCoverTypeSlots_Parms ClientReceiveManualCoverTypeSlots_Parms;
	ClientReceiveManualCoverTypeSlots_Parms.Index = Index;
	ClientReceiveManualCoverTypeSlots_Parms.Link = Link;
	ClientReceiveManualCoverTypeSlots_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveManualCoverTypeSlots_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveManualCoverTypeSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveManualCoverTypeSlots, &ClientReceiveManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
// [0x00A200C0] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendManualCoverTypeSlots ( int Index )
{
	static UFunction* pFnServerSendManualCoverTypeSlots = NULL;

	if ( ! pFnServerSendManualCoverTypeSlots )
		pFnServerSendManualCoverTypeSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots" );

	ACoverReplicator_execServerSendManualCoverTypeSlots_Parms ServerSendManualCoverTypeSlots_Parms;
	ServerSendManualCoverTypeSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendManualCoverTypeSlots, &ServerSendManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NewCoverType                   ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifySetManualCoverTypeForSlots = NULL;

	if ( ! pFnNotifySetManualCoverTypeForSlots )
		pFnNotifySetManualCoverTypeForSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots" );

	ACoverReplicator_execNotifySetManualCoverTypeForSlots_Parms NotifySetManualCoverTypeForSlots_Parms;
	NotifySetManualCoverTypeForSlots_Parms.Link = Link;
	NotifySetManualCoverTypeForSlots_Parms.NewCoverType = NewCoverType;

	this->ProcessEvent ( pFnNotifySetManualCoverTypeForSlots, &NotifySetManualCoverTypeForSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifySetManualCoverTypeForSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone )
{
	static UFunction* pFnClientReceiveAdjustedSlots = NULL;

	if ( ! pFnClientReceiveAdjustedSlots )
		pFnClientReceiveAdjustedSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ClientReceiveAdjustedSlots" );

	ACoverReplicator_execClientReceiveAdjustedSlots_Parms ClientReceiveAdjustedSlots_Parms;
	ClientReceiveAdjustedSlots_Parms.Index = Index;
	ClientReceiveAdjustedSlots_Parms.Link = Link;
	ClientReceiveAdjustedSlots_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveAdjustedSlots_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveAdjustedSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveAdjustedSlots, &ClientReceiveAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendAdjustedSlots
// [0x002200C0] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendAdjustedSlots ( int Index )
{
	static UFunction* pFnServerSendAdjustedSlots = NULL;

	if ( ! pFnServerSendAdjustedSlots )
		pFnServerSendAdjustedSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ServerSendAdjustedSlots" );

	ACoverReplicator_execServerSendAdjustedSlots_Parms ServerSendAdjustedSlots_Parms;
	ServerSendAdjustedSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendAdjustedSlots, &ServerSendAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyAutoAdjustSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyAutoAdjustSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyAutoAdjustSlots = NULL;

	if ( ! pFnNotifyAutoAdjustSlots )
		pFnNotifyAutoAdjustSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.NotifyAutoAdjustSlots" );

	ACoverReplicator_execNotifyAutoAdjustSlots_Parms NotifyAutoAdjustSlots_Parms;
	NotifyAutoAdjustSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyAutoAdjustSlots, &NotifyAutoAdjustSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyAutoAdjustSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveDisabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveDisabledSlots = NULL;

	if ( ! pFnClientReceiveDisabledSlots )
		pFnClientReceiveDisabledSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ClientReceiveDisabledSlots" );

	ACoverReplicator_execClientReceiveDisabledSlots_Parms ClientReceiveDisabledSlots_Parms;
	ClientReceiveDisabledSlots_Parms.Index = Index;
	ClientReceiveDisabledSlots_Parms.Link = Link;
	ClientReceiveDisabledSlots_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveDisabledSlots_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveDisabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveDisabledSlots, &ClientReceiveDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendDisabledSlots
// [0x002200C0] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendDisabledSlots ( int Index )
{
	static UFunction* pFnServerSendDisabledSlots = NULL;

	if ( ! pFnServerSendDisabledSlots )
		pFnServerSendDisabledSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ServerSendDisabledSlots" );

	ACoverReplicator_execServerSendDisabledSlots_Parms ServerSendDisabledSlots_Parms;
	ServerSendDisabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendDisabledSlots, &ServerSendDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyDisabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyDisabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyDisabledSlots = NULL;

	if ( ! pFnNotifyDisabledSlots )
		pFnNotifyDisabledSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.NotifyDisabledSlots" );

	ACoverReplicator_execNotifyDisabledSlots_Parms NotifyDisabledSlots_Parms;
	NotifyDisabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyDisabledSlots, &NotifyDisabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyDisabledSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveEnabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveEnabledSlots = NULL;

	if ( ! pFnClientReceiveEnabledSlots )
		pFnClientReceiveEnabledSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ClientReceiveEnabledSlots" );

	ACoverReplicator_execClientReceiveEnabledSlots_Parms ClientReceiveEnabledSlots_Parms;
	ClientReceiveEnabledSlots_Parms.Index = Index;
	ClientReceiveEnabledSlots_Parms.Link = Link;
	ClientReceiveEnabledSlots_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveEnabledSlots_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveEnabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveEnabledSlots, &ClientReceiveEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendEnabledSlots
// [0x002200C0] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendEnabledSlots ( int Index )
{
	static UFunction* pFnServerSendEnabledSlots = NULL;

	if ( ! pFnServerSendEnabledSlots )
		pFnServerSendEnabledSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ServerSendEnabledSlots" );

	ACoverReplicator_execServerSendEnabledSlots_Parms ServerSendEnabledSlots_Parms;
	ServerSendEnabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendEnabledSlots, &ServerSendEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyEnabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyEnabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyEnabledSlots = NULL;

	if ( ! pFnNotifyEnabledSlots )
		pFnNotifyEnabledSlots = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.NotifyEnabledSlots" );

	ACoverReplicator_execNotifyEnabledSlots_Parms NotifyEnabledSlots_Parms;
	NotifyEnabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyEnabledSlots, &NotifyEnabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyEnabledSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveInitialCoverReplicationInfo = NULL;

	if ( ! pFnClientReceiveInitialCoverReplicationInfo )
		pFnClientReceiveInitialCoverReplicationInfo = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo" );

	ACoverReplicator_execClientReceiveInitialCoverReplicationInfo_Parms ClientReceiveInitialCoverReplicationInfo_Parms;
	ClientReceiveInitialCoverReplicationInfo_Parms.Index = Index;
	ClientReceiveInitialCoverReplicationInfo_Parms.Link = Link;
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveInitialCoverReplicationInfo_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveInitialCoverReplicationInfo, &ClientReceiveInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
// [0x00A200C0] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendInitialCoverReplicationInfo ( int Index )
{
	static UFunction* pFnServerSendInitialCoverReplicationInfo = NULL;

	if ( ! pFnServerSendInitialCoverReplicationInfo )
		pFnServerSendInitialCoverReplicationInfo = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo" );

	ACoverReplicator_execServerSendInitialCoverReplicationInfo_Parms ServerSendInitialCoverReplicationInfo_Parms;
	ServerSendInitialCoverReplicationInfo_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendInitialCoverReplicationInfo, &ServerSendInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ReplicateInitialCoverInfo
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::ReplicateInitialCoverInfo ( )
{
	static UFunction* pFnReplicateInitialCoverInfo = NULL;

	if ( ! pFnReplicateInitialCoverInfo )
		pFnReplicateInitialCoverInfo = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.ReplicateInitialCoverInfo" );

	ACoverReplicator_execReplicateInitialCoverInfo_Parms ReplicateInitialCoverInfo_Parms;

	this->ProcessEvent ( pFnReplicateInitialCoverInfo, &ReplicateInitialCoverInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.PurgeOldEntries
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::PurgeOldEntries ( )
{
	static UFunction* pFnPurgeOldEntries = NULL;

	if ( ! pFnPurgeOldEntries )
		pFnPurgeOldEntries = UObject::FindObject< UFunction > ( "Function Engine.CoverReplicator.PurgeOldEntries" );

	ACoverReplicator_execPurgeOldEntries_Parms PurgeOldEntries_Parms;

	this->ProcessEvent ( pFnPurgeOldEntries, &PurgeOldEntries_Parms, NULL );
};

// Function Engine.DebugCameraController.DisableDebugCamera
// [0x00020002] 
// Parameters infos:

void ADebugCameraController::DisableDebugCamera ( )
{
	static UFunction* pFnDisableDebugCamera = NULL;

	if ( ! pFnDisableDebugCamera )
		pFnDisableDebugCamera = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraController.DisableDebugCamera" );

	ADebugCameraController_execDisableDebugCamera_Parms DisableDebugCamera_Parms;

	this->ProcessEvent ( pFnDisableDebugCamera, &DisableDebugCamera_Parms, NULL );
};

// Function Engine.DebugCameraController.NormalSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::NormalSpeed ( )
{
	static UFunction* pFnNormalSpeed = NULL;

	if ( ! pFnNormalSpeed )
		pFnNormalSpeed = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraController.NormalSpeed" );

	ADebugCameraController_execNormalSpeed_Parms NormalSpeed_Parms;

	this->ProcessEvent ( pFnNormalSpeed, &NormalSpeed_Parms, NULL );
};

// Function Engine.DebugCameraController.MoreSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::MoreSpeed ( )
{
	static UFunction* pFnMoreSpeed = NULL;

	if ( ! pFnMoreSpeed )
		pFnMoreSpeed = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraController.MoreSpeed" );

	ADebugCameraController_execMoreSpeed_Parms MoreSpeed_Parms;

	this->ProcessEvent ( pFnMoreSpeed, &MoreSpeed_Parms, NULL );
};

// Function Engine.DebugCameraController.SetFreezeRendering
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::SetFreezeRendering ( )
{
	static UFunction* pFnSetFreezeRendering = NULL;

	if ( ! pFnSetFreezeRendering )
		pFnSetFreezeRendering = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraController.SetFreezeRendering" );

	ADebugCameraController_execSetFreezeRendering_Parms SetFreezeRendering_Parms;

	this->ProcessEvent ( pFnSetFreezeRendering, &SetFreezeRendering_Parms, NULL );
};

// Function Engine.DebugCameraController.OnDeactivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ADebugCameraController::OnDeactivate ( class APlayerController* PC )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraController.OnDeactivate" );

	ADebugCameraController_execOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function Engine.DebugCameraController.OnActivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ADebugCameraController::OnActivate ( class APlayerController* PC )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraController.OnActivate" );

	ADebugCameraController_execOnActivate_Parms OnActivate_Parms;
	OnActivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function Engine.DebugCameraController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADebugCameraController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraController.PostBeginPlay" );

	ADebugCameraController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.GameMessage.GetString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UGameMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function Engine.GameMessage.GetString" );

	UGameMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.Scoreboard.ChangeState
// [0x00020000] 
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void AScoreboard::ChangeState ( unsigned long bIsVisible )
{
	static UFunction* pFnChangeState = NULL;

	if ( ! pFnChangeState )
		pFnChangeState = UObject::FindObject< UFunction > ( "Function Engine.Scoreboard.ChangeState" );

	AScoreboard_execChangeState_Parms ChangeState_Parms;
	ChangeState_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnChangeState, &ChangeState_Parms, NULL );
};

// Function Engine.Scoreboard.UpdateScoreBoard
// [0x00020000] 
// Parameters infos:

void AScoreboard::UpdateScoreBoard ( )
{
	static UFunction* pFnUpdateScoreBoard = NULL;

	if ( ! pFnUpdateScoreBoard )
		pFnUpdateScoreBoard = UObject::FindObject< UFunction > ( "Function Engine.Scoreboard.UpdateScoreBoard" );

	AScoreboard_execUpdateScoreBoard_Parms UpdateScoreBoard_Parms;

	this->ProcessEvent ( pFnUpdateScoreBoard, &UpdateScoreBoard_Parms, NULL );
};

// Function Engine.Scoreboard.UpdateGRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AScoreboard::UpdateGRI ( )
{
	static UFunction* pFnUpdateGRI = NULL;

	if ( ! pFnUpdateGRI )
		pFnUpdateGRI = UObject::FindObject< UFunction > ( "Function Engine.Scoreboard.UpdateGRI" );

	AScoreboard_execUpdateGRI_Parms UpdateGRI_Parms;

	this->ProcessEvent ( pFnUpdateGRI, &UpdateGRI_Parms, NULL );

	return UpdateGRI_Parms.ReturnValue;
};

// Function Engine.Scoreboard.DrawHUD
// [0x00020002] 
// Parameters infos:

void AScoreboard::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function Engine.Scoreboard.DrawHUD" );

	AScoreboard_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleInput::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject" );

	USeqAct_ToggleInput_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ToggleHUD::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ToggleHUD.GetObjClassVersion" );

	USeqAct_ToggleHUD_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleHUD::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject" );

	USeqAct_ToggleHUD_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleCinematicMode::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject" );

	USeqAct_ToggleCinematicMode_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ConsoleCommand::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion" );

	USeqAct_ConsoleCommand_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.VersionUpdated
// [0x00020002] 
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USeqAct_ConsoleCommand::VersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ConsoleCommand.VersionUpdated" );

	USeqAct_ConsoleCommand_execVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AAmbientSoundSimpleToggleable::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.AmbientSoundSimpleToggleable.OnToggle" );

	AAmbientSoundSimpleToggleable_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StopPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StopPlaying ( )
{
	static UFunction* pFnStopPlaying = NULL;

	if ( ! pFnStopPlaying )
		pFnStopPlaying = UObject::FindObject< UFunction > ( "Function Engine.AmbientSoundSimpleToggleable.StopPlaying" );

	AAmbientSoundSimpleToggleable_execStopPlaying_Parms StopPlaying_Parms;

	this->ProcessEvent ( pFnStopPlaying, &StopPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StartPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StartPlaying ( )
{
	static UFunction* pFnStartPlaying = NULL;

	if ( ! pFnStartPlaying )
		pFnStartPlaying = UObject::FindObject< UFunction > ( "Function Engine.AmbientSoundSimpleToggleable.StartPlaying" );

	AAmbientSoundSimpleToggleable_execStartPlaying_Parms StartPlaying_Parms;

	this->ProcessEvent ( pFnStartPlaying, &StartPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AAmbientSoundSimpleToggleable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent" );

	AAmbientSoundSimpleToggleable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAmbientSoundSimpleToggleable::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay" );

	AAmbientSoundSimpleToggleable_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_PlayFaceFXAnim::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = UObject::FindObject< UFunction > ( "Function Engine.AnimNotify_PlayFaceFXAnim.Notify" );

	UAnimNotify_PlayFaceFXAnim_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimNotify_ViewShake.Notify
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_ViewShake::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = UObject::FindObject< UFunction > ( "Function Engine.AnimNotify_ViewShake.Notify" );

	UAnimNotify_ViewShake_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.cAPBVisualServerHUD.PostRender
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UcAPBVisualServerHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function Engine.cAPBVisualServerHUD.PostRender" );

	UcAPBVisualServerHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.cAPBVisualServerHUD.PreCalcValues
// [0x00020002] 
// Parameters infos:

void UcAPBVisualServerHUD::PreCalcValues ( )
{
	static UFunction* pFnPreCalcValues = NULL;

	if ( ! pFnPreCalcValues )
		pFnPreCalcValues = UObject::FindObject< UFunction > ( "Function Engine.cAPBVisualServerHUD.PreCalcValues" );

	UcAPBVisualServerHUD_execPreCalcValues_Parms PreCalcValues_Parms;

	this->ProcessEvent ( pFnPreCalcValues, &PreCalcValues_Parms, NULL );
};

// Function Engine.cAPBVisualServerHUD.DrawHUD
// [0x00020002] 
// Parameters infos:

void UcAPBVisualServerHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function Engine.cAPBVisualServerHUD.DrawHUD" );

	UcAPBVisualServerHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.ColorScaleVolume.UnTouch
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AColorScaleVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function Engine.ColorScaleVolume.UnTouch" );

	AColorScaleVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.ColorScaleVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AColorScaleVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.ColorScaleVolume.Touch" );

	AColorScaleVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.UIAction_ShowFriendInviteUI.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_ShowFriendInviteUI::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowFriendInviteUI.GetObjClassVersion" );

	UUIAction_ShowFriendInviteUI_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_ShowFeedbackUI.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_ShowFeedbackUI::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowFeedbackUI.GetObjClassVersion" );

	UUIAction_ShowFeedbackUI_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction_ShowGamerCardUI.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction_ShowGamerCardUI::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ShowGamerCardUI.GetObjClassVersion" );

	UUIAction_ShowGamerCardUI_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent_Initialized.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent_Initialized::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_Initialized.GetObjClassVersion" );

	UUIEvent_Initialized_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.DebugCameraHUD.PostRender
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void ADebugCameraHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraHUD.PostRender" );

	ADebugCameraHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.DebugCameraHUD.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADebugCameraHUD::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.DebugCameraHUD.PostBeginPlay" );

	ADebugCameraHUD_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.VolumeTimer.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function Engine.VolumeTimer.Timer" );

	AVolumeTimer_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.VolumeTimer.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.VolumeTimer.PostBeginPlay" );

	AVolumeTimer_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DialogueManager.TriggerDialogueEvent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class AActor*                  InOriginator                   ( CPF_Parm )

bool ADialogueManager::TriggerDialogueEvent ( class UClass* InEventClass, class AActor* InInstigator, class AActor* InOriginator )
{
	static UFunction* pFnTriggerDialogueEvent = NULL;

	if ( ! pFnTriggerDialogueEvent )
		pFnTriggerDialogueEvent = UObject::FindObject< UFunction > ( "Function Engine.DialogueManager.TriggerDialogueEvent" );

	ADialogueManager_execTriggerDialogueEvent_Parms TriggerDialogueEvent_Parms;
	TriggerDialogueEvent_Parms.InEventClass = InEventClass;
	TriggerDialogueEvent_Parms.InInstigator = InInstigator;
	TriggerDialogueEvent_Parms.InOriginator = InOriginator;

	this->ProcessEvent ( pFnTriggerDialogueEvent, &TriggerDialogueEvent_Parms, NULL );

	return TriggerDialogueEvent_Parms.ReturnValue;
};

// Function Engine.FailedConnect.GetString
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UFailedConnect::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function Engine.FailedConnect.GetString" );

	UFailedConnect_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.FailedConnect.GetFailSwitch
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FailString                     ( CPF_Parm | CPF_NeedCtorLink )

int UFailedConnect::GetFailSwitch ( struct FString FailString )
{
	static UFunction* pFnGetFailSwitch = NULL;

	if ( ! pFnGetFailSwitch )
		pFnGetFailSwitch = UObject::FindObject< UFunction > ( "Function Engine.FailedConnect.GetFailSwitch" );

	UFailedConnect_execGetFailSwitch_Parms GetFailSwitch_Parms;
	memcpy ( &GetFailSwitch_Parms.FailString, &FailString, 0xC );

	this->ProcessEvent ( pFnGetFailSwitch, &GetFailSwitch_Parms, NULL );

	return GetFailSwitch_Parms.ReturnValue;
};

// Function Engine.GameRules.NetDamage
// [0x00420002] 
// Parameters infos:
// int                            OriginalDamage                 ( CPF_Parm )
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AGameRules::NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnNetDamage = NULL;

	if ( ! pFnNetDamage )
		pFnNetDamage = UObject::FindObject< UFunction > ( "Function Engine.GameRules.NetDamage" );

	AGameRules_execNetDamage_Parms NetDamage_Parms;
	NetDamage_Parms.OriginalDamage = OriginalDamage;
	NetDamage_Parms.injured = injured;
	NetDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NetDamage_Parms.HitLocation, &HitLocation, 0xC );
	NetDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnNetDamage, &NetDamage_Parms, NULL );

	if ( Damage )
		*Damage = NetDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &NetDamage_Parms.Momentum, 0xC );
};

// Function Engine.GameRules.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )

void AGameRules::ScoreKill ( class AController* Killer, class AController* Killed )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = UObject::FindObject< UFunction > ( "Function Engine.GameRules.ScoreKill" );

	AGameRules_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Killed = Killed;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.GameRules.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameRules::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = UObject::FindObject< UFunction > ( "Function Engine.GameRules.ScoreObjective" );

	AGameRules_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.GameRules.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Killed                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AGameRules::PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = UObject::FindObject< UFunction > ( "Function Engine.GameRules.PreventDeath" );

	AGameRules_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.Killed = Killed;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.GameRules.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameRules::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = UObject::FindObject< UFunction > ( "Function Engine.GameRules.CheckEndGame" );

	AGameRules_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.GameRules.HandleRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameRules::HandleRestartGame ( )
{
	static UFunction* pFnHandleRestartGame = NULL;

	if ( ! pFnHandleRestartGame )
		pFnHandleRestartGame = UObject::FindObject< UFunction > ( "Function Engine.GameRules.HandleRestartGame" );

	AGameRules_execHandleRestartGame_Parms HandleRestartGame_Parms;

	this->ProcessEvent ( pFnHandleRestartGame, &HandleRestartGame_Parms, NULL );

	return HandleRestartGame_Parms.ReturnValue;
};

// Function Engine.GameRules.GetRules
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameRules::GetRules ( )
{
	static UFunction* pFnGetRules = NULL;

	if ( ! pFnGetRules )
		pFnGetRules = UObject::FindObject< UFunction > ( "Function Engine.GameRules.GetRules" );

	AGameRules_execGetRules_Parms GetRules_Parms;

	this->ProcessEvent ( pFnGetRules, &GetRules_Parms, NULL );

	return GetRules_Parms.ReturnValue;
};

// Function Engine.GameRules.FindPlayerStart
// [0x00020002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* AGameRules::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = UObject::FindObject< UFunction > ( "Function Engine.GameRules.FindPlayerStart" );

	AGameRules_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.GameRules.AddGameRules
// [0x00020002] 
// Parameters infos:
// class AGameRules*              GR                             ( CPF_Parm )

void AGameRules::AddGameRules ( class AGameRules* GR )
{
	static UFunction* pFnAddGameRules = NULL;

	if ( ! pFnAddGameRules )
		pFnAddGameRules = UObject::FindObject< UFunction > ( "Function Engine.GameRules.AddGameRules" );

	AGameRules_execAddGameRules_Parms AddGameRules_Parms;
	AddGameRules_Parms.GR = GR;

	this->ProcessEvent ( pFnAddGameRules, &AddGameRules_Parms, NULL );
};

// Function Engine.UIEvent_SceneActivated.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent_SceneActivated::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_SceneActivated.GetObjClassVersion" );

	UUIEvent_SceneActivated_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent_SceneActivated.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIEvent_SceneActivated::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function Engine.UIEvent_SceneActivated.Deactivated" );

	UUIEvent_SceneActivated_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function Engine.HeightFog.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AHeightFog::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.HeightFog.OnToggle" );

	AHeightFog_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.HeightFog.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AHeightFog::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function Engine.HeightFog.ReplicatedEvent" );

	AHeightFog_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.HeightFog.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHeightFog::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function Engine.HeightFog.PostBeginPlay" );

	AHeightFog_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.RateContent
// [0x00420000] 
// Parameters infos:
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            NewRating                      ( CPF_Parm )
// struct FCommunityContentFile   FileToRate                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate )
{
	static UFunction* pFnRateContent = NULL;

	if ( ! pFnRateContent )
		pFnRateContent = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.RateContent" );

	UOnlineCommunityContentInterface_execRateContent_Parms RateContent_Parms;
	RateContent_Parms.PlayerNum = PlayerNum;
	RateContent_Parms.NewRating = NewRating;

	this->ProcessEvent ( pFnRateContent, &RateContent_Parms, NULL );

	if ( FileToRate )
		memcpy ( FileToRate, &RateContent_Parms.FileToRate, 0x34 );
};

// Function Engine.OnlineCommunityContentInterface.GetContentPayload
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   File                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< unsigned char >        Payload                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* File, TArray< unsigned char >* Payload )
{
	static UFunction* pFnGetContentPayload = NULL;

	if ( ! pFnGetContentPayload )
		pFnGetContentPayload = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.GetContentPayload" );

	UOnlineCommunityContentInterface_execGetContentPayload_Parms GetContentPayload_Parms;
	GetContentPayload_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentPayload, &GetContentPayload_Parms, NULL );

	if ( File )
		memcpy ( File, &GetContentPayload_Parms.File, 0x34 );

	if ( Payload )
		memcpy ( Payload, &GetContentPayload_Parms.Payload, 0xC );

	return GetContentPayload_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnClearDownloadContentCompleteDelegate = NULL;

	if ( ! pFnClearDownloadContentCompleteDelegate )
		pFnClearDownloadContentCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate" );

	UOnlineCommunityContentInterface_execClearDownloadContentCompleteDelegate_Parms ClearDownloadContentCompleteDelegate_Parms;
	memcpy ( &ClearDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearDownloadContentCompleteDelegate, &ClearDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnAddDownloadContentCompleteDelegate = NULL;

	if ( ! pFnAddDownloadContentCompleteDelegate )
		pFnAddDownloadContentCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate" );

	UOnlineCommunityContentInterface_execAddDownloadContentCompleteDelegate_Parms AddDownloadContentCompleteDelegate_Parms;
	memcpy ( &AddDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddDownloadContentCompleteDelegate, &AddDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded )
{
	static UFunction* pFnOnDownloadContentComplete = NULL;

	if ( ! pFnOnDownloadContentComplete )
		pFnOnDownloadContentComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete" );

	UOnlineCommunityContentInterface_execOnDownloadContentComplete_Parms OnDownloadContentComplete_Parms;
	OnDownloadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDownloadContentComplete_Parms.FileDownloaded, &FileDownloaded, 0x34 );

	this->ProcessEvent ( pFnOnDownloadContentComplete, &OnDownloadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.DownloadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   FileToDownload                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload )
{
	static UFunction* pFnDownloadContent = NULL;

	if ( ! pFnDownloadContent )
		pFnDownloadContent = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.DownloadContent" );

	UOnlineCommunityContentInterface_execDownloadContent_Parms DownloadContent_Parms;
	DownloadContent_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnDownloadContent, &DownloadContent_Parms, NULL );

	if ( FileToDownload )
		memcpy ( FileToDownload, &DownloadContent_Parms.FileToDownload, 0x34 );

	return DownloadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnClearUploadContentCompleteDelegate = NULL;

	if ( ! pFnClearUploadContentCompleteDelegate )
		pFnClearUploadContentCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate" );

	UOnlineCommunityContentInterface_execClearUploadContentCompleteDelegate_Parms ClearUploadContentCompleteDelegate_Parms;
	memcpy ( &ClearUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearUploadContentCompleteDelegate, &ClearUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnAddUploadContentCompleteDelegate = NULL;

	if ( ! pFnAddUploadContentCompleteDelegate )
		pFnAddUploadContentCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate" );

	UOnlineCommunityContentInterface_execAddUploadContentCompleteDelegate_Parms AddUploadContentCompleteDelegate_Parms;
	memcpy ( &AddUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddUploadContentCompleteDelegate, &AddUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   UploadedFile                   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile )
{
	static UFunction* pFnOnUploadContentComplete = NULL;

	if ( ! pFnOnUploadContentComplete )
		pFnOnUploadContentComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete" );

	UOnlineCommunityContentInterface_execOnUploadContentComplete_Parms OnUploadContentComplete_Parms;
	OnUploadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnUploadContentComplete_Parms.UploadedFile, &UploadedFile, 0x34 );

	this->ProcessEvent ( pFnOnUploadContentComplete, &OnUploadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.UploadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            GameSpecificContentType        ( CPF_Parm )
// TArray< unsigned char >        Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::UploadContent ( unsigned char PlayerNum, int GameSpecificContentType, TArray< unsigned char >* Payload )
{
	static UFunction* pFnUploadContent = NULL;

	if ( ! pFnUploadContent )
		pFnUploadContent = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.UploadContent" );

	UOnlineCommunityContentInterface_execUploadContent_Parms UploadContent_Parms;
	UploadContent_Parms.PlayerNum = PlayerNum;
	UploadContent_Parms.GameSpecificContentType = GameSpecificContentType;

	this->ProcessEvent ( pFnUploadContent, &UploadContent_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &UploadContent_Parms.Payload, 0xC );

	return UploadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FOnlineFriend           Friend                         ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCommunityContentFile > ContentFiles                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray< struct FCommunityContentFile >* ContentFiles )
{
	static UFunction* pFnGetFriendsContentList = NULL;

	if ( ! pFnGetFriendsContentList )
		pFnGetFriendsContentList = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.GetFriendsContentList" );

	UOnlineCommunityContentInterface_execGetFriendsContentList_Parms GetFriendsContentList_Parms;
	GetFriendsContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetFriendsContentList, &GetFriendsContentList_Parms, NULL );

	if ( Friend )
		memcpy ( Friend, &GetFriendsContentList_Parms.Friend, 0x24 );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetFriendsContentList_Parms.ContentFiles, 0xC );

	return GetFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsContentListCompleteDelegate )
		pFnClearReadFriendsContentListCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate" );

	UOnlineCommunityContentInterface_execClearReadFriendsContentListCompleteDelegate_Parms ClearReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadFriendsContentListCompleteDelegate, &ClearReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsContentListCompleteDelegate )
		pFnAddReadFriendsContentListCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate" );

	UOnlineCommunityContentInterface_execAddReadFriendsContentListCompleteDelegate_Parms AddReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &AddReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadFriendsContentListCompleteDelegate, &AddReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsContentListComplete = NULL;

	if ( ! pFnOnReadFriendsContentListComplete )
		pFnOnReadFriendsContentListComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete" );

	UOnlineCommunityContentInterface_execOnReadFriendsContentListComplete_Parms OnReadFriendsContentListComplete_Parms;
	OnReadFriendsContentListComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsContentListComplete, &OnReadFriendsContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FOnlineFriend > Friends                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, TArray< struct FOnlineFriend >* Friends )
{
	static UFunction* pFnReadFriendsContentList = NULL;

	if ( ! pFnReadFriendsContentList )
		pFnReadFriendsContentList = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList" );

	UOnlineCommunityContentInterface_execReadFriendsContentList_Parms ReadFriendsContentList_Parms;
	ReadFriendsContentList_Parms.PlayerNum = PlayerNum;
	ReadFriendsContentList_Parms.StartAt = StartAt;
	ReadFriendsContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadFriendsContentList, &ReadFriendsContentList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &ReadFriendsContentList_Parms.Friends, 0xC );

	return ReadFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// TArray< struct FCommunityContentFile > ContentFiles                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetContentList ( unsigned char PlayerNum, TArray< struct FCommunityContentFile >* ContentFiles )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.GetContentList" );

	UOnlineCommunityContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetContentList_Parms.ContentFiles, 0xC );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnClearReadContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadContentListCompleteDelegate )
		pFnClearReadContentListCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate" );

	UOnlineCommunityContentInterface_execClearReadContentListCompleteDelegate_Parms ClearReadContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnClearReadContentListCompleteDelegate, &ClearReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnAddReadContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadContentListCompleteDelegate )
		pFnAddReadContentListCompleteDelegate = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate" );

	UOnlineCommunityContentInterface_execAddReadContentListCompleteDelegate_Parms AddReadContentListCompleteDelegate_Parms;
	memcpy ( &AddReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0xC );

	this->ProcessEvent ( pFnAddReadContentListCompleteDelegate, &AddReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnReadContentListComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentListComplete = NULL;

	if ( ! pFnOnReadContentListComplete )
		pFnOnReadContentListComplete = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete" );

	UOnlineCommunityContentInterface_execOnReadContentListComplete_Parms OnReadContentListComplete_Parms;
	OnReadContentListComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentListComplete, &OnReadContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadContentList
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineCommunityContentInterface::ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.ReadContentList" );

	UOnlineCommunityContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.PlayerNum = PlayerNum;
	ReadContentList_Parms.StartAt = StartAt;
	ReadContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.Exit
// [0x00020000] 
// Parameters infos:

void UOnlineCommunityContentInterface::Exit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.Exit" );

	UOnlineCommunityContentInterface_execExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.Init
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineCommunityContentInterface::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.OnlineCommunityContentInterface.Init" );

	UOnlineCommunityContentInterface_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	return Init_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.SaveLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::SaveLog ( )
{
	static UFunction* pFnSaveLog = NULL;

	if ( ! pFnSaveLog )
		pFnSaveLog = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.SaveLog" );

	UOnlineEventsInterface_execSaveLog_Parms SaveLog_Parms;

	this->ProcessEvent ( pFnSaveLog, &SaveLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.UploadLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::UploadLog ( )
{
	static UFunction* pFnUploadLog = NULL;

	if ( ! pFnUploadLog )
		pFnUploadLog = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.UploadLog" );

	UOnlineEventsInterface_execUploadLog_Parms UploadLog_Parms;

	this->ProcessEvent ( pFnUploadLog, &UploadLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.EndEvent
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::EndEvent ( )
{
	static UFunction* pFnEndEvent = NULL;

	if ( ! pFnEndEvent )
		pFnEndEvent = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.EndEvent" );

	UOnlineEventsInterface_execEndEvent_Parms EndEvent_Parms;

	this->ProcessEvent ( pFnEndEvent, &EndEvent_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.AddParamString
// [0x00020000] 
// Parameters infos:
// struct FString                 ParamName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamValue                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineEventsInterface::AddParamString ( struct FString ParamName, struct FString ParamValue )
{
	static UFunction* pFnAddParamString = NULL;

	if ( ! pFnAddParamString )
		pFnAddParamString = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.AddParamString" );

	UOnlineEventsInterface_execAddParamString_Parms AddParamString_Parms;
	memcpy ( &AddParamString_Parms.ParamName, &ParamName, 0xC );
	memcpy ( &AddParamString_Parms.ParamValue, &ParamValue, 0xC );

	this->ProcessEvent ( pFnAddParamString, &AddParamString_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.AddParamFloat
// [0x00020000] 
// Parameters infos:
// struct FString                 ParamName                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          ParamValue                     ( CPF_Parm )

void UOnlineEventsInterface::AddParamFloat ( struct FString ParamName, float ParamValue )
{
	static UFunction* pFnAddParamFloat = NULL;

	if ( ! pFnAddParamFloat )
		pFnAddParamFloat = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.AddParamFloat" );

	UOnlineEventsInterface_execAddParamFloat_Parms AddParamFloat_Parms;
	memcpy ( &AddParamFloat_Parms.ParamName, &ParamName, 0xC );
	AddParamFloat_Parms.ParamValue = ParamValue;

	this->ProcessEvent ( pFnAddParamFloat, &AddParamFloat_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.AddParamInt
// [0x00020000] 
// Parameters infos:
// struct FString                 ParamName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ParamValue                     ( CPF_Parm )

void UOnlineEventsInterface::AddParamInt ( struct FString ParamName, int ParamValue )
{
	static UFunction* pFnAddParamInt = NULL;

	if ( ! pFnAddParamInt )
		pFnAddParamInt = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.AddParamInt" );

	UOnlineEventsInterface_execAddParamInt_Parms AddParamInt_Parms;
	memcpy ( &AddParamInt_Parms.ParamName, &ParamName, 0xC );
	AddParamInt_Parms.ParamValue = ParamValue;

	this->ProcessEvent ( pFnAddParamInt, &AddParamInt_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.BeginEvent
// [0x00020000] 
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineEventsInterface::BeginEvent ( struct FString EventName )
{
	static UFunction* pFnBeginEvent = NULL;

	if ( ! pFnBeginEvent )
		pFnBeginEvent = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.BeginEvent" );

	UOnlineEventsInterface_execBeginEvent_Parms BeginEvent_Parms;
	memcpy ( &BeginEvent_Parms.EventName, &EventName, 0xC );

	this->ProcessEvent ( pFnBeginEvent, &BeginEvent_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.EndLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::EndLog ( )
{
	static UFunction* pFnEndLog = NULL;

	if ( ! pFnEndLog )
		pFnEndLog = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.EndLog" );

	UOnlineEventsInterface_execEndLog_Parms EndLog_Parms;

	this->ProcessEvent ( pFnEndLog, &EndLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.BeginLog
// [0x00020000] 
// Parameters infos:

void UOnlineEventsInterface::BeginLog ( )
{
	static UFunction* pFnBeginLog = NULL;

	if ( ! pFnBeginLog )
		pFnBeginLog = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.BeginLog" );

	UOnlineEventsInterface_execBeginLog_Parms BeginLog_Parms;

	this->ProcessEvent ( pFnBeginLog, &BeginLog_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.Init
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MaxNumEvents                   ( CPF_Parm )

bool UOnlineEventsInterface::Init ( int MaxNumEvents )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function Engine.OnlineEventsInterface.Init" );

	UOnlineEventsInterface_execInit_Parms Init_Parms;
	Init_Parms.MaxNumEvents = MaxNumEvents;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	return Init_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastYesNoEither
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastYesNoEither ( int I )
{
	static UFunction* pFnCastYesNoEither = NULL;

	if ( ! pFnCastYesNoEither )
		pFnCastYesNoEither = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastYesNoEither" );

	UPhysicalMaterialSDD_execCastYesNoEither_Parms CastYesNoEither_Parms;
	CastYesNoEither_Parms.I = I;

	this->ProcessEvent ( pFnCastYesNoEither, &CastYesNoEither_Parms, NULL );

	return CastYesNoEither_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastWorldFaction
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastWorldFaction ( int I )
{
	static UFunction* pFnCastWorldFaction = NULL;

	if ( ! pFnCastWorldFaction )
		pFnCastWorldFaction = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastWorldFaction" );

	UPhysicalMaterialSDD_execCastWorldFaction_Parms CastWorldFaction_Parms;
	CastWorldFaction_Parms.I = I;

	this->ProcessEvent ( pFnCastWorldFaction, &CastWorldFaction_Parms, NULL );

	return CastWorldFaction_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastWitnessingFunctionality
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastWitnessingFunctionality ( int I )
{
	static UFunction* pFnCastWitnessingFunctionality = NULL;

	if ( ! pFnCastWitnessingFunctionality )
		pFnCastWitnessingFunctionality = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastWitnessingFunctionality" );

	UPhysicalMaterialSDD_execCastWitnessingFunctionality_Parms CastWitnessingFunctionality_Parms;
	CastWitnessingFunctionality_Parms.I = I;

	this->ProcessEvent ( pFnCastWitnessingFunctionality, &CastWitnessingFunctionality_Parms, NULL );

	return CastWitnessingFunctionality_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastWeaponImpactClass
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastWeaponImpactClass ( int I )
{
	static UFunction* pFnCastWeaponImpactClass = NULL;

	if ( ! pFnCastWeaponImpactClass )
		pFnCastWeaponImpactClass = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastWeaponImpactClass" );

	UPhysicalMaterialSDD_execCastWeaponImpactClass_Parms CastWeaponImpactClass_Parms;
	CastWeaponImpactClass_Parms.I = I;

	this->ProcessEvent ( pFnCastWeaponImpactClass, &CastWeaponImpactClass_Parms, NULL );

	return CastWeaponImpactClass_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastWeaponFiringState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastWeaponFiringState ( int I )
{
	static UFunction* pFnCastWeaponFiringState = NULL;

	if ( ! pFnCastWeaponFiringState )
		pFnCastWeaponFiringState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastWeaponFiringState" );

	UPhysicalMaterialSDD_execCastWeaponFiringState_Parms CastWeaponFiringState_Parms;
	CastWeaponFiringState_Parms.I = I;

	this->ProcessEvent ( pFnCastWeaponFiringState, &CastWeaponFiringState_Parms, NULL );

	return CastWeaponFiringState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastWeaponClass
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastWeaponClass ( int I )
{
	static UFunction* pFnCastWeaponClass = NULL;

	if ( ! pFnCastWeaponClass )
		pFnCastWeaponClass = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastWeaponClass" );

	UPhysicalMaterialSDD_execCastWeaponClass_Parms CastWeaponClass_Parms;
	CastWeaponClass_Parms.I = I;

	this->ProcessEvent ( pFnCastWeaponClass, &CastWeaponClass_Parms, NULL );

	return CastWeaponClass_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastWarningPromptGroup
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastWarningPromptGroup ( int I )
{
	static UFunction* pFnCastWarningPromptGroup = NULL;

	if ( ! pFnCastWarningPromptGroup )
		pFnCastWarningPromptGroup = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastWarningPromptGroup" );

	UPhysicalMaterialSDD_execCastWarningPromptGroup_Parms CastWarningPromptGroup_Parms;
	CastWarningPromptGroup_Parms.I = I;

	this->ProcessEvent ( pFnCastWarningPromptGroup, &CastWarningPromptGroup_Parms, NULL );

	return CastWarningPromptGroup_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVIPAssignmentMethod
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVIPAssignmentMethod ( int I )
{
	static UFunction* pFnCastVIPAssignmentMethod = NULL;

	if ( ! pFnCastVIPAssignmentMethod )
		pFnCastVIPAssignmentMethod = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVIPAssignmentMethod" );

	UPhysicalMaterialSDD_execCastVIPAssignmentMethod_Parms CastVIPAssignmentMethod_Parms;
	CastVIPAssignmentMethod_Parms.I = I;

	this->ProcessEvent ( pFnCastVIPAssignmentMethod, &CastVIPAssignmentMethod_Parms, NULL );

	return CastVIPAssignmentMethod_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleUICategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleUICategory ( int I )
{
	static UFunction* pFnCastVehicleUICategory = NULL;

	if ( ! pFnCastVehicleUICategory )
		pFnCastVehicleUICategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleUICategory" );

	UPhysicalMaterialSDD_execCastVehicleUICategory_Parms CastVehicleUICategory_Parms;
	CastVehicleUICategory_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleUICategory, &CastVehicleUICategory_Parms, NULL );

	return CastVehicleUICategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleTempSetup
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleTempSetup ( int I )
{
	static UFunction* pFnCastVehicleTempSetup = NULL;

	if ( ! pFnCastVehicleTempSetup )
		pFnCastVehicleTempSetup = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleTempSetup" );

	UPhysicalMaterialSDD_execCastVehicleTempSetup_Parms CastVehicleTempSetup_Parms;
	CastVehicleTempSetup_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleTempSetup, &CastVehicleTempSetup_Parms, NULL );

	return CastVehicleTempSetup_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleSpecificationMethod
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleSpecificationMethod ( int I )
{
	static UFunction* pFnCastVehicleSpecificationMethod = NULL;

	if ( ! pFnCastVehicleSpecificationMethod )
		pFnCastVehicleSpecificationMethod = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleSpecificationMethod" );

	UPhysicalMaterialSDD_execCastVehicleSpecificationMethod_Parms CastVehicleSpecificationMethod_Parms;
	CastVehicleSpecificationMethod_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleSpecificationMethod, &CastVehicleSpecificationMethod_Parms, NULL );

	return CastVehicleSpecificationMethod_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleSetupType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleSetupType ( int I )
{
	static UFunction* pFnCastVehicleSetupType = NULL;

	if ( ! pFnCastVehicleSetupType )
		pFnCastVehicleSetupType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleSetupType" );

	UPhysicalMaterialSDD_execCastVehicleSetupType_Parms CastVehicleSetupType_Parms;
	CastVehicleSetupType_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleSetupType, &CastVehicleSetupType_Parms, NULL );

	return CastVehicleSetupType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehiclePositionIndex
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehiclePositionIndex ( int I )
{
	static UFunction* pFnCastVehiclePositionIndex = NULL;

	if ( ! pFnCastVehiclePositionIndex )
		pFnCastVehiclePositionIndex = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehiclePositionIndex" );

	UPhysicalMaterialSDD_execCastVehiclePositionIndex_Parms CastVehiclePositionIndex_Parms;
	CastVehiclePositionIndex_Parms.I = I;

	this->ProcessEvent ( pFnCastVehiclePositionIndex, &CastVehiclePositionIndex_Parms, NULL );

	return CastVehiclePositionIndex_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleModelClass
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleModelClass ( int I )
{
	static UFunction* pFnCastVehicleModelClass = NULL;

	if ( ! pFnCastVehicleModelClass )
		pFnCastVehicleModelClass = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleModelClass" );

	UPhysicalMaterialSDD_execCastVehicleModelClass_Parms CastVehicleModelClass_Parms;
	CastVehicleModelClass_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleModelClass, &CastVehicleModelClass_Parms, NULL );

	return CastVehicleModelClass_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleInteractionAnimation
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleInteractionAnimation ( int I )
{
	static UFunction* pFnCastVehicleInteractionAnimation = NULL;

	if ( ! pFnCastVehicleInteractionAnimation )
		pFnCastVehicleInteractionAnimation = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleInteractionAnimation" );

	UPhysicalMaterialSDD_execCastVehicleInteractionAnimation_Parms CastVehicleInteractionAnimation_Parms;
	CastVehicleInteractionAnimation_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleInteractionAnimation, &CastVehicleInteractionAnimation_Parms, NULL );

	return CastVehicleInteractionAnimation_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleGear
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleGear ( int I )
{
	static UFunction* pFnCastVehicleGear = NULL;

	if ( ! pFnCastVehicleGear )
		pFnCastVehicleGear = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleGear" );

	UPhysicalMaterialSDD_execCastVehicleGear_Parms CastVehicleGear_Parms;
	CastVehicleGear_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleGear, &CastVehicleGear_Parms, NULL );

	return CastVehicleGear_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleDriveType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleDriveType ( int I )
{
	static UFunction* pFnCastVehicleDriveType = NULL;

	if ( ! pFnCastVehicleDriveType )
		pFnCastVehicleDriveType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleDriveType" );

	UPhysicalMaterialSDD_execCastVehicleDriveType_Parms CastVehicleDriveType_Parms;
	CastVehicleDriveType_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleDriveType, &CastVehicleDriveType_Parms, NULL );

	return CastVehicleDriveType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleDistricts
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleDistricts ( int I )
{
	static UFunction* pFnCastVehicleDistricts = NULL;

	if ( ! pFnCastVehicleDistricts )
		pFnCastVehicleDistricts = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleDistricts" );

	UPhysicalMaterialSDD_execCastVehicleDistricts_Parms CastVehicleDistricts_Parms;
	CastVehicleDistricts_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleDistricts, &CastVehicleDistricts_Parms, NULL );

	return CastVehicleDistricts_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleDamageVFXState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleDamageVFXState ( int I )
{
	static UFunction* pFnCastVehicleDamageVFXState = NULL;

	if ( ! pFnCastVehicleDamageVFXState )
		pFnCastVehicleDamageVFXState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleDamageVFXState" );

	UPhysicalMaterialSDD_execCastVehicleDamageVFXState_Parms CastVehicleDamageVFXState_Parms;
	CastVehicleDamageVFXState_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleDamageVFXState, &CastVehicleDamageVFXState_Parms, NULL );

	return CastVehicleDamageVFXState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleColour
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleColour ( int I )
{
	static UFunction* pFnCastVehicleColour = NULL;

	if ( ! pFnCastVehicleColour )
		pFnCastVehicleColour = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleColour" );

	UPhysicalMaterialSDD_execCastVehicleColour_Parms CastVehicleColour_Parms;
	CastVehicleColour_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleColour, &CastVehicleColour_Parms, NULL );

	return CastVehicleColour_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastVehicleBatch
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastVehicleBatch ( int I )
{
	static UFunction* pFnCastVehicleBatch = NULL;

	if ( ! pFnCastVehicleBatch )
		pFnCastVehicleBatch = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastVehicleBatch" );

	UPhysicalMaterialSDD_execCastVehicleBatch_Parms CastVehicleBatch_Parms;
	CastVehicleBatch_Parms.I = I;

	this->ProcessEvent ( pFnCastVehicleBatch, &CastVehicleBatch_Parms, NULL );

	return CastVehicleBatch_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTutorialType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTutorialType ( int I )
{
	static UFunction* pFnCastTutorialType = NULL;

	if ( ! pFnCastTutorialType )
		pFnCastTutorialType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTutorialType" );

	UPhysicalMaterialSDD_execCastTutorialType_Parms CastTutorialType_Parms;
	CastTutorialType_Parms.I = I;

	this->ProcessEvent ( pFnCastTutorialType, &CastTutorialType_Parms, NULL );

	return CastTutorialType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTutorialPosition
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTutorialPosition ( int I )
{
	static UFunction* pFnCastTutorialPosition = NULL;

	if ( ! pFnCastTutorialPosition )
		pFnCastTutorialPosition = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTutorialPosition" );

	UPhysicalMaterialSDD_execCastTutorialPosition_Parms CastTutorialPosition_Parms;
	CastTutorialPosition_Parms.I = I;

	this->ProcessEvent ( pFnCastTutorialPosition, &CastTutorialPosition_Parms, NULL );

	return CastTutorialPosition_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTutorialBypassBehaviour
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTutorialBypassBehaviour ( int I )
{
	static UFunction* pFnCastTutorialBypassBehaviour = NULL;

	if ( ! pFnCastTutorialBypassBehaviour )
		pFnCastTutorialBypassBehaviour = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTutorialBypassBehaviour" );

	UPhysicalMaterialSDD_execCastTutorialBypassBehaviour_Parms CastTutorialBypassBehaviour_Parms;
	CastTutorialBypassBehaviour_Parms.I = I;

	this->ProcessEvent ( pFnCastTutorialBypassBehaviour, &CastTutorialBypassBehaviour_Parms, NULL );

	return CastTutorialBypassBehaviour_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTTIPlayerAnimType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTTIPlayerAnimType ( int I )
{
	static UFunction* pFnCastTTIPlayerAnimType = NULL;

	if ( ! pFnCastTTIPlayerAnimType )
		pFnCastTTIPlayerAnimType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTTIPlayerAnimType" );

	UPhysicalMaterialSDD_execCastTTIPlayerAnimType_Parms CastTTIPlayerAnimType_Parms;
	CastTTIPlayerAnimType_Parms.I = I;

	this->ProcessEvent ( pFnCastTTIPlayerAnimType, &CastTTIPlayerAnimType_Parms, NULL );

	return CastTTIPlayerAnimType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTTINPCEndingType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTTINPCEndingType ( int I )
{
	static UFunction* pFnCastTTINPCEndingType = NULL;

	if ( ! pFnCastTTINPCEndingType )
		pFnCastTTINPCEndingType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTTINPCEndingType" );

	UPhysicalMaterialSDD_execCastTTINPCEndingType_Parms CastTTINPCEndingType_Parms;
	CastTTINPCEndingType_Parms.I = I;

	this->ProcessEvent ( pFnCastTTINPCEndingType, &CastTTINPCEndingType_Parms, NULL );

	return CastTTINPCEndingType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTrackedActivityUnitConversion
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTrackedActivityUnitConversion ( int I )
{
	static UFunction* pFnCastTrackedActivityUnitConversion = NULL;

	if ( ! pFnCastTrackedActivityUnitConversion )
		pFnCastTrackedActivityUnitConversion = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTrackedActivityUnitConversion" );

	UPhysicalMaterialSDD_execCastTrackedActivityUnitConversion_Parms CastTrackedActivityUnitConversion_Parms;
	CastTrackedActivityUnitConversion_Parms.I = I;

	this->ProcessEvent ( pFnCastTrackedActivityUnitConversion, &CastTrackedActivityUnitConversion_Parms, NULL );

	return CastTrackedActivityUnitConversion_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTrackedActivityOperation
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTrackedActivityOperation ( int I )
{
	static UFunction* pFnCastTrackedActivityOperation = NULL;

	if ( ! pFnCastTrackedActivityOperation )
		pFnCastTrackedActivityOperation = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTrackedActivityOperation" );

	UPhysicalMaterialSDD_execCastTrackedActivityOperation_Parms CastTrackedActivityOperation_Parms;
	CastTrackedActivityOperation_Parms.I = I;

	this->ProcessEvent ( pFnCastTrackedActivityOperation, &CastTrackedActivityOperation_Parms, NULL );

	return CastTrackedActivityOperation_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTrackedActivityFixed
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTrackedActivityFixed ( int I )
{
	static UFunction* pFnCastTrackedActivityFixed = NULL;

	if ( ! pFnCastTrackedActivityFixed )
		pFnCastTrackedActivityFixed = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTrackedActivityFixed" );

	UPhysicalMaterialSDD_execCastTrackedActivityFixed_Parms CastTrackedActivityFixed_Parms;
	CastTrackedActivityFixed_Parms.I = I;

	this->ProcessEvent ( pFnCastTrackedActivityFixed, &CastTrackedActivityFixed_Parms, NULL );

	return CastTrackedActivityFixed_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTimeofDayPeriod
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTimeofDayPeriod ( int I )
{
	static UFunction* pFnCastTimeofDayPeriod = NULL;

	if ( ! pFnCastTimeofDayPeriod )
		pFnCastTimeofDayPeriod = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTimeofDayPeriod" );

	UPhysicalMaterialSDD_execCastTimeofDayPeriod_Parms CastTimeofDayPeriod_Parms;
	CastTimeofDayPeriod_Parms.I = I;

	this->ProcessEvent ( pFnCastTimeofDayPeriod, &CastTimeofDayPeriod_Parms, NULL );

	return CastTimeofDayPeriod_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTimeOfDayAvailability
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTimeOfDayAvailability ( int I )
{
	static UFunction* pFnCastTimeOfDayAvailability = NULL;

	if ( ! pFnCastTimeOfDayAvailability )
		pFnCastTimeOfDayAvailability = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTimeOfDayAvailability" );

	UPhysicalMaterialSDD_execCastTimeOfDayAvailability_Parms CastTimeOfDayAvailability_Parms;
	CastTimeOfDayAvailability_Parms.I = I;

	this->ProcessEvent ( pFnCastTimeOfDayAvailability, &CastTimeOfDayAvailability_Parms, NULL );

	return CastTimeOfDayAvailability_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTESProjectionInfo
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTESProjectionInfo ( int I )
{
	static UFunction* pFnCastTESProjectionInfo = NULL;

	if ( ! pFnCastTESProjectionInfo )
		pFnCastTESProjectionInfo = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTESProjectionInfo" );

	UPhysicalMaterialSDD_execCastTESProjectionInfo_Parms CastTESProjectionInfo_Parms;
	CastTESProjectionInfo_Parms.I = I;

	this->ProcessEvent ( pFnCastTESProjectionInfo, &CastTESProjectionInfo_Parms, NULL );

	return CastTESProjectionInfo_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskTargetSpecificationMethod
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskTargetSpecificationMethod ( int I )
{
	static UFunction* pFnCastTaskTargetSpecificationMethod = NULL;

	if ( ! pFnCastTaskTargetSpecificationMethod )
		pFnCastTaskTargetSpecificationMethod = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskTargetSpecificationMethod" );

	UPhysicalMaterialSDD_execCastTaskTargetSpecificationMethod_Parms CastTaskTargetSpecificationMethod_Parms;
	CastTaskTargetSpecificationMethod_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskTargetSpecificationMethod, &CastTaskTargetSpecificationMethod_Parms, NULL );

	return CastTaskTargetSpecificationMethod_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskTargetGraffiti
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskTargetGraffiti ( int I )
{
	static UFunction* pFnCastTaskTargetGraffiti = NULL;

	if ( ! pFnCastTaskTargetGraffiti )
		pFnCastTaskTargetGraffiti = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskTargetGraffiti" );

	UPhysicalMaterialSDD_execCastTaskTargetGraffiti_Parms CastTaskTargetGraffiti_Parms;
	CastTaskTargetGraffiti_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskTargetGraffiti, &CastTaskTargetGraffiti_Parms, NULL );

	return CastTaskTargetGraffiti_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskTargetClass
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskTargetClass ( int I )
{
	static UFunction* pFnCastTaskTargetClass = NULL;

	if ( ! pFnCastTaskTargetClass )
		pFnCastTaskTargetClass = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskTargetClass" );

	UPhysicalMaterialSDD_execCastTaskTargetClass_Parms CastTaskTargetClass_Parms;
	CastTaskTargetClass_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskTargetClass, &CastTaskTargetClass_Parms, NULL );

	return CastTaskTargetClass_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskTargetCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskTargetCategory ( int I )
{
	static UFunction* pFnCastTaskTargetCategory = NULL;

	if ( ! pFnCastTaskTargetCategory )
		pFnCastTaskTargetCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskTargetCategory" );

	UPhysicalMaterialSDD_execCastTaskTargetCategory_Parms CastTaskTargetCategory_Parms;
	CastTaskTargetCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskTargetCategory, &CastTaskTargetCategory_Parms, NULL );

	return CastTaskTargetCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskOperationCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskOperationCategory ( int I )
{
	static UFunction* pFnCastTaskOperationCategory = NULL;

	if ( ! pFnCastTaskOperationCategory )
		pFnCastTaskOperationCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskOperationCategory" );

	UPhysicalMaterialSDD_execCastTaskOperationCategory_Parms CastTaskOperationCategory_Parms;
	CastTaskOperationCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskOperationCategory, &CastTaskOperationCategory_Parms, NULL );

	return CastTaskOperationCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskObjectiveStage
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskObjectiveStage ( int I )
{
	static UFunction* pFnCastTaskObjectiveStage = NULL;

	if ( ! pFnCastTaskObjectiveStage )
		pFnCastTaskObjectiveStage = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskObjectiveStage" );

	UPhysicalMaterialSDD_execCastTaskObjectiveStage_Parms CastTaskObjectiveStage_Parms;
	CastTaskObjectiveStage_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskObjectiveStage, &CastTaskObjectiveStage_Parms, NULL );

	return CastTaskObjectiveStage_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskMemberRequirement
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskMemberRequirement ( int I )
{
	static UFunction* pFnCastTaskMemberRequirement = NULL;

	if ( ! pFnCastTaskMemberRequirement )
		pFnCastTaskMemberRequirement = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskMemberRequirement" );

	UPhysicalMaterialSDD_execCastTaskMemberRequirement_Parms CastTaskMemberRequirement_Parms;
	CastTaskMemberRequirement_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskMemberRequirement, &CastTaskMemberRequirement_Parms, NULL );

	return CastTaskMemberRequirement_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskItemVisibility
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskItemVisibility ( int I )
{
	static UFunction* pFnCastTaskItemVisibility = NULL;

	if ( ! pFnCastTaskItemVisibility )
		pFnCastTaskItemVisibility = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskItemVisibility" );

	UPhysicalMaterialSDD_execCastTaskItemVisibility_Parms CastTaskItemVisibility_Parms;
	CastTaskItemVisibility_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskItemVisibility, &CastTaskItemVisibility_Parms, NULL );

	return CastTaskItemVisibility_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskItemSpecificationMethod
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskItemSpecificationMethod ( int I )
{
	static UFunction* pFnCastTaskItemSpecificationMethod = NULL;

	if ( ! pFnCastTaskItemSpecificationMethod )
		pFnCastTaskItemSpecificationMethod = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskItemSpecificationMethod" );

	UPhysicalMaterialSDD_execCastTaskItemSpecificationMethod_Parms CastTaskItemSpecificationMethod_Parms;
	CastTaskItemSpecificationMethod_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskItemSpecificationMethod, &CastTaskItemSpecificationMethod_Parms, NULL );

	return CastTaskItemSpecificationMethod_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskItemSize
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskItemSize ( int I )
{
	static UFunction* pFnCastTaskItemSize = NULL;

	if ( ! pFnCastTaskItemSize )
		pFnCastTaskItemSize = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskItemSize" );

	UPhysicalMaterialSDD_execCastTaskItemSize_Parms CastTaskItemSize_Parms;
	CastTaskItemSize_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskItemSize, &CastTaskItemSize_Parms, NULL );

	return CastTaskItemSize_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskItemBatch
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskItemBatch ( int I )
{
	static UFunction* pFnCastTaskItemBatch = NULL;

	if ( ! pFnCastTaskItemBatch )
		pFnCastTaskItemBatch = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskItemBatch" );

	UPhysicalMaterialSDD_execCastTaskItemBatch_Parms CastTaskItemBatch_Parms;
	CastTaskItemBatch_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskItemBatch, &CastTaskItemBatch_Parms, NULL );

	return CastTaskItemBatch_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastTaskItemAnimationType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastTaskItemAnimationType ( int I )
{
	static UFunction* pFnCastTaskItemAnimationType = NULL;

	if ( ! pFnCastTaskItemAnimationType )
		pFnCastTaskItemAnimationType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastTaskItemAnimationType" );

	UPhysicalMaterialSDD_execCastTaskItemAnimationType_Parms CastTaskItemAnimationType_Parms;
	CastTaskItemAnimationType_Parms.I = I;

	this->ProcessEvent ( pFnCastTaskItemAnimationType, &CastTaskItemAnimationType_Parms, NULL );

	return CastTaskItemAnimationType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastSpawnDestroyData
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastSpawnDestroyData ( int I )
{
	static UFunction* pFnCastSpawnDestroyData = NULL;

	if ( ! pFnCastSpawnDestroyData )
		pFnCastSpawnDestroyData = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastSpawnDestroyData" );

	UPhysicalMaterialSDD_execCastSpawnDestroyData_Parms CastSpawnDestroyData_Parms;
	CastSpawnDestroyData_Parms.I = I;

	this->ProcessEvent ( pFnCastSpawnDestroyData, &CastSpawnDestroyData_Parms, NULL );

	return CastSpawnDestroyData_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastSpawnConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastSpawnConstant ( int I )
{
	static UFunction* pFnCastSpawnConstant = NULL;

	if ( ! pFnCastSpawnConstant )
		pFnCastSpawnConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastSpawnConstant" );

	UPhysicalMaterialSDD_execCastSpawnConstant_Parms CastSpawnConstant_Parms;
	CastSpawnConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastSpawnConstant, &CastSpawnConstant_Parms, NULL );

	return CastSpawnConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastRCEType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastRCEType ( int I )
{
	static UFunction* pFnCastRCEType = NULL;

	if ( ! pFnCastRCEType )
		pFnCastRCEType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastRCEType" );

	UPhysicalMaterialSDD_execCastRCEType_Parms CastRCEType_Parms;
	CastRCEType_Parms.I = I;

	this->ProcessEvent ( pFnCastRCEType, &CastRCEType_Parms, NULL );

	return CastRCEType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPvPType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPvPType ( int I )
{
	static UFunction* pFnCastPvPType = NULL;

	if ( ! pFnCastPvPType )
		pFnCastPvPType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPvPType" );

	UPhysicalMaterialSDD_execCastPvPType_Parms CastPvPType_Parms;
	CastPvPType_Parms.I = I;

	this->ProcessEvent ( pFnCastPvPType, &CastPvPType_Parms, NULL );

	return CastPvPType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPvPRule
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPvPRule ( int I )
{
	static UFunction* pFnCastPvPRule = NULL;

	if ( ! pFnCastPvPRule )
		pFnCastPvPRule = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPvPRule" );

	UPhysicalMaterialSDD_execCastPvPRule_Parms CastPvPRule_Parms;
	CastPvPRule_Parms.I = I;

	this->ProcessEvent ( pFnCastPvPRule, &CastPvPRule_Parms, NULL );

	return CastPvPRule_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPrimitiveType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPrimitiveType ( int I )
{
	static UFunction* pFnCastPrimitiveType = NULL;

	if ( ! pFnCastPrimitiveType )
		pFnCastPrimitiveType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPrimitiveType" );

	UPhysicalMaterialSDD_execCastPrimitiveType_Parms CastPrimitiveType_Parms;
	CastPrimitiveType_Parms.I = I;

	this->ProcessEvent ( pFnCastPrimitiveType, &CastPrimitiveType_Parms, NULL );

	return CastPrimitiveType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPopulation
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPopulation ( int I )
{
	static UFunction* pFnCastPopulation = NULL;

	if ( ! pFnCastPopulation )
		pFnCastPopulation = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPopulation" );

	UPhysicalMaterialSDD_execCastPopulation_Parms CastPopulation_Parms;
	CastPopulation_Parms.I = I;

	this->ProcessEvent ( pFnCastPopulation, &CastPopulation_Parms, NULL );

	return CastPopulation_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPlayerRadarPings
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPlayerRadarPings ( int I )
{
	static UFunction* pFnCastPlayerRadarPings = NULL;

	if ( ! pFnCastPlayerRadarPings )
		pFnCastPlayerRadarPings = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPlayerRadarPings" );

	UPhysicalMaterialSDD_execCastPlayerRadarPings_Parms CastPlayerRadarPings_Parms;
	CastPlayerRadarPings_Parms.I = I;

	this->ProcessEvent ( pFnCastPlayerRadarPings, &CastPlayerRadarPings_Parms, NULL );

	return CastPlayerRadarPings_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPedestrianTTIReaction
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPedestrianTTIReaction ( int I )
{
	static UFunction* pFnCastPedestrianTTIReaction = NULL;

	if ( ! pFnCastPedestrianTTIReaction )
		pFnCastPedestrianTTIReaction = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPedestrianTTIReaction" );

	UPhysicalMaterialSDD_execCastPedestrianTTIReaction_Parms CastPedestrianTTIReaction_Parms;
	CastPedestrianTTIReaction_Parms.I = I;

	this->ProcessEvent ( pFnCastPedestrianTTIReaction, &CastPedestrianTTIReaction_Parms, NULL );

	return CastPedestrianTTIReaction_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPedestrianTempSetup
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPedestrianTempSetup ( int I )
{
	static UFunction* pFnCastPedestrianTempSetup = NULL;

	if ( ! pFnCastPedestrianTempSetup )
		pFnCastPedestrianTempSetup = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPedestrianTempSetup" );

	UPhysicalMaterialSDD_execCastPedestrianTempSetup_Parms CastPedestrianTempSetup_Parms;
	CastPedestrianTempSetup_Parms.I = I;

	this->ProcessEvent ( pFnCastPedestrianTempSetup, &CastPedestrianTempSetup_Parms, NULL );

	return CastPedestrianTempSetup_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPedestrianPaletteType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPedestrianPaletteType ( int I )
{
	static UFunction* pFnCastPedestrianPaletteType = NULL;

	if ( ! pFnCastPedestrianPaletteType )
		pFnCastPedestrianPaletteType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPedestrianPaletteType" );

	UPhysicalMaterialSDD_execCastPedestrianPaletteType_Parms CastPedestrianPaletteType_Parms;
	CastPedestrianPaletteType_Parms.I = I;

	this->ProcessEvent ( pFnCastPedestrianPaletteType, &CastPedestrianPaletteType_Parms, NULL );

	return CastPedestrianPaletteType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReactionType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReactionType ( int I )
{
	static UFunction* pFnCastPawnHitReactionType = NULL;

	if ( ! pFnCastPawnHitReactionType )
		pFnCastPawnHitReactionType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReactionType" );

	UPhysicalMaterialSDD_execCastPawnHitReactionType_Parms CastPawnHitReactionType_Parms;
	CastPawnHitReactionType_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReactionType, &CastPawnHitReactionType_Parms, NULL );

	return CastPawnHitReactionType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_Vector2D
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReaction_Vector2D ( int I )
{
	static UFunction* pFnCastPawnHitReaction_Vector2D = NULL;

	if ( ! pFnCastPawnHitReaction_Vector2D )
		pFnCastPawnHitReaction_Vector2D = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_Vector2D" );

	UPhysicalMaterialSDD_execCastPawnHitReaction_Vector2D_Parms CastPawnHitReaction_Vector2D_Parms;
	CastPawnHitReaction_Vector2D_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReaction_Vector2D, &CastPawnHitReaction_Vector2D_Parms, NULL );

	return CastPawnHitReaction_Vector2D_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_SpringList
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReaction_SpringList ( int I )
{
	static UFunction* pFnCastPawnHitReaction_SpringList = NULL;

	if ( ! pFnCastPawnHitReaction_SpringList )
		pFnCastPawnHitReaction_SpringList = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_SpringList" );

	UPhysicalMaterialSDD_execCastPawnHitReaction_SpringList_Parms CastPawnHitReaction_SpringList_Parms;
	CastPawnHitReaction_SpringList_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReaction_SpringList, &CastPawnHitReaction_SpringList_Parms, NULL );

	return CastPawnHitReaction_SpringList_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_Float
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReaction_Float ( int I )
{
	static UFunction* pFnCastPawnHitReaction_Float = NULL;

	if ( ! pFnCastPawnHitReaction_Float )
		pFnCastPawnHitReaction_Float = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_Float" );

	UPhysicalMaterialSDD_execCastPawnHitReaction_Float_Parms CastPawnHitReaction_Float_Parms;
	CastPawnHitReaction_Float_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReaction_Float, &CastPawnHitReaction_Float_Parms, NULL );

	return CastPawnHitReaction_Float_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_ConstrainedBoneList
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReaction_ConstrainedBoneList ( int I )
{
	static UFunction* pFnCastPawnHitReaction_ConstrainedBoneList = NULL;

	if ( ! pFnCastPawnHitReaction_ConstrainedBoneList )
		pFnCastPawnHitReaction_ConstrainedBoneList = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_ConstrainedBoneList" );

	UPhysicalMaterialSDD_execCastPawnHitReaction_ConstrainedBoneList_Parms CastPawnHitReaction_ConstrainedBoneList_Parms;
	CastPawnHitReaction_ConstrainedBoneList_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReaction_ConstrainedBoneList, &CastPawnHitReaction_ConstrainedBoneList_Parms, NULL );

	return CastPawnHitReaction_ConstrainedBoneList_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_Bool
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReaction_Bool ( int I )
{
	static UFunction* pFnCastPawnHitReaction_Bool = NULL;

	if ( ! pFnCastPawnHitReaction_Bool )
		pFnCastPawnHitReaction_Bool = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_Bool" );

	UPhysicalMaterialSDD_execCastPawnHitReaction_Bool_Parms CastPawnHitReaction_Bool_Parms;
	CastPawnHitReaction_Bool_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReaction_Bool, &CastPawnHitReaction_Bool_Parms, NULL );

	return CastPawnHitReaction_Bool_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_BoneRemapTable
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReaction_BoneRemapTable ( int I )
{
	static UFunction* pFnCastPawnHitReaction_BoneRemapTable = NULL;

	if ( ! pFnCastPawnHitReaction_BoneRemapTable )
		pFnCastPawnHitReaction_BoneRemapTable = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_BoneRemapTable" );

	UPhysicalMaterialSDD_execCastPawnHitReaction_BoneRemapTable_Parms CastPawnHitReaction_BoneRemapTable_Parms;
	CastPawnHitReaction_BoneRemapTable_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReaction_BoneRemapTable, &CastPawnHitReaction_BoneRemapTable_Parms, NULL );

	return CastPawnHitReaction_BoneRemapTable_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_BoneList
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastPawnHitReaction_BoneList ( int I )
{
	static UFunction* pFnCastPawnHitReaction_BoneList = NULL;

	if ( ! pFnCastPawnHitReaction_BoneList )
		pFnCastPawnHitReaction_BoneList = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastPawnHitReaction_BoneList" );

	UPhysicalMaterialSDD_execCastPawnHitReaction_BoneList_Parms CastPawnHitReaction_BoneList_Parms;
	CastPawnHitReaction_BoneList_Parms.I = I;

	this->ProcessEvent ( pFnCastPawnHitReaction_BoneList, &CastPawnHitReaction_BoneList_Parms, NULL );

	return CastPawnHitReaction_BoneList_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastOrganisation
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastOrganisation ( int I )
{
	static UFunction* pFnCastOrganisation = NULL;

	if ( ! pFnCastOrganisation )
		pFnCastOrganisation = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastOrganisation" );

	UPhysicalMaterialSDD_execCastOrganisation_Parms CastOrganisation_Parms;
	CastOrganisation_Parms.I = I;

	this->ProcessEvent ( pFnCastOrganisation, &CastOrganisation_Parms, NULL );

	return CastOrganisation_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastOpenWorldConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastOpenWorldConstant ( int I )
{
	static UFunction* pFnCastOpenWorldConstant = NULL;

	if ( ! pFnCastOpenWorldConstant )
		pFnCastOpenWorldConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastOpenWorldConstant" );

	UPhysicalMaterialSDD_execCastOpenWorldConstant_Parms CastOpenWorldConstant_Parms;
	CastOpenWorldConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastOpenWorldConstant, &CastOpenWorldConstant_Parms, NULL );

	return CastOpenWorldConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastOnFootDeathAnimation
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastOnFootDeathAnimation ( int I )
{
	static UFunction* pFnCastOnFootDeathAnimation = NULL;

	if ( ! pFnCastOnFootDeathAnimation )
		pFnCastOnFootDeathAnimation = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastOnFootDeathAnimation" );

	UPhysicalMaterialSDD_execCastOnFootDeathAnimation_Parms CastOnFootDeathAnimation_Parms;
	CastOnFootDeathAnimation_Parms.I = I;

	this->ProcessEvent ( pFnCastOnFootDeathAnimation, &CastOnFootDeathAnimation_Parms, NULL );

	return CastOnFootDeathAnimation_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastNPCWorldEvent
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastNPCWorldEvent ( int I )
{
	static UFunction* pFnCastNPCWorldEvent = NULL;

	if ( ! pFnCastNPCWorldEvent )
		pFnCastNPCWorldEvent = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastNPCWorldEvent" );

	UPhysicalMaterialSDD_execCastNPCWorldEvent_Parms CastNPCWorldEvent_Parms;
	CastNPCWorldEvent_Parms.I = I;

	this->ProcessEvent ( pFnCastNPCWorldEvent, &CastNPCWorldEvent_Parms, NULL );

	return CastNPCWorldEvent_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastNPCReaction
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastNPCReaction ( int I )
{
	static UFunction* pFnCastNPCReaction = NULL;

	if ( ! pFnCastNPCReaction )
		pFnCastNPCReaction = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastNPCReaction" );

	UPhysicalMaterialSDD_execCastNPCReaction_Parms CastNPCReaction_Parms;
	CastNPCReaction_Parms.I = I;

	this->ProcessEvent ( pFnCastNPCReaction, &CastNPCReaction_Parms, NULL );

	return CastNPCReaction_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastNPCEvent
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastNPCEvent ( int I )
{
	static UFunction* pFnCastNPCEvent = NULL;

	if ( ! pFnCastNPCEvent )
		pFnCastNPCEvent = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastNPCEvent" );

	UPhysicalMaterialSDD_execCastNPCEvent_Parms CastNPCEvent_Parms;
	CastNPCEvent_Parms.I = I;

	this->ProcessEvent ( pFnCastNPCEvent, &CastNPCEvent_Parms, NULL );

	return CastNPCEvent_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastNPCCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastNPCCategory ( int I )
{
	static UFunction* pFnCastNPCCategory = NULL;

	if ( ! pFnCastNPCCategory )
		pFnCastNPCCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastNPCCategory" );

	UPhysicalMaterialSDD_execCastNPCCategory_Parms CastNPCCategory_Parms;
	CastNPCCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastNPCCategory, &CastNPCCategory_Parms, NULL );

	return CastNPCCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastNameQuery
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastNameQuery ( int I )
{
	static UFunction* pFnCastNameQuery = NULL;

	if ( ! pFnCastNameQuery )
		pFnCastNameQuery = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastNameQuery" );

	UPhysicalMaterialSDD_execCastNameQuery_Parms CastNameQuery_Parms;
	CastNameQuery_Parms.I = I;

	this->ProcessEvent ( pFnCastNameQuery, &CastNameQuery_Parms, NULL );

	return CastNameQuery_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastModifierStatus
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastModifierStatus ( int I )
{
	static UFunction* pFnCastModifierStatus = NULL;

	if ( ! pFnCastModifierStatus )
		pFnCastModifierStatus = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastModifierStatus" );

	UPhysicalMaterialSDD_execCastModifierStatus_Parms CastModifierStatus_Parms;
	CastModifierStatus_Parms.I = I;

	this->ProcessEvent ( pFnCastModifierStatus, &CastModifierStatus_Parms, NULL );

	return CastModifierStatus_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastModifierClass
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastModifierClass ( int I )
{
	static UFunction* pFnCastModifierClass = NULL;

	if ( ! pFnCastModifierClass )
		pFnCastModifierClass = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastModifierClass" );

	UPhysicalMaterialSDD_execCastModifierClass_Parms CastModifierClass_Parms;
	CastModifierClass_Parms.I = I;

	this->ProcessEvent ( pFnCastModifierClass, &CastModifierClass_Parms, NULL );

	return CastModifierClass_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastModifierCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastModifierCategory ( int I )
{
	static UFunction* pFnCastModifierCategory = NULL;

	if ( ! pFnCastModifierCategory )
		pFnCastModifierCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastModifierCategory" );

	UPhysicalMaterialSDD_execCastModifierCategory_Parms CastModifierCategory_Parms;
	CastModifierCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastModifierCategory, &CastModifierCategory_Parms, NULL );

	return CastModifierCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMissionUITrackedValueDisplay
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMissionUITrackedValueDisplay ( int I )
{
	static UFunction* pFnCastMissionUITrackedValueDisplay = NULL;

	if ( ! pFnCastMissionUITrackedValueDisplay )
		pFnCastMissionUITrackedValueDisplay = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMissionUITrackedValueDisplay" );

	UPhysicalMaterialSDD_execCastMissionUITrackedValueDisplay_Parms CastMissionUITrackedValueDisplay_Parms;
	CastMissionUITrackedValueDisplay_Parms.I = I;

	this->ProcessEvent ( pFnCastMissionUITrackedValueDisplay, &CastMissionUITrackedValueDisplay_Parms, NULL );

	return CastMissionUITrackedValueDisplay_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMissionUITrackedValue
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMissionUITrackedValue ( int I )
{
	static UFunction* pFnCastMissionUITrackedValue = NULL;

	if ( ! pFnCastMissionUITrackedValue )
		pFnCastMissionUITrackedValue = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMissionUITrackedValue" );

	UPhysicalMaterialSDD_execCastMissionUITrackedValue_Parms CastMissionUITrackedValue_Parms;
	CastMissionUITrackedValue_Parms.I = I;

	this->ProcessEvent ( pFnCastMissionUITrackedValue, &CastMissionUITrackedValue_Parms, NULL );

	return CastMissionUITrackedValue_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMissionResultReason
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMissionResultReason ( int I )
{
	static UFunction* pFnCastMissionResultReason = NULL;

	if ( ! pFnCastMissionResultReason )
		pFnCastMissionResultReason = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMissionResultReason" );

	UPhysicalMaterialSDD_execCastMissionResultReason_Parms CastMissionResultReason_Parms;
	CastMissionResultReason_Parms.I = I;

	this->ProcessEvent ( pFnCastMissionResultReason, &CastMissionResultReason_Parms, NULL );

	return CastMissionResultReason_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMissionEnforcerDispatchTypes
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMissionEnforcerDispatchTypes ( int I )
{
	static UFunction* pFnCastMissionEnforcerDispatchTypes = NULL;

	if ( ! pFnCastMissionEnforcerDispatchTypes )
		pFnCastMissionEnforcerDispatchTypes = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMissionEnforcerDispatchTypes" );

	UPhysicalMaterialSDD_execCastMissionEnforcerDispatchTypes_Parms CastMissionEnforcerDispatchTypes_Parms;
	CastMissionEnforcerDispatchTypes_Parms.I = I;

	this->ProcessEvent ( pFnCastMissionEnforcerDispatchTypes, &CastMissionEnforcerDispatchTypes_Parms, NULL );

	return CastMissionEnforcerDispatchTypes_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMissionCriminalDispatchTypes
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMissionCriminalDispatchTypes ( int I )
{
	static UFunction* pFnCastMissionCriminalDispatchTypes = NULL;

	if ( ! pFnCastMissionCriminalDispatchTypes )
		pFnCastMissionCriminalDispatchTypes = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMissionCriminalDispatchTypes" );

	UPhysicalMaterialSDD_execCastMissionCriminalDispatchTypes_Parms CastMissionCriminalDispatchTypes_Parms;
	CastMissionCriminalDispatchTypes_Parms.I = I;

	this->ProcessEvent ( pFnCastMissionCriminalDispatchTypes, &CastMissionCriminalDispatchTypes_Parms, NULL );

	return CastMissionCriminalDispatchTypes_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMedalCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMedalCategory ( int I )
{
	static UFunction* pFnCastMedalCategory = NULL;

	if ( ! pFnCastMedalCategory )
		pFnCastMedalCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMedalCategory" );

	UPhysicalMaterialSDD_execCastMedalCategory_Parms CastMedalCategory_Parms;
	CastMedalCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastMedalCategory, &CastMedalCategory_Parms, NULL );

	return CastMedalCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceTimeLeft
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceTimeLeft ( int I )
{
	static UFunction* pFnCastMarketplaceTimeLeft = NULL;

	if ( ! pFnCastMarketplaceTimeLeft )
		pFnCastMarketplaceTimeLeft = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceTimeLeft" );

	UPhysicalMaterialSDD_execCastMarketplaceTimeLeft_Parms CastMarketplaceTimeLeft_Parms;
	CastMarketplaceTimeLeft_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceTimeLeft, &CastMarketplaceTimeLeft_Parms, NULL );

	return CastMarketplaceTimeLeft_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceSort
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceSort ( int I )
{
	static UFunction* pFnCastMarketplaceSort = NULL;

	if ( ! pFnCastMarketplaceSort )
		pFnCastMarketplaceSort = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceSort" );

	UPhysicalMaterialSDD_execCastMarketplaceSort_Parms CastMarketplaceSort_Parms;
	CastMarketplaceSort_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceSort, &CastMarketplaceSort_Parms, NULL );

	return CastMarketplaceSort_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceSearch
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceSearch ( int I )
{
	static UFunction* pFnCastMarketplaceSearch = NULL;

	if ( ! pFnCastMarketplaceSearch )
		pFnCastMarketplaceSearch = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceSearch" );

	UPhysicalMaterialSDD_execCastMarketplaceSearch_Parms CastMarketplaceSearch_Parms;
	CastMarketplaceSearch_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceSearch, &CastMarketplaceSearch_Parms, NULL );

	return CastMarketplaceSearch_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceListType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceListType ( int I )
{
	static UFunction* pFnCastMarketplaceListType = NULL;

	if ( ! pFnCastMarketplaceListType )
		pFnCastMarketplaceListType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceListType" );

	UPhysicalMaterialSDD_execCastMarketplaceListType_Parms CastMarketplaceListType_Parms;
	CastMarketplaceListType_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceListType, &CastMarketplaceListType_Parms, NULL );

	return CastMarketplaceListType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceInfo
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceInfo ( int I )
{
	static UFunction* pFnCastMarketplaceInfo = NULL;

	if ( ! pFnCastMarketplaceInfo )
		pFnCastMarketplaceInfo = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceInfo" );

	UPhysicalMaterialSDD_execCastMarketplaceInfo_Parms CastMarketplaceInfo_Parms;
	CastMarketplaceInfo_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceInfo, &CastMarketplaceInfo_Parms, NULL );

	return CastMarketplaceInfo_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceDuration
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceDuration ( int I )
{
	static UFunction* pFnCastMarketplaceDuration = NULL;

	if ( ! pFnCastMarketplaceDuration )
		pFnCastMarketplaceDuration = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceDuration" );

	UPhysicalMaterialSDD_execCastMarketplaceDuration_Parms CastMarketplaceDuration_Parms;
	CastMarketplaceDuration_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceDuration, &CastMarketplaceDuration_Parms, NULL );

	return CastMarketplaceDuration_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceConstant ( int I )
{
	static UFunction* pFnCastMarketplaceConstant = NULL;

	if ( ! pFnCastMarketplaceConstant )
		pFnCastMarketplaceConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceConstant" );

	UPhysicalMaterialSDD_execCastMarketplaceConstant_Parms CastMarketplaceConstant_Parms;
	CastMarketplaceConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceConstant, &CastMarketplaceConstant_Parms, NULL );

	return CastMarketplaceConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceCashType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceCashType ( int I )
{
	static UFunction* pFnCastMarketplaceCashType = NULL;

	if ( ! pFnCastMarketplaceCashType )
		pFnCastMarketplaceCashType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceCashType" );

	UPhysicalMaterialSDD_execCastMarketplaceCashType_Parms CastMarketplaceCashType_Parms;
	CastMarketplaceCashType_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceCashType, &CastMarketplaceCashType_Parms, NULL );

	return CastMarketplaceCashType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMarketplaceAuctionType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMarketplaceAuctionType ( int I )
{
	static UFunction* pFnCastMarketplaceAuctionType = NULL;

	if ( ! pFnCastMarketplaceAuctionType )
		pFnCastMarketplaceAuctionType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMarketplaceAuctionType" );

	UPhysicalMaterialSDD_execCastMarketplaceAuctionType_Parms CastMarketplaceAuctionType_Parms;
	CastMarketplaceAuctionType_Parms.I = I;

	this->ProcessEvent ( pFnCastMarketplaceAuctionType, &CastMarketplaceAuctionType_Parms, NULL );

	return CastMarketplaceAuctionType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMailSort
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMailSort ( int I )
{
	static UFunction* pFnCastMailSort = NULL;

	if ( ! pFnCastMailSort )
		pFnCastMailSort = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMailSort" );

	UPhysicalMaterialSDD_execCastMailSort_Parms CastMailSort_Parms;
	CastMailSort_Parms.I = I;

	this->ProcessEvent ( pFnCastMailSort, &CastMailSort_Parms, NULL );

	return CastMailSort_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMailInfo
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMailInfo ( int I )
{
	static UFunction* pFnCastMailInfo = NULL;

	if ( ! pFnCastMailInfo )
		pFnCastMailInfo = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMailInfo" );

	UPhysicalMaterialSDD_execCastMailInfo_Parms CastMailInfo_Parms;
	CastMailInfo_Parms.I = I;

	this->ProcessEvent ( pFnCastMailInfo, &CastMailInfo_Parms, NULL );

	return CastMailInfo_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMailDuration
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMailDuration ( int I )
{
	static UFunction* pFnCastMailDuration = NULL;

	if ( ! pFnCastMailDuration )
		pFnCastMailDuration = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMailDuration" );

	UPhysicalMaterialSDD_execCastMailDuration_Parms CastMailDuration_Parms;
	CastMailDuration_Parms.I = I;

	this->ProcessEvent ( pFnCastMailDuration, &CastMailDuration_Parms, NULL );

	return CastMailDuration_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMailDetach
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMailDetach ( int I )
{
	static UFunction* pFnCastMailDetach = NULL;

	if ( ! pFnCastMailDetach )
		pFnCastMailDetach = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMailDetach" );

	UPhysicalMaterialSDD_execCastMailDetach_Parms CastMailDetach_Parms;
	CastMailDetach_Parms.I = I;

	this->ProcessEvent ( pFnCastMailDetach, &CastMailDetach_Parms, NULL );

	return CastMailDetach_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastMailConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastMailConstant ( int I )
{
	static UFunction* pFnCastMailConstant = NULL;

	if ( ! pFnCastMailConstant )
		pFnCastMailConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastMailConstant" );

	UPhysicalMaterialSDD_execCastMailConstant_Parms CastMailConstant_Parms;
	CastMailConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastMailConstant, &CastMailConstant_Parms, NULL );

	return CastMailConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLocaleTypePriority
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLocaleTypePriority ( int I )
{
	static UFunction* pFnCastLocaleTypePriority = NULL;

	if ( ! pFnCastLocaleTypePriority )
		pFnCastLocaleTypePriority = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLocaleTypePriority" );

	UPhysicalMaterialSDD_execCastLocaleTypePriority_Parms CastLocaleTypePriority_Parms;
	CastLocaleTypePriority_Parms.I = I;

	this->ProcessEvent ( pFnCastLocaleTypePriority, &CastLocaleTypePriority_Parms, NULL );

	return CastLocaleTypePriority_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLoadingScreenHintDomain
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLoadingScreenHintDomain ( int I )
{
	static UFunction* pFnCastLoadingScreenHintDomain = NULL;

	if ( ! pFnCastLoadingScreenHintDomain )
		pFnCastLoadingScreenHintDomain = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLoadingScreenHintDomain" );

	UPhysicalMaterialSDD_execCastLoadingScreenHintDomain_Parms CastLoadingScreenHintDomain_Parms;
	CastLoadingScreenHintDomain_Parms.I = I;

	this->ProcessEvent ( pFnCastLoadingScreenHintDomain, &CastLoadingScreenHintDomain_Parms, NULL );

	return CastLoadingScreenHintDomain_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLoadingMovieTransitionType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLoadingMovieTransitionType ( int I )
{
	static UFunction* pFnCastLoadingMovieTransitionType = NULL;

	if ( ! pFnCastLoadingMovieTransitionType )
		pFnCastLoadingMovieTransitionType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLoadingMovieTransitionType" );

	UPhysicalMaterialSDD_execCastLoadingMovieTransitionType_Parms CastLoadingMovieTransitionType_Parms;
	CastLoadingMovieTransitionType_Parms.I = I;

	this->ProcessEvent ( pFnCastLoadingMovieTransitionType, &CastLoadingMovieTransitionType_Parms, NULL );

	return CastLoadingMovieTransitionType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLoadingMovieTip
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLoadingMovieTip ( int I )
{
	static UFunction* pFnCastLoadingMovieTip = NULL;

	if ( ! pFnCastLoadingMovieTip )
		pFnCastLoadingMovieTip = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLoadingMovieTip" );

	UPhysicalMaterialSDD_execCastLoadingMovieTip_Parms CastLoadingMovieTip_Parms;
	CastLoadingMovieTip_Parms.I = I;

	this->ProcessEvent ( pFnCastLoadingMovieTip, &CastLoadingMovieTip_Parms, NULL );

	return CastLoadingMovieTip_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLeagueScope
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLeagueScope ( int I )
{
	static UFunction* pFnCastLeagueScope = NULL;

	if ( ! pFnCastLeagueScope )
		pFnCastLeagueScope = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLeagueScope" );

	UPhysicalMaterialSDD_execCastLeagueScope_Parms CastLeagueScope_Parms;
	CastLeagueScope_Parms.I = I;

	this->ProcessEvent ( pFnCastLeagueScope, &CastLeagueScope_Parms, NULL );

	return CastLeagueScope_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLeagueRewardType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLeagueRewardType ( int I )
{
	static UFunction* pFnCastLeagueRewardType = NULL;

	if ( ! pFnCastLeagueRewardType )
		pFnCastLeagueRewardType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLeagueRewardType" );

	UPhysicalMaterialSDD_execCastLeagueRewardType_Parms CastLeagueRewardType_Parms;
	CastLeagueRewardType_Parms.I = I;

	this->ProcessEvent ( pFnCastLeagueRewardType, &CastLeagueRewardType_Parms, NULL );

	return CastLeagueRewardType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLeaguePeriod
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLeaguePeriod ( int I )
{
	static UFunction* pFnCastLeaguePeriod = NULL;

	if ( ! pFnCastLeaguePeriod )
		pFnCastLeaguePeriod = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLeaguePeriod" );

	UPhysicalMaterialSDD_execCastLeaguePeriod_Parms CastLeaguePeriod_Parms;
	CastLeaguePeriod_Parms.I = I;

	this->ProcessEvent ( pFnCastLeaguePeriod, &CastLeaguePeriod_Parms, NULL );

	return CastLeaguePeriod_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLeagueParticipants
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLeagueParticipants ( int I )
{
	static UFunction* pFnCastLeagueParticipants = NULL;

	if ( ! pFnCastLeagueParticipants )
		pFnCastLeagueParticipants = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLeagueParticipants" );

	UPhysicalMaterialSDD_execCastLeagueParticipants_Parms CastLeagueParticipants_Parms;
	CastLeagueParticipants_Parms.I = I;

	this->ProcessEvent ( pFnCastLeagueParticipants, &CastLeagueParticipants_Parms, NULL );

	return CastLeagueParticipants_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLeagueEntity
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLeagueEntity ( int I )
{
	static UFunction* pFnCastLeagueEntity = NULL;

	if ( ! pFnCastLeagueEntity )
		pFnCastLeagueEntity = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLeagueEntity" );

	UPhysicalMaterialSDD_execCastLeagueEntity_Parms CastLeagueEntity_Parms;
	CastLeagueEntity_Parms.I = I;

	this->ProcessEvent ( pFnCastLeagueEntity, &CastLeagueEntity_Parms, NULL );

	return CastLeagueEntity_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLeagueCycle
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLeagueCycle ( int I )
{
	static UFunction* pFnCastLeagueCycle = NULL;

	if ( ! pFnCastLeagueCycle )
		pFnCastLeagueCycle = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLeagueCycle" );

	UPhysicalMaterialSDD_execCastLeagueCycle_Parms CastLeagueCycle_Parms;
	CastLeagueCycle_Parms.I = I;

	this->ProcessEvent ( pFnCastLeagueCycle, &CastLeagueCycle_Parms, NULL );

	return CastLeagueCycle_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastLeagueActivity
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastLeagueActivity ( int I )
{
	static UFunction* pFnCastLeagueActivity = NULL;

	if ( ! pFnCastLeagueActivity )
		pFnCastLeagueActivity = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastLeagueActivity" );

	UPhysicalMaterialSDD_execCastLeagueActivity_Parms CastLeagueActivity_Parms;
	CastLeagueActivity_Parms.I = I;

	this->ProcessEvent ( pFnCastLeagueActivity, &CastLeagueActivity_Parms, NULL );

	return CastLeagueActivity_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastInventoryItemSubCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastInventoryItemSubCategory ( int I )
{
	static UFunction* pFnCastInventoryItemSubCategory = NULL;

	if ( ! pFnCastInventoryItemSubCategory )
		pFnCastInventoryItemSubCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastInventoryItemSubCategory" );

	UPhysicalMaterialSDD_execCastInventoryItemSubCategory_Parms CastInventoryItemSubCategory_Parms;
	CastInventoryItemSubCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastInventoryItemSubCategory, &CastInventoryItemSubCategory_Parms, NULL );

	return CastInventoryItemSubCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastInventoryItemCategoryLimited
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastInventoryItemCategoryLimited ( int I )
{
	static UFunction* pFnCastInventoryItemCategoryLimited = NULL;

	if ( ! pFnCastInventoryItemCategoryLimited )
		pFnCastInventoryItemCategoryLimited = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastInventoryItemCategoryLimited" );

	UPhysicalMaterialSDD_execCastInventoryItemCategoryLimited_Parms CastInventoryItemCategoryLimited_Parms;
	CastInventoryItemCategoryLimited_Parms.I = I;

	this->ProcessEvent ( pFnCastInventoryItemCategoryLimited, &CastInventoryItemCategoryLimited_Parms, NULL );

	return CastInventoryItemCategoryLimited_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastInventoryItemCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastInventoryItemCategory ( int I )
{
	static UFunction* pFnCastInventoryItemCategory = NULL;

	if ( ! pFnCastInventoryItemCategory )
		pFnCastInventoryItemCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastInventoryItemCategory" );

	UPhysicalMaterialSDD_execCastInventoryItemCategory_Parms CastInventoryItemCategory_Parms;
	CastInventoryItemCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastInventoryItemCategory, &CastInventoryItemCategory_Parms, NULL );

	return CastInventoryItemCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastInteractiveActorType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastInteractiveActorType ( int I )
{
	static UFunction* pFnCastInteractiveActorType = NULL;

	if ( ! pFnCastInteractiveActorType )
		pFnCastInteractiveActorType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastInteractiveActorType" );

	UPhysicalMaterialSDD_execCastInteractiveActorType_Parms CastInteractiveActorType_Parms;
	CastInteractiveActorType_Parms.I = I;

	this->ProcessEvent ( pFnCastInteractiveActorType, &CastInteractiveActorType_Parms, NULL );

	return CastInteractiveActorType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastInteractiveActorCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastInteractiveActorCategory ( int I )
{
	static UFunction* pFnCastInteractiveActorCategory = NULL;

	if ( ! pFnCastInteractiveActorCategory )
		pFnCastInteractiveActorCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastInteractiveActorCategory" );

	UPhysicalMaterialSDD_execCastInteractiveActorCategory_Parms CastInteractiveActorCategory_Parms;
	CastInteractiveActorCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastInteractiveActorCategory, &CastInteractiveActorCategory_Parms, NULL );

	return CastInteractiveActorCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDZoneNotifier
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDZoneNotifier ( int I )
{
	static UFunction* pFnCastHUDZoneNotifier = NULL;

	if ( ! pFnCastHUDZoneNotifier )
		pFnCastHUDZoneNotifier = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDZoneNotifier" );

	UPhysicalMaterialSDD_execCastHUDZoneNotifier_Parms CastHUDZoneNotifier_Parms;
	CastHUDZoneNotifier_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDZoneNotifier, &CastHUDZoneNotifier_Parms, NULL );

	return CastHUDZoneNotifier_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDWSCharInfo
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDWSCharInfo ( int I )
{
	static UFunction* pFnCastHUDWSCharInfo = NULL;

	if ( ! pFnCastHUDWSCharInfo )
		pFnCastHUDWSCharInfo = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDWSCharInfo" );

	UPhysicalMaterialSDD_execCastHUDWSCharInfo_Parms CastHUDWSCharInfo_Parms;
	CastHUDWSCharInfo_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDWSCharInfo, &CastHUDWSCharInfo_Parms, NULL );

	return CastHUDWSCharInfo_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDReticule
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDReticule ( int I )
{
	static UFunction* pFnCastHUDReticule = NULL;

	if ( ! pFnCastHUDReticule )
		pFnCastHUDReticule = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDReticule" );

	UPhysicalMaterialSDD_execCastHUDReticule_Parms CastHUDReticule_Parms;
	CastHUDReticule_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDReticule, &CastHUDReticule_Parms, NULL );

	return CastHUDReticule_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDPopUpItemRule
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDPopUpItemRule ( int I )
{
	static UFunction* pFnCastHUDPopUpItemRule = NULL;

	if ( ! pFnCastHUDPopUpItemRule )
		pFnCastHUDPopUpItemRule = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDPopUpItemRule" );

	UPhysicalMaterialSDD_execCastHUDPopUpItemRule_Parms CastHUDPopUpItemRule_Parms;
	CastHUDPopUpItemRule_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDPopUpItemRule, &CastHUDPopUpItemRule_Parms, NULL );

	return CastHUDPopUpItemRule_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDMessageType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDMessageType ( int I )
{
	static UFunction* pFnCastHUDMessageType = NULL;

	if ( ! pFnCastHUDMessageType )
		pFnCastHUDMessageType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDMessageType" );

	UPhysicalMaterialSDD_execCastHUDMessageType_Parms CastHUDMessageType_Parms;
	CastHUDMessageType_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDMessageType, &CastHUDMessageType_Parms, NULL );

	return CastHUDMessageType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDMessageRank
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDMessageRank ( int I )
{
	static UFunction* pFnCastHUDMessageRank = NULL;

	if ( ! pFnCastHUDMessageRank )
		pFnCastHUDMessageRank = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDMessageRank" );

	UPhysicalMaterialSDD_execCastHUDMessageRank_Parms CastHUDMessageRank_Parms;
	CastHUDMessageRank_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDMessageRank, &CastHUDMessageRank_Parms, NULL );

	return CastHUDMessageRank_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDMarkerUsage
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDMarkerUsage ( int I )
{
	static UFunction* pFnCastHUDMarkerUsage = NULL;

	if ( ! pFnCastHUDMarkerUsage )
		pFnCastHUDMarkerUsage = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDMarkerUsage" );

	UPhysicalMaterialSDD_execCastHUDMarkerUsage_Parms CastHUDMarkerUsage_Parms;
	CastHUDMarkerUsage_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDMarkerUsage, &CastHUDMarkerUsage_Parms, NULL );

	return CastHUDMarkerUsage_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDMarkerState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDMarkerState ( int I )
{
	static UFunction* pFnCastHUDMarkerState = NULL;

	if ( ! pFnCastHUDMarkerState )
		pFnCastHUDMarkerState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDMarkerState" );

	UPhysicalMaterialSDD_execCastHUDMarkerState_Parms CastHUDMarkerState_Parms;
	CastHUDMarkerState_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDMarkerState, &CastHUDMarkerState_Parms, NULL );

	return CastHUDMarkerState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDMarkerCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDMarkerCategory ( int I )
{
	static UFunction* pFnCastHUDMarkerCategory = NULL;

	if ( ! pFnCastHUDMarkerCategory )
		pFnCastHUDMarkerCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDMarkerCategory" );

	UPhysicalMaterialSDD_execCastHUDMarkerCategory_Parms CastHUDMarkerCategory_Parms;
	CastHUDMarkerCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDMarkerCategory, &CastHUDMarkerCategory_Parms, NULL );

	return CastHUDMarkerCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDInfoBrowser
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDInfoBrowser ( int I )
{
	static UFunction* pFnCastHUDInfoBrowser = NULL;

	if ( ! pFnCastHUDInfoBrowser )
		pFnCastHUDInfoBrowser = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDInfoBrowser" );

	UPhysicalMaterialSDD_execCastHUDInfoBrowser_Parms CastHUDInfoBrowser_Parms;
	CastHUDInfoBrowser_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDInfoBrowser, &CastHUDInfoBrowser_Parms, NULL );

	return CastHUDInfoBrowser_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHudGroupState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHudGroupState ( int I )
{
	static UFunction* pFnCastHudGroupState = NULL;

	if ( ! pFnCastHudGroupState )
		pFnCastHudGroupState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHudGroupState" );

	UPhysicalMaterialSDD_execCastHudGroupState_Parms CastHudGroupState_Parms;
	CastHudGroupState_Parms.I = I;

	this->ProcessEvent ( pFnCastHudGroupState, &CastHudGroupState_Parms, NULL );

	return CastHudGroupState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDConstantBool
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDConstantBool ( int I )
{
	static UFunction* pFnCastHUDConstantBool = NULL;

	if ( ! pFnCastHUDConstantBool )
		pFnCastHUDConstantBool = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDConstantBool" );

	UPhysicalMaterialSDD_execCastHUDConstantBool_Parms CastHUDConstantBool_Parms;
	CastHUDConstantBool_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDConstantBool, &CastHUDConstantBool_Parms, NULL );

	return CastHUDConstantBool_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDConstant ( int I )
{
	static UFunction* pFnCastHUDConstant = NULL;

	if ( ! pFnCastHUDConstant )
		pFnCastHUDConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDConstant" );

	UPhysicalMaterialSDD_execCastHUDConstant_Parms CastHUDConstant_Parms;
	CastHUDConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDConstant, &CastHUDConstant_Parms, NULL );

	return CastHUDConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHUDCeremonyMsgType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHUDCeremonyMsgType ( int I )
{
	static UFunction* pFnCastHUDCeremonyMsgType = NULL;

	if ( ! pFnCastHUDCeremonyMsgType )
		pFnCastHUDCeremonyMsgType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHUDCeremonyMsgType" );

	UPhysicalMaterialSDD_execCastHUDCeremonyMsgType_Parms CastHUDCeremonyMsgType_Parms;
	CastHUDCeremonyMsgType_Parms.I = I;

	this->ProcessEvent ( pFnCastHUDCeremonyMsgType, &CastHUDCeremonyMsgType_Parms, NULL );

	return CastHUDCeremonyMsgType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHostingConfigFileType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHostingConfigFileType ( int I )
{
	static UFunction* pFnCastHostingConfigFileType = NULL;

	if ( ! pFnCastHostingConfigFileType )
		pFnCastHostingConfigFileType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHostingConfigFileType" );

	UPhysicalMaterialSDD_execCastHostingConfigFileType_Parms CastHostingConfigFileType_Parms;
	CastHostingConfigFileType_Parms.I = I;

	this->ProcessEvent ( pFnCastHostingConfigFileType, &CastHostingConfigFileType_Parms, NULL );

	return CastHostingConfigFileType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHostingConfigFileCharacterPersistentId
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHostingConfigFileCharacterPersistentId ( int I )
{
	static UFunction* pFnCastHostingConfigFileCharacterPersistentId = NULL;

	if ( ! pFnCastHostingConfigFileCharacterPersistentId )
		pFnCastHostingConfigFileCharacterPersistentId = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHostingConfigFileCharacterPersistentId" );

	UPhysicalMaterialSDD_execCastHostingConfigFileCharacterPersistentId_Parms CastHostingConfigFileCharacterPersistentId_Parms;
	CastHostingConfigFileCharacterPersistentId_Parms.I = I;

	this->ProcessEvent ( pFnCastHostingConfigFileCharacterPersistentId, &CastHostingConfigFileCharacterPersistentId_Parms, NULL );

	return CastHostingConfigFileCharacterPersistentId_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHostingConfigFileAccountPersistentId
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHostingConfigFileAccountPersistentId ( int I )
{
	static UFunction* pFnCastHostingConfigFileAccountPersistentId = NULL;

	if ( ! pFnCastHostingConfigFileAccountPersistentId )
		pFnCastHostingConfigFileAccountPersistentId = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHostingConfigFileAccountPersistentId" );

	UPhysicalMaterialSDD_execCastHostingConfigFileAccountPersistentId_Parms CastHostingConfigFileAccountPersistentId_Parms;
	CastHostingConfigFileAccountPersistentId_Parms.I = I;

	this->ProcessEvent ( pFnCastHostingConfigFileAccountPersistentId, &CastHostingConfigFileAccountPersistentId_Parms, NULL );

	return CastHostingConfigFileAccountPersistentId_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHostingConfigFile
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHostingConfigFile ( int I )
{
	static UFunction* pFnCastHostingConfigFile = NULL;

	if ( ! pFnCastHostingConfigFile )
		pFnCastHostingConfigFile = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHostingConfigFile" );

	UPhysicalMaterialSDD_execCastHostingConfigFile_Parms CastHostingConfigFile_Parms;
	CastHostingConfigFile_Parms.I = I;

	this->ProcessEvent ( pFnCastHostingConfigFile, &CastHostingConfigFile_Parms, NULL );

	return CastHostingConfigFile_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHeatFunctionality
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHeatFunctionality ( int I )
{
	static UFunction* pFnCastHeatFunctionality = NULL;

	if ( ! pFnCastHeatFunctionality )
		pFnCastHeatFunctionality = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHeatFunctionality" );

	UPhysicalMaterialSDD_execCastHeatFunctionality_Parms CastHeatFunctionality_Parms;
	CastHeatFunctionality_Parms.I = I;

	this->ProcessEvent ( pFnCastHeatFunctionality, &CastHeatFunctionality_Parms, NULL );

	return CastHeatFunctionality_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastHeatConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastHeatConstant ( int I )
{
	static UFunction* pFnCastHeatConstant = NULL;

	if ( ! pFnCastHeatConstant )
		pFnCastHeatConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastHeatConstant" );

	UPhysicalMaterialSDD_execCastHeatConstant_Parms CastHeatConstant_Parms;
	CastHeatConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastHeatConstant, &CastHeatConstant_Parms, NULL );

	return CastHeatConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastH2HAttackDir
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastH2HAttackDir ( int I )
{
	static UFunction* pFnCastH2HAttackDir = NULL;

	if ( ! pFnCastH2HAttackDir )
		pFnCastH2HAttackDir = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastH2HAttackDir" );

	UPhysicalMaterialSDD_execCastH2HAttackDir_Parms CastH2HAttackDir_Parms;
	CastH2HAttackDir_Parms.I = I;

	this->ProcessEvent ( pFnCastH2HAttackDir, &CastH2HAttackDir_Parms, NULL );

	return CastH2HAttackDir_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGraffitiInteractionType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGraffitiInteractionType ( int I )
{
	static UFunction* pFnCastGraffitiInteractionType = NULL;

	if ( ! pFnCastGraffitiInteractionType )
		pFnCastGraffitiInteractionType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGraffitiInteractionType" );

	UPhysicalMaterialSDD_execCastGraffitiInteractionType_Parms CastGraffitiInteractionType_Parms;
	CastGraffitiInteractionType_Parms.I = I;

	this->ProcessEvent ( pFnCastGraffitiInteractionType, &CastGraffitiInteractionType_Parms, NULL );

	return CastGraffitiInteractionType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGenericVFXEvent
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGenericVFXEvent ( int I )
{
	static UFunction* pFnCastGenericVFXEvent = NULL;

	if ( ! pFnCastGenericVFXEvent )
		pFnCastGenericVFXEvent = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGenericVFXEvent" );

	UPhysicalMaterialSDD_execCastGenericVFXEvent_Parms CastGenericVFXEvent_Parms;
	CastGenericVFXEvent_Parms.I = I;

	this->ProcessEvent ( pFnCastGenericVFXEvent, &CastGenericVFXEvent_Parms, NULL );

	return CastGenericVFXEvent_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGameplayVehicleHealthRange
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGameplayVehicleHealthRange ( int I )
{
	static UFunction* pFnCastGameplayVehicleHealthRange = NULL;

	if ( ! pFnCastGameplayVehicleHealthRange )
		pFnCastGameplayVehicleHealthRange = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGameplayVehicleHealthRange" );

	UPhysicalMaterialSDD_execCastGameplayVehicleHealthRange_Parms CastGameplayVehicleHealthRange_Parms;
	CastGameplayVehicleHealthRange_Parms.I = I;

	this->ProcessEvent ( pFnCastGameplayVehicleHealthRange, &CastGameplayVehicleHealthRange_Parms, NULL );

	return CastGameplayVehicleHealthRange_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGameplayState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGameplayState ( int I )
{
	static UFunction* pFnCastGameplayState = NULL;

	if ( ! pFnCastGameplayState )
		pFnCastGameplayState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGameplayState" );

	UPhysicalMaterialSDD_execCastGameplayState_Parms CastGameplayState_Parms;
	CastGameplayState_Parms.I = I;

	this->ProcessEvent ( pFnCastGameplayState, &CastGameplayState_Parms, NULL );

	return CastGameplayState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGameplayObjectFixed
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGameplayObjectFixed ( int I )
{
	static UFunction* pFnCastGameplayObjectFixed = NULL;

	if ( ! pFnCastGameplayObjectFixed )
		pFnCastGameplayObjectFixed = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGameplayObjectFixed" );

	UPhysicalMaterialSDD_execCastGameplayObjectFixed_Parms CastGameplayObjectFixed_Parms;
	CastGameplayObjectFixed_Parms.I = I;

	this->ProcessEvent ( pFnCastGameplayObjectFixed, &CastGameplayObjectFixed_Parms, NULL );

	return CastGameplayObjectFixed_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGameplayEventMutuallyExclusiveGroup
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGameplayEventMutuallyExclusiveGroup ( int I )
{
	static UFunction* pFnCastGameplayEventMutuallyExclusiveGroup = NULL;

	if ( ! pFnCastGameplayEventMutuallyExclusiveGroup )
		pFnCastGameplayEventMutuallyExclusiveGroup = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGameplayEventMutuallyExclusiveGroup" );

	UPhysicalMaterialSDD_execCastGameplayEventMutuallyExclusiveGroup_Parms CastGameplayEventMutuallyExclusiveGroup_Parms;
	CastGameplayEventMutuallyExclusiveGroup_Parms.I = I;

	this->ProcessEvent ( pFnCastGameplayEventMutuallyExclusiveGroup, &CastGameplayEventMutuallyExclusiveGroup_Parms, NULL );

	return CastGameplayEventMutuallyExclusiveGroup_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGameplayEventCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGameplayEventCategory ( int I )
{
	static UFunction* pFnCastGameplayEventCategory = NULL;

	if ( ! pFnCastGameplayEventCategory )
		pFnCastGameplayEventCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGameplayEventCategory" );

	UPhysicalMaterialSDD_execCastGameplayEventCategory_Parms CastGameplayEventCategory_Parms;
	CastGameplayEventCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastGameplayEventCategory, &CastGameplayEventCategory_Parms, NULL );

	return CastGameplayEventCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastGameplayEvent_VehicleHealth
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastGameplayEvent_VehicleHealth ( int I )
{
	static UFunction* pFnCastGameplayEvent_VehicleHealth = NULL;

	if ( ! pFnCastGameplayEvent_VehicleHealth )
		pFnCastGameplayEvent_VehicleHealth = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastGameplayEvent_VehicleHealth" );

	UPhysicalMaterialSDD_execCastGameplayEvent_VehicleHealth_Parms CastGameplayEvent_VehicleHealth_Parms;
	CastGameplayEvent_VehicleHealth_Parms.I = I;

	this->ProcessEvent ( pFnCastGameplayEvent_VehicleHealth, &CastGameplayEvent_VehicleHealth_Parms, NULL );

	return CastGameplayEvent_VehicleHealth_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastFXMaterialImpact
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastFXMaterialImpact ( int I )
{
	static UFunction* pFnCastFXMaterialImpact = NULL;

	if ( ! pFnCastFXMaterialImpact )
		pFnCastFXMaterialImpact = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastFXMaterialImpact" );

	UPhysicalMaterialSDD_execCastFXMaterialImpact_Parms CastFXMaterialImpact_Parms;
	CastFXMaterialImpact_Parms.I = I;

	this->ProcessEvent ( pFnCastFXMaterialImpact, &CastFXMaterialImpact_Parms, NULL );

	return CastFXMaterialImpact_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastFireOffset
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastFireOffset ( int I )
{
	static UFunction* pFnCastFireOffset = NULL;

	if ( ! pFnCastFireOffset )
		pFnCastFireOffset = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastFireOffset" );

	UPhysicalMaterialSDD_execCastFireOffset_Parms CastFireOffset_Parms;
	CastFireOffset_Parms.I = I;

	this->ProcessEvent ( pFnCastFireOffset, &CastFireOffset_Parms, NULL );

	return CastFireOffset_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastFeedbackMessage
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastFeedbackMessage ( int I )
{
	static UFunction* pFnCastFeedbackMessage = NULL;

	if ( ! pFnCastFeedbackMessage )
		pFnCastFeedbackMessage = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastFeedbackMessage" );

	UPhysicalMaterialSDD_execCastFeedbackMessage_Parms CastFeedbackMessage_Parms;
	CastFeedbackMessage_Parms.I = I;

	this->ProcessEvent ( pFnCastFeedbackMessage, &CastFeedbackMessage_Parms, NULL );

	return CastFeedbackMessage_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastFaction
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastFaction ( int I )
{
	static UFunction* pFnCastFaction = NULL;

	if ( ! pFnCastFaction )
		pFnCastFaction = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastFaction" );

	UPhysicalMaterialSDD_execCastFaction_Parms CastFaction_Parms;
	CastFaction_Parms.I = I;

	this->ProcessEvent ( pFnCastFaction, &CastFaction_Parms, NULL );

	return CastFaction_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastFacialHairRandomGeneration
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastFacialHairRandomGeneration ( int I )
{
	static UFunction* pFnCastFacialHairRandomGeneration = NULL;

	if ( ! pFnCastFacialHairRandomGeneration )
		pFnCastFacialHairRandomGeneration = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastFacialHairRandomGeneration" );

	UPhysicalMaterialSDD_execCastFacialHairRandomGeneration_Parms CastFacialHairRandomGeneration_Parms;
	CastFacialHairRandomGeneration_Parms.I = I;

	this->ProcessEvent ( pFnCastFacialHairRandomGeneration, &CastFacialHairRandomGeneration_Parms, NULL );

	return CastFacialHairRandomGeneration_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastErrorCode
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastErrorCode ( int I )
{
	static UFunction* pFnCastErrorCode = NULL;

	if ( ! pFnCastErrorCode )
		pFnCastErrorCode = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastErrorCode" );

	UPhysicalMaterialSDD_execCastErrorCode_Parms CastErrorCode_Parms;
	CastErrorCode_Parms.I = I;

	this->ProcessEvent ( pFnCastErrorCode, &CastErrorCode_Parms, NULL );

	return CastErrorCode_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastEncumbrance
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastEncumbrance ( int I )
{
	static UFunction* pFnCastEncumbrance = NULL;

	if ( ! pFnCastEncumbrance )
		pFnCastEncumbrance = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastEncumbrance" );

	UPhysicalMaterialSDD_execCastEncumbrance_Parms CastEncumbrance_Parms;
	CastEncumbrance_Parms.I = I;

	this->ProcessEvent ( pFnCastEncumbrance, &CastEncumbrance_Parms, NULL );

	return CastEncumbrance_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDistrictTypeInfo
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDistrictTypeInfo ( int I )
{
	static UFunction* pFnCastDistrictTypeInfo = NULL;

	if ( ! pFnCastDistrictTypeInfo )
		pFnCastDistrictTypeInfo = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDistrictTypeInfo" );

	UPhysicalMaterialSDD_execCastDistrictTypeInfo_Parms CastDistrictTypeInfo_Parms;
	CastDistrictTypeInfo_Parms.I = I;

	this->ProcessEvent ( pFnCastDistrictTypeInfo, &CastDistrictTypeInfo_Parms, NULL );

	return CastDistrictTypeInfo_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDistrictFirstEntry
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDistrictFirstEntry ( int I )
{
	static UFunction* pFnCastDistrictFirstEntry = NULL;

	if ( ! pFnCastDistrictFirstEntry )
		pFnCastDistrictFirstEntry = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDistrictFirstEntry" );

	UPhysicalMaterialSDD_execCastDistrictFirstEntry_Parms CastDistrictFirstEntry_Parms;
	CastDistrictFirstEntry_Parms.I = I;

	this->ProcessEvent ( pFnCastDistrictFirstEntry, &CastDistrictFirstEntry_Parms, NULL );

	return CastDistrictFirstEntry_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDisplayPointType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDisplayPointType ( int I )
{
	static UFunction* pFnCastDisplayPointType = NULL;

	if ( ! pFnCastDisplayPointType )
		pFnCastDisplayPointType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDisplayPointType" );

	UPhysicalMaterialSDD_execCastDisplayPointType_Parms CastDisplayPointType_Parms;
	CastDisplayPointType_Parms.I = I;

	this->ProcessEvent ( pFnCastDisplayPointType, &CastDisplayPointType_Parms, NULL );

	return CastDisplayPointType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDisplayPointActivationType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDisplayPointActivationType ( int I )
{
	static UFunction* pFnCastDisplayPointActivationType = NULL;

	if ( ! pFnCastDisplayPointActivationType )
		pFnCastDisplayPointActivationType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDisplayPointActivationType" );

	UPhysicalMaterialSDD_execCastDisplayPointActivationType_Parms CastDisplayPointActivationType_Parms;
	CastDisplayPointActivationType_Parms.I = I;

	this->ProcessEvent ( pFnCastDisplayPointActivationType, &CastDisplayPointActivationType_Parms, NULL );

	return CastDisplayPointActivationType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDirection
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDirection ( int I )
{
	static UFunction* pFnCastDirection = NULL;

	if ( ! pFnCastDirection )
		pFnCastDirection = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDirection" );

	UPhysicalMaterialSDD_execCastDirection_Parms CastDirection_Parms;
	CastDirection_Parms.I = I;

	this->ProcessEvent ( pFnCastDirection, &CastDirection_Parms, NULL );

	return CastDirection_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDifficultyRating
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDifficultyRating ( int I )
{
	static UFunction* pFnCastDifficultyRating = NULL;

	if ( ! pFnCastDifficultyRating )
		pFnCastDifficultyRating = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDifficultyRating" );

	UPhysicalMaterialSDD_execCastDifficultyRating_Parms CastDifficultyRating_Parms;
	CastDifficultyRating_Parms.I = I;

	this->ProcessEvent ( pFnCastDifficultyRating, &CastDifficultyRating_Parms, NULL );

	return CastDifficultyRating_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDesignerConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDesignerConstant ( int I )
{
	static UFunction* pFnCastDesignerConstant = NULL;

	if ( ! pFnCastDesignerConstant )
		pFnCastDesignerConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDesignerConstant" );

	UPhysicalMaterialSDD_execCastDesignerConstant_Parms CastDesignerConstant_Parms;
	CastDesignerConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastDesignerConstant, &CastDesignerConstant_Parms, NULL );

	return CastDesignerConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastDeployedUsableArray
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastDeployedUsableArray ( int I )
{
	static UFunction* pFnCastDeployedUsableArray = NULL;

	if ( ! pFnCastDeployedUsableArray )
		pFnCastDeployedUsableArray = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastDeployedUsableArray" );

	UPhysicalMaterialSDD_execCastDeployedUsableArray_Parms CastDeployedUsableArray_Parms;
	CastDeployedUsableArray_Parms.I = I;

	this->ProcessEvent ( pFnCastDeployedUsableArray, &CastDeployedUsableArray_Parms, NULL );

	return CastDeployedUsableArray_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCustomisedAssetPriority
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCustomisedAssetPriority ( int I )
{
	static UFunction* pFnCastCustomisedAssetPriority = NULL;

	if ( ! pFnCastCustomisedAssetPriority )
		pFnCastCustomisedAssetPriority = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCustomisedAssetPriority" );

	UPhysicalMaterialSDD_execCastCustomisedAssetPriority_Parms CastCustomisedAssetPriority_Parms;
	CastCustomisedAssetPriority_Parms.I = I;

	this->ProcessEvent ( pFnCastCustomisedAssetPriority, &CastCustomisedAssetPriority_Parms, NULL );

	return CastCustomisedAssetPriority_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAType ( int I )
{
	static UFunction* pFnCastCSAType = NULL;

	if ( ! pFnCastCSAType )
		pFnCastCSAType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAType" );

	UPhysicalMaterialSDD_execCastCSAType_Parms CastCSAType_Parms;
	CastCSAType_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAType, &CastCSAType_Parms, NULL );

	return CastCSAType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAState ( int I )
{
	static UFunction* pFnCastCSAState = NULL;

	if ( ! pFnCastCSAState )
		pFnCastCSAState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAState" );

	UPhysicalMaterialSDD_execCastCSAState_Parms CastCSAState_Parms;
	CastCSAState_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAState, &CastCSAState_Parms, NULL );

	return CastCSAState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSALineCheckType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSALineCheckType ( int I )
{
	static UFunction* pFnCastCSALineCheckType = NULL;

	if ( ! pFnCastCSALineCheckType )
		pFnCastCSALineCheckType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSALineCheckType" );

	UPhysicalMaterialSDD_execCastCSALineCheckType_Parms CastCSALineCheckType_Parms;
	CastCSALineCheckType_Parms.I = I;

	this->ProcessEvent ( pFnCastCSALineCheckType, &CastCSALineCheckType_Parms, NULL );

	return CastCSALineCheckType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAInputType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAInputType ( int I )
{
	static UFunction* pFnCastCSAInputType = NULL;

	if ( ! pFnCastCSAInputType )
		pFnCastCSAInputType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAInputType" );

	UPhysicalMaterialSDD_execCastCSAInputType_Parms CastCSAInputType_Parms;
	CastCSAInputType_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAInputType, &CastCSAInputType_Parms, NULL );

	return CastCSAInputType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAEndPoint
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAEndPoint ( int I )
{
	static UFunction* pFnCastCSAEndPoint = NULL;

	if ( ! pFnCastCSAEndPoint )
		pFnCastCSAEndPoint = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAEndPoint" );

	UPhysicalMaterialSDD_execCastCSAEndPoint_Parms CastCSAEndPoint_Parms;
	CastCSAEndPoint_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAEndPoint, &CastCSAEndPoint_Parms, NULL );

	return CastCSAEndPoint_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAAutoRouteType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAAutoRouteType ( int I )
{
	static UFunction* pFnCastCSAAutoRouteType = NULL;

	if ( ! pFnCastCSAAutoRouteType )
		pFnCastCSAAutoRouteType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAAutoRouteType" );

	UPhysicalMaterialSDD_execCastCSAAutoRouteType_Parms CastCSAAutoRouteType_Parms;
	CastCSAAutoRouteType_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAAutoRouteType, &CastCSAAutoRouteType_Parms, NULL );

	return CastCSAAutoRouteType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAAnimType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAAnimType ( int I )
{
	static UFunction* pFnCastCSAAnimType = NULL;

	if ( ! pFnCastCSAAnimType )
		pFnCastCSAAnimType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAAnimType" );

	UPhysicalMaterialSDD_execCastCSAAnimType_Parms CastCSAAnimType_Parms;
	CastCSAAnimType_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAAnimType, &CastCSAAnimType_Parms, NULL );

	return CastCSAAnimType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAAnimEvent
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAAnimEvent ( int I )
{
	static UFunction* pFnCastCSAAnimEvent = NULL;

	if ( ! pFnCastCSAAnimEvent )
		pFnCastCSAAnimEvent = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAAnimEvent" );

	UPhysicalMaterialSDD_execCastCSAAnimEvent_Parms CastCSAAnimEvent_Parms;
	CastCSAAnimEvent_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAAnimEvent, &CastCSAAnimEvent_Parms, NULL );

	return CastCSAAnimEvent_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSAAlignmentType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSAAlignmentType ( int I )
{
	static UFunction* pFnCastCSAAlignmentType = NULL;

	if ( ! pFnCastCSAAlignmentType )
		pFnCastCSAAlignmentType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSAAlignmentType" );

	UPhysicalMaterialSDD_execCastCSAAlignmentType_Parms CastCSAAlignmentType_Parms;
	CastCSAAlignmentType_Parms.I = I;

	this->ProcessEvent ( pFnCastCSAAlignmentType, &CastCSAAlignmentType_Parms, NULL );

	return CastCSAAlignmentType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCSA_IATState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCSA_IATState ( int I )
{
	static UFunction* pFnCastCSA_IATState = NULL;

	if ( ! pFnCastCSA_IATState )
		pFnCastCSA_IATState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCSA_IATState" );

	UPhysicalMaterialSDD_execCastCSA_IATState_Parms CastCSA_IATState_Parms;
	CastCSA_IATState_Parms.I = I;

	this->ProcessEvent ( pFnCastCSA_IATState, &CastCSA_IATState_Parms, NULL );

	return CastCSA_IATState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCrimeType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCrimeType ( int I )
{
	static UFunction* pFnCastCrimeType = NULL;

	if ( ! pFnCastCrimeType )
		pFnCastCrimeType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCrimeType" );

	UPhysicalMaterialSDD_execCastCrimeType_Parms CastCrimeType_Parms;
	CastCrimeType_Parms.I = I;

	this->ProcessEvent ( pFnCastCrimeType, &CastCrimeType_Parms, NULL );

	return CastCrimeType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCrimeTargetZone
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCrimeTargetZone ( int I )
{
	static UFunction* pFnCastCrimeTargetZone = NULL;

	if ( ! pFnCastCrimeTargetZone )
		pFnCastCrimeTargetZone = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCrimeTargetZone" );

	UPhysicalMaterialSDD_execCastCrimeTargetZone_Parms CastCrimeTargetZone_Parms;
	CastCrimeTargetZone_Parms.I = I;

	this->ProcessEvent ( pFnCastCrimeTargetZone, &CastCrimeTargetZone_Parms, NULL );

	return CastCrimeTargetZone_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCrimeTargetType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCrimeTargetType ( int I )
{
	static UFunction* pFnCastCrimeTargetType = NULL;

	if ( ! pFnCastCrimeTargetType )
		pFnCastCrimeTargetType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCrimeTargetType" );

	UPhysicalMaterialSDD_execCastCrimeTargetType_Parms CastCrimeTargetType_Parms;
	CastCrimeTargetType_Parms.I = I;

	this->ProcessEvent ( pFnCastCrimeTargetType, &CastCrimeTargetType_Parms, NULL );

	return CastCrimeTargetType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCrimeTargetEnvironmental
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCrimeTargetEnvironmental ( int I )
{
	static UFunction* pFnCastCrimeTargetEnvironmental = NULL;

	if ( ! pFnCastCrimeTargetEnvironmental )
		pFnCastCrimeTargetEnvironmental = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCrimeTargetEnvironmental" );

	UPhysicalMaterialSDD_execCastCrimeTargetEnvironmental_Parms CastCrimeTargetEnvironmental_Parms;
	CastCrimeTargetEnvironmental_Parms.I = I;

	this->ProcessEvent ( pFnCastCrimeTargetEnvironmental, &CastCrimeTargetEnvironmental_Parms, NULL );

	return CastCrimeTargetEnvironmental_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCrimeTargetCategory
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCrimeTargetCategory ( int I )
{
	static UFunction* pFnCastCrimeTargetCategory = NULL;

	if ( ! pFnCastCrimeTargetCategory )
		pFnCastCrimeTargetCategory = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCrimeTargetCategory" );

	UPhysicalMaterialSDD_execCastCrimeTargetCategory_Parms CastCrimeTargetCategory_Parms;
	CastCrimeTargetCategory_Parms.I = I;

	this->ProcessEvent ( pFnCastCrimeTargetCategory, &CastCrimeTargetCategory_Parms, NULL );

	return CastCrimeTargetCategory_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastContextSensitiveActionBase
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastContextSensitiveActionBase ( int I )
{
	static UFunction* pFnCastContextSensitiveActionBase = NULL;

	if ( ! pFnCastContextSensitiveActionBase )
		pFnCastContextSensitiveActionBase = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastContextSensitiveActionBase" );

	UPhysicalMaterialSDD_execCastContextSensitiveActionBase_Parms CastContextSensitiveActionBase_Parms;
	CastContextSensitiveActionBase_Parms.I = I;

	this->ProcessEvent ( pFnCastContextSensitiveActionBase, &CastContextSensitiveActionBase_Parms, NULL );

	return CastContextSensitiveActionBase_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastContactType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastContactType ( int I )
{
	static UFunction* pFnCastContactType = NULL;

	if ( ! pFnCastContactType )
		pFnCastContactType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastContactType" );

	UPhysicalMaterialSDD_execCastContactType_Parms CastContactType_Parms;
	CastContactType_Parms.I = I;

	this->ProcessEvent ( pFnCastContactType, &CastContactType_Parms, NULL );

	return CastContactType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastClanRank
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastClanRank ( int I )
{
	static UFunction* pFnCastClanRank = NULL;

	if ( ! pFnCastClanRank )
		pFnCastClanRank = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastClanRank" );

	UPhysicalMaterialSDD_execCastClanRank_Parms CastClanRank_Parms;
	CastClanRank_Parms.I = I;

	this->ProcessEvent ( pFnCastClanRank, &CastClanRank_Parms, NULL );

	return CastClanRank_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastChatState
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastChatState ( int I )
{
	static UFunction* pFnCastChatState = NULL;

	if ( ! pFnCastChatState )
		pFnCastChatState = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastChatState" );

	UPhysicalMaterialSDD_execCastChatState_Parms CastChatState_Parms;
	CastChatState_Parms.I = I;

	this->ProcessEvent ( pFnCastChatState, &CastChatState_Parms, NULL );

	return CastChatState_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastChatConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastChatConstant ( int I )
{
	static UFunction* pFnCastChatConstant = NULL;

	if ( ! pFnCastChatConstant )
		pFnCastChatConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastChatConstant" );

	UPhysicalMaterialSDD_execCastChatConstant_Parms CastChatConstant_Parms;
	CastChatConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastChatConstant, &CastChatConstant_Parms, NULL );

	return CastChatConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCharacterVOIPStatus
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCharacterVOIPStatus ( int I )
{
	static UFunction* pFnCastCharacterVOIPStatus = NULL;

	if ( ! pFnCastCharacterVOIPStatus )
		pFnCastCharacterVOIPStatus = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCharacterVOIPStatus" );

	UPhysicalMaterialSDD_execCastCharacterVOIPStatus_Parms CastCharacterVOIPStatus_Parms;
	CastCharacterVOIPStatus_Parms.I = I;

	this->ProcessEvent ( pFnCastCharacterVOIPStatus, &CastCharacterVOIPStatus_Parms, NULL );

	return CastCharacterVOIPStatus_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCharacterStatus
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCharacterStatus ( int I )
{
	static UFunction* pFnCastCharacterStatus = NULL;

	if ( ! pFnCastCharacterStatus )
		pFnCastCharacterStatus = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCharacterStatus" );

	UPhysicalMaterialSDD_execCastCharacterStatus_Parms CastCharacterStatus_Parms;
	CastCharacterStatus_Parms.I = I;

	this->ProcessEvent ( pFnCastCharacterStatus, &CastCharacterStatus_Parms, NULL );

	return CastCharacterStatus_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCameraShakePresetExported
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCameraShakePresetExported ( int I )
{
	static UFunction* pFnCastCameraShakePresetExported = NULL;

	if ( ! pFnCastCameraShakePresetExported )
		pFnCastCameraShakePresetExported = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCameraShakePresetExported" );

	UPhysicalMaterialSDD_execCastCameraShakePresetExported_Parms CastCameraShakePresetExported_Parms;
	CastCameraShakePresetExported_Parms.I = I;

	this->ProcessEvent ( pFnCastCameraShakePresetExported, &CastCameraShakePresetExported_Parms, NULL );

	return CastCameraShakePresetExported_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCameraMode
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCameraMode ( int I )
{
	static UFunction* pFnCastCameraMode = NULL;

	if ( ! pFnCastCameraMode )
		pFnCastCameraMode = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCameraMode" );

	UPhysicalMaterialSDD_execCastCameraMode_Parms CastCameraMode_Parms;
	CastCameraMode_Parms.I = I;

	this->ProcessEvent ( pFnCastCameraMode, &CastCameraMode_Parms, NULL );

	return CastCameraMode_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastCameraConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastCameraConstant ( int I )
{
	static UFunction* pFnCastCameraConstant = NULL;

	if ( ! pFnCastCameraConstant )
		pFnCastCameraConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastCameraConstant" );

	UPhysicalMaterialSDD_execCastCameraConstant_Parms CastCameraConstant_Parms;
	CastCameraConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastCameraConstant, &CastCameraConstant_Parms, NULL );

	return CastCameraConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastAPBViewportType
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastAPBViewportType ( int I )
{
	static UFunction* pFnCastAPBViewportType = NULL;

	if ( ! pFnCastAPBViewportType )
		pFnCastAPBViewportType = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastAPBViewportType" );

	UPhysicalMaterialSDD_execCastAPBViewportType_Parms CastAPBViewportType_Parms;
	CastAPBViewportType_Parms.I = I;

	this->ProcessEvent ( pFnCastAPBViewportType, &CastAPBViewportType_Parms, NULL );

	return CastAPBViewportType_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastAPBPawnConstant
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastAPBPawnConstant ( int I )
{
	static UFunction* pFnCastAPBPawnConstant = NULL;

	if ( ! pFnCastAPBPawnConstant )
		pFnCastAPBPawnConstant = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastAPBPawnConstant" );

	UPhysicalMaterialSDD_execCastAPBPawnConstant_Parms CastAPBPawnConstant_Parms;
	CastAPBPawnConstant_Parms.I = I;

	this->ProcessEvent ( pFnCastAPBPawnConstant, &CastAPBPawnConstant_Parms, NULL );

	return CastAPBPawnConstant_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastActivityMessageScope
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastActivityMessageScope ( int I )
{
	static UFunction* pFnCastActivityMessageScope = NULL;

	if ( ! pFnCastActivityMessageScope )
		pFnCastActivityMessageScope = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastActivityMessageScope" );

	UPhysicalMaterialSDD_execCastActivityMessageScope_Parms CastActivityMessageScope_Parms;
	CastActivityMessageScope_Parms.I = I;

	this->ProcessEvent ( pFnCastActivityMessageScope, &CastActivityMessageScope_Parms, NULL );

	return CastActivityMessageScope_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastActivityMessageRelevance
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastActivityMessageRelevance ( int I )
{
	static UFunction* pFnCastActivityMessageRelevance = NULL;

	if ( ! pFnCastActivityMessageRelevance )
		pFnCastActivityMessageRelevance = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastActivityMessageRelevance" );

	UPhysicalMaterialSDD_execCastActivityMessageRelevance_Parms CastActivityMessageRelevance_Parms;
	CastActivityMessageRelevance_Parms.I = I;

	this->ProcessEvent ( pFnCastActivityMessageRelevance, &CastActivityMessageRelevance_Parms, NULL );

	return CastActivityMessageRelevance_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastActivityMessageParameterConversion
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastActivityMessageParameterConversion ( int I )
{
	static UFunction* pFnCastActivityMessageParameterConversion = NULL;

	if ( ! pFnCastActivityMessageParameterConversion )
		pFnCastActivityMessageParameterConversion = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastActivityMessageParameterConversion" );

	UPhysicalMaterialSDD_execCastActivityMessageParameterConversion_Parms CastActivityMessageParameterConversion_Parms;
	CastActivityMessageParameterConversion_Parms.I = I;

	this->ProcessEvent ( pFnCastActivityMessageParameterConversion, &CastActivityMessageParameterConversion_Parms, NULL );

	return CastActivityMessageParameterConversion_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastActivityMessageLocation
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastActivityMessageLocation ( int I )
{
	static UFunction* pFnCastActivityMessageLocation = NULL;

	if ( ! pFnCastActivityMessageLocation )
		pFnCastActivityMessageLocation = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastActivityMessageLocation" );

	UPhysicalMaterialSDD_execCastActivityMessageLocation_Parms CastActivityMessageLocation_Parms;
	CastActivityMessageLocation_Parms.I = I;

	this->ProcessEvent ( pFnCastActivityMessageLocation, &CastActivityMessageLocation_Parms, NULL );

	return CastActivityMessageLocation_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterialSDD.CastActivityMessageExclude
// [0x00022102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

unsigned char UPhysicalMaterialSDD::CastActivityMessageExclude ( int I )
{
	static UFunction* pFnCastActivityMessageExclude = NULL;

	if ( ! pFnCastActivityMessageExclude )
		pFnCastActivityMessageExclude = UObject::FindObject< UFunction > ( "Function Engine.PhysicalMaterialSDD.CastActivityMessageExclude" );

	UPhysicalMaterialSDD_execCastActivityMessageExclude_Parms CastActivityMessageExclude_Parms;
	CastActivityMessageExclude_Parms.I = I;

	this->ProcessEvent ( pFnCastActivityMessageExclude, &CastActivityMessageExclude_Parms, NULL );

	return CastActivityMessageExclude_Parms.ReturnValue;
};

// Function Engine.ScriptConsoleEntry.OnCreateChild
// [0x00020002] 
// Parameters infos:
// class UUIObject*               CreatedWidget                  ( CPF_Parm )
// class UUIScreenObject*         CreatorContainer               ( CPF_Parm )

void UScriptConsoleEntry::OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer )
{
	static UFunction* pFnOnCreateChild = NULL;

	if ( ! pFnOnCreateChild )
		pFnOnCreateChild = UObject::FindObject< UFunction > ( "Function Engine.ScriptConsoleEntry.OnCreateChild" );

	UScriptConsoleEntry_execOnCreateChild_Parms OnCreateChild_Parms;
	OnCreateChild_Parms.CreatedWidget = CreatedWidget;
	OnCreateChild_Parms.CreatorContainer = CreatorContainer;

	this->ProcessEvent ( pFnOnCreateChild, &OnCreateChild_Parms, NULL );
};

// Function Engine.ScriptConsoleEntry.SetValue
// [0x00020002] 
// Parameters infos:
// struct FString                 NewValue                       ( CPF_Parm | CPF_NeedCtorLink )

void UScriptConsoleEntry::SetValue ( struct FString NewValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function Engine.ScriptConsoleEntry.SetValue" );

	UScriptConsoleEntry_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewValue, &NewValue, 0xC );

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function Engine.ScriptConsoleEntry.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UScriptConsoleEntry::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.ScriptConsoleEntry.PostInitialize" );

	UScriptConsoleEntry_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.ScriptConsoleEntry.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UScriptConsoleEntry::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.ScriptConsoleEntry.Initialized" );

	UScriptConsoleEntry_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.SeqAct_ControlMovieTexture.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_ControlMovieTexture::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ControlMovieTexture.Activated" );

	USeqAct_ControlMovieTexture_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_ControlMovieTexture.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ControlMovieTexture::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_ControlMovieTexture.IsValidUISequenceObject" );

	USeqAct_ControlMovieTexture_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetVector.Activated
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void USeqAct_SetVector::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_SetVector.Activated" );

	USeqAct_SetVector_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_UpdateDynamicCover.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_UpdateDynamicCover::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function Engine.SeqAct_UpdateDynamicCover.GetObjClassVersion" );

	USeqAct_UpdateDynamicCover_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.Trigger_LOS.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATrigger_LOS::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function Engine.Trigger_LOS.Tick" );

	ATrigger_LOS_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.TriggeredPath.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ATriggeredPath::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = UObject::FindObject< UFunction > ( "Function Engine.TriggeredPath.SuggestMovePreparation" );

	ATriggeredPath_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATriggeredPath::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = UObject::FindObject< UFunction > ( "Function Engine.TriggeredPath.SpecialHandling" );

	ATriggeredPath_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ATriggeredPath::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function Engine.TriggeredPath.OnToggle" );

	ATriggeredPath_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.TriggerStreamingLevel.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATriggerStreamingLevel::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.TriggerStreamingLevel.Touch" );

	ATriggerStreamingLevel_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.UIAction_ActivatePage.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_ActivatePage::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ActivatePage.Activated" );

	UUIAction_ActivatePage_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_EnablePage.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_EnablePage::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_EnablePage.Activated" );

	UUIAction_EnablePage_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_GetPageReference.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_GetPageReference::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetPageReference.Activated" );

	UUIAction_GetPageReference_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_FindPageByCaption.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_FindPageByCaption::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_FindPageByCaption.Activated" );

	UUIAction_FindPageByCaption_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_FindPageByIndex.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_FindPageByIndex::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_FindPageByIndex.Activated" );

	UUIAction_FindPageByIndex_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_GetActivePage.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_GetActivePage::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetActivePage.Activated" );

	UUIAction_GetActivePage_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_GetPageCount.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_GetPageCount::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_GetPageCount.Activated" );

	UUIAction_GetPageCount_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_InsertPage.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_InsertPage::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_InsertPage.Activated" );

	UUIAction_InsertPage_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_PlaySound.IsValidUISequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIAction_PlaySound::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UIAction_PlaySound.IsValidUISequenceObject" );

	UUIAction_PlaySound_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction_RemovePage.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_RemovePage::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_RemovePage.Activated" );

	UUIAction_RemovePage_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UIAction_ReplacePage.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIAction_ReplacePage::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function Engine.UIAction_ReplacePage.Activated" );

	UUIAction_ReplacePage_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.UICond_SwitchWidget.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICond_SwitchWidget::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = UObject::FindObject< UFunction > ( "Function Engine.UICond_SwitchWidget.IsValidLevelSequenceObject" );

	UUICond_SwitchWidget_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIGameInfoSummary.IsProviderDisabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIGameInfoSummary::eventIsProviderDisabled ( )
{
	static UFunction* pFnIsProviderDisabled = NULL;

	if ( ! pFnIsProviderDisabled )
		pFnIsProviderDisabled = UObject::FindObject< UFunction > ( "Function Engine.UIGameInfoSummary.IsProviderDisabled" );

	UUIGameInfoSummary_eventIsProviderDisabled_Parms IsProviderDisabled_Parms;

	this->ProcessEvent ( pFnIsProviderDisabled, &IsProviderDisabled_Parms, NULL );

	return IsProviderDisabled_Parms.ReturnValue;
};

// Function Engine.UIScriptConsoleScene.OnCreateChild
// [0x00020002] 
// Parameters infos:
// class UUIObject*               CreatedWidget                  ( CPF_Parm )
// class UUIScreenObject*         CreatorContainer               ( CPF_Parm )

void UUIScriptConsoleScene::OnCreateChild ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer )
{
	static UFunction* pFnOnCreateChild = NULL;

	if ( ! pFnOnCreateChild )
		pFnOnCreateChild = UObject::FindObject< UFunction > ( "Function Engine.UIScriptConsoleScene.OnCreateChild" );

	UUIScriptConsoleScene_execOnCreateChild_Parms OnCreateChild_Parms;
	OnCreateChild_Parms.CreatedWidget = CreatedWidget;
	OnCreateChild_Parms.CreatorContainer = CreatorContainer;

	this->ProcessEvent ( pFnOnCreateChild, &OnCreateChild_Parms, NULL );
};

// Function Engine.UIScriptConsoleScene.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScriptConsoleScene::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = UObject::FindObject< UFunction > ( "Function Engine.UIScriptConsoleScene.PostInitialize" );

	UUIScriptConsoleScene_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIScriptConsoleScene.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScriptConsoleScene::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = UObject::FindObject< UFunction > ( "Function Engine.UIScriptConsoleScene.Initialized" );

	UUIScriptConsoleScene_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.WaterVolume.PlayExitSplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayExitSplash ( class AActor* Other )
{
	static UFunction* pFnPlayExitSplash = NULL;

	if ( ! pFnPlayExitSplash )
		pFnPlayExitSplash = UObject::FindObject< UFunction > ( "Function Engine.WaterVolume.PlayExitSplash" );

	AWaterVolume_execPlayExitSplash_Parms PlayExitSplash_Parms;
	PlayExitSplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayExitSplash, &PlayExitSplash_Parms, NULL );
};

// Function Engine.WaterVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function Engine.WaterVolume.UnTouch" );

	AWaterVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.WaterVolume.PlayEntrySplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayEntrySplash ( class AActor* Other )
{
	static UFunction* pFnPlayEntrySplash = NULL;

	if ( ! pFnPlayEntrySplash )
		pFnPlayEntrySplash = UObject::FindObject< UFunction > ( "Function Engine.WaterVolume.PlayEntrySplash" );

	AWaterVolume_execPlayEntrySplash_Parms PlayEntrySplash_Parms;
	PlayEntrySplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayEntrySplash, &PlayEntrySplash_Parms, NULL );
};

// Function Engine.WaterVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AWaterVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function Engine.WaterVolume.Touch" );

	AWaterVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif