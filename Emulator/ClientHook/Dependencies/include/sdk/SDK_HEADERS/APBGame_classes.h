/*
#############################################################################################
# All Points Bulletin Reloaded (1.6) SDK
# Generated with TheFeckless UE3 SDK Generator v1.2_Beta-Rev.39
# ========================================================================================= #
# File: APBGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net	
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_BOMB_UNSET                                         0
#define CONST_BOMB_DEFUSED                                       -1
#define CONST_BOMB_EXPLODED                                      -2
#define CONST_NPCBRAIN_REPLICATE_CANCEL_REACTION_OFFS            128
#define CONST_VEHICLE_ROOT_HEIGHT                                50.0f
#define CONST_nMAX_INTERACTIONPOINTS                             5
#define CONST_CROUCH_RADIUS                                      34
#define CONST_CROUCH_HEIGHT                                      60
#define CONST_LEAN_OUT_RADIUS                                    34
#define CONST_LEAN_OUT_HEIGHT                                    70
#define CONST_COLLISION_RADIUS                                   34
#define CONST_COLLISION_HEIGHT                                   91
#define CONST_SPEED_THRESHOLD                                    10.0f
#define CONST_ANGLE_THRESHOLD                                    1000.0f
#define CONST_DISTANCE_THRESHOLD                                 30.0f
#define CONST_RIDE_HEIGHT                                        50.0f
#define CONST_MAX_DETOURS                                        3
#define CONST_PASSENGER_SOCKET_ALT                               'FrontLeft'
#define CONST_PASSENGER_SOCKET                                   'FrontRight'
#define CONST_METRIC_UE3_CONVERSION_FACTOR                       100
#define CONST_MAX_VEHICLE_LENGTH                                 12.0f
#define CONST_NPCS_FOR_SYNCH_DEBUGGING                           20
#define CONST_ACTIVITY_MESSAGES_MAX                              5
#define CONST_MISSION_SIDE_MEMBERS_PACKET_DWORDS                 31
#define CONST_MISSION_SUMMARY_DWORDS                             4
#define CONST_MISSION_STATS_PACKET_DWORDS                        12
#define CONST_MEDALS_DWORDS                                      7
#define CONST_KILL_NOTIFICATION_ENTRIES                          40
#define CONST_MAX_GROUP_SLOTS                                    20
#define CONST_NUM_FNMODS_CHARACTER                               4
#define CONST_NUM_FNMODS_WEAPON                                  3
#define CONST_NUM_FNMODS_VEHICLE                                 4
#define CONST_MAX_NUM_ROLE_MILESTONES                            99
#define CONST_SECONDS_TO_MILLISECONDS                            1000.0
#define CONST_PING_QUANTIZE                                      250.0
#define CONST_NORMALISED_VECTOR_QUANTIZE                         32767.0
#define CONST_LOCK_SCREEN_WIDTH                                  640.0
#define CONST_LOCK_SCREEN_HEIGHT                                 480.0
#define CONST_MAX_CLIENT_CONTACT_PAIRS_PACKET                    5.0
#define CONST_CLIENTNOTIFICATION_NONMISSION_MULTIPLIER           10.0
#define CONST_NUM_TIME_DELTAS_TO_STORE                           60
#define CONST_DISTANCE_AT_VAP                                    20
#define CONST_Z_DISTANCE_AT_VAP                                  150
#define CONST_DISTANCE_TOO_FAR_FROM_VAP                          1000
#define CONST_AUTO_MOVE_TO_POSITION_TIMEOUT                      15
#define CONST_MOVE_TO_POSITION_NO_MOVEMENT_TIME_OUT              2
#define CONST_TaskItemSize_MAX                                   6
#define CONST_UNKNOWN_HEALTH                                     -666
#define CONST_CosmeticAimRotationTolerance                       1.0f
#define CONST_CosmeticCameraCollideTolerance                     0.05f
#define CONST_CosmeticAimRotationSendThrottle                    0.10f
#define CONST_LogicalAimRotationSendThrottle                     0.04f
#define CONST_NewServerDriveResendRate                           0.1f
#define CONST_CUSTOMISATION_DATA_PACKET_SIZE                     256
#define CONST_CHARACTER_INFO_PACKET_SLOTS                        50
#define CONST_MAX_NUM_JUNCTIONS                                  400
#define CONST_SearchUntilStopped                                 10000000
#define CONST_MaxLanes                                           5
#define CONST_TUMBLE_RATE                                        100000
#define CONST_RPM_to_RADS_PER_SEC                                0.104719755
#define CONST_NUM_VEHICLE_ENGINE_SAMPLES                         50
#define CONST_NUM_OLD_VEHICLE_MOVES_TO_SAVE                      50
#define CONST_DISTANCE_TO_DIRT_FACTOR                            0.0000025
#define CONST_MATERIAL_ID_VEHICLE_METAL                          -2
#define CONST_MATERIAL_ID_HUMAN_BODY                             -3
#define CONST_MATERIAL_ID_HIT_NOTHING                            -4
#define CONST_MAX_REPLICATED_ARRAY_SIZE                          250
#define CONST_BOTPLAYER_STEER_ANGLE_DEADZONE                     0.05
#define CONST_BOTPLAYER_ROTATION_RATE                            8.0
#define CONST_BOTPLAYER_TARGET_RADIUS                            300.0
#define CONST_BOTPLAYER_WAITTIME_MIN                             2.0f
#define CONST_BOTPLAYER_WAITTIME_RANGE                           2.0f
#define CONST_BOTPLAYER_WALKTIME                                 1.0f
#define CONST_MAX_INV_CHARACTER                                  1
#define CONST_MAX_INV_CLOTHING                                   40
#define CONST_MAX_INV_DISPLAYPOINTTOKEN                          100
#define CONST_MAX_INV_DUMMY                                      5
#define CONST_MAX_INV_EQUIPMENT                                  100
#define CONST_MAX_INV_FNMOD                                      100
#define CONST_MAX_INV_INSTRUMENT                                 1
#define CONST_MAX_INV_MARKETPLACECASH                            2
#define CONST_MAX_INV_OUTFIT                                     8
#define CONST_MAX_INV_SONG                                       10
#define CONST_MAX_INV_SYMBOL                                     40
#define CONST_MAX_INV_THEME                                      10
#define CONST_MAX_INV_UNLOCK                                     2
#define CONST_MAX_INV_USABLETOKEN                                100
#define CONST_MAX_INV_VEHICLE                                    10
#define CONST_MAX_INV_WEAPON                                     100
#define CONST_MAX_CHARACTER_SIZE                                 0
#define CONST_MAX_CLOTHING_SIZE                                  3500
#define CONST_MAX_DISPLAYPOINTTOKEN_SIZE                         0
#define CONST_MAX_DUMMY_SIZE                                     0
#define CONST_MAX_EQUIPMENT_SIZE                                 0
#define CONST_MAX_FNMOD_SIZE                                     0
#define CONST_MAX_INSTRUMENT_SIZE                                0
#define CONST_MAX_MARKETPLACECASH_SIZE                           0
#define CONST_MAX_OUTFIT_SIZE                                    1000
#define CONST_MAX_SONG_SIZE                                      2500
#define CONST_MAX_SYMBOL_SIZE                                    2000
#define CONST_MAX_THEME_SIZE                                     2500
#define CONST_MAX_UNLOCK_SIZE                                    0
#define CONST_MAX_USABLETOKEN_SIZE                               0
#define CONST_MAX_VEHICLE_SIZE                                   3000
#define CONST_MAX_WEAPON_SIZE                                    0
#define CONST_CUSTOMISATION_SAFE_MAX_UNCOMPRESSED_SIZE           16777216
#define CONST_nMAX_TRACERS                                       20
#define CONST_ItemAttachment_None                                0
#define CONST_NUM_SHOT_RECORDS                                   10
#define CONST_MinBasisDirectionDotProduct                        0.707f
#define CONST_INVALID_GROUP_ID                                   0
#define CONST_INVALID_CHARACTER_UID                              0
#define CONST_NUM_ATTACKS                                        3
#define CONST_ATTACK_NORMAL                                      0
#define CONST_ATTACK_FLOOR                                       1
#define CONST_MAX_DEPLOYED_WEAPONS                               4
#define CONST_TIMESTAMP_LEN                                      8
#define CONST_CONFIG_DIR                                         "..\\APBGame\\Config\\"
#define CONST_MAX_PERSISTENT_CONFIGFILE_DOWNLOAD_ATTEMPTS        5
#define CONST_MAX_PERSISTENT_CONFIGFILE_UPLOAD_ATTEMPTS          5
#define CONST_RC_SUCCESS                                         0
#define CONST_RC_FAILED                                          1
#define CONST_RC_INVALID_MESSAGE                                 2
#define CONST_RC_INVALID_STATUS                                  3
#define CONST_RC_DATABASE_ERROR                                  4
#define CONST_RC_DATABASE_BUSY                                   5
#define CONST_RC_MESSAGE_FLOOD                                   6
#define CONST_RC_DATABASE_QUERY_TIMEOUT                          7
#define CONST_RC_CONNECT_FAILED                                  8
#define CONST_RC_DISCONNECTED                                    9
#define CONST_RC_UE3_CLIENT_SERVER_MISMATCH                      10
#define CONST_RC_DATABASE_PENDING                                11
#define CONST_RC_TIMEOUT                                         12
#define CONST_RC_SESSION_CHANGED                                 13
#define CONST_RC_DATABASE_UNEXPECTED_RC_START                    -1
#define CONST_KICK_REASON_DUPLICATE_LOGIN                        1
#define CONST_KICK_REASON_GM                                     2
#define CONST_KICK_REASON_SUBSCRIPTION_EXPIRED                   3
#define CONST_KICK_REASON_PUNKBUSTER                             4
#define CONST_RC_LOGIN_INVALID_VERSION                           10001
#define CONST_RC_LOGIN_INVALID_ACCOUNT                           10002
#define CONST_RC_LOGIN_INVALID_PASSWORD                          10003
#define CONST_RC_LOGIN_ACCOUNT_IN_USE                            10004
#define CONST_RC_LOGIN_LOGIN_IN_PROGRESS                         10005
#define CONST_RC_LOGIN_ACCOUNT_NOT_ALLOWED                       10006
#define CONST_RC_LOGIN_ACCOUNT_TYPE_BLOCKED                      10007
#define CONST_RC_LOGIN_ACCOUNT_BLOCKED                           10008
#define CONST_RC_LOGIN_SESSION_TIMEOUT                           10009
#define CONST_RC_LOGIN_INVALID_INFORMATION                       10010
#define CONST_RC_LOGIN_INVALID_SOLUTION                          10011
#define CONST_RC_LOGIN_NO_SESSION                                10012
#define CONST_RC_LOGIN_APB_INACTIVATED                           10013
#define CONST_RC_CHARACTER_NAME_CHECK_IN_USE                     20001
#define CONST_RC_CHARACTER_NAME_CHECK_BAD_NAME                   20002
#define CONST_RC_CHARACTER_NAME_CHECK_INVALID_NAME               20004
#define CONST_RC_CHARACTER_CREATE_NAME_IN_USE                    30001
#define CONST_RC_CHARACTER_CREATE_NAME_NOT_CHECKED               30002
#define CONST_RC_CHARACTER_CREATE_INVALID_CUSTOMISATION          30003
#define CONST_RC_CHARACTER_CREATE_WORLD_FULL                     30004
#define CONST_RC_CHARACTER_CREATE_CHARACTER_LIMIT                30006
#define CONST_RC_CHARACTER_CREATE_WORLD_OFFLINE                  30007
#define CONST_RC_CHARACTER_DELETE_INVALID_SLOT_NUMBER            40001
#define CONST_RC_CHARACTER_DELETE_WORLD_OFFLINE                  40002
#define CONST_RC_CHARACTER_DELETE_CLAN_LEADER                    40003
#define CONST_RC_CHARACTER_DELETE_MAIL_POINTS                    40004
#define CONST_RC_CHARACTER_DELETE_MARKETPLACE_POINTS             40005
#define CONST_RC_CHARACTER_INFO_INVALID_SLOT_NUMBER              50001
#define CONST_RC_CHARACTER_INFO_WORLD_OFFLINE                    50002
#define CONST_RC_WORLD_ENTER_INVALID_SLOT_NUMBER                 60001
#define CONST_RC_WORLD_ENTER_WORLD_OFFLINE                       60002
#define CONST_RC_WORLD_ENTER_QUEUE_CANCEL                        60003
#define CONST_RC_WORLD_ENTER_LOCKED                              60004
#define CONST_RC_WORLD_ENTER_CHARACTER_NOT_EXIST                 60005
#define CONST_RC_WORLD_ENTER_CHARACTER_DUPLICATED                60006
#define CONST_RC_WORLD_ENTER_ACCOUNT_TYPE_BLOCKED                60007
#define CONST_RC_WORLD_ENTER_NEED_NAME_CHANGE                    60008
#define CONST_RC_WORLD_ENTER_ACCOUNT_OFFLINE                     60009
#define CONST_RC_WORLD_ENTER_QUEUE_DUPLICATED                    60010
#define CONST_RC_CHARACTER_NAME_CHANGE_INVALID_STATUS            61001
#define CONST_RC_CHARACTER_NAME_CHANGE_INVALID_SLOT_NUMBER       61002
#define CONST_RC_CHARACTER_NAME_CHANGE_WORLD_OFFLINE             61003
#define CONST_RC_CHARACTER_NAME_CHANGE_INVALID_CHARACTER         61004
#define CONST_RC_CHARACTER_NAME_CHANGE_NAME_IN_USE               61005
#define CONST_RC_CHARACTER_NAME_CHANGE_SAME_NAME                 61006
#define CONST_RC_CHARACTER_NAME_CHANGE_BAD_NAME                  61007
#define CONST_RC_CHARACTER_NAME_CHANGE_NAME_NOT_CHECKED          61008
#define CONST_RC_DISTRICT_RESERVE_DISTRICT_OFFLINE               70001
#define CONST_RC_DISTRICT_RESERVE_FACTION                        70002
#define CONST_RC_DISTRICT_RESERVE_ALREADY_IN_INSTANCE            70003
#define CONST_RC_DISTRICT_RESERVE_ALREADY_IN_DISTRICT            70004
#define CONST_RC_DISTRICT_RESERVE_INVALID_DISTRICT               70005
#define CONST_RC_DISTRICT_RESERVE_FULL                           70006
#define CONST_RC_DISTRICT_RESERVE_NO_INSTANCES                   70007
#define CONST_RC_DISTRICT_RESERVE_FREEZE                         70008
#define CONST_RC_DISTRICT_RESERVE_NO_SUBSCRIPTION                70009
#define CONST_RC_DISTRICT_RESERVE_CHARACTER_NOT_FOUND            70010
#define CONST_RC_DISTRICT_RESERVE_ALREADY_QUEUED_FOR_INSTANCE    70011
#define CONST_RC_DISTRICT_RESERVE_ALREADY_QUEUED_FOR_DISTRICT    70012
#define CONST_RC_DISTRICT_RESERVE_NO_GROUP                       70013
#define CONST_RC_DISTRICT_RESERVE_NOT_LEADER                     70014
#define CONST_RC_DISTRICT_RESERVE_RATING                         70015
#define CONST_RC_DISTRICT_RESERVE_LOCKED                         70016
#define CONST_RC_DISTRICT_ENTER_NOT_RESERVED                     80001
#define CONST_RC_DISTRICT_ENTER_SUBSCRIPTION_EXPIRED             80002
#define CONST_RC_DISTRICT_ATTACH_INVALID_DISTRICT_UID            90001
#define CONST_RC_DISTRICT_ATTACH_ALREADY_ATTACHED                90002
#define CONST_RC_CHAT_WHISPER_NOT_FOUND                          100001
#define CONST_RC_CHAT_WHISPER_IGNORED                            100002
#define CONST_RC_CHAT_WHISPER_GM                                 100003
#define CONST_RC_GROUP_INVITE_DECLINED                           110001
#define CONST_RC_GROUP_INVITE_NOT_FOUND                          110002
#define CONST_RC_GROUP_INVITE_FACTION                            110003
#define CONST_RC_GROUP_INVITE_NOT_LEADER                         110004
#define CONST_RC_GROUP_INVITE_GROUP                              110005
#define CONST_RC_GROUP_INVITE_INVITE_TO                          110006
#define CONST_RC_GROUP_INVITE_FULL                               110007
#define CONST_RC_GROUP_INVITE_SELF                               110008
#define CONST_RC_GROUP_INVITE_IGNORED                            110009
#define CONST_RC_GROUP_INVITE_BOUNCED                            110010
#define CONST_RC_GROUP_INVITE_INVITE_FROM                        110011
#define CONST_RC_GROUP_INVITE_GM                                 110012
#define CONST_RC_GROUP_INVITE_TUTORIAL_FROM                      110013
#define CONST_RC_GROUP_INVITE_TUTORIAL_TO                        110014
#define CONST_RC_GROUP_LEAVE_NO_GROUP                            120001
#define CONST_RC_GROUP_REMOVE_NO_GROUP                           130001
#define CONST_RC_GROUP_REMOVE_NOT_LEADER                         130002
#define CONST_RC_GROUP_REMOVE_SELF                               130003
#define CONST_RC_GROUP_REMOVE_NOT_FOUND                          130004
#define CONST_RC_GROUP_LEADER_NO_GROUP                           140001
#define CONST_RC_GROUP_LEADER_NOT_LEADER                         140002
#define CONST_RC_GROUP_LEADER_SELF                               140003
#define CONST_RC_GROUP_LEADER_NOT_FOUND                          140004
#define CONST_RC_GROUP_LEADER_OFFLINE                            140005
#define CONST_RC_GROUP_STATE_NO_GROUP                            150001
#define CONST_RC_CLAN_CREATE_NAME_IN_USE                         160001
#define CONST_RC_CLAN_CREATE_BAD_NAME                            160002
#define CONST_RC_CLAN_CREATE_INVALID_NAME                        160004
#define CONST_RC_CLAN_CREATE_CLAN                                160005
#define CONST_RC_CLAN_INVITE_DECLINED                            170001
#define CONST_RC_CLAN_INVITE_NOT_FOUND                           170002
#define CONST_RC_CLAN_INVITE_FACTION                             170003
#define CONST_RC_CLAN_INVITE_PERMISSION                          170004
#define CONST_RC_CLAN_INVITE_CLAN                                170005
#define CONST_RC_CLAN_INVITE_INVITE_TO                           170006
#define CONST_RC_CLAN_INVITE_FULL                                170007
#define CONST_RC_CLAN_INVITE_SELF                                170008
#define CONST_RC_CLAN_INVITE_NO_CLAN                             170009
#define CONST_RC_CLAN_INVITE_NO_DEFAULT_RANKS                    170010
#define CONST_RC_CLAN_INVITE_IGNORED                             170011
#define CONST_RC_CLAN_INVITE_CLAN_DELETED                        170012
#define CONST_RC_CLAN_INVITE_GM                                  170013
#define CONST_RC_CLAN_LEAVE_NO_CLAN                              180001
#define CONST_RC_CLAN_LEAVE_LEADER                               180002
#define CONST_RC_CLAN_LEAVE_NO_CLAN_MEMBER                       180003
#define CONST_RC_CLAN_REMOVE_NO_CLAN                             190001
#define CONST_RC_CLAN_REMOVE_SELF                                190002
#define CONST_RC_CLAN_REMOVE_PERMISSION                          190003
#define CONST_RC_CLAN_REMOVE_NOT_FOUND                           190004
#define CONST_RC_CLAN_REMOVE_RANK                                190005
#define CONST_RC_CLAN_LEADER_NO_CLAN                             200001
#define CONST_RC_CLAN_LEADER_NOT_LEADER                          200002
#define CONST_RC_CLAN_LEADER_SELF                                200003
#define CONST_RC_CLAN_LEADER_NOT_FOUND                           200004
#define CONST_RC_CLAN_LEADER_RANK_NOT_FOUND                      200005
#define CONST_RC_CLAN_LEADER_OLD_LEADER_NOT_FOUND                200006
#define CONST_RC_CLAN_LEADER_GENERAL_MEMBER_RANK_NOT_FOUND       200007
#define CONST_RC_CLAN_BIO_NO_CLAN                                210001
#define CONST_RC_CLAN_BIO_EDIT_NO_PERMISSION                     220001
#define CONST_RC_CLAN_BIO_EDIT_NO_CLAN                           220002
#define CONST_RC_CLAN_SYMBOL_NO_CLAN                             230001
#define CONST_RC_CLAN_SYMBOL_EDIT_NO_PERMISSION                  240001
#define CONST_RC_CLAN_SYMBOL_EDIT_NO_CLAN                        240002
#define CONST_RC_GROUP_CONFIG_NO_GROUP                           250001
#define CONST_RC_GROUP_CONFIG_NOT_LEADER                         250002
#define CONST_RC_GROUP_JOIN_GROUP                                260001
#define CONST_RC_GROUP_JOIN_INVITE_FROM                          260002
#define CONST_RC_GROUP_JOIN_NOT_FOUND                            260003
#define CONST_RC_GROUP_JOIN_SELF                                 260004
#define CONST_RC_GROUP_JOIN_NO_GROUP                             260005
#define CONST_RC_GROUP_JOIN_FULL                                 260006
#define CONST_RC_GROUP_JOIN_FACTION                              260007
#define CONST_RC_GROUP_JOIN_PRIVATE                              260008
#define CONST_RC_GROUP_JOIN_IGNORE_LIST                          260009
#define CONST_RC_GROUP_JOIN_INVITE_TO                            260010
#define CONST_RC_GROUP_JOIN_TUTORIAL                             260011
#define CONST_RC_CLAN_THEME_NO_CLAN                              270001
#define CONST_RC_CLAN_THEME_EDIT_NO_PERMISSION                   280001
#define CONST_RC_CLAN_THEME_EDIT_NO_CLAN                         280002
#define CONST_RC_CLAN_MEMBER_STATS_NO_CLAN                       290001
#define CONST_RC_CLAN_STATS_NO_CLAN                              300001
#define CONST_RC_CLAN_STATS_NO_CLAN_MEMBER                       300002
#define CONST_RC_CLAN_MEMBER_PROFILE_NO_CLAN                     310001
#define CONST_RC_CLAN_MEMBER_PROFILE_NO_CLAN_MEMBER              310002
#define CONST_RC_CLAN_MEMBER_BIO_EDIT_NO_CLAN                    320001
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_NO_PERMISSION             330001
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_NO_CLAN                   330002
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_INVALID_NOTE_TYPE         330003
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_NO_CLAN_MEMBER            330004
#define CONST_RC_CLAN_RANK_CREATE_NOT_LEADER                     340001
#define CONST_RC_CLAN_RANK_CREATE_NO_CLAN                        340002
#define CONST_RC_CLAN_RANK_CREATE_INVALID_PERMISSION             340003
#define CONST_RC_CLAN_RANK_CREATE_INVALID_RANK_NAME              340004
#define CONST_RC_CLAN_RANK_CREATE_SLOT_FULL                      340005
#define CONST_RC_CLAN_RANK_CREATE_NAME_IN_USE                    340006
#define CONST_RC_CLAN_RANK_DELETE_NOT_LEADER                     350001
#define CONST_RC_CLAN_RANK_DELETE_NO_CLAN                        350002
#define CONST_RC_CLAN_RANK_DELETE_DEFAULT_RANK                   350003
#define CONST_RC_CLAN_RANK_DELETE_INVALID_RANKUID                350004
#define CONST_RC_CLAN_RANK_DELETE_RANK_ASSIGNED                  350005
#define CONST_RC_CLAN_RANK_EDIT_NOT_LEADER                       360001
#define CONST_RC_CLAN_RANK_EDIT_NO_CLAN                          360002
#define CONST_RC_CLAN_RANK_EDIT_INVALID_PERMISSION               360003
#define CONST_RC_CLAN_RANK_EDIT_INVALID_RANK_NAME                360004
#define CONST_RC_CLAN_RANK_EDIT_INVALID_RANK_UID                 360005
#define CONST_RC_CLAN_RANK_EDIT_NAME_IN_USE                      360006
#define CONST_RC_CLAN_RANK_ASSIGN_NO_PERMISSION                  370001
#define CONST_RC_CLAN_RANK_ASSIGN_NO_CLAN                        370002
#define CONST_RC_CLAN_RANK_ASSIGN_NO_CLAN_MEMBER                 370003
#define CONST_RC_CLAN_RANK_ASSIGN_HIGHER_MEMBER                  370004
#define CONST_RC_CLAN_RANK_ASSIGN_HIGHER_RANK                    370005
#define CONST_RC_CLAN_RANK_ASSIGN_INVALID_RANKUID                370006
#define CONST_RC_CLAN_INFORMATION_NO_CLAN                        380001
#define CONST_RC_CLAN_INFORMATION_EDIT_NO_PERMISSION             390001
#define CONST_RC_CLAN_INFORMATION_EDIT_NO_CLAN                   390002
#define CONST_RC_CLAN_MOTD_EDIT_NO_PERMISSION                    400001
#define CONST_RC_CLAN_MOTD_EDIT_NO_CLAN                          400002
#define CONST_RC_CLAN_DELETE_NO_CLAN                             410001
#define CONST_RC_CLAN_DELETE_LEADER                              410002
#define CONST_RC_CLAN_MEMBER_STATE_NO_CLAN                       420001
#define CONST_RC_FRIENDLIST_ADD_NOT_FOUND                        430001
#define CONST_RC_FRIENDLIST_ADD_SELF                             430002
#define CONST_RC_FRIENDLIST_ADD_ALREADY_ADDED                    430003
#define CONST_RC_FRIENDLIST_ADD_FULL                             430004
#define CONST_RC_FRIENDLIST_ADD_GM                               430005
#define CONST_RC_FRIENDLIST_ADD_SAME_ACCOUNT                     430006
#define CONST_RC_FRIENDLIST_ADD_INVALID_NAME                     430007
#define CONST_RC_FRIENDLIST_REMOVE_NO_FRIEND                     440001
#define CONST_RC_FRIENDLIST_STATE_NO_FRIEND                      450001
#define CONST_RC_IGNORELIST_ADD_NOT_FOUND                        460001
#define CONST_RC_IGNORELIST_ADD_SELF                             460002
#define CONST_RC_IGNORELIST_ADD_ALREADY_ADDED                    460003
#define CONST_RC_IGNORELIST_ADD_FULL                             460004
#define CONST_RC_IGNORELIST_ADD_GM                               460005
#define CONST_RC_IGNORELIST_ADD_SAME_ACCOUNT                     460006
#define CONST_RC_IGNORELIST_ADD_INVALID_NAME                     460007
#define CONST_RC_IGNORELIST_REMOVE_NO_IGNORE                     470001
#define CONST_RC_GM_COMMAND_PERMISSION                           480001
#define CONST_RC_GM_COMMAND_PENDING                              480002
#define CONST_RC_GM_COMMAND_CHARACTER_NOT_FOUND                  480003
#define CONST_RC_GM_COMMAND_CHARACTER_NO_DISTRICT                480004
#define CONST_RC_BULKLOG_SESSION_ARCHIVE_EXECUTION_COUNT         490001
#define CONST_RC_POINTS_NOT_ENOUGH                               500001
#define CONST_RC_INIT_SERVICE_BROKER_NOT_FOUND                   510001
#define CONST_RC_INIT_SERVICE_BROKER_DISABLED                    510002
#define CONST_RC_INIT_SERVICE_BROKER_CONVERSATION_GROUP_ID       510003
#define CONST_RC_MARKETPLACE_THUMBNAIL_INVALID_PARAM             520001
#define CONST_RC_GROUP_LIST_PAGE                                 530001
#define CONST_RC_GROUP_LIST_NOT_FOUND                            530002
#define CONST_RC_GROUP_INFO_NOT_FOUND                            540001
#define CONST_RC_GROUP_INFO_FACTION                              540002
#define CONST_RC_GROUP_INFO_NO_GROUP                             540003
#define CONST_RC_GROUP_INFO_PRIVATE                              540004
#define CONST_RC_CHARACTERFINDER_INFO_NO_CHARACTER               610001
#define CONST_RC_CHARACTERFINDER_INFO_GM                         610002
#define CONST_RC_MARKETPLACE_SELLER_LIST_INVALID_STRING          620001
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_BUYOUT       630001
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_BID          630002
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_AUCTION_LIMIT        630004
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_TYPE         630005
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_CASH         630006
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_NO_ITEM              630007
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_DUPE                 630008
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_DURATION     630009
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_ITEM         630010
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_NO_CASH              630011
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_CASH_TYPE            630012
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_NOT_SELLABLE         630013
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_MINIMUM_CASH         630014
#define CONST_RC_MARKETPLACE_AUCTION_BID_NO_AUCTION              640001
#define CONST_RC_MARKETPLACE_AUCTION_BID_SELF                    640002
#define CONST_RC_MARKETPLACE_AUCTION_BID_EXPIRED                 640003
#define CONST_RC_MARKETPLACE_AUCTION_BID_BUYOUT_EXCEEDED         640004
#define CONST_RC_MARKETPLACE_AUCTION_BID_MINIMUM                 640005
#define CONST_RC_MARKETPLACE_AUCTION_BID_CURRENT                 640006
#define CONST_RC_MARKETPLACE_AUCTION_BID_DUPE                    640007
#define CONST_RC_MARKETPLACE_AUCTION_BID_AMOUNT                  640008
#define CONST_RC_MARKETPLACE_AUCTION_BID_INVALID_AMOUNT          640009
#define CONST_RC_MARKETPLACE_AUCTION_BID_INVALID_TYPE            640010
#define CONST_RC_MARKETPLACE_AUCTION_BID_FACTION                 640011
#define CONST_RC_MARKETPLACE_AUCTION_CANCEL_NO_AUCTION           650001
#define CONST_RC_MARKETPLACE_AUCTION_CANCEL_EXPIRED              650002
#define CONST_RC_MARKETPLACE_AUCTION_CANNOT_CANCEL               650003
#define CONST_RC_MARKETPLACE_AUCTION_ITEM_NO_AUCTION             660001
#define CONST_RC_MARKETPLACE_AUCTION_ITEM_PERMISSION             660002
#define CONST_RC_MARKETPLACE_AUCTION_LIST_INVALID_SORT           670001
#define CONST_RC_MARKETPLACE_AUCTION_LIST_INVALID_STRING         670002
#define CONST_RC_MARKETPLACE_MYBID_LIST_INVALID_SORT             680001
#define CONST_RC_MARKETPLACE_MYAUCTION_LIST_INVALID_SORT         690001
#define CONST_RC_MAIL_LIST_INVALID_SORT                          700001
#define CONST_RC_MAIL_SEND_NOT_FOUND                             710001
#define CONST_RC_MAIL_SEND_SELF                                  710002
#define CONST_RC_MAIL_SEND_BLOCKED                               710003
#define CONST_RC_MAIL_SEND_IGNORED                               710004
#define CONST_RC_MAIL_SEND_MAIL_LIMIT                            710005
#define CONST_RC_MAIL_SEND_ACCOUNT_MAIL_LIMIT                    710006
#define CONST_RC_MAIL_SEND_NO_ITEM                               710007
#define CONST_RC_MAIL_SEND_COST                                  710008
#define CONST_RC_MAIL_SEND_INVALID_CASH                          710009
#define CONST_RC_MAIL_SEND_INVALID_ITEM                          710010
#define CONST_RC_MAIL_SEND_DUPE                                  710011
#define CONST_RC_MAIL_SEND_NOT_SELLABLE                          710012
#define CONST_RC_MAIL_READ_NOT_FOUND                             720001
#define CONST_RC_MAIL_READ_NOT_OWNER                             720002
#define CONST_RC_MAIL_DELETE_NOT_FOUND                           730001
#define CONST_RC_MAIL_DELETE_NOT_OWNER                           730002
#define CONST_RC_MAIL_DETACH_NOT_FOUND                           740001
#define CONST_RC_MAIL_DETACH_NOT_OWNER                           740002
#define CONST_RC_MAIL_DETACH_NO_ATTACHED_CASH                    740003
#define CONST_RC_MAIL_DETACH_NO_ATTACHED_ITEM                    740004
#define CONST_RC_MAIL_DETACH_NO_ATTACHED_POINTS                  740005
#define CONST_RC_MAIL_DETACH_INVALID_TYPE                        740006
#define CONST_RC_MAIL_DETACH_INVALID_ITEM                        740007
#define CONST_RC_MAIL_DETACH_CASH_ERROR                          740008
#define CONST_RC_MAIL_DETACH_ITEM_ERROR                          740009
#define CONST_RC_MAIL_DETACH_POINTS_ERROR                        740010
#define CONST_RC_MAIL_DETACH_NO_ACCOUNT                          740011
#define CONST_RC_MAIL_ATTACH_NOT_FOUND                           750001
#define CONST_RC_MAIL_ATTACH_NOT_OWNER                           750002
#define CONST_RC_MAIL_ATTACH_ATTACHED_CASH                       750003
#define CONST_RC_MAIL_ATTACH_ATTACHED_ITEM                       750004
#define CONST_RC_MAIL_ATTACH_INVALID                             750005
#define CONST_RC_MAIL_ITEM_NOT_FOUND                             760001
#define CONST_RC_LEAGUE_NOT_FOUND                                770001
#define CONST_RC_LEAGUE_MYLEAGUE_CLAN_NOT_FOUND                  780001
#define CONST_RC_LEAGUE_VALUE_CLAN_NOT_FOUND                     790001
#define CONST_RC_LEAGUE_VALUE_INVALID_STATISTIC_ID               790002
#define CONST_RC_LEAGUE_VALUE_INVALID_LEAGUE_TYPE                790003
#define CONST_RC_LEAGUE_VALUE_INVALID_LEAGUE_CYCLE               790004
#define CONST_RC_DATABASE_EVENT_END_DIALOG                       800001
#define CONST_RC_DATABASE_EVENT_CONVERSATION_ERROR               800002
#define CONST_RC_DATABASE_EVENT_UNKNOWN_MESSAGE_TYPE             800003
#define CONST_RC_DATABASE_EVENT_TIMEOUT                          800004
#define CONST_RC_CHARACTER_LOAD_SUCCESS_WITH_DUPLICATED_ONLINE   810001
#define CONST_RC_CHARACTER_LOAD_DB_OUT_OF_SYNC                   810002
#define CONST_RC_CHARACTER_LOAD_SUCCESS_WITH_REDEMPTIONKEY_REWARD_FAILURE 810003
#define CONST_RC_CONFIGFILE_LOAD_ALREADY_LOADED                  820001
#define CONST_RC_NAME_QUERY_NOT_FOUND                            830001
#define CONST_RC_DISTRICT_QUEUE_CANCEL_NO_GROUP                  840001
#define CONST_RC_DISTRICT_QUEUE_CANCEL_NOT_LEADER                840002
#define CONST_m_nDefaultLSPort                                   10125
#define CONST_IP_ADDRESS_LEN                                     16
#define CONST_USERNAME_LEN                                       65
#define CONST_MINIMUM_USERNAME_LEN                               1
#define CONST_PASSWORD_LEN                                       17
#define CONST_MINIMUM_PASSWORD_LEN                               3
#define CONST_REAL_TAG_LEN                                       25
#define CONST_WORLD_NAME_LEN                                     17
#define CONST_DISTRICT_NAME_LEN                                  101
#define CONST_CHARACTER_NAME_LEN                                 17
#define CONST_MINIMUM_CHARACTER_NAME_LEN                         3
#define CONST_CLAN_NAME_LEN                                      33
#define CONST_MINIMUM_CLAN_NAME_LEN                              3
#define CONST_CLAN_INFORMATION_LEN                               401
#define CONST_CLAN_BIO_LEN                                       401
#define CONST_CLAN_MOTD_LEN                                      201
#define CONST_CLAN_RANK_NAME_LEN                                 17
#define CONST_MINIMUM_CLAN_RANK_NAME_LEN                         1
#define CONST_CLAN_MEMBER_BIO_LEN                                101
#define CONST_CLAN_MEMBER_NOTE_LEN                               51
#define CONST_CHAT_MESSAGE_LEN                                   201
#define CONST_GM_COMMAND_LEN                                     201
#define CONST_MAX_FORM_HISTORY_LEN                               50
#define CONST_CUSTOM_COLOURS_LEN                                 48
#define CONST_DISPLAY_POINT_CUSTOMISATION_LEN                    7000
#define CONST_CHARACTER_CUSTOMISATION_LEN                        7000
#define CONST_SYMBOL_CUSTOMISATION_LEN                           2500
#define CONST_THEME_CUSTOMISATION_LEN                            2500
#define CONST_APPLICATION_VERSION_LEN                            256
#define CONST_MAP_NAME_LEN                                       256
#define CONST_MAX_QUERY_LEN                                      1024
#define CONST_SRP_MODULUS_LEN                                    64
#define CONST_SRP_PROOF_LEN                                      20
#define CONST_SRP_VERIFIER_LEN                                   64
#define CONST_SRP_SALT_LEN                                       10
#define CONST_SRP_SESSION_KEY_LEN                                40
#define CONST_AUTHENTICATION_KEY_LEN                             20
#define CONST_ENCRYPTION_KEY_LEN                                 16
#define CONST_DATABASE_TABLE_NAME_LEN                            128
#define CONST_DATABASE_USERNAME_LEN                              17
#define CONST_DATABASE_PASSWORD_LEN                              17
#define CONST_DATABASE_DATABASE_LEN                              33
#define CONST_LOG_CATEGORY_NAME_LEN                              21
#define CONST_LOG_SUBCATEGORY_NAME_LEN                           21
#define CONST_LOG_ATTRIBUTE_NAME_LEN                             33
#define CONST_MAX_TIME_DIFF_WITH_DATABASE                        300
#define CONST_MAX_HEXDUMP                                        256
#define CONST_MAX_ACTION_DISTRICT_CHARACTERS                     100
#define CONST_MAX_SOCIAL_DISTRICT_CHARACTERS                     250
#define CONST_MAX_GM_DISTRICT_CHARACTERS                         3
#define CONST_MAX_CONTACTS                                       128
#define CONST_MAX_CHARACTER_SLOTS                                8
#define CONST_MAX_CLAN_SLOTS                                     150
#define CONST_MAX_CLAN_RANKS                                     15
#define CONST_MAX_FRIENDLIST                                     50
#define CONST_MAX_IGNORELIST                                     50
#define CONST_MARKETPLACE_SUBSTRING_LEN                          17
#define CONST_MARKETPLACE_SERVER_PAGE_MULTIPLIER                 1
#define CONST_MAX_MARKETPLACE_ROWS_PER_SERVER_PAGE               100
#define CONST_MAX_MARKETPLACE_ROWS_PER_CLIENT_PAGE               15
#define CONST_MAX_MARKETPLACE_THUMBNAILS_PER_LOAD                10
#define CONST_MAX_MARKETPLACE_SELLERS                            20
#define CONST_MAX_MARKETPLACE_THUMBNAIL_RAW_SIZE                 10000
#define CONST_ITEM_NAME_LEN                                      33
#define CONST_FILTER_NAME_LEN                                    51
#define CONST_MAX_XML_ITEM_LEN                                   5000
#define CONST_MAX_XML_DISPLAY_POINT_LEN                          5000
#define CONST_MAX_XML_CUSTOMISATION_LEN                          5000
#define CONST_MAX_PENDING_OPERATIONS_LEN                         60000
#define CONST_MAX_PENDING_DESCRIPTION_LEN                        51
#define CONST_MAIL_SUBJECT_LEN                                   129
#define CONST_MAIL_BODY_LEN                                      1001
#define CONST_MAIL_ROWS_PER_PAGE                                 10
#define CONST_MAX_MAIL_CASH                                      200000000
#define CONST_MAX_MARKETPLACE_CASH                               200000000
#define CONST_PERSISTENT_CHARACTER_DATA_VERSION                  1
#define CONST_CONFIGFILE_COMPRESSED_LEN                          8000
#define CONST_CONFIGFILE_LEN                                     50000
#define CONST_MAX_CONFIGFILES_ACCOUNT                            5
#define CONST_MAX_CONFIGFILES_CHARACTER                          5
#define CONST_MAX_LEAGUE_LIST                                    10
#define CONST_MAX_LEAGUE_HISTORY_ROWS                            7
#define CONST_MAX_LEAGUE_LIST_HASH_BUCKET                        100
#define CONST_MAX_MYLEAGUE_LIST                                  500
#define CONST_INSTANCING_DEVIATION_PERCENTAGE                    10
#define CONST_MAX_XML_LOG_LEN                                    1500
#define CONST_MAX_BINARY_LOG_LEN                                 4096
#define CONST_ACCOUNT_TYPE_NAME_LEN                              50
#define CONST_NOTICE_LEN                                         1025
#define CONST_MAX_TRACKED_ACTIVITIES                             300
#define CONST_CHARACTER_NAME_CACHE_SIZE                          128
#define CONST_NUM_PARTICLES_RETICULE                             80
#define CONST_ACCURACY_BAR_HEIGHT                                50
#define CONST_kJobListLineHeight                                 15
#define CONST_kBorderWidth                                       5
#define CONST_kNPCInfoTextMaxDist                                1000.0
#define CONST_CLASS_INPUT_GROUP                                  0
#define CONST_CULL_INPUT_GROUP                                   0
#define CONST_GROUP_NON_ORDERED                                  -1
#define CONST_GROUP_MAX_DEPTH                                    5
#define CONST_GROUP_MAX_ORDER                                    10
#define CONST_GROUP_INPUT_GROUP                                  0
#define CONST_GROUP_INPUT_DEPENDENCY                             1
#define CONST_GROUP_INPUT_FILTER                                 2
#define CONST_GROUP_INPUT_ANTI_FILTER                            3
#define CONST_GROUP_OUTPUT_GROUP                                 0
#define CONST_GROUP_OUTPUT_SWAP                                  1
#define CONST_GROUP_OUTPUT_DEPENDENCY                            2
#define CONST_GROUP_OUTPUT_CULL                                  3
#define CONST_DRAW_FLAG_HIGHLIGHT_NEIGHBOURS                     0x0001
#define CONST_DRAW_FLAG_DEBUG_VIEW                               0x0002
#define CONST_DRAW_FLAG_SHOW_ANTI_FILTER_LINES                   0x0004
#define CONST_DRAW_FLAG_SHOW_CLASS_ICONS                         0x0008
#define CONST_DRAW_FLAG_SHOW_COMMENT_ICONS                       0x0010
#define CONST_DRAW_FLAG_SHOW_CULL_ICONS                          0x0020
#define CONST_DRAW_FLAG_SHOW_CULL_LINES                          0x0040
#define CONST_DRAW_FLAG_SHOW_DEPENDENCY_LINES                    0x0080
#define CONST_DRAW_FLAG_SHOW_FILTER_LINES                        0x0100
#define CONST_DRAW_FLAG_SHOW_GROUP_ICONS                         0x0200
#define CONST_DRAW_FLAG_SHOW_GROUP_LINES                         0x0400
#define CONST_DRAW_FLAG_SHOW_NON_ORDERED_GROUP_ICONS             0x0800
#define CONST_DRAW_FLAG_SHOW_NON_ORDERED_GROUP_LINES             0x1000
#define CONST_DRAW_FLAG_SHOW_SWAP_ICONS                          0x2000
#define CONST_DRAW_FLAG_SHOW_SWAP_LINES                          0x4000
#define CONST_SWAP_INPUT_GROUP                                   0
#define CONST_SWAP_OUTPUT_DEPENDENCY                             0
#define CONST_SWAP_OUTPUT_FILTER                                 1
#define CONST_SWAP_OUTPUT_ANTI_FILTER                            2
#define CONST_TEAROFF_MOMENTUM_SCALE_FACTOR                      100.0f
#define CONST_MAX_REPLICATED_EVT_TIMERS                          8
#define CONST_MINIMUM_EDGE_ANGLE_TO_SMOOTH                       5.0
#define CONST_MAXIMUM_EDGE_ANGLE_FOR_PERP_OFFSET                 5.0
#define CONST_SPAWNING_DESPAWN_OFFSET                            -50.0
#define CONST_MIN_DISTANCE_FROM_NEXT_TO_SMOOTH                   50.f
#define CONST_MIN_LENGTH_FOR_VECTOR_TO_SMOOTH                    50.f
#define CONST_MIN_ANGLE_BETWEEN_VECTORS_TO_SMOOTH                5.f
#define CONST_MAX_DISTANCE_FROM_MIDDLE_CONTROL_POINT             300.f
#define CONST_DIRECTION_SCALE_FACTOR                             100.0f
#define CONST_MAX_BODIES                                         20
#define CONST_DIST_AS_ACCURACY_METRIC                            1000
#define CONST_MAX_MISSES_HIDDEN                                  1
#define CONST_MAX_MISSES_VISIBLE                                 3
#define CONST_MAX_RAYS                                           5
#define CONST_CRIMECOMMITTED_FINISH_TIME_OFFSET                  10.0f
#define CONST_TTI_FINISH_TIME_OFFSET                             10.0f
#define CONST_MAX_PEDESTRIAN_TYPES                               20
#define CONST_MAX_VEHICLE_CATEGORIES                             20
#define CONST_PREV_ACCEL_BUFFER_SIZE                             40
#define CONST_INVALID_FNMOD_SLOT                                 255
#define CONST_MAX_DEPLOYED_EQUIPMENT                             5
#define CONST_MAX_DEPLOYED_SYMBOLS                               5
#define CONST_MAX_DEPLOYED_CHARACTER_USABLES                     5
#define CONST_MAX_DEPLOYED_VEHICLE_USABLES                       5
#define CONST_MAX_DEPLOYED_USABLES                               10
#define CONST_MAX_REUSE_GROUPS                                   250
#define CONST_MAX_STACKING_SLOTS                                 100
#define CONST_MAX_CATEGORY_STACKING_SLOTS                        33
#define CONST_MAX_AMMO_TYPES                                     20
#define CONST_MAX_CUSTOM_COLOURS                                 48
#define CONST_MAX_CUSTOM_COLOURS_ARRAYSIZE                       96
#define CONST_nHOURS_PER_DAY                                     24
#define CONST_nMINS_PER_HOUR                                     60
#define CONST_nSECS_PER_MIN                                      60
#define CONST_nMINS_PER_DAY                                      1440
#define CONST_nSECS_PER_HOUR                                     3600
#define CONST_nSECS_PER_DAY                                      86400
#define CONST_PREPARE_TO_HALT_DURATION                           4.0f
#define CONST_REDUCE_TIME_INTERVAL_BY                            0.10f
#define CONST_MAX_ROUTE_LENGTH_RATIO                             3.0f
#define CONST_MaxIterationCount                                  10000
#define CONST_IterationsPerTick                                  50
#define CONST_Alpha                                              5.0f
#define CONST_MAX_PRESETS_NUM                                    100

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum APBGame.cSDD.etAnimationDescriptor
/*enum etAnimationDescriptor
{
	None                                               = 0,
	ClimbFence2m                                       = 1,
	ClimbFence3m                                       = 2,
	Default                                            = 3,
	KickDoorBack                                       = 4,
	KickDoorFront                                      = 5,
	LadderDownCurvedTop4m                              = 6,
	LadderDownCurvedTop4mTired                         = 7,
	LadderDownCurvedTop8m                              = 8,
	LadderDownCurvedTop8mTired                         = 9,
	LadderDownStraightTop4m                            = 10,
	LadderDownStraightTop4mTired                       = 11,
	LadderDownStraightTop8m                            = 12,
	LadderDownStraightTop8mTired                       = 13,
	LadderUpCurvedTop4m                                = 14,
	LadderUpCurvedTop4mTired                           = 15,
	LadderUpCurvedTop8m                                = 16,
	LadderUpCurvedTop8mTired                           = 17,
	LadderUpStraightTop4m                              = 18,
	LadderUpStraightTop4mTired                         = 19,
	LadderUpStraightTop8m                              = 20,
	LadderUpStraightTop8mTired                         = 21,
	etAnimationDescriptor_MAX                          = 22
};*/

// Enum APBGame.cSDD.etAnimTreeDecision_EquippedItem
/*enum etAnimTreeDecision_EquippedItem
{
	None                                               = 0,
	AssaultRifle                                       = 1,
	BeanBagGun                                         = 2,
	ShotGun                                            = 3,
	SniperRifle                                        = 4,
	SubMachineGun                                      = 5,
	Pistol                                             = 6,
	Snub                                               = 7,
	GrenadeLauncher                                    = 8,
	HeavyMachineGun                                    = 9,
	RocketLauncher                                     = 10,
	MachinePistol                                      = 11,
	StarterSubMachineGun                               = 12,
	Magnum                                             = 13,
	Magnum_Enf                                         = 14,
	SemiAutoRifle                                      = 15,
	DartGun                                            = 16,
	Grenades                                           = 17,
	StunGun                                            = 18,
	StunShotgun                                        = 19,
	Rifle                                              = 20,
	50CalSniperRifle                                   = 21,
	BurstFirePistol                                    = 22,
	etAnimTreeDecision_EquippedItem_MAX                = 23
};*/

// Enum APBGame.cSDD.etAnimTreeDecision_Vehicle
/*enum etAnimTreeDecision_Vehicle
{
	None                                               = 0,
	StandardCar                                        = 1,
	StandardVan                                        = 2,
	VanSlideDoor                                       = 3,
	StandardTruck                                      = 4,
	etAnimTreeDecision_Vehicle_MAX                     = 5
};*/

// Enum APBGame.cSDD.etAPBSupportPages
/*enum etAPBSupportPages
{
	NotDefined                                         = 0,
	AccountManagementURL                               = 1,
	BuyPointsURL                                       = 2,
	CreateAccountURL                                   = 3,
	CreditsURL                                         = 4,
	CurrencyInfo                                       = 5,
	GarageHelpURL                                      = 6,
	HarassmentURL                                      = 7,
	HelpMailURL                                        = 8,
	HelpURL                                            = 9,
	KB_Ammo                                            = 10,
	KB_Contact_Interact                                = 11,
	KB_Contact_LevelUp                                 = 12,
	KB_Contact_Max                                     = 13,
	KB_Inventory                                       = 14,
	KB_Marketplace                                     = 15,
	KB_Mission_Rewards                                 = 16,
	KB_MusicStudio                                     = 17,
	KB_MusicStudio_Locker                              = 18,
	KB_Notoriety                                       = 19,
	KB_Notoriety_KillPed                               = 20,
	KB_OpenWorld_Mugging                               = 21,
	KB_OpenWorld_RamRaid                               = 22,
	KB_OpenWorld_Vehicles                              = 23,
	KB_Persona                                         = 24,
	KB_Prestige                                        = 25,
	KB_Prestige_KillPed                                = 26,
	KB_Settings_Capture                                = 27,
	KB_Settings_Voip                                   = 28,
	KB_Social_Clan                                     = 29,
	KB_Social_GroupsFriends                            = 30,
	KB_Threat                                          = 31,
	KB_Threat_APBDispatch                              = 32,
	KB_Witnessing_Crim                                 = 33,
	KB_Witnessing_Enf                                  = 34,
	KnowledgeBaseURL                                   = 35,
	PreOrderURL                                        = 36,
	TestURL                                            = 37,
	Vault                                              = 38,
	Vault_Achievement                                  = 39,
	Vault_Character                                    = 40,
	Vault_Contact                                      = 41,
	Vault_Item                                         = 42,
	Vault_League                                       = 43,
	Vault_Organisation                                 = 44,
	Vault_Role                                         = 45,
	Vault_WIP                                          = 46,
	WardrobeHelpURL                                    = 47,
	etAPBSupportPages_MAX                              = 48
};*/

// Enum APBGame.cSDD.etBombLevel
/*enum etBombLevel
{
	Bomb_Investigate                                   = 0,
	Bomb_Level                                         = 1,
	Bomb_Level01                                       = 2,
	Bomb_Level02                                       = 3,
	Bomb_Level03                                       = 4,
	Bomb_MAX                                           = 5
};*/

// Enum APBGame.cSDD.etCC_ArrayPurchaseElement
/*enum etCC_ArrayPurchaseElement
{
	Scars                                              = 0,
	Tattoos                                            = 1,
	FacialHair                                         = 2,
	etCC_ArrayPurchaseElement_MAX                      = 3
};*/

// Enum APBGame.cSDD.etCC_PurchaseElement
/*enum etCC_PurchaseElement
{
	BodyPaint                                          = 0,
	Breasts                                            = 1,
	Cheek                                              = 2,
	Chin                                               = 3,
	Curviness                                          = 4,
	Ears                                               = 5,
	EyeBrow_Color                                      = 6,
	EyeBrows_Shape                                     = 7,
	EyeLids                                            = 8,
	Face                                               = 9,
	FacePaint                                          = 10,
	FacialHair                                         = 11,
	Forehead                                           = 12,
	Hair_Color                                         = 13,
	Hair_Style                                         = 14,
	Height                                             = 15,
	Lips                                               = 16,
	LipSize                                            = 17,
	LipsShape                                          = 18,
	MakeUp_Blusher                                     = 19,
	MakeUp_EyeLiner                                    = 20,
	MakeUp_EyeShadow                                   = 21,
	MakeUp_Lipstick                                    = 22,
	MakeUP_Mascara                                     = 23,
	MakeUp_NailVarnish                                 = 24,
	MolesFreckles                                      = 25,
	Muscles                                            = 26,
	Nose                                               = 27,
	OcularStructure                                    = 28,
	PresetTattoo                                       = 29,
	Scars                                              = 30,
	Skin                                               = 31,
	SkinPigment                                        = 32,
	SkinTone                                           = 33,
	Tattoos                                            = 34,
	Weight                                             = 35,
	ContactLenses                                      = 36,
	etCC_PurchaseElement_MAX                           = 37
};*/

// Enum APBGame.cSDD.etCharacterInteractionMenu
/*enum etCharacterInteractionMenu
{
	0                                                  = 0,
	1                                                  = 1,
	2                                                  = 2,
	3                                                  = 3,
	4                                                  = 4,
	5                                                  = 5,
	etCharacterInteractionMenu_MAX                     = 6
};*/

// Enum APBGame.cSDD.etClothingItemCategory
/*enum etClothingItemCategory
{
	None                                               = 0,
	ClothingAccessory                                  = 1,
	ClothingBadges                                     = 2,
	ClothingBelts                                      = 3,
	ClothingBodyHair                                   = 4,
	ClothingCoat                                       = 5,
	ClothingContact                                    = 6,
	ClothingFacewear                                   = 7,
	ClothingFacialHair                                 = 8,
	ClothingFootwear                                   = 9,
	ClothingFootwearShoes                              = 10,
	ClothingFootwearSocks                              = 11,
	ClothingGloves                                     = 12,
	ClothingHeadwear                                   = 13,
	ClothingJewellery                                  = 14,
	ClothingNotForRelease                              = 15,
	ClothingTest                                       = 16,
	ClothingTop                                        = 17,
	ClothingTrousers                                   = 18,
	ClothingUnderwear                                  = 19,
	ClothingUnderwearBra                               = 20,
	ClothingUnderwearPants                             = 21,
	etClothingItemCategory_MAX                         = 22
};*/

// Enum APBGame.cSDD.etConsoleCommand
/*enum etConsoleCommand
{
	(GM)_End_Conversation                              = 0,
	(GM)_End_Mission                                   = 1,
	(GM)_Free_Fly_Camera_Mode                          = 2,
	(GM)_Freeze_Player                                 = 3,
	(GM)_Goto_Player                                   = 4,
	(GM)_Kick_Player                                   = 5,
	(GM)_Repair_Vehicle                                = 6,
	(GM)_Set_Opposition                                = 7,
	(GM)_Set_Run_Speed                                 = 8,
	(GM)_Start_Mission                                 = 9,
	(GM)_Summon_Player                                 = 10,
	(GM)_Teleport                                      = 11,
	(GM)_Toggle_Collision                              = 12,
	(GM)_Toggle_Invincibility                          = 13,
	(GM)_Toggle_Invisibility                           = 14,
	(GM)_Toggle_Mission_Offers                         = 15,
	(GM)_UnFreeze_Player                               = 16,
	Abandon_Mission                                    = 17,
	Accept_Clan_Invite                                 = 18,
	Accept_Group_Invite                                = 19,
	Add_Friend                                         = 20,
	Cancel_Unstick                                     = 21,
	Clan_Invite                                        = 22,
	Clan_Leave                                         = 23,
	Clan_Remove                                        = 24,
	Exit                                               = 25,
	Group_Info                                         = 26,
	Group_Invite                                       = 27,
	Group_Invite_Mode_                                 = 28,
	Group_Invite_Mode_Default                          = 29,
	Group_Join                                         = 30,
	Group_List                                         = 31,
	Group_Public_Mode_                                 = 32,
	Group_Public_Mode_Default                          = 33,
	Group_Remove                                       = 34,
	Help                                               = 35,
	Ignore_Player                                      = 36,
	Leave_Group                                        = 37,
	Logout                                             = 38,
	Looking_For_Group                                  = 39,
	Player_List                                        = 40,
	Remove_Friend                                      = 41,
	Save_Chat_Log                                      = 42,
	Set_AFK                                            = 43,
	Set_Available                                      = 44,
	Set_DND                                            = 45,
	Show_Names                                         = 46,
	Start_Movie_Capture                                = 47,
	Start_Movie_Precapture                             = 48,
	Stop_Movie_Capture                                 = 49,
	Time_Played                                        = 50,
	Toggle_FPS                                         = 51,
	Toggle_FPS_Detail                                  = 52,
	Toggle_Movie_Capture                               = 53,
	Toggle_Profanity_Filter                            = 54,
	Toggle_Timestamps                                  = 55,
	Transfer_Group_Leadership                          = 56,
	Unignore                                           = 57,
	Unstick                                            = 58,
	World_Population                                   = 59,
	etConsoleCommand_MAX                               = 60
};*/

// Enum APBGame.cSDD.etContact
/*enum etContact
{
	None                                               = 0,
	Clyde                                              = 1,
	CriminalDefaultOrganisation                        = 2,
	CriminalSocial                                     = 3,
	CriminalSocial_Turf                                = 4,
	District4_C1                                       = 5,
	District4_C10                                      = 6,
	District4_C2                                       = 7,
	District4_C3                                       = 8,
	District4_C4                                       = 9,
	District4_C5                                       = 10,
	District4_C6                                       = 11,
	District4_C7                                       = 12,
	District4_C8                                       = 13,
	District4_C9                                       = 14,
	District4_E1                                       = 15,
	District4_E10                                      = 16,
	District4_E2                                       = 17,
	District4_E3                                       = 18,
	District4_E4                                       = 19,
	District4_E5                                       = 20,
	District4_E6                                       = 21,
	District4_E7                                       = 22,
	District4_E8                                       = 23,
	District4_E9                                       = 24,
	District5_C1                                       = 25,
	District5_C10                                      = 26,
	District5_C2                                       = 27,
	District5_C3                                       = 28,
	District5_C4                                       = 29,
	District5_C5                                       = 30,
	District5_C6                                       = 31,
	District5_C7                                       = 32,
	District5_C8                                       = 33,
	District5_C9                                       = 34,
	District5_E1                                       = 35,
	District5_E10                                      = 36,
	District5_E2                                       = 37,
	District5_E3                                       = 38,
	District5_E4                                       = 39,
	District5_E5                                       = 40,
	District5_E6                                       = 41,
	District5_E7                                       = 42,
	District5_E8                                       = 43,
	District5_E9                                       = 44,
	EnforcerDefaultOrganisation                        = 45,
	EnforcerSocial                                     = 46,
	EnforcerSocial_Turf                                = 47,
	Financial_C1                                       = 48,
	Financial_C10                                      = 49,
	Financial_C2                                       = 50,
	Financial_C3                                       = 51,
	Financial_C4                                       = 52,
	Financial_C5                                       = 53,
	Financial_C6                                       = 54,
	Financial_C7                                       = 55,
	Financial_C8                                       = 56,
	Financial_C9                                       = 57,
	Financial_E1                                       = 58,
	Financial_E10                                      = 59,
	Financial_E2                                       = 60,
	Financial_E3                                       = 61,
	Financial_E4                                       = 62,
	Financial_E5                                       = 63,
	Financial_E6                                       = 64,
	Financial_E7                                       = 65,
	Financial_E8                                       = 66,
	Financial_E9                                       = 67,
	Inky                                               = 68,
	LCTester                                           = 69,
	LCTester2                                          = 70,
	LCTester3                                          = 71,
	Midtown_C1                                         = 72,
	Midtown_C10                                        = 73,
	Midtown_C2                                         = 74,
	Midtown_C3                                         = 75,
	Midtown_C4                                         = 76,
	Midtown_C5                                         = 77,
	Midtown_C6                                         = 78,
	Midtown_C7                                         = 79,
	Midtown_C8                                         = 80,
	Midtown_C9                                         = 81,
	Midtown_E1                                         = 82,
	Midtown_E10                                        = 83,
	Midtown_E2                                         = 84,
	Midtown_E3                                         = 85,
	Midtown_E4                                         = 86,
	Midtown_E5                                         = 87,
	Midtown_E6                                         = 88,
	Midtown_E7                                         = 89,
	Midtown_E8                                         = 90,
	Midtown_E9                                         = 91,
	Binky                                              = 92,
	Organisation_BloodRoses                            = 93,
	Organisation_GKings                                = 94,
	Organisation_Praetorian                            = 95,
	Organisation_RedRain                               = 96,
	Organisation_SPPD                                  = 97,
	Pinky                                              = 98,
	ReviewTestMap_C1                                   = 99,
	ReviewTestMap_E1                                   = 100,
	Social                                             = 101,
	Social01                                           = 102,
	Social02                                           = 103,
	Social03                                           = 104,
	Waterfront_C1                                      = 105,
	Waterfront_C10                                     = 106,
	Waterfront_C2                                      = 107,
	Waterfront_C3                                      = 108,
	Waterfront_C4                                      = 109,
	Waterfront_C5                                      = 110,
	Waterfront_C6                                      = 111,
	Waterfront_C7                                      = 112,
	Waterfront_C8                                      = 113,
	Waterfront_C9                                      = 114,
	Waterfront_E1                                      = 115,
	Waterfront_E10                                     = 116,
	Waterfront_E2                                      = 117,
	Waterfront_E3                                      = 118,
	Waterfront_E4                                      = 119,
	Waterfront_E5                                      = 120,
	Waterfront_E6                                      = 121,
	Waterfront_E7                                      = 122,
	Waterfront_E8                                      = 123,
	Waterfront_E9                                      = 124,
	Winky                                              = 125,
	Organisation_PrentissTigers                        = 126,
	etContact_MAX                                      = 127
};*/

// Enum APBGame.cSDD.etCSA_InputMapping
/*enum etCSA_InputMapping
{
	None                                               = 0,
	Equipment                                          = 1,
	Primary                                            = 2,
	Secondary                                          = 3,
	Inventory                                          = 4,
	DropTaskItem                                       = 5,
	Tertiary                                           = 6,
	Locker                                             = 7,
	etCSA_InputMapping_MAX                             = 8
};*/

// Enum APBGame.cSDD.etDefaultOutfitItem
/*enum etDefaultOutfitItem
{
	Clothing_Preset_Male_Top_Default_Criminal_AShirt   = 0,
	Clothing_Preset_Male_Trousers_Default_Criminal_WarmUpPants = 1,
	Clothing_Preset_Male_Top_Default_Enforcer_RingerT  = 2,
	Clothing_Preset_Male_Trousers_Default_Enforcer_WarmUpPants = 3,
	Clothing_M_Footwear_Trainers_Urban_HipHopYoDawg    = 4,
	Clothing_M_Underwear_Boxers_Athletic_Drawstring    = 5,
	Clothing_Preset_Female_Top_Default_Criminal_TankTop = 6,
	Clothing_Preset_Female_Trousers_Default_Criminal_WarmUpPants = 7,
	Clothing_Preset_Female_Top_Default_Enforcer_RingerT = 8,
	Clothing_Preset_Female_Trousers_Default_Enforcer_WarmUpPants = 9,
	Clothing_F_Footwear_Trainers_Urban_Plain           = 10,
	Clothing_F_Underwear_Bra_Functional_Plain          = 11,
	Clothing_F_Underwear_Shorties_Functional_Plain     = 12,
	Clothing_MAX                                       = 13
};*/

// Enum APBGame.cSDD.etDisplayPoint
/*enum etDisplayPoint
{
	None                                               = 0,
	Financial_Display_Graffiti_01                      = 1,
	Financial_Display_Graffiti_02                      = 2,
	Financial_Display_Graffiti_03                      = 3,
	Financial_Display_Graffiti_04                      = 4,
	Financial_Display_Graffiti_05                      = 5,
	Financial_Display_Graffiti_06                      = 6,
	Financial_Display_Graffiti_07                      = 7,
	Financial_Display_Graffiti_08                      = 8,
	Financial_Display_Graffiti_09                      = 9,
	Financial_Display_Graffiti                         = 10,
	Financial_Display_Graffiti01                       = 11,
	Financial_Display_Graffiti02                       = 12,
	Financial_Display_Graffiti03                       = 13,
	Financial_Display_Graffiti04                       = 14,
	Financial_Display_Graffiti05                       = 15,
	Financial_Display_Graffiti06                       = 16,
	Financial_Display_Graffiti07                       = 17,
	Financial_Display_Graffiti08                       = 18,
	Financial_Display_Graffiti09                       = 19,
	Financial_Display_Graffiti10                       = 20,
	Financial_Display_Graffiti11                       = 21,
	Financial_Display_Graffiti12                       = 22,
	Financial_Display_Graffiti13                       = 23,
	Financial_Display_Graffiti14                       = 24,
	Financial_Display_Graffiti15                       = 25,
	Financial_Display_Graffiti16                       = 26,
	Financial_Display_Graffiti17                       = 27,
	Financial_Display_Graffiti18                       = 28,
	Financial_Display_Graffiti19                       = 29,
	Financial_Display_Graffiti20                       = 30,
	Financial_Display_Graffiti21                       = 31,
	Financial_Display_Graffiti22                       = 32,
	Financial_Display_Graffiti23                       = 33,
	Financial_Display_Graffiti24                       = 34,
	Financial_Display_Graffiti25                       = 35,
	Financial_Display_Graffiti26                       = 36,
	Financial_Display_Graffiti27                       = 37,
	Financial_Display_Graffiti28                       = 38,
	Financial_Display_Graffiti29                       = 39,
	Financial_Display_Graffiti30                       = 40,
	Financial_Display_Graffiti31                       = 41,
	Financial_Display_Graffiti32                       = 42,
	Financial_Display_Graffiti33                       = 43,
	Financial_Display_Graffiti34                       = 44,
	Financial_Display_Graffiti35                       = 45,
	Financial_Display_Graffiti36                       = 46,
	Financial_Display_Graffiti37                       = 47,
	Financial_Display_Graffiti38                       = 48,
	Financial_Display_Graffiti39                       = 49,
	Financial_Display_Graffiti40                       = 50,
	Financial_League_Statue01                          = 51,
	Financial_League_Statue02                          = 52,
	Financial_League_Statue03                          = 53,
	Financial_League_Statue04                          = 54,
	Financial_League_Statue05                          = 55,
	Financial_League_Statue06                          = 56,
	Financial_League_Statue07                          = 57,
	Social_Free_Audio_01                               = 58,
	Social_Free_Audio_02                               = 59,
	Social_Free_Audio_03                               = 60,
	Social_Free_Audio_04                               = 61,
	Social_Free_Audio_05                               = 62,
	Social_Free_Audio_06                               = 63,
	Social_Free_Graffiti_01                            = 64,
	Social_Free_Graffiti_02                            = 65,
	Social_Free_Graffiti_03                            = 66,
	Social_Free_Graffiti_04                            = 67,
	Social_Free_Graffiti_05                            = 68,
	Social_Free_Graffiti_06                            = 69,
	Social_Free_Graffiti_07                            = 70,
	Social_Free_Graffiti_08                            = 71,
	Social_Free_Graffiti_09                            = 72,
	Social_Free_Graffiti                               = 73,
	Social_Free_Graffiti01                             = 74,
	Social_Free_Graffiti02                             = 75,
	Social_Free_Graffiti03                             = 76,
	Social_Free_Graffiti04                             = 77,
	Social_Free_Graffiti05                             = 78,
	Social_Free_Graffiti06                             = 79,
	Social_Free_Graffiti07                             = 80,
	Social_Free_Graffiti08                             = 81,
	Social_Free_Graffiti09                             = 82,
	Social_Free_Graffiti10                             = 83,
	Social_Free_Graffiti11                             = 84,
	Social_Free_Graffiti12                             = 85,
	Social_Free_Vehicle_01                             = 86,
	Social_Free_Vehicle_02                             = 87,
	Social_Free_Vehicle_03                             = 88,
	Social_Free_Vehicle_04                             = 89,
	Social_Free_Vehicle_05                             = 90,
	Social_Free_Vehicle_06                             = 91,
	Social_Free_Vehicle_07                             = 92,
	Social_Free_Vehicle_08                             = 93,
	Social_Free_Vehicle_09                             = 94,
	Social_Free_Vehicle                                = 95,
	Social_Free_Vehicle01                              = 96,
	Social_Free_Vehicle02                              = 97,
	Social_Free_Vehicle03                              = 98,
	Social_Free_Vehicle04                              = 99,
	Social_Free_Vehicle05                              = 100,
	Social_League_Graffiti_01                          = 101,
	Social_League_Graffiti_02                          = 102,
	Social_League_Graffiti_03                          = 103,
	Social_League_Graffiti_04                          = 104,
	Social_League_Graffiti_05                          = 105,
	Social_League_Graffiti_06                          = 106,
	Social_League_Graffiti_07                          = 107,
	Social_League_Graffiti_08                          = 108,
	Social_League_Graffiti_09                          = 109,
	Social_League_Graffiti                             = 110,
	Social_League_Graffiti01                           = 111,
	Social_League_Graffiti02                           = 112,
	Social_League_Graffiti03                           = 113,
	Social_League_Graffiti04                           = 114,
	Social_League_Graffiti05                           = 115,
	Social_League_Graffiti06                           = 116,
	Social_League_Graffiti07                           = 117,
	Social_League_Graffiti08                           = 118,
	Social_League_Graffiti09                           = 119,
	Social_League_Graffiti10                           = 120,
	Social_League_Graffiti11                           = 121,
	Social_League_Graffiti12                           = 122,
	Social_League_Graffiti13                           = 123,
	Social_League_Graffiti14                           = 124,
	Social_League_Graffiti15                           = 125,
	Social_League_Graffiti16                           = 126,
	Social_League_Statue01                             = 127,
	Social_League_Statue02                             = 128,
	Social_League_Statue03                             = 129,
	Social_League_Statue04                             = 130,
	Social_League_Statue05                             = 131,
	Social_League_Statue06                             = 132,
	Social_League_Statue07                             = 133,
	Social_League_Statue08                             = 134,
	Social_League_Statue09                             = 135,
	Social_League_Statue10                             = 136,
	Social_League_Statue11                             = 137,
	Social_League_Statue12                             = 138,
	Social_League_Statue13                             = 139,
	Social_League_Statue14                             = 140,
	Social_League_Statue15                             = 141,
	Social_League_Statue16                             = 142,
	Social_League_Statue17                             = 143,
	Social_League_Statue18                             = 144,
	Social_League_Statue19                             = 145,
	Social_League_Statue20                             = 146,
	Social_League_Statue21                             = 147,
	Social_League_Statue22                             = 148,
	Social_Purchasable_Graffiti_01                     = 149,
	Social_Purchasable_Graffiti_02                     = 150,
	Social_Purchasable_Graffiti_03                     = 151,
	Social_Purchasable_Graffiti_04                     = 152,
	Social_Purchasable_Graffiti_05                     = 153,
	Social_Purchasable_Graffiti_06                     = 154,
	Social_Purchasable_Graffiti_07                     = 155,
	Social_Purchasable_Graffiti_08                     = 156,
	Social_Purchasable_Graffiti_09                     = 157,
	Social_Purchasable_Graffiti                        = 158,
	Social_Purchasable_Graffiti01                      = 159,
	Social_Purchasable_Graffiti02                      = 160,
	Social_Purchasable_Graffiti03                      = 161,
	Social_Purchasable_Graffiti04                      = 162,
	Social_Purchasable_Graffiti05                      = 163,
	Social_Purchasable_Graffiti06                      = 164,
	Social_Purchasable_Graffiti07                      = 165,
	Social_Purchasable_Graffiti08                      = 166,
	Social_Purchasable_Graffiti09                      = 167,
	Social_Purchasable_Graffiti10                      = 168,
	Social_Purchasable_Graffiti11                      = 169,
	Social_Purchasable_Graffiti12                      = 170,
	Social_Purchasable_Graffiti13                      = 171,
	Social_Purchasable_Graffiti14                      = 172,
	Social_Purchasable_Graffiti15                      = 173,
	Social_Purchasable_Statue_01                       = 174,
	Social_Purchasable_Statue_02                       = 175,
	Social_Purchasable_Statue_03                       = 176,
	Social_Purchasable_Statue_04                       = 177,
	Social_Purchasable_Statue_05                       = 178,
	Social_Purchasable_Statue_06                       = 179,
	Social_Purchasable_Statue_07                       = 180,
	Social_Purchasable_Statue_08                       = 181,
	Social_Purchasable_Statue_09                       = 182,
	Social_Purchasable_Statue                          = 183,
	Social_Purchasable_Statue01                        = 184,
	Social_Purchasable_Statue02                        = 185,
	Social_Purchasable_Statue03                        = 186,
	Social_Purchasable_Statue04                        = 187,
	Social_Purchasable_Statue05                        = 188,
	Social_Purchasable_Statue06                        = 189,
	Social_Purchasable_Statue07                        = 190,
	Social_Purchasable_Statue08                        = 191,
	Social_Purchasable_Statue09                        = 192,
	Social_Purchasable_Statue10                        = 193,
	Social_Purchasable_Vehicle_01                      = 194,
	Social_Purchasable_Vehicle_02                      = 195,
	Social_Purchasable_Vehicle_03                      = 196,
	Social_Purchasable_Vehicle_04                      = 197,
	Social_Purchasable_Vehicle_05                      = 198,
	Social_Purchasable_Vehicle_06                      = 199,
	Social_Purchasable_Vehicle_07                      = 200,
	Social_Purchasable_Vehicle_08                      = 201,
	Social_Purchasable_Vehicle_09                      = 202,
	Test_Audio                                         = 203,
	Test_Graffiti                                      = 204,
	Test_Graffiti01                                    = 205,
	Test_Statue                                        = 206,
	Test_Vehicle_Criminal                              = 207,
	Test_Vehicle_Criminal01                            = 208,
	Test_Vehicle_Enforcer                              = 209,
	Test_Vehicle_Enforcer01                            = 210,
	Waterfront_Free_Graffiti_01                        = 211,
	Waterfront_Free_Graffiti_02                        = 212,
	Waterfront_Free_Graffiti_03                        = 213,
	Waterfront_Free_Graffiti_04                        = 214,
	Waterfront_Free_Graffiti_05                        = 215,
	Waterfront_Free_Graffiti_06                        = 216,
	Waterfront_Free_Graffiti_07                        = 217,
	Waterfront_Free_Graffiti_08                        = 218,
	Waterfront_Free_Graffiti_09                        = 219,
	Waterfront_Free_Graffiti                           = 220,
	Waterfront_Free_Graffiti01                         = 221,
	Waterfront_Free_Graffiti02                         = 222,
	Waterfront_Free_Graffiti03                         = 223,
	Waterfront_Free_Graffiti04                         = 224,
	Waterfront_Free_Graffiti05                         = 225,
	Waterfront_Free_Graffiti06                         = 226,
	Waterfront_Free_Graffiti07                         = 227,
	Waterfront_Free_Graffiti08                         = 228,
	Waterfront_Free_Graffiti09                         = 229,
	Waterfront_Free_Graffiti10                         = 230,
	Waterfront_Free_Graffiti11                         = 231,
	Waterfront_Free_Graffiti12                         = 232,
	Waterfront_Free_Graffiti13                         = 233,
	Waterfront_Free_Graffiti14                         = 234,
	Waterfront_Free_Graffiti15                         = 235,
	Waterfront_Free_Graffiti16                         = 236,
	Waterfront_Free_Graffiti17                         = 237,
	Waterfront_Free_Graffiti18                         = 238,
	Waterfront_Free_Graffiti19                         = 239,
	Waterfront_Free_Graffiti20                         = 240,
	Waterfront_Free_Graffiti21                         = 241,
	Waterfront_Free_Graffiti22                         = 242,
	Waterfront_Free_Graffiti23                         = 243,
	Waterfront_Free_Graffiti24                         = 244,
	Waterfront_Free_Graffiti25                         = 245,
	Waterfront_Free_Graffiti26                         = 246,
	Waterfront_Free_Graffiti27                         = 247,
	Waterfront_Free_Graffiti28                         = 248,
	Waterfront_Free_Graffiti29                         = 249,
	Waterfront_Free_Graffiti30                         = 250,
	Waterfront_Free_Graffiti31                         = 251,
	Waterfront_Free_Graffiti32                         = 252,
	Waterfront_Free_Graffiti33                         = 253,
	Waterfront_Free_Graffiti34                         = 254,
	Waterfront_Free_Graffiti35                         = 255,
	Waterfront_Free_Graffiti36                         = 256,
	Waterfront_Free_Graffiti37                         = 257,
	Waterfront_Free_Graffiti38                         = 258,
	Waterfront_Free_Graffiti39                         = 259,
	Waterfront_Free_Graffiti40                         = 260,
	Waterfront_League_Statue01                         = 261,
	Waterfront_League_Statue02                         = 262,
	Waterfront_League_Statue03                         = 263,
	Waterfront_League_Statue04                         = 264,
	Waterfront_League_Statue05                         = 265,
	Waterfront_League_Statue06                         = 266,
	Waterfront_League_Statue07                         = 267,
	etDisplayPoint_MAX                                 = 268
};*/

// Enum APBGame.cSDD.etDistrictBlock
/*enum etDistrictBlock
{
	DistrictBlock_None                                 = 0,
	Financial_Block01                                  = 1,
	Financial_Block02                                  = 2,
	Financial_Block03                                  = 3,
	Financial_Block04                                  = 4,
	Financial_Block05                                  = 5,
	Financial_Block06                                  = 6,
	Financial_Block07                                  = 7,
	Financial_Block08                                  = 8,
	Financial_Block09                                  = 9,
	Financial_Block10                                  = 10,
	Financial_Block11                                  = 11,
	Financial_Block12                                  = 12,
	Financial_Block13                                  = 13,
	Financial_Block14                                  = 14,
	Financial_Block15                                  = 15,
	Financial_Block16                                  = 16,
	Financial_Block17                                  = 17,
	Financial_Block18                                  = 18,
	Financial_Block19                                  = 19,
	Financial_Block20                                  = 20,
	Financial_Block21                                  = 21,
	Financial_Block22                                  = 22,
	Financial_Block23                                  = 23,
	Financial_Block24                                  = 24,
	Financial_Block25                                  = 25,
	Financial_Block26                                  = 26,
	Financial_Block27                                  = 27,
	Financial_Block28                                  = 28,
	Financial_Block29                                  = 29,
	Financial_Block30                                  = 30,
	Financial_Block31                                  = 31,
	Financial_Block32                                  = 32,
	Financial_Block33                                  = 33,
	Financial_Block34                                  = 34,
	Financial_Block35                                  = 35,
	Financial_Block36                                  = 36,
	Financial_Block37                                  = 37,
	Financial_Block38                                  = 38,
	Financial_Block39                                  = 39,
	Financial_Block40                                  = 40,
	Financial_Block41                                  = 41,
	Financial_Block42                                  = 42,
	Financial_Block43                                  = 43,
	Financial_Block44                                  = 44,
	Financial_Block45                                  = 45,
	Financial_Block46                                  = 46,
	Financial_Block47                                  = 47,
	Financial_Block48                                  = 48,
	LC_Gameplay_TestMap_Block01                        = 49,
	LC_Gameplay_TestMap_Block02                        = 50,
	LC_Gameplay_TestMap_Block03                        = 51,
	LC_Gameplay_TestMap_Block04                        = 52,
	LC_Gameplay_TestMap_Block05                        = 53,
	LC_Gameplay_TestMap_Block06                        = 54,
	LC_Gameplay_TestMap_Block07                        = 55,
	LC_Gameplay_TestMap_Block08                        = 56,
	LC_Gameplay_TestMap_Block09                        = 57,
	Midtown_Block01                                    = 58,
	Midtown_Block02                                    = 59,
	Midtown_Block03                                    = 60,
	Midtown_Block04                                    = 61,
	Midtown_Block05                                    = 62,
	Midtown_Block06                                    = 63,
	Midtown_Block07                                    = 64,
	Midtown_Block08                                    = 65,
	Midtown_Block09                                    = 66,
	Midtown_Block10                                    = 67,
	Midtown_Block11                                    = 68,
	Midtown_Block12                                    = 69,
	Midtown_Block13                                    = 70,
	Midtown_Block14                                    = 71,
	Midtown_Block15                                    = 72,
	Midtown_Block16                                    = 73,
	Midtown_Block17                                    = 74,
	Midtown_Block18                                    = 75,
	Midtown_Block19                                    = 76,
	Midtown_Block20                                    = 77,
	Midtown_Block21                                    = 78,
	Midtown_Block22                                    = 79,
	Midtown_Block23                                    = 80,
	Midtown_Block24                                    = 81,
	Midtown_Block25                                    = 82,
	Midtown_Block26                                    = 83,
	Midtown_Block27                                    = 84,
	Midtown_Block28                                    = 85,
	Midtown_Block29                                    = 86,
	Midtown_Block30                                    = 87,
	Midtown_Block31                                    = 88,
	Midtown_Block32                                    = 89,
	Midtown_Block33                                    = 90,
	Midtown_Block34                                    = 91,
	Midtown_Block35                                    = 92,
	Midtown_Block36                                    = 93,
	Midtown_Block37                                    = 94,
	Midtown_Block38                                    = 95,
	Midtown_Block39                                    = 96,
	Midtown_Block40                                    = 97,
	Midtown_Block41                                    = 98,
	Midtown_Block42                                    = 99,
	Midtown_Block43                                    = 100,
	Midtown_Block44                                    = 101,
	Midtown_Block45                                    = 102,
	ReviewTestMap_Block01                              = 103,
	SimpleGameplayLevel_Block01                        = 104,
	SimpleGameplayLevel_Block02                        = 105,
	TestTurf_BlockC1                                   = 106,
	TestTurf_BlockC2                                   = 107,
	TestTurf_BlockE1                                   = 108,
	TestTurf_BlockE2                                   = 109,
	Waterfront_Block01                                 = 110,
	Waterfront_Block02                                 = 111,
	Waterfront_Block03                                 = 112,
	Waterfront_Block04                                 = 113,
	Waterfront_Block05                                 = 114,
	Waterfront_Block06                                 = 115,
	Waterfront_Block07                                 = 116,
	Waterfront_Block08                                 = 117,
	Waterfront_Block09                                 = 118,
	Waterfront_Block10                                 = 119,
	Waterfront_Block11                                 = 120,
	Waterfront_Block12                                 = 121,
	Waterfront_Block13                                 = 122,
	Waterfront_Block14                                 = 123,
	Waterfront_Block15                                 = 124,
	Waterfront_Block16                                 = 125,
	Waterfront_Block17                                 = 126,
	Waterfront_Block18                                 = 127,
	Waterfront_Block19                                 = 128,
	Waterfront_Block20                                 = 129,
	Waterfront_Block21                                 = 130,
	Waterfront_Block22                                 = 131,
	Waterfront_Block23                                 = 132,
	Waterfront_Block24                                 = 133,
	Waterfront_Block25                                 = 134,
	Waterfront_Block26                                 = 135,
	Waterfront_Block27                                 = 136,
	Waterfront_Block28                                 = 137,
	Waterfront_Block29                                 = 138,
	Waterfront_Block30                                 = 139,
	Waterfront_Block31                                 = 140,
	Waterfront_Block32                                 = 141,
	Waterfront_Block33                                 = 142,
	Waterfront_Block34                                 = 143,
	Waterfront_Block35                                 = 144,
	Waterfront_Block36                                 = 145,
	Waterfront_Block37                                 = 146,
	Waterfront_Block38                                 = 147,
	Waterfront_Block39                                 = 148,
	Waterfront_Block40                                 = 149,
	Waterfront_Block41                                 = 150,
	Waterfront_Block42                                 = 151,
	Waterfront_Block43                                 = 152,
	Waterfront_Block44                                 = 153,
	Waterfront_Block45                                 = 154,
	Financial_Block49                                  = 155,
	SimpleGameplayLevel_Block03                        = 156,
	SimpleGameplayLevel_Block04                        = 157,
	SimpleGameplayLevel_Block05                        = 158,
	SimpleGameplayLevel_Block06                        = 159,
	etDistrictBlock_MAX                                = 160
};*/

// Enum APBGame.cSDD.etDistrict
/*enum etDistrict
{
	None                                               = 0,
	CriminalSocial                                     = 1,
	EnforcerSocial                                     = 2,
	Financial                                          = 3,
	LC_Gameplay_TestMap                                = 4,
	Midtown                                            = 5,
	ReviewTestMap                                      = 6,
	SimpleGameplayLevel                                = 7,
	SimpleUILevel                                      = 8,
	Social                                             = 9,
	TestTurf                                           = 10,
	Waterfront                                         = 11,
	etDistrict_MAX                                     = 12
};*/

// Enum APBGame.cSDD.etDynamicMenuEntry
/*enum etDynamicMenuEntry
{
	Hair                                               = 0,
	Face                                               = 1,
	Eyes                                               = 2,
	Body                                               = 3,
	Skin                                               = 4,
	Scars                                              = 5,
	Gender                                             = 6,
	MakeUp                                             = 7,
	Tattoos                                            = 8,
	FacialBodyHair                                     = 9,
	Menu_FaceDepthTopDown                              = 10,
	ForeheadDetail                                     = 11,
	IrisColor/IrisSize                                 = 12,
	EarShape                                           = 13,
	Menu_EarSize                                       = 14,
	Menu_EarOrientation                                = 15,
	BrowShape                                          = 16,
	EyeBrowShape                                       = 17,
	EyeBrowColor                                       = 18,
	CheeckDetail                                       = 19,
	Menu_Cheeks                                        = 20,
	NoseShape                                          = 21,
	Menu_NoseLength                                    = 22,
	Menu_NoseBridge                                    = 23,
	Menu_NoseWidth                                     = 24,
	Menu_MouthWidthHeight                              = 25,
	Menu_LipShapeF                                     = 26,
	Menu_LipShapeM                                     = 27,
	Menu_LipSize                                       = 28,
	Menu_LipDetail                                     = 29,
	Menu_JawWidthHeight                                = 30,
	ChinShape                                          = 31,
	Menu_ChinLenghtDepth                               = 32,
	ChinDetail                                         = 33,
	PupilShape                                         = 34,
	EyeLashLength                                      = 35,
	EyeLidShape                                        = 36,
	EyeLidDetail                                       = 37,
	EyeSocketShape                                     = 38,
	EyeShapeF                                          = 39,
	EyeShapeM                                          = 40,
	EyeTilt                                            = 41,
	Menu_BodyWeight                                    = 42,
	Menu_BodyHeight                                    = 43,
	Menu_Muscularity                                   = 44,
	Menu_BreastSize                                    = 45,
	Menu_BreastPerkiness                               = 46,
	Menu_BodyEast                                      = 47,
	EyeShadow                                          = 48,
	EyeLiner                                           = 49,
	Blusher                                            = 50,
	LipstickColor                                      = 51,
	FacePaint                                          = 52,
	NailPolish                                         = 53,
	Menu_SkinTone                                      = 54,
	Menu_SkinPigment                                   = 55,
	AgeMarks                                           = 56,
	Wrinkles                                           = 57,
	Menu_Veins                                         = 58,
	Menu_Freckles                                      = 59,
	Menu_Moles                                         = 60,
	etDynamicMenuEntry_MAX                             = 61
};*/

// Enum APBGame.cSDD.etEmoteCommand
/*enum etEmoteCommand
{
	Angry                                              = 0,
	Animal                                             = 1,
	Body_Pop                                           = 2,
	Bored                                              = 3,
	Bow                                                = 4,
	Brag                                               = 5,
	Celebrate                                          = 6,
	Chicken                                            = 7,
	Chuckle                                            = 8,
	Clap                                               = 9,
	Coin_Toss                                          = 10,
	Cold                                               = 11,
	Confused                                           = 12,
	Congratulations                                    = 13,
	Cry                                                = 14,
	Dance                                              = 15,
	Dance_80s                                          = 16,
	Dance_Airguitar                                    = 17,
	Dance_Ballet                                       = 18,
	Dance_Comical                                      = 19,
	Dance_Goth                                         = 20,
	Dance_Hip_Hop                                      = 21,
	Dance_Irish                                        = 22,
	Dance_Metal                                        = 23,
	Dance_Michael                                      = 24,
	Dance_Punk                                         = 25,
	Dance_Robot                                        = 26,
	Dance_Signature                                    = 27,
	Dance_Techno                                       = 28,
	Disagree                                           = 29,
	Fart                                               = 30,
	Flirt                                              = 31,
	Hello                                              = 32,
	Insult                                             = 33,
	No                                                 = 34,
	Ready                                              = 35,
	Shock                                              = 36,
	Smoke                                              = 37,
	Strike_A_Pose_1                                    = 38,
	Strike_A_Pose_2                                    = 39,
	Surrender                                          = 40,
	Taunt                                              = 41,
	Threaten                                           = 42,
	Thumbs_Up                                          = 43,
	Dance_Urban                                        = 44,
	Victory                                            = 45,
	Wait                                               = 46,
	Wave                                               = 47,
	Whistle                                            = 48,
	Yes                                                = 49,
	etEmoteCommand_MAX                                 = 50
};*/

// Enum APBGame.cSDD.etEquipmentCategory
/*enum etEquipmentCategory
{
	None                                               = 0,
	BatteringRam                                       = 1,
	BrassKnuckes                                       = 2,
	Camera                                             = 3,
	Crowbar                                            = 4,
	Explosives                                         = 5,
	Hacking                                            = 6,
	HandcuffKeys                                       = 7,
	Handcuffs                                          = 8,
	PaintSprayer                                       = 9,
	PetrolCan                                          = 10,
	PoliceBadge                                        = 11,
	Sabotage                                           = 12,
	SlimJim                                            = 13,
	SprayCan                                           = 14,
	WireCutters                                        = 15,
	etEquipmentCategory_MAX                            = 16
};*/

// Enum APBGame.cSDD.etFactionRestrictedLocation
/*enum etFactionRestrictedLocation
{
	None                                               = 0,
	SimpleGameplayLevelTest_Both                       = 1,
	SimpleGameplayLevelTest_Criminal                   = 2,
	SimpleGameplayLevelTest_Enforcer                   = 3,
	Social_Criminal                                    = 4,
	Social_Enforcer                                    = 5,
	etFactionRestrictedLocation_MAX                    = 6
};*/

// Enum APBGame.cSDD.etGolemPartClass
/*enum etGolemPartClass
{
	None                                               = 0,
	Aliceband                                          = 1,
	Arm_SkinTight_L                                    = 2,
	Arm_SkinTight_R                                    = 3,
	Arm_Thick_L                                        = 4,
	Arm_Thick_R                                        = 5,
	Armour_Chest                                       = 6,
	Armour_Chest_Slim                                  = 7,
	Beard_Full_Medium                                  = 8,
	Beard_Full_Short                                   = 9,
	Beard_Full_Thick                                   = 10,
	Beard_Goatee                                       = 11,
	Beard_Goatee_Thick                                 = 12,
	Beard_GoateeFull                                   = 13,
	Beard_Moustache                                    = 14,
	Beard_Moustache_Thick                              = 15,
	Beard_Sideburns                                    = 16,
	Beard_Stubble                                      = 17,
	Belt_Chunky                                        = 18,
	Belt_High                                          = 19,
	Belt_Low                                           = 20,
	Belt_Standard                                      = 21,
	Chest_L                                            = 22,
	Dress                                              = 23,
	Dress_Collar                                       = 24,
	EarL                                               = 25,
	EarR                                               = 26,
	Elbow_L                                            = 27,
	Elbow_R                                            = 28,
	Finger_L1                                          = 29,
	Finger_L2                                          = 30,
	Finger_L3                                          = 31,
	Finger_L4                                          = 32,
	Finger_L5                                          = 33,
	Finger_R1                                          = 34,
	Finger_R2                                          = 35,
	Finger_R3                                          = 36,
	Finger_R4                                          = 37,
	Finger_R5                                          = 38,
	Footwear_HeelStandard                              = 39,
	Footwear_High                                      = 40,
	Footwear_Standard                                  = 41,
	Forearm_L                                          = 42,
	Forearm_R                                          = 43,
	Gauntlet_L                                         = 44,
	Gauntlet_R                                         = 45,
	Glasses                                            = 46,
	Hair_Chest                                         = 47,
	Hair_Scalp                                         = 48,
	Hand_L                                             = 49,
	Hand_R                                             = 50,
	Hat_Beanie                                         = 51,
	Hat_Beanie_Accessory                               = 52,
	Hat_Standard                                       = 53,
	Hat_Standard_Bulky                                 = 54,
	Hat_Standard_Bulky_Accessory                       = 55,
	Headband                                           = 56,
	Jacket_Closed                                      = 57,
	Jacket_Closed_Long                                 = 58,
	Jacket_ClosedVNeck                                 = 59,
	Jacket_Open                                        = 60,
	Jacket_Open_Hood                                   = 61,
	Jacket_OpenHalf                                    = 62,
	Jacket_OpenHalf_Cropped                            = 63,
	Jacket_OpenShortsleeved                            = 64,
	Jacket_OpenSleeveless                              = 65,
	Mask_Full                                          = 66,
	Mask_Full_Large                                    = 67,
	Mask_Lowerface                                     = 68,
	Necklace_Choker                                    = 69,
	Necklace_Long                                      = 70,
	Necklace_Medium                                    = 71,
	Necklace_Small                                     = 72,
	NecklaceFull_Long                                  = 73,
	NecklaceFull_Long_Armour                           = 74,
	NecklaceFull_Medium                                = 75,
	NecklaceFull_Small                                 = 76,
	Pendant_Choker                                     = 77,
	Pendant_Long                                       = 78,
	Pendant_Medium                                     = 79,
	Pendant_Small                                      = 80,
	Piercing_Belly                                     = 81,
	Piercing_Chin                                      = 82,
	Piercing_EarL                                      = 83,
	Piercing_EarR                                      = 84,
	Piercing_EarTopL                                   = 85,
	Piercing_EarTopR                                   = 86,
	Piercing_Forehead                                  = 87,
	Piercing_Nipples                                   = 88,
	Piercing_NoseBottom                                = 89,
	Piercing_NoseTop                                   = 90,
	Piercing_Scalp                                     = 91,
	Piercing_Waist                                     = 92,
	Scarf                                              = 93,
	Scarf_Mask                                         = 94,
	Shirt_ClosedCollar                                 = 95,
	Shirt_OpenCollar                                   = 96,
	Shirt_OpenCollar_ShortSleeves                      = 97,
	Skirt_Standard                                     = 98,
	Skirt_Tutu                                         = 99,
	Sock_L                                             = 100,
	Sock_R                                             = 101,
	Stocking_L                                         = 102,
	Stocking_R                                         = 103,
	Tie                                                = 104,
	Tie_Loose                                          = 105,
	Top_Corset                                         = 106,
	Top_LongSleeves                                    = 107,
	Top_LongSleeves_Collar                             = 108,
	Top_LongSleeves_Hood                               = 109,
	Top_ShortSleeves                                   = 110,
	Top_Sleeveless                                     = 111,
	TrousersLow_Baggy                                  = 112,
	TrousersStandard_Baggy                             = 113,
	TrousersStandard_Medium                            = 114,
	TrousersStandard_Medium_NoBelt                     = 115,
	TrousersStandard_Medium_Shorts                     = 116,
	TrousersStandard_MediumFlared                      = 117,
	TrousersStandard_Tight                             = 118,
	Underwear_Compulsory_Bottom                        = 119,
	Underwear_Compulsory_Top                           = 120,
	Waist_L                                            = 121,
	Webbing_Chest                                      = 122,
	Webbing_Chest_Armour                               = 123,
	Webbing_ThighL                                     = 124,
	Webbing_ThighR                                     = 125,
	Webbing_UpperArmL                                  = 126,
	Webbing_UpperArmR                                  = 127,
	Wrist_L                                            = 128,
	Wrist_R                                            = 129,
	etGolemPartClass_MAX                               = 130
};*/

// Enum APBGame.cSDD.etHUDCeremonyMsg
/*enum etHUDCeremonyMsg
{
	AM_CombatYouStreakArrestOn                         = 0,
	AM_CombatYouStreakKillOn                           = 1,
	AM_CombatYouStreakWinOn                            = 2,
	AM_FameMatchEarnedMedal                            = 3,
	AM_FameYouContactGainLevel                         = 4,
	AM_FameYouContactLevelMax                          = 5,
	AM_FameYouContactLevelMax_Tutorial                 = 6,
	AM_FameYouContactReferal                           = 7,
	AM_FameYouEarnAchievement                          = 8,
	AM_FameYouEarnMedal                                = 9,
	AM_FameYouOrganisationGainLevel                    = 10,
	AM_FameYouOrganisationMaxLevel                     = 11,
	AM_FameYouRoleGainLevel                            = 12,
	AM_FameYouRoleMaxLevel                             = 13,
	AM_Heat_Bounty_AnyNotorietyLevel5ForCriminals      = 14,
	AM_Heat_Bounty_AnyNotorietyLevel5ForEnforcers      = 15,
	AM_Heat_Bounty_AnyPrestigeLevel5                   = 16,
	AM_Heat_Bounty_TeamNotorietyLevel5                 = 17,
	AM_Heat_Bounty_TeamPrestigeLevel5                  = 18,
	AM_Heat_Bounty_YouNotorietyLevel5                  = 19,
	AM_Heat_Bounty_YouPrestigeLevel5                   = 20,
	AM_Heat_BountyClaimed_AnyCrimKillCrim              = 21,
	AM_Heat_BountyClaimed_AnyCrimKillEnf               = 22,
	AM_Heat_BountyClaimed_AnyEnfKillCrim               = 23,
	AM_Heat_BountyClaimed_AnyEnfKillEnf                = 24,
	AM_Heat_BountyClaimed_YouCrimKillCrim              = 25,
	AM_Heat_BountyClaimed_YouCrimKillEnf               = 26,
	AM_Heat_BountyClaimed_YouEnfKillCrim               = 27,
	AM_Heat_BountyClaimed_YouEnfKillEnf                = 28,
	AM_HeatYouNotorietyLevelDrops                      = 29,
	AM_HeatYouNotorietyLevelRaise                      = 30,
	AM_HeatYouPrestigeLevelDrops                       = 31,
	AM_HeatYouPrestigeLevelRaise                       = 32,
	AM_RewardUnlockClothing                            = 33,
	AM_RewardUnlockDisplayPoint                        = 34,
	AM_RewardUnlockEmotes                              = 35,
	AM_RewardUnlockEquipment                           = 36,
	AM_RewardUnlockFeature                             = 37,
	AM_RewardUnlockFnMod                               = 38,
	AM_RewardUnlockGeneric                             = 39,
	AM_RewardUnlockInstrument                          = 40,
	AM_RewardUnlockPrimitive                           = 41,
	AM_RewardUnlockSong                                = 42,
	AM_RewardUnlockSymbol                              = 43,
	AM_RewardUnlockTheme                               = 44,
	AM_RewardUnlockUsable                              = 45,
	AM_RewardUnlockVehicle                             = 46,
	AM_RewardUnlockVehicleComponent                    = 47,
	AM_RewardUnlockWeapon                              = 48,
	AM_ThreatAny15PlayerEnter_Crim                     = 49,
	AM_ThreatAny15PlayerEnter_Enf                      = 50,
	AM_ThreatAnyChanged_Crim                           = 51,
	AM_ThreatAnyChanged_Enf                            = 52,
	AM_ThreatYouChanged                                = 53,
	Reward_Unlock_Clothing                             = 54,
	Reward_Unlock_Emotes                               = 55,
	Reward_Unlock_Vehicles                             = 56,
	Reward_Unlock_Weapons                              = 57,
	etHUDCeremonyMsg_MAX                               = 58
};*/

// Enum APBGame.cSDD.etHUDColour
/*enum etHUDColour
{
	None                                               = 0,
	Action_Enemy                                       = 1,
	Action_Team                                        = 2,
	Black                                              = 3,
	Black_TaskMarker                                   = 4,
	Blue                                               = 5,
	Blue_Enforcer                                      = 6,
	Blue_mid                                           = 7,
	Blue_Pale                                          = 8,
	Blue_TaskMarker                                    = 9,
	Cash_Green                                         = 10,
	Cash_Red                                           = 11,
	Ceremony_Highlight                                 = 12,
	Chat_AutoReply                                     = 13,
	Chat_Broadcast                                     = 14,
	Chat_Clan                                          = 15,
	Chat_Combat                                        = 16,
	Chat_District                                      = 17,
	Chat_Group                                         = 18,
	Chat_Mission                                       = 19,
	Chat_Officer                                       = 20,
	Chat_Say                                           = 21,
	Chat_System                                        = 22,
	Chat_Team                                          = 23,
	Chat_Tutorial                                      = 24,
	Chat_Vehicle                                       = 25,
	Chat_Whisper                                       = 26,
	Chat_Yell                                          = 27,
	Contact                                            = 28,
	ED_garage                                          = 29,
	ED_marketplace                                     = 30,
	ED_music                                           = 31,
	ED_persona                                         = 32,
	ED_symbol                                          = 33,
	ED_wardrobe                                        = 34,
	Green                                              = 35,
	Green_Dark                                         = 36,
	Green_Pale                                         = 37,
	Green_TaskMarker                                   = 38,
	Grey                                               = 39,
	Grey_Pale                                          = 40,
	Grey_Transparent                                   = 41,
	GroupHUD_Enemy                                     = 42,
	GroupHUD_Friend                                    = 43,
	GroupHUD_NotReady                                  = 44,
	GroupHUD_OutOfDistrict                             = 45,
	GroupHUD_VIP                                       = 46,
	GroupHUDHeader_NotReady                            = 47,
	GroupHUDHeader_OnMission                           = 48,
	GroupHUDHeader_Ready                               = 49,
	GroupHUDHeader_Waiting                             = 50,
	Heat_AmountChange                                  = 51,
	Heat_LevelChange                                   = 52,
	HitReticule_CarOrProp                              = 53,
	HitReticule_CharacterEnemy                         = 54,
	HitReticule_CharacterFriend                        = 55,
	HUDMessage_ActionText                              = 56,
	HUDMessage_APB                                     = 57,
	HUDMessage_CeremonyText                            = 58,
	HUDMessage_Default                                 = 59,
	HUDMessage_DistrictMapText                         = 60,
	HUDMessage_Error                                   = 61,
	HUDMessage_Mission                                 = 62,
	HUDMessage_TutorialText                            = 63,
	HUDMessage_VIP                                     = 64,
	Lobby_WorldOffline                                 = 65,
	Mailbox                                            = 66,
	openworld_marker                                   = 67,
	Orange                                             = 68,
	Orange_APB                                         = 69,
	Orange_Dark                                        = 70,
	Purple                                             = 71,
	Red                                                = 72,
	Red_Bright                                         = 73,
	Red_Criminal                                       = 74,
	Red_mid                                            = 75,
	Red_Pale                                           = 76,
	Red_TaskMarker                                     = 77,
	Scoreboard_LocalPlayer                             = 78,
	Scoreboard_Opponents                               = 79,
	Scoreboard_Opponents_Offline                       = 80,
	Scoreboard_Teammates                               = 81,
	Scoreboard_Teammates_Offline                       = 82,
	SymbolEditor_NormalBlack                           = 83,
	SymbolEditor_NormalGray                            = 84,
	SymbolEditor_NormalWhite                           = 85,
	SymbolEditor_TattooBlack                           = 86,
	SymbolEditor_TattooWhite                           = 87,
	Tutorial_KeyPress                                  = 88,
	White                                              = 89,
	White_Transparent                                  = 90,
	Witnessing_Active                                  = 91,
	Witnessing_Inactive                                = 92,
	Witnessing_PendingBounty                           = 93,
	Yellow                                             = 94,
	Yellow_Bright                                      = 95,
	Yellow_CSA                                         = 96,
	Yellow_Pale                                        = 97,
	Yellow_TaskMarker                                  = 98,
	etHUDColour_MAX                                    = 99
};*/

// Enum APBGame.cSDD.etHUDColourProfile
/*enum etHUDColourProfile
{
	None                                               = 0,
	Contact_Unpledged                                  = 1,
	ContactPledged                                     = 2,
	CustomisationZone                                  = 3,
	Default                                            = 4,
	Faction_Criminal                                   = 5,
	Faction_Enforcer                                   = 6,
	Faction_Friendly                                   = 7,
	Faction_Opposition                                 = 8,
	Group_Leader                                       = 9,
	Group_Player                                       = 10,
	Group_Player_Arrested                              = 11,
	HeatLevel5_Crim                                    = 12,
	HeatLevel5_Enf                                     = 13,
	InteractionPoint_Garage                            = 14,
	InteractionPoint_MarketPlace                       = 15,
	InteractionPoint_MusicStudio                       = 16,
	InteractionPoint_Persona                           = 17,
	InteractionPoint_SymbolEditor                      = 18,
	InteractionPoint_Wardrobe                          = 19,
	Mailbox                                            = 20,
	Neutral_ActionCSA                                  = 21,
	Neutral_ReplenishCSA                               = 22,
	Neutral_Unavailable                                = 23,
	Openworld_Normal                                   = 24,
	Opponent_Player                                    = 25,
	Opponent_Player_Stunned                            = 26,
	StageText                                          = 27,
	Target_VIP_Friend                                  = 28,
	Target_VIP_Opponent                                = 29,
	TaskCheckpoint_Dropoff                             = 30,
	TaskCheckpoint_FreshAttack                         = 31,
	TaskCheckpoint_FreshDefend                         = 32,
	TaskCheckpoint_Meeting                             = 33,
	TaskCheckpoint_Neutral                             = 34,
	TaskCheckpoint_TaintedAttack                       = 35,
	TaskCheckpoint_TaintedDefend                       = 36,
	TaskItem_FreshAttack                               = 37,
	TaskItem_FreshDefend                               = 38,
	TaskItem_Neutral                                   = 39,
	TaskItem_TaintedAttack                             = 40,
	TaskItem_TaintedDefend                             = 41,
	TaskObjective_FreshAttack                          = 42,
	TaskObjective_FreshDefend                          = 43,
	TaskObjective_Neutral                              = 44,
	TaskObjective_TaintedAttack                        = 45,
	TaskObjective_TaintedDefend                        = 46,
	Waypoint_Group                                     = 47,
	Waypoint_Leader                                    = 48,
	Waypoint_Personal                                  = 49,
	etHUDColourProfile_MAX                             = 50
};*/

// Enum APBGame.cSDD.etHUDCombatMessage
/*enum etHUDCombatMessage
{
	AM_Combat_ArrestEnemy                              = 0,
	AM_Combat_KillEnemy                                = 1,
	AM_Combat_KillEnemyAssist                          = 2,
	AM_Combat_StunnedEnemy                             = 3,
	AM_Combat_MAX                                      = 4
};*/

// Enum APBGame.cSDD.etHUDConstantString
/*enum etHUDConstantString
{
	Knowledgebase                                      = 0,
	etHUDConstantString_MAX                            = 1
};*/

// Enum APBGame.cSDD.etHUDDistrictMapMarker
/*enum etHUDDistrictMapMarker
{
	None                                               = 0,
	Contact_Fixer                                      = 1,
	Contact_Pledged                                    = 2,
	Mailbox                                            = 3,
	MaxHeatPlayer_Criminal                             = 4,
	MaxHeatPlayer_Enforcer                             = 5,
	MaxThreatPlayer_Criminal                           = 6,
	Contact                                            = 7,
	OpenWorldDropOff_Enf                               = 8,
	OpenWorldDropOff_Large                             = 9,
	OpenWorldDropOff_Medium                            = 10,
	OpenWorldDropOff_Small                             = 11,
	OpenWorldDropOff_Vehicle                           = 12,
	MaxThreatPlayer_Enforcer                           = 13,
	OpenWorldDropOff_Vehicle_Enforcer                  = 14,
	Player_Enemy                                       = 15,
	Player_Group                                       = 16,
	Player_GroupLeader                                 = 17,
	Player_Local                                       = 18,
	Player_Moderator                                   = 19,
	PlayerVehicle                                      = 20,
	PlayerVehicle_WithTaskItem                         = 21,
	Task_Checkpoint                                    = 22,
	Task_Item                                          = 23,
	Task_Target                                        = 24,
	Waypoint_Group                                     = 25,
	Waypoint_Leader                                    = 26,
	Waypoint_Personal                                  = 27,
	Zone_Ammo                                          = 28,
	Zone_Markerplace                                   = 29,
	Zone_Music                                         = 30,
	Zone_Spawn                                         = 31,
	Zone_VehicleRepair                                 = 32,
	Zone_VehicleSpawn                                  = 33,
	OpenWorldDropOffAuto                               = 34,
	InteractionPoint_Garage                            = 35,
	InteractionPoint_MarketPlace                       = 36,
	InteractionPoint_MusicStudio                       = 37,
	InteractionPoint_Persona                           = 38,
	InteractionPoint_SymbolEditor                      = 39,
	InteractionPoint_Wardrobe                          = 40,
	DisplayPoint                                       = 41,
	etHUDDistrictMapMarker_MAX                         = 42
};*/

// Enum APBGame.cSDD.etHUDEffect
/*enum etHUDEffect
{
	HeatFlash                                          = 0,
	HeatIcon                                           = 1,
	HeatIconWS                                         = 2,
	HeatLevel                                          = 3,
	HeatLevelHorizontal                                = 4,
	HeatNoteriety5                                     = 5,
	HeatPrestige5                                      = 6,
	HitEffect_Blood                                    = 7,
	HitEffect_Direction                                = 8,
	ProgressCircle                                     = 9,
	etHUDEffect_MAX                                    = 10
};*/

// Enum APBGame.cSDD.etHUDIconCombo
/*enum etHUDIconCombo
{
	None                                               = 0,
	AmmoVending                                        = 1,
	AmmoVending_Msg                                    = 2,
	AmmoVending_Occ                                    = 3,
	APBCash                                            = 4,
	Cargo_Loot                                         = 5,
	Cargo_People                                       = 6,
	Colour_Black                                       = 7,
	Contact                                            = 8,
	Contact_occ                                        = 9,
	DisplayPoint                                       = 10,
	DistrictMap_TaskMarkerBG                           = 11,
	Faction_Criminal                                   = 12,
	Faction_Enforcer                                   = 13,
	GroupLeader                                        = 14,
	GroupPlayer                                        = 15,
	InteractionPoint_Garage                            = 16,
	InteractionPoint_MusicZone                         = 17,
	InteractionPoint_Persona                           = 18,
	InteractionPoint_SymbolEditor                      = 19,
	InteractionPoint_Wardrobe                          = 20,
	Mailbox                                            = 21,
	Mailbox_Occ                                        = 22,
	MarketplaceZone                                    = 23,
	OpenWorldDropOff_Enf                               = 24,
	OpenWorldDropOff_Large                             = 25,
	OpenWorldDropOff_Medium                            = 26,
	OpenWorldDropOff_Small                             = 27,
	OpenWorldDropOff_Vehicle                           = 28,
	OppositionPlayer                                   = 29,
	Organisation_None                                  = 30,
	PDA                                                = 31,
	PlayerVehicle                                      = 32,
	PlayerVehicleWithTaskItem                          = 33,
	PS_AFK                                             = 34,
	PS_Arrested                                        = 35,
	PS_DND                                             = 36,
	PS_Unconscious                                     = 37,
	Rating                                             = 38,
	RTWPoints                                          = 39,
	SpawnZone                                          = 40,
	SpawnZone_Criminal                                 = 41,
	SpawnZone_Enforcer                                 = 42,
	SpawnZone_Factionless                              = 43,
	Status_AFK                                         = 44,
	Status_Arrested                                    = 45,
	Status_Crown                                       = 46,
	Status_Dead                                        = 47,
	Status_DND                                         = 48,
	Status_Driving                                     = 49,
	Status_LinkDead                                    = 50,
	Status_None                                        = 51,
	Status_NonTaskParticipant                          = 52,
	Status_OOD                                         = 53,
	Status_Ready                                       = 54,
	Status_Stunned                                     = 55,
	Status_TaskParticipant                             = 56,
	Task_Arrow                                         = 57,
	Task_Arrow_Occ                                     = 58,
	Task_Checkpoint                                    = 59,
	Task_Checkpoint_Occ                                = 60,
	Task_Item                                          = 61,
	Task_Item_Occ                                      = 62,
	Task_Target                                        = 63,
	Task_Target_Occ                                    = 64,
	TestItem                                           = 65,
	Threat_Base                                        = 66,
	Threat_Cri01                                       = 67,
	Threat_Cri02                                       = 68,
	Threat_Cri03                                       = 69,
	Threat_Cri04                                       = 70,
	Threat_Cri05                                       = 71,
	Threat_Cri06                                       = 72,
	Threat_Cri07                                       = 73,
	Threat_Cri08                                       = 74,
	Threat_Cri09                                       = 75,
	Threat_Cri10                                       = 76,
	Threat_Cri11                                       = 77,
	Threat_Cri12                                       = 78,
	Threat_Cri13                                       = 79,
	Threat_Cri14                                       = 80,
	Threat_Cri15                                       = 81,
	Threat_Enf01                                       = 82,
	Threat_Enf02                                       = 83,
	Threat_Enf03                                       = 84,
	Threat_Enf04                                       = 85,
	Threat_Enf05                                       = 86,
	Threat_Enf06                                       = 87,
	Threat_Enf07                                       = 88,
	Threat_Enf08                                       = 89,
	Threat_Enf09                                       = 90,
	Threat_Enf10                                       = 91,
	Threat_Enf11                                       = 92,
	Threat_Enf12                                       = 93,
	Threat_Enf13                                       = 94,
	Threat_Enf14                                       = 95,
	Threat_Enf15                                       = 96,
	VehicleRepair                                      = 97,
	VehicleRepair_Msg                                  = 98,
	VehicleRepair_occ                                  = 99,
	VehicleSpawn                                       = 100,
	VehicleSpawn_occ                                   = 101,
	VOIP_Active_High                                   = 102,
	VOIP_Active_Low                                    = 103,
	VOIP_Active_Medium                                 = 104,
	VOIP_InChannel                                     = 105,
	VOIP_Muted                                         = 106,
	VOIP_NotInChannel                                  = 107,
	Waypoint                                           = 108,
	Waypoint_Leader                                    = 109,
	Waypoint_Leader_Occ                                = 110,
	Waypoint_Occ                                       = 111,
	WIP                                                = 112,
	Witnessing                                         = 113,
	etHUDIconCombo_MAX                                 = 114
};*/

// Enum APBGame.cSDD.etHUDIcon
/*enum etHUDIcon
{
	None                                               = 0,
	Customisation_APBay                                = 1,
	Customisation_Music                                = 2,
	Customisation_Persona                              = 3,
	Customisation_Symbol                               = 4,
	Customisation_Vehicle                              = 5,
	Customisation_Wardrobe                             = 6,
	DistrictMap_Spawn                                  = 7,
	DistrictMap_Spawn_Active                           = 8,
	DistrictMap_Spawn_Clicked                          = 9,
	Faction_Criminal                                   = 10,
	Faction_Enforcer                                   = 11,
	Icon_APBCash                                       = 12,
	Icon_Rating                                        = 13,
	Icon_RTWPoints                                     = 14,
	Marker_Ammo                                        = 15,
	Marker_Arson                                       = 16,
	Marker_Car                                         = 17,
	Marker_CarWithArrows                               = 18,
	Marker_Crowbar                                     = 19,
	Marker_Graffiti                                    = 20,
	Marker_Ladder                                      = 21,
	Marker_Leader                                      = 22,
	Marker_Mail                                        = 23,
	Marker_MultiCheckpoint                             = 24,
	Marker_Spanner                                     = 25,
	Marker_Stickman                                    = 26,
	Marker_Suitcase                                    = 27,
	Marker_Target                                      = 28,
	Organisation_BloodRoses                            = 29,
	Organisation_GKings                                = 30,
	Organisation_Praetorian                            = 31,
	Organisation_PrentissTigers                        = 32,
	Shape_TriangleWhite                                = 33,
	Status_AFK                                         = 34,
	Status_Arrested                                    = 35,
	Status_Dead                                        = 36,
	Status_DND                                         = 37,
	Status_InVehicle                                   = 38,
	Status_LinkDead                                    = 39,
	Status_Locked                                      = 40,
	Status_NoEntry                                     = 41,
	Status_NormalDot                                   = 42,
	Status_OOD                                         = 43,
	Status_Ready                                       = 44,
	Status_ThumbsUp                                    = 45,
	Status_Unconcious                                  = 46,
	Status_Unlocked                                    = 47,
	Status_WIP                                         = 48,
	Task_Arrow                                         = 49,
	Task_Arrow_Occ                                     = 50,
	Task_CircleLarge                                   = 51,
	Task_CircleLarge_occ                               = 52,
	Task_CircleMed                                     = 53,
	Task_CircleMed_occ                                 = 54,
	Task_CircleSmall                                   = 55,
	Task_CircleSmall_occ                               = 56,
	Task_Diamond                                       = 57,
	Task_Diamond_occ                                   = 58,
	Task_Shield                                        = 59,
	Task_Shield_occ                                    = 60,
	Task_Square                                        = 61,
	Task_Square_occ                                    = 62,
	Task_Star                                          = 63,
	Task_Star_occ                                      = 64,
	Task_Triangle                                      = 65,
	Task_Triangle_occ                                  = 66,
	Threat_Cri01                                       = 67,
	Threat_Cri02                                       = 68,
	Threat_Cri03                                       = 69,
	Threat_Cri04                                       = 70,
	Threat_Cri05                                       = 71,
	Threat_Cri06                                       = 72,
	Threat_Cri07                                       = 73,
	Threat_Cri08                                       = 74,
	Threat_Cri09                                       = 75,
	Threat_Cri10                                       = 76,
	Threat_Cri11                                       = 77,
	Threat_Cri12                                       = 78,
	Threat_Cri13                                       = 79,
	Threat_Cri14                                       = 80,
	Threat_Cri15                                       = 81,
	Threat_Enf01                                       = 82,
	Threat_Enf02                                       = 83,
	Threat_Enf03                                       = 84,
	Threat_Enf04                                       = 85,
	Threat_Enf05                                       = 86,
	Threat_Enf06                                       = 87,
	Threat_Enf07                                       = 88,
	Threat_Enf08                                       = 89,
	Threat_Enf09                                       = 90,
	Threat_Enf10                                       = 91,
	Threat_Enf11                                       = 92,
	Threat_Enf12                                       = 93,
	Threat_Enf13                                       = 94,
	Threat_Enf14                                       = 95,
	Threat_Enf15                                       = 96,
	VOIP_Active_High                                   = 97,
	VOIP_Active_Low                                    = 98,
	VOIP_Active_Medium                                 = 99,
	VOIP_InChannel                                     = 100,
	VOIP_Muted                                         = 101,
	VOIP_NotInChannel                                  = 102,
	Waypoint_Pin                                       = 103,
	etHUDIcon_MAX                                      = 104
};*/

// Enum APBGame.cSDD.etHUDMarkerOffset
/*enum etHUDMarkerOffset
{
	None                                               = 0,
	UseAutoRouteLocation                               = 1,
	Contact                                            = 2,
	Graffiti                                           = 3,
	Loot                                               = 4,
	Mailbox                                            = 5,
	Player                                             = 6,
	Task_Aerial                                        = 7,
	Task_AirCon                                        = 8,
	Task_Alarm                                         = 9,
	Task_BackDoor                                      = 10,
	Task_BankMachine                                   = 11,
	Task_Container                                     = 12,
	Task_CrateLong                                     = 13,
	Task_CrateTall                                     = 14,
	Task_Default                                       = 15,
	Task_Doorway                                       = 16,
	Task_ElectricBox                                   = 17,
	Task_FinancialVendingStand                         = 18,
	Task_FireHydrant                                   = 19,
	Task_GarageDoor                                    = 20,
	Task_InvisibleProp                                 = 21,
	Task_PayPhone                                      = 22,
	Task_PlayerItem                                    = 23,
	Task_PortaCabin                                    = 24,
	Task_PortaCabin_Large                              = 25,
	Task_SatelliteDish                                 = 26,
	Task_SecurityCamera                                = 27,
	Task_ShopFront                                     = 28,
	Task_TargetGraffitiPoint                           = 29,
	Task_TargetNPC                                     = 30,
	Task_TicketMachine                                 = 31,
	Task_VendingMachine                                = 32,
	Task_WarehousePallet                               = 33,
	Task_Window                                        = 34,
	Task_Yacht                                         = 35,
	TaskItemDefault                                    = 36,
	Vehicle                                            = 37,
	Waypoint                                           = 38,
	Zone                                               = 39,
	etHUDMarkerOffset_MAX                              = 40
};*/

// Enum APBGame.cSDD.etHUDMarkerStateColour
/*enum etHUDMarkerStateColour
{
	None                                               = 0,
	Checkpoint                                         = 1,
	Contact_Pledged                                    = 2,
	Contact_Unpledged                                  = 3,
	CustomisationZone                                  = 4,
	Default                                            = 5,
	FactionCriminal                                    = 6,
	FactionEnforcer                                    = 7,
	GroupLeader                                        = 8,
	GroupPlayer                                        = 9,
	HeatLevel5_Criminal                                = 10,
	HeatLevel5_Enforcer                                = 11,
	InteractionPoint_Garage                            = 12,
	InteractionPoint_MarketPlace                       = 13,
	InteractionPoint_MusicStudio                       = 14,
	InteractionPoint_Persona                           = 15,
	InteractionPoint_SymbolEditor                      = 16,
	InteractionPoint_Wardrobe                          = 17,
	Mailbox                                            = 18,
	Openworld_Normal                                   = 19,
	OppositionPlayer                                   = 20,
	TaskItem                                           = 21,
	TaskObjective                                      = 22,
	Waypoint_Group                                     = 23,
	Waypoint_Leader                                    = 24,
	Waypoint_Personal                                  = 25,
	etHUDMarkerStateColour_MAX                         = 26
};*/

// Enum APBGame.cSDD.etHUDMarkerVisual
/*enum etHUDMarkerVisual
{
	None                                               = 0,
	Contact                                            = 1,
	Contact_Fixer                                      = 2,
	Contact_Pledged                                    = 3,
	DisplayPoint                                       = 4,
	Door                                               = 5,
	InteractionPoint_Ammo                              = 6,
	InteractionPoint_Garage                            = 7,
	InteractionPoint_MarketPlace                       = 8,
	InteractionPoint_MusicStudio                       = 9,
	InteractionPoint_Persona                           = 10,
	InteractionPoint_SymbolEditor                      = 11,
	InteractionPoint_Wardrobe                          = 12,
	Mailbox                                            = 13,
	MaxHeatPlayer_Criminal                             = 14,
	MaxHeatPlayer_EnforcerToCriminal                   = 15,
	MaxHeatPlayer_EnforcerToEnforcer                   = 16,
	MaxThreatPlayer_Criminal                           = 17,
	MaxThreatPlayer_Enforcer                           = 18,
	OpenWorldAutoDefault                               = 19,
	OpenWorldDropOff_Enforcer                          = 20,
	OpenWorldDropOff_LargeItem                         = 21,
	OpenWorldDropOff_MediumItem                        = 22,
	OpenWorldDropOff_SmallItem                         = 23,
	OpenWorldDropOff_Vehicle                           = 24,
	OpenWorldDropOff_Vehicle_Enforcer                  = 25,
	Player_DeployedVehicle                             = 26,
	Player_GM                                          = 27,
	Player_Group                                       = 28,
	Player_GroupLeader                                 = 29,
	Player_Opposition                                  = 30,
	SpawnZone_BothFactions                             = 31,
	SpawnZone_Criminal                                 = 32,
	SpawnZone_Enforcer                                 = 33,
	TaskItemDefault                                    = 34,
	TaskItemDeliverableVehicle                         = 35,
	TaskItemMovingTarget                               = 36,
	TaskItemNoPickup                                   = 37,
	TaskItemShared                                     = 38,
	TaskTargetAntigraffiti                             = 39,
	TaskTargetBombDisposal                             = 40,
	TaskTargetBombing                                  = 41,
	TaskTargetBugPlanting                              = 42,
	TaskTargetBuildingArson                            = 43,
	TaskTargetBuildingFeature                          = 44,
	TaskTargetBurglary                                 = 45,
	TaskTargetCheckpoint                               = 46,
	TaskTargetCSI                                      = 47,
	TaskTargetDeathmatchPlayer                         = 48,
	TaskTargetDefault                                  = 49,
	TaskTargetDropOff                                  = 50,
	TaskTargetForcedEntry                              = 51,
	TaskTargetGraffitiPoint                            = 52,
	TaskTargetHacking                                  = 53,
	TaskTargetInvestigate                              = 54,
	TaskTargetInvestigateVehicle                       = 55,
	TaskTargetItemSpawnPoint                           = 56,
	TaskTargetNPC                                      = 57,
	TaskTargetProp                                     = 58,
	TaskTargetRendezvous_Group                         = 59,
	TaskTargetRendezvous_Solo                          = 60,
	TaskTargetSabotage                                 = 61,
	TaskTargetScan                                     = 62,
	TaskTargetSharedDropOff                            = 63,
	TaskTargetVandaliseProp                            = 64,
	TaskTargetVehicle                                  = 65,
	TaskTargetVehicleArson                             = 66,
	TaskTargetVehicleCargo                             = 67,
	TaskTargetVehicleDeliverKeep                       = 68,
	TaskTargetVehicleDeliverKeep0s                     = 69,
	TaskTargetVehicleLooting                           = 70,
	TaskTargetVehicleLootingEnforcer                   = 71,
	TaskTargetVehiclePickup                            = 72,
	TaskTargetVehicleSeizure                           = 73,
	TaskTargetVehicleSpawnPoint                        = 74,
	TaskTargetVehicleTheft                             = 75,
	TaskTargetVehicleVandalism                         = 76,
	TaskTargetVIP                                      = 77,
	TestItem                                           = 78,
	VehiclePosition_Cargo                              = 79,
	VehiclePosition_FrontLeft                          = 80,
	VehiclePosition_FrontRight                         = 81,
	VehiclePosition_RearLeft                           = 82,
	VehiclePosition_RearRight                          = 83,
	VehicleRepairZone                                  = 84,
	VehicleSpawnZone                                   = 85,
	Waypoint_Group                                     = 86,
	Waypoint_Leader                                    = 87,
	Waypoint_Personal                                  = 88,
	etHUDMarkerVisual_MAX                              = 89
};*/

// Enum APBGame.cSDD.etHUDMarkerVisualText
/*enum etHUDMarkerVisualText
{
	TaskItemDefault                                    = 0,
	TaskItemDeliverableVehicle                         = 1,
	TaskItemMovingTarget                               = 2,
	TaskItemShared                                     = 3,
	TaskTargetAntigraffiti                             = 4,
	TaskTargetBombDisposal                             = 5,
	TaskTargetBombing                                  = 6,
	TaskTargetBugPlanting                              = 7,
	TaskTargetBuildingArson                            = 8,
	TaskTargetBuildingFeature                          = 9,
	TaskTargetBurglary                                 = 10,
	TaskTargetCheckpoint                               = 11,
	TaskTargetCSI                                      = 12,
	TaskTargetDropOff                                  = 13,
	TaskTargetForcedEntry                              = 14,
	TaskTargetGraffitiPoint                            = 15,
	TaskTargetHacking                                  = 16,
	TaskTargetInvestigate                              = 17,
	TaskTargetInvestigateVehicle                       = 18,
	TaskTargetItemSpawnPoint                           = 19,
	TaskTargetProp                                     = 20,
	TaskTargetRendezvous_Group                         = 21,
	TaskTargetRendezvous_Solo                          = 22,
	TaskTargetSabotage                                 = 23,
	TaskTargetScan                                     = 24,
	TaskTargetSharedDropOff                            = 25,
	TaskTargetVehicle                                  = 26,
	TaskTargetVehicleArson                             = 27,
	TaskTargetVehicleCargo                             = 28,
	TaskTargetVehicleDeliverKeep                       = 29,
	TaskTargetVehicleDeliverKeep0s                     = 30,
	TaskTargetVehicleLooting                           = 31,
	TaskTargetVehicleLootingEnforcer                   = 32,
	TaskTargetVehiclePickup                            = 33,
	TaskTargetVehicleSeizure                           = 34,
	TaskTargetVehicleSpawnPoint                        = 35,
	TaskTargetVehicleTheft                             = 36,
	TaskTargetVehicleVandalism                         = 37,
	TaskTargetVIP                                      = 38,
	etHUDMarkerVisualText_MAX                          = 39
};*/

// Enum APBGame.cSDD.etHUDMessageCategory
/*enum etHUDMessageCategory
{
	Default                                            = 0,
	ActionHUD                                          = 1,
	AdHoc                                              = 2,
	Ammo                                               = 3,
	APB                                                = 4,
	Backup                                             = 5,
	Combat                                             = 6,
	EditorWarning                                      = 7,
	Fame                                               = 8,
	Group                                              = 9,
	Heat                                               = 10,
	Match                                              = 11,
	Matchup                                            = 12,
	Outcome                                            = 13,
	Reward                                             = 14,
	Team                                               = 15,
	Threat                                             = 16,
	Tutorial                                           = 17,
	VehicleCritical                                    = 18,
	etHUDMessageCategory_MAX                           = 19
};*/

// Enum APBGame.cSDD.etHUDMessagePosition
/*enum etHUDMessagePosition
{
	APB                                                = 0,
	Bottom                                             = 1,
	BottomLower                                        = 2,
	CombatMsg                                          = 3,
	Middle                                             = 4,
	Top                                                = 5,
	TopUpper                                           = 6,
	etHUDMessagePosition_MAX                           = 7
};*/

// Enum APBGame.cSDD.etHUDMessage
/*enum etHUDMessage
{
	None                                               = 0,
	AM_Abandon_Match_Fail                              = 1,
	AM_AdHocEnemySideDeliverItem                       = 2,
	AM_AdHocEnemySideDeliverItems                      = 3,
	AM_AdHocEnemySideDeliverVehicle                    = 4,
	AM_AdHocSideDeliverItem                            = 5,
	AM_AdHocSideDeliverItems                           = 6,
	AM_AdHocSideDeliverVehicleDamaged                  = 7,
	AM_AdHocSideDeliverVehicleUndamaged                = 8,
	AM_AdHocYouDeliverItem                             = 9,
	AM_AdHocYouDeliverItems                            = 10,
	AM_AdHocYouDeliverItems_AllFailed                  = 11,
	AM_AdHocYouDeliverItems_AllFailed01                = 12,
	AM_AdHocYouDeliverItems_AllFailed_OnMission        = 13,
	AM_AdHocYouDeliverItems_SomeFailed                 = 14,
	AM_AdHocYouDeliverItems_SomeFailed01               = 15,
	AM_AdHocYouDeliverVehicle                          = 16,
	AM_AdHocYouDeliverVehicleFailed                    = 17,
	AM_AdHocYouDeliverVehicleFailed01                  = 18,
	AM_AdHocYouDeliverVehicleFailed_OnMission          = 19,
	AM_AmmoFromStorage_InsufficientAmmo                = 20,
	AM_AmmoFromStorage_Resupplied                      = 21,
	AM_AmmoYouOutOfBullets                             = 22,
	AM_AmmoYouOutOfGrenades                            = 23,
	AM_AmmoYouOutOfProjectiles                         = 24,
	AM_AmmoZone_BoughtAmmoAndFullyResupplied           = 25,
	AM_AmmoZone_BoughtAmmoCouldNotFullyResupply        = 26,
	AM_AmmoZone_Deactivate                             = 27,
	AM_AmmoZone_Fail                                   = 28,
	AM_AmmoZone_Fail_AllWeaponsFull                    = 29,
	AM_AmmoZone_Fail_Arrested                          = 30,
	AM_AmmoZone_Fail_Dead                              = 31,
	AM_AmmoZone_Fail_DepotNotDeployed                  = 32,
	AM_AmmoZone_Fail_FnModInactive                     = 33,
	AM_AmmoZone_Fail_InsufficientFunds                 = 34,
	AM_AmmoZone_Fail_InVehicle                         = 35,
	AM_AmmoZone_Fail_NoEquippedWeapon                  = 36,
	AM_AmmoZone_Fail_Unconcious                        = 37,
	AM_AmmoZone_Fail_VehicleMoving                     = 38,
	AM_AmmoZone_Fail_WrongFaction                      = 39,
	AM_AmmoZone_Fail_WrongGroup                        = 40,
	AM_Attacked_InvulnerablePlayer                     = 41,
	AM_BackupAnyRequest                                = 42,
	AM_Combat_ArrestEnemy                              = 43,
	AM_Combat_KillEnemy                                = 44,
	AM_Combat_KillEnemyAssist                          = 45,
	AM_Combat_StunnedEnemy                             = 46,
	AM_CombatAnyStreakArrestOn                         = 47,
	AM_CombatAnyStreakArrestStop                       = 48,
	AM_CombatAnyStreakKillOn                           = 49,
	AM_CombatAnyStreakKillStop                         = 50,
	AM_CombatAnyStreakWin                              = 51,
	AM_CombatArrestOpp                                 = 52,
	AM_CombatArrestTeam                                = 53,
	AM_CombatKillOpp                                   = 54,
	AM_CombatKillOppOther                              = 55,
	AM_CombatKillTeam                                  = 56,
	AM_CombatKillTeamOther                             = 57,
	AM_CombatRescueOpp                                 = 58,
	AM_CombatRescueTeam                                = 59,
	AM_CombatStunOpp                                   = 60,
	AM_CombatStunSelfOpp                               = 61,
	AM_CombatStunSelfTeam                              = 62,
	AM_CombatStunTeam                                  = 63,
	AM_CombatStunTMOpp                                 = 64,
	AM_CombatStunTMTeam                                = 65,
	AM_CombatSuicideOpp                                = 66,
	AM_CombatSuicideTeam                               = 67,
	AM_CombatTKOpp                                     = 68,
	AM_CombatTKOppOther                                = 69,
	AM_CombatTKTeam                                    = 70,
	AM_CombatTKTeamOther                               = 71,
	AM_CombatYouKillReward                             = 72,
	AM_CombatYouPlayerAssistReward                     = 73,
	AM_CombatYouStreakArrestOn                         = 74,
	AM_CombatYouStreakArrestStop                       = 75,
	AM_CombatYouStreakKillOn                           = 76,
	AM_CombatYouStreakKillStop                         = 77,
	AM_CombatYouStreakWinOn                            = 78,
	AM_CombatYouStunnedSomeoneReward                   = 79,
	AM_CombatYouWereArrested_Main                      = 80,
	AM_Contact_Pledge_Break                            = 81,
	AM_Contact_Pledge_Break_Side                       = 82,
	AM_Contact_Pledge_BreakFail_OnMission              = 83,
	AM_Contact_Pledge_Make                             = 84,
	AM_Contact_Pledge_Make_Side                        = 85,
	AM_ContactError_Aggrevated                         = 86,
	AM_ContactError_ContactLocked                      = 87,
	AM_ContactError_InMission                          = 88,
	AM_ContactError_MissionAbandonment                 = 89,
	AM_ContactError_NotGroupLeader                     = 90,
	AM_ContactError_WrongFaction                       = 91,
	AM_ContactInteraction_Pledged                      = 92,
	AM_ContactInteraction_Pledged_Single               = 93,
	AM_ContactInteraction_Unpledged                    = 94,
	AM_ContactInteraction_Unpledged_Single             = 95,
	AM_DamagedYouTaskTargetObstruction_Player          = 96,
	AM_DamagedYouTaskTargetObstruction_Vehicle         = 97,
	AM_DeliverVehicle_Fail_PlayerOwned                 = 98,
	AM_DeliverVehicle_Fail_TaskItem                    = 99,
	AM_Display_Graffiti_Fail                           = 100,
	AM_DistrictBlock                                   = 101,
	AM_EnterResupplyZone                               = 102,
	AM_EnterResupplyZone_Vehicle                       = 103,
	AM_FameAnyContactLevelMax                          = 104,
	AM_FameAnyContactLevelMax_Tutorial                 = 105,
	AM_FameAnyEarnAchievement                          = 106,
	AM_FameAnyRoleGainLevel                            = 107,
	AM_FameAnyRoleLevelMax                             = 108,
	AM_FameMatchEarnedMedal                            = 109,
	AM_FameTeamContactGainLevel                        = 110,
	AM_FameTeamOrganisationGainLevel                   = 111,
	AM_FameYouContactGainLevel                         = 112,
	AM_FameYouContactLevelMax                          = 113,
	AM_FameYouContactLevelMax_Tutorial                 = 114,
	AM_FameYouContactReferal                           = 115,
	AM_FameYouEarnAchievement                          = 116,
	AM_FameYouEarnMedal                                = 117,
	AM_FameYouOrganisationGainLevel                    = 118,
	AM_FameYouOrganisationMaxLevel                     = 119,
	AM_FameYouRoleGainLevel                            = 120,
	AM_FameYouRoleMaxLevel                             = 121,
	AM_GroupAnyNewLeader                               = 122,
	AM_GroupIsReady                                    = 123,
	AM_GroupNotReady                                   = 124,
	AM_GroupYouNewLeader                               = 125,
	AM_Heat_Bounty_AnyNotorietyLevel5                  = 126,
	AM_Heat_Bounty_AnyNotorietyLevel5ForCriminals      = 127,
	AM_Heat_Bounty_AnyNotorietyLevel5ForEnforcers      = 128,
	AM_Heat_Bounty_AnyPrestigeLevel5                   = 129,
	AM_Heat_Bounty_AnyPrestigeLevel501                 = 130,
	AM_Heat_Bounty_TeamNotorietyLevel5                 = 131,
	AM_Heat_Bounty_TeamPrestigeLevel5                  = 132,
	AM_Heat_Bounty_YouNotorietyLevel5                  = 133,
	AM_Heat_Bounty_YouNotorietyLevel501                = 134,
	AM_Heat_Bounty_YouPrestigeLevel5                   = 135,
	AM_Heat_Bounty_YouPrestigeLevel501                 = 136,
	AM_Heat_BountyClaimed_AnyCrimKillCrim              = 137,
	AM_Heat_BountyClaimed_AnyCrimKillEnf               = 138,
	AM_Heat_BountyClaimed_AnyEnfKillCrim               = 139,
	AM_Heat_BountyClaimed_AnyEnfKillEnf                = 140,
	AM_Heat_BountyClaimed_AnyKillLevel5                = 141,
	AM_Heat_BountyClaimed_You                          = 142,
	AM_Heat_BountyClaimed_YouCrimKillCrim              = 143,
	AM_Heat_BountyClaimed_YouCrimKillEnf               = 144,
	AM_Heat_BountyClaimed_YouEnfKillCrim               = 145,
	AM_Heat_BountyClaimed_YouEnfKillEnf                = 146,
	AM_Heat_Tutorial_YouNotorietyLevel0                = 147,
	AM_Heat_Tutorial_YouNotorietyLevel1                = 148,
	AM_Heat_Tutorial_YouNotorietyLevel2Drop            = 149,
	AM_Heat_Tutorial_YouNotorietyLevel2Rise            = 150,
	AM_Heat_Tutorial_YouNotorietyLevel3Drop            = 151,
	AM_Heat_Tutorial_YouNotorietyLevel3Rise            = 152,
	AM_Heat_Tutorial_YouNotorietyLevel4Drop            = 153,
	AM_Heat_Tutorial_YouNotorietyLevel4Rise            = 154,
	AM_Heat_Tutorial_YouNotorietyLevel5                = 155,
	AM_Heat_Tutorial_YouPrestigeLevel0                 = 156,
	AM_Heat_Tutorial_YouPrestigeLevel1234Rise          = 157,
	AM_Heat_Tutorial_YouPrestigeLevel123Drop           = 158,
	AM_Heat_Tutorial_YouPrestigeLevel4Drop             = 159,
	AM_Heat_Tutorial_YouPrestigeLevel5                 = 160,
	AM_HeatAnyNotorietyLevel0                          = 161,
	AM_HeatSideNotorietyLevelDrops                     = 162,
	AM_HeatSideNotorietyLevelRaise                     = 163,
	AM_HeatSidePrestigeLevelDrops                      = 164,
	AM_HeatSidePrestigeLevelRaise                      = 165,
	AM_HeatSideWitnessedByEnforcer                     = 166,
	AM_HeatSideWitnessedCrime                          = 167,
	AM_HeatYou_WitnessCrime_Tutorial                   = 168,
	AM_HeatYou_WitnessCrime1_CrimIdle_EnfIdle          = 169,
	AM_HeatYou_WitnessCrime2_CrimIdle_EnfMission       = 170,
	AM_HeatYou_WitnessCrime3_CrimIdle_EnfMatch         = 171,
	AM_HeatYou_WitnessCrime4_CrimMatch_EnfIdle         = 172,
	AM_HeatYou_WitnessCrime5_CrimMatch_EnfMission      = 173,
	AM_HeatYou_WitnessCrime6_CrimMatch_EnfMatch        = 174,
	AM_HeatYou_WitnessCrime7_BothOnSameMatch           = 175,
	AM_HeatYou_WitnessCrime8_CrimOvermatched           = 176,
	AM_HeatYou_WitnessCrime9_EnfOvermatched            = 177,
	AM_HeatYouNotorietyLevel0                          = 178,
	AM_HeatYouNotorietyLevel0HUD                       = 179,
	AM_HeatYouNotorietyLevel1                          = 180,
	AM_HeatYouNotorietyLevel2Drop                      = 181,
	AM_HeatYouNotorietyLevel2Rise                      = 182,
	AM_HeatYouNotorietyLevel3Drop                      = 183,
	AM_HeatYouNotorietyLevel3Raise                     = 184,
	AM_HeatYouNotorietyLevel4Drop                      = 185,
	AM_HeatYouNotorietyLevel4Raise                     = 186,
	AM_HeatYouNotorietyLevelDrops                      = 187,
	AM_HeatYouNotorietyLevelRaise                      = 188,
	AM_HeatYouPrestigeLevel0                           = 189,
	AM_HeatYouPrestigeLevel0HUD                        = 190,
	AM_HeatYouPrestigeLevel1234Increase                = 191,
	AM_HeatYouPrestigeLevel123Drop                     = 192,
	AM_HeatYouPrestigeLevel4Drop                       = 193,
	AM_HeatYouPrestigeLevelDrops                       = 194,
	AM_HeatYouPrestigeLevelRaise                       = 195,
	AM_HeatYouWitness                                  = 196,
	AM_HeatYouYourCrimeWasWitnessed                    = 197,
	AM_HeatYouYourCrimeWasWitnessed_Tutorial           = 198,
	AM_ItemOperation_Fail_InsufficientFunds            = 199,
	AM_JoinGroup_LeaderInDifferentMission              = 200,
	AM_JoinGroup_PledgedToLockedContact                = 201,
	AM_LocationBeacon_Enter                            = 202,
	AM_MailBox_Fail_WrongFaction                       = 203,
	AM_MatchAbandonSideTooSmall                        = 204,
	AM_MatchAbandonSoloLeftSide                        = 205,
	AM_MatchAbandonSoloVsSide                          = 206,
	AM_MatchAbandonSoloVsSolo                          = 207,
	AM_MatchAnyWinSideVsSide                           = 208,
	AM_MatchAnyWinSideVsSolo                           = 209,
	AM_MatchAnyWinSoloVsSide                           = 210,
	AM_MatchAnyWinSoloVsSolo                           = 211,
	AM_MatchUnopposed                                  = 212,
	AM_MatchYouAbandon                                 = 213,
	AM_MatchYouLoseSolo                                = 214,
	AM_MatchYouLoseTeam                                = 215,
	AM_MatchYouLoseUnopposed                           = 216,
	AM_MatchYouSomeGroupMemberIsNotInTheMission        = 217,
	AM_MatchYouWinSolo                                 = 218,
	AM_MatchYouWinTeam                                 = 219,
	AM_Mission_Arrests                                 = 220,
	AM_Mission_Arrests_Fail                            = 221,
	AM_Mission_BackupGroupArrived                      = 222,
	AM_Mission_BackupPlayerArrived                     = 223,
	AM_Mission_DispatchedVsGroup                       = 224,
	AM_Mission_DispatchedVsPlayer                      = 225,
	AM_Mission_Draw                                    = 226,
	AM_Mission_FinalStage                              = 227,
	AM_Mission_Kills                                   = 228,
	AM_Mission_Kills_Fail                              = 229,
	AM_Mission_NotFinalStage                           = 230,
	AM_Mission_Objective_Any_Arson                     = 231,
	AM_Mission_Objective_Any_Bomb                      = 232,
	AM_Mission_Objective_Any_BombDisposal              = 233,
	AM_Mission_Objective_Any_Burglary                  = 234,
	AM_Mission_Objective_Any_CSI                       = 235,
	AM_Mission_Objective_Any_Delivery                  = 236,
	AM_Mission_Objective_Any_Delivery_Partial          = 237,
	AM_Mission_Objective_Any_Graffiti                  = 238,
	AM_Mission_Objective_Any_Hacking                   = 239,
	AM_Mission_Objective_Any_Pickup                    = 240,
	AM_Mission_Objective_Any_Raid                      = 241,
	AM_Mission_Objective_Any_Sabotage                  = 242,
	AM_Mission_Objective_Any_VehicleBreakIn            = 243,
	AM_Mission_Objective_You_Arson                     = 244,
	AM_Mission_Objective_You_Bomb                      = 245,
	AM_Mission_Objective_You_BombDisposal              = 246,
	AM_Mission_Objective_You_Burglary                  = 247,
	AM_Mission_Objective_You_CSI                       = 248,
	AM_Mission_Objective_You_Delivery                  = 249,
	AM_Mission_Objective_You_Graffiti                  = 250,
	AM_Mission_Objective_You_Hacking                   = 251,
	AM_Mission_Objective_You_Pickup                    = 252,
	AM_Mission_Objective_You_Raid                      = 253,
	AM_Mission_Objective_You_Sabotage                  = 254,
	AM_Mission_Objective_You_VehicleBreakIn            = 255,
	AM_Mission_OppositionCompleteStage                 = 256,
	AM_Mission_OppositionGroupAdded                    = 257,
	AM_Mission_OppositionGroupAssigned                 = 258,
	AM_Mission_OppositionPlayerAdded                   = 259,
	AM_Mission_OppositionPlayerAssigned                = 260,
	AM_Mission_OppositionPlayerRemoved                 = 261,
	AM_Mission_OwnerGroupAdded                         = 262,
	AM_Mission_OwnerPlayerAdded                        = 263,
	AM_Mission_OwnerPlayerRemoved                      = 264,
	AM_Mission_Prevent                                 = 265,
	AM_Mission_Prevent_Fail                            = 266,
	AM_Mission_Task_Item_Delivered_Ally                = 267,
	AM_Mission_Task_Item_Delivered_Enemy               = 268,
	AM_Mission_Time_OneMinuteRemaining                 = 269,
	AM_Mission_Time_Opp_OneMinute                      = 270,
	AM_MissionSideLeaderOfferReceivedDispatch          = 271,
	AM_MissionSideLeaderOfferReceivedMission           = 272,
	AM_MissionSideMemberOfferReceivedDispatch          = 273,
	AM_MissionSideMemberOfferReceivedMission           = 274,
	AM_MissionSideOfferRejected                        = 275,
	AM_MissionSideOfferRevoked                         = 276,
	AM_OpenWorldItem_Spawned                           = 277,
	AM_OpenWorldItems_Spawned                          = 278,
	AM_RemovedFromGroup                                = 279,
	AM_Resupply_Fail                                   = 280,
	AM_Reward_ConsumptionError                         = 281,
	AM_Reward_NewMail                                  = 282,
	AM_RewardBonus                                     = 283,
	AM_RewardBonusVehicleArmoredVan                    = 284,
	AM_RewardBonusVehicleCheap                         = 285,
	AM_RewardBonusVehicleExpensive                     = 286,
	AM_RewardBonusVehicleMidPrice                      = 287,
	AM_RewardBonusVehiclePristine                      = 288,
	AM_RewardCashOnly                                  = 289,
	AM_RewardForArson                                  = 290,
	AM_RewardForBombDisposal                           = 291,
	AM_RewardForBombing                                = 292,
	AM_RewardForBurglary                               = 293,
	AM_RewardForForcedEntry                            = 294,
	AM_RewardForGraffiti                               = 295,
	AM_RewardForMugging                                = 296,
	AM_RewardForOpenWorldLarge                         = 297,
	AM_RewardForOpenWorldMedium                        = 298,
	AM_RewardForOpenWorldSmallMultiple                 = 299,
	AM_RewardForOpenWorldSmallSingle                   = 300,
	AM_RewardForPlayerArrest                           = 301,
	AM_RewardForPlayerArrestLevel5                     = 302,
	AM_RewardForPlayerRescue                           = 303,
	AM_RewardForTargetCompletion                       = 304,
	AM_RewardForVehicleDelivery                        = 305,
	AM_RewardForWitness                                = 306,
	AM_RewardOrganization                              = 307,
	AM_RewardRandomRewardGained_Dispatch               = 308,
	AM_RewardRandomRewardGained_Mission                = 309,
	AM_RewardUnlockClothing                            = 310,
	AM_RewardUnlockDisplayPoint                        = 311,
	AM_RewardUnlockEmotes                              = 312,
	AM_RewardUnlockEquipment                           = 313,
	AM_RewardUnlockFeature                             = 314,
	AM_RewardUnlockFnMod                               = 315,
	AM_RewardUnlockGeneric                             = 316,
	AM_RewardUnlockInstrument                          = 317,
	AM_RewardUnlockPrimitive                           = 318,
	AM_RewardUnlockSong                                = 319,
	AM_RewardUnlockSymbol                              = 320,
	AM_RewardUnlockTheme                               = 321,
	AM_RewardUnlockUsable                              = 322,
	AM_RewardUnlockVehicle                             = 323,
	AM_RewardUnlockVehicleComponent                    = 324,
	AM_RewardUnlockWeapon                              = 325,
	AM_RewardYouReceivedItem                           = 326,
	AM_SideAnyNewLeader                                = 327,
	AM_SideYouNewLeader                                = 328,
	AM_StreetVolume_Enter                              = 329,
	AM_TaskItem_Spawned                                = 330,
	AM_TaskItems_Spawned                               = 331,
	AM_ThreatAny15PlayerEnter_Crim                     = 332,
	AM_ThreatAny15PlayerEnter_Enf                      = 333,
	AM_ThreatAny15PlayerLeave_Crim                     = 334,
	AM_ThreatAny15PlayerLeave_Enf                      = 335,
	AM_ThreatAnyChanged                                = 336,
	AM_ThreatAnyChanged_Crim                           = 337,
	AM_ThreatAnyChanged_Enf                            = 338,
	AM_ThreatTeamChanged                               = 339,
	AM_ThreatYouChanged                                = 340,
	AM_TurnMissionAcceptanceStateFailed                = 341,
	AM_Vehicle_BeginRepair                             = 342,
	AM_Vehicle_BrokenInto                              = 343,
	AM_Vehicle_Cargo_Full                              = 344,
	AM_Vehicle_EnterFail_CargoFull                     = 345,
	AM_Vehicle_EnterFail_EnemyOwnedVehicle             = 346,
	AM_Vehicle_EnterFail_EnemyTarget                   = 347,
	AM_Vehicle_EnterFail_NotAllowed                    = 348,
	AM_Vehicle_EnterFail_NotPartOfMission              = 349,
	AM_Vehicle_EnterFail_OpponentInVehicle             = 350,
	AM_Vehicle_EnterFail_PositionOccupied              = 351,
	AM_Vehicle_SpawnBay_AllBaysOccupied                = 352,
	AM_Vehicle_SpawnBay_NoDeployedVehicle              = 353,
	AM_Vehicle_SpawnBay_NoFunds                        = 354,
	AM_Vehicle_SpawnBay_NotAllowedToRecall             = 355,
	AM_Vehicle_SpawnBay_WrongFaction                   = 356,
	AM_VIP_Any                                         = 357,
	AM_VIP_Opposition                                  = 358,
	AM_VIP_Side                                        = 359,
	AM_VIP_You                                         = 360,
	AM_VIP_You01                                       = 361,
	AM_WinStreak_Mission                               = 362,
	AM_WinStreak_Mission_Ended                         = 363,
	AmmoZone_InsufficientFunds                         = 364,
	AmmoZone_NoDeployedWeapons                         = 365,
	Armory_DisabledInMissions                          = 366,
	BroadcastSystemMessage                             = 367,
	BugTracker_BugReportError                          = 368,
	BugTracker_BugReportSuccess                        = 369,
	Capturing_CaptureFailedToSave                      = 370,
	Capturing_TooShort                                 = 371,
	CharacterCustomisation_OverBudget                  = 372,
	ClanMgmt_DispandSuccess                            = 373,
	ClanMgmt_InviteSent                                = 374,
	ClanMgmt_NotInSocialDistrict                       = 375,
	ClanMgmt_RemovedFromClan                           = 376,
	CustomisationEditor_InventoryLimitHit              = 377,
	CustomisationZone                                  = 378,
	DebugMessage                                       = 379,
	DisplayPoint_Audio_None                            = 380,
	DisplayPoint_Audio_WrongFaction                    = 381,
	DisplayPoint_Graffiti_None                         = 382,
	DisplayPoint_Graffiti_WrongFaction                 = 383,
	DisplayPoint_None                                  = 384,
	DisplayPoint_Statue_None                           = 385,
	DisplayPoint_Statue_WrongFaction                   = 386,
	DisplayPoint_Taken                                 = 387,
	DisplayPoint_Vehicle_None                          = 388,
	DisplayPoint_Vehicle_WrongFaction                  = 389,
	DisplayPoint_WrongFaction                          = 390,
	ElectiveRespawn                                    = 391,
	ElectiveRespawnNotAllowed                          = 392,
	FactionRestrictedLocation                          = 393,
	Garage_OutOfDecalSpace                             = 394,
	Garage_VehicleOverBudget                           = 395,
	Group_InviteBounced                                = 396,
	Group_InviteBouncedTutorial                        = 397,
	Group_InviteDeclined                               = 398,
	Group_InviteSent                                   = 399,
	Inventory_CreatedCopies                            = 400,
	Inventory_DisabledInMissions                       = 401,
	Inventory_Refurbished                              = 402,
	Killed                                             = 403,
	KilledBy_REDUNDANT                                 = 404,
	KilledSelf_REDUNDANT                               = 405,
	LocaleSystem_DistrictBlockEntered                  = 406,
	LocaleSystem_LocationBeaconEntered                 = 407,
	LocalisationTest                                   = 408,
	Mail_ItemAddedToInventory_Normal                   = 409,
	Mail_ItemAddedToInventory_Reward_Combined          = 410,
	Mail_ItemAddedToInventory_Reward_Items             = 411,
	Mail_ItemAddedToInventory_Reward_Unlocks           = 412,
	Mail_RewardPackageRetrieved                        = 413,
	Mission_EnemyStageComplete                         = 414,
	Mission_ItemDelivered                              = 415,
	Mission_StageComplete                              = 416,
	MusicPlayer_ImportComplete                         = 417,
	MusicPlayer_PlaylistAddTracks                      = 418,
	MusicPlayer_ReidentifyComplete                     = 419,
	MusicStudio_FileTooLarge                           = 420,
	MusicStudio_MemoryUsageFull                        = 421,
	MusicStudio_PasteConflicts                         = 422,
	NotReadyNagMessage                                 = 423,
	OpenWorld_ItemDelivered                            = 424,
	OpenWorld_VehicleDelivered                         = 425,
	OutOfBounds                                        = 426,
	PlayerInfo_PlayerHasLeftGame                       = 427,
	Reward_Unlock_Clothing                             = 428,
	Reward_Unlock_Emotes                               = 429,
	Reward_Unlock_Vehicles                             = 430,
	Reward_Unlock_Weapons                              = 431,
	Subscription_LimitNear                             = 432,
	SwitchWeapon_NoDeployedWeapon_Grenade              = 433,
	SwitchWeapon_NoDeployedWeapon_Primary              = 434,
	SwitchWeapon_NoDeployedWeapon_Secondary            = 435,
	SymbolEditor_AddTooMany                            = 436,
	SymbolEditor_AtSymbolLimit                         = 437,
	SymbolEditor_DuplicateTooMany                      = 438,
	SymbolEditor_SymbolHasNoLayers                     = 439,
	Test1                                              = 440,
	Test2                                              = 441,
	Test3                                              = 442,
	Test4                                              = 443,
	TestAction                                         = 444,
	TestFontLarge                                      = 445,
	TestFontMedium                                     = 446,
	TestFontSmall                                      = 447,
	Tutorial                                           = 448,
	VehicleCritical_Fire                               = 449,
	VehicleRepairZone                                  = 450,
	VehicleSpawnZone                                   = 451,
	VehicleSpawnZone_SpawnVehicle                      = 452,
	Vending_Purchase                                   = 453,
	Vending_Sell                                       = 454,
	Wardrobe_EditWillAffect                            = 455,
	Wardrobe_ItemAddedToInventory                      = 456,
	Wardrobe_ItemOverBudget                            = 457,
	Wardrobe_OutfitOverBudget                          = 458,
	Waypoint_Reached                                   = 459,
	WeaponCustomizationUI_Fail                         = 460,
	Witnessing_WitnessedByNPC                          = 461,
	Witnessing_WitnessedByPlayer                       = 462,
	Witnessing_YouWitnessedPlayer                      = 463,
	etHUDMessage_MAX                                   = 464
};*/

// Enum APBGame.cSDD.etHUDMessageScene
/*enum etHUDMessageScene
{
	Default                                            = 0,
	SystemMessage                                      = 1,
	TutorialMessage                                    = 2,
	HeatLevel5                                         = 3,
	etHUDMessageScene_MAX                              = 4
};*/

// Enum APBGame.cSDD.etHUDPopUpMenuItem
/*enum etHUDPopUpMenuItem
{
	Bug12477                                           = 0,
	Lobby                                              = 1,
	Options                                            = 2,
	MusicPlayback                                      = 3,
	Social                                             = 4,
	Divider0                                           = 5,
	DistrictMap                                        = 6,
	CityMap                                            = 7,
	Scoreboard                                         = 8,
	UnPledge                                           = 9,
	Divider1                                           = 10,
	EnableLFG                                          = 11,
	Disable_LFG                                        = 12,
	Divider2                                           = 13,
	Deployment                                         = 14,
	Inventory                                          = 15,
	Divider3                                           = 16,
	CharacterInfo                                      = 17,
	TeamManagement                                     = 18,
	Leagues                                            = 19,
	Divider5                                           = 20,
	FullChat                                           = 21,
	ChatChannelCommands                                = 22,
	ConsoleCommands                                    = 23,
	EmoteCommands                                      = 24,
	Divider6                                           = 25,
	BugReport                                          = 26,
	Help                                               = 27,
	Knowledgebase                                      = 28,
	Harassment                                         = 29,
	etHUDPopUpMenuItem_MAX                             = 30
};*/

// Enum APBGame.cSDD.etHUDRadarMarker
/*enum etHUDRadarMarker
{
	None                                               = 0,
	AmmoZone                                           = 1,
	DeathmatchTarget                                   = 2,
	GMPlayer                                           = 3,
	GroupLeader                                        = 4,
	GroupMember                                        = 5,
	HeatMax_Criminal                                   = 6,
	HeatMax_Enforcer                                   = 7,
	Mailbox                                            = 8,
	OpenWorldItemDropOff                               = 9,
	OpenWorldVehicleDropOff                            = 10,
	OppositionMember                                   = 11,
	PlayerVehicle                                      = 12,
	Task_Checkpoint                                    = 13,
	Task_Item                                          = 14,
	Task_Target                                        = 15,
	Test                                               = 16,
	VehicleRepairZone                                  = 17,
	VehicleSpawnZone                                   = 18,
	etHUDRadarMarker_MAX                               = 19
};*/

// Enum APBGame.cSDD.etHUDReticuleHintIcon
/*enum etHUDReticuleHintIcon
{
	None                                               = 0,
	Antigraffiti                                       = 1,
	Arrest                                             = 2,
	Arrested                                           = 3,
	BombDisposal                                       = 4,
	Bombing                                            = 5,
	BuildingArson                                      = 6,
	Burglary                                           = 7,
	CargoInteraction                                   = 8,
	Contact                                            = 9,
	ForcedEntry                                        = 10,
	Graffiti                                           = 11,
	Mailbox                                            = 12,
	Mugging                                            = 13,
	PickUpItem                                         = 14,
	Player                                             = 15,
	RC_Door                                            = 16,
	RC_Fence                                           = 17,
	RC_Ladder                                          = 18,
	Rescue                                             = 19,
	VehicleArson                                       = 20,
	VehicleBreakIn                                     = 21,
	VehicleCargo                                       = 22,
	VehicleEnter                                       = 23,
	VehicleLooting                                     = 24,
	VehicleTheft                                       = 25,
	etHUDReticuleHintIcon_MAX                          = 26
};*/

// Enum APBGame.cSDD.etHUDScenes
/*enum etHUDScenes
{
	ActionMessage                                      = 0,
	AutoGroup                                          = 1,
	BackupPending                                      = 2,
	Cargo                                              = 3,
	Cash                                               = 4,
	Ceremony                                           = 5,
	CharacterInfo                                      = 6,
	Chat                                               = 7,
	Clock                                              = 8,
	CombatMsg                                          = 9,
	Connection                                         = 10,
	Contact                                            = 11,
	CSAProgressBars                                    = 12,
	DialogEvents                                       = 13,
	Effect_Health                                      = 14,
	Effect_HitIndicators                               = 15,
	Group                                              = 16,
	Heat                                               = 17,
	HudMessages                                        = 18,
	InfoBrowser                                        = 19,
	Locale                                             = 20,
	Mail                                               = 21,
	MissionsDisabled                                   = 22,
	MusicInfo                                          = 23,
	MusicPlaybackHUD                                   = 24,
	Organisation                                       = 25,
	PopUpMenu                                          = 26,
	Radar                                              = 27,
	Reticule                                           = 28,
	Subtitles                                          = 29,
	TaskMarkers                                        = 30,
	TutorialDistrict                                   = 31,
	Usables                                            = 32,
	WeaponInfo                                         = 33,
	Witnessing                                         = 34,
	etHUDScenes_MAX                                    = 35
};*/

// Enum APBGame.cSDD.etHUDTaskMarker
/*enum etHUDTaskMarker
{
	None                                               = 0,
	Contact                                            = 1,
	MaxHeatPlayer_Criminal                             = 2,
	MaxHeatPlayer_Enforcer                             = 3,
	MaxThreatPlayer_Criminal                           = 4,
	MaxThreatPlayer_Enforcer                           = 5,
	OpenWorldDropOff_Enforcer                          = 6,
	OpenWorldDropOff_LargeItem                         = 7,
	OpenWorldDropOff_MediumItem                        = 8,
	OpenWorldDropOff_SmallItem                         = 9,
	OpenWorldDropOff_Vehicle                           = 10,
	OpenWorldDropOff_Vehicle_Enforcer                  = 11,
	OpenWorldDropOffAuto                               = 12,
	Player_Deathmatch                                  = 13,
	Player_DeployedVehicle                             = 14,
	Player_Group                                       = 15,
	Player_GroupLeader                                 = 16,
	Player_Opposition                                  = 17,
	Task_Checkpoint                                    = 18,
	Task_Item                                          = 19,
	Task_Target                                        = 20,
	VehicleRepair                                      = 21,
	Vending_Ammo                                       = 22,
	Vending_Mailbox                                    = 23,
	Vending_Vehicle                                    = 24,
	Waypoint_Group                                     = 25,
	Waypoint_Leader                                    = 26,
	Waypoint_Personal                                  = 27,
	etHUDTaskMarker_MAX                                = 28
};*/

// Enum APBGame.cSDD.etHUDTaskMarkerScene
/*enum etHUDTaskMarkerScene
{
	Default                                            = 0,
	etHUDTaskMarkerScene_MAX                           = 1
};*/

// Enum APBGame.cSDD.etHUDTextureIcon
/*enum etHUDTextureIcon
{
	None                                               = 0,
	Achievement_Icon_Complete                          = 1,
	Achievement_Icon_Hidden                            = 2,
	Achievement_Icon_Locked01                          = 3,
	Ammo_Bullet_12Guage                                = 4,
	Ammo_Bullet                                        = 5,
	Ammo_Bullet_9mm                                    = 6,
	Ammo_Bullet_BeanBag                                = 7,
	Ammo_Bullet_HighPoweredRifle                       = 8,
	Ammo_Bullet_LessLethalPistol                       = 9,
	Ammo_Bullet_Magnum                                 = 10,
	Ammo_Bullets_MachineGun                            = 11,
	Ammo_Grenade_40mm                                  = 12,
	Ammo_Grenade_Concussion                            = 13,
	Ammo_Grenade_Frag                                  = 14,
	Ammo_Grenade_LessLethal40mm                        = 15,
	Ammo_Grenade_Percussion                            = 16,
	Ammo_Grenade_Stinger                               = 17,
	Ammo_Grenade_StunGrenade                           = 18,
	Ammo_LessLethalGeneric                             = 19,
	Ammo_Rocket                                        = 20,
	Ceremony_ArrestStreak                              = 21,
	Ceremony_BadShot                                   = 22,
	Ceremony_Bounty                                    = 23,
	Ceremony_BountyClaimed                             = 24,
	Ceremony_Cash                                      = 25,
	Ceremony_ContactUp                                 = 26,
	Ceremony_GenericUnlock                             = 27,
	Ceremony_KillStreak                                = 28,
	Ceremony_LeagueWinner                              = 29,
	Ceremony_NewClothing                               = 30,
	Ceremony_NewEmotes                                 = 31,
	Ceremony_NewEquipment                              = 32,
	Ceremony_NewPrimitives                             = 33,
	Ceremony_NewSlot                                   = 34,
	Ceremony_NewSong                                   = 35,
	Ceremony_NewSymbols                                = 36,
	Ceremony_NewThemesInstruments                      = 37,
	Ceremony_NewUpgrades                               = 38,
	Ceremony_NewVehiclesParts                          = 39,
	Ceremony_NewWeapons                                = 40,
	Ceremony_NotorietyDown                             = 41,
	Ceremony_NotorietyUp                               = 42,
	Ceremony_OrganizationUp                            = 43,
	Ceremony_PrestigeDown                              = 44,
	Ceremony_PrestigeUp                                = 45,
	Ceremony_RoleUp                                    = 46,
	Ceremony_ThreatLevel                               = 47,
	Ceremony_TutorialComplete                          = 48,
	Ceremony_Unlock                                    = 49,
	Ceremony_WinStreak                                 = 50,
	CharacterCreation                                  = 51,
	ClanRank_Leader                                    = 52,
	ClanRank_Member                                    = 53,
	ClanRank_Officer                                   = 54,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedForearmLeft = 55,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedForearmRight = 56,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedFullLeft = 57,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedFullRight = 58,
	Clothing_F_Armwear_Bracelet_Noir_LeatherbandRight  = 59,
	Clothing_F_Armwear_Bracelet_Noir_PearlRight        = 60,
	Clothing_F_Armwear_Bracelet_Noir_StuddedCharlotte  = 61,
	Clothing_F_Armwear_Bracelet_Urban_WristbandRightCharlotte = 62,
	Clothing_F_Armwear_ForearmBand_Skate_Charlotte     = 63,
	Clothing_F_Armwear_ForearmSweatband_Athletic_Charlotte = 64,
	Clothing_F_Armwear_Wrist_Functional_BraceletBulletsRight = 65,
	Clothing_F_Armwear_Wrist_Functional_BraceletsBulletsRight = 66,
	Clothing_F_Armwear_Wristwatch_Functional_JeweledRimMetalstrap = 67,
	Clothing_F_Armwear_Wristwatch_Noir_RectangularCharlotte = 68,
	Clothing_F_Chestwear_BackHolster_Functional_DoubleGun = 69,
	Clothing_F_Chestwear_Badge_Enforcement_BadgeDeputy = 70,
	Clothing_F_Chestwear_Badge_Enforcement_Star        = 71,
	Clothing_F_Chestwear_MidriffWebbing_Functional_Gun = 72,
	Clothing_F_Chestwear_ShoulderHolster_Functional_Knife = 73,
	Clothing_F_Dress_MicroMini_Functional_LongsleevedPolo = 74,
	Clothing_F_Dress_Mini_Fashion_LowBack              = 75,
	Clothing_F_Dress_Mini_Fashion_LowBackSequins       = 76,
	Clothing_F_Facewear_Earpiece_Enforcement_HighTecLeft = 77,
	Clothing_F_Facewear_Earpiece_Enforcement_RegularLeft = 78,
	Clothing_F_Facewear_Glasses_Fashion_SunSofia       = 79,
	Clothing_F_Facewear_Glasses_Regular_Aviator        = 80,
	Clothing_F_Facewear_Glasses_Regular_BigOval        = 81,
	Clothing_F_Facewear_Mask_Criminal_Hockey           = 82,
	Clothing_F_Facewear_Mask_Criminal_Outlaw           = 83,
	Clothing_F_Facewear_Piercing_Functional_EarringLeft = 84,
	Clothing_F_Facewear_Piercing_Functional_EarringRight = 85,
	Clothing_F_Facewear_Piercing_Functional_EarringYinYangLeft = 86,
	Clothing_F_Facewear_Piercing_Functional_EarringYinYangRight = 87,
	Clothing_F_Facewear_Piercing_Functional_StudPyramidLeft = 88,
	Clothing_F_Facewear_Piercing_Functional_StudPyramidRight = 89,
	Clothing_F_Facewear_Piercing_Noir_BrowBarbellRight = 90,
	Clothing_F_Facewear_Piercing_Noir_EarCrossInvertedLeft = 91,
	Clothing_F_Facewear_Piercing_Noir_EarCrossInvertedRight = 92,
	Clothing_F_Facewear_Piercing_Noir_EarTopRingsRight = 93,
	Clothing_F_Facewear_Piercing_Skate_EarringRight    = 94,
	Clothing_F_Facewear_Piercing_Urban_EarDollarLeft   = 95,
	Clothing_F_Facewear_Piercing_Urban_EarDollarRight  = 96,
	Clothing_F_Facewear_Piercings_Skate_NoseRing       = 97,
	Clothing_F_Footwear_Boots_Functional_KneeHighWork  = 98,
	Clothing_F_Footwear_Shoes_Fashion_Flats            = 99,
	Clothing_F_Footwear_Shoes_Functional_Flats         = 100,
	Clothing_F_Footwear_Shoes_Functional_HighHeels     = 101,
	Clothing_F_Footwear_Shoes_Skate_Basic              = 102,
	Clothing_F_Footwear_Trainers_Urban_Plain           = 103,
	Clothing_F_Hairwear_Aliceband_Functional_Basic     = 104,
	Clothing_F_Hairwear_Aliceband_Functional_Bow       = 105,
	Clothing_F_Hairwear_Aliceband_Functional_HornsDevil = 106,
	Clothing_F_Hairwear_Aliceband_Functional_Rose      = 107,
	Clothing_F_Hairwear_Aliceband_Functional_Roses     = 108,
	Clothing_F_Hairwear_Hat_Enforcement_Beret          = 109,
	Clothing_F_Hairwear_Hat_Enforcement_Cop            = 110,
	Clothing_F_Hairwear_Hat_Enforcement_MilitaryCap    = 111,
	Clothing_F_Hairwear_Hat_Functional_BaseballCap     = 112,
	Clothing_F_Hairwear_Hat_Functional_Beanie          = 113,
	Clothing_F_Hairwear_Hat_Functional_Cowboy          = 114,
	Clothing_F_Hairwear_Hat_Functional_Fedora          = 115,
	Clothing_F_Hairwear_Hat_Noir_Bandana               = 116,
	Clothing_F_Hairwear_Hat_Urban_Bandana              = 117,
	Clothing_F_Hairwear_Headband_Athletic_Basic        = 118,
	Clothing_F_Handwear_Gloves_Noir_LeatherPlainLeft   = 119,
	Clothing_F_Handwear_Gloves_Noir_LeatherPlainRight  = 120,
	Clothing_F_Handwear_Gloves_Noir_LeatherStudedLeft  = 121,
	Clothing_F_Handwear_Gloves_Noir_LeatherStudedRight = 122,
	Clothing_F_Handwear_Ring_Noir_CharlotteLeft        = 123,
	Clothing_F_Handwear_Ring_Noir_EagleShieldLeft      = 124,
	Clothing_F_Headwear_Badge_Enforcement_BadgeDeputy  = 125,
	Clothing_F_Headwear_Badge_Enforcement_Star         = 126,
	Clothing_F_Headwear_Glasses_Functional_Aviator     = 127,
	Clothing_F_Legwear_Kneesocks_Functional_RegularLeft = 128,
	Clothing_F_Legwear_Kneesocks_Functional_RegularRight = 129,
	Clothing_F_Legwear_ThighHolster_Enforcement_Knife  = 130,
	Clothing_F_Legwear_ThighHolster_Enforcement_LeftThigh = 131,
	Clothing_F_Neckwear_Badge_Enforcement_Deputy       = 132,
	Clothing_F_Neckwear_Badge_Enforcement_PrentissTigers = 133,
	Clothing_F_Neckwear_Badge_Enforcement_Star         = 134,
	Clothing_F_Neckwear_Choker_Noir_Charlotte          = 135,
	Clothing_F_Neckwear_Choker_Noir_Skull              = 136,
	Clothing_F_Neckwear_Necklace_Enforcement_Dogtag    = 137,
	Clothing_F_Neckwear_Necklace_Functional_DiamondHeart = 138,
	Clothing_F_Neckwear_Necklace_Functional_GoldLong   = 139,
	Clothing_F_Neckwear_Necklace_Functional_GoldMedium = 140,
	Clothing_F_Neckwear_Necklace_Functional_GoldShort  = 141,
	Clothing_F_Neckwear_Necklace_Skate_ToothStacey     = 142,
	Clothing_F_Skirt_Long_Functional_Office            = 143,
	Clothing_F_Skirt_Mini_Functional_Flared            = 144,
	Clothing_F_Skirt_Mini_Functional_Tutu              = 145,
	Clothing_F_Swimwear_BikiniBottom_Functional_BriefRing = 146,
	Clothing_F_Swimwear_BikiniTop_Functional_HalterRing = 147,
	Clothing_F_Top_Longsleeve_Functional_ShirtDoneUp   = 148,
	Clothing_F_Top_Longsleeve_Functional_ShirtOffice   = 149,
	Clothing_F_Top_Longsleeve_Skate_HoodieHoodDown     = 150,
	Clothing_F_Top_Longsleeve_Skate_HoodieHoodup       = 151,
	Clothing_F_Top_Longsleeved_Functional_JacketLeather = 152,
	Clothing_F_Top_Longsleeved_Functional_PulloverPolo = 153,
	Clothing_F_Top_Longsleeved_Functional_PulloverTight = 154,
	Clothing_F_Top_LongSleeved_Functional_SuitJacket   = 155,
	Clothing_F_Top_Shortsleeved_Functional_Tee         = 156,
	Clothing_F_Top_Shortsleeved_Noir_Tee               = 157,
	Clothing_F_Top_Vest_Athletic_Cropped               = 158,
	Clothing_F_Top_Vest_Athletic_Regular               = 159,
	Clothing_F_Top_Vest_Enforcement_Base               = 160,
	Clothing_F_Top_Vest_Enforcement_Shooting           = 161,
	Clothing_F_Top_Vest_Functional_Cropped             = 162,
	Clothing_F_Trousers_Combats_Enforcement_US         = 163,
	Clothing_F_Trousers_Jeans_Functional_Regular       = 164,
	Clothing_F_Trousers_Jeans_Functional_Skinny        = 165,
	Clothing_F_Trousers_Jeans_Noir_Skinny              = 166,
	Clothing_F_Trousers_Leggings_Fashion_FullLength    = 167,
	Clothing_F_Trousers_Leggings_Functional_CalfLength = 168,
	Clothing_F_Trousers_Leggings_Functional_FullLength = 169,
	Clothing_F_Trousers_Leggings_Noir_CalfLength       = 170,
	Clothing_F_Trousers_Leggings_Noir_FullLength       = 171,
	Clothing_F_Trousers_Suit_Functional_Regular        = 172,
	Clothing_F_Trousers_Tracksuit_Athletic_Regular     = 173,
	Clothing_F_TrousersShorts_Butt_Functional_Denim    = 174,
	Clothing_F_TrousersShorts_Butt_Noir_Leather        = 175,
	Clothing_F_TrousersShorts_ThighLength_Functional_Safari = 176,
	Clothing_F_Underwear_BoyShorts_Functional_Lace     = 177,
	Clothing_F_Underwear_Bra_Functional_Adhesive       = 178,
	Clothing_F_Underwear_Bra_Functional_Lace           = 179,
	Clothing_F_Underwear_Bra_Functional_Plain          = 180,
	Clothing_F_Underwear_Bra_Functional_Strapless      = 181,
	Clothing_F_Underwear_Shorties_Functional_Plain     = 182,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerHighLeft = 183,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerHighRight = 184,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerLowLeft = 185,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerLowRight = 186,
	Clothing_F_Underwear_Stockings_Functional_LaceSwirlsLeft = 187,
	Clothing_F_Underwear_Stockings_Functional_LaceSwirlsRight = 188,
	Clothing_F_Underwear_Stockings_Noir_TornHighLeft   = 189,
	Clothing_F_Underwear_Stockings_Noir_TornHighRight  = 190,
	Clothing_F_Underwear_Thong_Functional_Lace         = 191,
	Clothing_F_Waistwear_Badge_Enforcement_BadgeDeputy = 192,
	Clothing_F_Waistwear_Badge_Enforcement_Star        = 193,
	Clothing_F_Waistwear_Belt_Enforcement_BulletAngledRight = 194,
	Clothing_F_Waistwear_Belt_Enforcement_BulletStar   = 195,
	Clothing_F_Waistwear_Belt_Enforcement_EquipmentEM  = 196,
	Clothing_F_Waistwear_Belt_Fashion_Scarf            = 197,
	Clothing_F_Waistwear_Belt_Functional_Basic         = 198,
	Clothing_F_Waistwear_Belt_Functional_LeatherWeaveRegular = 199,
	Clothing_F_Waistwear_Belt_Noir_CrossedStudded      = 200,
	Clothing_F_Waistwear_Belt_Noir_Rock                = 201,
	Clothing_F_Waistwear_Belt_Skate_StuddedFlatBuckleSimple = 202,
	Clothing_F_Waistwear_Belt_Skate_StuddedSimple      = 203,
	Clothing_F_Waistwear_Corset_Noir_Charlotte         = 204,
	Clothing_F_Waistwear_Piercing_Functional_BellyButterfly = 205,
	Clothing_F_Waistwear_Piercing_Functional_BellyDiamondBall = 206,
	Clothing_F_Waistwear_Piercing_Functional_BellyHeart = 207,
	Clothing_F_Waistwear_Piercing_Functional_BellyJewels = 208,
	Clothing_M_Armwear_Bracelets_Enforcement_LaRochaLeft = 209,
	Clothing_M_Armwear_Bracelets_Skate_StuddedLeft     = 210,
	Clothing_M_Armwear_Bracelets_Skate_StuddedRight    = 211,
	Clothing_M_Armwear_Upper_Functional_BandLaRochaLeft = 212,
	Clothing_M_Armwear_Wrist_Functional_BraceletBulletsLeft = 213,
	Clothing_M_Armwear_Wristwatch_Enforcement_LaRochaRight = 214,
	Clothing_M_Chestwear_Badge_Enforcement_BadgeDeputy = 215,
	Clothing_M_Chestwear_Badge_Enforcement_Star        = 216,
	Clothing_M_Chestwear_Piercings_Skate_Nipple        = 217,
	Clothing_M_Chestwear_ShoulderHolster_Functional_DoubleH = 218,
	Clothing_M_Chestwear_ShoulderHolster_Functional_Knife = 219,
	Clothing_M_Facewear_Earpiece_Enforcement_HighTecLeft = 220,
	Clothing_M_Facewear_Earpiece_Enforcement_RegularLeft = 221,
	Clothing_M_Facewear_Glasses_Athletic_Sun           = 222,
	Clothing_M_Facewear_Glasses_Regular_Aviator        = 223,
	Clothing_M_Facewear_Glasses_Regular_BigOval        = 224,
	Clothing_M_Facewear_Glasses_Regular_NarrowRectangle = 225,
	Clothing_M_Facewear_Glasses_Regular_Rectangle      = 226,
	Clothing_M_Facewear_Goggles_Functional_Flying      = 227,
	Clothing_M_Facewear_Mask_Criminal_Hockey           = 228,
	Clothing_M_Facewear_Mask_Criminal_Outlaw           = 229,
	Clothing_M_Facewear_Piercing_Functional_EarringYinYangLeft = 230,
	Clothing_M_Facewear_Piercing_Functional_EarringYinYangRight = 231,
	Clothing_M_Facewear_Piercing_Noir_EarCrossInvertedLeft = 232,
	Clothing_M_Facewear_Piercing_Noir_EarCrossInvertedRight = 233,
	Clothing_M_Facewear_Piercing_Noir_EarTopRingsRight = 234,
	Clothing_M_Facewear_Piercing_Skate_EarringRight    = 235,
	Clothing_M_Facewear_Piercing_Urban_EarDollarLeft   = 236,
	Clothing_M_Facewear_Piercing_Urban_EarDollarRight  = 237,
	Clothing_M_Facewear_Piercings_Skate_Chin           = 238,
	Clothing_M_Facewear_Piercings_Skate_EarringLeft    = 239,
	Clothing_M_Facewear_Piercings_Skate_EarringRight   = 240,
	Clothing_M_Facewear_Piercings_Skate_EarsLeft       = 241,
	Clothing_M_Facewear_Piercings_Skate_EarsRight      = 242,
	Clothing_M_Facewear_Piercings_Skate_EarsStudLeft   = 243,
	Clothing_M_Facewear_Piercings_Skate_EarsStudRight  = 244,
	Clothing_M_Facewear_Piercings_Skate_Forehead       = 245,
	Clothing_M_Facewear_Piercings_Skate_NoseRing       = 246,
	Clothing_M_Facewear_Piercings_Skate_NoseTop        = 247,
	Clothing_M_Facewear_Piercings_Skate_Scalp          = 248,
	Clothing_M_Footwear_BootsAnkle_Enforcement_LaRocha = 249,
	Clothing_M_Footwear_BootsAnkle_Enforcement_Leather = 250,
	Clothing_M_Footwear_BootsAnkle_Enforcement_Stealth = 251,
	Clothing_M_Footwear_BootsAnkle_Enforcement_Walking = 252,
	Clothing_M_Footwear_Shoes_Functional_Brogue        = 253,
	Clothing_M_Footwear_Shoes_Skate_Basic              = 254,
	Clothing_M_Footwear_Socks_Functional_AnkleLeft     = 255,
	Clothing_M_Footwear_Socks_Functional_AnkleRight    = 256,
	Clothing_M_Footwear_Trainers_Urban_HipHopYoDawg    = 257,
	Clothing_M_Hairwear_Aliceband_Functional_Basic     = 258,
	Clothing_M_Hairwear_Aliceband_Functional_HornsDevil = 259,
	Clothing_M_Hairwear_Goggles_Functional_FlyingContact = 260,
	Clothing_M_Hairwear_Hat_Enforcement_Beanie         = 261,
	Clothing_M_Hairwear_Hat_Enforcement_Beret          = 262,
	Clothing_M_Hairwear_Hat_Enforcement_Cop            = 263,
	Clothing_M_Hairwear_Hat_Enforcement_MilitaryCap    = 264,
	Clothing_M_Hairwear_Hat_Functional_BaseballCap     = 265,
	Clothing_M_Hairwear_Hat_Functional_Cowboy          = 266,
	Clothing_M_Hairwear_Hat_Functional_Fedora          = 267,
	Clothing_M_Hairwear_Hat_Urban_Bandana              = 268,
	Clothing_M_Hairwear_Hat_Urban_BaseballCapBackwards = 269,
	Clothing_M_Hairwear_Headband_Athletic_Basic        = 270,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletFingerlessLeft = 271,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletFingerlessRight = 272,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletLeft = 273,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletRight = 274,
	Clothing_M_Handwear_Gloves_Noir_LeatherFingerlessLeft = 275,
	Clothing_M_Handwear_Gloves_Noir_LeatherFingerlessRight = 276,
	Clothing_M_Handwear_Gloves_Noir_LeatherPlainLeft   = 277,
	Clothing_M_Handwear_Gloves_Noir_LeatherPlainRight  = 278,
	Clothing_M_Handwear_Ring_Functional_SmallLeftRing  = 279,
	Clothing_M_Handwear_Ring_Noir_SkullRightMiddle     = 280,
	Clothing_M_Handwear_Ring_Urban_DollarLeftIndex     = 281,
	Clothing_M_Headwear_Badge_Enforcement_BadgeDeputy  = 282,
	Clothing_M_Headwear_Badge_Enforcement_Star         = 283,
	Clothing_M_Headwear_Glasses_Functional_Aviator     = 284,
	Clothing_M_Legwear_ThighHolster_Enforcement_Knife  = 285,
	Clothing_M_Legwear_ThighHolster_Enforcement_LaRochaRightThigh = 286,
	Clothing_M_Neckwear_Badge_Enforcement_Deputy       = 287,
	Clothing_M_Neckwear_Badge_Enforcement_PoliceBadge  = 288,
	Clothing_M_Neckwear_Badge_Enforcement_PrentissTigers = 289,
	Clothing_M_Neckwear_Badge_Enforcement_Star         = 290,
	Clothing_M_Neckwear_Necklace_Enforcement_Dogtag    = 291,
	Clothing_M_Neckwear_Necklace_Functional_GogglesFlying = 292,
	Clothing_M_Neckwear_Necklace_Urban_GoldFlat        = 293,
	Clothing_M_Neckwear_Necklace_Urban_GoldShort       = 294,
	Clothing_M_Neckwear_Necklace_Urban_PlatinumDollar  = 295,
	Clothing_M_Neckwear_Pendant_Urban_PlatinumCrown    = 296,
	Clothing_M_Neckwear_Pendant_Urban_RoundSpinner     = 297,
	Clothing_M_Neckwear_Scarf_Functional_Shemagh       = 298,
	Clothing_M_Neckwear_Scarf_Functional_ShemaghMask   = 299,
	Clothing_M_Neckwear_Tie_Functional_DoneUp          = 300,
	Clothing_M_Neckwear_Tie_Functional_Loose           = 301,
	Clothing_M_Top_Longsleeve_Skate_HoodieHoodup       = 302,
	Clothing_M_Top_Longsleeved_Functional_JacketLeatherFCOpen = 303,
	Clothing_M_Top_LongSleeved_Functional_ShirtClosedCollar = 304,
	Clothing_M_Top_Longsleeved_Functional_SmartShirt   = 305,
	Clothing_M_Top_Longsleeved_Functional_SmartShirtPopped = 306,
	Clothing_M_Top_LongSleeved_Functional_SuitJacket   = 307,
	Clothing_M_Top_LongSleeved_Functional_SuitJacketCasual = 308,
	Clothing_M_Top_LongSleeved_Functional_SuitJacketDoneUp = 309,
	Clothing_M_Top_Longsleeved_Funtional_JacketLeather = 310,
	Clothing_M_Top_LongSleeved_Urban_JacketCollar      = 311,
	Clothing_M_Top_Longsleeved_Urban_JacketLeatherPopped = 312,
	Clothing_M_Top_LongSleeved_Urban_Shirt             = 313,
	Clothing_M_Top_ShortSleeved_Functional_CollaredShirtOpen = 314,
	Clothing_M_Top_ShortSleeved_Functional_TeeTight    = 315,
	Clothing_M_Top_ShortSleeved_Urban_CollaredShirtUniform = 316,
	Clothing_M_Top_ShortSleeved_Urban_TeeMedium        = 317,
	Clothing_M_Top_Sleeveless_Enforcement_Tee          = 318,
	Clothing_M_Top_Sleeveless_Functional_Wifebeater    = 319,
	Clothing_M_Top_Sleeveless_Noir_Tee                 = 320,
	Clothing_M_Top_Vest_Enforcement_Base               = 321,
	Clothing_M_Top_Vest_Enforcement_Slim               = 322,
	Clothing_M_Top_Vest_Enforcement_Webbing            = 323,
	Clothing_M_Top_Vest_Enforcement_WebbingForBase     = 324,
	Clothing_M_Top_Vest_Enforcement_WebbingHolster     = 325,
	Clothing_M_Trousers_Chino_Functional_Regular       = 326,
	Clothing_M_Trousers_Combats_Enforcement_US         = 327,
	Clothing_M_Trousers_Jeans_Functional_Regular       = 328,
	Clothing_M_Trousers_Jeans_Functional_Skinny        = 329,
	Clothing_M_Trousers_Jeans_Urban_Baggy              = 330,
	Clothing_M_Trousers_Suit_Functional_Regular        = 331,
	Clothing_M_Trousers_Tracksuit_Athletic_Regular     = 332,
	Clothing_M_TrousersShorts_CalfLength_Urban_Baggy   = 333,
	Clothing_M_Underwear_Boxers_Athletic_Drawstring    = 334,
	Clothing_M_Underwear_Briefs_Functional_Regular     = 335,
	Clothing_M_Waistwear_Badge_Enforcement_BadgeDeputy = 336,
	Clothing_M_Waistwear_Badge_Enforcement_Star        = 337,
	Clothing_M_Waistwear_Belt_Enforcement_BulletAngledLeft = 338,
	Clothing_M_Waistwear_Belt_Enforcement_EquipmentEM  = 339,
	Clothing_M_Waistwear_Belt_Functional_LeatherWeaveRegular = 340,
	Clothing_M_Waistwear_Belt_Functional_LowRegular    = 341,
	Clothing_M_Waistwear_Belt_Functional_RegularBuckle = 342,
	Clothing_M_Waistwear_Belt_Noir_CrossedStudded      = 343,
	Clothing_M_Waistwear_Belt_Noir_StuddedAngledLeft   = 344,
	Clothing_M_Waistwear_Belt_Skate_LowRoundStuds      = 345,
	Clothing_M_Waistwear_Belt_Skate_LowStudded         = 346,
	Clothing_M_Waistwear_Belt_Skate_StuddedFlatBuckleSimple = 347,
	Clothing_M_Waistwear_Belt_Skate_StuddedSimple      = 348,
	CombatMsg_Arrest                                   = 349,
	CombatMsg_Assist                                   = 350,
	CombatMsg_Kill                                     = 351,
	CombatMsg_Stun                                     = 352,
	Contac_AkikoX                                      = 353,
	Contact_AmitKarim                                  = 354,
	Contact_ArlonBenjamin                              = 355,
	Contact_BaezBenjamin                               = 356,
	Contact_BritneyBloodrose                           = 357,
	Contact_ByeongLee                                  = 358,
	Contact_ByronBloodrose                             = 359,
	Contact_CharlotteBloodrose                         = 360,
	Contact_Chiro                                      = 361,
	Contact_Chiza                                      = 362,
	Contact_ChungHee                                   = 363,
	Contact_DarrylKent                                 = 364,
	Contact_DoubleB                                    = 365,
	Contact_EvaOrlandez                                = 366,
	Contact_GraysonFell                                = 367,
	Contact_Grissom                                    = 368,
	Contact_HarmonBenjamin                             = 369,
	Contact_HeaChoi                                    = 370,
	Contact_Javez                                      = 371,
	Contact_JeungBloodrose                             = 372,
	Contact_JustinTeng                                 = 373,
	Contact_KasparDanko                                = 374,
	Contact_LaRocha                                    = 375,
	Contact_LillithBloodrose                           = 376,
	Contact_MichaelSimeone                             = 377,
	Contact_MirriKent                                  = 378,
	Contact_OrlenzMoretti                              = 379,
	Contact_PaganBloodrose                             = 380,
	Contact_Sabbat                                     = 381,
	Contact_SaulLinklater                              = 382,
	Contact_SeungBloodrose                             = 383,
	Contact_Shift                                      = 384,
	Contact_SimonTran                                  = 385,
	Contact_Sofia                                      = 386,
	Contact_StregaBloodrose                            = 387,
	Contact_StuPhoenix                                 = 388,
	Contact_Suji                                       = 389,
	Contact_TerriQuan                                  = 390,
	Contact_TyDurrant                                  = 391,
	Contact_TyronSennet                                = 392,
	Contact_Up                                         = 393,
	Contact_VeronkiaLee                                = 394,
	Contact_VioletPrentiss                             = 395,
	Contact_WilsonLeBoyce                              = 396,
	Contact_YoDawg                                     = 397,
	Contact_Zombie                                     = 398,
	ContactStatus_Locked                               = 399,
	ContactStatus_Pledged                              = 400,
	ContactStatus_Unlocked                             = 401,
	ContactStregaBloodrose                             = 402,
	CSAIcon_ExclamationMark                            = 403,
	Faction_Criminal64                                 = 404,
	Faction_Enforcer64                                 = 405,
	Group_Arrow                                        = 406,
	Group_Hud_Title_OnMission                          = 407,
	Group_Hud_Title_Ready                              = 408,
	Group_Hud_Title_Waiting                            = 409,
	Group_Leader                                       = 410,
	Group_SideLeader                                   = 411,
	Heat_Criminal_Level0                               = 412,
	Heat_Criminal_Level1                               = 413,
	Heat_Criminal_Level2                               = 414,
	Heat_Criminal_Level3                               = 415,
	Heat_Criminal_Level4                               = 416,
	Heat_Criminal_Level5                               = 417,
	Heat_Criminal_Level5_Masked                        = 418,
	Heat_Criminal_LevelMask                            = 419,
	Heat_Enforcer_Level0                               = 420,
	Heat_Enforcer_Level1                               = 421,
	Heat_Enforcer_Level2                               = 422,
	Heat_Enforcer_Level3                               = 423,
	Heat_Enforcer_Level4                               = 424,
	Heat_Enforcer_Level5                               = 425,
	Heat_Enforcer_Level5_Masked                        = 426,
	Heat_Enforcer_LevelMask                            = 427,
	Heat_GradientDown                                  = 428,
	Heat_GradientUp                                    = 429,
	HUD_ActionMessage_Exclamation                      = 430,
	icon_achievement_gotnewstuff                       = 431,
	Icon_Achievement_KillStats_EnemiesKilledAsGroupInDestroyedVehicle = 432,
	Icon_Achievement_KillStats_FromBehind              = 433,
	Icon_Achievement_KillStats_KillEnemyGroupFromPassengerSeat = 434,
	Icon_Achievement_KillStats_KillEnemyInVehicleUsingGrenade = 435,
	Icon_Achievement_KillStats_Notoriety5FromBehind    = 436,
	Icon_Achievement_KillStats_Prestige5FromBehind     = 437,
	Icon_Achievement_KillStats_WhileDriving            = 438,
	Icon_Achievement_KillStats_WhileLeaningOutOfVehicle = 439,
	Icon_Achievement_KnockoutStats_Enemies             = 440,
	Icon_Achievement_MatchStats_BackupsCalledIn        = 441,
	Icon_Achievement_MatchStats_EndMissionAsMVP        = 442,
	Icon_Achievement_MedalStats_MedalsWon              = 443,
	Icon_Achievement_MiscStats_BecomeGroupLeader       = 444,
	Icon_Achievement_MiscStats_CompletedMission_MissionName = 445,
	Icon_Achievement_MiscStats_ContactLevelUp          = 446,
	Icon_Achievement_MiscStats_OpenWorldGraffiti       = 447,
	Icon_Achievement_MiscStats_OrganisationLevelUp     = 448,
	Icon_Achievement_MiscStats_PlayerHealthRegenerated = 449,
	Icon_Achievement_MiscStats_RandomRewardsReceived   = 450,
	Icon_Achievement_MiscStats_ReachThreat15           = 451,
	Icon_Achievement_MiscStats_RoleLevelUp             = 452,
	Icon_Achievement_MiscStats_SelfCrimesWitnessed     = 453,
	Icon_Achievement_MiscStats_ShopsRamRaided          = 454,
	Icon_Achievement_MiscStats_SprintingDistance       = 455,
	Icon_Achievement_MiscStats_SuccessfulWitnessings   = 456,
	Icon_Achievement_MiscStats_VehicleDamageRepaired   = 457,
	Icon_Achievement_OpenWorld_LargeTaskItemDelivered  = 458,
	Icon_Achievement_OpenWorld_MediumTaskItemDelivered = 459,
	Icon_Achievement_OpenWorld_MuggingsCompleted       = 460,
	Icon_Achievement_OpenWorld_SmallTaskItemDelivered  = 461,
	Icon_Achievement_SelfDeathStats_ByEnemy            = 462,
	Icon_Achievement_SelfDeathStats_ByFriendly         = 463,
	Icon_Achievement_StreakStats_ArrestEnemyKillStreak = 464,
	Icon_Achievement_StreakStats_ArrestStreak          = 465,
	Icon_Achievement_TakeoutStats_Notoriety5           = 466,
	Icon_Achievement_TaskTargetStats_BombDefusesCompleted = 467,
	Icon_Achievement_TaskTargetStats_BombingsCompleted = 468,
	Icon_Achievement_TaskTargetStats_CSICompleted      = 469,
	Icon_Achievement_TaskTargetStats_GraffitiCompleted = 470,
	Icon_Achievement_TaskTargetStats_VandalismsCompleted = 471,
	Icon_Achievement_TimeStats_TotalMatchTime          = 472,
	Icon_Achievement_TimeStats_TotalNotoriety5Time     = 473,
	Icon_Achievement_TimeStats_TotalPrestige5Time      = 474,
	Icon_Achievement_VehicleStats_Delivered            = 475,
	Icon_Achievement_VehicleStats_DeliveredInPristineCondition = 476,
	Icon_Achievement_VehicleStats_DrivenVehiclesDestroyed_Player = 477,
	Icon_Locker_Generic_Symbols                        = 478,
	Icon_Locker_Generic_Token                          = 479,
	Icon_Medal_Default                                 = 480,
	icon_msg_arrest                                    = 481,
	icon_msg_assault_rifle_ntec5                       = 482,
	icon_msg_automatic_shotgun_nfas12                  = 483,
	icon_msg_burstfirepistol_joker_rfp9                = 484,
	icon_msg_concussion_grenade                        = 485,
	icon_msg_crowdcontrolgun_sccg                      = 486,
	icon_msg_dartgunstabba_tg8                         = 487,
	icon_msg_frag_grenade                              = 488,
	icon_msg_kill                                      = 489,
	icon_msg_lightmachinegun_shaw556                   = 490,
	icon_msg_ltlgrenadelauncher_opgl79cd               = 491,
	icon_msg_machinepistol_nfa9                        = 492,
	icon_msg_machinepistolsas_pdw                      = 493,
	icon_msg_magnum_act44                              = 494,
	icon_msg_magnumrevolvercolby_rsa                   = 495,
	icon_msg_percussion_grenade                        = 496,
	icon_msg_repeatinggrenadelauncher_opgl79r          = 497,
	icon_msg_rescue                                    = 498,
	icon_msg_rifleobeya_cr762                          = 499,
	icon_msg_riotgunstabba_pftg                        = 500,
	icon_msg_rocketlauncher_osmaw                      = 501,
	icon_msg_semiautomaticrifle_oscar                  = 502,
	icon_msg_semiautopistolobeya_fbw                   = 503,
	icon_msg_shotgun_jg840                             = 504,
	icon_msg_sniperrifle50cal_s50r                     = 505,
	icon_msg_sniperrifle762_nhvr762                    = 506,
	icon_msg_snubnoserevolvercolby_snr850              = 507,
	icon_msg_stinger_grenade                           = 508,
	icon_msg_stun                                      = 509,
	icon_msg_stungunstabba_nl9                         = 510,
	icon_msg_submachinegun_ocaew626                    = 511,
	icon_msg_tacticalassaultrifle_star556              = 512,
	Icon_Reward_Emote                                  = 513,
	Icon_Reward_Vinyl                                  = 514,
	Icon_Scoreboard_Generic_Clan                       = 515,
	Icon_Scoreboard_Generic_Player                     = 516,
	Icon_Title_Destroy                                 = 517,
	Icon_Title_Question                                = 518,
	Icon_Title_Rename                                  = 519,
	Icon_Title_Symbol_Save                             = 520,
	icons_roles_ammospecialist_bronze                  = 521,
	icons_roles_ammospecialist_default                 = 522,
	icons_roles_ammospecialist_gold                    = 523,
	icons_roles_ammospecialist_silver                  = 524,
	icons_roles_assists_bronze                         = 525,
	icons_roles_assists_default                        = 526,
	icons_roles_assists_gold                           = 527,
	icons_roles_assists_silver                         = 528,
	icons_roles_carthief_bronze                        = 529,
	icons_roles_carthief_default                       = 530,
	icons_roles_carthief_gold                          = 531,
	icons_roles_carthief_silver                        = 532,
	icons_roles_cop_bronze                             = 533,
	icons_roles_cop_default                            = 534,
	icons_roles_cop_gold                               = 535,
	icons_roles_cop_silver                             = 536,
	icons_roles_detective_bronze                       = 537,
	icons_roles_detective_default                      = 538,
	icons_roles_detective_gold                         = 539,
	icons_roles_detective_silver                       = 540,
	icons_roles_fashionista_bronze                     = 541,
	icons_roles_fashionista_default                    = 542,
	icons_roles_fashionista_gold                       = 543,
	icons_roles_fashionista_silver                     = 544,
	icons_roles_hitman_bronze                          = 545,
	icons_roles_hitman_default                         = 546,
	icons_roles_hitman_gold                            = 547,
	icons_roles_hitman_silver                          = 548,
	icons_roles_mastermind_bronze                      = 549,
	icons_roles_mastermind_default                     = 550,
	icons_roles_mastermind_gold                        = 551,
	icons_roles_mastermind_silver                      = 552,
	icons_roles_swat_bronze                            = 553,
	icons_roles_swat_default                           = 554,
	icons_roles_swat_gold                              = 555,
	icons_roles_swat_silver                            = 556,
	icons_roles_tuner_bronze                           = 557,
	icons_roles_tuner_default                          = 558,
	icons_roles_tuner_gold                             = 559,
	icons_roles_tuner_silver                           = 560,
	InfoBrowser_Crime_BreakIn                          = 561,
	InfoBrowser_Crime_Mugging                          = 562,
	InfoBrowser_Crime_RamRaid                          = 563,
	InfoBrowser_DisplayPoint_Audio                     = 564,
	InfoBrowser_DisplayPoint_Graffiti                  = 565,
	InfoBrowser_DisplayPoint_Statue                    = 566,
	InfoBrowser_DisplayPoint_Vehicle                   = 567,
	InfoBrowser_RouteControl_Door                      = 568,
	InfoBrowser_RouteControl_Fence                     = 569,
	InfoBrowser_RouteControl_Ladder                    = 570,
	InfoBrowser_Vehicle_Enemy                          = 571,
	InfoBrowser_Vehicle_Friendly                       = 572,
	InfoBrowser_Vehicle_Neutral                        = 573,
	InfoBrowser_Vehicle_Stolen                         = 574,
	InfoBrowser_Vending_Ammo                           = 575,
	InfoBrowser_Vending_Designer                       = 576,
	InfoBrowser_Vending_Garage                         = 577,
	InfoBrowser_Vending_Mail                           = 578,
	InfoBrowser_Vending_Marketplace                    = 579,
	InfoBrowser_Vending_Music                          = 580,
	InfoBrowser_Vending_Persona                        = 581,
	InfoBrowser_Vending_VehicleSpawn                   = 582,
	InfoBrowser_Vending_Wardrobe                       = 583,
	INV_Equipment_AmmoCarrier                          = 584,
	INV_Equipment_BatteringRam                         = 585,
	INV_Equipment_BatteringRam01                       = 586,
	INV_Equipment_BatteringRam02                       = 587,
	INV_Equipment_BatteringRam03                       = 588,
	INV_Equipment_BrassKnuckles                        = 589,
	INV_Equipment_BrassKnuckles01                      = 590,
	INV_Equipment_BrassKnuckles02                      = 591,
	INV_Equipment_BrassKnuckles03                      = 592,
	INV_Equipment_Camera                               = 593,
	INV_Equipment_Camera01                             = 594,
	INV_Equipment_Camera02                             = 595,
	INV_Equipment_Camera03                             = 596,
	INV_Equipment_CrowBar                              = 597,
	INV_Equipment_CrowBar01                            = 598,
	INV_Equipment_CrowBar02                            = 599,
	INV_Equipment_CrowBar03                            = 600,
	INV_Equipment_CuttingTorch                         = 601,
	INV_Equipment_CuttingTorch01                       = 602,
	INV_Equipment_CuttingTorch02                       = 603,
	INV_Equipment_CuttingTorch03                       = 604,
	INV_Equipment_Explosives                           = 605,
	INV_Equipment_Explosives01                         = 606,
	INV_Equipment_Explosives02                         = 607,
	INV_Equipment_Explosives03                         = 608,
	INV_Equipment_Handcuffkeys                         = 609,
	INV_Equipment_Handcuffkeys01                       = 610,
	INV_Equipment_Handcuffkeys02                       = 611,
	INV_Equipment_Handcuffkeys03                       = 612,
	INV_Equipment_HandCuffs                            = 613,
	INV_Equipment_HandCuffs01                          = 614,
	INV_Equipment_HandCuffs02                          = 615,
	INV_Equipment_HandCuffs03                          = 616,
	INV_Equipment_PaintSprayer                         = 617,
	INV_Equipment_PaintSprayer01                       = 618,
	INV_Equipment_PaintSprayer02                       = 619,
	INV_Equipment_PaintSprayer03                       = 620,
	INV_Equipment_PetrolCan                            = 621,
	INV_Equipment_PetrolCan01                          = 622,
	INV_Equipment_PetrolCan02                          = 623,
	INV_Equipment_PetrolCan03                          = 624,
	INV_Equipment_PoliceBadge                          = 625,
	INV_Equipment_PoliceBadge01                        = 626,
	INV_Equipment_PoliceBadge02                        = 627,
	INV_Equipment_PoliceBadge03                        = 628,
	INV_Equipment_Scanner                              = 629,
	INV_Equipment_Scanner01                            = 630,
	INV_Equipment_Scanner02                            = 631,
	INV_Equipment_Scanner03                            = 632,
	INV_Equipment_SlimJim                              = 633,
	INV_Equipment_SlimJim01                            = 634,
	INV_Equipment_SlimJim02                            = 635,
	INV_Equipment_SlimJim03                            = 636,
	INV_Equipment_SprayCan                             = 637,
	INV_Equipment_SprayCan01                           = 638,
	INV_Equipment_SprayCan02                           = 639,
	INV_Equipment_SprayCan03                           = 640,
	INV_Equipment_WireCutters                          = 641,
	INV_Equipment_WireCutters01                        = 642,
	INV_Equipment_WireCutters02                        = 643,
	INV_Equipment_WireCutters03                        = 644,
	Inv_Weapon_AssaultRifle                            = 645,
	Inv_Weapon_AssaultRifle_Enf                        = 646,
	Inv_Weapon_AssaultRifle_Mk2                        = 647,
	Inv_Weapon_AssaultRifle_Mk2_Enf                    = 648,
	Inv_Weapon_AssaultRifle_Mk3                        = 649,
	Inv_Weapon_AssaultRifle_Mk3_Enf                    = 650,
	Inv_Weapon_BeanBagGun                              = 651,
	Inv_Weapon_DartGun                                 = 652,
	Inv_Weapon_FragGrenade                             = 653,
	Inv_Weapon_GrenadeLauncher                         = 654,
	Inv_Weapon_GrenadeLauncher_Mk2                     = 655,
	Inv_Weapon_GrenadeLauncher_Mk3                     = 656,
	Inv_Weapon_HeavyMachineGun                         = 657,
	Inv_Weapon_HeavyMachineGun_Enf                     = 658,
	Inv_Weapon_HeavyMachineGun_Mk2                     = 659,
	Inv_Weapon_HeavyMachineGun_Mk2_Enf                 = 660,
	Inv_Weapon_HeavyMachineGun_Mk3                     = 661,
	Inv_Weapon_HeavyMachineGun_Mk3_Enf                 = 662,
	Inv_Weapon_MachinePistol                           = 663,
	Inv_Weapon_MachinePistol_Enf                       = 664,
	Inv_Weapon_Magnum                                  = 665,
	Inv_Weapon_Magnum_Enf                              = 666,
	Inv_Weapon_RocketLauncher                          = 667,
	Inv_Weapon_RocketLauncher_Mk2                      = 668,
	Inv_Weapon_RocketLauncher_Mk3                      = 669,
	Inv_Weapon_SemiAutoPistol                          = 670,
	Inv_Weapon_SemiAutoPistol_Enf                      = 671,
	Inv_Weapon_SemiAutoRifle                           = 672,
	Inv_Weapon_SemiAutoRifle_Enf                       = 673,
	Inv_Weapon_SemiAutoRifle_Mk2                       = 674,
	Inv_Weapon_SemiAutoRifle_Mk2_Enf                   = 675,
	Inv_Weapon_SemiAutoRifle_Mk3                       = 676,
	Inv_Weapon_SemiAutoRifle_Mk3_Enf                   = 677,
	Inv_Weapon_Shotgun                                 = 678,
	Inv_Weapon_Shotgun_Enf                             = 679,
	Inv_Weapon_Shotgun_Mk2                             = 680,
	Inv_Weapon_Shotgun_Mk2_Enf                         = 681,
	Inv_Weapon_Shotgun_Mk3                             = 682,
	Inv_Weapon_Shotgun_Mk3_Enf                         = 683,
	Inv_Weapon_SniperRifle                             = 684,
	Inv_Weapon_SniperRifle_Enf                         = 685,
	Inv_Weapon_SniperRifle_Mk2                         = 686,
	Inv_Weapon_SniperRifle_Mk2_Enf                     = 687,
	Inv_Weapon_SniperRifle_Mk3                         = 688,
	Inv_Weapon_SniperRifle_Mk3_Enf                     = 689,
	Inv_Weapon_SnubNoseRevolver                        = 690,
	Inv_Weapon_StarterSubMachineGun                    = 691,
	Inv_Weapon_StingerGrenade                          = 692,
	Inv_Weapon_SubMachineGun                           = 693,
	Inv_Weapon_SubMachineGun_Enf                       = 694,
	Inv_Weapon_SubMachineGun_Mk2                       = 695,
	Inv_Weapon_SubMachineGun_Mk2_Enf                   = 696,
	Inv_Weapon_SubMachineGun_Mk3                       = 697,
	Inv_Weapon_SubMachineGun_Mk3_Enf                   = 698,
	Inv_Weapon_TazerGun                                = 699,
	Inv_Weapon_TazerShotgun                            = 700,
	LargeIcon_Criminal                                 = 701,
	LargeIcon_Enforcer                                 = 702,
	List_CheckDisabled                                 = 703,
	List_CheckEnabled                                  = 704,
	Mail_Reward_Package                                = 705,
	Marketplace_HighBidder                             = 706,
	Medal_AntiGraffitiKill                             = 707,
	Medal_ArrestStreakKiller                           = 708,
	Medal_ArsonKill                                    = 709,
	Medal_BigWin_All                                   = 710,
	Medal_BigWin_Arrest_10                             = 711,
	Medal_BigWin_Arrest_1001                           = 712,
	Medal_BigWin_Arrest_1002                           = 713,
	Medal_BigWin_Arrest_1003                           = 714,
	Medal_BigWin_Arrest_1004                           = 715,
	Medal_BigWin_Defuse                                = 716,
	Medal_BigWin_Detonate                              = 717,
	Medal_BigWin_Rescue                                = 718,
	Medal_BigWin_Rescue01                              = 719,
	Medal_BigWin_Rescue02                              = 720,
	Medal_BigWin_Rescue03                              = 721,
	Medal_BigWin_Rescue04                              = 722,
	Medal_BigWin_Takeout                               = 723,
	Medal_BigWin_Takeout01                             = 724,
	Medal_BigWin_Takeout02                             = 725,
	Medal_BigWin_Takeout03                             = 726,
	Medal_BigWin_Takeout04                             = 727,
	Medal_Dishonour_ArrestedKill                       = 728,
	Medal_Dishonour_ArrestedKill01                     = 729,
	Medal_Dishonour_ArrestedKill02                     = 730,
	Medal_Dishonour_ArrestedKill03                     = 731,
	Medal_Dishonour_ArrestedKill04                     = 732,
	Medal_Dishonour_ArrestedKill05                     = 733,
	Medal_Dishonour_ArrestedKill06                     = 734,
	Medal_Dishonour_ArrestedKill07                     = 735,
	Medal_Dishonour_ArrestedKill08                     = 736,
	Medal_Dishonour_ArrestedKill09                     = 737,
	Medal_Dishonour_FriendlyKill                       = 738,
	Medal_Dishonour_FriendlyKill01                     = 739,
	Medal_Dishonour_FriendlyKill02                     = 740,
	Medal_Dishonour_FriendlyKill03                     = 741,
	Medal_Dishonour_FriendlyKill04                     = 742,
	Medal_Dishonour_FriendlyKill05                     = 743,
	Medal_Dishonour_FriendlyKill06                     = 744,
	Medal_Dishonour_FriendlyKill07                     = 745,
	Medal_Dishonour_FriendlyKill08                     = 746,
	Medal_Dishonour_FriendlyKill09                     = 747,
	Medal_Dishonour_SelfKill                           = 748,
	Medal_Dishonour_SelfKill01                         = 749,
	Medal_Dishonour_SelfKill02                         = 750,
	Medal_Dishonour_SelfKill03                         = 751,
	Medal_Dishonour_SelfKill04                         = 752,
	Medal_Dishonour_SelfKill05                         = 753,
	Medal_DriverAssistKill                             = 754,
	Medal_GraffitiingKill                              = 755,
	Medal_GrenadeKill                                  = 756,
	Medal_KillStreak                                   = 757,
	Medal_KillStreak01                                 = 758,
	Medal_KillStreak02                                 = 759,
	Medal_KillStreak03                                 = 760,
	Medal_KillStreak04                                 = 761,
	Medal_KillStreak05                                 = 762,
	Medal_KillStreakArrest                             = 763,
	Medal_KillStreakKiller                             = 764,
	Medal_Placeholder_01                               = 765,
	Medal_Placeholder_02                               = 766,
	Medal_Placeholder_03                               = 767,
	Medal_PostDeathKill                                = 768,
	Medal_SuperKill                                    = 769,
	Medal_TaskItemKill                                 = 770,
	Medal_TimeLimit_Kills2                             = 771,
	Medal_TimeLimit_Kills3                             = 772,
	Medal_TimeLimit_Kills4                             = 773,
	Medal_TimeLimit_Kills5                             = 774,
	Medal_VehicleKill                                  = 775,
	Medal_VIPKill                                      = 776,
	Music_DefaultMusicIcon                             = 777,
	Music_DefaultThemeIcon                             = 778,
	New_Feature_Icon                                   = 779,
	Organisation_BloodRoses                            = 780,
	Organisation_GKings                                = 781,
	Organisation_Praetorian                            = 782,
	Organisation_PrentissTigers                        = 783,
	OutfitIcon                                         = 784,
	Particle_Exclamation                               = 785,
	Particle_SprayCan                                  = 786,
	Player_Effectiveness_01                            = 787,
	Player_Effectiveness_02                            = 788,
	Player_Effectiveness_03                            = 789,
	PopUpMenuDivider                                   = 790,
	RadarFull_BG                                       = 791,
	RadarFull_Compass                                  = 792,
	RadarFull_Contours                                 = 793,
	RadarMini_BG                                       = 794,
	RadarMini_Compass                                  = 795,
	Scoreboard_DefaultClanSymbol                       = 796,
	Scoreboard_DefaultDeathIcon                        = 797,
	Scoreboard_DefaultPlayerSymbol                     = 798,
	Scoreboard_DefaultWeaponIcon                       = 799,
	Scoreboard_HeaderImageGeneric                      = 800,
	Scoreboard_HeaderImageMissionInProgress            = 801,
	Scoreboard_HeaderImageMissionLost                  = 802,
	Scoreboard_HeaderImageMissionWon                   = 803,
	Scoreboard_MVPIcon                                 = 804,
	Scoreboard_PlayerOffline                           = 805,
	Scoreboard_SideIcon                                = 806,
	Scoreboard_UpgradeNone                             = 807,
	Scoreboard_UpgradeVacant                           = 808,
	TaskMarker_Checkpoint                              = 809,
	TaskMarker_Checkpoint_Edge                         = 810,
	TaskMarker_Checkpoint_Occluded                     = 811,
	TaskMarker_Contact                                 = 812,
	TaskMarker_Contact_Edge                            = 813,
	TaskMarker_Item                                    = 814,
	TaskMarker_Item_Edge                               = 815,
	TaskMarker_Item_Occluded                           = 816,
	TaskMarker_PlayerVehicle                           = 817,
	TaskMarker_PlayerVehicle_Edge                      = 818,
	TaskMarker_Target                                  = 819,
	TaskMarker_Target_Edge                             = 820,
	TaskMarker_Target_Occluded                         = 821,
	TaskMarker_Waypoint                                = 822,
	TaskMarker_Zone_Ammo                               = 823,
	TaskMarker_Zone_Customisation                      = 824,
	TaskMarker_Zone_Mail                               = 825,
	TaskMarker_Zone_MarketPlace                        = 826,
	TaskMarker_Zone_OpenWorldDelivery                  = 827,
	TaskMarker_Zone_VehicleRepair                      = 828,
	TaskMarker_Zone_VehicleSpawn                       = 829,
	Threat_C_01                                        = 830,
	Threat_C_02                                        = 831,
	Threat_C_03                                        = 832,
	Threat_C_04                                        = 833,
	Threat_C_05                                        = 834,
	Threat_C_06                                        = 835,
	Threat_C_07                                        = 836,
	Threat_C_08                                        = 837,
	Threat_C_09                                        = 838,
	Threat_C                                           = 839,
	Threat_C01                                         = 840,
	Threat_C02                                         = 841,
	Threat_C03                                         = 842,
	Threat_C04                                         = 843,
	Threat_C05                                         = 844,
	Threat_E_01                                        = 845,
	Threat_E_02                                        = 846,
	Threat_E_03                                        = 847,
	Threat_E_04                                        = 848,
	Threat_E_05                                        = 849,
	Threat_E_06                                        = 850,
	Threat_E_07                                        = 851,
	Threat_E_08                                        = 852,
	Threat_E_09                                        = 853,
	Threat_E                                           = 854,
	Threat_E01                                         = 855,
	Threat_E02                                         = 856,
	Threat_E03                                         = 857,
	Threat_E04                                         = 858,
	Threat_E05                                         = 859,
	Upgrade_Character_AmmoRadiusIncrease_01            = 860,
	Upgrade_Character_AmmoRadiusIncrease_02            = 861,
	Upgrade_Character_AmmoRadiusIncrease_03            = 862,
	Upgrade_Character_FastRegen_01                     = 863,
	Upgrade_Character_FastRegen_02                     = 864,
	Upgrade_Character_FastRegen_03                     = 865,
	Upgrade_Character_FieldSupplier_01                 = 866,
	Upgrade_Character_FieldSupplier_02                 = 867,
	Upgrade_Character_FieldSupplier_03                 = 868,
	Upgrade_Character_HappyLandings_01                 = 869,
	Upgrade_Character_HappyLandings_02                 = 870,
	Upgrade_Character_HappyLandings_03                 = 871,
	Upgrade_Character_Invulnerable_01                  = 872,
	Upgrade_Character_Invulnerable_02                  = 873,
	Upgrade_Character_Invulnerable_03                  = 874,
	Upgrade_Character_Monolith_01                      = 875,
	Upgrade_Character_Monolith_02                      = 876,
	Upgrade_Character_Monolith_03                      = 877,
	Upgrade_Character_QuickReSupply_01                 = 878,
	Upgrade_Character_QuickReSupply_02                 = 879,
	Upgrade_Character_QuickReSupply_03                 = 880,
	Upgrade_Character_ReducedStaminaDamage_01          = 881,
	Upgrade_Character_ReducedStaminaDamage_02          = 882,
	Upgrade_Character_ReducedStaminaDamage_03          = 883,
	Upgrade_Character_Survivor_01                      = 884,
	Upgrade_Character_Survivor_02                      = 885,
	Upgrade_Character_Survivor_03                      = 886,
	Upgrade_Character_TakeAKnee_01                     = 887,
	Upgrade_Character_TakeAKnee_02                     = 888,
	Upgrade_Character_TakeAKnee_03                     = 889,
	Upgrade_Vehicle_ActivationTimerIncrease_01         = 890,
	Upgrade_Vehicle_ActivationTimerIncrease_02         = 891,
	Upgrade_Vehicle_ActivationTimerIncrease_03         = 892,
	Upgrade_Vehicle_AmmoCarrier                        = 893,
	Upgrade_Vehicle_BlastRadiusIncrease_01             = 894,
	Upgrade_Vehicle_BlastRadiusIncrease_02             = 895,
	Upgrade_Vehicle_BlastRadiusIncrease_03             = 896,
	Upgrade_Vehicle_ChassisStrengthening_01            = 897,
	Upgrade_Vehicle_ChassisStrengthening_02            = 898,
	Upgrade_Vehicle_ChassisStrengthening_03            = 899,
	Upgrade_Vehicle_Endurance_01                       = 900,
	Upgrade_Vehicle_Endurance_02                       = 901,
	Upgrade_Vehicle_Endurance_03                       = 902,
	Upgrade_Vehicle_EngineOverhaul_01                  = 903,
	Upgrade_Vehicle_EngineOverhaul_02                  = 904,
	Upgrade_Vehicle_EngineOverhaul_03                  = 905,
	Upgrade_Vehicle_ExplosionDelay_01                  = 906,
	Upgrade_Vehicle_ExplosionDelay_02                  = 907,
	Upgrade_Vehicle_ExplosionDelay_03                  = 908,
	Upgrade_Vehicle_ExtraCargoCapacity1                = 909,
	Upgrade_Vehicle_ExtraCargoCapacity2                = 910,
	Upgrade_Vehicle_ExtraCargoCapacity3                = 911,
	Upgrade_Vehicle_QuickRepair_01                     = 912,
	Upgrade_Vehicle_QuickRepair_02                     = 913,
	Upgrade_Vehicle_QuickRepair_03                     = 914,
	Upgrade_Vehicle_QuickReSupply_01                   = 915,
	Upgrade_Vehicle_QuickReSupply_02                   = 916,
	Upgrade_Vehicle_QuickReSupply_03                   = 917,
	Upgrade_Vehicle_RammingPlate_01                    = 918,
	Upgrade_Vehicle_RammingPlate_02                    = 919,
	Upgrade_Vehicle_RammingPlate_03                    = 920,
	Upgrade_Vehicle_SteelPlating_01                    = 921,
	Upgrade_Vehicle_SteelPlating_02                    = 922,
	Upgrade_Vehicle_SteelPlating_03                    = 923,
	Upgrade_Weapon_3PointSling_01                      = 924,
	Upgrade_Weapon_3PointSling_02                      = 925,
	Upgrade_Weapon_3PointSling_03                      = 926,
	Upgrade_Weapon_Bandolier_01                        = 927,
	Upgrade_Weapon_Bandolier_02                        = 928,
	Upgrade_Weapon_Bandolier_03                        = 929,
	Upgrade_Weapon_Damping_01                          = 930,
	Upgrade_Weapon_Damping_02                          = 931,
	Upgrade_Weapon_Damping_03                          = 932,
	Upgrade_Weapon_EagleEyes_01                        = 933,
	Upgrade_Weapon_EagleEyes_02                        = 934,
	Upgrade_Weapon_EagleEyes_03                        = 935,
	Upgrade_Weapon_PointGuard_01                       = 936,
	Upgrade_Weapon_PointGuard_02                       = 937,
	Upgrade_Weapon_PointGuard_03                       = 938,
	Upgrade_Weapon_QuickFingers_01                     = 939,
	Upgrade_Weapon_QuickFingers_02                     = 940,
	Upgrade_Weapon_QuickFingers_03                     = 941,
	Upgrade_Weapon_Rifling_01                          = 942,
	Upgrade_Weapon_Rifling_02                          = 943,
	Upgrade_Weapon_Rifling_03                          = 944,
	Upgrade_Weapon_Savage_01                           = 945,
	Upgrade_Weapon_Savage_02                           = 946,
	Upgrade_Weapon_Savage_03                           = 947,
	Upgrade_Weapon_ShortSighted_01                     = 948,
	Upgrade_Weapon_ShortSighted_02                     = 949,
	Upgrade_Weapon_ShortSighted_03                     = 950,
	Upgrade_Weapon_SprayAndPray_01                     = 951,
	Upgrade_Weapon_SprayAndPray_02                     = 952,
	Upgrade_Weapon_SprayAndPray_03                     = 953,
	Upgrade_Weapon_SuperMag_01                         = 954,
	Upgrade_Weapon_SuperMag_02                         = 955,
	Upgrade_Weapon_SuperMag_03                         = 956,
	Upgrade_Weapon_Switch_01                           = 957,
	Upgrade_Weapon_Switch_02                           = 958,
	Upgrade_Weapon_Switch_03                           = 959,
	UpgradeSlot_Empty                                  = 960,
	UpgradeSlot_Locked                                 = 961,
	UpgradeSlot_NotPresent                             = 962,
	Vehicle_BalkanKolva                                = 963,
	Vehicle_BalkanRavan                                = 964,
	Vehicle_BalkanSeries4Ambulance                     = 965,
	Vehicle_BalkanVarzuga                              = 966,
	Vehicle_BenkzMhullerM1ArmouredVan                  = 967,
	Vehicle_BishadaGX8800                              = 968,
	Vehicle_ChargeCisco                                = 969,
	Vehicle_ChargeMikro                                = 970,
	Vehicle_ChargeSentinel                             = 971,
	Vehicle_Comp_BalkanRavan_BumperFront01             = 972,
	Vehicle_Comp_BalkanRavan_BumperRear01              = 973,
	Vehicle_Comp_BalkanRavan_Door01                    = 974,
	Vehicle_Comp_BalkanRavan_Hood01                    = 975,
	Vehicle_Comp_BalkanRavan_Police01                  = 976,
	Vehicle_Comp_BalkanRavan_Police02                  = 977,
	Vehicle_Comp_BalkanRavan_Police03                  = 978,
	Vehicle_Comp_BalkanRavan_Police04                  = 979,
	Vehicle_Comp_BalkanRavan_Police05                  = 980,
	Vehicle_Comp_BalkanRavan_Police06                  = 981,
	Vehicle_Comp_BalkanRavan_Police07                  = 982,
	Vehicle_Comp_BalkanRavan_PoliceNone00              = 983,
	Vehicle_Comp_BalkanRavan_PoliceSecondary01         = 984,
	Vehicle_Comp_BalkanRavan_PoliceSecondary02         = 985,
	Vehicle_Comp_BalkanRavan_PoliceSecondary03         = 986,
	Vehicle_Comp_BalkanRavan_PoliceSecondary04         = 987,
	Vehicle_Comp_BalkanRavan_PoliceSecondaryNone00     = 988,
	Vehicle_Comp_BalkanRavan_Roof01                    = 989,
	Vehicle_Comp_BalkanRavan_SideSkirts01              = 990,
	Vehicle_Comp_BalkanRavan_Spoiler01                 = 991,
	Vehicle_Comp_BalkanRavan_WingMirror01              = 992,
	Vehicle_Comp_BishadaGX8800_Aerial01                = 993,
	Vehicle_Comp_BishadaGX8800_BumperFront01           = 994,
	Vehicle_Comp_BishadaGX8800_BumperRear01            = 995,
	Vehicle_Comp_BishadaGX8800_Doors01                 = 996,
	Vehicle_Comp_BishadaGX8800_Headlights01            = 997,
	Vehicle_Comp_BishadaGX8800_Hood01                  = 998,
	Vehicle_Comp_BishadaGX8800_Louvers01               = 999,
	Vehicle_Comp_BishadaGX8800_Roof01                  = 1000,
	Vehicle_Comp_BishadaGX8800_SeatsFront01            = 1001,
	Vehicle_Comp_BishadaGX8800_SideSkirts01            = 1002,
	Vehicle_Comp_BishadaGX8800_Spoiler01               = 1003,
	Vehicle_Comp_BishadaGX8800_SteeringWheel01         = 1004,
	Vehicle_Comp_BishadaGX8800_Taillights01            = 1005,
	Vehicle_Comp_BishadaGX8800_Wheel01                 = 1006,
	Vehicle_Comp_BishadaGX8800_Wheel02                 = 1007,
	Vehicle_Comp_BishadaGX8800_Wheel03                 = 1008,
	Vehicle_Comp_BishadaGX8800_WingMirror01            = 1009,
	Vehicle_Comp_ChargeCisco_BumperFront01             = 1010,
	Vehicle_Comp_ChargeCisco_BumperRear01              = 1011,
	Vehicle_Comp_ChargeCisco_Doors01                   = 1012,
	Vehicle_Comp_ChargeCisco_Hood01                    = 1013,
	Vehicle_Comp_ChargeCisco_Police01                  = 1014,
	Vehicle_Comp_ChargeCisco_Police02                  = 1015,
	Vehicle_Comp_ChargeCisco_Police03                  = 1016,
	Vehicle_Comp_ChargeCisco_Police04                  = 1017,
	Vehicle_Comp_ChargeCisco_Police05                  = 1018,
	Vehicle_Comp_ChargeCisco_Police06                  = 1019,
	Vehicle_Comp_ChargeCisco_Police07                  = 1020,
	Vehicle_Comp_ChargeCisco_PoliceNone00              = 1021,
	Vehicle_Comp_ChargeCisco_PoliceSecondary01         = 1022,
	Vehicle_Comp_ChargeCisco_PoliceSecondary02         = 1023,
	Vehicle_Comp_ChargeCisco_PoliceSecondary03         = 1024,
	Vehicle_Comp_ChargeCisco_PoliceSecondary04         = 1025,
	Vehicle_Comp_ChargeCisco_PoliceSecondaryNone00     = 1026,
	Vehicle_Comp_ChargeCisco_Roof01                    = 1027,
	Vehicle_Comp_ChargeCisco_SideSkirts01              = 1028,
	Vehicle_Comp_ChargeCisco_Spoiler01                 = 1029,
	Vehicle_Comp_ChargeCisco_Wheel01                   = 1030,
	Vehicle_Comp_ChargeCisco_Wheel02                   = 1031,
	Vehicle_Comp_ChargeCisco_Wheel03                   = 1032,
	Vehicle_Comp_ChargeCisco_WingMirror01              = 1033,
	Vehicle_Comp_ChargeMikro_BumperFront01             = 1034,
	Vehicle_Comp_ChargeMikro_BumperRear01              = 1035,
	Vehicle_Comp_ChargeMikro_Doors01                   = 1036,
	Vehicle_Comp_ChargeMikro_HeadLights01              = 1037,
	Vehicle_Comp_ChargeMikro_Hood01                    = 1038,
	Vehicle_Comp_ChargeMikro_Roof01                    = 1039,
	Vehicle_Comp_ChargeMikro_Seats01                   = 1040,
	Vehicle_Comp_ChargeMikro_SideSkirts01              = 1041,
	Vehicle_Comp_ChargeMikro_Spoiler01                 = 1042,
	Vehicle_Comp_ChargeMikro_SteeringWheel01           = 1043,
	Vehicle_Comp_ChargeMikro_Taillights01              = 1044,
	Vehicle_Comp_ChargeMikro_Wheel01                   = 1045,
	Vehicle_Comp_ChargeMikro_Wheel02                   = 1046,
	Vehicle_Comp_ChargeMikro_Wheel03                   = 1047,
	Vehicle_Comp_ChargeMikro_WingMirror01              = 1048,
	Vehicle_Comp_DoltonBroadwing_Aerial01              = 1049,
	Vehicle_Comp_DoltonBroadwing_BullBar01             = 1050,
	Vehicle_Comp_DoltonBroadwing_BumperFront01         = 1051,
	Vehicle_Comp_DoltonBroadwing_BumperRear01          = 1052,
	Vehicle_Comp_DoltonBroadwing_Door01                = 1053,
	Vehicle_Comp_DoltonBroadwing_Hood01                = 1054,
	Vehicle_Comp_DoltonBroadwing_PoliceLights2nd01     = 1055,
	Vehicle_Comp_DoltonBroadwing_PoliceLights2nd02     = 1056,
	Vehicle_Comp_DoltonBroadwing_PoliceLights2nd03     = 1057,
	Vehicle_Comp_DoltonBroadwing_PoliceLights2nd04     = 1058,
	Vehicle_Comp_DoltonBroadwing_PoliceLightsMain01    = 1059,
	Vehicle_Comp_DoltonBroadwing_PoliceLightsMain02    = 1060,
	Vehicle_Comp_DoltonBroadwing_PoliceLightsMain03    = 1061,
	Vehicle_Comp_DoltonBroadwing_PoliceLightsMain04    = 1062,
	Vehicle_Comp_DoltonBroadwing_PoliceLightsMain05    = 1063,
	Vehicle_Comp_DoltonBroadwing_PoliceLightsMain06    = 1064,
	Vehicle_Comp_DoltonBroadwing_PoliceLightsMain07    = 1065,
	Vehicle_Comp_DoltonBroadwing_Roof01                = 1066,
	Vehicle_Comp_DoltonBroadwing_Spoiler01             = 1067,
	Vehicle_Comp_DoltonBroadwing_Wheel01               = 1068,
	Vehicle_Comp_DoltonBroadwing_Wheel02               = 1069,
	Vehicle_Comp_DoltonBroadwing_Wheel03               = 1070,
	Vehicle_Comp_DoltonMontane_BullBar01               = 1071,
	Vehicle_Comp_DoltonMontane_BullBarRear             = 1072,
	Vehicle_Comp_DoltonMontane_BumperFront             = 1073,
	Vehicle_Comp_DoltonMontane_BumperRear              = 1074,
	Vehicle_Comp_DoltonMontane_Door01                  = 1075,
	Vehicle_Comp_DoltonMontane_Hood01                  = 1076,
	Vehicle_Comp_DoltonMontane_PoliceLights2nd01       = 1077,
	Vehicle_Comp_DoltonMontane_PoliceLights2nd02       = 1078,
	Vehicle_Comp_DoltonMontane_PoliceLights2nd03       = 1079,
	Vehicle_Comp_DoltonMontane_PoliceLights2nd04       = 1080,
	Vehicle_Comp_DoltonMontane_PoliceLightsMain01      = 1081,
	Vehicle_Comp_DoltonMontane_PoliceLightsMain02      = 1082,
	Vehicle_Comp_DoltonMontane_PoliceLightsMain03      = 1083,
	Vehicle_Comp_DoltonMontane_PoliceLightsMain04      = 1084,
	Vehicle_Comp_DoltonMontane_PoliceLightsMain05      = 1085,
	Vehicle_Comp_DoltonMontane_PoliceLightsMain06      = 1086,
	Vehicle_Comp_DoltonMontane_PoliceLightsMain07      = 1087,
	Vehicle_Comp_DoltonMontane_RollCage01              = 1088,
	Vehicle_Comp_DoltonMontane_Roof01                  = 1089,
	Vehicle_Comp_DoltonMontane_SideSkirts01            = 1090,
	Vehicle_Comp_DoltonMontane_SpotLamps01             = 1091,
	Vehicle_Comp_DoltonMontane_Trunk01                 = 1092,
	Vehicle_Comp_NomadOutlandPioneer_BullBars01        = 1093,
	Vehicle_Comp_NomadOutlandPioneer_BumperFront01     = 1094,
	Vehicle_Comp_NomadOutlandPioneer_BumperRear01      = 1095,
	Vehicle_Comp_NomadOutlandPioneer_Doors01           = 1096,
	Vehicle_Comp_NomadOutlandPioneer_FogLights01       = 1097,
	Vehicle_Comp_NomadOutlandPioneer_Grill01           = 1098,
	Vehicle_Comp_NomadOutlandPioneer_HeadLights01      = 1099,
	Vehicle_Comp_NomadOutlandPioneer_Hood01            = 1100,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMain01 = 1101,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMain02 = 1102,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMain03 = 1103,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMain04 = 1104,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMain05 = 1105,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMain06 = 1106,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMain07 = 1107,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMainSecondary01 = 1108,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMainSecondary02 = 1109,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMainSecondary03 = 1110,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMainSecondary04 = 1111,
	Vehicle_Comp_NomadOutlandPioneer_PoliceLightsMainSecondaryNone = 1112,
	Vehicle_Comp_NomadOutlandPioneer_Roof01            = 1113,
	Vehicle_Comp_NomadOutlandPioneer_RoofProp03        = 1114,
	Vehicle_Comp_NomadOutlandPioneer_RoofVisor01       = 1115,
	Vehicle_Comp_NomadOutlandPioneer_SeatsFront01      = 1116,
	Vehicle_Comp_NomadOutlandPioneer_SideSkirts01      = 1117,
	Vehicle_Comp_NomadOutlandPioneer_SpoilerLadder01   = 1118,
	Vehicle_Comp_NomadOutlandPioneer_SpoilerProp01     = 1119,
	Vehicle_Comp_NomadOutlandPioneer_SteeringWheel01   = 1120,
	Vehicle_Comp_NomadOutlandPioneer_TailLights01      = 1121,
	Vehicle_Comp_NomadOutlandPioneer_Wheel01           = 1122,
	Vehicle_Comp_NomadOutlandPioneer_Wheel02           = 1123,
	Vehicle_Comp_NomadOutlandPioneer_Wheel03           = 1124,
	Vehicle_Comp_NomadOutlandPioneer_WingMirrors01     = 1125,
	Vehicle_Comp_PackerVaquero_BullBars01              = 1126,
	Vehicle_Comp_PackerVaquero_BumperFront01           = 1127,
	Vehicle_Comp_PackerVaquero_BumperRear01            = 1128,
	Vehicle_Comp_PackerVaquero_Doors01                 = 1129,
	Vehicle_Comp_PackerVaquero_FogLights01             = 1130,
	Vehicle_Comp_PackerVaquero_Grill01                 = 1131,
	Vehicle_Comp_PackerVaquero_HeadLights01            = 1132,
	Vehicle_Comp_PackerVaquero_Hood01                  = 1133,
	Vehicle_Comp_PackerVaquero_PoliceLightsMain01      = 1134,
	Vehicle_Comp_PackerVaquero_PoliceLightsMain02      = 1135,
	Vehicle_Comp_PackerVaquero_PoliceLightsMain03      = 1136,
	Vehicle_Comp_PackerVaquero_PoliceLightsMain04      = 1137,
	Vehicle_Comp_PackerVaquero_PoliceLightsMain05      = 1138,
	Vehicle_Comp_PackerVaquero_PoliceLightsMain06      = 1139,
	Vehicle_Comp_PackerVaquero_PoliceLightsMain07      = 1140,
	Vehicle_Comp_PackerVaquero_PoliceLightsSecondary01 = 1141,
	Vehicle_Comp_PackerVaquero_PoliceLightsSecondary02 = 1142,
	Vehicle_Comp_PackerVaquero_PoliceLightsSecondary03 = 1143,
	Vehicle_Comp_PackerVaquero_PoliceLightsSecondaryNone = 1144,
	Vehicle_Comp_PackerVaquero_Roof01                  = 1145,
	Vehicle_Comp_PackerVaquero_SeatsFront01            = 1146,
	Vehicle_Comp_PackerVaquero_SideSkirts01            = 1147,
	Vehicle_Comp_PackerVaquero_SpareWheel01            = 1148,
	Vehicle_Comp_PackerVaquero_SteeringWheel01         = 1149,
	Vehicle_Comp_PackerVaquero_TailLights01            = 1150,
	Vehicle_Comp_PackerVaquero_Wheel01                 = 1151,
	Vehicle_Comp_PackerVaquero_Wheel02                 = 1152,
	Vehicle_Comp_PackerVaquero_Wheel03                 = 1153,
	Vehicle_Comp_PackerVaquero_WingMirrors01           = 1154,
	Vehicle_Comp_PackerVaquero_WingPanels01            = 1155,
	Vehicle_Comp_Patriot_T25_BullBars01                = 1156,
	Vehicle_Comp_Patriot_T25_Door01                    = 1157,
	Vehicle_Comp_Patriot_T25_Hood01                    = 1158,
	Vehicle_Comp_Patriot_T25_PoliceLights2nd01         = 1159,
	Vehicle_Comp_Patriot_T25_PoliceLights2nd02         = 1160,
	Vehicle_Comp_Patriot_T25_PoliceLights2nd03         = 1161,
	Vehicle_Comp_Patriot_T25_PoliceLights2nd04         = 1162,
	Vehicle_Comp_Patriot_T25_PoliceLightsMain01        = 1163,
	Vehicle_Comp_Patriot_T25_PoliceLightsMain02        = 1164,
	Vehicle_Comp_Patriot_T25_PoliceLightsMain03        = 1165,
	Vehicle_Comp_Patriot_T25_PoliceLightsMain04        = 1166,
	Vehicle_Comp_Patriot_T25_PoliceLightsMain05        = 1167,
	Vehicle_Comp_Patriot_T25_PoliceLightsMain06        = 1168,
	Vehicle_Comp_Patriot_T25_PoliceLightsMain07        = 1169,
	Vehicle_Comp_Patriot_T25_RollCage01                = 1170,
	Vehicle_Comp_Patriot_T25_Roof01                    = 1171,
	Vehicle_Comp_Patriot_T25_SideSkirts01              = 1172,
	Vehicle_Comp_Patriot_T25_Spotlamps01               = 1173,
	Vehicle_Comp_Patriot_T25_Trunk01                   = 1174,
	Vehicle_Comp_Patriot_T25_Wheel01                   = 1175,
	Vehicle_Comp_Patriot_T25_Wheel02                   = 1176,
	Vehicle_Comp_Patriot_T25_Wheel03                   = 1177,
	Vehicle_Comp_PatriotV20Jericho_BullBars01          = 1178,
	Vehicle_Comp_PatriotV20Jericho_BumperFront01       = 1179,
	Vehicle_Comp_PatriotV20Jericho_BumperRear01        = 1180,
	Vehicle_Comp_PatriotV20Jericho_Doors01             = 1181,
	Vehicle_Comp_PatriotV20Jericho_FogLights01         = 1182,
	Vehicle_Comp_PatriotV20Jericho_HeadLights01        = 1183,
	Vehicle_Comp_PatriotV20Jericho_Hood01              = 1184,
	Vehicle_Comp_PatriotV20Jericho_Louvers01           = 1185,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsMain01  = 1186,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsMain02  = 1187,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsMain03  = 1188,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsMain04  = 1189,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsMain05  = 1190,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsMain06  = 1191,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsMain07  = 1192,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsSecondary01 = 1193,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsSecondary02 = 1194,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsSecondary03 = 1195,
	Vehicle_Comp_PatriotV20Jericho_PoliceLightsSecondary04 = 1196,
	Vehicle_Comp_PatriotV20Jericho_Roof01              = 1197,
	Vehicle_Comp_PatriotV20Jericho_SeatsFront01        = 1198,
	Vehicle_Comp_PatriotV20Jericho_SideSkirts01        = 1199,
	Vehicle_Comp_PatriotV20Jericho_Spoiler01           = 1200,
	Vehicle_Comp_PatriotV20Jericho_SteeringWheel01     = 1201,
	Vehicle_Comp_PatriotV20Jericho_TailLights01        = 1202,
	Vehicle_Comp_PatriotV20Jericho_Wheel01             = 1203,
	Vehicle_Comp_PatriotV20Jericho_Wheel02             = 1204,
	Vehicle_Comp_PatriotV20Jericho_Wheel03             = 1205,
	Vehicle_Comp_PatriotV20Jericho_WingMirrors03       = 1206,
	Vehicle_Comp_PatriotV20Jericho_WingPanels03        = 1207,
	Vehicle_Comp_SeiyoEspacio_BumperFront01            = 1208,
	Vehicle_Comp_SeiyoEspacio_BumperRear01             = 1209,
	Vehicle_Comp_SeiyoEspacio_Doors01                  = 1210,
	Vehicle_Comp_SeiyoEspacio_Grill01                  = 1211,
	Vehicle_Comp_SeiyoEspacio_Headlights01             = 1212,
	Vehicle_Comp_SeiyoEspacio_Hood01                   = 1213,
	Vehicle_Comp_SeiyoEspacio_RearWindow01             = 1214,
	Vehicle_Comp_SeiyoEspacio_Roof01                   = 1215,
	Vehicle_Comp_SeiyoEspacio_SeatsFront01             = 1216,
	Vehicle_Comp_SeiyoEspacio_SidePanels01             = 1217,
	Vehicle_Comp_SeiyoEspacio_SideSkirts01             = 1218,
	Vehicle_Comp_SeiyoEspacio_Spoiler01                = 1219,
	Vehicle_Comp_SeiyoEspacio_SteeringWheel01          = 1220,
	Vehicle_Comp_SeiyoEspacio_Taillights01             = 1221,
	Vehicle_Comp_SeiyoEspacio_Wheel01                  = 1222,
	Vehicle_Comp_SeiyoEspacio_Wheel02                  = 1223,
	Vehicle_Comp_SeiyoEspacio_Wheel03                  = 1224,
	Vehicle_Comp_SeiyoEspacio_WindowVisor01            = 1225,
	Vehicle_Comp_SeiyoEspacio_WingMirrors01            = 1226,
	Vehicle_Comp_Shared_4x4_Wheel01                    = 1227,
	Vehicle_Comp_Shared_4x4_Wheel02                    = 1228,
	Vehicle_Comp_Shared_4x4_Wheel03                    = 1229,
	Vehicle_Comp_Shared_AmpAudio                       = 1230,
	Vehicle_Comp_Shared_DumpValveAudio                 = 1231,
	Vehicle_Comp_Shared_ExhaustAudio                   = 1232,
	Vehicle_Comp_Shared_SirenAudio                     = 1233,
	Vehicle_Comp_Shared_SpeakerAudio                   = 1234,
	Vehicle_Comp_Shared_TransmissionAudio              = 1235,
	Vehicle_Comp_Shared_TurboAudio                     = 1236,
	Vehicle_Comp_Shared_Utility_Wheel01                = 1237,
	Vehicle_Comp_Shared_Utility_Wheel02                = 1238,
	Vehicle_Comp_Shared_Utility_Wheel03                = 1239,
	Vehicle_Comp_Shared_Utility_Wheel04                = 1240,
	Vehicle_Comp_Shared_Utility_Wheel05                = 1241,
	Vehicle_Comp_Shared_Utility_Wheel06                = 1242,
	Vehicle_DoltonBroadwing                            = 1243,
	Vehicle_DoltonFresno                               = 1244,
	Vehicle_DoltonMontane                              = 1245,
	Vehicle_HanCallante                                = 1246,
	Vehicle_HanVeo                                     = 1247,
	Vehicle_MacchinaCalabria127                        = 1248,
	Vehicle_MacchinaCalabriaCosenza                    = 1249,
	Vehicle_Nomad_OutlandKurai                         = 1250,
	Vehicle_NomadOutlandPioneer                        = 1251,
	Vehicle_PackerCeresco                              = 1252,
	Vehicle_PackerVaquero                              = 1253,
	Vehicle_PatriotT_25                                = 1254,
	Vehicle_PatriotV20Jericho                          = 1255,
	Vehicle_PatriotVegasG20                            = 1256,
	Vehicle_SeiyoEspacio                               = 1257,
	Vehicle_SungyenunMoirai                            = 1258,
	Weapon_AssaultRifle                                = 1259,
	Weapon_AssaultRifle_Enf                            = 1260,
	Weapon_AssaultRifle_Mk2                            = 1261,
	Weapon_AssaultRifle_Mk2_Enf                        = 1262,
	Weapon_AssaultRifle_Mk3                            = 1263,
	Weapon_AssaultRifle_Mk3_Enf                        = 1264,
	Weapon_Axe                                         = 1265,
	Weapon_BaseballBat                                 = 1266,
	Weapon_BeanBagGun                                  = 1267,
	Weapon_DartGun                                     = 1268,
	Weapon_FragGrenade                                 = 1269,
	Weapon_GrenadeLauncher                             = 1270,
	Weapon_GrenadeLauncher_Mk2                         = 1271,
	Weapon_GrenadeLauncher_Mk3                         = 1272,
	Weapon_HeavyMachineGun                             = 1273,
	Weapon_HeavyMachineGun_Enf                         = 1274,
	Weapon_HeavyMachineGun_Mk2                         = 1275,
	Weapon_HeavyMachineGun_Mk2_Enf                     = 1276,
	Weapon_HeavyMachineGun_Mk3                         = 1277,
	Weapon_HeavyMachineGun_Mk3_Enf                     = 1278,
	Weapon_Knife                                       = 1279,
	Weapon_MachinePistol                               = 1280,
	Weapon_MachinePistol_Enf                           = 1281,
	Weapon_Magnum                                      = 1282,
	Weapon_Magnum_Enf                                  = 1283,
	Weapon_NightStick                                  = 1284,
	Weapon_RocketLauncher                              = 1285,
	Weapon_RocketLauncher_Mk2                          = 1286,
	Weapon_RocketLauncher_Mk3                          = 1287,
	Weapon_ScaffoldingPole                             = 1288,
	Weapon_SemiAutoPistol                              = 1289,
	Weapon_SemiAutoPistol_Enf                          = 1290,
	Weapon_SemiAutoRifle                               = 1291,
	Weapon_SemiAutoRifle_Enf                           = 1292,
	Weapon_SemiAutoRifle_Mk2                           = 1293,
	Weapon_SemiAutoRifle_Mk2_Enf                       = 1294,
	Weapon_SemiAutoRifle_Mk3                           = 1295,
	Weapon_SemiAutoRifle_Mk3_Enf                       = 1296,
	Weapon_Shotgun                                     = 1297,
	Weapon_Shotgun_Enf                                 = 1298,
	Weapon_Shotgun_Mk2                                 = 1299,
	Weapon_Shotgun_Mk2_Enf                             = 1300,
	Weapon_Shotgun_Mk3                                 = 1301,
	Weapon_Shotgun_Mk3_Enf                             = 1302,
	Weapon_Shotgun_Mk4                                 = 1303,
	Weapon_SledgeHammer                                = 1304,
	Weapon_SniperRifle                                 = 1305,
	Weapon_SniperRifle_Enf                             = 1306,
	Weapon_SniperRifle_Mk2                             = 1307,
	Weapon_SniperRifle_Mk2_Enf                         = 1308,
	Weapon_SniperRifle_Mk3                             = 1309,
	Weapon_SniperRifle_Mk3_Enf                         = 1310,
	Weapon_SnubNoseRevolver                            = 1311,
	Weapon_StarterSubMachineGun                        = 1312,
	Weapon_StingerGrenade                              = 1313,
	Weapon_StunBaton                                   = 1314,
	Weapon_SubMachineGun                               = 1315,
	Weapon_SubMachineGun_Enf                           = 1316,
	Weapon_SubMachineGun_Mk2                           = 1317,
	Weapon_SubMachineGun_Mk2_Enf                       = 1318,
	Weapon_SubMachineGun_Mk3                           = 1319,
	Weapon_SubMachineGun_Mk3_Enf                       = 1320,
	Weapon_Sword                                       = 1321,
	Weapon_TazerGun                                    = 1322,
	Weapon_TazerShotgun                                = 1323,
	WeaponHUD_Driving                                  = 1324,
	WeaponHUD_InCarWithBriefcase                       = 1325,
	Witnessing_EyeClosed                               = 1326,
	Witnessing_EyeOpen                                 = 1327,
	ZoneIcon_Customisation                             = 1328,
	ZoneIcon_Markerplace                               = 1329,
	ZoneIcon_Supply                                    = 1330,
	ZoneIcon_VehicleRepair                             = 1331,
	ZoneIcon_VehicleSpawn                              = 1332,
	etHUDTextureIcon_MAX                               = 1333
};*/

// Enum APBGame.cSDD.etHUDTexturePage
/*enum etHUDTexturePage
{
	None                                               = 0,
	etHUDTexturePage_MAX                               = 1
};*/

// Enum APBGame.cSDD.etHUDTexturePageIcon
/*enum etHUDTexturePageIcon
{
	None                                               = 0,
	etHUDTexturePageIcon_MAX                           = 1
};*/

// Enum APBGame.cSDD.etInventoryItemSubCategoryIcon
/*enum etInventoryItemSubCategoryIcon
{
	ClothingAccessory                                  = 0,
	ClothingBadges                                     = 1,
	ClothingBelts                                      = 2,
	ClothingCoat                                       = 3,
	ClothingFacewear                                   = 4,
	ClothingFootwear                                   = 5,
	ClothingGloves                                     = 6,
	ClothingHeadwear                                   = 7,
	ClothingJewellery                                  = 8,
	ClothingTop                                        = 9,
	ClothingTrousers                                   = 10,
	ClothingUnderwear                                  = 11,
	etInventoryItemSubCategoryIcon_MAX                 = 12
};*/

// Enum APBGame.cSDD.etLeague
/*enum etLeague
{
	DailyArrestsEnf                                    = 0,
	DailyArrestsEnfClan                                = 1,
	DailyKillsBoth                                     = 2,
	DailyKillsBothClan                                 = 3,
	DailyKillsCrim                                     = 4,
	DailyKillsCrimClan                                 = 5,
	DailyKillsDBoth                                    = 6,
	DailyKillsEnf                                      = 7,
	DailyKillsEnfClan                                  = 8,
	DailyKTDRBoth                                      = 9,
	DailyKTDRBothClan                                  = 10,
	DailyKTDRCrim                                      = 11,
	DailyKTDRCrimClan                                  = 12,
	DailyKTDRDBoth                                     = 13,
	DailyKTDREnf                                       = 14,
	DailyKTDREnfClan                                   = 15,
	DailyMissionsWonBoth                               = 16,
	DailyMissionsWonBothClan                           = 17,
	DailyMissionsWonDBoth                              = 18,
	DailyWTLRBoth                                      = 19,
	DailyWTLRBothClan                                  = 20,
	MonthlyArrestsEnfClan                              = 21,
	MonthlyArrests                                     = 22,
	MonthlyDamageBoth                                  = 23,
	MonthlyDamageBothClan                              = 24,
	MonthlyKillsBoth                                   = 25,
	MonthlyKillsBothClan                               = 26,
	MonthlyKillsCrim                                   = 27,
	MonthlyKillsCrimClan                               = 28,
	MonthlyKillsDBoth                                  = 29,
	MonthlyKillsDBothClan                              = 30,
	MonthlyKillsEnf                                    = 31,
	MonthlyKillsEnfClan                                = 32,
	MonthlyKillsGrenadeBoth                            = 33,
	MonthlyKillsPistolBoth                             = 34,
	MonthlyKillStreakBoth                              = 35,
	MonthlyKTDRBoth                                    = 36,
	MonthlyKTDRBothClan                                = 37,
	MonthlyKTDRCrim                                    = 38,
	MonthlyKTDRCrimClan                                = 39,
	MonthlyKTDRDBoth                                   = 40,
	MonthlyKTDRDBothClan                               = 41,
	MonthlyKTDREnf                                     = 42,
	MonthlyKTDREnfClan                                 = 43,
	MonthlyMissionStreakBoth                           = 44,
	MonthlyMissionsWonBoth                             = 45,
	MonthlyMissionsWonBothClan                         = 46,
	MonthlyMissionsWonDBoth                            = 47,
	MonthlyMissionsWonDBothClan                        = 48,
	MonthlyTasksBoth                                   = 49,
	MonthlyWTLRBoth                                    = 50,
	MonthlyWTLRBothClan                                = 51,
	WeeklyArrestsEnfClan                               = 52,
	WeeklyArrestsEnf                                   = 53,
	WeeklyDamageBoth                                   = 54,
	WeeklyDamageBothClan                               = 55,
	WeeklyKillsBoth                                    = 56,
	WeeklyKillsBothClan                                = 57,
	WeeklyKillsCrim                                    = 58,
	WeeklyKillsCrimClan                                = 59,
	WeeklyKillsDBoth                                   = 60,
	WeeklyKillsDBothClan                               = 61,
	WeeklyKillsEnf                                     = 62,
	WeeklyKillsEnfClan                                 = 63,
	WeeklyKillsGrenadeBoth                             = 64,
	WeeklyKillsPistolBoth                              = 65,
	WeeklyKillStreakBoth                               = 66,
	WeeklyKTDRBoth                                     = 67,
	WeeklyKTDRBothClan                                 = 68,
	WeeklyKTDRCrim                                     = 69,
	WeeklyKTDRCrimClan                                 = 70,
	WeeklyKTDRDBoth                                    = 71,
	WeeklyKTDRDBothClan                                = 72,
	WeeklyKTDREnf                                      = 73,
	WeeklyKTDREnfClan                                  = 74,
	WeeklyMissionStreakBoth                            = 75,
	WeeklyMissionsWonBoth                              = 76,
	WeeklyMissionsWonBothClan                          = 77,
	WeeklyMissionsWonDBoth                             = 78,
	WeeklyMissionsWonDBothClan                         = 79,
	WeeklyTasksBoth                                    = 80,
	WeeklyWTLRBoth                                     = 81,
	WeeklyWTLRBothClan                                 = 82,
	DailyDamageBoth                                    = 83,
	DailyKillsGrenadeBoth                              = 84,
	DailyKillsPistolBoth                               = 85,
	DailyMissionStreakBoth                             = 86,
	DailyTasksBoth                                     = 87,
	DailyKillStreakBoth                                = 88,
	DailyDamageBothClan                                = 89,
	DailyKTDRDBothClan                                 = 90,
	DailyMissionStreakBothClan                         = 91,
	DailyMissionsWonDBothClan                          = 92,
	MonthlyMissionStreakBothClan                       = 93,
	WeeklyMissionStreakBothClan                        = 94,
	DailyKillsDBothClan                                = 95,
	etLeague_MAX                                       = 96
};*/

// Enum APBGame.cSDD.etLoadingMovieAudioBank
/*enum etLoadingMovieAudioBank
{
	AllFactions_Generic                                = 0,
	Enforcer_Generic                                   = 1,
	Enforcer_Leagues                                   = 2,
	Criminal_Generic                                   = 3,
	Criminal_Leagues                                   = 4,
	AllFactions_Leagues                                = 5,
	etLoadingMovieAudioBank_MAX                        = 6
};*/

// Enum APBGame.cSDD.etLoadingMovieConfig
/*enum etLoadingMovieConfig
{
	Default                                            = 0,
	etLoadingMovieConfig_MAX                           = 1
};*/

// Enum APBGame.cSDD.etLocationBeaconInstance
/*enum etLocationBeaconInstance
{
	FinancialArtsCenter08                              = 0,
	FinancialBeacon47                                  = 1,
	FinancialBusStation48                              = 2,
	FinancialCityHall49                                = 3,
	FinancialCSpawn04                                  = 4,
	FinancialCSpawn09                                  = 5,
	FinancialCSpawn13                                  = 6,
	FinancialCSpawn24                                  = 7,
	FinancialCSpawn31                                  = 8,
	FinancialCSpawn39                                  = 9,
	FinancialEffigy04                                  = 10,
	FinancialESpawn07                                  = 11,
	FinancialESpawn12                                  = 12,
	FinancialESpawn19                                  = 13,
	FinancialESpawn22                                  = 14,
	FinancialESpawn26                                  = 15,
	FinancialESpawn36                                  = 16,
	FinancialGarden17                                  = 17,
	FinancialGPHQ14                                    = 18,
	FinancialHopeMall02                                = 19,
	FinancialKanemori                                  = 20,
	FinancialKNN                                       = 21,
	FinancialMedinas43                                 = 22,
	FinancialMist03                                    = 23,
	FinancialMuseum08                                  = 24,
	FinancialOpenWorldCar05                            = 25,
	FinancialOpenWorldCar10                            = 26,
	FinancialOpenWorldCar26                            = 27,
	FinancialOpenWorldCar30                            = 28,
	FinancialOpenWorldCar34                            = 29,
	FinancialOpenWorldEnf24                            = 30,
	FinancialOpenWorldEnf34                            = 31,
	FinancialOpenWorldEnf41                            = 32,
	FinancialOpenWorldLarge07                          = 33,
	FinancialOpenWorldLarge09                          = 34,
	FinancialOpenWorldLarge25                          = 35,
	FinancialOpenWorldLarge27                          = 36,
	FinancialOpenWorldLarge35                          = 37,
	FinancialOpenWorldSmall11                          = 38,
	FinancialOpenWorldSmall28                          = 39,
	FinancialOpenWorldSmall35                          = 40,
	FinancialOpenWorldSmall39                          = 41,
	FinancialOpenWorldSmall46                          = 42,
	FinancialPark16                                    = 43,
	FinancialPlantagenet20                             = 44,
	FinancialPyramid15                                 = 45,
	FinancialRegent06                                  = 46,
	FinancialSchool45                                  = 47,
	FinancialSeindorf                                  = 48,
	FinancialSeindorf01                                = 49,
	FinancialStandard                                  = 50,
	FinancialWPTower02                                 = 51,
	FinancialYoido                                     = 52,
	HaroldsBackyardIDTag                               = 53,
	SocialCinema                                       = 54,
	SocialConventionCenter                             = 55,
	SocialCrimNightclub                                = 56,
	SocialEnfNightclub                                 = 57,
	SocialMain                                         = 58,
	SocialMall                                         = 59,
	SocialMarina                                       = 60,
	SocialRTWBuilding                                  = 61,
	WaterfrontBeltaneClub36                            = 62,
	WaterfrontCasino07                                 = 63,
	WaterfrontConference09                             = 64,
	WaterfrontCSpawn08                                 = 65,
	WaterfrontCSpawn11                                 = 66,
	WaterfrontCSpawn15                                 = 67,
	WaterfrontCSpawn22                                 = 68,
	WaterfrontCSpawn33                                 = 69,
	WaterfrontCSpawn38                                 = 70,
	WaterfrontESpawn01                                 = 71,
	WaterfrontESpawn13                                 = 72,
	WaterfrontESpawn20                                 = 73,
	WaterfrontESpawn23                                 = 74,
	WaterfrontESpawn38                                 = 75,
	WaterfrontESpawn39                                 = 76,
	WaterfrontMallEast04                               = 77,
	WaterfrontMallWest03                               = 78,
	WaterfrontMillennium02                             = 79,
	WaterfrontOpenWorldCar15                           = 80,
	WaterfrontOpenWorldCar19                           = 81,
	WaterfrontOpenWorldCar28                           = 82,
	WaterfrontOpenWorldCar40                           = 83,
	WaterfrontOpenWorldEnf00                           = 84,
	WaterfrontOpenWorldEnf18                           = 85,
	WaterfrontOpenWorldEnf25                           = 86,
	WaterfrontOpenWorldLarge05                         = 87,
	WaterfrontOpenWorldLarge19                         = 88,
	WaterfrontOpenWorldLarge21                         = 89,
	WaterfrontOpenWorldLarge38                         = 90,
	WaterfrontOpenWorldSmall01                         = 91,
	WaterfrontOpenWorldSmall16                         = 92,
	WaterfrontOpenWorldSmall33                         = 93,
	WaterfrontOpenWorldSmall39                         = 94,
	WaterfrontPalacioSP30                              = 95,
	WaterfrontVillaneuva01                             = 96,
	WaterfrontYachtClub01                              = 97,
	FinancialCarPark34                                 = 98,
	FinancialBroadway                                  = 99,
	etLocationBeaconInstance_MAX                       = 100
};*/

// Enum APBGame.cSDD.etLocationBeacon
/*enum etLocationBeacon
{
	Twenty                                             = 0,
	Thirty                                             = 1,
	Forty                                              = 2,
	Fifty                                              = 3,
	Ten                                                = 4,
	Sixty                                              = 5,
	Seventy                                            = 6,
	Generic                                            = 7,
	Big                                                = 8,
	Medium                                             = 9,
	Small                                              = 10,
	etLocationBeacon_MAX                               = 11
};*/

// Enum APBGame.cSDD.etMissionTemplate
/*enum etMissionTemplate
{
	A_None                                             = 0,
	AE_BCL2_Bur1                                       = 1,
	AE_BCL2_Van8                                       = 2,
	AE_BCL3_BoB2                                       = 3,
	AE_BCL3_Van6                                       = 4,
	AE_BCL4_BoB4                                       = 5,
	AE_BCM1_Van5                                       = 6,
	AE_BCM1_Van9                                       = 7,
	AE_BCM3_Bur3                                       = 8,
	AE_BCM3_Sab1                                       = 9,
	AE_BCS0_Bur4                                       = 10,
	AE_BCS0_Del2                                       = 11,
	AE_BCS0_Ter1_B                                     = 12,
	AE_BCS0_Ter1_G                                     = 13,
	AE_BCS1_Ars3                                       = 14,
	AE_BCS1_BoB1                                       = 15,
	AE_BCS1_BoB3                                       = 16,
	AE_BCS1_BoB5                                       = 17,
	AE_BCS1_Bur6                                       = 18,
	AE_BCS1_Sab2                                       = 19,
	AE_BCS1_Sab3                                       = 20,
	AE_BCS1_Van10                                      = 21,
	AE_BCS1_Van11                                      = 22,
	AE_BCS1_Van12                                      = 23,
	AE_BCS1_Van13                                      = 24,
	AE_BCS4_BoB6                                       = 25,
	AE_BEL0_Ars4                                       = 26,
	AE_BEL0_Bug2                                       = 27,
	AE_BEL0_Inv3                                       = 28,
	AE_BEL3_Van1                                       = 29,
	AE_BEM0_Inv7                                       = 30,
	AE_BEM1_Inv2                                       = 31,
	AE_BEM2_Dis3                                       = 32,
	AE_BEM2_Dis4                                       = 33,
	AE_BEM3_Dis2                                       = 34,
	AE_BEM3_For1                                       = 35,
	AE_BEM3_Sab4                                       = 36,
	AE_BEM4_Bug1                                       = 37,
	AE_BES0_BoB5                                       = 38,
	AE_BES0_Dis6                                       = 39,
	AE_BES1_Del1                                       = 40,
	AE_BES1_Dis8                                       = 41,
	AE_BES1_Inv1                                       = 42,
	AE_BES1_Inv8                                       = 43,
	AE_BES1_Van2                                       = 44,
	AE_BES1_Van3                                       = 45,
	AE_BES2_Dis1_P                                     = 46,
	AE_BES2_Dis1_T                                     = 47,
	AE_BES3_Dis5                                       = 48,
	AE_BES4_Inv5                                       = 49,
	AE_F12EL0_Bob                                      = 50,
	AE_F24EM1_Bur                                      = 51,
	AE_F25EL3_Sab                                      = 52,
	AE_F28ES3_Bob                                      = 53,
	AE_F29EM1_Bur                                      = 54,
	AE_FCL1_BK101                                      = 55,
	AE_FCL1_BK11                                       = 56,
	AE_FCL1_BK111                                      = 57,
	AE_FCL1_BK121                                      = 58,
	AE_FCL1_BK131                                      = 59,
	AE_FCL1_BK141                                      = 60,
	AE_FCL1_BK171                                      = 61,
	AE_FCL1_BK181                                      = 62,
	AE_FCL1_BK191                                      = 63,
	AE_FCL1_BK201                                      = 64,
	AE_FCL1_BK21                                       = 65,
	AE_FCL1_BK211                                      = 66,
	AE_FCL1_BK221                                      = 67,
	AE_FCL1_BK231                                      = 68,
	AE_FCL1_BK241                                      = 69,
	AE_FCL1_BK251                                      = 70,
	AE_FCL1_BK252                                      = 71,
	AE_FCL1_BK253                                      = 72,
	AE_FCL1_BK261                                      = 73,
	AE_FCL1_BK271                                      = 74,
	AE_FCL1_BK281                                      = 75,
	AE_FCL1_BK282                                      = 76,
	AE_FCL1_BK291                                      = 77,
	AE_FCL1_BK301                                      = 78,
	AE_FCL1_BK302                                      = 79,
	AE_FCL1_BK31                                       = 80,
	AE_FCL1_BK311                                      = 81,
	AE_FCL1_BK321                                      = 82,
	AE_FCL1_BK331                                      = 83,
	AE_FCL1_BK341                                      = 84,
	AE_FCL1_BK351                                      = 85,
	AE_FCL1_BK361                                      = 86,
	AE_FCL1_BK371                                      = 87,
	AE_FCL1_BK381                                      = 88,
	AE_FCL1_BK391                                      = 89,
	AE_FCL1_BK401                                      = 90,
	AE_FCL1_BK41                                       = 91,
	AE_FCL1_BK411                                      = 92,
	AE_FCL1_BK421                                      = 93,
	AE_FCL1_BK431                                      = 94,
	AE_FCL1_BK51                                       = 95,
	AE_FCL1_BK61                                       = 96,
	AE_FCL1_BK71                                       = 97,
	AE_FCL1_BK81                                       = 98,
	AE_FCL1_BK91                                       = 99,
	AE_FCS1_Ars2                                       = 100,
	AE_WCS1_Ars1                                       = 101,
	AE_WCS1_Bur2                                       = 102,
	AE_WES1_Dis7                                       = 103,
	AK_BCL1_BYR_Bur2                                   = 104,
	AK_BCL5_HAR_Bom1                                   = 105,
	AK_BCL5_HAR_Bur1                                   = 106,
	AK_BCL5_HAR_Sab1                                   = 107,
	AK_BCL5_JAV_Bom1                                   = 108,
	AK_BCL5_JAV_Bur1                                   = 109,
	AK_BCL5_JAV_Sab1                                   = 110,
	AK_BCL5_LIL_Sab1                                   = 111,
	AK_BCM1_BYR_Bur1                                   = 112,
	AK_BCM1_SUJ_Bur1                                   = 113,
	AK_BCS1_CHR_Bur1                                   = 114,
	AK_BCS1_CHR_Sab1                                   = 115,
	AK_BCS1_SHI_Bur1                                   = 116,
	AK_BCS1_SHI_Sab1                                   = 117,
	AK_BEL2_DAR_AGr1                                   = 118,
	AK_BEL2_DAR_Dis1                                   = 119,
	AK_BEL2_SAU_AGr1                                   = 120,
	AK_BEL2_SAU_Dis1                                   = 121,
	AK_BEL2_SAU_VPi1                                   = 122,
	AK_BEL5_AKI_AGr1                                   = 123,
	AK_BEL5_AKI_AGr2                                   = 124,
	AK_BEL5_AKI_Dis1                                   = 125,
	AK_BEL5_AKI_Dis2                                   = 126,
	AK_BEL5_AKI_Dis3                                   = 127,
	AK_BEL5_AMI_AGr1                                   = 128,
	AK_BEL5_AMI_Dis1                                   = 129,
	AK_BEL5_AMI_VPi1                                   = 130,
	AM_BCL0_Bom1_Variant01                             = 131,
	AM_BCL0_DEL1_Variant02                             = 132,
	AM_BCS1_For1_Variant02                             = 133,
	AM_BCS2_Ars1_V1                                    = 134,
	AM_BCS2_Bom1_V1                                    = 135,
	AM_BEL0_Bom1_Variant02                             = 136,
	AM_BEL0_DEL1_Variant01                             = 137,
	AM_BEL4_Sab1_V1                                    = 138,
	AM_BES1_For1_Variant01                             = 139,
	AM_BES2_Ars1_V2                                    = 140,
	AM_BES2_Dis1_V2                                    = 141,
	AntiGraffiti1                                      = 142,
	AntiGraffitiArrest1                                = 143,
	AntiGraffitiOnFootCheckpoint1                      = 144,
	AntiGraffitiSolo1                                  = 145,
	ArmedGuard1                                        = 146,
	ArmedGuardSolo1                                    = 147,
	ArrestStopAndSearch1                               = 148,
	Arson1                                             = 149,
	Arson2                                             = 150,
	ArsonBombing1                                      = 151,
	ArsonSolo1                                         = 152,
	BH_BCL0_Exemplar                                   = 153,
	BH_BCL1_Ars1                                       = 154,
	BH_BCL4_Chk1                                       = 155,
	BH_BCM2_Gra1                                       = 156,
	BH_BCS0_Bom1                                       = 157,
	BH_BCS3_For1                                       = 158,
	BH_BEL0_Exemplar                                   = 159,
	BH_BEL1_Dis1                                       = 160,
	BH_BEL4_Chk1                                       = 161,
	BH_BEM2_Gra1                                       = 162,
	BH_BES0_Inv1                                       = 163,
	BH_BES3_For1                                       = 164,
	BL_BCS5_BestServedHot                              = 165,
	BL_BCS5_GoneASpray                                 = 166,
	BL_BCST_AllFrequencies                             = 167,
	BL_BCST_NoContest                                  = 168,
	BL_BCST_OnTheRadar                                 = 169,
	BL_BCST_RaidBlock                                  = 170,
	BL_BCST_SnitchSnatch                               = 171,
	BL_BCST_TaggingUp                                  = 172,
	BL_BCST_TheBondCollector                           = 173,
	BL_BCST_TheFixer                                   = 174,
	BL_BCST_UncivilProtest                             = 175,
	BL_BEST_BigHaul                                    = 176,
	BL_BEST_CleanupCrew                                = 177,
	BL_BEST_RunDiagnostics                             = 178,
	BL_BEST_TechTrail                                  = 179,
	BL_BEST_TrackBack                                  = 180,
	BL_FCS5_UnderDeconstruction                        = 181,
	BL_FES5_HackJob                                    = 182,
	BL_FES5_Hash2Ash                                   = 183,
	BombDisposal1                                      = 184,
	BombDisposalArrest1                                = 185,
	BombDisposalCheckpoint1                            = 186,
	BombDisposalSolo1                                  = 187,
	BombingSolo1                                       = 188,
	BuildingBomb1                                      = 189,
	BuildingLooting1                                   = 190,
	Burglary1                                          = 191,
	Burglary2                                          = 192,
	BurglaryBombing1                                   = 193,
	BurglaryRamraid1                                   = 194,
	BurglarySolo1                                      = 195,
	BurglarySolo2                                      = 196,
	BustArrestSolo1                                    = 197,
	BustCheckpoint1                                    = 198,
	BustClothing1                                      = 199,
	BustClothingSolo1                                  = 200,
	BustDrugstore1                                     = 201,
	BustElectronics1                                   = 202,
	BustElectronicsSolo1                               = 203,
	BustJewellery1                                     = 204,
	BustSolo1                                          = 205,
	CombatTestMission                                  = 206,
	DB_BCL0_Bom1_B                                     = 207,
	DB_BCL0_Bom1_G                                     = 208,
	DB_BCL0_Gra1_B                                     = 209,
	DB_BCL0_Gra1_G                                     = 210,
	DB_BCL0_Gra2                                       = 211,
	DB_BCL0_Van1_B                                     = 212,
	DB_BCL0_Van1_G                                     = 213,
	DB_BCL0_VTh1_B                                     = 214,
	DB_BCL0_VTh1_G                                     = 215,
	DB_BCL3_Pic1                                       = 216,
	DB_BCL3_VTh1                                       = 217,
	DB_BCM0_Ars1                                       = 218,
	DB_BCM0_Van1_B                                     = 219,
	DB_BCM0_Van1_G                                     = 220,
	DB_BCM1_Del1_B                                     = 221,
	DB_BCM1_Del1_G                                     = 222,
	DB_BCM1_Vlo1_B                                     = 223,
	DB_BCM1_Vlo1_G                                     = 224,
	DB_BCM2_Vlo1                                       = 225,
	DB_BCM3_VTh1                                       = 226,
	DB_BCS0_Ars1_B                                     = 227,
	DB_BCS0_Ars1_G                                     = 228,
	DB_BCS0_Bur1_B                                     = 229,
	DB_BCS0_Bur1_G                                     = 230,
	DB_BCS0_Del1_B                                     = 231,
	DB_BCS0_Del1_G                                     = 232,
	DB_BCS0_Del2_B                                     = 233,
	DB_BCS0_Del2_G                                     = 234,
	DB_BCS1_Del1_B                                     = 235,
	DB_BCS1_Del1_G                                     = 236,
	DB_BCS1_VLo1_B                                     = 237,
	DB_BCS1_VLo1_G                                     = 238,
	DB_BCS2_Ars1                                       = 239,
	DB_BCS2_Van1                                       = 240,
	DB_BCS2_VTh1                                       = 241,
	DB_BCS2_VTh2                                       = 242,
	DB_BCS2_VTh3                                       = 243,
	DB_BCS3_Ars1                                       = 244,
	DB_BCS4_Del1                                       = 245,
	DB_BEL0_Bom1                                       = 246,
	DB_BEL0_Del1_P                                     = 247,
	DB_BEL0_Del1_T                                     = 248,
	DB_BEL0_For1_P                                     = 249,
	DB_BEL0_For1_T                                     = 250,
	DB_BEL0_For2                                       = 251,
	DB_BEL0_Inv1_P                                     = 252,
	DB_BEL0_Inv1_T                                     = 253,
	DB_BEL0_Inv2                                       = 254,
	DB_BEL0_Pic1                                       = 255,
	DB_BEL1_Bus1_P                                     = 256,
	DB_BEL1_Bus1_T                                     = 257,
	DB_BEL1_For1_P                                     = 258,
	DB_BEL1_For1_T                                     = 259,
	DB_BEL1_Inv1                                       = 260,
	DB_BEL1_Pic2_P                                     = 261,
	DB_BEL1_Pic2_T                                     = 262,
	DB_BEL1_VLo1_P                                     = 263,
	DB_BEL1_VLo1_T                                     = 264,
	DB_BEL3_Del1                                       = 265,
	DB_BEL3_DelV1                                      = 266,
	DB_BEL3_Dis1                                       = 267,
	DB_BEL3_Pic2                                       = 268,
	DB_BEL4_Chk1                                       = 269,
	DB_BEL4_Dis1                                       = 270,
	DB_BEL4_Pic1                                       = 271,
	DB_BEM0_Pic1_P                                     = 272,
	DB_BEM0_Pic1_T                                     = 273,
	DB_BEM0_Pic2_P                                     = 274,
	DB_BEM0_Pic2_T                                     = 275,
	DB_BEM0_Pic3                                       = 276,
	DB_BEM1_For1                                       = 277,
	DB_BEM2_Del1                                       = 278,
	DB_BEM2_Del2                                       = 279,
	DB_BEM2_Dis1                                       = 280,
	DB_BEM2_Pic1                                       = 281,
	DB_BEM2_VLo1                                       = 282,
	DB_BEM3_Inv1                                       = 283,
	DB_BEM3_Pic1                                       = 284,
	DB_BEM4_Pic1                                       = 285,
	DB_BES0_Del1_P                                     = 286,
	DB_BES0_Del1_T                                     = 287,
	DB_BES0_Del2_P                                     = 288,
	DB_BES0_Del2_T                                     = 289,
	DB_BES0_Del3                                       = 290,
	DB_BES0_DelV2_P                                    = 291,
	DB_BES0_DelV2_T                                    = 292,
	DB_BES0_For1_P                                     = 293,
	DB_BES0_For1_T                                     = 294,
	DB_BES0_Inv1_P                                     = 295,
	DB_BES0_Inv1_T                                     = 296,
	DB_BES0_Inv2_P                                     = 297,
	DB_BES0_Inv2_T                                     = 298,
	DB_BES0_Pic1_P                                     = 299,
	DB_BES0_Pic1_T                                     = 300,
	DB_BES1_DelV1_P                                    = 301,
	DB_BES1_DelV1_T                                    = 302,
	DB_BES1_For1_P                                     = 303,
	DB_BES1_For1_T                                     = 304,
	DB_BES1_Inv1                                       = 305,
	DB_BES1_Pic1                                       = 306,
	DB_BES1_Pic3_P                                     = 307,
	DB_BES1_Pic3_T                                     = 308,
	DB_BES1_Pic4_P                                     = 309,
	DB_BES1_Pic4_T                                     = 310,
	DB_BES2_Inv1                                       = 311,
	DB_BES2_Inv2                                       = 312,
	DB_BES2_Inv3                                       = 313,
	DB_BES3_For1                                       = 314,
	DB_BES3_Inv1                                       = 315,
	DB_BES3_Pic1                                       = 316,
	DB_BES4_VLo1                                       = 317,
	DeathmatchCrim1                                    = 318,
	DeathmatchEnf1                                     = 319,
	DisposalSearch1                                    = 320,
	DMF_BCL2_AGr2                                      = 321,
	DMF_BCL3_Del1                                      = 322,
	DMF_BCS0_ARS1                                      = 323,
	DMF_BCS0_Bur1                                      = 324,
	DMF_BCS0_Dis1                                      = 325,
	DMF_BCS1_Exemplar1                                 = 326,
	DMF_BEL2_AGr2                                      = 327,
	DMF_BEL3_Del1                                      = 328,
	DMF_BES0_ARS1                                      = 329,
	DMF_BES0_Bur1                                      = 330,
	DMF_BES0_Dis1                                      = 331,
	DMF_BES1_Exemplar1                                 = 332,
	EB_BCL5_Bom1                                       = 333,
	EB_BCL5_bur1                                       = 334,
	EB_BCL5_bur2                                       = 335,
	EB_BCL5_Bur3                                       = 336,
	EB_BCL5_Mtt1                                       = 337,
	EB_BCL5_sab1                                       = 338,
	EB_BCM3_Ars1                                       = 339,
	EB_BCM4_Gra1                                       = 340,
	EB_BCM4_TC1                                        = 341,
	EB_BCM4_TC2                                        = 342,
	EB_BCM5_bur3                                       = 343,
	EB_BCM5_Dis4                                       = 344,
	EB_BCM5_Foe1                                       = 345,
	EB_BCM5_Gra3                                       = 346,
	EB_BCM5_Gra4                                       = 347,
	EB_BCM5_Mtp1                                       = 348,
	EB_BCM5_Mtt1                                       = 349,
	EB_BCM5_Mtt2                                       = 350,
	EB_BCM5_Mtv1                                       = 351,
	EB_BCS0_Ars1                                       = 352,
	EB_BCS0_Gra1                                       = 353,
	EB_BCS0_Van1                                       = 354,
	EB_BCS3_Bom1                                       = 355,
	EB_BCS3_bur1                                       = 356,
	EB_BCS5_Mtv1                                       = 357,
	EB_BCS5_Mtv2                                       = 358,
	EB_BEL5_Dis2                                       = 359,
	EB_BEL5_Foe2                                       = 360,
	EB_BEL5_Foe3                                       = 361,
	EB_BEL5_Foe4                                       = 362,
	EB_BEL5_Foe5                                       = 363,
	EB_BEL5_Mtp1                                       = 364,
	EB_BEL5_Mtt3                                       = 365,
	EB_BEL5_Mtv1                                       = 366,
	EB_BEL5_Mtv2                                       = 367,
	EB_BEL5_Vpi1                                       = 368,
	EB_BEL5_Vpi2                                       = 369,
	EB_BEL5_Vpi3                                       = 370,
	EB_BEM5_Agr1                                       = 371,
	EB_BEM5_Agr2                                       = 372,
	EB_BEM5_Dis2                                       = 373,
	EB_BEM5_Foe1                                       = 374,
	EB_BEM5_Foe2                                       = 375,
	EB_BEM5_Vpi1                                       = 376,
	EB_BEM5_Vpi3                                       = 377,
	EB_BES5_Inv1                                       = 378,
	EB_BES5_VPi1                                       = 379,
	EB_FCL4_Ars1                                       = 380,
	EscapeBountyCrim1                                  = 381,
	Escort1                                            = 382,
	ForcedEntry1                                       = 383,
	ForcedEntryArrest1                                 = 384,
	ForcedEntrySolo1                                   = 385,
	ForcedEntrySolo2                                   = 386,
	ForcibleArrest1                                    = 387,
	ForcibleArrestBust1                                = 388,
	ForcibleArrestSolo1                                = 389,
	Graffiti1                                          = 390,
	Graffiti2                                          = 391,
	GraffitiOnFootCheckpoint1                          = 392,
	GraffitiSolo1                                      = 393,
	Hijack1                                            = 394,
	JG_BCL0_Ars1_B                                     = 395,
	JG_BCL0_Ars1_G                                     = 396,
	JG_BCL0_Bom1_B                                     = 397,
	JG_BCL0_Bom1_G                                     = 398,
	JG_BCL0_Exemplar_B                                 = 399,
	JG_BCL0_Exemplar_G                                 = 400,
	JG_BCL0_Gra1_B                                     = 401,
	JG_BCL0_Gra1_G                                     = 402,
	JG_BCL0_VTh1_B                                     = 403,
	JG_BCL0_VTh1_G                                     = 404,
	JG_BCL1_Ars1_B                                     = 405,
	JG_BCL1_Ars1_G                                     = 406,
	JG_BCL1_Bom1_B                                     = 407,
	JG_BCL1_Bom1_G                                     = 408,
	JG_BCL1_Exemplar_B                                 = 409,
	JG_BCL1_Exemplar_G                                 = 410,
	JG_BCL1_Gra1_B                                     = 411,
	JG_BCL1_Gra1_G                                     = 412,
	JG_BCL1_VTh1_B                                     = 413,
	JG_BCL1_VTh1_G                                     = 414,
	JG_BCL2_Ars1                                       = 415,
	JG_BCL2_Bom1                                       = 416,
	JG_BCL2_Bom2                                       = 417,
	JG_BCL2_Bur1                                       = 418,
	JG_BCL2_Exemplar                                   = 419,
	JG_BCL2_Gra1                                       = 420,
	JG_BCL2_Sab1                                       = 421,
	JG_BCL2_VLo1                                       = 422,
	JG_BCL2_VLo2                                       = 423,
	JG_BCL2_VTh1                                       = 424,
	JG_BCL3_Ars1                                       = 425,
	JG_BCL3_Bur1                                       = 426,
	JG_BCL3_Exemplar                                   = 427,
	JG_BCL4_Ars1                                       = 428,
	JG_BCL4_Exemplar                                   = 429,
	JG_BCL4_Sab1                                       = 430,
	JG_BCL4_VCa1                                       = 431,
	JG_BCM0_Ars1_B                                     = 432,
	JG_BCM0_Ars1_G                                     = 433,
	JG_BCM0_Bur1_B                                     = 434,
	JG_BCM0_Bur1_G                                     = 435,
	JG_BCM0_Exemplar_B                                 = 436,
	JG_BCM0_Exemplar_G                                 = 437,
	JG_BCM1_Exemplar_B                                 = 438,
	JG_BCM1_Exemplar_G                                 = 439,
	JG_BCM2_Bom1                                       = 440,
	JG_BCM2_Bur1                                       = 441,
	JG_BCM2_Exemplar                                   = 442,
	JG_BCM2_Gra1                                       = 443,
	JG_BCM2_Sab1                                       = 444,
	JG_BCM2_VLo1                                       = 445,
	JG_BCM2_VTh1                                       = 446,
	JG_BCM3_Bur1                                       = 447,
	JG_BCM3_Exemplar                                   = 448,
	JG_BCM4_Exemplar                                   = 449,
	JG_BCM4_VCg1                                       = 450,
	JG_BCM4_VTh1                                       = 451,
	JG_BCS0_Exemplar_B                                 = 452,
	JG_BCS0_Exemplar_G                                 = 453,
	JG_BCS0_FoE1_B                                     = 454,
	JG_BCS0_FoE1_G                                     = 455,
	JG_BCS0_VCa1_B                                     = 456,
	JG_BCS0_VCa1_G                                     = 457,
	JG_BCS1_Exemplar1_B                                = 458,
	JG_BCS1_Exemplar1_G                                = 459,
	JG_BCS1_Exemplar2_B                                = 460,
	JG_BCS1_Exemplar2_G                                = 461,
	JG_BCS1_Exemplar3_B                                = 462,
	JG_BCS1_Exemplar3_G                                = 463,
	JG_BCS2_Ars1                                       = 464,
	JG_BCS2_Bom1                                       = 465,
	JG_BCS2_Exemplar1                                  = 466,
	JG_BCS2_Exemplar2                                  = 467,
	JG_BCS2_VTh1                                       = 468,
	JG_BCS3_Ars1                                       = 469,
	JG_BCS3_Bur1                                       = 470,
	JG_BCS3_Exemplar                                   = 471,
	JG_BCS3_Gra1                                       = 472,
	JG_BCS4_Bom1                                       = 473,
	JG_BCS4_Bur1                                       = 474,
	JG_BCS4_Exemplar                                   = 475,
	JG_BEL0_FoE1_P                                     = 476,
	JG_BEL0_FoE1_T                                     = 477,
	JG_BEL0_Inv1_P                                     = 478,
	JG_BEL0_Inv1_T                                     = 479,
	JG_BEL0_Inv2                                       = 480,
	JG_BEL1_Inv1_P                                     = 481,
	JG_BEL1_Inv1_T                                     = 482,
	JG_BEL2_AGr1                                       = 483,
	JG_BEL2_AGr2                                       = 484,
	JG_BEL2_Dis1                                       = 485,
	JG_BEL2_Dis2                                       = 486,
	JG_BEL2_FoE1                                       = 487,
	JG_BEL2_FoE2                                       = 488,
	JG_BEL2_FoE3                                       = 489,
	JG_BEL2_Inv1                                       = 490,
	JG_BEL2_Inv2                                       = 491,
	JG_BEL2_VPi1                                       = 492,
	JG_BEL3_Dis1                                       = 493,
	JG_BEL4_FoE1                                       = 494,
	JG_BEL4_Inv1                                       = 495,
	JG_BEL4_Inv2                                       = 496,
	JG_BEM0_FoE1_P                                     = 497,
	JG_BEM0_FoE1_T                                     = 498,
	JG_BEM0_Sca1                                       = 499,
	JG_BEM1_AGr1_P                                     = 500,
	JG_BEM1_AGr1_T                                     = 501,
	JG_BEM1_FoE1                                       = 502,
	JG_BEM2_Dis1                                       = 503,
	JG_BEM2_FoE1                                       = 504,
	JG_BEM2_FoE2                                       = 505,
	JG_BEM2_Inv1                                       = 506,
	JG_BEM2_VPi1                                       = 507,
	JG_BEM3_Dis1                                       = 508,
	JG_BEM4_Dis1                                       = 509,
	JG_BEM4_Dis2                                       = 510,
	JG_BES0_Dis1_P                                     = 511,
	JG_BES0_Dis1_T                                     = 512,
	JG_BES0_VSe1_P                                     = 513,
	JG_BES0_VSe1_T                                     = 514,
	JG_BES2_AGr1                                       = 515,
	JG_BES2_Dis1                                       = 516,
	JG_BES2_FoE1                                       = 517,
	JG_BES2_Inv1                                       = 518,
	JG_BES2_Inv2                                       = 519,
	JG_BES2_Sca1                                       = 520,
	JG_BES3_Dis1                                       = 521,
	JG_BES4_Dis1                                       = 522,
	JG_BES4_Dis2                                       = 523,
	JG_BES4_FoE1                                       = 524,
	JG_BES4_FoE2                                       = 525,
	JG_Bounty_TEST_DM                                  = 526,
	JG_Bounty_TEST_KotH                                = 527,
	JG_BountyAll_Capture                               = 528,
	JG_BountyL_DM                                      = 529,
	JG_BountyL_Esc                                     = 530,
	JG_BountyL_Escape                                  = 531,
	JG_BountyL_PointCapture                            = 532,
	JG_BountyL_Sur                                     = 533,
	JG_BountyL_Survival                                = 534,
	JG_BountyL_TO                                      = 535,
	JG_BountyL_VIPDeathmatch                           = 536,
	JG_BountyM_Capture                                 = 537,
	JG_BountyM_DM                                      = 538,
	JG_BountyM_Esc                                     = 539,
	JG_BountyM_Escape                                  = 540,
	JG_BountyM_PointCapture                            = 541,
	JG_BountyM_Sur                                     = 542,
	JG_BountyM_Survival                                = 543,
	JG_BountyM_TO                                      = 544,
	JG_BountyM_VIPDeathmatch                           = 545,
	JG_BountyS_Capture                                 = 546,
	JG_BountyS_DM                                      = 547,
	JG_BountyS_Esc                                     = 548,
	JG_BountyS_Escape                                  = 549,
	JG_BountyS_PointCapture                            = 550,
	JG_BountyS_Sur                                     = 551,
	JG_BountyS_Survival                                = 552,
	JG_BountyS_TO                                      = 553,
	JG_EscapeTest                                      = 554,
	JG_FEL4_FoE1                                       = 555,
	JG_TutCrim_Part1                                   = 556,
	JG_TutCrim_Part2A                                  = 557,
	JG_TutCrim_Part2B                                  = 558,
	JG_TutCrim_Part3A                                  = 559,
	JG_TutCrim_Part3B                                  = 560,
	JG_TutCrim_Part3C                                  = 561,
	JG_TutCrim_Part3D                                  = 562,
	JG_TutCrim_Part3E                                  = 563,
	JG_TutCrim_Part4A                                  = 564,
	JG_TutCrim_Part4B                                  = 565,
	JG_TutCrim_Part4C                                  = 566,
	JG_TutCrim_Part4D                                  = 567,
	JG_TutCrim_Part5A                                  = 568,
	JG_TutCrim_Part5B                                  = 569,
	JG_TutCrim_Part5C                                  = 570,
	JG_TutCrim_Part5D                                  = 571,
	JG_TutCrim_Part5E                                  = 572,
	JG_TutEnf_Part1                                    = 573,
	JG_TutEnf_Part2A                                   = 574,
	JG_TutEnf_Part2B                                   = 575,
	JG_TutEnf_Part2C                                   = 576,
	JG_TutEnf_Part2D                                   = 577,
	JG_TutEnf_Part3A                                   = 578,
	JG_TutEnf_Part3B                                   = 579,
	JG_TutEnf_Part3C                                   = 580,
	JG_TutEnf_Part3D                                   = 581,
	JG_TutEnf_Part4A                                   = 582,
	JG_TutEnf_Part4B                                   = 583,
	JG_TutEnf_Part4C                                   = 584,
	JG_TutEnf_Part4D                                   = 585,
	JG_TutEnf_Part4E                                   = 586,
	JG_TutEnf_Part5A                                   = 587,
	JG_TutEnf_Part5B                                   = 588,
	JG_TutEnf_Part5C                                   = 589,
	JG_TutEnf_Part5D                                   = 590,
	JG_TutEnf_Part5E                                   = 591,
	JG_WCL2_Bom1                                       = 592,
	JG_WCL2_Bur1                                       = 593,
	JG_WCL4_Ars1                                       = 594,
	JG_WCL4_Bur1                                       = 595,
	JG_WCS4_Bom1                                       = 596,
	JG_WEL4_FoE1                                       = 597,
	JP_BCS0_TagBag_B                                   = 598,
	JP_BCS0_TagBag_G                                   = 599,
	JP_FCS5_Driven2Distraction                         = 600,
	MallBombing1                                       = 601,
	MovingTargetTaskItem1                              = 602,
	MovingTargetVehicle1                               = 603,
	MP_BEL0_FdE1_T                                     = 604,
	MP_BEL0_Inv1_T                                     = 605,
	MP_BEM0_Rad1_P                                     = 606,
	MP_F05CM0_Ckp2                                     = 607,
	MP_F06CM0_Ckp1                                     = 608,
	MP_F07CM1_Ckp1                                     = 609,
	MP_F10CM2_Gra1                                     = 610,
	MP_WCL0_Veh1                                       = 611,
	MP_WES4_For1                                       = 612,
	Mugging1                                           = 613,
	Mugging2                                           = 614,
	MuggingBombSolo1                                   = 615,
	MuggingBurglary1                                   = 616,
	MuggingLooting1                                    = 617,
	MuggingSolo1                                       = 618,
	NC_BCM0_Chemistry                                  = 619,
	NC_BCM0_Pain                                       = 620,
	NC_BCS0_Arson                                      = 621,
	NC_BCS0_Bomb                                       = 622,
	NC_BCS0_Pizzazz                                    = 623,
	NC_BCS0_Vinyl                                      = 624,
	NC_BEL1_Signal                                     = 625,
	NC_BEM0_Substances                                 = 626,
	NC_BEM2_Development                                = 627,
	NC_BEM2_Steamed                                    = 628,
	NC_BES0_Richmond                                   = 629,
	NC_BES0_Timbres                                    = 630,
	OnFootCheckpointC1                                 = 631,
	OnFootCheckpointE1                                 = 632,
	Patrol1                                            = 633,
	Patrol2                                            = 634,
	Patrol3                                            = 635,
	Patrol4                                            = 636,
	Patrol5                                            = 637,
	Patrol6                                            = 638,
	PropTestC                                          = 639,
	PropTestE                                          = 640,
	QATest_Checkpoint                                  = 641,
	RamraidCheckpoint1                                 = 642,
	RamRaidClothing1                                   = 643,
	RamRaidClothingSolo1                               = 644,
	RamRaidDrugstore1                                  = 645,
	RamRaidElectronics1                                = 646,
	RamRaidElectronicsSolo1                            = 647,
	RamRaidJewellery1                                  = 648,
	SNH_BCL0_Ars1_B                                    = 649,
	SNH_BCL0_Ars1_G                                    = 650,
	SNH_BCL3_BAE_BoB1                                  = 651,
	SNH_BCL3_BAE_BoB2                                  = 652,
	SNH_BCL3_GRA_BoB1                                  = 653,
	SNH_BCL3_GRA_BoB2                                  = 654,
	SNH_BCL5_Ars1                                      = 655,
	SNH_BCL5_Bom1                                      = 656,
	SNH_BCL5_BRI_Bur1                                  = 657,
	SNH_BCL5_BRI_Gra1                                  = 658,
	SNH_BCL5_Bur1                                      = 659,
	SNH_BCL5_Bur1_Veronika1                            = 660,
	SNH_BCL5_Gra1                                      = 661,
	SNH_BCL5_Gra1_Terri1                               = 662,
	SNH_BCL5_LIL_Bom1                                  = 663,
	SNH_BCL5_LIL_Bur1                                  = 664,
	SNH_BCL5_LIL_Sab1                                  = 665,
	SNH_BCL5_LIL_Sab2                                  = 666,
	SNH_BCL5_Sab1_Veronika1                            = 667,
	SNH_BCL5_STR_Gra1                                  = 668,
	SNH_BCL5_VER_Gra1                                  = 669,
	SNH_BCL5_VLo1_Veronika1                            = 670,
	SNH_BCM0_Bur1_B                                    = 671,
	SNH_BCM0_Bur1_G                                    = 672,
	SNH_BCM0_Exemplar_B                                = 673,
	SNH_BCM0_Exemplar_G                                = 674,
	SNH_BCM0_TER_Ars1                                  = 675,
	SNH_BCM0_TER_Van1                                  = 676,
	SNH_BCM0_VER_Ars1                                  = 677,
	SNH_BCM0_VER_Van1                                  = 678,
	SNH_BCS0_Exemplar_B                                = 679,
	SNH_BCS0_Exemplar_G                                = 680,
	SNH_BEL2_EVA_FoE1                                  = 681,
	SNH_BEL5_AGr1_Eva1                                 = 682,
	SNH_BEL5_FoE1_ChungHee1                            = 683,
	SNH_BEL5_FoE1_ChungHee2                            = 684,
	SNH_BEL5_FoE1_Ty1                                  = 685,
	SNH_BEL5_FoE1_Violet1                              = 686,
	SNH_BEL5_FoE2_Violet1                              = 687,
	SNH_BEL5_TYD_AGr1                                  = 688,
	SNH_FCL5_Hax1                                      = 689,
	StopAndSearch1                                     = 690,
	StopAndSearchForcedEntry1                          = 691,
	TakeoverCrim1                                      = 692,
	TakeoverEnf1                                       = 693,
	TaskItemPickUpC1                                   = 694,
	TaskItemPickUpCrimSolo1                            = 695,
	TaskItemPickUpE1                                   = 696,
	TaskItemPickUpEnfSolo1                             = 697,
	TerritoryControlCrim1                              = 698,
	TerritoryControlCrimSolo1                          = 699,
	TerritoryControlEnf1                               = 700,
	TerritoryControlEnfSolo1                           = 701,
	Test_Aerials_CrimeSceneInvestigation_MW            = 702,
	Test_Aerials_DB                                    = 703,
	Test_Aerials_Hacking_MW                            = 704,
	Test_Aerials_Sabotage_MW                           = 705,
	Test_Alarms_DB                                     = 706,
	Test_BackDoor_Arson_DB                             = 707,
	Test_BackDoor_DB                                   = 708,
	Test_BankMachine_DB                                = 709,
	Test_BankMachine_Sabotage_MW                       = 710,
	Test_CommercialWindows_Arson_DB                    = 711,
	Test_CommercialWindows_DB                          = 712,
	Test_Container_DB                                  = 713,
	Test_Crate1LONGcrate_DB                            = 714,
	Test_Crate2Tallcrate_DB                            = 715,
	Test_CSI_4_MW                                      = 716,
	Test_Doors_Residential1_DB                         = 717,
	Test_ElectricalBox_DB                              = 718,
	Test_FinancialPortacabins_DB                       = 719,
	Test_FinancialPortacabinsLarge_DB                  = 720,
	Test_FinancialTicketMachine_DB                     = 721,
	Test_FireHydrant_AE                                = 722,
	Test_GarageDoorsRamraid_JG                         = 723,
	Test_GarageDoorsSegmented_AE                       = 724,
	Test_Hacking1                                      = 725,
	Test_IndustrialAirConditioningUnit_AE              = 726,
	Test_InvisibleProp_JP                              = 727,
	Test_MailBox_AE                                    = 728,
	Test_Mission_1_MW                                  = 729,
	Test_Mission_2_MW                                  = 730,
	Test_Mission_3_MW                                  = 731,
	Test_Mission_4_MW                                  = 732,
	Test_PayPhone_AE                                   = 733,
	Test_Sabotage1                                     = 734,
	Test_SatelliteDishes_AE                            = 735,
	Test_SecurityCamera_AE                             = 736,
	Test_ShopFront_ClothingStore_AE                    = 737,
	Test_ShopFront_ClothingStore_Ramraid_JG            = 738,
	Test_ShopFront_Doors_AE                            = 739,
	Test_ShopFront_DrugStore_AE                        = 740,
	Test_ShopFront_DrugStore_Ramraid_JG                = 741,
	Test_ShopFront_Electronics_AE                      = 742,
	Test_ShopFront_Electronics_Ramraid_JG              = 743,
	Test_ShopFront_Jewellery_AE                        = 744,
	Test_ShopFront_Jewellery_Ramraid_JG                = 745,
	Test_VehicleHacking1                               = 746,
	Test_VendingMachineDrinks_JP                       = 747,
	Test_VendingMachineSnacks_AE                       = 748,
	Test_WarehousePallet_AE                            = 749,
	Test_Yacht_AE                                      = 750,
	TestAllVehicleObjectives1                          = 751,
	TestAntiGraffiti1                                  = 752,
	TestArmedGuard1                                    = 753,
	TestArson1                                         = 754,
	TestATMVandalism                                   = 755,
	TestBigBomb1                                       = 756,
	TestBigBombDisposal1                               = 757,
	TestBlockChoice                                    = 758,
	TestBombDisposal1                                  = 759,
	TestBombDisposal2                                  = 760,
	TestBombing1                                       = 761,
	TestBug41914                                       = 762,
	TestBuildingBombing1                               = 763,
	TestBuildingBreakin1                               = 764,
	TestBuildingForcedEntry1                           = 765,
	TestBuildingVandalism1                             = 766,
	TestBust1                                          = 767,
	TestCheckpoint_DistanceConstraints                 = 768,
	TestCheckpoint_ToDAvailability                     = 769,
	TestCheckpoint1                                    = 770,
	TestCheckpoint2                                    = 771,
	TestCheckpoint3                                    = 772,
	TestCheckpointCases1                               = 773,
	TestCheckpointDebug1                               = 774,
	TestContainers                                     = 775,
	TestCoopCheckpoint1                                = 776,
	TestCrateProps                                     = 777,
	TestCrates                                         = 778,
	TestDeathmatch1                                    = 779,
	TestDisposalTimer                                  = 780,
	TestEscape1                                        = 781,
	TestEscapeFinancial1                               = 782,
	TestEscort1                                        = 783,
	TestFeatureCrim                                    = 784,
	TestFeatureEnf                                     = 785,
	TestForcibleArrest1                                = 786,
	TestGraffiti1                                      = 787,
	TestHeatEscort1                                    = 788,
	TestHijack1                                        = 789,
	TestHUDMarkers1                                    = 790,
	TestLargeTaskItems                                 = 791,
	TestLongMission1                                   = 792,
	TestMediumTaskItems                                = 793,
	TestMovingTarget1                                  = 794,
	TestMovingTarget2                                  = 795,
	TestMultipleCheckpointMission                      = 796,
	TestNewTaskItems                                   = 797,
	TestNPCMugging1                                    = 798,
	TestNPCStopAndSearch                               = 799,
	TestOffers1                                        = 800,
	TestOffers2                                        = 801,
	TestOffers3                                        = 802,
	TestOffers4                                        = 803,
	TestOffers5                                        = 804,
	TestOpposedDelivery1                               = 805,
	TestOpposedObjectives1                             = 806,
	TestPayphones                                      = 807,
	TestPickupAndDelivery1                             = 808,
	TestPickupBug1                                     = 809,
	TestPickupHide                                     = 810,
	TestPickups                                        = 811,
	TestPointCapture                                   = 812,
	TestPointsScoring1                                 = 813,
	TestPointsScoring2                                 = 814,
	TestPortacabins                                    = 815,
	TestPropBombDisposal1                              = 816,
	TestPropBombing1                                   = 817,
	TestRamRaid1                                       = 818,
	TestRedirection1                                   = 819,
	TestReuseTarget                                    = 820,
	TestReuseTarget2                                   = 821,
	TestReuseTarget3                                   = 822,
	TestReuseTarget4                                   = 823,
	TestSabotage1                                      = 824,
	TestSharedItems                                    = 825,
	TestSharedItems2                                   = 826,
	TestSimplePoints                                   = 827,
	TestSimultaneous2                                  = 828,
	TestSimultaneousStages1                            = 829,
	TestSmallTaskItems                                 = 830,
	TestSurvival1                                      = 831,
	TestSurvivalFinancial1                             = 832,
	TestTakeover1                                      = 833,
	TestTargetDestruction1                             = 834,
	TestTargetlessEscort                               = 835,
	TestTerritoryControl1                              = 836,
	TestTextSymbols                                    = 837,
	TestTwoDropOffs                                    = 838,
	TestTwoDropoffs1                                   = 839,
	TestUnopposedWin1                                  = 840,
	TestVandalism1                                     = 841,
	TestVandalProp                                     = 842,
	TestVandalProp2                                    = 843,
	TestVehicleArson1                                  = 844,
	TestVehicleBombing1                                = 845,
	TestVehicleCargo1                                  = 846,
	TestVehicleCargo2                                  = 847,
	TestVehicleCSAs                                    = 848,
	TestVehicleCSAs2                                   = 849,
	TestVehicleLooting1                                = 850,
	TestVehicleMission1                                = 851,
	TestVehicleRendezvous                              = 852,
	TestVehicleTheft1                                  = 853,
	TestVehicleTheft2                                  = 854,
	TestVehicleVandalism                               = 855,
	TestVerifyBug8938                                  = 856,
	TestVIPCheckpoint1                                 = 857,
	TestVIPCheckpoint2                                 = 858,
	TestVIPDeathmatch1                                 = 859,
	TestVIPDeathmatch2                                 = 860,
	TestVIPOpposition                                  = 861,
	TestVIPSimple                                      = 862,
	TestWarehouseBoxes                                 = 863,
	TestYacht                                          = 864,
	TestYacht2                                         = 865,
	TestYachtBombing1                                  = 866,
	TutorialAntigraffiti1                              = 867,
	TutorialAntiGraffiti2                              = 868,
	TutorialGraffiti1                                  = 869,
	TutorialGraffiti2                                  = 870,
	TutorialVehicleTheft1                              = 871,
	VandalArson1                                       = 872,
	VandalArsonBomb1                                   = 873,
	Vandalism1                                         = 874,
	VandalismGraffiti1                                 = 875,
	VandalOnFootCheckpoint1                            = 876,
	VehicleBombing1                                    = 877,
	VehicleCheckpointC1                                = 878,
	VehicleCheckpointE1                                = 879,
	VehicleLooting1                                    = 880,
	VehiclePickUpBust1                                 = 881,
	VehiclePickUpC1                                    = 882,
	VehiclePickUpE1                                    = 883,
	VehicleTheft1                                      = 884,
	VehicleTheft2                                      = 885,
	VehicleTheftCheckpoint1                            = 886,
	VehicleTheftRamraid1                               = 887,
	VFX_AerialsDoubleColumn1_BombDisposal              = 888,
	VFX_AerialsDoubleColumn1_Bombing                   = 889,
	VFX_AerialsDoubleColumn1_Vandalism                 = 890,
	VFX_AlarmBell_Vandalism                            = 891,
	VFX_AlarmBox_Vandalism                             = 892,
	VFX_AlarmLight_Vandalism                           = 893,
	VFX_BackdoorWood_Arson                             = 894,
	VFX_BankMachine_Burglary                           = 895,
	VFX_BankMachine_Vandalism                          = 896,
	VFX_Cargo_Arson                                    = 897,
	VFX_Cargo_Burglary                                 = 898,
	VFX_Cargo_Forced                                   = 899,
	VFX_CommercialWindow_Arson                         = 900,
	VFX_CommercialWindow_Burglary                      = 901,
	VFX_Crate1LONG_Vandalism                           = 902,
	VFX_Crate2Tall_Vandalism                           = 903,
	VFX_CrateLong_Forced                               = 904,
	VFX_CrateTall_Burglary                             = 905,
	VFX_DishMesh_BombDisposal                          = 906,
	VFX_DishMesh_Bombing                               = 907,
	VFX_DishMesh_Vandalism                             = 908,
	VFX_DishSegmentedHole_BombDisposal                 = 909,
	VFX_DishSegmentedHole_Bombing                      = 910,
	VFX_DishSegmentedHole_Vandalism                    = 911,
	VFX_ElecticalBox_Vandalism                         = 912,
	VFX_ElecticalBoxTall_Vandalism                     = 913,
	VFX_ElectricalBox_BombDisposal                     = 914,
	VFX_ElectricalBox_Bombing                          = 915,
	VFX_ElectricalBox_Vandalism                        = 916,
	VFX_ElectricalBoxTall_BombDisposal                 = 917,
	VFX_ElectricalBoxTall_Bombing                      = 918,
	VFX_ElectricalBoxTall_Vandalism                    = 919,
	VFX_FinancialPortaCabinLarge_Arson                 = 920,
	VFX_FinancialPortaCabinLarge_BombDisposal          = 921,
	VFX_FinancialPortaCabinLarge_Bombing               = 922,
	VFX_FinancialPortaCabinSmall_Arson                 = 923,
	VFX_FinancialPortaCabinSmall_BombDisposal          = 924,
	VFX_FinancialPortaCabinSmall_Bombing               = 925,
	VFX_FireEscape_Burglary                            = 926,
	VFX_FireEscape_Forced                              = 927,
	VFX_FireHydrant_Vandalism                          = 928,
	VFX_Garage_BombDisposal                            = 929,
	VFX_Garage_Bombing                                 = 930,
	VFX_Garage_Ramraid                                 = 931,
	VFX_Garage_Vandalism                               = 932,
	VFX_GarageDoorsSegmented_BombDisposal              = 933,
	VFX_GarageDoorsSegmented_Bust                      = 934,
	VFX_GarageDoorsSegmented_Vandalism                 = 935,
	VFX_GarageDoorsSegmentedNonRamRaid_Vandalism       = 936,
	VFX_IndustrialAirConditioningProp_BombDisposal     = 937,
	VFX_IndustrialAirConditioningProp_Bombing          = 938,
	VFX_IndustrialAirConditioningProp_Vandalism        = 939,
	VFX_Mailbox_BombDisposal                           = 940,
	VFX_Mailbox_Bombing                                = 941,
	VFX_PayPhone_Vandalism                             = 942,
	VFX_Portacabin_Arson                               = 943,
	VFX_Portacabin_Bombing                             = 944,
	VFX_Residental_Burglary                            = 945,
	VFX_Residental_Forced                              = 946,
	VFX_SecurityCameraWallMounted_Vandalism            = 947,
	VFX_Shopfront_BombDisposal                         = 948,
	VFX_Shopfront_Bombing                              = 949,
	VFX_Shopfront_Ramraid                              = 950,
	VFX_Shopfront_Vandalism                            = 951,
	VFX_ShopFrontDoorDouble_Burglary                   = 952,
	VFX_ShopFrontDoorDoubleTwo_Forced                  = 953,
	VFX_ShopFrontDoorSingle_Burglary                   = 954,
	VFX_ShopFrontDoorSingleTwo_Forced                  = 955,
	VFX_TicketMachine_Arson                            = 956,
	VFX_TicketMachine_BombDisposal                     = 957,
	VFX_TicketMachine_Bombing                          = 958,
	VFX_TicketMachine_Vandalism                        = 959,
	VFX_Vehicle_Car_Arson                              = 960,
	VFX_Vehicle_Car_Bombing                            = 961,
	VFX_Vehicle_Truck_Arson                            = 962,
	VFX_Vehicle_Truck_Bombing                          = 963,
	VFX_Vehicle_Van_Arson                              = 964,
	VFX_Vehicle_Van_Bombing                            = 965,
	VFX_VendingMachineBottle_Vandalism                 = 966,
	VFX_VendingMachineSnackLarge_Vandalism             = 967,
	VFX_VendingMachineSnackSmall_Vandalism             = 968,
	VFX_Wall_Graffiti                                  = 969,
	VFX_WarehouseCratesAndBoxes01_Arson                = 970,
	VFX_WarehouseCratesAndBoxes01_BombDisposal         = 971,
	VFX_WarehouseCratesAndBoxes01_Bombing              = 972,
	VFX_WarehouseCratesAndBoxes02_Arson                = 973,
	VFX_WarehouseCratesAndBoxes02_BombDisposal         = 974,
	VFX_WarehouseCratesAndBoxes02_Bombing              = 975,
	VFX_WarehouseCratesAndBoxes03_Arson                = 976,
	VFX_WarehouseCratesAndBoxes03_BombDisposal         = 977,
	VFX_WarehouseCratesAndBoxes03_Bombing              = 978,
	VFX_Yacht_Arson                                    = 979,
	VFX_Yacht_Bombing                                  = 980,
	VFX_Yacht_BombingDisposal                          = 981,
	ZL_BCL1_Gra1                                       = 982,
	ZL_BCL5_Pic1                                       = 983,
	ZLVar_BCL2_Examplar                                = 984,
	ZLVar_BEL2_Exemplar                                = 985,
	ZLVar_DB_BCL3_VTh1                                 = 986,
	ZLVar_DB_BCM0_Pic2                                 = 987,
	ZLVar_DB_BCS0_DelV2                                = 988,
	ZLVar_DB_BEL3_VTh1                                 = 989,
	ZLVar_DB_BEM0_Pic2                                 = 990,
	ZLVar_DB_BES0_DelV2                                = 991,
	ZLVar_JG_BCL0_FoE1                                 = 992,
	ZLVar_JG_BCL1_Gra1                                 = 993,
	ZLVar_JG_BEL0_FoE1                                 = 994,
	ZLVar_JG_BEL1_Gra1                                 = 995,
	etMissionTemplate_MAX                              = 996
};*/

// Enum APBGame.cSDD.etNotorietyEffect
/*enum etNotorietyEffect
{
	None                                               = 0,
	ArrestedByEnforcer                                 = 1,
	Arson                                              = 2,
	Assist                                             = 3,
	Bombing                                            = 4,
	Burglary                                           = 5,
	CarryTaskItem                                      = 6,
	DamageEnemy                                        = 7,
	DamageFriend                                       = 8,
	DamageLCPedestrian                                 = 9,
	DamageProp                                         = 10,
	DamageVehicle                                      = 11,
	DeathFromEnemy                                     = 12,
	DeathFromFriend                                    = 13,
	DeathFromSuicide                                   = 14,
	DestroyProp                                        = 15,
	DestroyVehicle                                     = 16,
	DestroyVehicleLC                                   = 17,
	DrivingStolenVehicle                               = 18,
	DropToLevel0                                       = 19,
	FireWeapon                                         = 20,
	Graffiti                                           = 21,
	Hack                                               = 22,
	HijackVehicle                                      = 23,
	KillLCPedestrian                                   = 24,
	KillPlayerEnemy                                    = 25,
	KillPlayerFriend                                   = 26,
	KillPlayerLevel5Crim                               = 27,
	KillPlayerLevel5Enf                                = 28,
	LimitHeatToBelowMax                                = 29,
	MatchLoss                                          = 30,
	MissionItemDelivered                               = 31,
	MissionItemDeliveredMulti                          = 32,
	Mugging                                            = 33,
	OpenWorldLargeItemDelivered                        = 34,
	OpenWorldLargeItemDeliveredMulti                   = 35,
	OpenWorldMediumItemDelivered                       = 36,
	OpenWorldMediumItemDeliveredMulti                  = 37,
	OpenWorldRamraid                                   = 38,
	OpenWorldSmallItemDelivered                        = 39,
	OpenWorldSmallItemDeliveredMulti                   = 40,
	OpenWorldVehicleDelivered                          = 41,
	OpenWorldVehicleDeliveredArmoured                  = 42,
	OpenWorldVehicleDeliveredCheap                     = 43,
	OpenWorldVehicleDeliveredExpensive                 = 44,
	OpenWorldVehicleDeliveredMidPrice                  = 45,
	OpenWorldVehicleDeliveredPerfect                   = 46,
	Rescue                                             = 47,
	Rescued                                            = 48,
	Sabotage                                           = 49,
	VehicleArson                                       = 50,
	VehicleBombing                                     = 51,
	VehicleBreakIn                                     = 52,
	WitnessedArson                                     = 53,
	WitnessedBombing                                   = 54,
	WitnessedBurglary                                  = 55,
	WitnessedCarryTaskItem                             = 56,
	WitnessedDestroyProp                               = 57,
	WitnessedDestroyVehicle                            = 58,
	WitnessedDestroyVehicleLC                          = 59,
	WitnessedDrivingStolenVehicle                      = 60,
	WitnessedGraffiti                                  = 61,
	WitnessedHack                                      = 62,
	WitnessedHijackVehicle                             = 63,
	WitnessedKillLCPedestrian                          = 64,
	WitnessedKillPlayer                                = 65,
	WitnessedMissionItemDelivered                      = 66,
	WitnessedMugging                                   = 67,
	WitnessedOpenWorldLargeItemDelivered               = 68,
	WitnessedOpenWorldMediumItemDelivered              = 69,
	WitnessedOpenWorldRamraid                          = 70,
	WitnessedOpenWorldSmallItemDelivered               = 71,
	WitnessedOpenWorldVehicleDelivered                 = 72,
	WitnessedPassengerInStolenVehicle                  = 73,
	WitnessedSabotage                                  = 74,
	WitnessedVehicleArson                              = 75,
	WitnessedVehicleBombing                            = 76,
	WitnessedVehicleBreakIn                            = 77,
	etNotorietyEffect_MAX                              = 78
};*/

// Enum APBGame.cSDD.etNPCDriverType
/*enum etNPCDriverType
{
	Business                                           = 0,
	Industrial                                         = 1,
	Clubber                                            = 2,
	Urban1                                             = 3,
	Urban2                                             = 4,
	Uniformed                                          = 5,
	MiddleClass                                        = 6,
	Seedy                                              = 7,
	LowerClass                                         = 8,
	UpperClass                                         = 9,
	EmergencyDriver                                    = 10,
	SecurityDriver                                     = 11,
	etNPCDriverType_MAX                                = 12
};*/

// Enum APBGame.cSDD.etOpenWorldDropOff
/*enum etOpenWorldDropOff
{
	None                                               = 0,
	DropOff_Enf                                        = 1,
	MediumLargeItemDropOff_Crim                        = 2,
	SmallItemDropOff_Crim                              = 3,
	VehicleDropOff_Crim                                = 4,
	VehicleDropOff_Enf                                 = 5,
	etOpenWorldDropOff_MAX                             = 6
};*/

// Enum APBGame.cSDD.etOpenWorldOperation
/*enum etOpenWorldOperation
{
	None                                               = 0,
	Burglary10                                         = 1,
	ForcedArrest10                                     = 2,
	Mugging08                                          = 3,
	Mugging12                                          = 4,
	RamRaid                                            = 5,
	StopAndSearch08                                    = 6,
	StopAndSearch12                                    = 7,
	Vehicle                                            = 8,
	etOpenWorldOperation_MAX                           = 9
};*/

// Enum APBGame.cSDD.etOpenWorldTargetActivity
/*enum etOpenWorldTargetActivity
{
	None                                               = 0,
	Burglary                                           = 1,
	PedestrianMugOrForcedArrest                        = 2,
	PedestrianMugOrStopAndSearch08                     = 3,
	PedestrianMugOrStopAndSearch12                     = 4,
	RamRaidShopFront                                   = 5,
	etOpenWorldTargetActivity_MAX                      = 6
};*/

// Enum APBGame.cSDD.etOutfitItemType
/*enum etOutfitItemType
{
	Outfit                                             = 0,
	etOutfitItemType_MAX                               = 1
};*/

// Enum APBGame.cSDD.etOWAItemSpawnRule
/*enum etOWAItemSpawnRule
{
	None                                               = 0,
	NPC_Lower                                          = 1,
	NPC_Standard                                       = 2,
	NPC_Urban                                          = 3,
	RamRaidClothing                                    = 4,
	RamRaidDrugstore                                   = 5,
	RamRaidElectronics                                 = 6,
	RamRaidGarageDoor                                  = 7,
	RamRaidJewellery                                   = 8,
	etOWAItemSpawnRule_MAX                             = 9
};*/

// Enum APBGame.cSDD.etPopupDialog
/*enum etPopupDialog
{
	None                                               = 0,
	AD_AmmoLow                                         = 1,
	AD_AmmoLow01                                       = 2,
	AD_AmmoLow_Chat                                    = 3,
	AD_AmmoResupplyFailure                             = 4,
	AD_AmmoResupplySuccess                             = 5,
	AD_Arrested                                        = 6,
	AD_Arrested01                                      = 7,
	AD_Arrested_Chat                                   = 8,
	AD_ArrestedOtherPlayer                             = 9,
	AD_ArrestedOtherPlayer01                           = 10,
	AD_ArrestedOtherPlayer02                           = 11,
	AD_ArrestedOtherPlayer_Chat                        = 12,
	AD_AskDischargeWeapon                              = 13,
	AD_AskDoAmmoResupply                               = 14,
	AD_AskGoAndPledgeToAContact                        = 15,
	AD_Contact_MissionProvider_OppositeFaction         = 16,
	AD_Contact_MissionProvider_SameFaction             = 17,
	AD_ContactLevelUp                                  = 18,
	AD_ContactLevelUp01                                = 19,
	AD_ContactLevelUp_Chat                             = 20,
	AD_CSA_Begin_Antigraffiti                          = 21,
	AD_CSA_Begin_Arson                                 = 22,
	AD_CSA_Begin_BombDisposal                          = 23,
	AD_CSA_Begin_Burglary                              = 24,
	AD_CSA_Begin_CSI                                   = 25,
	AD_CSA_Begin_ForcedEntry                           = 26,
	AD_CSA_Begin_General                               = 27,
	AD_CSA_Begin_General01                             = 28,
	AD_CSA_Begin_Graffiti                              = 29,
	AD_CSA_Begin_Hotwire                               = 30,
	AD_CSA_Begin_PlantBuildingBomb                     = 31,
	AD_CSA_Begin_PlantVehicleBomb                      = 32,
	AD_CSA_Begin_VehicleBreakIn                        = 33,
	AD_CSA_End_Antigraffiti                            = 34,
	AD_CSA_End_Arson                                   = 35,
	AD_CSA_End_BombDisposal                            = 36,
	AD_CSA_End_Burglary                                = 37,
	AD_CSA_End_ForcedEntry                             = 38,
	AD_CSA_End_Graffiti                                = 39,
	AD_CSA_End_Hotwire                                 = 40,
	AD_CSA_End_PlantBuildingBomb                       = 41,
	AD_CSA_End_PlantVehicleBomb                        = 42,
	AD_CSA_End_VehicleBreakIn                          = 43,
	AD_CSA_EnterVehicle                                = 44,
	AD_CSA_EnterVehicle01                              = 45,
	AD_CSA_EnterVehicle02                              = 46,
	AD_CSA_EnterVehicle03                              = 47,
	AD_CSA_EnterVehicle04                              = 48,
	AD_CSA_EnterVehicle_Chat                           = 49,
	AD_EquipsOrChangesWeapon                           = 50,
	AD_EquipsOrChangesWeapon_Chat                      = 51,
	AD_FirstSpawn                                      = 52,
	AD_FirstSpawn01                                    = 53,
	AD_FirstSpawn02                                    = 54,
	AD_FirstSpawn03                                    = 55,
	AD_FirstSpawn_4a                                   = 56,
	AD_FirstSpawn04                                    = 57,
	AD_FirstSpawn05                                    = 58,
	AD_FirstWeapon                                     = 59,
	AD_FirstWeapon01                                   = 60,
	AD_FirstWeapon02                                   = 61,
	AD_FirstWeapon_Chat                                = 62,
	AD_GenericPlayer                                   = 63,
	AD_GroupLeaderAcceptedMission                      = 64,
	AD_GroupLeaderPledgedToAContact                    = 65,
	AD_Inventory_AmmoPurchase                          = 66,
	AD_Inventory_AmmoPurchase01                        = 67,
	AD_ItemRewards_Generic                             = 68,
	AD_JoinGroupOnMission                              = 69,
	AD_JoinGroupOnMission01                            = 70,
	AD_KillPedestrian_Criminal                         = 71,
	AD_KillPedestrian_Criminal01                       = 72,
	AD_KillPedestrian_Criminal_Chat                    = 73,
	AD_KillPedestrian_Enforcer                         = 74,
	AD_KillPedestrian_Enforcer01                       = 75,
	AD_KillPedestrian_Enforcer_Chat                    = 76,
	AD_MailReceivedRewards                             = 77,
	AD_MailRecievedRewards                             = 78,
	AD_MailRecievedRewards01                           = 79,
	AD_MailRecievedRewards_Chat                        = 80,
	AD_Match_DispatchedAgainstOpposition               = 81,
	AD_Match_DispatchedAgainstOpposition01             = 82,
	AD_Match_DispatchedAgainstOpposition_Chat          = 83,
	AD_Match_Opposition                                = 84,
	AD_Match_Opposition01                              = 85,
	AD_Match_OppositionAssigned                        = 86,
	AD_Match_OppositionAssigned01                      = 87,
	AD_Match_OppositionAssigned_Chat                   = 88,
	AD_Mission_AskDropTaskItem                         = 89,
	AD_Mission_EnemyStageComplete                      = 90,
	AD_Mission_PlayerDroppedoffTaskItem                = 91,
	AD_Mission_StageComplete                           = 92,
	AD_Mission_StageComplete01                         = 93,
	AD_MissionAccepted                                 = 94,
	AD_MissionAccepted01                               = 95,
	AD_MissionAccepted02                               = 96,
	AD_MissionAccepted_Chat                            = 97,
	AD_MissionOffered                                  = 98,
	AD_MissionOffered01                                = 99,
	AD_MobileSupplyUnit                                = 100,
	AD_MobileSupplyUnit01                              = 101,
	AD_MobileSupplyUnit_Chat                           = 102,
	AD_Notoriety0                                      = 103,
	AD_Notoriety1Dec                                   = 104,
	AD_Notoriety1Dec01                                 = 105,
	AD_Notoriety1Dec02                                 = 106,
	AD_Notoriety1Inc                                   = 107,
	AD_Notoriety2Dec                                   = 108,
	AD_Notoriety2Inc                                   = 109,
	AD_Notoriety2Inc01                                 = 110,
	AD_Notoriety2Inc02                                 = 111,
	AD_Notoriety3Dec                                   = 112,
	AD_Notoriety3Inc                                   = 113,
	AD_Notoriety3Inc01                                 = 114,
	AD_Notoriety3Inc02                                 = 115,
	AD_Notoriety4Dec                                   = 116,
	AD_Notoriety4Inc                                   = 117,
	AD_Notoriety5                                      = 118,
	AD_Notoriety501                                    = 119,
	AD_Notoriety502                                    = 120,
	AD_Notoriety5_Team                                 = 121,
	AD_Notoriety5_Team01                               = 122,
	AD_NotorietyChange                                 = 123,
	AD_NotorietyChange01                               = 124,
	AD_NotorietyChange_Chat                            = 125,
	AD_OpenWorld_DeliverArmouredVan                    = 126,
	AD_OpenWorld_DeliverCheapVehicle                   = 127,
	AD_OpenWorld_DeliverDamagedtVehicle                = 128,
	AD_OpenWorld_DeliverExpensiveVehicle               = 129,
	AD_OpenWorld_DeliverPerfectVehicle                 = 130,
	AD_OpenWorld_HijackVehicle                         = 131,
	AD_OpenWorld_HijackVehicle_Chat                    = 132,
	AD_OpenWorld_HijackVehicle_Enf                     = 133,
	AD_OpenWorld_Mugging                               = 134,
	AD_OpenWorld_Mugging01                             = 135,
	AD_OpenWorld_Mugging02                             = 136,
	AD_OpenWorld_Mugging_Chat                          = 137,
	AD_OpenWorld_Not5Announce                          = 138,
	AD_OpenWorld_Not5Announce01                        = 139,
	AD_OpenWorld_Not5Announce02                        = 140,
	AD_OpenWorld_Not5Announce_Chat                     = 141,
	AD_OpenWorld_Pres5Announce                         = 142,
	AD_OpenWorld_Pres5Announce01                       = 143,
	AD_OpenWorld_Pres5Announce02                       = 144,
	AD_OpenWorld_Pres5Announce_Chat                    = 145,
	AD_OpenWorld_RamRaid                               = 146,
	AD_OpenWorld_RamRaid01                             = 147,
	AD_OpenWorld_RamRaid02                             = 148,
	AD_OpenWorld_RamRaid_Chat                          = 149,
	AD_OpenWorld_Witness                               = 150,
	AD_OpenWorld_Witness01                             = 151,
	AD_OpenWorld_Witness02                             = 152,
	AD_OpenWorld_Witness_Chat                          = 153,
	AD_OpenWorld_Witness_FailOpposed                   = 154,
	AD_OpenWorld_Witness_FailOpposed01                 = 155,
	AD_OpenWorld_Witness_FailTask                      = 156,
	AD_OpenWorld_Witness_FailTask01                    = 157,
	AD_OpenWorld_Witnessed                             = 158,
	AD_OpenWorld_Witnessed01                           = 159,
	AD_OpenWorld_Witnessed02                           = 160,
	AD_OpenWorld_Witnessed_Chat                        = 161,
	AD_PickupTaskItem                                  = 162,
	AD_PickupTaskItem01                                = 163,
	AD_PickupTaskItem02                                = 164,
	AD_PickupTaskItem_Alt                              = 165,
	AD_PickupTaskItem_Alt01                            = 166,
	AD_PickupTaskItem_Alt_Chat                         = 167,
	AD_PickupTaskItem_Chat                             = 168,
	AD_PickupTaskItem_Instruct                         = 169,
	AD_PickupTaskItem_Instruct_Chat                    = 170,
	AD_PlayerAmmoDepleted                              = 171,
	AD_PlayerAmmoLow                                   = 172,
	AD_PlayerRespawned                                 = 173,
	AD_PlayerStunned                                   = 174,
	AD_PlayerStunned01                                 = 175,
	AD_PlayerStunned_Chat                              = 176,
	AD_PledgedToAContact                               = 177,
	AD_PledgedToAContact01                             = 178,
	AD_Prestige0                                       = 179,
	AD_Prestige1Dec                                    = 180,
	AD_Prestige1Inc                                    = 181,
	AD_Prestige2Dec                                    = 182,
	AD_Prestige2Inc                                    = 183,
	AD_Prestige3Dec                                    = 184,
	AD_Prestige3Inc                                    = 185,
	AD_Prestige4Dec                                    = 186,
	AD_Prestige4Inc                                    = 187,
	AD_Prestige5                                       = 188,
	AD_Prestige501                                     = 189,
	AD_Prestige502                                     = 190,
	AD_Prestige5_Team                                  = 191,
	AD_Prestige5_Team01                                = 192,
	AD_PrestigeChange                                  = 193,
	AD_PrestigeChange01                                = 194,
	AD_PrestigeChange_Chat                             = 195,
	AD_Progression_LostMission                         = 196,
	AD_Progression_LostMission_Chat                    = 197,
	AD_Progression_WonMission                          = 198,
	AD_Progression_WonMission_Chat                     = 199,
	AD_SameGroupMember                                 = 200,
	AD_ShowScoreboard                                  = 201,
	AD_SpawnedVehicle                                  = 202,
	AD_SpawnVehicle                                    = 203,
	AD_SpawnVehicle01                                  = 204,
	AD_SpawnVehicle_Chat                               = 205,
	AD_TeamKill                                        = 206,
	AD_TeamKill_Chat                                   = 207,
	AD_Threat                                          = 208,
	AD_Threat_Chat                                     = 209,
	AD_YouAcceptedMission                              = 210,
	Flush                                              = 211,
	GUI_CharacterCreation                              = 212,
	GUI_CharacterCreation01                            = 213,
	GUI_CharacterCreation02                            = 214,
	GUI_CharacterCreation03                            = 215,
	GUI_CharacterName                                  = 216,
	GUI_CharacterName01                                = 217,
	GUI_CityMap                                        = 218,
	GUI_CityMap01                                      = 219,
	GUI_CityMap02                                      = 220,
	GUI_CityMap_SelectFinancial                        = 221,
	GUI_CityMap_SelectFinancial01                      = 222,
	GUI_CityMap_SelectSocial                           = 223,
	GUI_CityMap_SelectWaterfront                       = 224,
	GUI_CityMap_SelectWaterfront01                     = 225,
	GUI_Clan                                           = 226,
	GUI_Clan01                                         = 227,
	GUI_Clan02                                         = 228,
	GUI_Clan03                                         = 229,
	GUI_Clan_Create                                    = 230,
	GUI_Contact                                        = 231,
	GUI_Contact_3_Crim                                 = 232,
	GUI_Contact_3_Enf                                  = 233,
	GUI_Contact01                                      = 234,
	GUI_Contact02                                      = 235,
	GUI_Contact03                                      = 236,
	GUI_Contact_Bribe                                  = 237,
	GUI_Contact_Bribe01                                = 238,
	GUI_Contact_Buy                                    = 239,
	GUI_Contact_Buy01                                  = 240,
	GUI_Contact_Buy_Purchase                           = 241,
	GUI_Contact_Chat                                   = 242,
	GUI_Contact_Crim                                   = 243,
	GUI_Contact_Crim01                                 = 244,
	GUI_Contact_Crim02                                 = 245,
	GUI_Contact_Crim03                                 = 246,
	GUI_Contact_Crim04                                 = 247,
	GUI_Contact_Crim05                                 = 248,
	GUI_Contact_Enf                                    = 249,
	GUI_Contact_Enf01                                  = 250,
	GUI_Contact_Enf02                                  = 251,
	GUI_Contact_Enf03                                  = 252,
	GUI_Contact_Enf04                                  = 253,
	GUI_Contact_Enf05                                  = 254,
	GUI_Contact_Pledge                                 = 255,
	GUI_Contact_Sell                                   = 256,
	GUI_DisplayPoint_Generic                           = 257,
	GUI_DisplayPoint_Generic01                         = 258,
	GUI_DisplayPoint_Generic02                         = 259,
	GUI_DisplayPoint_Generic_Chat                      = 260,
	GUI_DisplayPoint_Graffiti_Billboard                = 261,
	GUI_DisplayPoint_Graffiti_Billboard01              = 262,
	GUI_DisplayPoint_Graffiti_Billboard02              = 263,
	GUI_DisplayPoint_Graffiti_Default                  = 264,
	GUI_DisplayPoint_Graffiti_Default01                = 265,
	GUI_DisplayPoint_Graffiti_Default02                = 266,
	GUI_DisplayPoint_Graffiti_Targeted                 = 267,
	GUI_DisplayPoint_Graffiti_Targeted01               = 268,
	GUI_DisplayPoint_Music                             = 269,
	GUI_DisplayPoint_Music01                           = 270,
	GUI_DisplayPoint_Statue                            = 271,
	GUI_DisplayPoint_Statue01                          = 272,
	GUI_DisplayPoint_Vehicle                           = 273,
	GUI_DisplayPoint_Vehicle01                         = 274,
	GUI_DistrictMap                                    = 275,
	GUI_DistrictMap01                                  = 276,
	GUI_DistrictMap02                                  = 277,
	GUI_DistrictMap_Chat                               = 278,
	GUI_DistrictSelectAdvanced                         = 279,
	GUI_DistrictSelectAdvanced01                       = 280,
	GUI_Inventory_Open                                 = 281,
	GUI_Inventory_Open01                               = 282,
	GUI_Inventory_Open02                               = 283,
	GUI_Inventory_Open03                               = 284,
	GUI_Inventory_Open_Chat                            = 285,
	GUI_Inventory_ReadOnly                             = 286,
	GUI_Inventory_ReadOnly_Chat                        = 287,
	GUI_Leagues                                        = 288,
	GUI_Leagues01                                      = 289,
	GUI_Leagues02                                      = 290,
	GUI_Locker                                         = 291,
	GUI_Locker_Duplicate                               = 292,
	GUI_Mail                                           = 293,
	GUI_Marketplace                                    = 294,
	GUI_Marketplace01                                  = 295,
	GUI_Marketplace02                                  = 296,
	GUI_Marketplace03                                  = 297,
	GUI_Music_Player                                   = 298,
	GUI_Music_Player01                                 = 299,
	GUI_Music_Player02                                 = 300,
	GUI_MusicStudio                                    = 301,
	GUI_MusicStudio_Edit                               = 302,
	GUI_MusicStudio_Edit01                             = 303,
	GUI_MusicStudio_Locker                             = 304,
	GUI_MusicStudio_Locker01                           = 305,
	GUI_MusicStudio_Locker02                           = 306,
	GUI_MusicStudio_Save                               = 307,
	GUI_MusicStudio_Save_Chat                          = 308,
	GUI_OptionsAudio                                   = 309,
	GUI_OptionsAudio01                                 = 310,
	GUI_OptionsAudio02                                 = 311,
	GUI_OptionsAudio03                                 = 312,
	GUI_OptionsCapture                                 = 313,
	GUI_OptionsCapture01                               = 314,
	GUI_OptionsCapture02                               = 315,
	GUI_OptionsVideo                                   = 316,
	GUI_OptionsVideo01                                 = 317,
	GUI_SocialUI                                       = 318,
	GUI_SocialUI01                                     = 319,
	GUI_SocialUI02                                     = 320,
	GUI_Test_DistrictEntryMap                          = 321,
	GUI_Test_DistrictEntryMap01                        = 322,
	GUI_Test_DistrictEntryMap02                        = 323,
	GUI_Test_DistrictEntryMap03                        = 324,
	GUI_Test_LoginScreen                               = 325,
	GUI_Test_LoginScreen01                             = 326,
	GUI_Test_Onclick                                   = 327,
	GUI_WorldSelect                                    = 328,
	GUI_WorldSelect01                                  = 329,
	HUD_Music                                          = 330,
	HUDO_AdHocDeliveredItems                           = 331,
	HUDO_AdHocDeliveredItems_Failed                    = 332,
	HUDO_AdHocDeliveredItems_Failed01                  = 333,
	HUDO_AdHocDeliveredItems_Incomplete                = 334,
	HUDO_AdHocDeliveredItems_Incomplete01              = 335,
	HUDO_AdHocDeliveredItems_Incomplete02              = 336,
	HUDO_AdHocDeliveredVehicle                         = 337,
	HUDO_AdHocDeliveredVehicle_Failed                  = 338,
	HUDO_AdHocDeliveredVehicle_Failed01                = 339,
	HUDO_ContactReferral                               = 340,
	HUDO_ContactReferral01                             = 341,
	HUDO_ContactReferral_Chat                          = 342,
	HUDO_MaxedContact                                  = 343,
	HUDO_MaxedContact01                                = 344,
	HUDO_MaxedContact_Chat                             = 345,
	HUDO_OutOfAmmo                                     = 346,
	HUDO_OutOfAmmo01                                   = 347,
	HUDO_OutOfAmmo_Chat                                = 348,
	HUDO_VehicleCritical                               = 349,
	HUDO_VehicleCritical01                             = 350,
	HUDO_VehicleCritical02                             = 351,
	HUDO_VehicleCritical_Chat                          = 352,
	RO_Character                                       = 353,
	RO_Character_Chat                                  = 354,
	RO_Contact                                         = 355,
	RO_Contact01                                       = 356,
	RO_Contact02                                       = 357,
	RO_Contact_Chat                                    = 358,
	RO_DisplayPoint                                    = 359,
	RO_DisplayPoint_Chat                               = 360,
	RO_OpenWorld_BreakIn                               = 361,
	RO_OpenWorld_BreakIn_Chat                          = 362,
	RO_OpenWorld_Mugging                               = 363,
	RO_OpenWorld_Mugging_Chat                          = 364,
	RO_OpenWorld_RamRaid                               = 365,
	RO_OpenWorld_RamRaid_Chat                          = 366,
	RO_RouteControl                                    = 367,
	RO_Vehicle_Generic                                 = 368,
	RO_Vehicle_Generic_Chat_Crim                       = 369,
	RO_Vehicle_Generic_Chat_Enf                        = 370,
	RO_Vehicle_NotUsable                               = 371,
	RO_Vehicle_Stolen                                  = 372,
	RO_Vehicle_Stolen01                                = 373,
	RO_Vehicle_Stolen_Chat                             = 374,
	RO_Vending_Ammo                                    = 375,
	RO_Vending_Ammo_Chat                               = 376,
	RO_Vending_Generic                                 = 377,
	RO_Vending_Generic_Chat                            = 378,
	RO_Vending_Mail                                    = 379,
	RO_Vending_Mail01                                  = 380,
	RO_Vending_Mail_Chat                               = 381,
	RO_Vending_Vehicle                                 = 382,
	RO_Vending_Vehicle_Chat                            = 383,
	SD_CustomisationZone                               = 384,
	SD_Designer_Main                                   = 385,
	SD_Designer_Opened                                 = 386,
	SD_FirstSpawn                                      = 387,
	SD_FirstSpawn01                                    = 388,
	SD_FirstSpawn02                                    = 389,
	SD_FirstSpawn03                                    = 390,
	SD_FirstSpawn04                                    = 391,
	SD_FirstSpawn05                                    = 392,
	SD_FirstSpawn06                                    = 393,
	SD_FirstSpawn07                                    = 394,
	SD_Garage_Customisation                            = 395,
	SD_Garage_Customisation_Camera                     = 396,
	SD_Garage_CustomisationDecals                      = 397,
	SD_Garage_CustomisationDecals01                    = 398,
	SD_Garage_CustomisationPaint                       = 399,
	SD_Garage_CustomisationPaint01                     = 400,
	SD_Garage_CustomisationParts                       = 401,
	SD_Garage_CustomisationParts01                     = 402,
	SD_Garage_CustomisationPlates                      = 403,
	SD_Garage_CustomisationPlates01                    = 404,
	SD_Garage_Opened                                   = 405,
	SD_Persona                                         = 406,
	SD_Persona01                                       = 407,
	SD_Persona02                                       = 408,
	SD_Persona03                                       = 409,
	SD_SymbolEditor                                    = 410,
	SD_SymbolEditor01                                  = 411,
	SD_SymbolEditor02                                  = 412,
	SD_SymbolEditor03                                  = 413,
	SD_Wardrobe_AddCustomizable                        = 414,
	SD_Wardrobe_AddCustomizable01                      = 415,
	SD_Wardrobe_AddItem                                = 416,
	SD_Wardrobe_AddItem01                              = 417,
	SD_Wardrobe_ItemCustomization                      = 418,
	SD_Wardrobe_ItemCustomization01                    = 419,
	SD_Wardrobe_ItemCustomization02                    = 420,
	SD_Wardrobe_Open                                   = 421,
	SD_Wardrobe_Open01                                 = 422,
	SD_Wardrobe_Open02                                 = 423,
	TD_FirstSpawn                                      = 424,
	TD_FirstSpawn01                                    = 425,
	TD_FirstSpawn02                                    = 426,
	TD_FirstSpawn03                                    = 427,
	TD_FirstSpawn_Chat                                 = 428,
	TD_FirstSpawn_Chat01                               = 429,
	TD_Notoriety0                                      = 430,
	TD_Notoriety1Dec                                   = 431,
	TD_Notoriety1Dec01                                 = 432,
	TD_Notoriety1Dec02                                 = 433,
	TD_Notoriety1Inc                                   = 434,
	TD_Notoriety2Dec                                   = 435,
	TD_Notoriety2Inc                                   = 436,
	TD_Notoriety2Inc01                                 = 437,
	TD_Notoriety2Inc02                                 = 438,
	TD_Notoriety3Dec                                   = 439,
	TD_Notoriety3Inc                                   = 440,
	TD_Notoriety3Inc01                                 = 441,
	TD_Notoriety3Inc02                                 = 442,
	TD_Notoriety4Dec                                   = 443,
	TD_Notoriety4Inc                                   = 444,
	TD_Notoriety5                                      = 445,
	TD_Notoriety501                                    = 446,
	TD_Notoriety502                                    = 447,
	TD_OpenWorld_Witness                               = 448,
	TD_OpenWorld_Witness01                             = 449,
	TD_OpenWorld_Witness_Chat                          = 450,
	TD_OpenWorld_Witnessed                             = 451,
	TD_OpenWorld_Witnessed01                           = 452,
	TD_Prestige0                                       = 453,
	TD_Prestige1Dec                                    = 454,
	TD_Prestige1Inc                                    = 455,
	TD_Prestige2Dec                                    = 456,
	TD_Prestige2Inc                                    = 457,
	TD_Prestige3Dec                                    = 458,
	TD_Prestige3Inc                                    = 459,
	TD_Prestige4Dec                                    = 460,
	TD_Prestige4Inc                                    = 461,
	TD_Prestige5                                       = 462,
	TD_Prestige501                                     = 463,
	TD_Prestige502                                     = 464,
	TD_TutorialsComplete                               = 465,
	TD_TutorialsComplete01                             = 466,
	TD_TutorialsComplete02                             = 467,
	TD_TutorialsComplete_Chat                          = 468,
	TD_TutorialsReminder                               = 469,
	TD_TutorialsReminder01                             = 470,
	TD_TutorialsReminder02                             = 471,
	TEMP                                               = 472,
	TestForceKnowledgebase                             = 473,
	etPopupDialog_MAX                                  = 474
};*/

// Enum APBGame.cSDD.etPrestigeEffect
/*enum etPrestigeEffect
{
	None                                               = 0,
	Antigraffiti                                       = 1,
	ArrestCriminal                                     = 2,
	ArrestCriminalLevel5                               = 3,
	ArrestEnforcer                                     = 4,
	Arson                                              = 5,
	Assist                                             = 6,
	BombDisposal                                       = 7,
	Bombing                                            = 8,
	Burglary                                           = 9,
	CommandeerVehicle                                  = 10,
	DamageEnemy                                        = 11,
	DamageFriend                                       = 12,
	DamageLCPedestrian                                 = 13,
	DamageProp                                         = 14,
	DamageVehicle                                      = 15,
	DeathFromEnemy                                     = 16,
	DeathFromFriend                                    = 17,
	DeathFromSuicide                                   = 18,
	DestroyProp                                        = 19,
	DestroyVehicle                                     = 20,
	DestroyVehicleLC                                   = 21,
	DropToLevel0                                       = 22,
	FireWeapon                                         = 23,
	ForcedEntry                                        = 24,
	Hack                                               = 25,
	KillCrimPlayer                                     = 26,
	KillLCPedestrian                                   = 27,
	KillPlayerEnemyArrested                            = 28,
	KillPlayerFriend                                   = 29,
	KillPlayerLevel5Crim                               = 30,
	KillPlayerLevel5Enf                                = 31,
	KnockOutPlayerEnemy                                = 32,
	LimitHeatToBelowMax                                = 33,
	MatchLoss                                          = 34,
	MissionItemDelivered                               = 35,
	MissionItemDeliveredMulti                          = 36,
	OpenWorldBust                                      = 37,
	OpenWorldLargeItemDelivered                        = 38,
	OpenWorldLargeItemDeliveredMulti                   = 39,
	OpenWorldMediumItemDelivered                       = 40,
	OpenWorldMediumItemDeliveredMulti                  = 41,
	OpenWorldSmallItemDelivered                        = 42,
	OpenWorldSmallItemDeliveredMulti                   = 43,
	OpenWorldVehicleDelivered                          = 44,
	OpenWorldVehicleDeliveredArmoured                  = 45,
	OpenWorldVehicleDeliveredCheap                     = 46,
	OpenWorldVehicleDeliveredExpensive                 = 47,
	OpenWorldVehicleDeliveredMidPrice                  = 48,
	OpenWorldVehicleDeliveredPerfect                   = 49,
	PrestigeLevel5Reached                              = 50,
	RaiseFromLevel0ToEquilibrium                       = 51,
	Sabotage                                           = 52,
	StopAndSearch                                      = 53,
	VehicleArson                                       = 54,
	VehicleBombDisposal                                = 55,
	VehicleBombing                                     = 56,
	VehicleBreakIn                                     = 57,
	VehicleBreakIn_Mission                             = 58,
	WitnessArson                                       = 59,
	WitnessBombing                                     = 60,
	WitnessBurglary                                    = 61,
	WitnessCarryTaskItem                               = 62,
	WitnessDestroyProp                                 = 63,
	WitnessDestroyVehicle                              = 64,
	WitnessDestroyVehicleLC                            = 65,
	WitnessDrivingStolenVehicle                        = 66,
	WitnessGraffiti                                    = 67,
	WitnessHack                                        = 68,
	WitnessHijackVehicle                               = 69,
	WitnessKillLCPedestrian                            = 70,
	WitnessKillPlayerEnemy                             = 71,
	WitnessMissionItemDelivery                         = 72,
	WitnessMugging                                     = 73,
	WitnessOpenWorldItemDelivery                       = 74,
	WitnessOpenWorldRamraid                            = 75,
	WitnessOpenWorldVehicleDelivery                    = 76,
	WitnessPassengerStolenVehicle                      = 77,
	WitnessSabotage                                    = 78,
	WitnessVehicleArson                                = 79,
	WitnessVehicleBombing                              = 80,
	WitnessVehicleBreakIn                              = 81,
	WonMatchBalanced                                   = 82,
	WonMatchSideVsSolo                                 = 83,
	WonMatchSoloVsSide                                 = 84,
	etPrestigeEffect_MAX                               = 85
};*/

// Enum APBGame.cSDD.etPrimitiveUnlockItemType
/*enum etPrimitiveUnlockItemType
{
	Unlock_Primitive_Vinyl_Circle                      = 0,
	Unlock_Primitive_Vinyl_Triangle                    = 1,
	Unlock_Primitive_Vinyl_Square                      = 2,
	Unlock_Primitive_Vinyl_Hexagon                     = 3,
	Unlock_Primitive_Vinyl_5PointStar                  = 4,
	Unlock_Primitive_Vinyl_QuarterArc                  = 5,
	Unlock_Primitive_Vinyl_RoundedTriangle             = 6,
	Unlock_Primitive_Vinyl_RoundedSquare               = 7,
	Unlock_Primitive_Vinyl_HalfArc                     = 8,
	Unlock_Primitive_Vinyl_Rounded5Star                = 9,
	Unlock_Primitive_Vinyl_SemiCircle                  = 10,
	Unlock_Primitive_Vinyl_Crescent                    = 11,
	Unlock_Primitive_Vinyl_RussianStar                 = 12,
	Unlock_Primitive_Vinyl_6PointStar                  = 13,
	Unlock_Primitive_Vinyl_10PointStar                 = 14,
	Unlock_Primitive_Vinyl_ConcaveTriangle             = 15,
	Unlock_Primitive_Vinyl_PointedOval                 = 16,
	Unlock_Primitive_Vinyl_SShape                      = 17,
	Unlock_Primitive_Vinyl_Heart                       = 18,
	Unlock_Primitive_Vinyl_Heart2                      = 19,
	Unlock_Primitive_Vinyl_ArrowHead                   = 20,
	Unlock_Primitive_Vinyl_Capsule                     = 21,
	Unlock_Primitive_Vinyl_PointedCapsule              = 22,
	Unlock_Primitive_Vinyl_PointedSemiCircle           = 23,
	Unlock_Primitive_Vinyl_ConcaveRectangle            = 24,
	Unlock_Primitive_Vinyl_Shield                      = 25,
	Unlock_Primitive_Vinyl_CommaShape                  = 26,
	Unlock_Primitive_Vinyl_BubbleCircle                = 27,
	Unlock_Primitive_Vinyl_Buzzsaw                     = 28,
	Unlock_Primitive_Vinyl_Cog                         = 29,
	Unlock_Primitive_Vinyl_Spike                       = 30,
	Unlock_Primitive_Vinyl_Wave                        = 31,
	Unlock_Primitive_Vinyl_Spike2                      = 32,
	Unlock_Primitive_Vinyl_ChevronSpike                = 33,
	Unlock_Primitive_Vinyl_BassClef                    = 34,
	Unlock_Primitive_Vinyl_Spike4                      = 35,
	Unlock_Primitive_Vinyl_FrenchCurve                 = 36,
	Unlock_Primitive_Vinyl_Flag                        = 37,
	Unlock_Primitive_Vinyl_Flag2                       = 38,
	Unlock_Primitive_Vinyl_RoundedSShape               = 39,
	Unlock_Primitive_Vinyl_Chevron                     = 40,
	Unlock_Primitive_Vinyl_ThinCrescent                = 41,
	Unlock_Primitive_Vinyl_Spike5                      = 42,
	Unlock_Primitive_Vinyl_Curve1                      = 43,
	Unlock_Primitive_Vinyl_Curve2                      = 44,
	Unlock_Primitive_Font_Basic_A                      = 45,
	Unlock_Primitive_Font_Basic_B                      = 46,
	Unlock_Primitive_Font_Basic_C                      = 47,
	Unlock_Primitive_Font_Basic_D                      = 48,
	Unlock_Primitive_Font_Basic_E                      = 49,
	Unlock_Primitive_Font_Basic_F                      = 50,
	Unlock_Primitive_Font_Basic_G                      = 51,
	Unlock_Primitive_Font_Basic_H                      = 52,
	Unlock_Primitive_Font_Basic_I                      = 53,
	Unlock_Primitive_Font_Basic_J                      = 54,
	Unlock_Primitive_Font_Basic_K                      = 55,
	Unlock_Primitive_Font_Basic_L                      = 56,
	Unlock_Primitive_Font_Basic_M                      = 57,
	Unlock_Primitive_Font_Basic_N                      = 58,
	Unlock_Primitive_Font_Basic_O                      = 59,
	Unlock_Primitive_Font_Basic_P                      = 60,
	Unlock_Primitive_Font_Basic_Q                      = 61,
	Unlock_Primitive_Font_Basic_R                      = 62,
	Unlock_Primitive_Font_Basic_S                      = 63,
	Unlock_Primitive_Font_Basic_T                      = 64,
	Unlock_Primitive_Font_Basic_U                      = 65,
	Unlock_Primitive_Font_Basic_V                      = 66,
	Unlock_Primitive_Font_Basic_W                      = 67,
	Unlock_Primitive_Font_Basic_X                      = 68,
	Unlock_Primitive_Font_Basic_Y                      = 69,
	Unlock_Primitive_Font_Basic_Z                      = 70,
	Unlock_Primitive_Font_Basic                        = 71,
	Unlock_Primitive_Font_Basic01                      = 72,
	Unlock_Primitive_Font_Basic02                      = 73,
	Unlock_Primitive_Font_Basic03                      = 74,
	Unlock_Primitive_Font_Basic04                      = 75,
	Unlock_Primitive_Font_Basic05                      = 76,
	Unlock_Primitive_Font_Basic06                      = 77,
	Unlock_Primitive_Font_Basic07                      = 78,
	Unlock_Primitive_Font_Basic08                      = 79,
	Unlock_Primitive_Font_Basic09                      = 80,
	Unlock_Primitive_Font_And                          = 81,
	Unlock_Primitive_Font_AT                           = 82,
	Unlock_Primitive_Font_Dollar                       = 83,
	Unlock_Primitive_Font_Explanation                  = 84,
	Unlock_Primitive_Font_Pound                        = 85,
	Unlock_Primitive_Font_QuestionMark                 = 86,
	Unlock_Primitive_Font_Stencil_A                    = 87,
	Unlock_Primitive_Font_Stencil_B                    = 88,
	Unlock_Primitive_Font_Stencil_C                    = 89,
	Unlock_Primitive_Font_Stencil_D                    = 90,
	Unlock_Primitive_Font_Stencil_E                    = 91,
	Unlock_Primitive_Font_Stencil_F                    = 92,
	Unlock_Primitive_Font_Stencil_G                    = 93,
	Unlock_Primitive_Font_Stencil_H                    = 94,
	Unlock_Primitive_Font_Stencil_I                    = 95,
	Unlock_Primitive_Font_Stencil_J                    = 96,
	Unlock_Primitive_Font_Stencil_K                    = 97,
	Unlock_Primitive_Font_Stencil_L                    = 98,
	Unlock_Primitive_Font_Stencil_M                    = 99,
	Unlock_Primitive_Font_Stencil_N                    = 100,
	Unlock_Primitive_Font_Stencil_O                    = 101,
	Unlock_Primitive_Font_Stencil_P                    = 102,
	Unlock_Primitive_Font_Stencil_Q                    = 103,
	Unlock_Primitive_Font_Stencil_R                    = 104,
	Unlock_Primitive_Font_Stencil_S                    = 105,
	Unlock_Primitive_Font_Stencil_T                    = 106,
	Unlock_Primitive_Font_Stencil_U                    = 107,
	Unlock_Primitive_Font_Stencil_V                    = 108,
	Unlock_Primitive_Font_Stencil_W                    = 109,
	Unlock_Primitive_Font_Stencil_X                    = 110,
	Unlock_Primitive_Font_Stencil_Y                    = 111,
	Unlock_Primitive_Font_Stencil_Z                    = 112,
	Unlock_Primitive_Font_Stencil                      = 113,
	Unlock_Primitive_Font_Stencil01                    = 114,
	Unlock_Primitive_Font_Stencil02                    = 115,
	Unlock_Primitive_Font_Stencil03                    = 116,
	Unlock_Primitive_Font_Stencil04                    = 117,
	Unlock_Primitive_Font_Stencil05                    = 118,
	Unlock_Primitive_Font_Stencil06                    = 119,
	Unlock_Primitive_Font_Stencil07                    = 120,
	Unlock_Primitive_Font_Stencil08                    = 121,
	Unlock_Primitive_Font_Stencil09                    = 122,
	Unlock_Primitive_Font_Gothic_A                     = 123,
	Unlock_Primitive_Font_Gothic_B                     = 124,
	Unlock_Primitive_Font_Gothic_C                     = 125,
	Unlock_Primitive_Font_Gothic_D                     = 126,
	Unlock_Primitive_Font_Gothic_E                     = 127,
	Unlock_Primitive_Font_Gothic_F                     = 128,
	Unlock_Primitive_Font_Gothic_G                     = 129,
	Unlock_Primitive_Font_Gothic_H                     = 130,
	Unlock_Primitive_Font_Gothic_I                     = 131,
	Unlock_Primitive_Font_Gothic_J                     = 132,
	Unlock_Primitive_Font_Gothic_K                     = 133,
	Unlock_Primitive_Font_Gothic_L                     = 134,
	Unlock_Primitive_Font_Gothic_M                     = 135,
	Unlock_Primitive_Font_Gothic_N                     = 136,
	Unlock_Primitive_Font_Gothic_O                     = 137,
	Unlock_Primitive_Font_Gothic_P                     = 138,
	Unlock_Primitive_Font_Gothic_Q                     = 139,
	Unlock_Primitive_Font_Gothic_R                     = 140,
	Unlock_Primitive_Font_Gothic_S                     = 141,
	Unlock_Primitive_Font_Gothic_T                     = 142,
	Unlock_Primitive_Font_Gothic_U                     = 143,
	Unlock_Primitive_Font_Gothic_V                     = 144,
	Unlock_Primitive_Font_Gothic_W                     = 145,
	Unlock_Primitive_Font_Gothic_X                     = 146,
	Unlock_Primitive_Font_Gothic_Y                     = 147,
	Unlock_Primitive_Font_Gothic_Z                     = 148,
	Unlock_Primitive_Font_Varsity_A                    = 149,
	Unlock_Primitive_Font_Varsity_B                    = 150,
	Unlock_Primitive_Font_Varsity_C                    = 151,
	Unlock_Primitive_Font_Varsity_D                    = 152,
	Unlock_Primitive_Font_Varsity_E                    = 153,
	Unlock_Primitive_Font_Varsity_F                    = 154,
	Unlock_Primitive_Font_Varsity_G                    = 155,
	Unlock_Primitive_Font_Varsity_H                    = 156,
	Unlock_Primitive_Font_Varsity_I                    = 157,
	Unlock_Primitive_Font_Varsity_J                    = 158,
	Unlock_Primitive_Font_Varsity_K                    = 159,
	Unlock_Primitive_Font_Varsity_L                    = 160,
	Unlock_Primitive_Font_Varsity_M                    = 161,
	Unlock_Primitive_Font_Varsity_N                    = 162,
	Unlock_Primitive_Font_Varsity_O                    = 163,
	Unlock_Primitive_Font_Varsity_P                    = 164,
	Unlock_Primitive_Font_Varsity_Q                    = 165,
	Unlock_Primitive_Font_Varsity_R                    = 166,
	Unlock_Primitive_Font_Varsity_S                    = 167,
	Unlock_Primitive_Font_Varsity_T                    = 168,
	Unlock_Primitive_Font_Varsity_U                    = 169,
	Unlock_Primitive_Font_Varsity_V                    = 170,
	Unlock_Primitive_Font_Varsity_W                    = 171,
	Unlock_Primitive_Font_Varsity_X                    = 172,
	Unlock_Primitive_Font_Varsity_Y                    = 173,
	Unlock_Primitive_Font_Varsity_Z                    = 174,
	Unlock_Primitive_Font_Varsity                      = 175,
	Unlock_Primitive_Font_Varsity01                    = 176,
	Unlock_Primitive_Font_Varsity02                    = 177,
	Unlock_Primitive_Font_Varsity03                    = 178,
	Unlock_Primitive_Font_Varsity04                    = 179,
	Unlock_Primitive_Font_Varsity05                    = 180,
	Unlock_Primitive_Font_Varsity06                    = 181,
	Unlock_Primitive_Font_Varsity07                    = 182,
	Unlock_Primitive_Font_Varsity08                    = 183,
	Unlock_Primitive_Font_Varsity09                    = 184,
	Unlock_Primitive_Font_Script_a                     = 185,
	Unlock_Primitive_Font_Script_b                     = 186,
	Unlock_Primitive_Font_Script_c                     = 187,
	Unlock_Primitive_Font_Script_d                     = 188,
	Unlock_Primitive_Font_Script_e                     = 189,
	Unlock_Primitive_Font_Script_f                     = 190,
	Unlock_Primitive_Font_Script_g                     = 191,
	Unlock_Primitive_Font_Script_h                     = 192,
	Unlock_Primitive_Font_Script_i                     = 193,
	Unlock_Primitive_Font_Script_j                     = 194,
	Unlock_Primitive_Font_Script_k                     = 195,
	Unlock_Primitive_Font_Script_l                     = 196,
	Unlock_Primitive_Font_Script_m                     = 197,
	Unlock_Primitive_Font_Script_n                     = 198,
	Unlock_Primitive_Font_Script_o                     = 199,
	Unlock_Primitive_Font_Script_p                     = 200,
	Unlock_Primitive_Font_Script_q                     = 201,
	Unlock_Primitive_Font_Script_r                     = 202,
	Unlock_Primitive_Font_Script_s                     = 203,
	Unlock_Primitive_Font_Script_t                     = 204,
	Unlock_Primitive_Font_Script_u                     = 205,
	Unlock_Primitive_Font_Script_v                     = 206,
	Unlock_Primitive_Font_Script_w                     = 207,
	Unlock_Primitive_Font_Script_x                     = 208,
	Unlock_Primitive_Font_Script_y                     = 209,
	Unlock_Primitive_Font_Script_z                     = 210,
	Unlock_Primitive_Font_Graf_A                       = 211,
	Unlock_Primitive_Font_Graf_B                       = 212,
	Unlock_Primitive_Font_Graf_C                       = 213,
	Unlock_Primitive_Font_Graf_D                       = 214,
	Unlock_Primitive_Font_Graf_E                       = 215,
	Unlock_Primitive_Font_Graf_F                       = 216,
	Unlock_Primitive_Font_Graf_G                       = 217,
	Unlock_Primitive_Font_Graf_H                       = 218,
	Unlock_Primitive_Font_Graf_I                       = 219,
	Unlock_Primitive_Font_Graf_J                       = 220,
	Unlock_Primitive_Font_Graf_K                       = 221,
	Unlock_Primitive_Font_Graf_L                       = 222,
	Unlock_Primitive_Font_Graf_M                       = 223,
	Unlock_Primitive_Font_Graf_N                       = 224,
	Unlock_Primitive_Font_Graf_O                       = 225,
	Unlock_Primitive_Font_Graf_P                       = 226,
	Unlock_Primitive_Font_Graf_Q                       = 227,
	Unlock_Primitive_Font_Graf_R                       = 228,
	Unlock_Primitive_Font_Graf_S                       = 229,
	Unlock_Primitive_Font_Graf_T                       = 230,
	Unlock_Primitive_Font_Graf_U                       = 231,
	Unlock_Primitive_Font_Graf_V                       = 232,
	Unlock_Primitive_Font_Graf_W                       = 233,
	Unlock_Primitive_Font_Graf_X                       = 234,
	Unlock_Primitive_Font_Graf_Y                       = 235,
	Unlock_Primitive_Font_Graf_Z                       = 236,
	Unlock_Primitive_Vinyl_DragonBody                  = 237,
	Unlock_Primitive_Vinyl_DragonTail                  = 238,
	Unlock_Primitive_Vinyl_Cloud                       = 239,
	Unlock_Primitive_Vinyl_DragonTail2                 = 240,
	Unlock_Primitive_Vinyl_Flower                      = 241,
	Unlock_Primitive_Vinyl_DragonClaw                  = 242,
	Unlock_Primitive_Vinyl_YingYang                    = 243,
	Unlock_Primitive_Vinyl_FleurDeLis                  = 244,
	Unlock_Primitive_Vinyl_Radioactive                 = 245,
	Unlock_Primitive_Vinyl_Male                        = 246,
	Unlock_Primitive_Vinyl_Female                      = 247,
	Unlock_Primitive_Vinyl_Shield2                     = 248,
	Unlock_Primitive_Vinyl_BarbedWire                  = 249,
	Unlock_Primitive_Vinyl_Banner                      = 250,
	Unlock_Primitive_Vinyl_Banner2                     = 251,
	Unlock_Primitive_Vinyl_Arrow                       = 252,
	Unlock_Primitive_Vinyl_Arrow2                      = 253,
	Unlock_Primitive_Vinyl_Arrow3                      = 254,
	Unlock_Primitive_Vinyl_Girl                        = 255,
	Unlock_Primitive_Vinyl_Girl2                       = 256,
	Unlock_Primitive_Vinyl_Girl3                       = 257,
	Unlock_Primitive_Vinyl_BrushStroke                 = 258,
	Unlock_Primitive_Vinyl_BrushStroke2                = 259,
	Unlock_Primitive_Vinyl_BrushStroke3                = 260,
	Unlock_Primitive_Vinyl_Splat                       = 261,
	Unlock_Primitive_Vinyl_Splat2                      = 262,
	Unlock_Primitive_Vinyl_Splat3                      = 263,
	Unlock_Primitive_Vinyl_Splat4                      = 264,
	Unlock_Primitive_Vinyl_Cracks                      = 265,
	Unlock_Primitive_Vinyl_Dirt                        = 266,
	Unlock_Primitive_Vinyl_Dirt2                       = 267,
	Unlock_Primitive_Vinyl_Crack                       = 268,
	Unlock_Primitive_Vinyl_Smoke                       = 269,
	Unlock_Primitive_Vinyl_Smoke2                      = 270,
	Unlock_Primitive_Vinyl_Drip                        = 271,
	Unlock_Primitive_Vinyl_Tribal1                     = 272,
	Unlock_Primitive_Vinyl_Tribal2                     = 273,
	Unlock_Primitive_Vinyl_Tribal3                     = 274,
	Unlock_Primitive_Vinyl_Tribal4                     = 275,
	Unlock_Primitive_Vinyl_Tribal5                     = 276,
	Unlock_Primitive_Vinyl_Tribal6                     = 277,
	Unlock_Primitive_Vinyl_Tribal7                     = 278,
	Unlock_Primitive_Vinyl_Tribal8                     = 279,
	Unlock_Primitive_Vinyl_Tribal9                     = 280,
	Unlock_Primitive_Vinyl_Tribal10                    = 281,
	Unlock_Primitive_Vinyl_Tribal11                    = 282,
	Unlock_Primitive_Vinyl_Tribal12                    = 283,
	Unlock_Primitive_Vinyl_Tribal13                    = 284,
	Unlock_Primitive_Vinyl_Tribal14                    = 285,
	Unlock_Primitive_Vinyl_Tribal15                    = 286,
	Unlock_Primitive_Vinyl_Tribal16                    = 287,
	Unlock_Primitive_Vinyl_Tribal17                    = 288,
	Unlock_Primitive_Vinyl_Tribal18                    = 289,
	Unlock_Primitive_Vinyl_Tribal19                    = 290,
	Unlock_Primitive_Vinyl_Tribal20                    = 291,
	Unlock_Primitive_Vinyl_Tribal21                    = 292,
	Unlock_Primitive_Vinyl_Tribal22                    = 293,
	Unlock_Primitive_Vinyl_Tribal23                    = 294,
	Unlock_Primitive_Vinyl_Tribal24                    = 295,
	Unlock_Primitive_Vinyl_Tribal25                    = 296,
	Unlock_Primitive_Vinyl_Flame1                      = 297,
	Unlock_Primitive_Vinyl_Flame2                      = 298,
	Unlock_Primitive_Vinyl_Flame3                      = 299,
	Unlock_Primitive_Vinyl_Flame4                      = 300,
	Unlock_Primitive_Vinyl_Flame5                      = 301,
	Unlock_Primitive_Vinyl_Flame6                      = 302,
	Unlock_Primitive_Vinyl_Flame7                      = 303,
	Unlock_Primitive_Vinyl_Flame8                      = 304,
	Unlock_Primitive_Vinyl_Flame9                      = 305,
	Unlock_Primitive_Vinyl_Flame10                     = 306,
	Unlock_Primitive_Vinyl_Flame11                     = 307,
	Unlock_Primitive_Vinyl_Wave2                       = 308,
	Unlock_Primitive_Vinyl_Wave3                       = 309,
	Unlock_Primitive_Vinyl_ClawTear                    = 310,
	Unlock_Primitive_Vinyl_Flourish                    = 311,
	Unlock_Primitive_Vinyl_Flourish2                   = 312,
	Unlock_Primitive_Vinyl_Flourish3                   = 313,
	Unlock_Primitive_Vinyl_Flourish4                   = 314,
	Unlock_Primitive_Vinyl_Flourish5                   = 315,
	Unlock_Primitive_Vinyl_Flourish6                   = 316,
	Unlock_Primitive_Vinyl_RadialGradient              = 317,
	Unlock_Primitive_Vinyl_RadialGradient2             = 318,
	Unlock_Primitive_Vinyl_RadialPattern               = 319,
	Unlock_Primitive_Vinyl_RadialPattern2              = 320,
	Unlock_Primitive_Vinyl_FlowerPattern               = 321,
	Unlock_Primitive_Vinyl_Spiral                      = 322,
	Unlock_Primitive_Vinyl_Beams01                     = 323,
	Unlock_Primitive_Lines06                           = 324,
	Unlock_Primitive_Lines07                           = 325,
	Unlock_Primitive_Vinyl_Swirl                       = 326,
	Unlock_Primitive_Vinyl_Helix                       = 327,
	Unlock_Primitive_Vinyl_Checks                      = 328,
	Unlock_Primitive_Vinyl_Lines                       = 329,
	Unlock_Primitive_Vinyl_FencePattern                = 330,
	Unlock_Primitive_Vinyl_Weave                       = 331,
	Unlock_Primitive_Vinyl_Sphere                      = 332,
	Unlock_Primitive_Vinyl_Cloud2                      = 333,
	Unlock_Primitive_Vinyl_Tree                        = 334,
	Unlock_Primitive_Vinyl_Plant                       = 335,
	Unlock_Primitive_Vinyl_Leaf                        = 336,
	Unlock_Primitive_Vinyl_Leaf2                       = 337,
	Unlock_Primitive_Vinyl_Leaf3                       = 338,
	Unlock_Primitive_Vinyl_Leaf4                       = 339,
	Unlock_Primitive_Vinyl_Flower2                     = 340,
	Unlock_Primitive_Vinyl_Rose                        = 341,
	Unlock_Primitive_Vinyl_Butterfly                   = 342,
	Unlock_Primitive_Vinyl_Ant                         = 343,
	Unlock_Primitive_Vinyl_Spider                      = 344,
	Unlock_Primitive_Vinyl_Tarantula                   = 345,
	Unlock_Primitive_Vinyl_Bird                        = 346,
	Unlock_Primitive_Vinyl_Bat                         = 347,
	Unlock_Primitive_Vinyl_Wing                        = 348,
	Unlock_Primitive_Vinyl_Wing2                       = 349,
	Unlock_Primitive_Vinyl_Cow                         = 350,
	Unlock_Primitive_Vinyl_Stag                        = 351,
	Unlock_Primitive_Vinyl_Lion                        = 352,
	Unlock_Primitive_Vinyl_Skull                       = 353,
	Unlock_Primitive_Vinyl_Ribcage                     = 354,
	Unlock_Primitive_Decal_APB                         = 355,
	Unlock_Primitive_Decal_RealtimeWorlds              = 356,
	Unlock_Primitive_Decal_CityCrest                   = 357,
	Unlock_Primitive_Decal_CityBadge                   = 358,
	Unlock_Primitive_Decal_SPPD                        = 359,
	Unlock_Primitive_Decal_PrentissTigers              = 360,
	Unlock_Primitive_Decal_Praetorians                 = 361,
	Unlock_Primitive_Decal_RedRain                     = 362,
	Unlock_Primitive_Decal_GKings                      = 363,
	Unlock_Primitive_Decal_BloodRoses                  = 364,
	Unlock_Primitive_Decal_TastyBurger                 = 365,
	Unlock_Primitive_Decal_UziHelp                     = 366,
	Unlock_Primitive_Decal_DaggerBadge                 = 367,
	Unlock_Primitive_Decal_SheriffBadge                = 368,
	Unlock_Primitive_Decal_PoliceBadge                 = 369,
	Unlock_Primitive_Decal_Stallions                   = 370,
	Unlock_Primitive_Decal_Wildcats                    = 371,
	Unlock_Primitive_Decal_Dragon3                     = 372,
	Unlock_Primitive_Decal_Fairy                       = 373,
	Unlock_Primitive_Decal_Knife                       = 374,
	Unlock_Primitive_Decal_Board                       = 375,
	Unlock_Primitive_Decal_CarbonFibre                 = 376,
	Unlock_Primitive_Decal_Dragon                      = 377,
	Unlock_Primitive_Decal_Tiger                       = 378,
	Unlock_Primitive_Decal_TortoiseSnake               = 379,
	Unlock_Primitive_Decal_Phoenix                     = 380,
	Unlock_Primitive_Decal_Buddha                      = 381,
	Unlock_Primitive_Decal_Carp                        = 382,
	Unlock_Primitive_Decal_Flower                      = 383,
	Unlock_Primitive_Decal_Dragon2                     = 384,
	Unlock_Primitive_Decal_Medals                      = 385,
	Unlock_Primitive_Decal_Patch04                     = 386,
	Unlock_Primitive_Decal_Fire                        = 387,
	Unlock_Primitive_Decal_Fire02                      = 388,
	Unlock_Primitive_Decal_Fire03                      = 389,
	Unlock_Primitive_Decal_Fire04                      = 390,
	Unlock_Primitive_Decal_Patch03                     = 391,
	Unlock_Primitive_Decal_Check                       = 392,
	Unlock_Primitive_Decal_Check2                      = 393,
	Unlock_Primitive_Decal_CircleBadge                 = 394,
	Unlock_Primitive_Decal_WolfBadge                   = 395,
	Unlock_Primitive_Decal_Patch02                     = 396,
	Unlock_Primitive_Decal_TPatch                      = 397,
	Unlock_Primitive_Decal_RPatch                      = 398,
	Unlock_Primitive_Decal_CPatch                      = 399,
	Unlock_Primitive_Decal_SPatch                      = 400,
	Unlock_Primitive_Decal_Patch01                     = 401,
	Unlock_Primitive_Decal_Clown                       = 402,
	Unlock_Primitive_Decal_Mummy                       = 403,
	Unlock_Primitive_Decal_Monster                     = 404,
	Unlock_Primitive_Decal_AlienSkull                  = 405,
	Unlock_Primitive_Decal_Zombie                      = 406,
	Unlock_Primitive_Decal_FlamingSkull                = 407,
	Unlock_Primitive_Decal_Octoskull                   = 408,
	Unlock_Primitive_Decal_Rose                        = 409,
	Unlock_Primitive_Decal_Skull2                      = 410,
	Unlock_Primitive_Decal_Skull                       = 411,
	Unlock_Primitive_Decal_Sun                         = 412,
	Unlock_Primitive_Decal_RibCage                     = 413,
	Unlock_Primitive_Decal_Heart                       = 414,
	Unlock_Primitive_Decal_Skull4                      = 415,
	Unlock_Primitive_Decal_Skull3                      = 416,
	Unlock_Primitive_Decal_Vanquish                    = 417,
	Unlock_Primitive_Decal_Angel                       = 418,
	Unlock_Primitive_Decal_SprayCan                    = 419,
	Unlock_Primitive_Decal_Uzi                         = 420,
	Unlock_Primitive_Decal_Pistol                      = 421,
	Unlock_Primitive_Decal_Taurus                      = 422,
	Unlock_Primitive_Decal_Bull                        = 423,
	Unlock_Primitive_Decal_Dice                        = 424,
	Unlock_Primitive_Decal_GunBling                    = 425,
	Unlock_Primitive_Decal_Crown                       = 426,
	Unlock_Primitive_Decal_TigerHead                   = 427,
	Unlock_Primitive_Decal_Wing                        = 428,
	Unlock_Primitive_Decal_Raven                       = 429,
	Unlock_Primitive_Decal_Octo                        = 430,
	Unlock_Primitive_Decal_DragonHead                  = 431,
	Unlock_Primitive_Decal_Panther                     = 432,
	Unlock_Primitive_Decal_Cobra                       = 433,
	Unlock_Primitive_Decal_Speaker                     = 434,
	Unlock_Primitive_Decal_Pineapple                   = 435,
	Unlock_Primitive_Decal_GasMask                     = 436,
	Unlock_Primitive_Decal_Swirl                       = 437,
	Unlock_Primitive_Decal_BulletHole                  = 438,
	Unlock_Primitive_Decal_RedFace                     = 439,
	Unlock_Primitive_Decal_Laugh                       = 440,
	Unlock_Primitive_Decal_Stereo                      = 441,
	Unlock_Primitive_Decal_Samurai                     = 442,
	Unlock_Primitive_Decal_Frog                        = 443,
	Unlock_Primitive_Decal_Mech                        = 444,
	Unlock_Primitive_Decal_SkateDude                   = 445,
	Unlock_Primitive_Decal_Snarl                       = 446,
	Unlock_Primitive_Decal_Football                    = 447,
	Unlock_Primitive_Decal_Baseball                    = 448,
	Unlock_Primitive_Decal_Basketball                  = 449,
	Unlock_Primitive_Decal_FootballHelmet              = 450,
	Unlock_Primitive_Decal_Eagle                       = 451,
	Unlock_Primitive_Vinyl_Simple2_Wave                = 452,
	Unlock_Primitive_Vinyl_Simple2                     = 453,
	Unlock_Primitive_Vinyl_Simple201                   = 454,
	Unlock_Primitive_Vinyl_Simple202                   = 455,
	Unlock_Primitive_Vinyl_Simple203                   = 456,
	Unlock_Primitive_Vinyl_Simple204                   = 457,
	Unlock_Primitive_Font_Korean                       = 458,
	Unlock_Primitive_Font_Korean01                     = 459,
	Unlock_Primitive_Font_Korean02                     = 460,
	Unlock_Primitive_Font_Korean03                     = 461,
	Unlock_Primitive_Font_Korean04                     = 462,
	Unlock_Primitive_Font_Korean05                     = 463,
	Unlock_Primitive_Font_Korean06                     = 464,
	Unlock_Primitive_Font_Korean07                     = 465,
	Unlock_Primitive_Font_Korean08                     = 466,
	Unlock_Primitive_Font_Korean09                     = 467,
	Unlock_Primitive_Font_Korean10                     = 468,
	Unlock_Primitive_Font_Korean11                     = 469,
	Unlock_Primitive_Font_Korean12                     = 470,
	Unlock_Primitive_Font_Korean13                     = 471,
	Unlock_Primitive_Font_Korean14                     = 472,
	Unlock_Primitive_Font_Korean15                     = 473,
	Unlock_Primitive_Font_Korean16                     = 474,
	Unlock_Primitive_Font_Korean17                     = 475,
	Unlock_Primitive_Font_Korean18                     = 476,
	Unlock_Primitive_Font_Korean19                     = 477,
	Unlock_Primitive_Font_Korean20                     = 478,
	Unlock_Primitive_Font_Korean21                     = 479,
	Unlock_Primitive_Font_Korean22                     = 480,
	Unlock_Primitive_Font_Korean23                     = 481,
	Unlock_Primitive_Font_Korean24                     = 482,
	Unlock_Primitive_Font_Korean25                     = 483,
	Unlock_Primitive_Font_Korean26                     = 484,
	Unlock_Primitive_Font_Korean27                     = 485,
	Unlock_Primitive_Vinyl_Misc                        = 486,
	Unlock_Primitive_Vinyl_Misc01                      = 487,
	Unlock_Primitive_Vinyl_Misc02                      = 488,
	Unlock_Primitive_Vinyl_Misc03                      = 489,
	Unlock_Primitive_Vinyl_SplatsCracks                = 490,
	Unlock_Primitive_Vinyl_Flourish7                   = 491,
	Unlock_Primitive_Vinyl_FlamesTears                 = 492,
	Unlock_Primitive_Vinyl_FlamesTears01               = 493,
	Unlock_Primitive_Vinyl_Patterns                    = 494,
	Unlock_Primitive_Vinyl_Patterns01                  = 495,
	Unlock_Primitive_Vinyl_Patterns02                  = 496,
	Unlock_Primitive_Vinyl_Patterns03                  = 497,
	Unlock_Primitive_Vinyl_Patterns04                  = 498,
	Unlock_Primitive_Vinyl_Patterns05                  = 499,
	Unlock_Primitive_Vinyl_Patterns06                  = 500,
	Unlock_Primitive_Vinyl_Nature                      = 501,
	Unlock_Primitive_Arcs01                            = 502,
	Unlock_Primitive_Boxes02                           = 503,
	Unlock_Primitive_Boxes04                           = 504,
	Unlock_Primitive_Circles01                         = 505,
	Unlock_Primitive_Circles03                         = 506,
	Unlock_Primitive_Digi01                            = 507,
	Unlock_Primitive_Digi02                            = 508,
	Unlock_Primitive_Loops                             = 509,
	Unlock_Primitive_Squares01                         = 510,
	Unlock_Primitive_Squares02                         = 511,
	Unlock_Primitive_Swirls02                          = 512,
	Unlock_Primitive_SpikeThin01                       = 513,
	Unlock_Primitive_SpikeThin02                       = 514,
	Unlock_Primitive_SpikeThin03                       = 515,
	Unlock_Primitive_LineCurve01                       = 516,
	Unlock_Primitive_LineCurve02                       = 517,
	Unlock_Primitive_LineSwirl01                       = 518,
	Unlock_Primitive_LineSwirl02                       = 519,
	Unlock_Primitive_FlourishSpike01                   = 520,
	Unlock_Primitive_FlourishDots01                    = 521,
	Unlock_Primitive_FlourishDots02                    = 522,
	Unlock_Primitive_FlourishDots03                    = 523,
	Unlock_Primitive_FlourishDots04                    = 524,
	Unlock_Primitive_FlourishDots05                    = 525,
	Unlock_Primitive_FlourishBasic01                   = 526,
	Unlock_Primitive_FlourishBasic02                   = 527,
	Unlock_Primitive_FlourishBasic03                   = 528,
	Unlock_Primitive_FlourishBasic04                   = 529,
	Unlock_Primitive_FlourishBasic05                   = 530,
	Unlock_Primitive_FlourishBasic06                   = 531,
	Unlock_Primitive_FlourishBasic07                   = 532,
	Unlock_Primitive_FlourishBasic08                   = 533,
	Unlock_Primitive_FlourishTwisted01                 = 534,
	Unlock_Primitive_FlourishTwisted02                 = 535,
	Unlock_Primitive_Calligraphy01                     = 536,
	Unlock_Primitive_Calligraphy02                     = 537,
	Unlock_Primitive_Calligraphy03                     = 538,
	Unlock_Primitive_Arrow01                           = 539,
	Unlock_Primitive_Arrow02                           = 540,
	Unlock_Primitive_Arrow03                           = 541,
	Unlock_Primitive_Arrow04                           = 542,
	Unlock_Primitive_LightningBolt01                   = 543,
	Unlock_Primitive_LightningBolt02                   = 544,
	Unlock_Primitive_LightningBolt03                   = 545,
	Unlock_Primitive_TribalPattern01                   = 546,
	Unlock_Primitive_TribalPattern02                   = 547,
	Unlock_Primitive_TribalPattern03                   = 548,
	Unlock_Primitive_TribalPattern04                   = 549,
	Unlock_Primitive_TribalPattern05                   = 550,
	Unlock_Primitive_BrushMark02                       = 551,
	Unlock_Primitive_BrushMark04                       = 552,
	Unlock_Primitive_BrushMark05                       = 553,
	Unlock_Primitive_BrushMark06                       = 554,
	Unlock_Primitive_BrushMark07                       = 555,
	Unlock_Primitive_BrushMark08                       = 556,
	Unlock_Primitive_Splat01                           = 557,
	Unlock_Primitive_Splat02                           = 558,
	Unlock_Primitive_Splat03                           = 559,
	Unlock_Primitive_Splat04                           = 560,
	Unlock_Primitive_Splat05                           = 561,
	Unlock_Primitive_Splat06                           = 562,
	Unlock_Primitive_Drip01                            = 563,
	Unlock_Primitive_Drip02                            = 564,
	Unlock_Primitive_Spatter01                         = 565,
	Unlock_Primitive_Spatter02                         = 566,
	Unlock_Primitive_Spatter03                         = 567,
	Unlock_Primitive_Spatter04                         = 568,
	Unlock_Primitive_BrushCircle01                     = 569,
	Unlock_Primitive_BrushMark10                       = 570,
	Unlock_Primitive_BrushMark11                       = 571,
	Unlock_Primitive_BrushMark09                       = 572,
	Unlock_Primitive_Scratch01                         = 573,
	Unlock_Primitive_Scratch03                         = 574,
	Unlock_Primitive_Curve05                           = 575,
	Unlock_Primitive_Scratch04                         = 576,
	Unlock_Primitive_Scratch05                         = 577,
	Unlock_Primitive_Scribble01                        = 578,
	Unlock_Primitive_Scribble02                        = 579,
	Unlock_Primitive_Scribble03                        = 580,
	Unlock_Primitive_Scribble04                        = 581,
	Unlock_Primitive_Scribble05                        = 582,
	Unlock_Primitive_ClawMark                          = 583,
	Unlock_Primitive_ZigZag01                          = 584,
	Unlock_Primitive_ZigZag02                          = 585,
	Unlock_Primitive_Shatter01                         = 586,
	Unlock_Primitive_BrushMark12                       = 587,
	Unlock_Primitive_Block01                           = 588,
	Unlock_Primitive_Block02                           = 589,
	Unlock_Primitive_Block03                           = 590,
	Unlock_Primitive_KidneyBean                        = 591,
	Unlock_Primitive_TearDrop                          = 592,
	Unlock_Primitive_Octagon                           = 593,
	Unlock_Primitive_DiamondConcave                    = 594,
	Unlock_Primitive_Trapezium                         = 595,
	Unlock_Primitive_CircleQuarter                     = 596,
	Unlock_Primitive_CrescentThin                      = 597,
	Unlock_Primitive_Curve04                           = 598,
	Unlock_Primitive_Curve01                           = 599,
	Unlock_Primitive_Curve02                           = 600,
	Unlock_Primitive_SimpleSpike01                     = 601,
	Unlock_Primitive_SimpleSpike02                     = 602,
	Unlock_Primitive_SimpleSpike03                     = 603,
	Unlock_Primitive_Tribal06                          = 604,
	Unlock_Primitive_Tribal08                          = 605,
	Unlock_Primitive_Tribal09                          = 606,
	Unlock_Primitive_Tribal15                          = 607,
	Unlock_Primitive_Tribal21                          = 608,
	Unlock_Primitive_Tribal12                          = 609,
	Unlock_Primitive_Check02                           = 610,
	Unlock_Primitive_Check03                           = 611,
	Unlock_Primitive_Check04                           = 612,
	Unlock_Primitive_Lines01                           = 613,
	Unlock_Primitive_Lines02                           = 614,
	Unlock_Primitive_Lines03                           = 615,
	Unlock_Primitive_Lines04                           = 616,
	Unlock_Primitive_Lines05                           = 617,
	Unlock_Primitive_Grid01                            = 618,
	Unlock_Primitive_Dots01                            = 619,
	Unlock_Primitive_Dots02                            = 620,
	Unlock_Primitive_Dots03                            = 621,
	Unlock_Primitive_Dots04                            = 622,
	Unlock_Primitive_Dots05                            = 623,
	Unlock_Primitive_Dots06                            = 624,
	Unlock_Primitive_Lines08                           = 625,
	Unlock_Primitive_Figure02                          = 626,
	Unlock_Primitive_Figure01                          = 627,
	Unlock_Primitive_Teeth01                           = 628,
	Unlock_Primitive_Lips01                            = 629,
	Unlock_Primitive_Lips02                            = 630,
	Unlock_Primitive_Mouth01                           = 631,
	Unlock_Primitive_Eye01                             = 632,
	Unlock_Primitive_Eye02                             = 633,
	Unlock_Primitive_Hand01                            = 634,
	Unlock_Primitive_Hand03                            = 635,
	Unlock_Primitive_Hand04                            = 636,
	Unlock_Primitive_Hand05                            = 637,
	Unlock_Primitive_Hand06                            = 638,
	Unlock_Primitive_Hand07                            = 639,
	Unlock_Primitive_Head01                            = 640,
	Unlock_Primitive_Head02                            = 641,
	Unlock_Primitive_Face01                            = 642,
	Unlock_Primitive_Linework01                        = 643,
	Unlock_Primitive_Linework02                        = 644,
	Unlock_Primitive_Linework03                        = 645,
	Unlock_Primitive_Linework04                        = 646,
	Unlock_Primitive_Linework05                        = 647,
	Unlock_Primitive_Linework06                        = 648,
	Unlock_Primitive_TribalFace                        = 649,
	Unlock_Primitive_HorrorTeeth                       = 650,
	Unlock_Primitive_Clown01                           = 651,
	Unlock_Primitive_Bone                              = 652,
	Unlock_Primitive_Skull04                           = 653,
	Unlock_Primitive_Skull05                           = 654,
	Unlock_Primitive_Skull02                           = 655,
	Unlock_Primitive_HorrorFace03                      = 656,
	Unlock_Primitive_Brain                             = 657,
	Unlock_Primitive_FlagCheck01                       = 658,
	Unlock_Primitive_FlagCheck02                       = 659,
	Unlock_Primitive_Crown01                           = 660,
	Unlock_Primitive_Crown02                           = 661,
	Unlock_Primitive_Dragon01                          = 662,
	Unlock_Primitive_Scroll01                          = 663,
	Unlock_Primitive_Banner01                          = 664,
	Unlock_Primitive_Banner02                          = 665,
	Unlock_Primitive_Banner03                          = 666,
	Unlock_Primitive_Chimera                           = 667,
	Unlock_Primitive_Wing02                            = 668,
	Unlock_Primitive_Wing03                            = 669,
	Unlock_Primitive_Wing04                            = 670,
	Unlock_Primitive_Flourish01                        = 671,
	Unlock_Primitive_Flourish05                        = 672,
	Unlock_Primitive_Flourish06                        = 673,
	Unlock_Primitive_Flourish07                        = 674,
	Unlock_Primitive_Flourish08                        = 675,
	Unlock_Primitive_Flourish11                        = 676,
	Unlock_Primitive_Flourish12                        = 677,
	Unlock_Primitive_Flourish13                        = 678,
	Unlock_Primitive_Box01                             = 679,
	Unlock_Primitive_Box02                             = 680,
	Unlock_Primitive_Box03                             = 681,
	Unlock_Primitive_FlourishAngular01                 = 682,
	Unlock_Primitive_FlourishAngular02                 = 683,
	Unlock_Primitive_FlourishAngular03                 = 684,
	Unlock_Primitive_FlourishAngular04                 = 685,
	Unlock_Primitive_FlourishAngular05                 = 686,
	Unlock_Primitive_FlourishAngular06                 = 687,
	Unlock_Primitive_FlourishAngular07                 = 688,
	Unlock_Primitive_Cog02                             = 689,
	Unlock_Primitive_Beams02                           = 690,
	Unlock_Primitive_Beams03                           = 691,
	Unlock_Primitive_Beams05                           = 692,
	Unlock_Primitive_Pattern01                         = 693,
	Unlock_Primitive_Pattern03                         = 694,
	Unlock_Primitive_Pattern04                         = 695,
	Unlock_Primitive_Pattern05                         = 696,
	Unlock_Primitive_Pattern06                         = 697,
	Unlock_Primitive_Pattern08                         = 698,
	Unlock_Primitive_Swirls04                          = 699,
	Unlock_Primitive_Swirls05                          = 700,
	Unlock_Primitive_Swirls06                          = 701,
	Unlock_Primitive_Swirls07                          = 702,
	Unlock_Primitive_Circles04                         = 703,
	Unlock_Primitive_Circles05                         = 704,
	Unlock_Primitive_Circles06                         = 705,
	Unlock_Primitive_Rainbow01                         = 706,
	Unlock_Primitive_Rainbow02                         = 707,
	Unlock_Primitive_Rainbow03                         = 708,
	Unlock_Primitive_Web                               = 709,
	Unlock_Primitive_Weave                             = 710,
	Unlock_Primitive_Barcode                           = 711,
	Unlock_Primitive_NewsPrint                         = 712,
	Unlock_Primitive_ZebraStripe                       = 713,
	Unlock_Primitive_Drop01                            = 714,
	Unlock_Primitive_Drop02                            = 715,
	Unlock_Primitive_Drop03                            = 716,
	Unlock_Primitive_Flash01                           = 717,
	Unlock_Primitive_Flash02                           = 718,
	Unlock_Primitive_Whirl01                           = 719,
	Unlock_Primitive_Cloud05                           = 720,
	Unlock_Primitive_Cloud04                           = 721,
	Unlock_Primitive_Cloud03                           = 722,
	Unlock_Primitive_Tiger01                           = 723,
	Unlock_Primitive_Tiger02                           = 724,
	Unlock_Primitive_Fish01                            = 725,
	Unlock_Primitive_Bird01                            = 726,
	Unlock_Primitive_Butterfly                         = 727,
	Unlock_Primitive_Wing05                            = 728,
	Unlock_Primitive_Bird02                            = 729,
	Unlock_Primitive_FlourishNature01                  = 730,
	Unlock_Primitive_Leaf07                            = 731,
	Unlock_Primitive_Leaf06                            = 732,
	Unlock_Primitive_Cloud06                           = 733,
	Unlock_Primitive_Leaf04                            = 734,
	Unlock_Primitive_Leaf03                            = 735,
	Unlock_Primitive_Flower03                          = 736,
	Unlock_Primitive_Flower02                          = 737,
	Unlock_Primitive_Headphones01                      = 738,
	Unlock_Primitive_Headphones02                      = 739,
	Unlock_Primitive_Tape                              = 740,
	Unlock_Primitive_Guitar                            = 741,
	Unlock_Primitive_Record                            = 742,
	Unlock_Primitive_Font_Bubble_A                     = 743,
	Unlock_Primitive_Font_Bubble_B                     = 744,
	Unlock_Primitive_Font_Bubble_C                     = 745,
	Unlock_Primitive_Font_Bubble_D                     = 746,
	Unlock_Primitive_Font_Bubble_E                     = 747,
	Unlock_Primitive_Font_Bubble_F                     = 748,
	Unlock_Primitive_Font_Bubble_G                     = 749,
	Unlock_Primitive_Font_Bubble_H                     = 750,
	Unlock_Primitive_Font_Bubble_I                     = 751,
	Unlock_Primitive_Font_Bubble_J                     = 752,
	Unlock_Primitive_Font_Bubble_K                     = 753,
	Unlock_Primitive_Font_Bubble_L                     = 754,
	Unlock_Primitive_Font_Bubble_M                     = 755,
	Unlock_Primitive_Font_Bubble_N                     = 756,
	Unlock_Primitive_Font_Bubble_O                     = 757,
	Unlock_Primitive_Font_Bubble_P                     = 758,
	Unlock_Primitive_Font_Bubble_Q                     = 759,
	Unlock_Primitive_Font_Bubble_R                     = 760,
	Unlock_Primitive_Font_Bubble_S                     = 761,
	Unlock_Primitive_Font_Bubble_T                     = 762,
	Unlock_Primitive_Font_Bubble_U                     = 763,
	Unlock_Primitive_Font_Bubble_V                     = 764,
	Unlock_Primitive_Font_Bubble_W                     = 765,
	Unlock_Primitive_Font_Bubble_X                     = 766,
	Unlock_Primitive_Font_Bubble_Y                     = 767,
	Unlock_Primitive_Font_Bubble_Z                     = 768,
	Unlock_Primitive_Font_Bubble                       = 769,
	Unlock_Primitive_Font_Bubble01                     = 770,
	Unlock_Primitive_Font_Bubble02                     = 771,
	Unlock_Primitive_Font_Bubble03                     = 772,
	Unlock_Primitive_Font_Bubble04                     = 773,
	Unlock_Primitive_Font_Bubble05                     = 774,
	Unlock_Primitive_Font_Bubble06                     = 775,
	Unlock_Primitive_Font_Bubble07                     = 776,
	Unlock_Primitive_Font_Bubble08                     = 777,
	Unlock_Primitive_Font_Bubble09                     = 778,
	Unlock_Primitive_Font_Tag_A                        = 779,
	Unlock_Primitive_Font_Tag_B                        = 780,
	Unlock_Primitive_Font_Tag_C                        = 781,
	Unlock_Primitive_Font_Tag_D                        = 782,
	Unlock_Primitive_Font_Tag_E                        = 783,
	Unlock_Primitive_Font_Tag_F                        = 784,
	Unlock_Primitive_Font_Tag_G                        = 785,
	Unlock_Primitive_Font_Tag_H                        = 786,
	Unlock_Primitive_Font_Tag_I                        = 787,
	Unlock_Primitive_Font_Tag_J                        = 788,
	Unlock_Primitive_Font_Tag_K                        = 789,
	Unlock_Primitive_Font_Tag_L                        = 790,
	Unlock_Primitive_Font_Tag_M                        = 791,
	Unlock_Primitive_Font_Tag_N                        = 792,
	Unlock_Primitive_Font_Tag_O                        = 793,
	Unlock_Primitive_Font_Tag_P                        = 794,
	Unlock_Primitive_Font_Tag_Q                        = 795,
	Unlock_Primitive_Font_Tag_R                        = 796,
	Unlock_Primitive_Font_Tag_S                        = 797,
	Unlock_Primitive_Font_Tag_T                        = 798,
	Unlock_Primitive_Font_Tag_U                        = 799,
	Unlock_Primitive_Font_Tag_V                        = 800,
	Unlock_Primitive_Font_Tag_W                        = 801,
	Unlock_Primitive_Font_Tag_X                        = 802,
	Unlock_Primitive_Font_Tag_Y                        = 803,
	Unlock_Primitive_Font_Tag_Z                        = 804,
	Unlock_Primitive_Font_GothicUpper_A                = 805,
	Unlock_Primitive_Font_GothicUpper_B                = 806,
	Unlock_Primitive_Font_GothicUpper_C                = 807,
	Unlock_Primitive_Font_GothicUpper_D                = 808,
	Unlock_Primitive_Font_GothicUpper_E                = 809,
	Unlock_Primitive_Font_GothicUpper_F                = 810,
	Unlock_Primitive_Font_GothicUpper_G                = 811,
	Unlock_Primitive_Font_GothicUpper_H                = 812,
	Unlock_Primitive_Font_GothicUpper_I                = 813,
	Unlock_Primitive_Font_GothicUpper_J                = 814,
	Unlock_Primitive_Font_GothicUpper_K                = 815,
	Unlock_Primitive_Font_GothicUpper_L                = 816,
	Unlock_Primitive_Font_GothicUpper_M                = 817,
	Unlock_Primitive_Font_GothicUpper_N                = 818,
	Unlock_Primitive_Font_GothicUpper_O                = 819,
	Unlock_Primitive_Font_GothicUpper_P                = 820,
	Unlock_Primitive_Font_GothicUpper_Q                = 821,
	Unlock_Primitive_Font_GothicUpper_R                = 822,
	Unlock_Primitive_Font_GothicUpper_S                = 823,
	Unlock_Primitive_Font_GothicUpper_T                = 824,
	Unlock_Primitive_Font_GothicUpper_U                = 825,
	Unlock_Primitive_Font_GothicUpper_V                = 826,
	Unlock_Primitive_Font_GothicUpper_W                = 827,
	Unlock_Primitive_Font_GothicUpper_X                = 828,
	Unlock_Primitive_Font_GothicUpper_Y                = 829,
	Unlock_Primitive_Font_GothicUpper_Z                = 830,
	Unlock_Primitive_Font_Scratch_A                    = 831,
	Unlock_Primitive_Font_Scratch_B                    = 832,
	Unlock_Primitive_Font_Scratch_C                    = 833,
	Unlock_Primitive_Font_Scratch_D                    = 834,
	Unlock_Primitive_Font_Scratch_E                    = 835,
	Unlock_Primitive_Font_Scratch_F                    = 836,
	Unlock_Primitive_Font_Scratch_G                    = 837,
	Unlock_Primitive_Font_Scratch_H                    = 838,
	Unlock_Primitive_Font_Scratch_I                    = 839,
	Unlock_Primitive_Font_Scratch_J                    = 840,
	Unlock_Primitive_Font_Scratch_K                    = 841,
	Unlock_Primitive_Font_Scratch_L                    = 842,
	Unlock_Primitive_Font_Scratch_M                    = 843,
	Unlock_Primitive_Font_Scratch_N                    = 844,
	Unlock_Primitive_Font_Scratch_O                    = 845,
	Unlock_Primitive_Font_Scratch_P                    = 846,
	Unlock_Primitive_Font_Scratch_Q                    = 847,
	Unlock_Primitive_Font_Scratch_R                    = 848,
	Unlock_Primitive_Font_Scratch_S                    = 849,
	Unlock_Primitive_Font_Scratch_T                    = 850,
	Unlock_Primitive_Font_Scratch_U                    = 851,
	Unlock_Primitive_Font_Scratch_V                    = 852,
	Unlock_Primitive_Font_Scratch_W                    = 853,
	Unlock_Primitive_Font_Scratch_X                    = 854,
	Unlock_Primitive_Font_Scratch_Y                    = 855,
	Unlock_Primitive_Font_Scratch_Z                    = 856,
	Unlock_Primitive_Foot01                            = 857,
	Unlock_Primitive_Flower04                          = 858,
	Unlock_Primitive_Butterfly02                       = 859,
	Unlock_Primitive_Goggles01                         = 860,
	Unlock_Primitive_BarbedWire                        = 861,
	Unlock_Primitive_TV                                = 862,
	Unlock_Primitive_IconFood                          = 863,
	Unlock_Primitive_Teddy                             = 864,
	Unlock_Primitive_Skater                            = 865,
	Unlock_Primitive_Glasses01                         = 866,
	Unlock_Primitive_Cap01                             = 867,
	Unlock_Primitive_Bag01                             = 868,
	Unlock_Primitive_Money01                           = 869,
	Unlock_Primitive_Poop                              = 870,
	Unlock_Primitive_Dics01                            = 871,
	Unlock_Primitive_Bubble01                          = 872,
	Unlock_Primitive_Bubble02                          = 873,
	Unlock_Primitive_Hole01                            = 874,
	Unlock_Primitive_Hole02                            = 875,
	Unlock_Primitive_GasMask02                         = 876,
	Unlock_Primitive_GasMask03                         = 877,
	Unlock_Primitive_Mask01                            = 878,
	Unlock_Primitive_Screw                             = 879,
	Unlock_Primitive_HandCuffs                         = 880,
	Unlock_Primitive_Grenade01                         = 881,
	Unlock_Primitive_Gun01                             = 882,
	Unlock_Primitive_Gun02                             = 883,
	Unlock_Primitive_Gun03                             = 884,
	Unlock_Primitive_Gun04                             = 885,
	Unlock_Primitive_Bomb                              = 886,
	Unlock_Primitive_Axe                               = 887,
	Unlock_Primitive_Bullet02                          = 888,
	Unlock_Primitive_Bullet03                          = 889,
	Unlock_Primitive_Knuckles                          = 890,
	Unlock_Primitive_MusicNote                         = 891,
	Unlock_Primitive_Stave                             = 892,
	Unlock_Primitive_LineCurve03                       = 893,
	Unlock_Primitive_GradientCircle01                  = 894,
	Unlock_Primitive_GradientCircle02                  = 895,
	Unlock_Primitive_GradientStar                      = 896,
	Unlock_Primitive_GradientCloud                     = 897,
	Unlock_Primitive_TextureTest01                     = 898,
	Unlock_Primitive_TextureTest02                     = 899,
	Unlock_Primitive_TextureTest03                     = 900,
	Unlock_Primitive_TextureTest04                     = 901,
	Unlock_Primitive_TextureTest05                     = 902,
	Unlock_Primitive_TextureTest06                     = 903,
	Unlock_Primitive_TextureTest07                     = 904,
	Unlock_Primitive_TextureTest08                     = 905,
	Unlock_Primitive_TextureTest09                     = 906,
	Unlock_Primitive_TextureTest10                     = 907,
	Unlock_Primitive_TextureTest11                     = 908,
	Unlock_Primitive_BlockCorner01                     = 909,
	Unlock_Primitive_BlockCorner02                     = 910,
	Unlock_Primitive_CircleInvert                      = 911,
	Unlock_Primitive_Egg                               = 912,
	Unlock_Primitive_Lines09                           = 913,
	Unlock_Primitive_Tribal22                          = 914,
	Unlock_Primitive_Tribal23                          = 915,
	Unlock_Primitive_Viehcle01                         = 916,
	Unlock_Primitive_Viehcle02                         = 917,
	Unlock_Primitive_Viehcle03                         = 918,
	Unlock_Primitive_Viehcle04                         = 919,
	Unlock_Primitive_Flame12                           = 920,
	Unlock_Primitive_GradientSquare                    = 921,
	Unlock_Primitive_Decal_PreOrder                    = 922,
	Unlock_Primitive_MAX                               = 923
};*/

// Enum APBGame.cSDD.etSceneLayer
/*enum etSceneLayer
{
	None                                               = 0,
	HUDWorldSpace                                      = 1,
	HUD_FullScreenEffect                               = 2,
	HUD2D                                              = 3,
	DistrictMap                                        = 4,
	AcceptDecline                                      = 5,
	HUD2D_DistrictMap                                  = 6,
	FactionSelect                                      = 7,
	CustomisationCanvas                                = 8,
	CustomisationScene                                 = 9,
	CustomisationMain                                  = 10,
	MainDialog                                         = 11,
	EscapeMenu                                         = 12,
	StorageInventory                                   = 13,
	MusicPlayback                                      = 14,
	Scoreboard                                         = 15,
	FrontEnd                                           = 16,
	OptionsMenu                                        = 17,
	WebBrowser                                         = 18,
	ContextPanel                                       = 19,
	ProgressCircle                                     = 20,
	ChatDialog                                         = 21,
	ChatCommands                                       = 22,
	ChatHUD                                            = 23,
	MessageDialog                                      = 24,
	PopupDialogs                                       = 25,
	DiagnosticToolsLayer                               = 26,
	CustomisationLoadingSceneLayer                     = 27,
	MusicPlaybackHUD                                   = 28,
	etSceneLayer_MAX                                   = 29
};*/

// Enum APBGame.cSDD.etScoreboardDescription
/*enum etScoreboardDescription
{
	Column_Arrests                                     = 0,
	Column_Assists                                     = 1,
	Column_Cash                                        = 2,
	Column_Deaths                                      = 3,
	Column_Kills                                       = 4,
	Column_Medals                                      = 5,
	Column_MVP                                         = 6,
	Column_PlayerName                                  = 7,
	Column_Side                                        = 8,
	Column_Standing                                    = 9,
	Column_Targets                                     = 10,
	Column_Threat                                      = 11,
	Column_Time                                        = 12,
	Column_MAX                                         = 13
};*/

// Enum APBGame.cSDD.etShopUIFilter
/*enum etShopUIFilter
{
	Ammo                                               = 0,
	Armory_ItemCat_Ammo                                = 1,
	ItemCat_All                                        = 2,
	None                                               = 3,
	Armory_CustomisableCharcter_FnMod                  = 4,
	Armory_CustomisableVehicle                         = 5,
	Armory_CustomisableVehicle_FnMod                   = 6,
	Armory_CustomisableWeapon_FnMod                    = 7,
	Armory_CustomisableWeapon_Primary                  = 8,
	Armory_ItemCat_Equipment                           = 9,
	Armory_ItemCat_FnMod                               = 10,
	Armory_ItemCat_PrimaryWeapon                       = 11,
	Armory_ItemCat_SecondaryWeapon                     = 12,
	Armory_ItemCat_UsableTokens                        = 13,
	Armory_ItemSubCat_FnMod_Character                  = 14,
	Armory_ItemSubCat_FnMod_Vehicle                    = 15,
	Armory_ItemSubCat_FnMod_Weapon                     = 16,
	Armory_ItemSubCat_Weapon_AssaultRifle              = 17,
	Armory_ItemSubCat_Weapon_CrowdControl              = 18,
	Armory_ItemSubCat_Weapon_GrenadeLauncher           = 19,
	Armory_ItemSubCat_Weapon_HeavyMachineGun           = 20,
	Armory_ItemSubCat_Weapon_RocketLauncher            = 21,
	Armory_ItemSubCat_Weapon_SemiAutoRifle             = 22,
	Armory_ItemSubCat_Weapon_Shotgun                   = 23,
	Armory_ItemSubCat_Weapon_SniperRifle               = 24,
	Armory_ItemSubCat_Weapon_SubMachineGun             = 25,
	Bindable_Character                                 = 26,
	Bindable_Vehicle                                   = 27,
	ClothingCat_Accessories                            = 28,
	ClothingCat_Footwear_Shoes                         = 29,
	ClothingCat_Footwear_Socks                         = 30,
	ClothingCat_Underwear_Bra                          = 31,
	Deploy_SelectEquipment                             = 32,
	Deploy_SelectOutfit                                = 33,
	Deploy_SelectSymbol                                = 34,
	Deploy_SelectTheme                                 = 35,
	Deploy_SelectVehicle                               = 36,
	Deploy_SelectWeapon_Grenade                        = 37,
	Deploy_SelectWeapon_Primary                        = 38,
	Deploy_SelectWeapon_Secondary                      = 39,
	ItemCat_Clothing                                   = 40,
	ItemCat_Clothing_Transferable                      = 41,
	ItemCat_DisplayPointToken                          = 42,
	ItemCat_DisplayPointToken_Transferable             = 43,
	ItemCat_Equipment                                  = 44,
	ItemCat_Equipment_Transferable                     = 45,
	ItemCat_FnMod                                      = 46,
	ItemCat_FnMod_Character                            = 47,
	ItemCat_FnMod_Transferable                         = 48,
	ItemCat_FnMod_Vehicle                              = 49,
	ItemCat_FnMod_Weapon                               = 50,
	ItemCat_Outfit                                     = 51,
	ItemCat_Song                                       = 52,
	ItemCat_Song_Transferable                          = 53,
	ItemCat_Symbol                                     = 54,
	ItemCat_Symbol_Transferable                        = 55,
	ItemCat_Theme                                      = 56,
	ItemCat_Theme_Transferable                         = 57,
	ItemCat_UsableToken                                = 58,
	ItemCat_UsableToken_Transferable                   = 59,
	ItemCat_Vehicle                                    = 60,
	ItemCat_Vehicle_Transferable                       = 61,
	ItemCat_Weapon                                     = 62,
	ItemCat_Weapon_Primary                             = 63,
	ItemCat_Weapon_Secondary                           = 64,
	ItemCat_Weapon_Transferable                        = 65,
	ItemSubCat_Clothing_Accessory                      = 66,
	ItemSubCat_Clothing_Badges                         = 67,
	ItemSubCat_Clothing_Belts                          = 68,
	ItemSubCat_Clothing_Coat                           = 69,
	ItemSubCat_Clothing_Contact                        = 70,
	ItemSubCat_Clothing_Facewear                       = 71,
	ItemSubCat_Clothing_Footwear                       = 72,
	ItemSubCat_Clothing_Headwear                       = 73,
	ItemSubCat_Clothing_Jewellery                      = 74,
	ItemSubCat_Clothing_NotForRelease                  = 75,
	ItemSubCat_Clothing_Test                           = 76,
	ItemSubCat_Clothing_Top                            = 77,
	ItemSubCat_Clothing_Trousers                       = 78,
	ItemSubCat_Clothing_Underwear                      = 79,
	ItemSubCat_FnMod_Character                         = 80,
	ItemSubCat_FnMod_Vehicle                           = 81,
	ItemSubCat_FnMod_Weapon                            = 82,
	ItemSubCat_Vehicle_Car                             = 83,
	ItemSubCat_Vehicle_Truck                           = 84,
	ItemSubCat_Vehicle_Van                             = 85,
	ItemSubCat_Weapon_AssaultRifle                     = 86,
	ItemSubCat_Weapon_CrowdControl                     = 87,
	ItemSubCat_Weapon_GrenadeLauncher                  = 88,
	ItemSubCat_Weapon_HeavyMachineGun                  = 89,
	ItemSubCat_Weapon_RocketLauncher                   = 90,
	ItemSubCat_Weapon_Secondary                        = 91,
	ItemSubCat_Weapon_SemiAutoRifle                    = 92,
	ItemSubCat_Weapon_Shotgun                          = 93,
	ItemSubCat_Weapon_SniperRifle                      = 94,
	ItemSubCat_Weapon_SubMachineGun                    = 95,
	etShopUIFilter_MAX                                 = 96
};*/

// Enum APBGame.cSDD.etShopUIShop
/*enum etShopUIShop
{
	None                                               = 0,
	Armory                                             = 1,
	Armory_CustomisableCharacter_FnMod                 = 2,
	Armory_CustomisableVehicle                         = 3,
	Armory_CustomisableVehicle_FnMod                   = 4,
	Armory_CustomisableWeapon                          = 5,
	Armory_CustomisableWeapon_FnMod                    = 6,
	Deploy_SelectEquipment                             = 7,
	Deploy_SelectOutfit                                = 8,
	Deploy_SelectSymbol                                = 9,
	Deploy_SelectTheme                                 = 10,
	Deploy_SelectVehicle                               = 11,
	Deploy_SelectWeapon_Grenade                        = 12,
	Deploy_SelectWeapon_Primary                        = 13,
	Deploy_SelectWeapon_Secondary                      = 14,
	Fixer_BuyItems                                     = 15,
	Fixer_BuyUnlocks                                   = 16,
	Fixer_Sell                                         = 17,
	Garage_Store                                       = 18,
	Inventory_Browse                                   = 19,
	Inventory_PurchaseAmmo                             = 20,
	Inventory_SelectAnyItem                            = 21,
	Inventory_SelectBindableCharacter                  = 22,
	Inventory_SelectBindableVehicle                    = 23,
	Inventory_SelectEquipment                          = 24,
	Inventory_SelectOutfit                             = 25,
	Inventory_SelectSellable                           = 26,
	Inventory_SelectSong                               = 27,
	Inventory_SelectSymbol                             = 28,
	Inventory_SelectTheme                              = 29,
	Inventory_SelectVehicle                            = 30,
	Inventory_SelectWeaponGrenade                      = 31,
	Inventory_SelectWeaponPrimary                      = 32,
	Inventory_SelectWeaponSecondary                    = 33,
	MusicStudio_ThemesAndSongs                         = 34,
	Wardrobe_Store                                     = 35,
	etShopUIShop_MAX                                   = 36
};*/

// Enum APBGame.cSDD.etStreetName
/*enum etStreetName
{
	TestStreet001                                      = 0,
	BrownStreet                                        = 1,
	GreenRoad                                          = 2,
	BrownStreet_GreenRoad                              = 3,
	FinancialShianxi                                   = 4,
	FinancialEmpire                                    = 5,
	FinancialMain                                      = 6,
	FinancialShianxiEmpire                             = 7,
	FinancialShianxiMain                               = 8,
	FinancialEmpireMain                                = 9,
	FinancialBreakwater                                = 10,
	FinancialBank                                      = 11,
	FinancialExchange                                  = 12,
	FinancialSilver                                    = 13,
	FinancialBorder                                    = 14,
	FinancialCanal                                     = 15,
	FinancialBeach                                     = 16,
	FinancialHook                                      = 17,
	FinancialBroadway                                  = 18,
	FinancialCross                                     = 19,
	FinancialJuniper                                   = 20,
	FinancialSchulz                                    = 21,
	FinancialSipja                                     = 22,
	FinancialGwangalli                                 = 23,
	FinancialValencia                                  = 24,
	FinancialConstitution                              = 25,
	FinancialPromenade                                 = 26,
	FinancialHallassan                                 = 27,
	FinancialMalaga                                    = 28,
	FinancialCommercial                                = 29,
	FinancialUnion                                     = 30,
	FinancialMerchant                                  = 31,
	FinancialMercy                                     = 32,
	FinancialSurgeons                                  = 33,
	FinancialCervantes                                 = 34,
	FinancialFortune                                   = 35,
	FinancialGresty                                    = 36,
	FinancialIncheon                                   = 37,
	FinancialDonnaeko                                  = 38,
	FinancialParkway                                   = 39,
	FinancialJalgachi                                  = 40,
	WaterfrontSandford                                 = 41,
	WaterfrontCalledelmar                              = 42,
	WaterfrontApsan                                    = 43,
	WaterfrontMarket                                   = 44,
	WaterfrontJoseon                                   = 45,
	WaterfrontPortland                                 = 46,
	WaterfrontTrackside                                = 47,
	WaterfrontLading                                   = 48,
	WaterfrontPalacio                                  = 49,
	WaterfrontPlayadelPalacio                          = 50,
	WaterfrontTaegu                                    = 51,
	WaterfrontCaminodelMar                             = 52,
	WaterfrontColony                                   = 53,
	WaterfrontChandler                                 = 54,
	WaterfrontGranada                                  = 55,
	WaterfrontOldFleet                                 = 56,
	WaterfrontMarshals                                 = 57,
	WaterfrontDock                                     = 58,
	WaterfrontSpica                                    = 59,
	WaterfrontCharter                                  = 60,
	WaterfrontUlsan                                    = 61,
	WaterfrontNewHaven                                 = 62,
	WaterfrontCadieux                                  = 63,
	WaterfrontPiper                                    = 64,
	WaterfrontBaywater                                 = 65,
	WaterfrontSalina                                   = 66,
	WaterfrontMillennium                               = 67,
	WaterfrontMcArthur                                 = 68,
	WaterfrontNeritina                                 = 69,
	WaterfrontFortuna                                  = 70,
	WaterfrontCaminodelaBlanca                         = 71,
	WaterfrontLorquin                                  = 72,
	WaterfrontSevilla                                  = 73,
	WaterfrontDeion                                    = 74,
	WaterfrontViaCasaSoleado                           = 75,
	WaterfrontFarve                                    = 76,
	WaterfrontHaeinsa                                  = 77,
	WaterfrontAbrams                                   = 78,
	WaterfrontWard                                     = 79,
	WaterfrontPrentiss                                 = 80,
	FinancialEasy                                      = 81,
	Financial_X_BreakwaterMain                         = 82,
	Financia_X_BankBreakwater                          = 83,
	Financial_X_BankExchange                           = 84,
	Financial_X_BankSilver                             = 85,
	Financial_X_CanalExchange                          = 86,
	Financial_X_CanalExchangeBorder                    = 87,
	Financial_X_BorderHook                             = 88,
	Financial_X_SchulzHook                             = 89,
	Financial_X_EmpireSilverExchange                   = 90,
	Financial_X_BeachMain                              = 91,
	Financial_X_JuniperBeach                           = 92,
	Financial_X_HallasanJuniper                        = 93,
	Financial_X_MalagaJuniper                          = 94,
	Financial_X_HallasanFortune                        = 95,
	Financial_X_MalagaFortune                          = 96,
	Financial_X_DonnaekoFortune                        = 97,
	Financial_X_DonnaekoMerchant                       = 98,
	Financial_X_JuniperMain                            = 99,
	Financial_X_ShianxiSchulzConstitution              = 100,
	Financial_X_GrestyFortune                          = 101,
	Financial_X_GrestyMerchant                         = 102,
	Financial_X_GrestyUnion                            = 103,
	Financial_X_GrestyEasy                             = 104,
	Financial_X_MerchantUnion                          = 105,
	Financial_X_ValenciaMerchant                       = 106,
	Financial_X_MerchantSurgeon                        = 107,
	Financial_X_PromenadeMerchant                      = 108,
	Financial_X_PromenadeValencia                      = 109,
	Financial_X_SilverCross                            = 110,
	Financial_X_PromenadeFortuneUnion                  = 111,
	Financial_X_ValenciaMercy                          = 112,
	Financial_X_ValenciaParkway                        = 113,
	Financial_X_ValenciaEasy                           = 114,
	Financial_X_PromenadeConstitution                  = 115,
	Financial_X_BorderPromenade                        = 116,
	Financial_X_ValenciaPromenadeSilver                = 117,
	Financial_X_CervantesValencia                      = 118,
	Financial_X_SurgeonMercy                           = 119,
	Financial_X_BorderParkwayMercy                     = 120,
	Financial_X_CervantesIncheon                       = 121,
	Financial_X_IncheonParkway                         = 122,
	Financial_X_CervantesGwangalliJagalchi             = 123,
	Financial_X_GwangalliSipja                         = 124,
	Financial_X_SipjaCross                             = 125,
	Financial_X_BorderShianxi                          = 126,
	Financial_X_SilverShianxi                          = 127,
	Waterfront_X_SandfordDelMar                        = 128,
	Waterfront_X_JoseonTaeguDelMar                     = 129,
	Waterfront_X_TaeguCalledelMar                      = 130,
	Waterfront_X_JoseonTrackside                       = 131,
	Waterfront_X_JoseonMarket                          = 132,
	Waterfront_X_GranadaJoseon                         = 133,
	Waterfront_X_GranadaTrackside                      = 134,
	Waterfront_X_TaeguMarket                           = 135,
	Waterfront_X_CaminodelMarMarshals                  = 136,
	Waterfront_X_CalledelMarMarshals                   = 137,
	Waterfront_X_SandfordDelMarApsan                   = 138,
	Waterfront_X_ApsanCalledelMar                      = 139,
	Waterfront_X_TaeguApsan                            = 140,
	Waterfront_X_PortlandPalacio                       = 141,
	Waterfront_X_delPalacioPalacio                     = 142,
	Waterfront_X_delPalacioDelMar                      = 143,
	Waterfront_X_ColonyDelMar                          = 144,
	Waterfront_X_TaeguColony                           = 145,
	Waterfront_X_TaeguPortlandJoseon                   = 146,
	Waterfront_X_PortlandDelMar                        = 147,
	Waterfront_X_ColonyGranada                         = 148,
	Waterfront_X_GranadaChandler                       = 149,
	Waterfront_X_ChandlerTaegu                         = 150,
	Waterfront_X_ChandlerDelMar                        = 151,
	Waterfront_X_DockDelMar                            = 152,
	Waterfront_X_NewHavenDock                          = 153,
	Waterfront_X_DockSpica                             = 154,
	Waterfront_X_SpicaCharter                          = 155,
	Waterfront_X_MillenniumTaeguDelMar                 = 156,
	Waterfront_X_GranadaPiper                          = 157,
	Waterfront_X_SalinaGranada                         = 158,
	Waterfront_X_SalinaPiper                           = 159,
	Waterfront_X_SalinaCadieux                         = 160,
	Waterfront_X_CadieuxNewHaven                       = 161,
	Waterfront_X_UlsanDockMillennium                   = 162,
	Waterfront_X_MillenniumCharter                     = 163,
	Waterfront_X_MillenniumSpica                       = 164,
	Waterfront_X_OldFleetMillennium                    = 165,
	Waterfront_X_McArthurMillennium                    = 166,
	Waterfront_X_SevillaMillennium                     = 167,
	Waterfront_X_MillenniumPrentissNertinaWard         = 168,
	Waterfront_X_HaeinsaWard                           = 169,
	Waterfront_X_CadieuxUlsan                          = 170,
	Waterfront_X_UlsanOldFleet                         = 171,
	Waterfront_X_BaywaterUlsan                         = 172,
	Waterfront_X_McArthurUlsanNertina                  = 173,
	Waterfront_X_NertinaFortuna                        = 174,
	Waterfront_X_FortunaLaBlanca                       = 175,
	Waterfront_X_LorquinLaBlanca                       = 176,
	Waterfront_X_SalinaLorquin                         = 177,
	Waterfront_X_SevillaLorquin                        = 178,
	Waterfront_X_McArthurLaBlanca                      = 179,
	Waterfront_X_NewHavenBaywaterLaBlanca              = 180,
	Waterfront_X_SalinaSevilla                         = 181,
	Waterfront_X_McArthurSalina                        = 182,
	Waterfront_X_SevillaSoleadoLaBlanca                = 183,
	Waterfront_X_SalinaSevillaPrentiss                 = 184,
	Waterfront_X_SevillaNertina                        = 185,
	Waterfront_X_FarveSoleado                          = 186,
	Waterfront_X_DeionSoleado                          = 187,
	Waterfront_X_NertinaDeion                          = 188,
	Waterfront_X_FarvePrentiss                         = 189,
	Waterfront_X_PrentissSoleadoWard                   = 190,
	Waterfront_X_HaeinsaWard1                          = 191,
	Waterfront_X_HaeinsaWard2                          = 192,
	Waterfront_X_PrentissAbrams                        = 193,
	Waterfront_X_HaeinsaAbrams                         = 194,
	etStreetName_MAX                                   = 195
};*/

// Enum APBGame.cSDD.etSymbolEditorMenuEntry
/*enum etSymbolEditorMenuEntry
{
	Root_                                              = 0,
	SymbolEditor_Delete                                = 1,
	SymbolEditor_Load                                  = 2,
	SymbolEditor_Save                                  = 3,
	SymbolEditor_Rename                                = 4,
	etSymbolEditorMenuEntry_MAX                        = 5
};*/

// Enum APBGame.cSDD.etTaskItemCategory
/*enum etTaskItemCategory
{
	None                                               = 0,
	Electrical                                         = 1,
	Evidence                                           = 2,
	Financial                                          = 3,
	Generic                                            = 4,
	Hazard                                             = 5,
	Baggage                                            = 6,
	Personal                                           = 7,
	Test_Briefcase                                     = 8,
	Test_Cash                                          = 9,
	Test_General                                       = 10,
	Test_HouseholdTech                                 = 11,
	Test_Jewellery                                     = 12,
	Test_PersonalTech                                  = 13,
	Test_Security                                      = 14,
	Test_Vehicle                                       = 15,
	Storage                                            = 16,
	etTaskItemCategory_MAX                             = 17
};*/

// Enum APBGame.cSDD.etTaskItemTag
/*enum etTaskItemTag
{
	None                                               = 0,
	Bag                                                = 1,
	Biohazard                                          = 2,
	Bonds                                              = 3,
	Briefcase                                          = 4,
	Cash                                               = 5,
	Clothing                                           = 6,
	Drugs                                              = 7,
	Electrical                                         = 8,
	Equipment                                          = 9,
	Evidence                                           = 10,
	Generic                                            = 11,
	Gold                                               = 12,
	Jewellery                                          = 13,
	LargeBox                                           = 14,
	PDA                                                = 15,
	Phone                                              = 16,
	Safe                                               = 17,
	SmallBox                                           = 18,
	Weapons                                            = 19,
	etTaskItemTag_MAX                                  = 20
};*/

// Enum APBGame.cSDD.etTaskItemVariety
/*enum etTaskItemVariety
{
	None                                               = 0,
	BriefcaseAluminium                                 = 1,
	BriefcaseSatchel                                   = 2,
	BriefcaseShiny                                     = 3,
	BriefcaseStandard                                  = 4,
	CarryCase                                          = 5,
	CarStereo                                          = 6,
	CashBox_A                                          = 7,
	CashBox_B                                          = 8,
	Laptop_LowSpec                                     = 9,
	Laptop_MedSpec                                     = 10,
	Lg_GenericBox                                      = 11,
	Microwave                                          = 12,
	MobilePhone_BrandA                                 = 13,
	MobilePhone_BrandB                                 = 14,
	MobilePhone_BrandC                                 = 15,
	MobilePhone_BrandD                                 = 16,
	MoneyBag                                           = 17,
	MultiPickup                                        = 18,
	Necklace_A                                         = 19,
	Necklace_B                                         = 20,
	Necklace_C                                         = 21,
	BankNoteBundle                                     = 22,
	PDA_A                                              = 23,
	PDA_B                                              = 24,
	Safe                                               = 25,
	SmallGenericBox                                    = 26,
	TV_LargeCRT                                        = 27,
	CarryBag                                           = 28,
	BearerBonds                                        = 29,
	BiohazardBarrel                                    = 30,
	BiohazardCanister                                  = 31,
	Camcorder                                          = 32,
	EvidenceBag                                        = 33,
	HardDrive                                          = 34,
	PlasticCrate                                       = 35,
	NuclearMaterial                                    = 36,
	PCCase                                             = 37,
	PetCarrier                                         = 38,
	GunCase                                            = 39,
	TreasureChest                                      = 40,
	GuitarCase                                         = 41,
	OrganTransport                                     = 42,
	PortfolioCase                                      = 43,
	AntistaticBag                                      = 44,
	DVDCase                                            = 45,
	GoldBar                                            = 46,
	WhitePowder                                        = 47,
	BoltCutters                                        = 48,
	Crowbar                                            = 49,
	CuttingTorch                                       = 50,
	ExplosivesLevel1                                   = 51,
	ExplosivesLevel2                                   = 52,
	ExplosivesLevel3                                   = 53,
	ExplosivesLevel4                                   = 54,
	PoliceBadge                                        = 55,
	Sword                                              = 56,
	etTaskItemVariety_MAX                              = 57
};*/

// Enum APBGame.cSDD.etTaskTargetCheckpoint
/*enum etTaskTargetCheckpoint
{
	Checkpoint_SmallDropOff                            = 0,
	Checkpoint_VehicleDropOff                          = 1,
	Checkpoint_LargePedestrianRendezvous               = 2,
	Checkpoint_LargeVehicleRendezvous                  = 3,
	Checkpoint_Small                                   = 4,
	Checkpoint_Race                                    = 5,
	Checkpoint_VIPTokenSpawn                           = 6,
	Checkpoint_SafeLocation_Q208_Demo                  = 7,
	Dropoff_Alley                                      = 8,
	Dropoff_Bar                                        = 9,
	Checkpoint_DropOff_Q208_Demo                       = 10,
	Dropoff_Carpark                                    = 11,
	Dropoff_Office                                     = 12,
	Dropoff_Hideout                                    = 13,
	Dropoff_Lockup                                     = 14,
	Dropoff_Nightclub                                  = 15,
	Dropoff_Restaurant                                 = 16,
	Dropoff_Shop                                       = 17,
	Checkpoint_Alley                                   = 18,
	Checkpoint_Bar                                     = 19,
	Checkpoint_Carpark                                 = 20,
	Checkpoint_Office                                  = 21,
	Checkpoint_Hideout                                 = 22,
	Checkpoint_Lockup                                  = 23,
	Checkpoint_Nightclub                               = 24,
	Checkpoint_Restaurant                              = 25,
	Checkpoint_Shop                                    = 26,
	VehicleDropoff_Alley                               = 27,
	VehicleDropoff_Carpark                             = 28,
	VehicleDropoff_Hideout                             = 29,
	VehicleDropoff_Lockup                              = 30,
	VehicleCheckpoint_Alley                            = 31,
	VehicleCheckpoint_Carpark                          = 32,
	VehicleCheckpoint_Hideout                          = 33,
	VehicleCheckpoint_Lockup                           = 34,
	Checkpoint_LargePedestrianRendezvous_Difficult     = 35,
	Checkpoint_SmallDropOff_Difficult                  = 36,
	Checkpoint_SmallDropOff_Ladderaccess               = 37,
	Checkpoint_SmallDropOff_Enforcer                   = 38,
	Checkpoint_SmallDropOff_Criminal                   = 39,
	etTaskTargetCheckpoint_MAX                         = 40
};*/

// Enum APBGame.cSDD.etTaskTargetProp
/*enum etTaskTargetProp
{
	A_None                                             = 0,
	Aerials                                            = 1,
	Alarms                                             = 2,
	ArsonDoor                                          = 3,
	BackDoor                                           = 4,
	BackDoor_Arson                                     = 5,
	BankMachine                                        = 6,
	BusShelter                                         = 7,
	CommercialWindows                                  = 8,
	CommercialWindows_Arson                            = 9,
	Container                                          = 10,
	Crate1LONGcrate                                    = 11,
	Crate2TALLcrate                                    = 12,
	Doors_Residential1                                 = 13,
	Doorway                                            = 14,
	ElectricalBox                                      = 15,
	FinancialPortacabins                               = 16,
	FinancialPortacabinsLarge                          = 17,
	FinancialTicketMachine                             = 18,
	FinancialVendingStand                              = 19,
	FireHydrant                                        = 20,
	FruitStall                                         = 21,
	GarageDoorsSegmented                               = 22,
	GarageDoorsSegmented_NonRamRaid                    = 23,
	IndustrialAirConditioningUnit                      = 24,
	InvisibleProp                                      = 25,
	Mailbox                                            = 26,
	NewspaperBox                                       = 27,
	NewsStand                                          = 28,
	ParkBench                                          = 29,
	ParkingMeter                                       = 30,
	PayPhone                                           = 31,
	Prop_ElectricalBox                                 = 32,
	Prop_FruitStall                                    = 33,
	Prop_MailBox                                       = 34,
	Prop_NewspaperVending                              = 35,
	Prop_NewsStand                                     = 36,
	Prop_ParkingMeter                                  = 37,
	Prop_PhoneBooth                                    = 38,
	Prop_VendingMachine                                = 39,
	SatelliteDishes                                    = 40,
	SatelliteDishes_Feature                            = 41,
	SecurityCamera                                     = 42,
	SecurityCamera_Feature                             = 43,
	ShopFront_Bank                                     = 44,
	ShopFront_ClothingStore                            = 45,
	ShopFront_ClothingStore_NonRamRaid                 = 46,
	ShopFront_Doors                                    = 47,
	ShopFront_DrugStore                                = 48,
	ShopFront_DrugStore_NonRamRaid                     = 49,
	ShopFront_Electronics                              = 50,
	ShopFront_Electronics_GDC                          = 51,
	ShopFront_Electronics_NonRamRaid                   = 52,
	ShopFront_GarageDoor                               = 53,
	ShopFront_Interior                                 = 54,
	ShopFront_Jewellers                                = 55,
	ShopFront_Jewellery                                = 56,
	ShopFront_Jewellery_NonRamRaid                     = 57,
	ShopFront_MiniMart                                 = 58,
	VendingMachine_Drinks                              = 59,
	VendingMachine_Snack                               = 60,
	WarehousePallet                                    = 61,
	Yacht                                              = 62,
	etTaskTargetProp_MAX                               = 63
};*/

// Enum APBGame.cSDD.etTaskTargetType
/*enum etTaskTargetType
{
	A_None                                             = 0,
	Aerials                                            = 1,
	Alarms                                             = 2,
	ArsonDoor                                          = 3,
	BackDoor                                           = 4,
	BackDoor_Arson                                     = 5,
	BankMachine                                        = 6,
	BusShelter                                         = 7,
	Checkpoint_Alley                                   = 8,
	Checkpoint_Bar                                     = 9,
	Checkpoint_Carpark                                 = 10,
	Checkpoint_DropOff_Q208_Demo                       = 11,
	Checkpoint_Hideout                                 = 12,
	Checkpoint_LargePedestrianRendezvous               = 13,
	Checkpoint_LargePedestrianRendezvous_Difficult     = 14,
	Checkpoint_LargeVehicleRendezvous                  = 15,
	Checkpoint_Lockup                                  = 16,
	Checkpoint_Nightclub                               = 17,
	Checkpoint_Office                                  = 18,
	Checkpoint_Race                                    = 19,
	Checkpoint_Restaurant                              = 20,
	Checkpoint_SafeLocation_Q208_Demo                  = 21,
	Checkpoint_Shop                                    = 22,
	Checkpoint_Small                                   = 23,
	Checkpoint_SmallDropOff                            = 24,
	Checkpoint_SmallDropOff_Criminal                   = 25,
	Checkpoint_SmallDropOff_Difficult                  = 26,
	Checkpoint_SmallDropOff_Enforcer                   = 27,
	Checkpoint_SmallDropOff_Ladderaccess               = 28,
	Checkpoint_VehicleDropOff                          = 29,
	Checkpoint_VIPTokenSpawn                           = 30,
	CommercialWindows                                  = 31,
	CommercialWindows_Arson                            = 32,
	Container                                          = 33,
	Crate1LONGcrate                                    = 34,
	Crate2TALLcrate                                    = 35,
	Doors_Residential1                                 = 36,
	Doorway                                            = 37,
	Dropoff_Alley                                      = 38,
	Dropoff_Bar                                        = 39,
	Dropoff_Carpark                                    = 40,
	Dropoff_Hideout                                    = 41,
	Dropoff_Lockup                                     = 42,
	Dropoff_Nightclub                                  = 43,
	Dropoff_Office                                     = 44,
	Dropoff_Restaurant                                 = 45,
	Dropoff_Shop                                       = 46,
	ElectricalBox                                      = 47,
	FinancialPortacabins                               = 48,
	FinancialPortacabinsLarge                          = 49,
	FinancialTicketMachine                             = 50,
	FinancialVendingStand                              = 51,
	FireHydrant                                        = 52,
	FruitStall                                         = 53,
	GarageDoorsSegmented                               = 54,
	GarageDoorsSegmented_NonRamRaid                    = 55,
	Graffiti_Default                                   = 56,
	IndustrialAirConditioningUnit                      = 57,
	InvisibleProp                                      = 58,
	Mailbox                                            = 59,
	NewspaperBox                                       = 60,
	NewsStand                                          = 61,
	NPC_Lower_Female                                   = 62,
	NPC_Lower_Male                                     = 63,
	NPC_Standard_Female                                = 64,
	NPC_Standard_Male                                  = 65,
	NPC_Urban_Female                                   = 66,
	NPC_Urban_Male                                     = 67,
	ParkBench                                          = 68,
	ParkedVehicleSpawn                                 = 69,
	ParkingMeter                                       = 70,
	PayPhone                                           = 71,
	Prop_ElectricalBox                                 = 72,
	Prop_FruitStall                                    = 73,
	Prop_MailBox                                       = 74,
	Prop_NewspaperVending                              = 75,
	Prop_NewsStand                                     = 76,
	Prop_ParkingMeter                                  = 77,
	Prop_PhoneBooth                                    = 78,
	Prop_VendingMachine                                = 79,
	SatelliteDishes                                    = 80,
	SatelliteDishes_Feature                            = 81,
	SecurityCamera                                     = 82,
	SecurityCamera_Feature                             = 83,
	ShopFront_Bank                                     = 84,
	ShopFront_ClothingStore                            = 85,
	ShopFront_ClothingStore_NonRamRaid                 = 86,
	ShopFront_Doors                                    = 87,
	ShopFront_DrugStore                                = 88,
	ShopFront_DrugStore_NonRamRaid                     = 89,
	ShopFront_Electronics                              = 90,
	ShopFront_Electronics_GDC                          = 91,
	ShopFront_Electronics_NonRamRaid                   = 92,
	ShopFront_GarageDoor                               = 93,
	ShopFront_Interior                                 = 94,
	ShopFront_Jewellers                                = 95,
	ShopFront_Jewellery                                = 96,
	ShopFront_Jewellery_NonRamRaid                     = 97,
	ShopFront_MiniMart                                 = 98,
	TaskItemSpawn                                      = 99,
	VehicleCheckpoint_Alley                            = 100,
	VehicleCheckpoint_Carpark                          = 101,
	VehicleCheckpoint_Hideout                          = 102,
	VehicleCheckpoint_Lockup                           = 103,
	VehicleDropoff_Alley                               = 104,
	VehicleDropoff_Carpark                             = 105,
	VehicleDropoff_Hideout                             = 106,
	VehicleDropoff_Lockup                              = 107,
	VendingMachine_Drinks                              = 108,
	VendingMachine_Snack                               = 109,
	WarehousePallet                                    = 110,
	Yacht                                              = 111,
	etTaskTargetType_MAX                               = 112
};*/

// Enum APBGame.cSDD.etUIInteractionPoint
/*enum etUIInteractionPoint
{
	None                                               = 0,
	Garage                                             = 1,
	MarketPlace                                        = 2,
	MusicStudio                                        = 3,
	Persona                                            = 4,
	SymbolDesigner                                     = 5,
	Wardrobe                                           = 6,
	etUIInteractionPoint_MAX                           = 7
};*/

// Enum APBGame.cSDD.etUIStyle
/*enum etUIStyle
{
	Default                                            = 0,
	HUDMessage                                         = 1,
	HUDMessage01                                       = 2,
	HUDMessage02                                       = 3,
	etUIStyle_MAX                                      = 4
};*/

// Enum APBGame.cSDD.etVehicleAudioPart
/*enum etVehicleAudioPart
{
	AudioAmp1                                          = 0,
	AudioAmp2                                          = 1,
	AudioAmp3                                          = 2,
	AudioAmp4                                          = 3,
	AudioAmp5                                          = 4,
	AudioAmpLC1                                        = 5,
	AudioAmpLC2                                        = 6,
	AudioDumpValve1                                    = 7,
	AudioDumpValve10                                   = 8,
	AudioDumpValve11                                   = 9,
	AudioDumpValve12                                   = 10,
	AudioDumpValve13                                   = 11,
	AudioDumpValve14                                   = 12,
	AudioDumpValve15                                   = 13,
	AudioDumpValve2                                    = 14,
	AudioDumpValve3                                    = 15,
	AudioDumpValve4                                    = 16,
	AudioDumpValve5                                    = 17,
	AudioDumpValve6                                    = 18,
	AudioDumpValve7                                    = 19,
	AudioDumpValve8                                    = 20,
	AudioDumpValve9                                    = 21,
	AudioEng_2drCoupe                                  = 22,
	AudioEng_Carry_Crim_01                             = 23,
	AudioEng_Carry_Crim_02                             = 24,
	AudioEng_Carry_Crim_03                             = 25,
	AudioEng_Carry_Enf_01                              = 26,
	AudioEng_Carry_Enf_02                              = 27,
	AudioEng_Carry_Enf_03                              = 28,
	AudioEng_ClassicLowRider                           = 29,
	AudioEng_ClassicMuscle                             = 30,
	AudioEng_Comp_Crim_01                              = 31,
	AudioEng_Comp_Enf_01                               = 32,
	AudioEng_Comp_Enf_02                               = 33,
	AudioEng_Comp_Enf_03                               = 34,
	AudioEng_Comp_Crim_02                              = 35,
	AudioEng_Comp_Crim_03                              = 36,
	AudioEng_Convertable                               = 37,
	AudioEng_ExecSaloon                                = 38,
	AudioEng_KingCab                                   = 39,
	AudioEng_Perf_Crim_01                              = 40,
	AudioEng_Perf_Crim_02                              = 41,
	AudioEng_Perf_Crim_03                              = 42,
	AudioEng_Perf_Enf_01                               = 43,
	AudioEng_Perf_Enf_02                               = 44,
	AudioEng_Perf_Enf_03                               = 45,
	AudioEng_Pickup                                    = 46,
	AudioEng_Roadster                                  = 47,
	AudioEng_SUV                                       = 48,
	AudioEng_SUV_Sports                                = 49,
	AudioEng_Taxi                                      = 50,
	AudioEng_Truck01                                   = 51,
	AudioEng_TruckCurtain                              = 52,
	AudioEng_Utility2drVan                             = 53,
	AudioEng_UtilityEstate                             = 54,
	AudioEng_UtilityEstateVan                          = 55,
	AudioEng_UtilityHatchback                          = 56,
	AudioEng_UtilitySaloon                             = 57,
	AudioEng_Van01                                     = 58,
	AudioEng_VanAmbulance                              = 59,
	AudioEng_VanArmoured                               = 60,
	AudioEng_VanStandard                               = 61,
	AudioEngine09                                      = 62,
	AudioEngine10                                      = 63,
	AudioEx_2drCoupe                                   = 64,
	AudioEx_2drVan                                     = 65,
	AudioEx_Carry_Crim_01                              = 66,
	AudioEx_Carry_Crim_02                              = 67,
	AudioEx_Carry_Crim_03                              = 68,
	AudioEx_Carry_Enf_01                               = 69,
	AudioEx_Carry_Enf_02                               = 70,
	AudioEx_ClassicLowRider                            = 71,
	AudioEx_ClassicMuscle                              = 72,
	AudioEx_Comp_Crim_01                               = 73,
	AudioEx_Comp_Enf_01                                = 74,
	AudioEx_Comp_Enf_03                                = 75,
	AudioEx_Comp_Crim_02                               = 76,
	AudioEx_Comp_Crim_03                               = 77,
	AudioEx_Comp_Enf_02                                = 78,
	AudioEx_Convertable                                = 79,
	AudioEx_ExecSaloon                                 = 80,
	AudioEx_KingCab                                    = 81,
	AudioEx_Perf_Crim_01                               = 82,
	AudioEx_Perf_Crim_02                               = 83,
	AudioEx_Perf_Crim_03                               = 84,
	AudioEx_Perf_Enf_01                                = 85,
	AudioEx_Perf_Enf_02                                = 86,
	AudioEx_Perf_Enf_03                                = 87,
	AudioEx_Pickup                                     = 88,
	AudioEx_Roadster                                   = 89,
	AudioEx_SUV                                        = 90,
	AudioEx_SUV_Sports                                 = 91,
	AudioEx_Taxi                                       = 92,
	AudioEx_Truck01                                    = 93,
	AudioEx_TruckCurtain                               = 94,
	AudioEx_UtilityEstate                              = 95,
	AudioEx_UtilityEstateVan                           = 96,
	AudioEx_UtilityHatchBack                           = 97,
	AudioEx_UtilitySaloon                              = 98,
	AudioEx_Van01                                      = 99,
	AudioEx_VanAmbulance                               = 100,
	AudioEx_VanArmoured                                = 101,
	AudioEx_VanStandard                                = 102,
	AudioExhaust10                                     = 103,
	AudioExhaustPop1                                   = 104,
	AudioGearChange1                                   = 105,
	AudioHorn1                                         = 106,
	AudioHorn10                                        = 107,
	AudioHorn11                                        = 108,
	AudioHorn12                                        = 109,
	AudioHorn13                                        = 110,
	AudioHorn14                                        = 111,
	AudioHorn15                                        = 112,
	AudioHorn2                                         = 113,
	AudioHorn3                                         = 114,
	AudioHorn4                                         = 115,
	AudioHorn5                                         = 116,
	AudioHorn6                                         = 117,
	AudioHorn7                                         = 118,
	AudioHorn8                                         = 119,
	AudioHorn9                                         = 120,
	AudioSiren04                                       = 121,
	AudioSiren05                                       = 122,
	AudioSiren06                                       = 123,
	AudioSiren07                                       = 124,
	AudioSiren1                                        = 125,
	AudioSiren10                                       = 126,
	AudioSiren2                                        = 127,
	AudioSiren3                                        = 128,
	AudioSpeaker1                                      = 129,
	AudioSpeaker2                                      = 130,
	AudioSpeaker3                                      = 131,
	AudioSpeaker4                                      = 132,
	AudioSpeaker5                                      = 133,
	AudioSpeakerLC1                                    = 134,
	AudioSpeakerLC2                                    = 135,
	AudioTransmission1                                 = 136,
	AudioTransmission10                                = 137,
	AudioTransmission11                                = 138,
	AudioTransmission2                                 = 139,
	AudioTransmission3                                 = 140,
	AudioTransmission4                                 = 141,
	AudioTransmission5                                 = 142,
	AudioTransmission6                                 = 143,
	AudioTransmission7                                 = 144,
	AudioTransmission8                                 = 145,
	AudioTransmission9                                 = 146,
	AudioTurbo1                                        = 147,
	AudioTurbo10                                       = 148,
	AudioTurbo11                                       = 149,
	AudioTurbo2                                        = 150,
	AudioTurbo3                                        = 151,
	AudioTurbo4                                        = 152,
	AudioTurbo5                                        = 153,
	AudioTurbo6                                        = 154,
	AudioTurbo7                                        = 155,
	AudioTurbo8                                        = 156,
	AudioTurbo9                                        = 157,
	AudioEx_Carry_Enf_03                               = 158,
	etVehicleAudioPart_MAX                             = 159
};*/

// Enum APBGame.cSDD.etVehicleAudioPartDefaults
/*enum etVehicleAudioPartDefaults
{
	Ambient2DrCoupe                                    = 0,
	Ambient2DrVan                                      = 1,
	AmbientConvertible                                 = 2,
	AmbientHatchback                                   = 3,
	AmbientKingCab                                     = 4,
	AmbientPickup                                      = 5,
	AmbientSaloon                                      = 6,
	AmbientSUV                                         = 7,
	AmbientTruck                                       = 8,
	AmbientUtility_ClassicMuscle                       = 9,
	AmbientUtility_ExecSaloon                          = 10,
	AmbientUtility_LowRider                            = 11,
	AmbientUtility_SportsSUV                           = 12,
	AmbientUtility_Taxi                                = 13,
	AmbientUtilityEstate                               = 14,
	AmbientVanAmbulance                                = 15,
	AmbientVanArmoured                                 = 16,
	AmbientVanStandard                                 = 17,
	CriminalCarrying                                   = 18,
	CriminalCompact                                    = 19,
	CriminalPerformance                                = 20,
	Default4x4                                         = 21,
	DefaultCommuter1                                   = 22,
	DefaultCommuter2                                   = 23,
	EnforcerCarrying                                   = 24,
	EnforcerCompact                                    = 25,
	EnforcerPerformance                                = 26,
	AmbientUtility_Roadster                            = 27,
	etVehicleAudioPartDefaults_MAX                     = 28
};*/

// Enum APBGame.cSDD.etVehicleCategory
/*enum etVehicleCategory
{
	None                                               = 0,
	Car_Lowrider                                       = 1,
	Car_Muscle                                         = 2,
	Car_Roadster                                       = 3,
	Emergency                                          = 4,
	Car                                                = 5,
	Pickup                                             = 6,
	Security                                           = 7,
	SUV_Van                                            = 8,
	Taxi                                               = 9,
	Truck                                              = 10,
	Van                                                = 11,
	Car_ExecSaloon                                     = 12,
	etVehicleCategory_MAX                              = 13
};*/

// Enum APBGame.cSDD.etVehicleMenuEntry
/*enum etVehicleMenuEntry
{
	Menu_Customisable                                  = 0,
	Menu_Presets                                       = 1,
	Menu_MyVehicles                                    = 2,
	Menu_Components                                    = 3,
	Menu_Paint                                         = 4,
	Menu_Decals                                        = 5,
	Menu_LicencePlate                                  = 6,
	Customisation_                                     = 7,
	Root_                                              = 8,
	Menu_Rename                                        = 9,
	Menu_Deploy                                        = 10,
	Menu_Delete                                        = 11,
	Menu_Save                                          = 12,
	Management_                                        = 13,
	etVehicleMenuEntry_MAX                             = 14
};*/

// Enum APBGame.cSDD.etVehiclePlayerAnimationSet
/*enum etVehiclePlayerAnimationSet
{
	StandardCarFrontLeft                               = 0,
	StandardCarFrontRight                              = 1,
	StandardSUVFrontLeft                               = 2,
	StandardTruckFrontLeft                             = 3,
	StandardTruckFrontRight                            = 4,
	StandardVanFrontLeft                               = 5,
	StandardVanFrontRight                              = 6,
	VanSlideDoorBackLeft                               = 7,
	VanSlideDoorBackRight                              = 8,
	StandardSUVFrontRight                              = 9,
	VanTruckFrontLeft                                  = 10,
	VanTruckFrontRight                                 = 11,
	etVehiclePlayerAnimationSet_MAX                    = 12
};*/

// Enum APBGame.cSDD.etVehicleUIComponentInfo
/*enum etVehicleUIComponentInfo
{
	A_2DrCoupe_Badge                                   = 0,
	A_2DrCoupe_BumperFront                             = 1,
	A_2DrCoupe_BumperRear                              = 2,
	A_2DrCoupe_Door                                    = 3,
	A_2DrCoupe_FrontBase                               = 4,
	A_2DrCoupe_Grill                                   = 5,
	A_2DrCoupe_HeadLightGlass                          = 6,
	A_2DrCoupe_HeadLightMain                           = 7,
	A_2DrCoupe_Hood                                    = 8,
	A_2DrCoupe_PoliceLightsMain                        = 9,
	A_2DrCoupe_PoliceLightsSecondaryFront01            = 10,
	A_2DrCoupe_PoliceLightsSecondaryFront02            = 11,
	A_2DrCoupe_PoliceLightsSecondaryFront03            = 12,
	A_2DrCoupe_RoofExterior                            = 13,
	A_2DrCoupe_RoofGlass                               = 14,
	A_2DrCoupe_RoofInterior                            = 15,
	A_2DrCoupe_SeatsFront                              = 16,
	A_2DrCoupe_SideSkirts                              = 17,
	A_2DrCoupe_Spoiler                                 = 18,
	A_2DrCoupe_SteeringWheel                           = 19,
	A_2DrCoupe_TailLightsGlass                         = 20,
	A_2DrCoupe_TailLightsMain                          = 21,
	A_2DrCoupe_Wheels                                  = 22,
	A_2DrCoupe_WindowWipers                            = 23,
	A_2DrCoupe_WingMirrors                             = 24,
	A_2DrVan_Badge                                     = 25,
	A_2DrVan_BumperFront                               = 26,
	A_2DrVan_BumperRear                                = 27,
	A_2DrVan_Door                                      = 28,
	A_2DrVan_FrontBase                                 = 29,
	A_2DrVan_Grill                                     = 30,
	A_2DrVan_HeadlightGlass                            = 31,
	A_2DrVan_HeadLightMain                             = 32,
	A_2DrVan_Hood                                      = 33,
	A_2DrVan_PoliceLightsMain                          = 34,
	A_2DrVan_PoliceLightsSecondaryFront01              = 35,
	A_2DrVan_PoliceLightsSecondaryFront02              = 36,
	A_2DrVan_PoliceLightsSecondaryFront03              = 37,
	A_2DrVan_Roof                                      = 38,
	A_2DrVan_SeatsFront                                = 39,
	A_2DrVan_SideSkirts                                = 40,
	A_2DrVan_Spoiler                                   = 41,
	A_2DrVan_SteeringWheel                             = 42,
	A_2DrVan_TailLightsGlass                           = 43,
	A_2DrVan_TailLightsMain                            = 44,
	A_2DrVan_Wheels                                    = 45,
	A_2DrVan_WindowWipers                              = 46,
	A_2DrVan_WingMirrors                               = 47,
	A_4DrEstate_Wheels                                 = 48,
	A_ClassicMuscle_BrakeCalipers                      = 49,
	A_ClassicMuscle_BumperFront                        = 50,
	A_ClassicMuscle_BumperRear                         = 51,
	A_ClassicMuscle_Doors                              = 52,
	A_ClassicMuscle_Hood                               = 53,
	A_ClassicMuscle_PoliceLightsMain                   = 54,
	A_ClassicMuscle_PoliceLightsSecondary              = 55,
	A_ClassicMuscle_RoofExterior                       = 56,
	A_ClassicMuscle_SideSkirts                         = 57,
	A_ClassicMuscle_Spoiler                            = 58,
	A_ClassicMuscle_Wheels                             = 59,
	A_ClassicMuscle_WingMirrors                        = 60,
	A_Convertible_Front                                = 61,
	A_Convertible_FrontGlass                           = 62,
	A_Convertible_Global                               = 63,
	A_Convertible_Wheels                               = 64,
	A_Convertible_WindowWipersFront                    = 65,
	A_Default2Dr_Wheel                                 = 66,
	A_Default4Dr_Wheel                                 = 67,
	A_EstateVan_Badge                                  = 68,
	A_EstateVan_BumperFront                            = 69,
	A_EstateVan_BumperRear                             = 70,
	A_EstateVan_Door                                   = 71,
	A_EstateVan_FrontBase                              = 72,
	A_EstateVan_Grill                                  = 73,
	A_EstateVan_HeadLightsGlass                        = 74,
	A_EstateVan_HeadLightsMain                         = 75,
	A_EstateVan_Hood                                   = 76,
	A_EstateVan_PoliceLightsMain                       = 77,
	A_EstateVan_PoliceLightsSecondaryFront01           = 78,
	A_EstateVan_PoliceLightsSecondaryFront02           = 79,
	A_EstateVan_PoliceLightsSecondaryFront03           = 80,
	A_EstateVan_Roof                                   = 81,
	A_EstateVan_RoofRack                               = 82,
	A_EstateVan_SeatsFront                             = 83,
	A_EstateVan_SideSkirts                             = 84,
	A_EstateVan_Spoiler                                = 85,
	A_EstateVan_SteeringWheel                          = 86,
	A_EstateVan_TailLightsGlass                        = 87,
	A_EstateVan_TailLightsMain                         = 88,
	A_EstateVan_Wheels                                 = 89,
	A_EstateVan_WindowWipers                           = 90,
	A_EstateVan_WingMirrors                            = 91,
	A_ExecSaloon_BumperFront                           = 92,
	A_ExecSaloon_BumperRear                            = 93,
	A_ExecSaloon_Door                                  = 94,
	A_ExecSaloon_Hood                                  = 95,
	A_ExecSaloon_PolicelightsMain                      = 96,
	A_ExecSaloon_PolicelightsSecondary                 = 97,
	A_ExecSaloon_Roof                                  = 98,
	A_ExecSaloon_SideSkirts                            = 99,
	A_ExecSaloon_Spoiler                               = 100,
	A_ExecSaloon_Wheel                                 = 101,
	A_ExecSaloon_WingMirrors                           = 102,
	A_Hatchback_Badge                                  = 103,
	A_Hatchback_BumperFront                            = 104,
	A_Hatchback_BumperRear                             = 105,
	A_Hatchback_Door                                   = 106,
	A_Hatchback_FrontBase                              = 107,
	A_Hatchback_Grill                                  = 108,
	A_Hatchback_HeadLightGlass                         = 109,
	A_Hatchback_HeadLightMain                          = 110,
	A_Hatchback_Hood                                   = 111,
	A_Hatchback_PoliceLightsMain                       = 112,
	A_Hatchback_PoliceLightsSecondaryFront01           = 113,
	A_Hatchback_PoliceLightsSecondaryFront02           = 114,
	A_Hatchback_PoliceLightsSecondaryFront03           = 115,
	A_Hatchback_Roof                                   = 116,
	A_Hatchback_SeatsFront                             = 117,
	A_Hatchback_SideSkirts                             = 118,
	A_Hatchback_Spoiler                                = 119,
	A_Hatchback_SteeringWheel                          = 120,
	A_Hatchback_TailLightsGlass                        = 121,
	A_Hatchback_TailLightsMain                         = 122,
	A_Hatchback_Wheels                                 = 123,
	A_Hatchback_WindowWipers                           = 124,
	A_Hatchback_WingMirrors                            = 125,
	A_KingCab_BullBarsFront                            = 126,
	A_KingCab_BumperFront                              = 127,
	A_KingCab_BumperRear                               = 128,
	A_KingCab_Doors                                    = 129,
	A_KingCab_Exhaust                                  = 130,
	A_KingCab_Grill                                    = 131,
	A_KingCab_HeadLightsGlass                          = 132,
	A_KingCab_HeadLightsMain                           = 133,
	A_KingCab_Hood                                     = 134,
	A_KingCab_Indicator                                = 135,
	A_KingCab_PoliceLightsMain                         = 136,
	A_KingCab_PoliceLightsSecondary                    = 137,
	A_KingCab_RearProp                                 = 138,
	A_KingCab_RearPropGlass                            = 139,
	A_KingCab_RearRails                                = 140,
	A_KingCab_RollCage                                 = 141,
	A_KingCab_Roof                                     = 142,
	A_KingCab_SeatsFront                               = 143,
	A_KingCab_SideSkirts                               = 144,
	A_KingCab_SpotLights                               = 145,
	A_KingCab_SteeringWheel                            = 146,
	A_KingCab_TailLightsGlass                          = 147,
	A_KingCab_TailLightsMain                           = 148,
	A_KingCab_Trunk                                    = 149,
	A_KingCab_Wheels                                   = 150,
	A_KingCab_WindowWipers                             = 151,
	A_KingCab_WingMirrors                              = 152,
	A_LowRider_Badge                                   = 153,
	A_LowRider_BumperFront                             = 154,
	A_LowRider_BumperRear                              = 155,
	A_LowRider_Dashboard                               = 156,
	A_LowRider_Doors                                   = 157,
	A_LowRider_Exhausts                                = 158,
	A_LowRider_Grill                                   = 159,
	A_LowRider_HeadLightsMain                          = 160,
	A_LowRider_Hood                                    = 161,
	A_LowRider_InteriorProps                           = 162,
	A_LowRider_PoliceLights2nd                         = 163,
	A_LowRider_PoliceLightsMain                        = 164,
	A_LowRider_RoofExterior                            = 165,
	A_LowRider_RoofGlass                               = 166,
	A_LowRider_RoofInterior                            = 167,
	A_LowRider_SeatsFront                              = 168,
	A_LowRider_SideSkirts                              = 169,
	A_LowRider_Spoiler                                 = 170,
	A_LowRider_SteeringWheel                           = 171,
	A_LowRider_TaillightsMain                          = 172,
	A_LowRider_Wheel                                   = 173,
	A_LowRider_WindowWiperFront                        = 174,
	A_LowRider_WindowWiperRear                         = 175,
	A_LowRider_WingMirrors                             = 176,
	A_Pickup_BullBarsFront                             = 177,
	A_Pickup_BullBarsRear                              = 178,
	A_Pickup_BumperFront                               = 179,
	A_Pickup_BumperRear                                = 180,
	A_Pickup_Doors                                     = 181,
	A_Pickup_Exhaust                                   = 182,
	A_Pickup_Grill                                     = 183,
	A_Pickup_HeadLightsGlass                           = 184,
	A_Pickup_HeadLightsMain                            = 185,
	A_Pickup_Hood                                      = 186,
	A_Pickup_PoliceLightsMain                          = 187,
	A_Pickup_PoliceLightsSecondary                     = 188,
	A_Pickup_RearProp                                  = 189,
	A_Pickup_RearPropGlass                             = 190,
	A_Pickup_RearRails                                 = 191,
	A_Pickup_RollCage                                  = 192,
	A_Pickup_Roof                                      = 193,
	A_Pickup_SeatsFront                                = 194,
	A_Pickup_SideSkirts                                = 195,
	A_Pickup_SpotLamps                                 = 196,
	A_Pickup_SteeringWheel                             = 197,
	A_Pickup_TailLightsGlass                           = 198,
	A_Pickup_TailLightsMain                            = 199,
	A_Pickup_Trunk                                     = 200,
	A_Pickup_Wheels                                    = 201,
	A_Pickup_WindowWipers                              = 202,
	A_Pickup_WingMirrors                               = 203,
	A_Roadster_Badge                                   = 204,
	A_Roadster_BrakeCalipers                           = 205,
	A_Roadster_Dashboard                               = 206,
	A_Roadster_Doors                                   = 207,
	A_Roadster_Exhaust                                 = 208,
	A_Roadster_FrontBumper                             = 209,
	A_Roadster_FrontWindowWipers                       = 210,
	A_Roadster_Grill                                   = 211,
	A_Roadster_HeadlightGlass                          = 212,
	A_Roadster_HeadlightMain                           = 213,
	A_Roadster_Hood                                    = 214,
	A_Roadster_InteriorProps                           = 215,
	A_Roadster_Policelights2nd                         = 216,
	A_Roadster_PolicelightsMain                        = 217,
	A_Roadster_PoliceLightsSecondary                   = 218,
	A_Roadster_RearBumper                              = 219,
	A_Roadster_RearWindowWipers                        = 220,
	A_Roadster_Roof                                    = 221,
	A_Roadster_SeatsFront                              = 222,
	A_Roadster_SideSkirts                              = 223,
	A_Roadster_Spoiler                                 = 224,
	A_Roadster_SteeringWheel                           = 225,
	A_Roadster_TaillightGlass                          = 226,
	A_Roadster_TaillightMain                           = 227,
	A_Roadster_TrunkInterior                           = 228,
	A_Roadster_Wheel                                   = 229,
	A_Roadster_WingMirrors                             = 230,
	A_Roadster_WingPanels                              = 231,
	A_Saloon_Badge                                     = 232,
	A_Saloon_BumperFront                               = 233,
	A_Saloon_BumperRear                                = 234,
	A_Saloon_Door                                      = 235,
	A_Saloon_FrontBase                                 = 236,
	A_Saloon_Grill                                     = 237,
	A_Saloon_HeadLightGlass                            = 238,
	A_Saloon_HeadLightMain                             = 239,
	A_Saloon_Hood                                      = 240,
	A_Saloon_PoliceLightsMain                          = 241,
	A_Saloon_PoliceLightsSecondaryFront01              = 242,
	A_Saloon_PoliceLightsSecondaryFront02              = 243,
	A_Saloon_PoliceLightsSecondaryFront03              = 244,
	A_Saloon_Roof                                      = 245,
	A_Saloon_SeatsFront                                = 246,
	A_Saloon_SideSkirts                                = 247,
	A_Saloon_Spoiler                                   = 248,
	A_Saloon_SteeringWheel                             = 249,
	A_Saloon_TailLightsGlass                           = 250,
	A_Saloon_TailLightsMain                            = 251,
	A_Saloon_Wheels                                    = 252,
	A_Saloon_WindowWipers                              = 253,
	A_Saloon_WingMirrors                               = 254,
	A_SportsSUV_BumperFront                            = 255,
	A_SportsSUV_BumperRear                             = 256,
	A_SportsSUV_Doors                                  = 257,
	A_SportsSUV_Hood                                   = 258,
	A_SportsSUV_PoliceLightsMain                       = 259,
	A_SportsSUV_PoliceLightsSecondary                  = 260,
	A_SportsSUV_Roof                                   = 261,
	A_SportsSUV_SideSkirts                             = 262,
	A_SportsSUV_Spoiler                                = 263,
	A_SportsSUV_TailLightsMain                         = 264,
	A_SportsSUV_Trunk                                  = 265,
	A_SportsSUV_Wheels                                 = 266,
	A_SUV_Aerial                                       = 267,
	A_SUV_BullBarsFront                                = 268,
	A_SUV_BumperFront                                  = 269,
	A_SUV_BumperRear                                   = 270,
	A_SUV_Doors                                        = 271,
	A_SUV_Exhaust                                      = 272,
	A_SUV_Grill                                        = 273,
	A_SUV_HeadLightsGlass                              = 274,
	A_SUV_HeadLightsMain                               = 275,
	A_SUV_Hood                                         = 276,
	A_SUV_Indicator                                    = 277,
	A_SUV_PoliceLightsMain                             = 278,
	A_SUV_PoliceLightsSecondary                        = 279,
	A_SUV_Roof                                         = 280,
	A_SUV_RoofRack                                     = 281,
	A_SUV_SeatsFront                                   = 282,
	A_SUV_SideSkirts                                   = 283,
	A_SUV_SpareWheel                                   = 284,
	A_SUV_SteeringWheel                                = 285,
	A_SUV_TailLightsGlass                              = 286,
	A_SUV_TailLightsMain                               = 287,
	A_SUV_Trunk                                        = 288,
	A_SUV_Wheels                                       = 289,
	A_SUV_WindowWipers                                 = 290,
	A_SUV_WingMirrors                                  = 291,
	A_Taxi_Aerial                                      = 292,
	A_Taxi_Badge                                       = 293,
	A_Taxi_BullBars                                    = 294,
	A_Taxi_BumperFront                                 = 295,
	A_Taxi_BumperRear                                  = 296,
	A_Taxi_Doors                                       = 297,
	A_Taxi_Hood                                        = 298,
	A_Taxi_PoliceLightMain                             = 299,
	A_Taxi_PoliceLightSecondary                        = 300,
	A_Taxi_RoofLight                                   = 301,
	A_Taxi_SideSkirts                                  = 302,
	A_Taxi_Spoiler                                     = 303,
	A_Taxi_Wheel                                       = 304,
	A_TruckArmouredTest_Wheels                         = 305,
	A_TruckCurtain_Badge                               = 306,
	A_TruckCurtain_BumperFront                         = 307,
	A_TruckCurtain_Hood                                = 308,
	A_TruckCurtain_RearBase                            = 309,
	A_TruckCurtain_RearProp                            = 310,
	A_TruckCurtain_Seats                               = 311,
	A_TruckCurtain_SteeringWheel                       = 312,
	A_TruckCurtain_Wheels                              = 313,
	A_TruckCurtain_WindowWipers                        = 314,
	A_TruckCurtain_WingMirrors                         = 315,
	A_Utility1Estate_Badge                             = 316,
	A_Utility1Estate_BumperFront                       = 317,
	A_Utility1Estate_BumperRear                        = 318,
	A_Utility1Estate_Door                              = 319,
	A_Utility1Estate_FrontBase                         = 320,
	A_Utility1Estate_Grill                             = 321,
	A_Utility1Estate_HeadLightGlass                    = 322,
	A_Utility1Estate_HeadLightMain                     = 323,
	A_Utility1Estate_Hood                              = 324,
	A_Utility1Estate_PoliceLightsMain                  = 325,
	A_Utility1Estate_PoliceLightsSecondaryFront01      = 326,
	A_Utility1Estate_PoliceLightsSecondaryFront02      = 327,
	A_Utility1Estate_PoliceLightsSecondaryFront03      = 328,
	A_Utility1Estate_Roof                              = 329,
	A_Utility1Estate_RoofRack                          = 330,
	A_Utility1Estate_SeatsFront                        = 331,
	A_Utility1Estate_SideSkirts                        = 332,
	A_Utility1Estate_Spoiler                           = 333,
	A_Utility1Estate_SteeringWheel                     = 334,
	A_Utility1Estate_TailLightGlass                    = 335,
	A_Utility1Estate_TailLightMain                     = 336,
	A_Utility1Estate_Wheel                             = 337,
	A_Utility1Estate_WindowWipers                      = 338,
	A_Utility1Estate_WingMirrors                       = 339,
	A_VanAmbulance_Badge                               = 340,
	A_VanAmbulance_BullBars                            = 341,
	A_VanAmbulance_CabLights                           = 342,
	A_VanAmbulance_Exhaust                             = 343,
	A_VanAmbulance_FrontBumper                         = 344,
	A_VanAmbulance_FrontLights                         = 345,
	A_VanAmbulance_FrontSeats                          = 346,
	A_VanAmbulance_GearStick                           = 347,
	A_VanAmbulance_Grill                               = 348,
	A_VanAmbulance_HeadlightsGlass                     = 349,
	A_VanAmbulance_HeadlightsMain                      = 350,
	A_VanAmbulance_Hood                                = 351,
	A_VanAmbulance_RearBumper                          = 352,
	A_VanAmbulance_SideLights                          = 353,
	A_VanAmbulance_SideSkirts                          = 354,
	A_VanAmbulance_SteeringWheel                       = 355,
	A_VanAmbulance_TailLightsMain                      = 356,
	A_VanAmbulance_Wheel                               = 357,
	A_VanAmbulance_WindowWipersFront                   = 358,
	A_VanAmbulance_WingMirrors                         = 359,
	A_VanArmoured_Badge                                = 360,
	A_VanArmoured_BullBars                             = 361,
	A_VanArmoured_BumperFront                          = 362,
	A_VanArmoured_BumperRear                           = 363,
	A_VanArmoured_Exhaust                              = 364,
	A_VanArmoured_GearStick                            = 365,
	A_VanArmoured_Grill                                = 366,
	A_VanArmoured_HeadlightsGlass                      = 367,
	A_VanArmoured_HeadlightsMain                       = 368,
	A_VanArmoured_Hood                                 = 369,
	A_VanArmoured_RoofVents                            = 370,
	A_VanArmoured_SeatsFront                           = 371,
	A_VanArmoured_SideSkirts                           = 372,
	A_VanArmoured_SteeringWheel                        = 373,
	A_VanArmoured_TaillightsMain                       = 374,
	A_VanArmoured_Wheel                                = 375,
	A_VanArmoured_WindDeflector                        = 376,
	A_VanArmoured_WindowGuardFrame                     = 377,
	A_VanArmoured_WindowGuardGlass                     = 378,
	A_VanArmoured_WindowWipersFront                    = 379,
	A_VanArmoured_WingMirrors                          = 380,
	A_VanStandard_Badge                                = 381,
	A_VanStandard_BullBars                             = 382,
	A_VanStandard_BumperFront                          = 383,
	A_VanStandard_BumperRear                           = 384,
	A_VanStandard_Doors                                = 385,
	A_VanStandard_Exhaust                              = 386,
	A_VanStandard_GearStick                            = 387,
	A_VanStandard_Grill                                = 388,
	A_VanStandard_HeadlightsGlass                      = 389,
	A_VanStandard_HeadlightsMain                       = 390,
	A_VanStandard_Hood                                 = 391,
	A_VanStandard_PoliceLightsMain                     = 392,
	A_VanStandard_PoliceLightsSecond                   = 393,
	A_VanStandard_PoliceLightsSecondary                = 394,
	A_VanStandard_Roof                                 = 395,
	A_VanStandard_SeatsFront                           = 396,
	A_VanStandard_SideSkirts                           = 397,
	A_VanStandard_Spoiler                              = 398,
	A_VanStandard_SpotLights                           = 399,
	A_VanStandard_SteeringWheel                        = 400,
	A_VanStandard_TaillightsGlass                      = 401,
	A_VanStandard_TaillightsMain                       = 402,
	A_VanStandard_Visor                                = 403,
	A_VanStandard_Wheel                                = 404,
	A_VanStandard_WindowWipersFront                    = 405,
	A_VanStandard_WingMirrors                          = 406,
	ArmouredVanTest_Wheels                             = 407,
	C_Carrying_Aerial                                  = 408,
	C_Carrying_AudioAmp                                = 409,
	C_Carrying_AudioDumpValve                          = 410,
	C_Carrying_AudioEngine                             = 411,
	C_Carrying_AudioExhaust                            = 412,
	C_Carrying_AudioSpeaker                            = 413,
	C_Carrying_AudioTransmission                       = 414,
	C_Carrying_AudioTurbo                              = 415,
	C_Carrying_Badge                                   = 416,
	C_Carrying_BrakeCallipers                          = 417,
	C_Carrying_BumperFront                             = 418,
	C_Carrying_BumperRear                              = 419,
	C_Carrying_DashBoard                               = 420,
	C_Carrying_Doors                                   = 421,
	C_Carrying_EngineComponent                         = 422,
	C_Carrying_Exhaust                                 = 423,
	C_Carrying_FrontWindowVisor                        = 424,
	C_Carrying_Grill                                   = 425,
	C_Carrying_HeadlightsGlass                         = 426,
	C_Carrying_HeadlightsMain                          = 427,
	C_Carrying_Hood                                    = 428,
	C_Carrying_Indicators                              = 429,
	C_Carrying_InteriorProps                           = 430,
	C_Carrying_RearWindow                              = 431,
	C_Carrying_RearWindowGlass                         = 432,
	C_Carrying_RearWindowMental                        = 433,
	C_Carrying_RearWindows                             = 434,
	C_Carrying_Roof                                    = 435,
	C_Carrying_SeatsFront                              = 436,
	C_Carrying_SideSkirts                              = 437,
	C_Carrying_Spoiler                                 = 438,
	C_Carrying_SteeringWheel                           = 439,
	C_Carrying_TaillightsGlass                         = 440,
	C_Carrying_TaillightsMain                          = 441,
	C_Carrying_Wheels                                  = 442,
	C_Carrying_WindowBoard                             = 443,
	C_Carrying_WindowWipersFront                       = 444,
	C_Carrying_WindowWipersRear                        = 445,
	C_Carrying_WingMirrors                             = 446,
	C_Carrying_WingPanels                              = 447,
	C_Compact_Aerial                                   = 448,
	C_Compact_AudioAmp                                 = 449,
	C_Compact_AudioDumpValve                           = 450,
	C_Compact_AudioEngine                              = 451,
	C_Compact_AudioExhaust                             = 452,
	C_Compact_AudioSpeaker                             = 453,
	C_Compact_AudioTransmission                        = 454,
	C_Compact_AudioTurbo                               = 455,
	C_Compact_Badges                                   = 456,
	C_Compact_BrakeCallipers                           = 457,
	C_Compact_BumperFront                              = 458,
	C_Compact_BumperRear                               = 459,
	C_Compact_Dashboard                                = 460,
	C_Compact_Doors                                    = 461,
	C_Compact_EngineComponents                         = 462,
	C_Compact_Exhaust                                  = 463,
	C_Compact_FrontWingPanels                          = 464,
	C_Compact_HeadGuards                               = 465,
	C_Compact_HeadlightsGlass                          = 466,
	C_Compact_HeadlightsMain                           = 467,
	C_Compact_Hood                                     = 468,
	C_Compact_Indicators                               = 469,
	C_Compact_InteriorProps                            = 470,
	C_Compact_RoofExterior                             = 471,
	C_Compact_RoofGlass                                = 472,
	C_Compact_RoofInterior                             = 473,
	C_Compact_SeatsFront                               = 474,
	C_Compact_SideSkirts                               = 475,
	C_Compact_Spoiler                                  = 476,
	C_Compact_SteeringWheel                            = 477,
	C_Compact_TaillightsGlass                          = 478,
	C_Compact_TaillightsMain                           = 479,
	C_Compact_TrunkInterior                            = 480,
	C_Compact_Wheels                                   = 481,
	C_Compact_WindowWipersFront                        = 482,
	C_Compact_WindowWipersRear                         = 483,
	C_Compact_WingMirrors                              = 484,
	C_Perf_Aerial                                      = 485,
	C_Perf_AlloyWheel                                  = 486,
	C_Perf_AudioAmp                                    = 487,
	C_Perf_AudioDumpValve                              = 488,
	C_Perf_AudioEngine                                 = 489,
	C_Perf_AudioExhaust                                = 490,
	C_Perf_AudioSpeaker                                = 491,
	C_Perf_AudioTransmission                           = 492,
	C_Perf_AudioTurbo                                  = 493,
	C_Perf_Badge                                       = 494,
	C_Perf_BrakeCalipers                               = 495,
	C_Perf_BumperFront                                 = 496,
	C_Perf_BumperRear                                  = 497,
	C_Perf_Dashboard                                   = 498,
	C_Perf_Doors                                       = 499,
	C_Perf_EngineComponents                            = 500,
	C_Perf_Exhaust01                                   = 501,
	C_Perf_Exhaust02                                   = 502,
	C_Perf_Exhaust03                                   = 503,
	C_Perf_HeadlightsGlass                             = 504,
	C_Perf_HeadlightsMain                              = 505,
	C_Perf_Hood                                        = 506,
	C_Perf_InteriorProps                               = 507,
	C_Perf_Roof                                        = 508,
	C_Perf_SeatsFront                                  = 509,
	C_Perf_SideSkirts                                  = 510,
	C_Perf_Spoiler                                     = 511,
	C_Perf_Spotlight01                                 = 512,
	C_Perf_Spotlight02                                 = 513,
	C_Perf_Spotlight03                                 = 514,
	C_Perf_SteeringWheel                               = 515,
	C_Perf_TailLightsGlass                             = 516,
	C_Perf_TailLightsMain                              = 517,
	C_Perf_TrunkInterior                               = 518,
	C_Perf_Wheels                                      = 519,
	C_Perf_WindowWipersFront                           = 520,
	C_Perf_WindowWipersRear                            = 521,
	C_Perf_WingMirrors                                 = 522,
	C_Perf_WingPanels                                  = 523,
	Criminal_Performance_Brakelights                   = 524,
	Criminal_Performance_Dashboard                     = 525,
	Criminal_Performance_Exhaust                       = 526,
	Criminal_Performance_FrontBumper                   = 527,
	Criminal_Performance_Gearstick                     = 528,
	Criminal_Performance_Headlights                    = 529,
	Criminal_Performance_Hood                          = 530,
	Criminal_Performance_Pedals                        = 531,
	Criminal_Performance_RearBumper                    = 532,
	Criminal_Performance_Roof                          = 533,
	Criminal_Performance_Seats                         = 534,
	Criminal_Performance_Spoiler                       = 535,
	Criminal_Performance_SteeringWheel                 = 536,
	Criminal_Performance_Trim                          = 537,
	Criminal_Performance_Trunkaudio                    = 538,
	Criminal_Performance_Wheels                        = 539,
	Criminal_Performance_WindowWipers                  = 540,
	Criminal_Performance_WingMirrors                   = 541,
	E_Carrying_AudioAmp                                = 542,
	E_Carrying_AudioDumpValve                          = 543,
	E_Carrying_AudioEngine                             = 544,
	E_Carrying_AudioExhaust                            = 545,
	E_Carrying_AudioSiren                              = 546,
	E_Carrying_AudioSpeaker                            = 547,
	E_Carrying_AudioTransmission                       = 548,
	E_Carrying_AudioTurbo                              = 549,
	E_Carrying_BrakeCalipers                           = 550,
	E_Carrying_BullBars                                = 551,
	E_Carrying_BumperFront                             = 552,
	E_Carrying_BumperRear                              = 553,
	E_Carrying_Dashboard                               = 554,
	E_Carrying_DoorHandles                             = 555,
	E_Carrying_Doors                                   = 556,
	E_Carrying_Exhaust                                 = 557,
	E_Carrying_FogLightsGlass                          = 558,
	E_Carrying_FogLightsMain                           = 559,
	E_Carrying_Grill                                   = 560,
	E_Carrying_HeadLightsGlass                         = 561,
	E_Carrying_HeadLightsMain                          = 562,
	E_Carrying_Hood                                    = 563,
	E_Carrying_InteriorProps                           = 564,
	E_Carrying_PoliceLightsMain                        = 565,
	E_Carrying_PoliceLightsSecondary                   = 566,
	E_Carrying_Roof                                    = 567,
	E_Carrying_SeatsFront                              = 568,
	E_Carrying_SideSkirts                              = 569,
	E_Carrying_Spoiler                                 = 570,
	E_Carrying_SpoilerLadder                           = 571,
	E_Carrying_SpoilerProp                             = 572,
	E_Carrying_SteeringWheel                           = 573,
	E_Carrying_TaillightsGlass                         = 574,
	E_Carrying_TaillightsMain                          = 575,
	E_Carrying_VehicleBadge                            = 576,
	E_Carrying_Wheels                                  = 577,
	E_Carrying_WindowWipersFront                       = 578,
	E_Carrying_WindowWipersRear                        = 579,
	E_Carrying_WingMirrors                             = 580,
	E_Compact_AudioAmp                                 = 581,
	E_Compact_AudioDumpValve                           = 582,
	E_Compact_AudioEngine                              = 583,
	E_Compact_AudioExhaust                             = 584,
	E_Compact_AudioSiren                               = 585,
	E_Compact_AudioSpeaker                             = 586,
	E_Compact_AudioTransmission                        = 587,
	E_Compact_AudioTurbo                               = 588,
	E_Compact_BrakeCalipers                            = 589,
	E_Compact_BullBars                                 = 590,
	E_Compact_BumperFront                              = 591,
	E_Compact_BumperRear                               = 592,
	E_Compact_Dashboard                                = 593,
	E_Compact_Doors                                    = 594,
	E_Compact_Exhausts                                 = 595,
	E_Compact_FogLightsGlass                           = 596,
	E_Compact_FogLightsMain                            = 597,
	E_Compact_Grill                                    = 598,
	E_Compact_HeadLightsGlass                          = 599,
	E_Compact_HeadLightsMain                           = 600,
	E_Compact_Hood                                     = 601,
	E_Compact_InteriorProps                            = 602,
	E_Compact_PoliceLightsMain                         = 603,
	E_Compact_PoliceLightsSecondary                    = 604,
	E_Compact_RoofExterior                             = 605,
	E_Compact_RoofGlass                                = 606,
	E_Compact_RoofInterior                             = 607,
	E_Compact_SeatsFront                               = 608,
	E_Compact_SideSkirts                               = 609,
	E_Compact_Spoiler                                  = 610,
	E_Compact_SteeringWheel                            = 611,
	E_Compact_TaillightsGlass                          = 612,
	E_Compact_TaillightsMain                           = 613,
	E_Compact_VehicleBadge                             = 614,
	E_Compact_WheelBoot                                = 615,
	E_Compact_WheelBootProp                            = 616,
	E_Compact_Wheels                                   = 617,
	E_Compact_WindowWiperFront                         = 618,
	E_Compact_WindowWiperRear                          = 619,
	E_Compact_WingMirrors                              = 620,
	E_Compact_WingPanels                               = 621,
	E_Perf_AudioAmp                                    = 622,
	E_Perf_AudioDumpValve                              = 623,
	E_Perf_AudioEngine                                 = 624,
	E_Perf_AudioExhaust                                = 625,
	E_Perf_AudioSiren                                  = 626,
	E_Perf_AudioSpeaker                                = 627,
	E_Perf_AudioTransmission                           = 628,
	E_Perf_AudioTurbo                                  = 629,
	E_Perf_Badge                                       = 630,
	E_Perf_BrakeCalipers                               = 631,
	E_Perf_BullBars                                    = 632,
	E_Perf_BumperFront                                 = 633,
	E_Perf_BumperRear                                  = 634,
	E_Perf_Dashboard                                   = 635,
	E_Perf_Doors                                       = 636,
	E_Perf_EngineComponents                            = 637,
	E_Perf_Exhaust                                     = 638,
	E_Perf_Grill                                       = 639,
	E_Perf_HeadlightsGlass                             = 640,
	E_Perf_HeadlightsMain                              = 641,
	E_Perf_Hood                                        = 642,
	E_Perf_InteriorProps                               = 643,
	E_Perf_Louvers                                     = 644,
	E_Perf_Policelights2nd                             = 645,
	E_Perf_PoliceLightsMain                            = 646,
	E_Perf_Roof                                        = 647,
	E_Perf_SeatsFront                                  = 648,
	E_Perf_SideSkirts                                  = 649,
	E_Perf_Spoiler                                     = 650,
	E_Perf_SpotLightsMain                              = 651,
	E_Perf_SteeringWheel                               = 652,
	E_Perf_TailLightsGlass                             = 653,
	E_Perf_TailLightsMain                              = 654,
	E_Perf_TrunkInterior                               = 655,
	E_Perf_Wheels                                      = 656,
	E_Perf_WindowWipersFront                           = 657,
	E_Perf_WingMirrors                                 = 658,
	E_Perf_WingPanels                                  = 659,
	Enforcement_Performance_Brakelights                = 660,
	Enforcement_Performance_Dash                       = 661,
	Enforcement_Performance_FrontBumper                = 662,
	Enforcement_Performance_Headlights                 = 663,
	Enforcement_Performance_Hood                       = 664,
	Enforcement_Performance_RearBumper                 = 665,
	Enforcement_Performance_RoofLights                 = 666,
	Enforcement_Performance_Seats                      = 667,
	Enforcement_Performance_SideSkirts                 = 668,
	Enforcement_Performance_SteeringWheel              = 669,
	Enforcement_Performance_Trunk                      = 670,
	Enforcement_Performance_TrunkInterior              = 671,
	Enforcement_Performance_Wheels                     = 672,
	Enforcement_Performance_WingMirrors                = 673,
	Enforcement_Performance_Wipers                     = 674,
	Unknown                                            = 675,
	etVehicleUIComponentInfo_MAX                       = 676
};*/

// Enum APBGame.cSDD.etVFXAssociation
/*enum etVFXAssociation
{
	BuildingDefaultBombFX                              = 0,
	BuildingDefaultTaskFX                              = 1,
	Checkpoint_SmallDropOffVFX                         = 2,
	CheckpointDefaultTaskFX                            = 3,
	CheckpointExampleFX                                = 4,
	FeatureDefaultArsonVFX                             = 5,
	FeatureDefaultRamRaidVFX                           = 6,
	GraffitiDefaultVFX                                 = 7,
	NPCDefaultTaskFX                                   = 8,
	PlayerDefaultBurglaryVFX                           = 9,
	PlayerDefaultForcedEntryVFX                        = 10,
	PlayerDefaultGraffitiVFX                           = 11,
	PropDefaultBombFX                                  = 12,
	PropDefaultTaskFX                                  = 13,
	VehicleDefaultBombFX                               = 14,
	VehicleDefaultTaskFX                               = 15,
	FeatureDefaultBombDefusalVFX                       = 16,
	Checkpoint_VehicleDropOffVFX                       = 17,
	Checkpoint_CapturePointVFX                         = 18,
	Checkpoint_RaceVFX                                 = 19,
	etVFXAssociation_MAX                               = 20
};*/

// Enum APBGame.cSDD.etVFXType
/*enum etVFXType
{
	None                                               = 0,
	BuildingDefault                                    = 1,
	Checkpoint_CapturePoint                            = 2,
	Checkpoint_Race                                    = 3,
	Checkpoint_SmallDropOff                            = 4,
	Checkpoint_VehicleDropOff                          = 5,
	CheckpointDefault                                  = 6,
	CheckpointExampleFX                                = 7,
	FeatureDefault                                     = 8,
	GraffitiDefault                                    = 9,
	NPCDefault                                         = 10,
	PlayerDefault                                      = 11,
	PropDefault                                        = 12,
	VehicleDefault                                     = 13,
	etVFXType_MAX                                      = 14
};*/

// Enum APBGame.cSDD.etVideoReplayUIEntry
/*enum etVideoReplayUIEntry
{
	RTWIntro                                           = 0,
	APBIntro                                           = 1,
	CrimTutorial                                       = 2,
	EnfTutorial                                        = 3,
	TutorialDistrictBrief                              = 4,
	etVideoReplayUIEntry_MAX                           = 5
};*/

// Enum APBGame.cSDD.etWardrobeMenuEntry
/*enum etWardrobeMenuEntry
{
	Wardrobe_Customise                                 = 0,
	Wardrobe_StoreOutfit                               = 1,
	Wardrobe_RenameOutfit                              = 2,
	Wardrobe_DeleteOutfit                              = 3,
	Wardrobe_PartCustomisation                         = 4,
	Customisation_                                     = 5,
	Customisation_Part_Colour                          = 6,
	Customisation_Part_Vinyls                          = 7,
	Customisation_Decals                               = 8,
	Root_                                              = 9,
	EditOutfit_                                        = 10,
	Management_ItemRename                              = 11,
	Management_ItemSave                                = 12,
	Management_ItemSaveAll                             = 13,
	etWardrobeMenuEntry_MAX                            = 14
};*/

// Enum APBGame.APBAnimNotify_FootstepVFX.FootstepWeight
/*enum FootstepWeight
{
	FW_Light                                           = 0,
	FW_Medium                                          = 1,
	FW_Heavy                                           = 2,
	FW_MAX                                             = 3
};*/

// Enum APBGame.cSDD.etActivityMessageExclude
/*enum etActivityMessageExclude
{
	ActivityMessageExclude_None                        = 0,
	ActivityMessageExclude_Match                       = 1,
	ActivityMessageExclude_Player                      = 2,
	ActivityMessageExclude_Side                        = 3,
	ActivityMessageExclude_MAX                         = 4
};*/

// Enum APBGame.cSDD.etActivityMessageLocation
/*enum etActivityMessageLocation
{
	ActivityMessageLocation_ActionMessage              = 0,
	ActivityMessageLocation_DistrictMapMessage         = 1,
	ActivityMessageLocation_ChatMessage                = 2,
	ActivityMessageLocation_StandardMessage            = 3,
	ActivityMessageLocation_ScoreboardMessage          = 4,
	ActivityMessageLocation_RespawnMessage             = 5,
	ActivityMessageLocation_MAX                        = 6
};*/

// Enum APBGame.cSDD.etActivityMessageParameterConversion
/*enum etActivityMessageParameterConversion
{
	AMPC_AchievementName                               = 0,
	AMPC_AmmoType                                      = 1,
	AMPC_CharacterName                                 = 2,
	AMPC_ContactName                                   = 3,
	AMPC_DisplayPointName                              = 4,
	AMPC_DistrictBlock                                 = 5,
	AMPC_ItemDisplayName                               = 6,
	AMPC_JustificationText                             = 7,
	AMPC_LeagueName                                    = 8,
	AMPC_LocationBeacon                                = 9,
	AMPC_MedalDescription                              = 10,
	AMPC_MedalName                                     = 11,
	AMPC_Number                                        = 12,
	AMPC_OfferType                                     = 13,
	AMPC_OrganisationName                              = 14,
	AMPC_RewardDisplayName                             = 15,
	AMPC_RoleName                                      = 16,
	AMPC_SddRow_Contact                                = 17,
	AMPC_SddRow_Heat                                   = 18,
	AMPC_SddRow_League                                 = 19,
	AMPC_SddRow_Medal                                  = 20,
	AMPC_SddRow_Organisation                           = 21,
	AMPC_SddRow_RewardDescription                      = 22,
	AMPC_SddRow_Role                                   = 23,
	AMPC_SddRow_Threat                                 = 24,
	AMPC_StreetName                                    = 25,
	AMPC_VehicleName                                   = 26,
	AMPC_WeaponIcon                                    = 27,
	AMPC_WeaponType                                    = 28,
	AMPC_MAX                                           = 29
};*/

// Enum APBGame.cSDD.etActivityMessageRelevance
/*enum etActivityMessageRelevance
{
	ActivityMessageRelevance_Player                    = 0,
	ActivityMessageRelevance_Side                      = 1,
	ActivityMessageRelevance_Match                     = 2,
	ActivityMessageRelevance_District                  = 3,
	ActivityMessageRelevance_Group                     = 4,
	ActivityMessageRelevance_MAX                       = 5
};*/

// Enum APBGame.cSDD.etActivityMessageScope
/*enum etActivityMessageScope
{
	ActivityMessageScope_Player                        = 0,
	ActivityMessageScope_Side                          = 1,
	ActivityMessageScope_Match                         = 2,
	ActivityMessageScope_District                      = 3,
	ActivityMessageScope_MAX                           = 4
};*/

// Enum APBGame.cSDD.etAPBPawnConstant
/*enum etAPBPawnConstant
{
	APBPawnConstant_ArrestTime                         = 0,
	APBPawnConstant_DistanceSprintedBeforeGameplayEvent = 1,
	APBPawnConstant_FallDeathMomentumScale             = 2,
	APBPawnConstant_HitReactionAngleConstraint         = 3,
	APBPawnConstant_ImmuneToDamageTimeInitial          = 4,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnExtended = 5,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnNormal  = 6,
	APBPawnConstant_ImmuneToStaminaDamageTime          = 7,
	APBPawnConstant_ImmunityCheckDelay                 = 8,
	APBPawnConstant_ImmunityDistanceMax                = 9,
	APBPawnConstant_StaminaExhaustedThreshold          = 10,
	APBPawnConstant_SwitchToUnarmedTime                = 11,
	APBPawnConstant_WeaponAccuracyCooldownPerSecond    = 12,
	APBPawnConstant_WeaponFireRateTechnicalLimit       = 13,
	APBPawnConstant_MAX                                = 14
};*/

// Enum APBGame.cSDD.etAPBViewportType
/*enum etAPBViewportType
{
	VWT_16to9_Full                                     = 0,
	VWT_4to3_Full                                      = 1,
	VWT_MAX                                            = 2
};*/

// Enum APBGame.cSDD.etCameraConstant
/*enum etCameraConstant
{
	CameraConstant_CloseIn16_9BackAdjust               = 0,
	CameraConstant_CloseIn16_9HeightAdjust             = 1,
	CameraConstant_CloseIn16_9RightAdjust              = 2,
	CameraConstant_CloseIn16_9RightAdjustPitchScalar   = 3,
	CameraConstant_CloseIn4_3BackAdjust                = 4,
	CameraConstant_CloseIn4_3HeightAdjust              = 5,
	CameraConstant_CloseIn4_3RightAdjust               = 6,
	CameraConstant_CloseIn4_3RightAdjustPitchScalar    = 7,
	CameraConstant_CrouchAndSideSwapCameraSpeed        = 8,
	CameraConstant_CrouchCloseIn16_9BackAdjust         = 9,
	CameraConstant_CrouchCloseIn16_9HeightAdjust       = 10,
	CameraConstant_CrouchCloseIn16_9RightAdjust        = 11,
	CameraConstant_CrouchCloseIn16_9RightAdjustPitchScalar = 12,
	CameraConstant_CrouchCloseIn4_3BackAdjust          = 13,
	CameraConstant_CrouchCloseIn4_3HeightAdjust        = 14,
	CameraConstant_CrouchCloseIn4_3RightAdjust         = 15,
	CameraConstant_CrouchCloseIn4_3RightAdjustPitchScalar = 16,
	CameraConstant_CrouchFarOut16_9BackAdjust          = 17,
	CameraConstant_CrouchFarOut16_9HeightAdjust        = 18,
	CameraConstant_CrouchFarOut16_9RightAdjust         = 19,
	CameraConstant_CrouchFarOut16_9RightAdjustPitchScalar = 20,
	CameraConstant_CrouchFarOut4_3BackAdjust           = 21,
	CameraConstant_CrouchFarOut4_3HeightAdjust         = 22,
	CameraConstant_CrouchFarOut4_3RightAdjust          = 23,
	CameraConstant_CrouchFarOut4_3RightAdjustPitchScalar = 24,
	CameraConstant_FarOut16_9BackAdjust                = 25,
	CameraConstant_FarOut16_9HeightAdjust              = 26,
	CameraConstant_FarOut16_9RightAdjust               = 27,
	CameraConstant_FarOut16_9RightAdjustPitchScalar    = 28,
	CameraConstant_FarOut4_3BackAdjust                 = 29,
	CameraConstant_FarOut4_3HeightAdjust               = 30,
	CameraConstant_FarOut4_3RightAdjust                = 31,
	CameraConstant_FarOut4_3RightAdjustPitchScalar     = 32,
	CameraConstant_PenetrationBlendInTime              = 33,
	CameraConstant_PenetrationBlendOutTime             = 34,
	CameraConstant_SafeLocBlendSpeed                   = 35,
	CameraConstant_VaultFenceCameraRotationSpeed       = 36,
	CameraConstant_ZoomSpeedPerSecond                  = 37,
	CameraConstant_MAX                                 = 38
};*/

// Enum APBGame.cSDD.etCameraMode
/*enum etCameraMode
{
	CameraMode_None                                    = 0,
	CameraMode_ADA                                     = 1,
	CameraMode_AttachToActor                           = 2,
	CameraMode_Death                                   = 3,
	CameraMode_DefaultCharacter                        = 4,
	CameraMode_Director                                = 5,
	CameraMode_Driving                                 = 6,
	CameraMode_Fly                                     = 7,
	CameraMode_LeanTowardScreenCentre                  = 8,
	CameraMode_MarksManShip                            = 9,
	CameraMode_Passenger                               = 10,
	CameraMode_Sprinting                               = 11,
	CameraMode_Unstick                                 = 12,
	CameraMode_VehicleDeath                            = 13,
	CameraMode_VehicleMarksmanship                     = 14,
	CameraMode_MAX                                     = 15
};*/

// Enum APBGame.cSDD.etCameraShakePresetExported
/*enum etCameraShakePresetExported
{
	CameraShakePresetExported_None                     = 0,
	CameraShakePresetExported_APBScreenShake1          = 1,
	CameraShakePresetExported_APBScreenShake2          = 2,
	CameraShakePresetExported_APBScreenShake3          = 3,
	CameraShakePresetExported_APBScreenShake4          = 4,
	CameraShakePresetExported_APBScreenShake5          = 5,
	CameraShakePresetExported_APBScreenShake6          = 6,
	CameraShakePresetExported_HeavyLanding             = 7,
	CameraShakePresetExported_MAX                      = 8
};*/

// Enum APBGame.cSDD.etCharacterStatus
/*enum etCharacterStatus
{
	GMS_None                                           = 0,
	GMS_Dead                                           = 1,
	GMS_TaskParticipant                                = 2,
	GMS_NonTaskParticipant                             = 3,
	GMS_Stunned                                        = 4,
	GMS_Arrested                                       = 5,
	GMS_Driving                                        = 6,
	GMS_OutOfDistrict                                  = 7,
	GMS_Ready                                          = 8,
	GMS_DND                                            = 9,
	GMS_AFK                                            = 10,
	GMS_Disconnected                                   = 11,
	GMS_MAX                                            = 12
};*/

// Enum APBGame.cSDD.etCharacterVOIPStatus
/*enum etCharacterVOIPStatus
{
	VOIP_Active_High                                   = 0,
	VOIP_Active_Low                                    = 1,
	VOIP_Active_Medium                                 = 2,
	VOIP_InChannel                                     = 3,
	VOIP_Muted                                         = 4,
	VOIP_None                                          = 5,
	VOIP_NotInChannel                                  = 6,
	VOIP_MAX                                           = 7
};*/

// Enum APBGame.cSDD.etChatConstant
/*enum etChatConstant
{
	ChatConstant_SayRadius                             = 0,
	ChatConstant_YellRadius                            = 1,
	ChatConstant_MAX                                   = 2
};*/

// Enum APBGame.cSDD.etChatState
/*enum etChatState
{
	kChatState_Normal                                  = 0,
	kChatState_AFK                                     = 1,
	kChatState_DND                                     = 2,
	kChatState_MAX                                     = 3
};*/

// Enum APBGame.cSDD.etClanRank
/*enum etClanRank
{
	Leader                                             = 0,
	Officer                                            = 1,
	Member                                             = 2,
	etClanRank_MAX                                     = 3
};*/

// Enum APBGame.cSDD.etContactType
/*enum etContactType
{
	ContactType_None                                   = 0,
	ContactType_Fixer                                  = 1,
	ContactType_MissionProvider                        = 2,
	ContactType_Organisation                           = 3,
	ContactType_TurfContact                            = 4,
	ContactType_MAX                                    = 5
};*/

// Enum APBGame.cSDD.etContextSensitiveActionBase
/*enum etContextSensitiveActionBase
{
	CSA_None                                           = 0,
	CSA_AntiGraffiti                                   = 1,
	CSA_Arrest                                         = 2,
	CSA_Arrested                                       = 3,
	CSA_AudioDisplayPoint                              = 4,
	CSA_BuildingBreakIn                                = 5,
	CSA_BuildingForcedEntry                            = 6,
	CSA_CargoInteraction                               = 7,
	CSA_CrimeSceneInvestigation                        = 8,
	CSA_CrimeSceneInvestigation_Vehicle                = 9,
	CSA_DefuseBomb                                     = 10,
	CSA_DefuseVehicleBomb                              = 11,
	CSA_DeployAmmoCarrier                              = 12,
	CSA_DropTaskItem                                   = 13,
	CSA_EnterVehicle                                   = 14,
	CSA_Graffiti                                       = 15,
	CSA_GraffitiDisplayPoint_Billboard                 = 16,
	CSA_GraffitiDisplayPoint_Default                   = 17,
	CSA_GraffitiDisplayPoint_Targeted                  = 18,
	CSA_Hacking                                        = 19,
	CSA_Hacking_Vehicle                                = 20,
	CSA_Hotwire                                        = 21,
	CSA_InventoryAccess                                = 22,
	CSA_NPCForcibleArrest                              = 23,
	CSA_NPCMugging                                     = 24,
	CSA_NPCStopSearch                                  = 25,
	CSA_OpenAmmoPurchase                               = 26,
	CSA_OpenGarage                                     = 27,
	CSA_OpenInventory                                  = 28,
	CSA_OpenInventory_Legacy                           = 29,
	CSA_OpenLocker                                     = 30,
	CSA_OpenMailBox                                    = 31,
	CSA_OpenMarketPlace                                = 32,
	CSA_OpenMusicStudio                                = 33,
	CSA_OpenPersona                                    = 34,
	CSA_OpenSymbolDesigner                             = 35,
	CSA_OpenWardrobe                                   = 36,
	CSA_PassTaskItem                                   = 37,
	CSA_PassTaskItemToCargoHold                        = 38,
	CSA_PickupTaskItem                                 = 39,
	CSA_PlantBomb                                      = 40,
	CSA_PlantVehicleBomb                               = 41,
	CSA_PlayerInteractionMenu                          = 42,
	CSA_RCE_Door                                       = 43,
	CSA_RCE_Fence                                      = 44,
	CSA_RCE_Ladder                                     = 45,
	CSA_ReceiveTaskItem                                = 46,
	CSA_ReceiveTaskItemFromCargoHold                   = 47,
	CSA_Rescue                                         = 48,
	CSA_Rescued                                        = 49,
	CSA_ResupplyAmmo                                   = 50,
	CSA_ResupplyAmmo_Legacy                            = 51,
	CSA_Sabotage                                       = 52,
	CSA_Sabotage_Vehicle                               = 53,
	CSA_SetAlight                                      = 54,
	CSA_SetVehicleAlight                               = 55,
	CSA_SpawnVehicle                                   = 56,
	CSA_SpawnVehicle_Legacy                            = 57,
	CSA_SpeakToContact                                 = 58,
	CSA_StatueDisplayPoint                             = 59,
	CSA_VehicleBreakIn                                 = 60,
	CSA_MAX                                            = 61
};*/

// Enum APBGame.cSDD.etCrimeTargetCategory
/*enum etCrimeTargetCategory
{
	CrimeTargetCategory_NPC                            = 0,
	CrimeTargetCategory_Vehicle                        = 1,
	CrimeTargetCategory_Environmental                  = 2,
	CrimeTargetCategory_Prop                           = 3,
	CrimeTargetCategory_Max                            = 4
};*/

// Enum APBGame.cSDD.etCrimeTargetEnvironmental
/*enum etCrimeTargetEnvironmental
{
	CrimeTargetEnvironmental_RamRaid                   = 0,
	CrimeTargetEnvironmental_Arson                     = 1,
	CrimeTargetEnvironmental_PickupPoint               = 2,
	CrimeTargetEnvironmental_Graffiti                  = 3,
	CrimeTargetEnvironmental_MAX                       = 4
};*/

// Enum APBGame.cSDD.etCrimeTargetType
/*enum etCrimeTargetType
{
	CrimeTargetType_BrownCollarWorker                  = 0,
	CrimeTargetType_Businessman                        = 1,
	CrimeTargetType_BusinessmanGoingHome               = 2,
	CrimeTargetType_Clubber                            = 3,
	CrimeTargetType_ClubberGoingHome                   = 4,
	CrimeTargetType_CorporateBusinessman               = 5,
	CrimeTargetType_GenericEntertainment               = 6,
	CrimeTargetType_GenericHungry                      = 7,
	CrimeTargetType_GenericShopper                     = 8,
	CrimeTargetType_GenericShopperGoingHome            = 9,
	CrimeTargetType_Vehicle                            = 10,
	CrimeTargetType_FamilyCar                          = 11,
	CrimeTargetType_SportsCar                          = 12,
	CrimeTargetType_RamRaidTarget                      = 13,
	CrimeTargetType_ArsonTarget                        = 14,
	CrimeTargetType_PickupPoint                        = 15,
	CrimeTargetType_GraffitiTarget                     = 16,
	CrimeTargetType_PropTarget                         = 17,
	CrimeTargetType_Max                                = 18
};*/

// Enum APBGame.cSDD.etCrimeTargetZone
/*enum etCrimeTargetZone
{
	CrimeTargetZone_Vandalism                          = 0,
	CrimeTargetZone_Mugging                            = 1,
	CrimeTargetZone_VehicleTheft                       = 2,
	CrimeTargetZone_Assassination                      = 3,
	CrimeTargetZone_HitAndRun                          = 4,
	CrimeTargetZone_Max                                = 5
};*/

// Enum APBGame.cSDD.etCrimeType
/*enum etCrimeType
{
	CrimeType_Assault                                  = 0,
	CrimeType_Mugging                                  = 1,
	CrimeType_Kidnapping                               = 2,
	CrimeType_VehicleTheft                             = 3,
	CrimeType_HitAndRun                                = 4,
	CrimeType_Assassination                            = 5,
	CrimeType_RamRaid                                  = 6,
	CrimeType_Arson                                    = 7,
	CrimeType_PickUp                                   = 8,
	CrimeType_Vandalism                                = 9,
	CrimeType_Graffiti                                 = 10,
	CrimeType_TestAttackProp                           = 11,
	CrimeType_Max                                      = 12
};*/

// Enum APBGame.cSDD.etCSA_IATState
/*enum etCSA_IATState
{
	CSA_IATState_None                                  = 0,
	CSA_IATState_AmmoDepot_Default                     = 1,
	CSA_IATState_AmmoShopFront_Default                 = 2,
	CSA_IATState_AmmoVendingMachine_Default            = 3,
	CSA_IATState_APBPawn_AmmoCarrierDeployed           = 4,
	CSA_IATState_APBPawn_Arrested                      = 5,
	CSA_IATState_APBPawn_Default                       = 6,
	CSA_IATState_APBPawn_Unconscious                   = 7,
	CSA_IATState_APBVehicle_ArsonTarget                = 8,
	CSA_IATState_APBVehicle_BombTarget                 = 9,
	CSA_IATState_APBVehicle_Default                    = 10,
	CSA_IATState_AudioDisplayPoint_Default             = 11,
	CSA_IATState_Contact_Default                       = 12,
	CSA_IATState_GraffitiCrimeTarget_Default           = 13,
	CSA_IATState_GrafittiDisplayPoint_Default          = 14,
	CSA_IATState_MailBox_Default                       = 15,
	CSA_IATState_NPC_NoUseAllowed                      = 16,
	CSA_IATState_NPC_OpenWorldTarget                   = 17,
	CSA_IATState_PlayerVehicleDisplayPoint_Default     = 18,
	CSA_IATState_PlayerVehicleSpawnZone_Default        = 19,
	CSA_IATState_Prop_ArsonTarget                      = 20,
	CSA_IATState_Prop_BombPlanted                      = 21,
	CSA_IATState_Prop_BombTarget                       = 22,
	CSA_IATState_Prop_BurglaryTarget                   = 23,
	CSA_IATState_Prop_CSITarget                        = 24,
	CSA_IATState_Prop_Default                          = 25,
	CSA_IATState_Prop_ForcedEntryTarget                = 26,
	CSA_IATState_Prop_HackingTarget                    = 27,
	CSA_IATState_Prop_OpenWorldTarget                  = 28,
	CSA_IATState_Prop_SabotageTarget                   = 29,
	CSA_IATState_RouteControlElement_Default           = 30,
	CSA_IATState_RouteControlElement_Door              = 31,
	CSA_IATState_RouteControlElement_Fence             = 32,
	CSA_IATState_RouteControlElement_Ladder            = 33,
	CSA_IATState_StatueDisplayPoint_Default            = 34,
	CSA_IATState_TaskItemPickup_DirectedMission        = 35,
	CSA_IATState_TaskItemPickup_OpenWorld              = 36,
	CSA_IATState_UIInteractionPoint_Default            = 37,
	CSA_IATState_MAX                                   = 38
};*/

// Enum APBGame.cSDD.etCSAAlignmentType
/*enum etCSAAlignmentType
{
	CSA_AT_None                                        = 0,
	CSA_AT_Rotate_ActorLocation                        = 1,
	CSA_AT_Rotate_ActorNormal                          = 2,
	CSA_AT_MAX                                         = 3
};*/

// Enum APBGame.cSDD.etCSAAnimEvent
/*enum etCSAAnimEvent
{
	CSAAnimEvent_None                                  = 0,
	CSAAnimEvent_EndInteraction                        = 1,
	CSAAnimEvent_MAX                                   = 2
};*/

// Enum APBGame.cSDD.etCSAAnimType
/*enum etCSAAnimType
{
	CSAAnimType_None                                   = 0,
	CSAAnimType_1Phase                                 = 1,
	CSAAnimType_1Phase_RCE                             = 2,
	CSAAnimType_1Phase_TaskItem                        = 3,
	CSAAnimType_3Phase                                 = 4,
	CSAAnimType_MAX                                    = 5
};*/

// Enum APBGame.cSDD.etCSAAutoRouteType
/*enum etCSAAutoRouteType
{
	CSA_AutoRouteType_None                             = 0,
	CSA_AutoRouteType_Offset                           = 1,
	CSA_AutoRouteType_Socket                           = 2,
	CSA_AutoRouteType_MAX                              = 3
};*/

// Enum APBGame.cSDD.etCSAEndPoint
/*enum etCSAEndPoint
{
	CSAEndPoint_None                                   = 0,
	CSAEndPoint_Outro_Cosmetic                         = 1,
	CSAEndPoint_Outro_Logical_AnimDuration             = 2,
	CSAEndPoint_Outro_Logical_AnimNotify               = 3,
	CSAEndPoint_Outro_Logical_Timed                    = 4,
	CSAEndPoint_MAX                                    = 5
};*/

// Enum APBGame.cSDD.etCSAInputType
/*enum etCSAInputType
{
	CSA_InputType_None                                 = 0,
	CSA_InputType_PressAndHold                         = 1,
	CSA_InputType_Toggle                               = 2,
	CSA_InputType_MAX                                  = 3
};*/

// Enum APBGame.cSDD.etCSALineCheckType
/*enum etCSALineCheckType
{
	CSA_LCT_None                                       = 0,
	CSA_LCT_Blocking                                   = 1,
	CSA_LCT_Static                                     = 2,
	CSA_LCT_MAX                                        = 3
};*/

// Enum APBGame.cSDD.etCSAState
/*enum etCSAState
{
	CSAState_None                                      = 0,
	CSAState_Cancel                                    = 1,
	CSAState_InProgress                                = 2,
	CSAState_Success                                   = 3,
	CSAState_MAX                                       = 4
};*/

// Enum APBGame.cSDD.etCSAType
/*enum etCSAType
{
	CSAType_None                                       = 0,
	CSAType_Action                                     = 1,
	CSAType_UseEquipment                               = 2,
	CSAType_Invoked                                    = 3,
	CSAType_Ammo                                       = 4,
	CSAType_MAX                                        = 5
};*/

// Enum APBGame.cSDD.etCustomisedAssetPriority
/*enum etCustomisedAssetPriority
{
	CAMPriority_SelfCharacter                          = 0,
	CAMPriority_SelfVehicle                            = 1,
	CAMPriority_Groupmate                              = 2,
	CAMPriority_Friend                                 = 3,
	CAMPriority_SameMission                            = 4,
	CAMPriority_Threat11                               = 5,
	CAMPriority_Threat13                               = 6,
	CAMPriority_SideMate                               = 7,
	CAMPriority_MAX                                    = 8
};*/

// Enum APBGame.cSDD.etDeployedUsableArray
/*enum etDeployedUsableArray
{
	DeployedUsableArray_None                           = 0,
	DeployedUsableArray_Character                      = 1,
	DeployedUsableArray_Vehicle                        = 2,
	DeployedUsableArray_MAX                            = 3
};*/

// Enum APBGame.cSDD.etDesignerConstant
/*enum etDesignerConstant
{
	DesignerConstant_AbandonedPlayerRewardMultiplier   = 0,
	DesignerConstant_AccelerationRate                  = 1,
	DesignerConstant_ActivityMessage_WinStreak_Threshold = 2,
	DesignerConstant_AirControl                        = 3,
	DesignerConstant_AllowGiftingUnlocks               = 4,
	DesignerConstant_AmmoCarrierRadiusPlayerDefault    = 5,
	DesignerConstant_AmmoCarrierRadiusVehicleDefault   = 6,
	DesignerConstant_AmmoStoredBoxesWarningLevel       = 7,
	DesignerConstant_ArrestStreakArrests               = 8,
	DesignerConstant_BailOutSpeed                      = 9,
	DesignerConstant_BountyHuntDeclineTimer            = 10,
	DesignerConstant_BountyHuntSuppressNotoriety       = 11,
	DesignerConstant_BountyHuntSuppressTimer           = 12,
	DesignerConstant_BountyHuntSuppressTimerUnopposed  = 13,
	DesignerConstant_CanAbandonOpposed                 = 14,
	DesignerConstant_CanAbandonUnopposed               = 15,
	DesignerConstant_CarSurfingAppySideForceTime       = 16,
	DesignerConstant_CarSurfingMinSpeed                = 17,
	DesignerConstant_CarSurfingStillApplicableTime     = 18,
	DesignerConstant_CarSurfingTeleportPlayerTime      = 19,
	DesignerConstant_CashGift                          = 20,
	DesignerConstant_ChatAFKCooldownTime               = 21,
	DesignerConstant_ChatAutomaticAFKIdleTime          = 22,
	DesignerConstant_ContactHailTimerReset             = 23,
	DesignerConstant_ContactInnerProximityRadius       = 24,
	DesignerConstant_ContactOuterProximityRadius       = 25,
	DesignerConstant_CrouchSpeed                       = 26,
	DesignerConstant_CrouchStaminaRechargeScalar       = 27,
	DesignerConstant_CSAHintIconDefaultMaxDistance     = 28,
	DesignerConstant_DelayBetweenBackupCalls           = 29,
	DesignerConstant_DisplayGammaMax                   = 30,
	DesignerConstant_DisplayGammaMin                   = 31,
	DesignerConstant_EscortDefaultVIPLives             = 32,
	DesignerConstant_FallDamageWaterScalar             = 33,
	DesignerConstant_FallDamgeScalar                   = 34,
	DesignerConstant_FallSpeedCauseDamage              = 35,
	DesignerConstant_FallStaminaScalar                 = 36,
	DesignerConstant_FallStaminaWaterScalar            = 37,
	DesignerConstant_FeeToRefurbishCustom              = 38,
	DesignerConstant_FeeToRefurbishPreset              = 39,
	DesignerConstant_FemaleCharacterHeightMax          = 40,
	DesignerConstant_FemaleCharacterHeightMin          = 41,
	DesignerConstant_FlailingSpeed                     = 42,
	DesignerConstant_GlobalUsableCooldownTimer         = 43,
	DesignerConstant_GM_MaxPlayerRunSpeed              = 44,
	DesignerConstant_GM_MinPlayerRunSpeed              = 45,
	DesignerConstant_GM_TeleportGMToPlayerDistance     = 46,
	DesignerConstant_GM_TeleportPlayerToGMDistance     = 47,
	DesignerConstant_GoneReadyMissionTimer             = 48,
	DesignerConstant_GrenadeSpeedThreshold             = 49,
	DesignerConstant_GroupMaxMembers                   = 50,
	DesignerConstant_Health                            = 51,
	DesignerConstant_HealthRechargeDuration            = 52,
	DesignerConstant_ItemSellbackAPBCash               = 53,
	DesignerConstant_ItemUnlockReplenishmentDayOffset  = 54,
	DesignerConstant_ItemUnlockReplenishmentHourOffset = 55,
	DesignerConstant_ItemUnlockReplenishmentTime       = 56,
	DesignerConstant_JumpStaminaDrain                  = 57,
	DesignerConstant_JumpZ                             = 58,
	DesignerConstant_KillFromBehindTolerance           = 59,
	DesignerConstant_KillStreakKills                   = 60,
	DesignerConstant_LeagueRewardDisplayPointValidFromDelay = 61,
	DesignerConstant_LeanLeftCrouchingAimOffset        = 62,
	DesignerConstant_LeanLeftStandingAimOffset         = 63,
	DesignerConstant_LeanRightCrouchingAimOffset       = 64,
	DesignerConstant_LeanRightStandingAimOffset        = 65,
	DesignerConstant_LoadingScreenHintChangeFrequency  = 66,
	DesignerConstant_LobbyMaxAllowedCharacters         = 67,
	DesignerConstant_MaleCharacterHeightMax            = 68,
	DesignerConstant_MaleCharacterHeightMin            = 69,
	DesignerConstant_MarksmanshipMouseSensitivityMax   = 70,
	DesignerConstant_MarksmanshipMouseSensitivityMin   = 71,
	DesignerConstant_MatchmakingGlobalOwningSideBias   = 72,
	DesignerConstant_MatchmakingMetaGroupAttempt       = 73,
	DesignerConstant_MatchmakingMetaGroupBias          = 74,
	DesignerConstant_MatchmakingMetaGroupPenalty       = 75,
	DesignerConstant_MatchmakingOvermatchedRatio       = 76,
	DesignerConstant_MatchmakingPerMemberConstant      = 77,
	DesignerConstant_MatchmakingPrevSideAttempt        = 78,
	DesignerConstant_MatchmakingPrevSidePenalty        = 79,
	DesignerConstant_MatchmakingSameFactionAttempt     = 80,
	DesignerConstant_MatchmakingSameFactionPenalty     = 81,
	DesignerConstant_MatchmakingSecondsPerAttempt      = 82,
	DesignerConstant_MatchmakingSideSizeMultiplier     = 83,
	DesignerConstant_MatchmakingThresholdDirectWitnessCrimOvermatched = 84,
	DesignerConstant_MatchmakingThresholdDirectWitnessEnfOvermatched = 85,
	DesignerConstant_MatchmakingThresholdMax           = 86,
	DesignerConstant_MatchmakingThresholdMaxAttempts   = 87,
	DesignerConstant_MatchmakingThresholdMin           = 88,
	DesignerConstant_MaxedContactMissionWeight         = 89,
	DesignerConstant_MaxFallSpeedScaleToDamage         = 90,
	DesignerConstant_MaxMissionDeclines                = 91,
	DesignerConstant_MinCSACacheTime                   = 92,
	DesignerConstant_MinThreatToOwnSoloMission         = 93,
	DesignerConstant_MissionDeclinePeriod              = 94,
	DesignerConstant_MissionDeclineTimerMax            = 95,
	DesignerConstant_MissionDefaultObjectiveTimeLimit  = 96,
	DesignerConstant_MissionDefaultTakeoutCount        = 97,
	DesignerConstant_MissionEscapeGracePeriod          = 98,
	DesignerConstant_MissionFeedback_Enabled           = 99,
	DesignerConstant_MissionFeedback_NumberOfMissionsBetweenFeedback = 100,
	DesignerConstant_MissionFeedback_TimeOutSec        = 101,
	DesignerConstant_MissionFirstTargetMaxRadius       = 102,
	DesignerConstant_MissionMinTakeoutsClearOnStartMultiplier = 103,
	DesignerConstant_MissionMinTakeoutsVIPMultiplier   = 104,
	DesignerConstant_MissionObstructedVehicleSpawnerDelay = 105,
	DesignerConstant_MissionOfferMinimumInterval       = 106,
	DesignerConstant_MissionPauseTimeMax               = 107,
	DesignerConstant_MissionPauseTimeMin               = 108,
	DesignerConstant_MissionPostCompletionDelay        = 109,
	DesignerConstant_MissionScoreBalanceMultiplier     = 110,
	DesignerConstant_MissionScoreDisplayResultsTime    = 111,
	DesignerConstant_MissionScoreLockedContactCashMultiplier = 112,
	DesignerConstant_MissionScoreLosePoints            = 113,
	DesignerConstant_MissionScoreMaxBalanceBonus       = 114,
	DesignerConstant_MissionScoreMaxMedalPoints        = 115,
	DesignerConstant_MissionScoreMinimum               = 116,
	DesignerConstant_MissionScoreUnopposedFailPoints   = 117,
	DesignerConstant_MissionScoreUnopposedSucceedPoints = 118,
	DesignerConstant_MissionScoreWinPoints             = 119,
	DesignerConstant_MissionTargetDamagedHUDMarkerBlinkDuration = 120,
	DesignerConstant_MissionTaskPropRespawnTime        = 121,
	DesignerConstant_MissionTaskVehicleDeathDuration   = 122,
	DesignerConstant_MissionVehicleSpawnFailTime       = 123,
	DesignerConstant_MissionWinStreakCount             = 124,
	DesignerConstant_MissionWrongMethodDamageScaler    = 125,
	DesignerConstant_MissionWrongMethodMaxDamage       = 126,
	DesignerConstant_ModifierSuperMagClipSizeForScaler = 127,
	DesignerConstant_ModifierSuperMagMinClipSize       = 128,
	DesignerConstant_MouseSensitivityMax               = 129,
	DesignerConstant_MouseSensitivityMin               = 130,
	DesignerConstant_MVP_ArrestedByEnforcerMultiplier  = 131,
	DesignerConstant_MVP_ArrestingCriminalsMultiplier  = 132,
	DesignerConstant_MVP_CompletedTargetsMultiplier    = 133,
	DesignerConstant_MVP_DeathsByEnemyMultiplier       = 134,
	DesignerConstant_MVP_DeathsByFriendlyMultiplier    = 135,
	DesignerConstant_MVP_DeathsBySuicidesMultiplier    = 136,
	DesignerConstant_MVP_FriendlyKillsMultiplier       = 137,
	DesignerConstant_MVP_FriendlyKillsReduction        = 138,
	DesignerConstant_MVP_HonorableKillAssistsMultiplier = 139,
	DesignerConstant_MVP_HonorableKillsMultiplier      = 140,
	DesignerConstant_MVP_MedalsNegativeMultiplier      = 141,
	DesignerConstant_MVP_MedalsPositiveMultiplier      = 142,
	DesignerConstant_NotReadyNagTimer_Initial          = 143,
	DesignerConstant_NotReadyNagTimer_Repeat           = 144,
	DesignerConstant_NPCHealth                         = 145,
	DesignerConstant_NPCHealthRechargeDelay            = 146,
	DesignerConstant_NPCHealthRechargeDuration         = 147,
	DesignerConstant_NPCViewingConeHorizontalAngle     = 148,
	DesignerConstant_NPCViewingConeVerticalAngle       = 149,
	DesignerConstant_OvermatchedCallForBackupDialogueTimeout = 150,
	DesignerConstant_PedestrianPanicMaxDuration        = 151,
	DesignerConstant_PedestrianPanicMinDuration        = 152,
	DesignerConstant_PedestrianTaskItemSpawnRadius     = 153,
	DesignerConstant_PlayerMaxStepHeight               = 154,
	DesignerConstant_PlayerVehicleDamageHigh           = 155,
	DesignerConstant_PlayerVehicleDamageSmall          = 156,
	DesignerConstant_PlayerVehicleSpawnDialogueTimeout = 157,
	DesignerConstant_PlayerVehicleSpawnMinInterval     = 158,
	DesignerConstant_ProgressionGovernanceMinRestHours = 159,
	DesignerConstant_ProgressionGovernancePreferredAdvancementInitial = 160,
	DesignerConstant_ProgressionGovernancePreferredAdvancementMax = 161,
	DesignerConstant_ProgressionGovernancePreferredAdvancementPerHour = 162,
	DesignerConstant_ProgressionGovernanceReducedRate  = 163,
	DesignerConstant_ProgressionGovernanceStandingPerHour = 164,
	DesignerConstant_PropMissionBlockedDamageInterval  = 165,
	DesignerConstant_PropMissionBlockedDamagePercentage = 166,
	DesignerConstant_RagdollImpulseScale               = 167,
	DesignerConstant_RagdollImpulseScale_NPC           = 168,
	DesignerConstant_RagdollSpeedThreshold             = 169,
	DesignerConstant_RatingModifier                    = 170,
	DesignerConstant_RatingRoleBias                    = 171,
	DesignerConstant_RBCollisionThreshold1             = 172,
	DesignerConstant_RBCollisionThreshold2             = 173,
	DesignerConstant_RoleUpdateInterval                = 174,
	DesignerConstant_RunSpeed                          = 175,
	DesignerConstant_ShieldHealth                      = 176,
	DesignerConstant_ShieldHealthRechargeDelay         = 177,
	DesignerConstant_ShieldHealthRechargeDuration      = 178,
	DesignerConstant_SprintSpeed                       = 179,
	DesignerConstant_SprintStaminaDrain                = 180,
	DesignerConstant_SprintTolerance                   = 181,
	DesignerConstant_Stamina                           = 182,
	DesignerConstant_StaminaBuffer                     = 183,
	DesignerConstant_StaminaRechargeDelay              = 184,
	DesignerConstant_StaminaRechargeDuration           = 185,
	DesignerConstant_StrafeFiringTime                  = 186,
	DesignerConstant_StrafeReloadingTime               = 187,
	DesignerConstant_TakeoutStreakTakeouts             = 188,
	DesignerConstant_TargetingAimLockBorder            = 189,
	DesignerConstant_TargetingHUDLockBorder            = 190,
	DesignerConstant_TargetingLeanOffset               = 191,
	DesignerConstant_TargetInVehicleDriverOffsetHorizontal = 192,
	DesignerConstant_TargetInVehicleDriverOffsetVertical = 193,
	DesignerConstant_Task_Time_RunningOutOfTime        = 194,
	DesignerConstant_TaskItemDropDistance              = 195,
	DesignerConstant_TaskTargetPVPLockPendingDuration  = 196,
	DesignerConstant_TaskTargetReallocationDelay       = 197,
	DesignerConstant_TaskTargetReallocationMaxDistance = 198,
	DesignerConstant_TaskTargetReallocationMinDistance = 199,
	DesignerConstant_ThreatLinearLevelMapping          = 200,
	DesignerConstant_ThreatNumLevels                   = 201,
	DesignerConstant_ThreatPointsForDraw               = 202,
	DesignerConstant_ThreatPointsForLose               = 203,
	DesignerConstant_ThreatPointsForWin                = 204,
	DesignerConstant_ThreatWindowPassband              = 205,
	DesignerConstant_ThreatWindowStopband              = 206,
	DesignerConstant_VCPRaycastClampSpeed              = 207,
	DesignerConstant_VehicleAbandonmentTime            = 208,
	DesignerConstant_VehicleAlarmCollisionTrigger      = 209,
	DesignerConstant_VehicleAlarmOffTime               = 210,
	DesignerConstant_VehicleAlarmOnTime                = 211,
	DesignerConstant_VehicleAlarmTimeOut               = 212,
	DesignerConstant_VehicleArsonDamageThreshold       = 213,
	DesignerConstant_VehicleCriticalMaxDuration        = 214,
	DesignerConstant_VehicleCriticalMinDuration        = 215,
	DesignerConstant_VehicleDeliveryCleanupDuration    = 216,
	DesignerConstant_VehicleDirtApplicationSpeed       = 217,
	DesignerConstant_VehicleDirtApplicationTime        = 218,
	DesignerConstant_VehicleDirtCleanSpeed             = 219,
	DesignerConstant_VehicleDirtCleanSpeedActive       = 220,
	DesignerConstant_VehicleDustApplicationTime        = 221,
	DesignerConstant_VehicleEnterDistantTooGreat       = 222,
	DesignerConstant_VehicleEnterNoMovementTimeOut     = 223,
	DesignerConstant_VehicleEnterSpeedHoldOnToDoor     = 224,
	DesignerConstant_VehicleEnterTimeout               = 225,
	DesignerConstant_VehicleHitDeathSpeed              = 226,
	DesignerConstant_VehicleHitNudgeAmount             = 227,
	DesignerConstant_VehicleLastDamageValidTime        = 228,
	DesignerConstant_VehicleMissionRecycleTime         = 229,
	DesignerConstant_VehicleNeutralDamageTime          = 230,
	DesignerConstant_VehiclePropCSAObstructionCleanupTime = 231,
	DesignerConstant_VehiclePropCSAObstructionDistance = 232,
	DesignerConstant_VehicleRepairDamageTimeout        = 233,
	DesignerConstant_VehicleSpawnFreeBaySearchRadius   = 234,
	DesignerConstant_VehicleTransientRecycleTime       = 235,
	DesignerConstant_VehicleUseDoorAllowableZDiff      = 236,
	DesignerConstant_VehicleUseDoorPitchAngle          = 237,
	DesignerConstant_VehicleUseDoorRayCastDepth        = 238,
	DesignerConstant_VehicleUseDoorRollAngle           = 239,
	DesignerConstant_VehicleUseTeleportDownDistance    = 240,
	DesignerConstant_VehicleUseTeleportUpDistance      = 241,
	DesignerConstant_VehicleUseVAPLeanLerpOffset       = 242,
	DesignerConstant_WalkSpeed                         = 243,
	DesignerConstant_WeaponAccuracyModifierGlobal      = 244,
	DesignerConstant_WeaponBenchmarkTargetRadius       = 245,
	DesignerConstant_WeaponGrenadeMaxAngleAdded        = 246,
	DesignerConstant_WeaponRangeHysteresis             = 247,
	DesignerConstant_WeaponReticulePickLength          = 248,
	DesignerConstant_WindedSpeed                       = 249,
	DesignerConstant_WindedTime                        = 250,
	DesignerConstant_MAX                               = 251
};*/

// Enum APBGame.cSDD.etDifficultyRating
/*enum etDifficultyRating
{
	Difficulty_VeryEasy                                = 0,
	Difficulty_Easy                                    = 1,
	Difficulty_Medium                                  = 2,
	Difficulty_Hard                                    = 3,
	Difficulty_VeryHard                                = 4,
	Difficulty_MAX                                     = 5
};*/

// Enum APBGame.cSDD.etDirection
/*enum etDirection
{
	Direction_None                                     = 0,
	Direction_Left                                     = 1,
	Direction_Right                                    = 2,
	Direction_MAX                                      = 3
};*/

// Enum APBGame.cSDD.etDisplayPointActivationType
/*enum etDisplayPointActivationType
{
	DisplayPointActivationType_None                    = 0,
	DisplayPointActivationType_Free                    = 1,
	DisplayPointActivationType_Purchasable             = 2,
	DisplayPointActivationType_Winnable                = 3,
	DisplayPointActivationType_MAX                     = 4
};*/

// Enum APBGame.cSDD.etDisplayPointType
/*enum etDisplayPointType
{
	DisplayPointType_None                              = 0,
	DisplayPointType_Audio                             = 1,
	DisplayPointType_Graffiti                          = 2,
	DisplayPointType_Statue                            = 3,
	DisplayPointType_Vehicle                           = 4,
	DisplayPointType_MAX                               = 5
};*/

// Enum APBGame.cSDD.etDistrictFirstEntry
/*enum etDistrictFirstEntry
{
	DistrictFirstEntry_Standard                        = 0,
	DistrictFirstEntry_MAX                             = 1
};*/

// Enum APBGame.cSDD.etDistrictTypeInfo
/*enum etDistrictTypeInfo
{
	DistrictTypeInfo_None                              = 0,
	DistrictTypeInfo_Action                            = 1,
	DistrictTypeInfo_Social                            = 2,
	DistrictTypeInfo_Tutorial                          = 3,
	DistrictTypeInfo_MAX                               = 4
};*/

// Enum APBGame.cSDD.etEncumbrance
/*enum etEncumbrance
{
	Encumbrance_None                                   = 0,
	Encumbrance_Small_No_Crouch_Move                   = 1,
	Encumbrance_Small_No_Crouch                        = 2,
	Encumbrance_Small_No_Jump                          = 3,
	Encumbrance_Small_No_Crouch_Move_Or_Jump           = 4,
	Encumbrance_Small_No_Crouch_Or_Jump                = 5,
	Encumbrance_Medium                                 = 6,
	Encumbrance_Medium_No_Crouch_Move                  = 7,
	Encumbrance_Medium_No_Crouch                       = 8,
	Encumbrance_Medium_No_Jump                         = 9,
	Encumbrance_Medium_No_Crouch_Move_Or_Jump          = 10,
	Encumbrance_Medium_No_Crouch_Or_Jump               = 11,
	Encumbrance_Large                                  = 12,
	Encumbrance_Large_No_Crouch_Move                   = 13,
	Encumbrance_Large_No_Crouch                        = 14,
	Encumbrance_Large_No_Jump                          = 15,
	Encumbrance_Large_No_Crouch_Move_Or_Jump           = 16,
	Encumbrance_All                                    = 17,
	Encumbrance_Small_No_Sprint                        = 18,
	Encumbrance_MAX                                    = 19
};*/

// Enum APBGame.cSDD.etErrorCode
/*enum etErrorCode
{
	ERROR_OK                                           = 0,
	ERROR_ASYNCHRONOUS                                 = 1,
	ERROR_ABANDON_TIMER_ACTIVE                         = 2,
	ERROR_ALREADY_HAS_MISSION                          = 3,
	ERROR_ALREADY_INTERACTING                          = 4,
	ERROR_AWAITING_REPLICATION                         = 5,
	ERROR_BAD_SDD_DATA                                 = 6,
	ERROR_CANT_EQUIP_ITEM_IN_VEHICLE                   = 7,
	ERROR_CANT_UNDEPLOY_ITEM_IN_VEHICLE                = 8,
	ERROR_CONTACT_LOCKED                               = 9,
	ERROR_CONTACT_NOT_MISSION_PROVIDER                 = 10,
	ERROR_CONTACT_NOT_TUTOR                            = 11,
	ERROR_CONTACT_NOT_FOUND_IN_LEVEL                   = 12,
	ERROR_CONTROLLER_HAS_NO_PAWN                       = 13,
	ERROR_CONTROLLER_HAS_NO_SCORER                     = 14,
	ERROR_COULD_NOT_DEPLOY_ITEM                        = 15,
	ERROR_DECLINE_TIMER_ACTIVE                         = 16,
	ERROR_FEE_TOO_SMALL                                = 17,
	ERROR_GROUP_TOO_LARGE                              = 18,
	ERROR_GROUP_TOO_SMALL                              = 19,
	ERROR_ILLEGAL_CATEGORY                             = 20,
	ERROR_INSIDE_VEHICLE                               = 21,
	ERROR_OUTSIDE_AMMO_ZONE                            = 22,
	ERROR_INSUFFICIENT_CASH                            = 23,
	ERROR_INSUFFICIENT_RTW_POINTS                      = 24,
	ERROR_INSUFFICIENT_MILESTONE                       = 25,
	ERROR_INSUFFICIENT_RATING                          = 26,
	ERROR_INSUFFICIENT_ROLE                            = 27,
	ERROR_INVALID_CONTACT                              = 28,
	ERROR_INVALID_CONTROLLER                           = 29,
	ERROR_INVALID_CREATOR                              = 30,
	ERROR_INVALID_DEPLOYMENT_SLOT                      = 31,
	ERROR_INVALID_DISPLAY_POINT_TYPE                   = 32,
	ERROR_INVALID_DISTRICT                             = 33,
	ERROR_INVALID_DURATION                             = 34,
	ERROR_INVALID_FACTION                              = 35,
	ERROR_INVALID_FNMOD                                = 36,
	ERROR_INVALID_FNMOD_SLOT                           = 37,
	ERROR_INVALID_FNMOD_SLOT_NOT_VACANT                = 38,
	ERROR_INVALID_FNMOD_TYPE                           = 39,
	ERROR_INVALID_INVENTORY_SLOT                       = 40,
	ERROR_INVALID_ITEM_NOT_CUSTOMISABLE                = 41,
	ERROR_INVALID_ITEM_TYPE                            = 42,
	ERROR_INVALID_LOCOMOTION_STATE                     = 43,
	ERROR_INVALID_METADATA_FILTER                      = 44,
	ERROR_INVALID_MISSION                              = 45,
	ERROR_INVALID_PARAM                                = 46,
	ERROR_INVALID_QUANTITY                             = 47,
	ERROR_INVALID_SEX                                  = 48,
	ERROR_INVALID_TIME_OF_DAY                          = 49,
	ERROR_INVENTORY_LOCKED_FROM_TRANSACTION            = 50,
	ERROR_DISALLOW_HEAT_LEVEL                          = 51,
	ERROR_INVALID_USABLE_SLOT                          = 52,
	ERROR_INVENTORY_TABLE_FULL                         = 53,
	ERROR_ITEM_DOESNT_NEED_REFURBISHED                 = 54,
	ERROR_ITEM_IS_DEPLOYED                             = 55,
	ERROR_ITEM_IS_STACKED                              = 56,
	ERROR_ITEM_IS_TIME_LIMITED                         = 57,
	ERROR_ITEM_NOT_ACTIVE                              = 58,
	ERROR_ITEM_NOT_AVAILABLE                           = 59,
	ERROR_ITEM_NOT_BOUND                               = 60,
	ERROR_ITEM_NOT_DEPLOYED                            = 61,
	ERROR_ITEM_NOT_FOR_SALE                            = 62,
	ERROR_ITEM_NOT_FOUND                               = 63,
	ERROR_ITEM_NOT_PAID_FOR                            = 64,
	ERROR_ITEM_NOT_TRADEABLE                           = 65,
	ERROR_ITEM_NOT_REMOVABLE                           = 66,
	ERROR_ITEM_NOT_UNLOCKED                            = 67,
	ERROR_LEADER_ABSENT                                = 68,
	ERROR_MISSION_ACTIVE                               = 69,
	ERROR_NOT_CLIENT_FUNCTION                          = 70,
	ERROR_NOT_HOSTED_MODE                              = 71,
	ERROR_NOT_LEADER                                   = 72,
	ERROR_NO_ITEMS_IN_PACKAGE                          = 73,
	ERROR_NO_PLEDGED_CONTACT                           = 74,
	ERROR_NO_VENDOR_CONTACT                            = 75,
	ERROR_PLAYER_DIDNT_CREATE_ITEM                     = 76,
	ERROR_SLOT_IN_USE                                  = 77,
	ERROR_STACKING_SLOT_UNAVAILABLE                    = 78,
	ERROR_STRING_TOO_LONG                              = 79,
	ERROR_TIME_TOO_EARLY                               = 80,
	ERROR_TIME_TOO_LATE                                = 81,
	ERROR_KNOWN_TRANSACTION_FAILURE                    = 82,
	ERROR_UNKNOWN_TRANSACTION_FAILURE                  = 83,
	ERROR_UNKNOWN_CATEGORY                             = 84,
	ERROR_UNKNOWN_COMMAND                              = 85,
	ERROR_UNKNOWN_DISPLAY_POINT                        = 86,
	ERROR_USABLE_ACTIVE                                = 87,
	ERROR_USABLE_INACTIVE                              = 88,
	ERROR_USABLE_AFFECTED_ITEM_NOT_DEPLOYED            = 89,
	ERROR_USABLE_FNMOD_UNAVAILABLE                     = 90,
	ERROR_USABLE_GLOBAL_COOLDOWN_TIMER_ACTIVE          = 91,
	ERROR_USABLE_REUSE_GROUP_MISSION_CHECK_FAILED      = 92,
	ERROR_USABLE_REUSE_GROUP_TIMER_ACTIVE              = 93,
	ERROR_XML_FAILURE                                  = 94,
	ERROR_LAST_UNDERWEAR                               = 95,
	ERROR_USABLE_PLAYER_IN_VEHICLE                     = 96,
	ERROR_MAX                                          = 97
};*/

// Enum APBGame.cSDD.etFacialHairRandomGeneration
/*enum etFacialHairRandomGeneration
{
	FacialHairRandomGeneration_ChanceOfFacialHair      = 0,
	FacialHairRandomGeneration_ChanceOfBodilyHair      = 1,
	FacialHairRandomGeneration_MAX                     = 2
};*/

// Enum APBGame.cSDD.etFaction
/*enum etFaction
{
	kFACTION_None                                      = 0,
	kFACTION_Enforcer                                  = 1,
	kFACTION_Criminal                                  = 2,
	kFACTION_Both                                      = 3,
	kFACTION_MAX                                       = 4
};*/

// Enum APBGame.cSDD.etFeedbackMessage
/*enum etFeedbackMessage
{
	FeedbackQuestion_None                              = 0,
	FeedbackQuestion_Standard                          = 1,
	FeedbackQuestion_Special                           = 2,
	FeedbackQuestion_BalancedMatch                     = 3,
	FeedbackQuestion_NotReadyNag                       = 4,
	FeedbackQuestion_MAX                               = 5
};*/

// Enum APBGame.cSDD.etFireOffset
/*enum etFireOffset
{
	FireOffset_Normal                                  = 0,
	FireOffset_VehicleLeft                             = 1,
	FireOffset_VehicleRight                            = 2,
	FireOffset_Grenade                                 = 3,
	FireOffset_LeanTowardScreenCentre                  = 4,
	FireOffset_MAX                                     = 5
};*/

// Enum APBGame.cSDD.etFXMaterialImpact
/*enum etFXMaterialImpact
{
	FXMI_Default                                       = 0,
	FXMI_Concrete                                      = 1,
	FXMI_MetalVehicle                                  = 2,
	FXMI_Metal                                         = 3,
	FXMI_Flesh                                         = 4,
	FXMI_Wood                                          = 5,
	FXMI_Asphalt                                       = 6,
	FXMI_Brick                                         = 7,
	FXMI_Foliage                                       = 8,
	FXMI_Glass                                         = 9,
	FXMI_Stone                                         = 10,
	FXMI_Earth                                         = 11,
	FXMI_Cloth                                         = 12,
	FXMI_Water                                         = 13,
	FXMI_Sand                                          = 14,
	FXMI_ShallowWater                                  = 15,
	FXMI_MAX                                           = 16
};*/

// Enum APBGame.cSDD.etGameplayEvent_VehicleHealth
/*enum etGameplayEvent_VehicleHealth
{
	DeliverVehicle_OpenWorld_Damaged                   = 0,
	DeliverVehicle_OpenWorld_Perfect                   = 1,
	DeliverVehicle_OpenWorld_MAX                       = 2
};*/

// Enum APBGame.cSDD.etGameplayEventCategory
/*enum etGameplayEventCategory
{
	GameplayEventCategory_None                         = 0,
	GameplayEventCategory_Abandon_Match                = 1,
	GameplayEventCategory_Abandon_Match_Fail           = 2,
	GameplayEventCategory_Ammo_FromLocker              = 3,
	GameplayEventCategory_AmmoZone_Begin               = 4,
	GameplayEventCategory_AmmoZone_BuySomeAmmo         = 5,
	GameplayEventCategory_AmmoZone_Deactivate          = 6,
	GameplayEventCategory_Arrest_Player                = 7,
	GameplayEventCategory_ArrestedBy_Enforcer          = 8,
	GameplayEventCategory_Attacked_InvulnerablePlayer  = 9,
	GameplayEventCategory_Become_Group_Leader          = 10,
	GameplayEventCategory_Become_Side_Leader           = 11,
	GameplayEventCategory_Become_Side_VIP              = 12,
	GameplayEventCategory_CallFor_Backup               = 13,
	GameplayEventCategory_Change_MissionOfferSettingFail = 14,
	GameplayEventCategory_Contact_Error                = 15,
	GameplayEventCategory_Contact_LevelUp              = 16,
	GameplayEventCategory_Contact_Pledge               = 17,
	GameplayEventCategory_Contact_Referal              = 18,
	GameplayEventCategory_CSA_Begin                    = 19,
	GameplayEventCategory_CSA_End                      = 20,
	GameplayEventCategory_CustomiseStats_Broker        = 21,
	GameplayEventCategory_CustomiseStats_FashionMogul  = 22,
	GameplayEventCategory_CustomiseStats_ImageDesign   = 23,
	GameplayEventCategory_CustomiseStats_Profiteer     = 24,
	GameplayEventCategory_CustomiseStats_WeaponSmith_FNModsApplied = 25,
	GameplayEventCategory_Damage_Pedestrian            = 26,
	GameplayEventCategory_Damage_Player                = 27,
	GameplayEventCategory_Damage_Prop                  = 28,
	GameplayEventCategory_Damage_Vehicle               = 29,
	GameplayEventCategory_Damaged_TaskTarget_ObstructionDamage = 30,
	GameplayEventCategory_Death1                       = 31,
	GameplayEventCategory_Death2                       = 32,
	GameplayEventCategory_DeliverItem_Checkpoint       = 33,
	GameplayEventCategory_DeliverItem_Mission          = 34,
	GameplayEventCategory_DeliverItem_OpenWorld        = 35,
	GameplayEventCategory_DeliverItem_OpenWorld_Fail   = 36,
	GameplayEventCategory_DeliverVehicle_Fail          = 37,
	GameplayEventCategory_DeliverVehicle_OpenWorld     = 38,
	GameplayEventCategory_DeployAmmoCarrier            = 39,
	GameplayEventCategory_Destroy_Prop                 = 40,
	GameplayEventCategory_Destroy_Vehicle              = 41,
	GameplayEventCategory_Dispatched                   = 42,
	GameplayEventCategory_Display_Graffiti_Fail        = 43,
	GameplayEventCategory_DisplayPoint_Taken           = 44,
	GameplayEventCategory_DistrictEnter                = 45,
	GameplayEventCategory_DistrictLeave                = 46,
	GameplayEventCategory_Drive_StolenVehicle          = 47,
	GameplayEventCategory_Earned_Medal                 = 48,
	GameplayEventCategory_Ended_ArrestStreak           = 49,
	GameplayEventCategory_Ended_KillStreak             = 50,
	GameplayEventCategory_Ended_Mission                = 51,
	GameplayEventCategory_Ended_Mission2               = 52,
	GameplayEventCategory_Ended_MissionType            = 53,
	GameplayEventCategory_Enter_Resupply_Zone          = 54,
	GameplayEventCategory_Fire_Weapon                  = 55,
	GameplayEventCategory_Health_Regenerated           = 56,
	GameplayEventCategory_Heat_ChangeLevel             = 57,
	GameplayEventCategory_Heat_PayOff                  = 58,
	GameplayEventCategory_Hijack_LCVehicle             = 59,
	GameplayEventCategory_Hotwire_Vehicle              = 60,
	GameplayEventCategory_Immunity_End                 = 61,
	GameplayEventCategory_Immunity_Start               = 62,
	GameplayEventCategory_ItemOperation_Fail           = 63,
	GameplayEventCategory_JoinGroup_LeaderInDifferentMission = 64,
	GameplayEventCategory_JoinGroup_PledgedToLockedContact = 65,
	GameplayEventCategory_Kill_DriverAssist            = 66,
	GameplayEventCategory_Kill_EnemyTeamAnnihilation   = 67,
	GameplayEventCategory_Kill_FromBehind              = 68,
	GameplayEventCategory_Kill_Group_LeaningOutOfVehicle = 69,
	GameplayEventCategory_Kill_GroupInVehicle          = 70,
	GameplayEventCategory_Kill_Pedestrian              = 71,
	GameplayEventCategory_Kill_Player                  = 72,
	GameplayEventCategory_Kill_Player_InVehicleWithGrenade = 73,
	GameplayEventCategory_Kill_Player_LeaningOutOfVehicle = 74,
	GameplayEventCategory_Kill_Player_Task_Target      = 75,
	GameplayEventCategory_Kill_WhileDriving            = 76,
	GameplayEventCategory_KillAssist_Player            = 77,
	GameplayEventCategory_KillStats_AgainstTaskItemCarriers = 78,
	GameplayEventCategory_Knocked_Out                  = 79,
	GameplayEventCategory_Knocked_Player_Out           = 80,
	GameplayEventCategory_LocationBeacon_Enter         = 81,
	GameplayEventCategory_MailBox_Begin                = 82,
	GameplayEventCategory_Mission_AwardMVP             = 83,
	GameplayEventCategory_Mission_BackupGroupArrived   = 84,
	GameplayEventCategory_Mission_BackupPlayerArrived  = 85,
	GameplayEventCategory_Mission_CashPaid             = 86,
	GameplayEventCategory_Mission_DispatchedVsGroup    = 87,
	GameplayEventCategory_Mission_DispatchedVsPlayer   = 88,
	GameplayEventCategory_Mission_Offer                = 89,
	GameplayEventCategory_Mission_OppositionGroupAdded = 90,
	GameplayEventCategory_Mission_OppositionGroupAssigned = 91,
	GameplayEventCategory_Mission_OppositionPlayerAdded = 92,
	GameplayEventCategory_Mission_OppositionPlayerAssigned = 93,
	GameplayEventCategory_Mission_OppositionPlayerRemoved = 94,
	GameplayEventCategory_Mission_OwnerGroupAdded      = 95,
	GameplayEventCategory_Mission_OwnerPlayerAdded     = 96,
	GameplayEventCategory_Mission_OwnerPlayerRemoved   = 97,
	GameplayEventCategory_Mission_Stage                = 98,
	GameplayEventCategory_Mission_TaskTargetCompleted  = 99,
	GameplayEventCategory_ModeTimer                    = 100,
	GameplayEventCategory_Mug_Pedestrian               = 101,
	GameplayEventCategory_NotReadyNagMessage           = 102,
	GameplayEventCategory_On_ArrestStreak              = 103,
	GameplayEventCategory_On_KillStreak                = 104,
	GameplayEventCategory_On_TakeoutStreak             = 105,
	GameplayEventCategory_OpenWorldItem_Spawned        = 106,
	GameplayEventCategory_Organisation_LevelUp         = 107,
	GameplayEventCategory_OutOf_Bullets                = 108,
	GameplayEventCategory_OutOf_Grenades               = 109,
	GameplayEventCategory_OutOf_Projectiles            = 110,
	GameplayEventCategory_Passenger_StolenVehicle      = 111,
	GameplayEventCategory_PlayerTaskTargetProtected    = 112,
	GameplayEventCategory_RamRaidOrBust_OpenWorld      = 113,
	GameplayEventCategory_ReadyStateChanged_Group      = 114,
	GameplayEventCategory_ReadyStateChanged_Leader     = 115,
	GameplayEventCategory_ReadyStateChanged_Player     = 116,
	GameplayEventCategory_Receive_CashOnly_Reward      = 117,
	GameplayEventCategory_Receive_Damage               = 118,
	GameplayEventCategory_Receive_Organisation_Reward  = 119,
	GameplayEventCategory_RemovedFromGroup             = 120,
	GameplayEventCategory_Rescue_Arrested_Player       = 121,
	GameplayEventCategory_Rescued_By_Player            = 122,
	GameplayEventCategory_Resupplied_Ammo_To_Player    = 123,
	GameplayEventCategory_Resupplied_AmmoClips         = 124,
	GameplayEventCategory_Resupply_Fail                = 125,
	GameplayEventCategory_Reward_NewMail               = 126,
	GameplayEventCategory_Reward_RandomRewardGained    = 127,
	GameplayEventCategory_RewardPackage_ConsumptionError = 128,
	GameplayEventCategory_Role_LevelUp                 = 129,
	GameplayEventCategory_Song_Produced                = 130,
	GameplayEventCategory_SpawnPlayer                  = 131,
	GameplayEventCategory_SprintedDistance             = 132,
	GameplayEventCategory_Start_Mission                = 133,
	GameplayEventCategory_StolenItem                   = 134,
	GameplayEventCategory_StreetVolume_Enter           = 135,
	GameplayEventCategory_Task_Item_Delivered          = 136,
	GameplayEventCategory_Task_Time_OneMinuteRemaining = 137,
	GameplayEventCategory_TaskItem_Spawned             = 138,
	GameplayEventCategory_TestFire_Weapon              = 139,
	GameplayEventCategory_Threat_Changed               = 140,
	GameplayEventCategory_Vehicle_BeginRepair          = 141,
	GameplayEventCategory_Vehicle_BrokenInto           = 142,
	GameplayEventCategory_Vehicle_Cargo_Full           = 143,
	GameplayEventCategory_Vehicle_Critical             = 144,
	GameplayEventCategory_Vehicle_EndRepair            = 145,
	GameplayEventCategory_Vehicle_EnterFail            = 146,
	GameplayEventCategory_Vehicle_ReceiveDamage        = 147,
	GameplayEventCategory_Vehicle_SpawnFail            = 148,
	GameplayEventCategory_Vehicle_SpawnSuccess         = 149,
	GameplayEventCategory_WinStreak_Mission            = 150,
	GameplayEventCategory_Witness_Crime                = 151,
	GameplayEventCategory_WitnessedBy_Enforcer         = 152,
	GameplayEventCategory_WitnessedBy_NPC              = 153,
	GameplayEventCategory_Won_Match                    = 154,
	GameplayEventCategory_MAX                          = 155
};*/

// Enum APBGame.cSDD.etGameplayEventMutuallyExclusiveGroup
/*enum etGameplayEventMutuallyExclusiveGroup
{
	GameplayEventMutuallyExclusiveGroup_NotExclusive   = 0,
	GameplayEventMutuallyExclusiveGroup                = 1,
	GameplayEventMutuallyExclusiveGroup01              = 2,
	GameplayEventMutuallyExclusiveGroup02              = 3,
	GameplayEventMutuallyExclusiveGroup03              = 4,
	GameplayEventMutuallyExclusiveGroup04              = 5,
	GameplayEventMutuallyExclusiveGroup05              = 6,
	GameplayEventMutuallyExclusiveGroup06              = 7,
	GameplayEventMutuallyExclusiveGroup07              = 8,
	GameplayEventMutuallyExclusiveGroup08              = 9,
	GameplayEventMutuallyExclusiveGroup09              = 10,
	GameplayEventMutuallyExclusiveGroup10              = 11,
	GameplayEventMutuallyExclusiveGroup11              = 12,
	GameplayEventMutuallyExclusiveGroup12              = 13,
	GameplayEventMutuallyExclusiveGroup13              = 14,
	GameplayEventMutuallyExclusiveGroup14              = 15,
	GameplayEventMutuallyExclusiveGroup_MAX            = 16
};*/

// Enum APBGame.cSDD.etGameplayObjectFixed
/*enum etGameplayObjectFixed
{
	GameplayObjectFixed_None                           = 0,
	GameplayObjectFixed_Checkpoint_Misc                = 1,
	GameplayObjectFixed_Pedestrian_LivingCity          = 2,
	GameplayObjectFixed_PlayerCharacter_Criminal       = 3,
	GameplayObjectFixed_PlayerCharacter_Enforcer       = 4,
	GameplayObjectFixed_Prop_Misc                      = 5,
	GameplayObjectFixed_TaskItem_OpenWorld             = 6,
	GameplayObjectFixed_Vehicle_Misc                   = 7,
	GameplayObjectFixed_MAX                            = 8
};*/

// Enum APBGame.cSDD.etGameplayState
/*enum etGameplayState
{
	GameplayState_None                                 = 0,
	GameplayState_Player                               = 1,
	GameplayState_Player_Arrested                      = 2,
	GameplayState_Player_Driving                       = 3,
	GameplayState_Player_VCP                           = 4,
	GameplayState_Player_VIP                           = 5,
	GameplayState_Vehicle_Free_PlayerControlled        = 6,
	GameplayState_Vehicle_Free_Unoccupied              = 7,
	GameplayState_Vehicle_LivingCity_Abandoned         = 8,
	GameplayState_Vehicle_LivingCity_AIControlled      = 9,
	GameplayState_Vehicle_LivingCity_PlayerControlled  = 10,
	GameplayState_Vehicle_Other                        = 11,
	GameplayState_Vehicle_PlayerDeployed               = 12,
	GameplayState_Vehicle_TaskTarget_PlayerControlled  = 13,
	GameplayState_Vehicle_TaskTarget_Unoccupied        = 14,
	GameplayState_MAX                                  = 15
};*/

// Enum APBGame.cSDD.etGameplayVehicleHealthRange
/*enum etGameplayVehicleHealthRange
{
	Pristine                                           = 0,
	Damaged                                            = 1,
	etGameplayVehicleHealthRange_MAX                   = 2
};*/

// Enum APBGame.cSDD.etGenericVFXEvent
/*enum etGenericVFXEvent
{
	VFXEventGroup_None                                 = 0,
	VFXEventGroup_Character                            = 1,
	VFXEventGroup_Vehicle                              = 2,
	VFXEventGroup_MAX                                  = 3
};*/

// Enum APBGame.cSDD.etGraffitiInteractionType
/*enum etGraffitiInteractionType
{
	GraffitiInteractionType_Default                    = 0,
	GraffitiInteractionType_TargetedClose              = 1,
	GraffitiInteractionType_TargetedDistant            = 2,
	GraffitiInteractionType_MAX                        = 3
};*/

// Enum APBGame.cSDD.etH2HAttackDir
/*enum etH2HAttackDir
{
	Clockwise                                          = 0,
	CounterClockwise                                   = 1,
	etH2HAttackDir_MAX                                 = 2
};*/

// Enum APBGame.cSDD.etHeatConstant
/*enum etHeatConstant
{
	HeatConstant_DecayDelay                            = 0,
	HeatConstant_DecayInterval                         = 1,
	HeatConstant_DecayRate                             = 2,
	HeatConstant_EquilibriumAmount                     = 3,
	HeatConstant_HeatAmountMax                         = 4,
	HeatConstant_PayForHeatPrice                       = 5,
	HeatConstant_UnDecayDelay                          = 6,
	HeatConstant_UnDecayInterval                       = 7,
	HeatConstant_UnDecayRate                           = 8,
	HeatConstant_MAX                                   = 9
};*/

// Enum APBGame.cSDD.etHeatFunctionality
/*enum etHeatFunctionality
{
	RulesetHeat_Off                                    = 0,
	RulesetHeat_NoPvPUnlockToAllOpposingFaction        = 1,
	RulesetHeat_Full                                   = 2,
	RulesetHeat_MAX                                    = 3
};*/

// Enum APBGame.cSDD.etHostingConfigFile
/*enum etHostingConfigFile
{
	HostingConfigFile_Account                          = 0,
	HostingConfigFile_TutorialSettings                 = 1,
	HostingConfigFile_Account3                         = 2,
	HostingConfigFile_Account4                         = 3,
	HostingConfigFile_Account5                         = 4,
	HostingConfigFile_AccountTutorialSettings          = 5,
	HostingConfigFile_AccountPersistentUI              = 6,
	HostingConfigFile_AccountPersistent3               = 7,
	HostingConfigFile_AccountPersistent4               = 8,
	HostingConfigFile_AccountPersistent5               = 9,
	HostingConfigFile_CharacterMisc                    = 10,
	HostingConfigFile_Character4                       = 11,
	HostingConfigFile_Character5                       = 12,
	HostingConfigFile_CharacterPersistent1             = 13,
	HostingConfigFile_CharacterPersistent2             = 14,
	HostingConfigFile_CharacterPersistent3             = 15,
	HostingConfigFile_CharacterPersistent4             = 16,
	HostingConfigFile_CharacterPersistent5             = 17,
	HostingConfigFile_InputBindings                    = 18,
	HostingConfigFile_UserOptions                      = 19,
	HostingConfigFile_MAX                              = 20
};*/

// Enum APBGame.cSDD.etHostingConfigFileAccountPersistentId
/*enum etHostingConfigFileAccountPersistentId
{
	kConfigAccountPersistentNone                       = 0,
	kConfigAccountPersistent1                          = 1,
	kConfigAccountPersistent2                          = 2,
	kConfigAccountPersistent3                          = 3,
	kConfigAccountPersistent4                          = 4,
	kConfigAccountPersistent5                          = 5,
	etHostingConfigFileAccountPersistentId_MAX         = 6
};*/

// Enum APBGame.cSDD.etHostingConfigFileCharacterPersistentId
/*enum etHostingConfigFileCharacterPersistentId
{
	kConfigCharacterPersistentNone                     = 0,
	kConfigCharacterPersistent1                        = 1,
	kConfigCharacterPersistent2                        = 2,
	kConfigCharacterPersistent3                        = 3,
	kConfigCharacterPersistent4                        = 4,
	kConfigCharacterPersistent5                        = 5,
	etHostingConfigFileCharacterPersistentId_MAX       = 6
};*/

// Enum APBGame.cSDD.etHostingConfigFileType
/*enum etHostingConfigFileType
{
	kHostingConfigFileType_Account                     = 0,
	kHostingConfigFileType_Character                   = 1,
	kHostingConfigFileType_MAX                         = 2
};*/

// Enum APBGame.cSDD.etHUDCeremonyMsgType
/*enum etHUDCeremonyMsgType
{
	HUDCeremonyMsgType_None                            = 0,
	HUDCeremonyMsgType_Contact                         = 1,
	HUDCeremonyMsgType_Heat                            = 2,
	HUDCeremonyMsgType_League                          = 3,
	HUDCeremonyMsgType_Medal                           = 4,
	HUDCeremonyMsgType_Organisation                    = 5,
	HUDCeremonyMsgType_Role                            = 6,
	HUDCeremonyMsgType_Threat                          = 7,
	HUDCeremonyMsgType_MAX                             = 8
};*/

// Enum APBGame.cSDD.etHUDConstant
/*enum etHUDConstant
{
	HUDConstant_ActionMessage_FadeOutTime              = 0,
	HUDConstant_ActionMessage_MaxDisplayedMessages     = 1,
	HUDConstant_ActionMessage_OpaqueDisplayTime        = 2,
	HUDConstant_Ammo_MaxQuantity                       = 3,
	HUDConstant_Ammo_MinQuantity                       = 4,
	HUDConstant_Chat_MaxTabNum                         = 5,
	HUDConstant_ChatNotification_DisplayTime           = 6,
	HUDConstant_ChatNotification_UpdateMessageDelay    = 7,
	HUDConstant_CrimeList_BarDuration                  = 8,
	HUDConstant_DistrictMap_MouseOverSizeModifier      = 9,
	HUDConstant_DistrictMessage_MaxMessages            = 10,
	HUDConstant_Heat_FlashDuration                     = 11,
	HUDConstant_Heat_FlashTriggerAmount                = 12,
	HUDConstant_Heat_RateOfChangePerSecond             = 13,
	HUDConstant_Hit_BloodFadeTime                      = 14,
	HUDConstant_Hit_DamageMax                          = 15,
	HUDConstant_Hit_DamageMin                          = 16,
	HUDConstant_Hit_NumIndicators                      = 17,
	HUDConstant_Hit_ThicknessMax                       = 18,
	HUDConstant_Hit_ThicknessMin                       = 19,
	HUDConstant_Hit_TimeMax                            = 20,
	HUDConstant_Hit_TimeMin                            = 21,
	HUDConstant_HUDMarker_ArrowDrawDistance            = 22,
	HUDConstant_HUDMarker_FlashRate                    = 23,
	HUDConstant_HUDMessage_SpawnHideTime               = 24,
	HUDConstant_InfoBrowser_DistanceThreshold          = 25,
	HUDConstant_Lobby_GametimeLowWarning               = 26,
	HUDConstant_Locale_HudMsgSupressTime               = 27,
	HUDConstant_Locale_PlayerHeight                    = 28,
	HUDConstant_Locale_PlayerRadius                    = 29,
	HUDConstant_LowHealth_Begin                        = 30,
	HUDConstant_LowHealth_End                          = 31,
	HUDConstant_LowHealth_MaxOpacity                   = 32,
	HUDConstant_LowHealth_Power                        = 33,
	HUDConstant_LowHealthAndStamina_Blur               = 34,
	HUDConstant_LowStamina_Begin                       = 35,
	HUDConstant_LowStamina_End                         = 36,
	HUDConstant_LowStamina_MaxOpacity                  = 37,
	HUDConstant_LowStamina_Power                       = 38,
	HUDConstant_Mail_OpacityRateOfChange               = 39,
	HUDConstant_MeshViewer_NightLevel                  = 40,
	HUDConstant_MeshViewer_TimeOfDay                   = 41,
	HUDConstant_MissionTimeLimit_AudioThreashold_Seconds = 42,
	HUDConstant_MissionTimeLimit_BonusDisplayTime      = 43,
	HUDConstant_MissionTimeLimit_ChangeDisplayTime     = 44,
	HUDConstant_MissionValue_ChangeDisplayTime         = 45,
	HUDConstant_MusicInfo_ShowDelay                    = 46,
	HUDConstant_MusicInfo_UpdateDelay                  = 47,
	HUDConstant_Radar_ContourDistance                  = 48,
	HUDConstant_RadarRadius_InVehicle                  = 49,
	HUDConstant_RadarRadius_Min                        = 50,
	HUDConstant_RadarRadius_OnFoot                     = 51,
	HUDConstant_Reticule_RateOfChange                  = 52,
	HUDConstant_Standing_RateOfChange                  = 53,
	HUDConstant_TaskMarker_BufferX                     = 54,
	HUDConstant_TaskMarker_BufferY                     = 55,
	HUDConstant_TaskMarker_DistanceMax                 = 56,
	HUDConstant_TaskMarker_DistanceMin                 = 57,
	HUDConstant_TaskMarker_Ellipse_ScreenHeightPercentage = 58,
	HUDConstant_TaskMarker_Ellipse_ScreenWidthPercentage = 59,
	HUDConstant_TaskMarker_OpacityMax                  = 60,
	HUDConstant_TaskMarker_OpacityRateOfChange         = 61,
	HUDConstant_TaskMarker_OverlapOpacity              = 62,
	HUDConstant_TaskMarker_ProjectionPadding           = 63,
	HUDConstant_TaskMarker_ScreenSize                  = 64,
	HUDConstant_TutorialDistrictExitPromptDelay        = 65,
	HUDConstant_Tutorials_ReticuleTime                 = 66,
	HUDConstant_VOIP_Active_LowMax                     = 67,
	HUDConstant_VOIP_Active_MediumMax                  = 68,
	HUDConstant_Waypoints_MaxNumGroup                  = 69,
	HUDConstant_Waypoints_MaxNumPersonal               = 70,
	HUDConstant_WeaponInfo_DeltaOpacity                = 71,
	HUDConstant_WeaponInfo_InCarNoEquipOpacity         = 72,
	HUDConstant_WeaponInfo_InCarOpacity                = 73,
	HUDConstant_WSCI_DefaultMarkerSize                 = 74,
	HUDConstant_WSCI_FadeDistance                      = 75,
	HUDConstant_WSCI_MaxOpacity                        = 76,
	HUDConstant_WSCI_MaxScale                          = 77,
	HUDConstant_WSCI_MinScale                          = 78,
	HUDConstant_WSCI_OffsetZ                           = 79,
	HUDConstant_WSCI_OpacityRateOfChange               = 80,
	HUDConstant_WSCI_OverlapOpacity1                   = 81,
	HUDConstant_WSCI_OverlapOpacity2                   = 82,
	HUDConstant_ZoneNotifier_FlashRate                 = 83,
	HUDConstant_ZoneNotifier_SphereTestRadius          = 84,
	HUDConstant_MAX                                    = 85
};*/

// Enum APBGame.cSDD.etHUDConstantBool
/*enum etHUDConstantBool
{
	HUDConstantBool_CharacterMarkers_ShowCarPassengers = 0,
	HUDConstantBool_CharacterMarkers_ShowThreat        = 1,
	HUDConstantBool_Radar_FullModeOnly                 = 2,
	HUDConstantBool_Radar_ShowContours                 = 3,
	HUDConstantBool_Radar_ShowMap                      = 4,
	HUDConstantBool_Radar_ZoomEnabled                  = 5,
	HUDConstantBool_Reticule_ShowBlockedLineOfSight    = 6,
	HUDConstantBool_ScoreboardOn                       = 7,
	HUDConstantBool_TargetInfo_On                      = 8,
	HUDConstantBool_TaskMarkers_OnEdge_Distance        = 9,
	HUDConstantBool_TaskMarkers_OnEdge_ID              = 10,
	HUDConstantBool_TaskMarkers_OnEdge_Objective       = 11,
	HUDConstantBool_TaskMarkers_OnEdge_Text            = 12,
	HUDConstantBool_MAX                                = 13
};*/

// Enum APBGame.cSDD.etHudGroupState
/*enum etHudGroupState
{
	HTS_Solo_Ready                                     = 0,
	HTS_Solo_NotReady                                  = 1,
	HTS_Group_Ready                                    = 2,
	HTS_Group_NotReady                                 = 3,
	HTS_Group_Waiting                                  = 4,
	HTS_OnMission                                      = 5,
	HTS_MAX                                            = 6
};*/

// Enum APBGame.cSDD.etHUDInfoBrowser
/*enum etHUDInfoBrowser
{
	InfoBrowser_None                                   = 0,
	InfoBrowser_Character                              = 1,
	InfoBrowser_Contact                                = 2,
	InfoBrowser_DisplayPoint                           = 3,
	InfoBrowser_OpenWorld                              = 4,
	InfoBrowser_RouteControl                           = 5,
	InfoBrowser_Vehicle                                = 6,
	InfoBrowser_Vending                                = 7,
	InfoBrowser_MAX                                    = 8
};*/

// Enum APBGame.cSDD.etHUDMarkerCategory
/*enum etHUDMarkerCategory
{
	HUDMarkerCategory_None                             = 0,
	HUDMarkerCategory_RouteControl                     = 1,
	HUDMarkerCategory_HiddenDuringTask                 = 2,
	HUDMarkerCategory_VehiclePosition                  = 3,
	HUDMarkerCategory_VehicleSpawnBay                  = 4,
	HUDMarkerCategory_AmmoSupplyZone                   = 5,
	HUDMarkerCategory_GroupPlayer                      = 6,
	HUDMarkerCategory_OppositionPlayer                 = 7,
	HUDMarkerCategory_Vehicle                          = 8,
	HUDMarkerCategory_Task                             = 9,
	HUDMarkerCategory_SpawnZone                        = 10,
	HUDMarkerCategory_VehicleSpawnZone                 = 11,
	HUDMarkerCategory_VehicleRepairZone                = 12,
	HUDMarkerCategory_CustomisationZone                = 13,
	HUDMarkerCategory_MusicZone                        = 14,
	HUDMarkerCategory_MarketplaceZone                  = 15,
	HUDMarkerCategory_GMPlayer                         = 16,
	HUDMarkerCategory_DisplayPoint                     = 17,
	HUDMarkerCategory_Waypoint                         = 18,
	HUDMarkerCategory_OpenWorldDropOff                 = 19,
	HUDMarkerCategory_Fame                             = 20,
	HUDMarkerCategory_Misc                             = 21,
	HUDMarkerCategory_MAX                              = 22
};*/

// Enum APBGame.cSDD.etHUDMarkerState
/*enum etHUDMarkerState
{
	HUDMarkerState_Active                              = 0,
	HUDMarkerState_Flashing                            = 1,
	HUDMarkerState_Greyed                              = 2,
	HUDMarkerState_Inactive                            = 3,
	HUDMarkerState_Ping_Crouched_Moving                = 4,
	HUDMarkerState_Ping_Crouched_Static                = 5,
	HUDMarkerState_Ping_FireDefault                    = 6,
	HUDMarkerState_Ping_Marksmanship                   = 7,
	HUDMarkerState_Ping_Running                        = 8,
	HUDMarkerState_Ping_Sprinting                      = 9,
	HUDMarkerState_Ping_Static                         = 10,
	HUDMarkerState_Ping_Vehicle_Moving                 = 11,
	HUDMarkerState_Ping_Vehicle_Static                 = 12,
	HUDMarkerState_Ping_Walking                        = 13,
	HUDMarkerState_Task_Neutral                        = 14,
	HUDMarkerState_Task_OppositionAttack               = 15,
	HUDMarkerState_Task_OppositionDefend               = 16,
	HUDMarkerState_Task_OwnerAttack                    = 17,
	HUDMarkerState_Task_OwnerDefend                    = 18,
	HUDMarkerState_MAX                                 = 19
};*/

// Enum APBGame.cSDD.etHUDMarkerUsage
/*enum etHUDMarkerUsage
{
	HUDMarkerUsage_MiniMap                             = 0,
	HUDMarkerUsage_SpawnSelect                         = 1,
	HUDMarkerUsage_All                                 = 2,
	HUDMarkerUsage_MAX                                 = 3
};*/

// Enum APBGame.cSDD.etHUDMessageRank
/*enum etHUDMessageRank
{
	HUDMessagePriority_Low                             = 0,
	HUDMessagePriority_Medium                          = 1,
	HUDMessagePriority_High                            = 2,
	HUDMessagePriority_Tutorial                        = 3,
	HUDMessagePriority_Instant                         = 4,
	HUDMessagePriority_MAX                             = 5
};*/

// Enum APBGame.cSDD.etHUDMessageType
/*enum etHUDMessageType
{
	HUDMessageType_Standard                            = 0,
	HUDMessageType_Locale                              = 1,
	HUDMessageType_Action                              = 2,
	HUDMessageType_Scoreboard                          = 3,
	HUDMessageType_Chat                                = 4,
	HUDMessageType_MAX                                 = 5
};*/

// Enum APBGame.cSDD.etHUDPopUpItemRule
/*enum etHUDPopUpItemRule
{
	HUDPopUpItemRule_Disabled                          = 0,
	HUDPopUpItemRule_Enabled                           = 1,
	HUDPopUpItemRule_InMission                         = 2,
	HUDPopUpItemRule_NotInMission                      = 3,
	HUDPopUpItemRule_InCustomisation                   = 4,
	HUDPopUpItemRule_InSocialDistrict                  = 5,
	HUDPopUpItemRule_InActionDistrict                  = 6,
	HUDPopUpItemRule_CanUnpledgeFromContact            = 7,
	HUDPopUpItemRule_InAmmoResupplyZone                = 8,
	HUDPopUpItemRule_CanOpenScoreboard                 = 9,
	HUDPopUpItemRule_LFGEnabled                        = 10,
	HUDPopUpItemRule_LFGDisabled                       = 11,
	HUDPopUpItemRule_MAX                               = 12
};*/

// Enum APBGame.cSDD.etHUDReticule
/*enum etHUDReticule
{
	Reticule_Explosive                                 = 0,
	Reticule_Ranged                                    = 1,
	Reticule_Unarmed                                   = 2,
	Reticule_Vehicle                                   = 3,
	Reticule_MAX                                       = 4
};*/

// Enum APBGame.cSDD.etHUDWSCharInfo
/*enum etHUDWSCharInfo
{
	HUDWSCharInfo_None                                 = 0,
	HUDWSCharInfo_Player_MaxHeat                       = 1,
	HUDWSCharInfo_Player_MissionFriendly               = 2,
	HUDWSCharInfo_Player_MissionOpposition             = 3,
	HUDWSCharInfo_Player_NeutralFriendly               = 4,
	HUDWSCharInfo_Player_NeutralOpposition             = 5,
	HUDWSCharInfo_MAX                                  = 6
};*/

// Enum APBGame.cSDD.etHUDZoneNotifier
/*enum etHUDZoneNotifier
{
	HUDZoneNotifier_None                               = 0,
	HUDZoneNotifier_Customisation                      = 1,
	HUDZoneNotifier_Marketplace                        = 2,
	HUDZoneNotifier_Supply                             = 3,
	HUDZoneNotifier_VehicleRepair                      = 4,
	HUDZoneNotifier_VehicleSpawn                       = 5,
	HUDZoneNotifier_MAX                                = 6
};*/

// Enum APBGame.cSDD.etInteractiveActorCategory
/*enum etInteractiveActorCategory
{
	InteractiveActorCategory_None                      = 0,
	InteractiveActorCategory_PedestrianCharacter       = 1,
	InteractiveActorCategory_PlayerCharacter           = 2,
	InteractiveActorCategory_Vehicle                   = 3,
	InteractiveActorCategory_Prop                      = 4,
	InteractiveActorCategory_StaticActor               = 5,
	InteractiveActorCategory_TriggerVolume             = 6,
	InteractiveActorCategory_MAX                       = 7
};*/

// Enum APBGame.cSDD.etInteractiveActorType
/*enum etInteractiveActorType
{
	InteractiveActorType_None                          = 0,
	InteractiveActorType_APBPawn                       = 1,
	InteractiveActorType_GrafittiDisplayPoint          = 2,
	InteractiveActorType_TaskItemPickup                = 3,
	InteractiveActorType_RouteControlElement           = 4,
	InteractiveActorType_Contact                       = 5,
	InteractiveActorType_AudioDisplayPoint             = 6,
	InteractiveActorType_PlayerVehicleSpawnZone        = 7,
	InteractiveActorType_AmmoDepot                     = 8,
	InteractiveActorType_AmmoCarrier                   = 9,
	InteractiveActorType_StatueDisplayPoint            = 10,
	InteractiveActorType_MailBox                       = 11,
	InteractiveActorType_APBVehicle                    = 12,
	InteractiveActorType_NPC                           = 13,
	InteractiveActorType_Prop                          = 14,
	InteractiveActorType_PlayerVehicleDisplayPoint     = 15,
	InteractiveActorType_GraffitiCrimeTarget           = 16,
	InteractiveActorType_AmmoVendingMachine            = 17,
	InteractiveActorType_AmmoShopFront                 = 18,
	InteractiveActorType_UIInteractionPoint            = 19,
	InteractiveActorType_MAX                           = 20
};*/

// Enum APBGame.cSDD.etInventoryItemCategory
/*enum etInventoryItemCategory
{
	InventoryItemCategory_None                         = 0,
	InventoryItemCategory_Character                    = 1,
	InventoryItemCategory_Clothing                     = 2,
	InventoryItemCategory_DisplayPointToken            = 3,
	InventoryItemCategory_Dummy                        = 4,
	InventoryItemCategory_Equipment                    = 5,
	InventoryItemCategory_FnMod                        = 6,
	InventoryItemCategory_Instrument                   = 7,
	InventoryItemCategory_MarketplaceCash              = 8,
	InventoryItemCategory_Outfit                       = 9,
	InventoryItemCategory_Song                         = 10,
	InventoryItemCategory_Symbol                       = 11,
	InventoryItemCategory_Theme                        = 12,
	InventoryItemCategory_Unlock                       = 13,
	InventoryItemCategory_UsableToken                  = 14,
	InventoryItemCategory_Vehicle                      = 15,
	InventoryItemCategory_Weapon                       = 16,
	InventoryItemCategory_MAX                          = 17
};*/

// Enum APBGame.cSDD.etInventoryItemCategoryLimited
/*enum etInventoryItemCategoryLimited
{
	InventoryItemCategoryLimited_None                  = 0,
	InventoryItemCategoryLimited_Character             = 1,
	InventoryItemCategoryLimited_Clothing              = 2,
	InventoryItemCategoryLimited_Outfit                = 3,
	InventoryItemCategoryLimited_Song                  = 4,
	InventoryItemCategoryLimited_Symbol                = 5,
	InventoryItemCategoryLimited_Theme                 = 6,
	InventoryItemCategoryLimited_Vehicle               = 7,
	InventoryItemCategoryLimited_Weapon                = 8,
	InventoryItemCategoryLimited_MAX                   = 9
};*/

// Enum APBGame.cSDD.etInventoryItemSubCategory
/*enum etInventoryItemSubCategory
{
	InventoryItemSubCategory_None                      = 0,
	InventoryItemSubCategory_Character                 = 1,
	InventoryItemSubCategory_ClothingAccessory         = 2,
	InventoryItemSubCategory_ClothingBadges            = 3,
	InventoryItemSubCategory_ClothingBelts             = 4,
	InventoryItemSubCategory_ClothingBodyHair          = 5,
	InventoryItemSubCategory_ClothingCoat              = 6,
	InventoryItemSubCategory_ClothingFacewear          = 7,
	InventoryItemSubCategory_ClothingFacialHair        = 8,
	InventoryItemSubCategory_ClothingFootwear          = 9,
	InventoryItemSubCategory_ClothingGloves            = 10,
	InventoryItemSubCategory_ClothingHeadwear          = 11,
	InventoryItemSubCategory_ClothingJewellery         = 12,
	InventoryItemSubCategory_ClothingTop               = 13,
	InventoryItemSubCategory_ClothingTrousers          = 14,
	InventoryItemSubCategory_ClothingUnderwear         = 15,
	InventoryItemSubCategory_DisplayPointToken         = 16,
	InventoryItemSubCategory_Dummy                     = 17,
	InventoryItemSubCategory_Equipment                 = 18,
	InventoryItemSubCategory_FnModCharacter            = 19,
	InventoryItemSubCategory_FnModVehicle              = 20,
	InventoryItemSubCategory_FnModWeapon               = 21,
	InventoryItemSubCategory_Instrument                = 22,
	InventoryItemSubCategory_MarketplaceCash           = 23,
	InventoryItemSubCategory_Outfit                    = 24,
	InventoryItemSubCategory_Song                      = 25,
	InventoryItemSubCategory_Symbol                    = 26,
	InventoryItemSubCategory_Theme                     = 27,
	InventoryItemSubCategory_UnlockClothing            = 28,
	InventoryItemSubCategory_UnlockDisplayPoint        = 29,
	InventoryItemSubCategory_UnlockEmote               = 30,
	InventoryItemSubCategory_UnlockEquipment           = 31,
	InventoryItemSubCategory_UnlockFeature             = 32,
	InventoryItemSubCategory_UnlockFnMod               = 33,
	InventoryItemSubCategory_UnlockGeneric             = 34,
	InventoryItemSubCategory_UnlockInstrument          = 35,
	InventoryItemSubCategory_UnlockPrimitive           = 36,
	InventoryItemSubCategory_UnlockSong                = 37,
	InventoryItemSubCategory_UnlockSymbol              = 38,
	InventoryItemSubCategory_UnlockTheme               = 39,
	InventoryItemSubCategory_UnlockUsable              = 40,
	InventoryItemSubCategory_UnlockVehicle             = 41,
	InventoryItemSubCategory_UnlockVehicleComponent    = 42,
	InventoryItemSubCategory_UnlockWeapon              = 43,
	InventoryItemSubCategory_UsableToken               = 44,
	InventoryItemSubCategory_VehicleCar                = 45,
	InventoryItemSubCategory_VehicleTruck              = 46,
	InventoryItemSubCategory_VehicleVan                = 47,
	InventoryItemSubCategory_WeaponGrenade             = 48,
	InventoryItemSubCategory_WeaponMelee               = 49,
	InventoryItemSubCategory_WeaponPrimary             = 50,
	InventoryItemSubCategory_WeaponSecondary           = 51,
	InventoryItemSubCategory_WeaponWitnessing          = 52,
	InventoryItemSubCategory_MAX                       = 53
};*/

// Enum APBGame.cSDD.etLeagueActivity
/*enum etLeagueActivity
{
	LeagueActivity_Kills                               = 0,
	LeagueActivity_CarsStolen                          = 1,
	LeagueActivity_Arrests                             = 2,
	LeagueActivity_KillDeathRatio                      = 3,
	LeagueActivity_MissionsWon                         = 4,
	LeagueActivity_MissionWinLossRatio                 = 5,
	LeagueActivity_KillStreak_MedalsOpen               = 6,
	LeagueActivity_KillStreak_MedalsElite              = 7,
	LeagueActivity_TimeLimited_Medals                  = 8,
	LeagueActivity_Damage                              = 9,
	LeagueActivity_KillStreak                          = 10,
	LeagueActivity_MissionWinStreak                    = 11,
	LeagueActivity_TaskTargetsCompleted                = 12,
	LeagueActivity_KillsPistol                         = 13,
	LeagueActivity_KillsGrenade                        = 14,
	LeagueActivity_KillsMelee                          = 15,
	LeagueActivity_MAX                                 = 16
};*/

// Enum APBGame.cSDD.etLeagueCycle
/*enum etLeagueCycle
{
	LeagueCycle_Daily                                  = 0,
	LeagueCycle_Weekly                                 = 1,
	LeagueCycle_Monthly                                = 2,
	LeagueCycle_MAX                                    = 3
};*/

// Enum APBGame.cSDD.etLeagueEntity
/*enum etLeagueEntity
{
	LeagueEntity_Character                             = 0,
	LeagueEntity_Clan                                  = 1,
	LeagueEntity_MAX                                   = 2
};*/

// Enum APBGame.cSDD.etLeagueParticipants
/*enum etLeagueParticipants
{
	LeagueParticipant_Character                        = 0,
	LeagueParticipant_Clan                             = 1,
	LeagueParticipant_Both                             = 2,
	LeagueParticipant_MAX                              = 3
};*/

// Enum APBGame.cSDD.etLeaguePeriod
/*enum etLeaguePeriod
{
	LeaguePeriod_Day                                   = 0,
	LeaguePeriod_WeekMonthYear                         = 1,
	LeaguePeriod_All                                   = 2,
	LeaguePeriod_MAX                                   = 3
};*/

// Enum APBGame.cSDD.etLeagueRewardType
/*enum etLeagueRewardType
{
	kLeagueRewardType_Normal                           = 0,
	kLeagueRewardType_Consecutive1st                   = 1,
	kLeagueRewardType_ConsecutiveTop3                  = 2,
	kLeagueRewardType_Lifetime1st                      = 3,
	kLeagueRewardType_LifetimeTop3                     = 4,
	kLeagueRewardType_MAX                              = 5
};*/

// Enum APBGame.cSDD.etLeagueScope
/*enum etLeagueScope
{
	LeagueScope_World                                  = 0,
	LeagueScope_Enforcer                               = 1,
	LeagueScope_Criminal                               = 2,
	LeagueScope_District                               = 3,
	LeagueScope_MAX                                    = 4
};*/

// Enum APBGame.cSDD.etLoadingMovieTip
/*enum etLoadingMovieTip
{
	E_Move                                             = 0,
	E_Resize                                           = 1,
	E_Rotate                                           = 2,
	ED_Layers                                          = 3,
	EP_TattooOpacity                                   = 4,
	GL_AccountDetails                                  = 5,
	GL_APBSite                                         = 6,
	GL_PickUpGroups                                    = 7,
	GP_AccuracyBursts                                  = 8,
	GP_Ammo                                            = 9,
	GP_C_Rescue                                        = 10,
	GP_ChangeLoadout                                   = 11,
	GP_CookNades                                       = 12,
	GP_E_Arrest                                        = 13,
	GP_E_Rescue                                        = 14,
	GP_Equipment                                       = 15,
	GP_GroupUp1                                        = 16,
	GP_GroupUp2                                        = 17,
	GP_GroupWithBackup                                 = 18,
	GP_ItemsInBoot                                     = 19,
	GP_Jumping                                         = 20,
	GP_Leaning                                         = 21,
	GP_LMG                                             = 22,
	GP_LowAmmo                                         = 23,
	GP_LTLCanKill                                      = 24,
	GP_Marksmanship                                    = 25,
	GP_MM_Settings                                     = 26,
	GP_MuzzleFlash                                     = 27,
	GP_N5                                              = 28,
	GP_N5Bounties                                      = 29,
	GP_N5Teammate                                      = 30,
	GP_Notoriety                                       = 31,
	GP_P5Bounties                                      = 32,
	GP_P5FriendlyFire                                  = 33,
	GP_P5Teammate                                      = 34,
	GP_P5Waste                                         = 35,
	GP_Percs                                           = 36,
	GP_PersonalVehicles                                = 37,
	GP_Prestige                                        = 38,
	GP_Range                                           = 39,
	GP_Rating                                          = 40,
	GP_ReticuleFriendly                                = 41,
	GP_Scoreboard                                      = 42,
	GP_ShootUnderVehicles                              = 43,
	GP_SpawningVehicle                                 = 44,
	GP_StaminaDamage_C                                 = 45,
	GP_StaminaDamage_E                                 = 46,
	GP_SupplyUnit                                      = 47,
	GP_TeamKills                                       = 48,
	GP_TeamTalk                                        = 49,
	GP_Teamwork                                        = 50,
	GP_Threat                                          = 51,
	GP_Upgrades_Selection                              = 52,
	GP_UpgradesActivatable                             = 53,
	GP_VehicleCombat                                   = 54,
	GP_VehicleCritical                                 = 55,
	GP_VoIPEnemy                                       = 56,
	GP_VoIPTeam                                        = 57,
	GP_WaypointLetters                                 = 58,
	GP_WeaponsCQB                                      = 59,
	GP_WeaponsHVR                                      = 60,
	GP_WeaponVariety                                   = 61,
	KP_CameraSwitch                                    = 62,
	OW_C_VehiclesPristine                              = 63,
	OW_E_MuggingDelivery                               = 64,
	OW_E_RamraidDeliver                                = 65,
	OW_E_StolenVehicles                                = 66,
	OW_E_VehiclesPristine                              = 67,
	OW_Graffiti                                        = 68,
	OW_Witness_C                                       = 69,
	OW_Witness_E                                       = 70,
	OW_WitnessVehicles_C                               = 71,
	PG_Pledge                                          = 72,
	PG_Pledge01                                        = 73,
	PG_StandingLevel                                   = 74,
	SL_AudioDisplayPoints                              = 75,
	SL_GroupUp                                         = 76,
	SL_Kiosks                                          = 77,
	SL_MailScam                                        = 78,
	SL_Marketplace_Buy                                 = 79,
	SL_Marketplace_DisplayPoints                       = 80,
	SL_Marketplace_Sell                                = 81,
	SL_MusicStudio                                     = 82,
	SL_WhereToCustomise                                = 83,
	UI_CharacterInfo                                   = 84,
	UI_Map_Waypoints                                   = 85,
	UI_MusicPlayer_Import                              = 86,
	UI_MusicPlayer_OnFoot                              = 87,
	UI_MusicPlayer_Playlists                           = 88,
	UI_QuickCapture                                    = 89,
	UI_RemotePledge                                    = 90,
	UI_Scoreboard                                      = 91,
	SL_Whisper                                         = 92,
	SL_Marketplace_VehicleDP                           = 93,
	SL_Marketplace_StatueDP                            = 94,
	SL_Marketplace_SellFaction_C                       = 95,
	SL_Marketplace_SellFaction_E                       = 96,
	ED_DupeLayer                                       = 97,
	Ed_CtrlZCtrlY                                      = 98,
	EW_SelectedOnly                                    = 99,
	EW_ProjectSections                                 = 100,
	EW_RealignClothing                                 = 101,
	EG_LicensePlate                                    = 102,
	EG_Camera                                          = 103,
	EG_EngineAudio                                     = 104,
	EP_BodyPaint                                       = 105,
	Ed_Camera                                          = 106,
	EP_Zoom                                            = 107,
	EW_Zoom                                            = 108,
	EG_Zoom                                            = 109,
	SL_Clans                                           = 110,
	GL_MouseSensitivity                                = 111,
	GP_PitManeuver                                     = 112,
	GL_Unstick                                         = 113,
	SL_Emotes                                          = 114,
	etLoadingMovieTip_MAX                              = 115
};*/

// Enum APBGame.cSDD.etLoadingMovieTransitionType
/*enum etLoadingMovieTransitionType
{
	LMTT_AllFactions_Generic                           = 0,
	LMTT_Enforcer_Generic                              = 1,
	LMTT_Enforcer_Leagues                              = 2,
	LMTT_Criminal_Generic                              = 3,
	LMTT_Criminal_Leagues                              = 4,
	LMTT_AllFactions_Leagues                           = 5,
	LMTT_MAX                                           = 6
};*/

// Enum APBGame.cSDD.etLoadingScreenHintDomain
/*enum etLoadingScreenHintDomain
{
	LoadingScreenHintDomain_Action                     = 0,
	LoadingScreenHintDomain_Social                     = 1,
	LoadingScreenHintDomain_Either                     = 2,
	LoadingScreenHintDomain_MAX                        = 3
};*/

// Enum APBGame.cSDD.etLocaleTypePriority
/*enum etLocaleTypePriority
{
	BlockVolume                                        = 0,
	Street                                             = 1,
	LocationBeacon                                     = 2,
	etLocaleTypePriority_MAX                           = 3
};*/

// Enum APBGame.cSDD.etMailConstant
/*enum etMailConstant
{
	MailConstant_Cost                                  = 0,
	MailConstant_SoftLimit                             = 1,
	MailConstant_MAX                                   = 2
};*/

// Enum APBGame.cSDD.etMailDetach
/*enum etMailDetach
{
	kMailDetach_None                                   = 0,
	kMailDetach_Cash                                   = 1,
	kMailDetach_Item                                   = 2,
	kMailDetach_Points                                 = 3,
	kMailDetach_MAX                                    = 4
};*/

// Enum APBGame.cSDD.etMailDuration
/*enum etMailDuration
{
	MailDuration_Short                                 = 0,
	MailDuration_Long                                  = 1,
	MailDuration_MAX                                   = 2
};*/

// Enum APBGame.cSDD.etMailInfo
/*enum etMailInfo
{
	kMailInfo_None                                     = 0,
	kMailInfo_Unread                                   = 1,
	kMailInfo_Expired                                  = 2,
	kMailInfo_MAX                                      = 3
};*/

// Enum APBGame.cSDD.etMailSort
/*enum etMailSort
{
	kMailSort_Default                                  = 0,
	kMailSort_Sender_Name_ASC                          = 1,
	kMailSort_Sender_Name_DESC                         = 2,
	kMailSort_Send_Time_ASC                            = 3,
	kMailSort_Send_Time_DESC                           = 4,
	kMailSort_Expiration_Time_ASC                      = 5,
	kMailSort_Expiration_Time_DESC                     = 6,
	kMailSort_Read_ASC                                 = 7,
	kMailSort_Read_DESC                                = 8,
	kMailSort_Subject_ASC                              = 9,
	kMailSort_Subject_DESC                             = 10,
	kMailSort_MAX                                      = 11
};*/

// Enum APBGame.cSDD.etMarketplaceAuctionType
/*enum etMarketplaceAuctionType
{
	kMarketplaceAuctionType_None                       = 0,
	kMarketplaceAuctionType_Cash                       = 1,
	kMarketplaceAuctionType_Points                     = 2,
	kMarketplaceAuctionType_MAX                        = 3
};*/

// Enum APBGame.cSDD.etMarketplaceCashType
/*enum etMarketplaceCashType
{
	MarketplaceCash                                    = 0,
	etMarketplaceCashType_MAX                          = 1
};*/

// Enum APBGame.cSDD.etMarketplaceConstant
/*enum etMarketplaceConstant
{
	MarketplaceConstant_Tariff                         = 0,
	MarketplaceConstant_MaximumAuctions                = 1,
	MarketplaceConstant_MinimumCash                    = 2,
	MarketplaceConstant_MAX                            = 3
};*/

// Enum APBGame.cSDD.etMarketplaceDuration
/*enum etMarketplaceDuration
{
	MarketplaceDuration_Short                          = 0,
	MarketplaceDuration_Medium                         = 1,
	MarketplaceDuration_Long                           = 2,
	MarketplaceDuration_MAX                            = 3
};*/

// Enum APBGame.cSDD.etMarketplaceInfo
/*enum etMarketplaceInfo
{
	kMarketplaceInfo_None                              = 0,
	kMarketplaceInfo_Auction_Expired                   = 1,
	kMarketplaceInfo_Auction_Sold                      = 2,
	kMarketplaceInfo_Auction_Won                       = 3,
	kMarketplaceInfo_Auction_Outbid                    = 4,
	kMarketplaceInfo_Auction_Cancelled                 = 5,
	kMarketplaceInfo_MAX                               = 6
};*/

// Enum APBGame.cSDD.etMarketplaceListType
/*enum etMarketplaceListType
{
	kMarketplaceList_Auction                           = 0,
	kMarketplaceList_MyAuction                         = 1,
	kMarketplaceList_MyBid                             = 2,
	kMarketplaceList_MAX                               = 3
};*/

// Enum APBGame.cSDD.etMarketplaceSearch
/*enum etMarketplaceSearch
{
	kMarketplaceSearch_Default                         = 0,
	kMarketplaceSearch_Item                            = 1,
	kMarketplaceSearch_Seller                          = 2,
	kMarketplaceSearch_MAX                             = 3
};*/

// Enum APBGame.cSDD.etMarketplaceSort
/*enum etMarketplaceSort
{
	kMarketplaceSort_Default                           = 0,
	kMarketplaceSort_Item_Name_ASC                     = 1,
	kMarketplaceSort_Item_Name_DESC                    = 2,
	kMarketplaceSort_Item_Rating_ASC                   = 3,
	kMarketplaceSort_Item_Rating_DESC                  = 4,
	kMarketplaceSort_Expiration_Time_ASC               = 5,
	kMarketplaceSort_Expiration_Time_DESC              = 6,
	kMarketplaceSort_Seller_Name_ASC                   = 7,
	kMarketplaceSort_Seller_Name_DESC                  = 8,
	kMarketplaceSort_Bid_Price_ASC                     = 9,
	kMarketplaceSort_Bid_Price_DESC                    = 10,
	kMarketplaceSort_Buyout_Price_ASC                  = 11,
	kMarketplaceSort_Buyout_Price_DESC                 = 12,
	kMarketplaceSort_Gender_ASC                        = 13,
	kMarketplaceSort_Gender_DESC                       = 14,
	kMarketplaceSort_High_Bidder_Name_ASC              = 15,
	kMarketplaceSort_High_Bidder_Name_DESC             = 16,
	kMarketplaceSort_Item_Faction_ASC                  = 17,
	kMarketplaceSort_Item_Faction_DESC                 = 18,
	kMarketplaceSort_MAX                               = 19
};*/

// Enum APBGame.cSDD.etMarketplaceTimeLeft
/*enum etMarketplaceTimeLeft
{
	MarketplaceTimeLeft_VeryShort                      = 0,
	MarketplaceTimeLeft_Short                          = 1,
	MarketplaceTimeLeft_Medium                         = 2,
	MarketplaceTimeLeft_Long                           = 3,
	MarketplaceTimeLeft_VeryLong                       = 4,
	MarketplaceTimeLeft_MAX                            = 5
};*/

// Enum APBGame.cSDD.etMedalCategory
/*enum etMedalCategory
{
	MedalCategory_KillStreak                           = 0,
	MedalCategory_BigWin_Arrest                        = 1,
	MedalCategory_BigWin_Rescue                        = 2,
	MedalCategory_BigWin_Takeout                       = 3,
	MedalCategory_BigWin_Bomber                        = 4,
	MedalCategory_BigWin_BombDisposal                  = 5,
	MedalCategory_BigWin_TaskTargetHero                = 6,
	MedalCategory_TimeLimit_Kills                      = 7,
	MedalCategory_Situational_MeleeKillFromBehind      = 8,
	MedalCategory_Situational_MeleeKill                = 9,
	MedalCategory_Situational_GrenadeKill              = 10,
	MedalCategory_Situational_VehicleKill              = 11,
	MedalCategory_Situational_PostMortemKill           = 12,
	MedalCategory_Situational_TaskItemKill             = 13,
	MedalCategory_Situational_VIPKill                  = 14,
	MedalCategory_Situational_GraffitiKill             = 15,
	MedalCategory_Situational_AntiGraffitiKill         = 16,
	MedalCategory_Situational_ArsonKill                = 17,
	MedalCategory_Situational_KillStreakerKill         = 18,
	MedalCategory_Situational_ArrestStreakerKill       = 19,
	MedalCategory_Situational_KillStreakerArrest       = 20,
	MedalCategory_Situational_DriverAssistsKill        = 21,
	MedalCategory_Situational_GroupAnnihilation        = 22,
	MedalCategory_Dishonour_FriendlyKill               = 23,
	MedalCategory_Dishonour_ArrestedKill               = 24,
	MedalCategory_Dishonour_SelfKill                   = 25,
	MedalCategory_MAX                                  = 26
};*/

// Enum APBGame.cSDD.etMissionCriminalDispatchTypes
/*enum etMissionCriminalDispatchTypes
{
	kCRIMINALDISPATCH_MissionVsEnforcers               = 0,
	kCRIMINALDISPATCH_MissionVsCriminals               = 1,
	kCRIMINALDISPATCH_Backup                           = 2,
	kCRIMINALDISPATCH_MAX                              = 3
};*/

// Enum APBGame.cSDD.etMissionEnforcerDispatchTypes
/*enum etMissionEnforcerDispatchTypes
{
	kENFORCERDISPATCH_MissionVsCriminals               = 0,
	kENFORCERDISPATCH_Backup                           = 1,
	kENFORCERDISPATCH_Bounty                           = 2,
	kENFORCERDISPATCH_MAX                              = 3
};*/

// Enum APBGame.cSDD.etMissionResultReason
/*enum etMissionResultReason
{
	eMRR_None                                          = 0,
	eMRR_Abandoned                                     = 1,
	eMRR_CompletedUnopposed                            = 2,
	eMRR_Declined                                      = 3,
	eMRR_Emergency                                     = 4,
	eMRR_Forced                                        = 5,
	eMRR_ObjectiveCompleted                            = 6,
	eMRR_ObjectiveFailed                               = 7,
	eMRR_OppositionDestroyedOwnerTarget                = 8,
	eMRR_OwnersDestroyedOwnerTarget                    = 9,
	eMRR_RemovedFromSide                               = 10,
	eMRR_SideTooSmall                                  = 11,
	eMRR_TimedOut                                      = 12,
	eMRR_VipKillLimitReached                           = 13,
	eMRR_WonFinalObjective                             = 14,
	eMRR_WonMostObjectives                             = 15,
	eMRR_MAX                                           = 16
};*/

// Enum APBGame.cSDD.etMissionUITrackedValue
/*enum etMissionUITrackedValue
{
	MissionUITrackedValue_None                         = 0,
	MissionUITrackedValue_TaskTargetsTriggeredOwners   = 1,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition = 2,
	MissionUITrackedValue_TaskItemsDelivered           = 3,
	MissionUITrackedValue_CheckpointsTriggeredLocalPlayer = 4,
	MissionUITrackedValue_VIPLivesLostOwners           = 5,
	MissionUITrackedValue_TakeoutsOwners               = 6,
	MissionUITrackedValue_TakeoutsOpposition           = 7,
	MissionUITrackedValue_BombTimer                    = 8,
	MissionUITrackedValue_GraffitiPointState           = 9,
	MissionUITrackedValue_ArmedGuardTimer              = 10,
	MissionUITrackedValue_TakeoutBalanceOwnerOpposition = 11,
	MissionUITrackedValue_CheckpointTerritoryState     = 12,
	MissionUITrackedValue_MovingTargetState            = 13,
	MissionUITrackedValue_BombState                    = 14,
	MissionUITrackedValue_TakeoutBalanceOppositionOwner = 15,
	MissionUITrackedValue_SurvivalTimer                = 16,
	MissionUITrackedValue_EscapeBar                    = 17,
	MissionUITrackedValue_EscapePenaltyTimer           = 18,
	MissionUITrackedValue_BombsArmed                   = 19,
	MissionUITrackedValue_MovingTargetsHeldOwners      = 20,
	MissionUITrackedValue_MovingTargetsHeldOpposition  = 21,
	MissionUITrackedValue_ObjectivesWonOwners          = 22,
	MissionUITrackedValue_ObjectivesWonOpposition      = 23,
	MissionUITrackedValue_TaskTargetsTriggeredOwners_SumConcStages = 24,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition_SumConcStages = 25,
	MissionUITrackedValue_TaskItemsDeliveredOpposition = 26,
	MissionUITrackedValue_BombsArmed_SumConcStages     = 27,
	MissionUITrackedValue_VIPLivesLostOpposition       = 28,
	MissionUITrackedValue_VehiclesDelivered            = 29,
	MissionUITrackedValue_VehiclesDeliveredOpposition  = 30,
	MissionUITrackedValue_BombsArmedOpposition         = 31,
	MissionUITrackedValue_BombsArmedOpposition_SumConcStages = 32,
	MissionUITrackedValue_MAX                          = 33
};*/

// Enum APBGame.cSDD.etMissionUITrackedValueDisplay
/*enum etMissionUITrackedValueDisplay
{
	MissionUITrackedValueDisplay_None                  = 0,
	MissionUITrackedValueDisplay_Percentage            = 1,
	MissionUITrackedValueDisplay_Bar                   = 2,
	MissionUITrackedValueDisplay_Percentage_Inverse    = 3,
	MissionUITrackedValueDisplay_Bar_Inverse           = 4,
	MissionUITrackedValueDisplay_Counter               = 5,
	MissionUITrackedValueDisplay_Counter_Inverse       = 6,
	MissionUITrackedValueDisplay_LimitedCounter        = 7,
	MissionUITrackedValueDisplay_LimitedCounter_Inverse = 8,
	MissionUITrackedValueDisplay_Time                  = 9,
	MissionUITrackedValueDisplay_Time_Inverse          = 10,
	MissionUITrackedValueDisplay_MAX                   = 11
};*/

// Enum APBGame.cSDD.etModifierCategory
/*enum etModifierCategory
{
	ModifierCategory_None                              = 0,
	ModifierCategory_Character_AmmoCarrier             = 1,
	ModifierCategory_Character_AmmoRadiusIncrease      = 2,
	ModifierCategory_Character_FastRegeneration        = 3,
	ModifierCategory_Character_HappyLandings           = 4,
	ModifierCategory_Character_Invulnerable            = 5,
	ModifierCategory_Character_IronMan                 = 6,
	ModifierCategory_Character_Medikit                 = 7,
	ModifierCategory_Character_Monolith                = 8,
	ModifierCategory_Character_Olympian                = 9,
	ModifierCategory_Character_QuickReSupply           = 10,
	ModifierCategory_Character_ReducedStaminaDamage    = 11,
	ModifierCategory_Character_Slugger                 = 12,
	ModifierCategory_Character_Staminakit              = 13,
	ModifierCategory_Character_Stealth                 = 14,
	ModifierCategory_Character_Survivor                = 15,
	ModifierCategory_Character_TakeAKnee               = 16,
	ModifierCategory_Vehicle_AmmoCarrier               = 17,
	ModifierCategory_Vehicle_AmmoRadiusIncrease        = 18,
	ModifierCategory_Vehicle_BlastRadiusIncrease       = 19,
	ModifierCategory_Vehicle_ChassisStrengthening      = 20,
	ModifierCategory_Vehicle_CriticalThresholdIncrease = 21,
	ModifierCategory_Vehicle_CriticalTimerIncrease     = 22,
	ModifierCategory_Vehicle_EngineOverhaul            = 23,
	ModifierCategory_Vehicle_ExtraCargoCapacity        = 24,
	ModifierCategory_Vehicle_IncreasedActivationTimer  = 25,
	ModifierCategory_Vehicle_MatesRates                = 26,
	ModifierCategory_Vehicle_QuickRepair               = 27,
	ModifierCategory_Vehicle_QuickResupply             = 28,
	ModifierCategory_Vehicle_RammingPlate              = 29,
	ModifierCategory_Vehicle_SteelPlating              = 30,
	ModifierCategory_Weapon_Bandolier                  = 31,
	ModifierCategory_Weapon_Damping                    = 32,
	ModifierCategory_Weapon_EagleEyes                  = 33,
	ModifierCategory_Weapon_PointGuard                 = 34,
	ModifierCategory_Weapon_QuickFingers               = 35,
	ModifierCategory_Weapon_Rifling                    = 36,
	ModifierCategory_Weapon_Savage                     = 37,
	ModifierCategory_Weapon_ShortSighted               = 38,
	ModifierCategory_Weapon_SprayAndPray               = 39,
	ModifierCategory_Weapon_SuperMag                   = 40,
	ModifierCategory_Weapon_Switch                     = 41,
	ModifierCategory_Weapon_ThreePointSling            = 42,
	ModifierCategory_MAX                               = 43
};*/

// Enum APBGame.cSDD.etModifierClass
/*enum etModifierClass
{
	ModifierClass_None                                 = 0,
	ModifierClass_Character                            = 1,
	ModifierClass_Vehicle                              = 2,
	ModifierClass_Weapon                               = 3,
	ModifierClass_MAX                                  = 4
};*/

// Enum APBGame.cSDD.etModifierStatus
/*enum etModifierStatus
{
	ModifierStatus_None                                = 0,
	ModifierStatus_Activatable                         = 1,
	ModifierStatus_Permanent                           = 2,
	ModifierStatus_MAX                                 = 3
};*/

// Enum APBGame.cSDD.etNameQuery
/*enum etNameQuery
{
	kNameQuery_Chat                                    = 0,
	kNameQuery_Item                                    = 1,
	kNameQuery_MAX                                     = 2
};*/

// Enum APBGame.cSDD.etNPCCategory
/*enum etNPCCategory
{
	LCPedestrian                                       = 0,
	LCVehicle                                          = 1,
	etNPCCategory_MAX                                  = 2
};*/

// Enum APBGame.cSDD.etNPCEvent
/*enum etNPCEvent
{
	eAvoidLoudVehicleNotifier                          = 0,
	eAvoidVehicle                                      = 1,
	eAvoidVehicleNotifier                              = 2,
	eBumpIntoPlayer                                    = 3,
	eCrimeCommitted                                    = 4,
	eDespawnPedestrian                                 = 5,
	eDriverBlocked                                     = 6,
	eDriverDespawn                                     = 7,
	eDriverPanic                                       = 8,
	eDriverRandomAnim                                  = 9,
	eDriverStopAndPanic                                = 10,
	eLookAround                                        = 11,
	eLookAt                                            = 12,
	eMinorCollision                                    = 13,
	eNotifier                                          = 14,
	eNotifierTimed                                     = 15,
	eOnTopOfActor                                      = 16,
	ePedestrianPanic                                   = 17,
	ePedIdle                                           = 18,
	eRandomAnim                                        = 19,
	eSpawnDestroy                                      = 20,
	eTaskTargetInteraction                             = 21,
	eVehicleCriticallyDamaged                          = 22,
	LC_NonProps_ColdHands                              = 23,
	LC_NonProps_Fem_Ambients                           = 24,
	LC_NonProps_Fem_ListenMusic                        = 25,
	LC_NonProps_Fem_TalkMobile                         = 26,
	LC_NonProps_LookSkyward                            = 27,
	LC_NonProps_Prototype                              = 28,
	LC_NonProps_Stand_Ambients                         = 29,
	LC_NonProps_Texting                                = 30,
	LC_Vignette_BankMachine_Male                       = 31,
	LC_Vignette_BinLitter_Male                         = 32,
	LC_Vignette_MailBox_Male                           = 33,
	LC_Vignette_Newspaper_Male                         = 34,
	LC_Vignette_Observe_Male                           = 35,
	LC_Vignette_Parkbench_Backless_Male                = 36,
	LC_Vignette_Parkbench_Universal_Male               = 37,
	LC_Vignette_Payphone_Male                          = 38,
	LC_Vignette_TaxiWait                               = 39,
	LC_Vignette_VendingMachine_Male                    = 40,
	LC_Vignette_WallLean_Male                          = 41,
	NO_EVENT                                           = 42,
	etNPCEvent_MAX                                     = 43
};*/

// Enum APBGame.cSDD.etNPCReaction
/*enum etNPCReaction
{
	NO_REACTION                                        = 0,
	rBumpIntoPlayer                                    = 1,
	rCower                                             = 2,
	rCrimeCommitted                                    = 3,
	rDespawnPedestrian                                 = 4,
	rDriverAngry                                       = 5,
	rDriverBlocked                                     = 6,
	rDriverDeSpawn                                     = 7,
	rDriverPanic                                       = 8,
	rDriverRandomAnim                                  = 9,
	rDriverStopAndPanic                                = 10,
	rLookAround                                        = 11,
	rLookAt                                            = 12,
	rPedWaitingAnxious                                 = 13,
	rPedWaitingGeneric                                 = 14,
	rReRouteToVignetteNode                             = 15,
	rRunAway                                           = 16,
	rRunIntoBuilding                                   = 17,
	rSpawnDestroy                                      = 18,
	rStationaryRandomAnim                              = 19,
	rTaskTargetInteraction                             = 20,
	rVehicleCriticallyDamaged                          = 21,
	etNPCReaction_MAX                                  = 22
};*/

// Enum APBGame.cSDD.etNPCWorldEvent
/*enum etNPCWorldEvent
{
	WorldEvent_Arson                                   = 0,
	WorldEvent_AvoidVehicle                            = 1,
	WorldEvent_AvoidVehicleHorn                        = 2,
	WorldEvent_AvoidVehicleSiren                       = 3,
	WorldEvent_Bombing                                 = 4,
	WorldEvent_BuildingBreakIn                         = 5,
	WorldEvent_BulletFired                             = 6,
	WorldEvent_BulletHit                               = 7,
	WorldEvent_Deathmatch                              = 8,
	WorldEvent_DebugShout                              = 9,
	WorldEvent_DestroyProp                             = 10,
	WorldEvent_Explosion                               = 11,
	WorldEvent_Graffiti                                = 12,
	WorldEvent_GrenadeCook                             = 13,
	WorldEvent_GrenadeThrown                           = 14,
	WorldEvent_Hijack                                  = 15,
	WorldEvent_ItemDelivery                            = 16,
	WorldEvent_LookAtPlayer                            = 17,
	WorldEvent_LookAtShopfront                         = 18,
	WorldEvent_LookAtVehicleSiren                      = 19,
	WorldEvent_Mugging                                 = 20,
	WorldEvent_None                                    = 21,
	WorldEvent_NPCDeath                                = 22,
	WorldEvent_Pickup                                  = 23,
	WorldEvent_RamRaid                                 = 24,
	WorldEvent_Rendezvous                              = 25,
	WorldEvent_StolenLargeObject                       = 26,
	WorldEvent_TerritoryControl                        = 27,
	WorldEvent_Vandalism                               = 28,
	WorldEvent_VehicleCollision                        = 29,
	WorldEvent_VehicleLocked                           = 30,
	WorldEvent_VehicleUnlocked                         = 31,
	WorldEvent_WitnessableCrimeDefault                 = 32,
	WorldEvent_MAX                                     = 33
};*/

// Enum APBGame.cSDD.etOnFootDeathAnimation
/*enum etOnFootDeathAnimation
{
	eDA_None                                           = 0,
	eDA_Backwards                                      = 1,
	eDA_Explosion_Backwards                            = 2,
	eDA_Explosion_Forwards                             = 3,
	eDA_Explosion_Left                                 = 4,
	eDA_Explosion_Right                                = 5,
	eDA_Fall                                           = 6,
	eDA_Forwards                                       = 7,
	eDA_MAX                                            = 8
};*/

// Enum APBGame.cSDD.etOpenWorldConstant
/*enum etOpenWorldConstant
{
	OpenWorldConstant_DropOffDeliveryPointReplenishmentDelay = 0,
	OpenWorldConstant_DropOffLargeTaskItemDeliveryPoints = 1,
	OpenWorldConstant_DropOffMediumTaskItemDeliveryPoints = 2,
	OpenWorldConstant_DropOffSmallTaskItemDeliveryPoints = 3,
	OpenWorldConstant_DropOffVehicleDeliveryPoints     = 4,
	OpenWorldConstant_LargeTaskItemSizePoints          = 5,
	OpenWorldConstant_MediumTaskItemSizePoints         = 6,
	OpenWorldConstant_SmallTaskItemsLimit              = 7,
	OpenWorldConstant_TaskItemTimeOut                  = 8,
	OpenWorldConstant_MAX                              = 9
};*/

// Enum APBGame.APBParticleFoldFloat.FloatFoldOp
/*enum FloatFoldOp
{
	FFoldOp_Sum                                        = 0,
	FFoldOp_Product                                    = 1,
	FFoldOp_Maximum                                    = 2,
	FFoldOp_Minimum                                    = 3,
	FFoldOp_MAX                                        = 4
};*/

// Enum APBGame.APBParticleFoldVector.VectorFoldOp
/*enum VectorFoldOp
{
	VFoldOp_Sum                                        = 0,
	VFoldOp_Product                                    = 1,
	VFoldOp_Maximum                                    = 2,
	VFoldOp_Minimum                                    = 3,
	VFoldOp_MAX                                        = 4
};*/

// Enum APBGame.APBSeqEvent_TaskTarget.etTaskTargetVFXState
/*enum etTaskTargetVFXState
{
	PVPUnlocked                                        = 0,
	PVPLockPending                                     = 1,
	PVPLocked                                          = 2,
	UnTriggeredInactive                                = 3,
	UnTriggered                                        = 4,
	PartiallyTriggered                                 = 5,
	Triggered                                          = 6,
	PartiallyTriggeredOpposition                       = 7,
	TriggeredOpposition                                = 8,
	ResettingOwners                                    = 9,
	ResettingOpposition                                = 10,
	ObjectiveCompletedOwners                           = 11,
	ObjectiveCompletedOpposition                       = 12,
	ObjectiveCompletedDraw                             = 13,
	ObjectiveCompletedNoWinner                         = 14,
	etTaskTargetVFXState_MAX                           = 15
};*/

// Enum APBGame.APBSeqEvent_TaskTargetAction.etTaskTargetActionState
/*enum etTaskTargetActionState
{
	eTaskTargetActionState_Intro                       = 0,
	eTaskTargetActionState_Loop                        = 1,
	eTaskTargetActionState_Outro                       = 2,
	eTaskTargetActionState_Cancelled                   = 3,
	eTaskTargetActionState_Success                     = 4,
	eTaskTargetActionState_MAX                         = 5
};*/

// Enum APBGame.APBStudio.etTextureGenerationState
/*enum etTextureGenerationState
{
	kTGS_Null                                          = 0,
	kTGS_DumpRenderTarget                              = 1,
	kTGS_WaitForMipData                                = 2,
	kTGS_GenerateMipLevels                             = 3,
	kTGS_CreateRenderResources                         = 4,
	kTGS_MAX                                           = 5
};*/

// Enum APBGame.APBStudio.EStudioParameterType
/*enum EStudioParameterType
{
	LPT_None                                           = 0,
	LPT_Float                                          = 1,
	LPT_Bool                                           = 2,
	LPT_Int                                            = 3,
	LPT_String                                         = 4,
	LPT_MAX                                            = 5
};*/

// Enum APBGame.GolemobileBase.etGolemobilePartCategory
/*enum etGolemobilePartCategory
{
	GPC_Exterior                                       = 0,
	GPC_Interior                                       = 1,
	GPC_Glass                                          = 2,
	GPC_Wheels                                         = 3,
	GPC_MAX                                            = 4
};*/

// Enum APBGame.APBStudioVehicle.etVehicleStudioRenderTargetType
/*enum etVehicleStudioRenderTargetType
{
	VSRT_EXTERIOR_DIFFUSE                              = 0,
	VSRT_EXTERIOR_NORMAL                               = 1,
	VSRT_EXTERIOR_EMISSIVE                             = 2,
	VSRT_INTERIOR_DIFFUSE                              = 3,
	VSRT_INTERIOR_NORMAL                               = 4,
	VSRT_INTERIOR_EMISSIVE                             = 5,
	VSRT_WHEEL_DIFFUSE                                 = 6,
	VSRT_WHEEL_NORMAL                                  = 7,
	VSRT_EXTERIOR_DECALS                               = 8,
	VSRT_MAX                                           = 9
};*/

// Enum APBGame.cNPCVehicleBrain.etRouteFollowerEvent
/*enum etRouteFollowerEvent
{
	kRFE_ReachedTargetSpeed                            = 0,
	kRFE_ReachedTargetLane                             = 1,
	kRFE_ReachedEndOfRoute                             = 2,
	kRFE_MAX                                           = 3
};*/

// Enum APBGame.cNPCVehicleBrain.etIndicatorLightType
/*enum etIndicatorLightType
{
	kIndicatorLight_None                               = 0,
	kIndicatorLight_Left                               = 1,
	kIndicatorLight_Right                              = 2,
	kIndicatorLight_MAX                                = 3
};*/

// Enum APBGame.cNPCVehicleBrain.etSpeedState
/*enum etSpeedState
{
	kSS_None                                           = 0,
	kSS_ConstantSpeed                                  = 1,
	kSS_ChangeSpeed                                    = 2,
	kSS_MAX                                            = 3
};*/

// Enum APBGame.cAmmoDepotComponent.etResupplyState
/*enum etResupplyState
{
	ResupplyState_None                                 = 0,
	ResupplyState_FromStorageInventory                 = 1,
	ResupplyState_FromPurchased                        = 2,
	ResupplyState_Cancelled                            = 3,
	ResupplyState_Completed                            = 4,
	ResupplyState_MAX                                  = 5
};*/

// Enum APBGame.cAmmoDepotComponent.etResupplyTarget
/*enum etResupplyTarget
{
	ResupplyTarget_None                                = 0,
	ResupplyTarget_AmmoPool                            = 1,
	ResupplyTarget_Magazine                            = 2,
	ResupplyTarget_Any                                 = 3,
	ResupplyTarget_MAX                                 = 4
};*/

// Enum APBGame.iAmmoSupplier.etWeaponType
/*enum etWeaponType
{
	WeaponType_None                                    = 0,
	WeaponType_Primary                                 = 1,
	WeaponType_Secondary                               = 2,
	WeaponType_Grenade                                 = 3,
	WeaponType_MAX                                     = 4
};*/

// Enum APBGame.iAmmoSupplier.etAmmoResupplyResult
/*enum etAmmoResupplyResult
{
	kAmmoResupply_OK                                   = 0,
	kAmmoResupply_NoDeployedWeapons                    = 1,
	kAmmoResupply_AllWeaponsFull                       = 2,
	kAmmoResupply_InsufficientFunds                    = 3,
	kAmmoResupply_WrongFaction                         = 4,
	kAmmoResupply_WrongGroup                           = 5,
	kAmmoResupply_AmmoCarrierFnModInactive             = 6,
	kAmmoResupply_AmmoCarrierDepotNotDeployed          = 7,
	kAmmoResupply_AmmoCarrierVehicleMoving             = 8,
	kAmmoResupply_InsufficientStorageSpace             = 9,
	kAmmoResupply_InVehicle                            = 10,
	kAmmoResupply_Unconscious                          = 11,
	kAmmoResupply_Arrested                             = 12,
	kAmmoResupply_Dead                                 = 13,
	kAmmoResupply_Fail                                 = 14,
	kAmmoResupply_AlreadyResupplying                   = 15,
	kAmmoResupply_MAX                                  = 16
};*/

// Enum APBGame.iAmmoSupplier.etInventoryAccessType
/*enum etInventoryAccessType
{
	kInventoryAccessMode_None                          = 0,
	kInventoryAccessMode_ReadOnly                      = 1,
	kInventoryAccessMode_AmmoPurchase                  = 2,
	kInventoryAccessMode_Locker_Ammo                   = 3,
	kInventoryAccessMode_Locker_NoAmmo                 = 4,
	kInventoryAccessMode_FieldDeployment               = 5,
	kInventoryAccessMode_FullDeployment                = 6,
	kInventoryAccessMode_MAX                           = 7
};*/

// Enum APBGame.iAmmoSupplier.etWeaponResupplyResult
/*enum etWeaponResupplyResult
{
	kWeaponResupply_OK                                 = 0,
	kWeaponResupply_NoWeaponDeployedInSlot             = 1,
	kWeaponResupply_WeaponFull                         = 2,
	kWeaponResupply_InsufficientFunds                  = 3,
	kAmmoResupply_WeaponLocked                         = 4,
	kWeaponResupply_Fail                               = 5,
	kWeaponResupply_AlreadyResupplying                 = 6,
	etWeaponResupplyResult_MAX                         = 7
};*/

// Enum APBGame.iAmmoSupplier.etInventoryAccessResult
/*enum etInventoryAccessResult
{
	kInventoryAccess_OK                                = 0,
	kInventoryAccess_WrongFaction                      = 1,
	kInventoryAccess_WrongGroup                        = 2,
	kInventoryAccess_AmmoCarrierFnModInactive          = 3,
	kInventoryAccess_AmmoCarrierDepotNotDeployed       = 4,
	kInventoryAccess_AmmoCarrierVehicleMoving          = 5,
	kInventoryAccess_Unconscious                       = 6,
	kInventoryAccess_Arrested                          = 7,
	kInventoryAccess_Dead                              = 8,
	kInventoryAccess_Fail                              = 9,
	kInventoryAccess_MAX                               = 10
};*/

// Enum APBGame.cSDD.etVehicleInteractionAnimation
/*enum etVehicleInteractionAnimation
{
	kVIA_Open_Door                                     = 0,
	kVIA_Close_Door                                    = 1,
	kVIA_Close_Door_From_Inside                        = 2,
	kVIA_Get_In_And_Close_Door                         = 3,
	kVIA_Open_Door_And_Get_Out                         = 4,
	kVIA_Open_Door_And_Bail_Out                        = 5,
	kVIA_Swap_Seats                                    = 6,
	kVIA_Enter_VCP                                     = 7,
	kVIA_Exit_VCP                                      = 8,
	kVIA_Eject_Doing_Initial_Criminal                  = 9,
	kVIA_Eject_Doing_Initial_Enforcer                  = 10,
	kVIA_Eject_Doing_Later_Criminal                    = 11,
	kVIA_Eject_Doing_Later_Enforcer                    = 12,
	kVIA_Eject_Seat_Slide_Criminal                     = 13,
	kVIA_Eject_Seat_Slide_Enforcer                     = 14,
	kVIA_Death                                         = 15,
	kVIA_DeathLean                                     = 16,
	kVIA_MAX                                           = 17
};*/

// Enum APBGame.cSDD.etVehicleGear
/*enum etVehicleGear
{
	VehicleGear_Reverse                                = 0,
	VehicleGear                                        = 1,
	VehicleGear01                                      = 2,
	VehicleGear02                                      = 3,
	VehicleGear03                                      = 4,
	VehicleGear04                                      = 5,
	VehicleGear05                                      = 6,
	VehicleGear_MAX                                    = 7
};*/

// Enum APBGame.cSDD.etVehicleUICategory
/*enum etVehicleUICategory
{
	VehicleUICategory_Civilian                         = 0,
	VehicleUICategory_Performance                      = 1,
	VehicleUICategory_Carrying                         = 2,
	VehicleUICategory_Luxury                           = 3,
	VehicleUICategory_Small                            = 4,
	VehicleUICategory_MAX                              = 5
};*/

// Enum APBGame.cSDD.etVehicleTempSetup
/*enum etVehicleTempSetup
{
	VehicleTempSetup_2DoorCar                          = 0,
	VehicleTempSetup_4DoorCar                          = 1,
	VehicleTempSetup_KingCab                           = 2,
	VehicleTempSetup_Roadster                          = 3,
	VehicleTempSetup_VanStandard                       = 4,
	VehicleTempSetup_2DrCoupe                          = 5,
	VehicleTempSetup_2DrVan                            = 6,
	VehicleTempSetup_4DrEstate                         = 7,
	VehicleTempSetup_ClassicMuscle                     = 8,
	VehicleTempSetup_Utility1Estate                    = 9,
	VehicleTempSetup_EstateVan                         = 10,
	VehicleTempSetup_ExecSaloon                        = 11,
	VehicleTempSetup_Hatchback                         = 12,
	VehicleTempSetup_Lowrider                          = 13,
	VehicleTempSetup_Pickup                            = 14,
	VehicleTempSetup_Saloon                            = 15,
	VehicleTempSetup_SportsSUV                         = 16,
	VehicleTempSetup_SUV                               = 17,
	VehicleTempSetup_Taxi                              = 18,
	VehicleTempSetup_TruckCurtain                      = 19,
	VehicleTempSetup_VanAmbulance                      = 20,
	VehicleTempSetup_VanArmoured                       = 21,
	VehicleTempSetup_CrimCarrying                      = 22,
	VehicleTempSetup_CrimCompact                       = 23,
	VehicleTempSetup_CrimPerformance                   = 24,
	VehicleTempSetup_EnfCarrying                       = 25,
	VehicleTempSetup_EnfCompact                        = 26,
	VehicleTempSetup_EnfPerformance                    = 27,
	VehicleTempSetup_MAX                               = 28
};*/

// Enum APBGame.cSDD.etVehicleSetupType
/*enum etVehicleSetupType
{
	VehicleSetupType_None                              = 0,
	VehicleSetupType_AmbientSUV_PickupCamper           = 1,
	VehicleSetupType_AmbientSUV_PickupFrontVariant1    = 2,
	VehicleSetupType_AmbientSUV_PickupKingCab          = 3,
	VehicleSetupType_AmbientSUV_PickupWorks            = 4,
	VehicleSetupType_AmbientSUV_SUV                    = 5,
	VehicleSetupType_AmbientTruck_BoxBackCurtain       = 6,
	VehicleSetupType_AmbientTruck_BoxBackSolid         = 7,
	VehicleSetupType_AmbientTruck_CementMixer          = 8,
	VehicleSetupType_AmbientTruck_DumpTruck            = 9,
	VehicleSetupType_AmbientTruck_FireTruck            = 10,
	VehicleSetupType_AmbientTruck_GarbageTruck         = 11,
	VehicleSetupType_AmbientUtility_2DoorCabriolet     = 12,
	VehicleSetupType_AmbientUtility_2DoorCoupe         = 13,
	VehicleSetupType_AmbientUtility_2DoorHatchback     = 14,
	VehicleSetupType_AmbientUtility_2DoorHatchbackVan  = 15,
	VehicleSetupType_AmbientUtility_4DoorEstate        = 16,
	VehicleSetupType_AmbientUtility_4DoorEstateVan     = 17,
	VehicleSetupType_AmbientUtility_4DoorHatchback     = 18,
	VehicleSetupType_AmbientUtility_4DoorSedan         = 19,
	VehicleSetupType_AmbientUtility_4DoorSedanFrontVariant1 = 20,
	VehicleSetupType_AmbientUtility_4DoorSedanFrontVariant2 = 21,
	VehicleSetupType_AmbientUtility_4DoorSedanFrontVariant3 = 22,
	VehicleSetupType_AmbientUtility_ClassicMuscle      = 23,
	VehicleSetupType_AmbientUtility_ExecSaloon         = 24,
	VehicleSetupType_AmbientUtility_LowRider           = 25,
	VehicleSetupType_AmbientUtility_SportSUV           = 26,
	VehicleSetupType_AmbientUtility_Taxi               = 27,
	VehicleSetupType_AmbientVan_Ambulance              = 28,
	VehicleSetupType_AmbientVan_ArmouredVan            = 29,
	VehicleSetupType_AmbientVan_CamperVan              = 30,
	VehicleSetupType_AmbientVan_FrontVariant1          = 31,
	VehicleSetupType_AmbientVan_HighBoxBack            = 32,
	VehicleSetupType_AmbientVan_PrisonVan              = 33,
	VehicleSetupType_AmbientVan_StandardVan            = 34,
	VehicleSetupType_CriminalCarrying                  = 35,
	VehicleSetupType_CriminalCompact                   = 36,
	VehicleSetupType_CriminalGeneralPurpose            = 37,
	VehicleSetupType_CriminalPerformance               = 38,
	VehicleSetupType_EnforcerCarrying                  = 39,
	VehicleSetupType_EnforcerCompact                   = 40,
	VehicleSetupType_EnforcerGeneralPurpose            = 41,
	VehicleSetupType_EnforcerPerformance               = 42,
	VehicleSetupType_AmbientSUV_Pickup                 = 43,
	VehicleSetupType_AmbientUtility_Roadster           = 44,
	VehicleSetupType_MAX                               = 45
};*/

// Enum APBGame.cSDD.etVehiclePositionIndex
/*enum etVehiclePositionIndex
{
	VehiclePositionIndex_FrontLeft                     = 0,
	VehiclePositionIndex_FrontRight                    = 1,
	VehiclePositionIndex_RearLeft                      = 2,
	VehiclePositionIndex_RearRight                     = 3,
	VehiclePositionIndex_Cargo                         = 4,
	VehiclePositionIndex_MAX                           = 5
};*/

// Enum APBGame.cSDD.etVehicleSpecificationMethod
/*enum etVehicleSpecificationMethod
{
	VehicleSpecification_ByVehicleCategory             = 0,
	VehicleSpecification_ByVehicleSubCategory          = 1,
	VehicleSpecification_SpecificVehicleSetupType      = 2,
	VehicleSpecification_MAX                           = 3
};*/

// Enum APBGame.cSDD.etVehicleModelClass
/*enum etVehicleModelClass
{
	VehicleModelClass_CriminalGeneralPurpose           = 0,
	VehicleModelClass_CriminalPerformance              = 1,
	VehicleModelClass_CriminalCarrying                 = 2,
	VehicleModelClass_EnforcerGeneralPurpose           = 3,
	VehicleModelClass_EnforcerPerformance              = 4,
	VehicleModelClass_EnforcerCarrying                 = 5,
	VehicleModelClass_AmbientUtility                   = 6,
	VehicleModelClass_AmbientVan                       = 7,
	VehicleModelClass_AmbientSUV                       = 8,
	VehicleModelClass_AmbientTruck                     = 9,
	VehicleModelClass_MAX                              = 10
};*/

// Enum APBGame.cSDD.etVehicleDriveType
/*enum etVehicleDriveType
{
	kVehicleDriveRWD                                   = 0,
	kVehicleDriveFWD                                   = 1,
	kVehicleDriveAWD                                   = 2,
	etVehicleDriveType_MAX                             = 3
};*/

// Enum APBGame.cSDD.etVehicleDistricts
/*enum etVehicleDistricts
{
	None_                                              = 0,
	Financial                                          = 1,
	etVehicleDistricts_MAX                             = 2
};*/

// Enum APBGame.cAPBPawnAnimation.etLocomotionType
/*enum etLocomotionType
{
	Locomotion_None                                    = 0,
	Locomotion_Walk                                    = 1,
	Locomotion_Run                                     = 2,
	Locomotion_Sprint                                  = 3,
	Locomotion_MAX                                     = 4
};*/

// Enum APBGame.cAPBPawnAnimation.eAnimRequestAction
/*enum eAnimRequestAction
{
	kARA_NotPlaying                                    = 0,
	kARA_Trigger                                       = 1,
	kARA_TriggerPredicted                              = 2,
	kARA_Play                                          = 3,
	kARA_Loop                                          = 4,
	kARA_Stop                                          = 5,
	kARA_MAX                                           = 6
};*/

// Enum APBGame.cSDD.etRCEType
/*enum etRCEType
{
	RCEType_None                                       = 0,
	RCEType_Door                                       = 1,
	RCEType_Fence                                      = 2,
	RCEType_Ladder                                     = 3,
	RCEType_MAX                                        = 4
};*/

// Enum APBGame.cSDD.etSpawnConstant
/*enum etSpawnConstant
{
	SpawnConstant_ElectiveRespawnDelaySeconds          = 0,
	SpawnConstant_GroundPlacementHeightOffset          = 1,
	SpawnConstant_MinPlayerRespawnTime                 = 2,
	SpawnConstant_MissionDefaultRespawnTime            = 3,
	SpawnConstant_MissionDefaultRespawnTimeIncrement   = 4,
	SpawnConstant_MissionMinPlayerRespawnDistance      = 5,
	SpawnConstant_PlayerRespawnTimeTillTransition      = 6,
	SpawnConstant_RespawnTransitionScreenFadeInTime    = 7,
	SpawnConstant_RespawnTransitionScreenFadeOutTime   = 8,
	SpawnConstant_MAX                                  = 9
};*/

// Enum APBGame.cSDD.etSpawnDestroyData
/*enum etSpawnDestroyData
{
	Spawn                                              = 0,
	Destroy                                            = 1,
	etSpawnDestroyData_MAX                             = 2
};*/

// Enum APBGame.cSDD.etTaskItemAnimationType
/*enum etTaskItemAnimationType
{
	TaskItemAnimationType_None                         = 0,
	TaskItemAnimationType_Medium                       = 1,
	TaskItemAnimationType_Large                        = 2,
	TaskItemAnimationType_MAX                          = 3
};*/

// Enum APBGame.cSDD.etTaskItemBatch
/*enum etTaskItemBatch
{
	TaskItemBatch_None                                 = 0,
	TaskItemBatch_A                                    = 1,
	TaskItemBatch_B                                    = 2,
	TaskItemBatch_C                                    = 3,
	TaskItemBatch_D                                    = 4,
	TaskItemBatch_E                                    = 5,
	TaskItemBatch_F                                    = 6,
	TaskItemBatch_G                                    = 7,
	TaskItemBatch_H                                    = 8,
	TaskItemBatch_MAX                                  = 9
};*/

// Enum APBGame.cSDD.etTaskItemSize
/*enum etTaskItemSize
{
	TaskItemSize_None                                  = 0,
	TaskItemSize_Small                                 = 1,
	TaskItemSize_MediumCarried                         = 2,
	TaskItemSize_LargeCarried                          = 3,
	TaskItemSize_Vehicle                               = 4,
	TaskItemSize_MAX                                   = 5
};*/

// Enum APBGame.cSDD.etTaskItemSpecificationMethod
/*enum etTaskItemSpecificationMethod
{
	TISM_ByTaskItemVariety                             = 0,
	TISM_ByTaskItemSubCategory                         = 1,
	TISM_ByTaskItemCategory                            = 2,
	TISM_MAX                                           = 3
};*/

// Enum APBGame.cSDD.etTaskItemVisibility
/*enum etTaskItemVisibility
{
	ItemVisibility_VisibleAlways                       = 0,
	ItemVisibility_HiddenAlways                        = 1,
	ItemVisibility_VisibleUntilFirstPickup             = 2,
	ItemVisibility_MAX                                 = 3
};*/

// Enum APBGame.cSDD.etTaskMemberRequirement
/*enum etTaskMemberRequirement
{
	MemberRequirement_AllMembersSimultaneously         = 0,
	MemberRequirement_AllMembersSequentially           = 1,
	MemberRequirement_AnyMember                        = 2,
	MemberRequirement_MAX                              = 3
};*/

// Enum APBGame.cSDD.etTaskObjectiveStage
/*enum etTaskObjectiveStage
{
	TaskObjectiveStage                                 = 0,
	TaskObjectiveStage_01                              = 1,
	TaskObjectiveStage_02                              = 2,
	TaskObjectiveStage_03                              = 3,
	TaskObjectiveStage_04                              = 4,
	TaskObjectiveStage_05                              = 5,
	TaskObjectiveStage_06                              = 6,
	TaskObjectiveStage_07                              = 7,
	TaskObjectiveStage_08                              = 8,
	TaskObjectiveStage_09                              = 9,
	TaskObjectiveStage01                               = 10,
	TaskObjectiveStage02                               = 11,
	TaskObjectiveStage03                               = 12,
	TaskObjectiveStage04                               = 13,
	TaskObjectiveStage05                               = 14,
	TaskObjectiveStage06                               = 15,
	TaskObjectiveStage07                               = 16,
	TaskObjectiveStage08                               = 17,
	TaskObjectiveStage09                               = 18,
	TaskObjectiveStage10                               = 19,
	TaskObjectiveStage11                               = 20,
	TaskObjectiveStage12                               = 21,
	TaskObjectiveStage13                               = 22,
	TaskObjectiveStage14                               = 23,
	TaskObjectiveStage15                               = 24,
	TaskObjectiveStage16                               = 25,
	TaskObjectiveStage17                               = 26,
	TaskObjectiveStage18                               = 27,
	TaskObjectiveStage19                               = 28,
	TaskObjectiveStage20                               = 29,
	TaskObjectiveStage21                               = 30,
	TaskObjectiveStage22                               = 31,
	TaskObjectiveStage23                               = 32,
	TaskObjectiveStage24                               = 33,
	TaskObjectiveStage25                               = 34,
	TaskObjectiveStage26                               = 35,
	TaskObjectiveStage27                               = 36,
	TaskObjectiveStage28                               = 37,
	TaskObjectiveStage29                               = 38,
	TaskObjectiveStage30                               = 39,
	TaskObjectiveStage_MAX                             = 40
};*/

// Enum APBGame.cSDD.etTaskOperationCategory
/*enum etTaskOperationCategory
{
	TaskOperationCategory_None                         = 0,
	TaskOperationCategory_AntiGraffiti                 = 1,
	TaskOperationCategory_ArmedGuard                   = 2,
	TaskOperationCategory_Arson                        = 3,
	TaskOperationCategory_BombDisposal                 = 4,
	TaskOperationCategory_Bombing                      = 5,
	TaskOperationCategory_Burglary                     = 6,
	TaskOperationCategory_Bust                         = 7,
	TaskOperationCategory_CrimeSceneInvestigation      = 8,
	TaskOperationCategory_Deathmatch                   = 9,
	TaskOperationCategory_DefaultOpposition            = 10,
	TaskOperationCategory_Delivery                     = 11,
	TaskOperationCategory_Escape                       = 12,
	TaskOperationCategory_Escort                       = 13,
	TaskOperationCategory_ForcedArrest                 = 14,
	TaskOperationCategory_ForcedEntry                  = 15,
	TaskOperationCategory_Graffiti                     = 16,
	TaskOperationCategory_Hacking                      = 17,
	TaskOperationCategory_MovingTarget                 = 18,
	TaskOperationCategory_Mugging                      = 19,
	TaskOperationCategory_Pickup                       = 20,
	TaskOperationCategory_RamRaid                      = 21,
	TaskOperationCategory_Rendezvous                   = 22,
	TaskOperationCategory_Sabotage                     = 23,
	TaskOperationCategory_StopAndSearch                = 24,
	TaskOperationCategory_Survival                     = 25,
	TaskOperationCategory_TakeOverDeathmatch           = 26,
	TaskOperationCategory_TerritoryControl             = 27,
	TaskOperationCategory_Vandalism                    = 28,
	TaskOperationCategory_VehicleCargo                 = 29,
	TaskOperationCategory_VehicleLooting               = 30,
	TaskOperationCategory_VehicleTheft                 = 31,
	TaskOperationCategory_MAX                          = 32
};*/

// Enum APBGame.cSDD.etTaskTargetCategory
/*enum etTaskTargetCategory
{
	TaskTargetCategory_None                            = 0,
	TaskTargetCategory_NPC_Pedestrian                  = 1,
	TaskTargetCategory_ParkedVehicle                   = 2,
	TaskTargetCategory_ObjectivePoint                  = 3,
	TaskTargetCategory_StaticActor                     = 4,
	TaskTargetCategory_TriggerVolume                   = 5,
	TaskTargetCategory_GraffitiPoint                   = 6,
	TaskTargetCategory_StandAloneProp                  = 7,
	TaskTargetCategory_ItemSpawnPoint                  = 8,
	TaskTargetCategory_Checkpoint                      = 9,
	TaskTargetCategory_MAX                             = 10
};*/

// Enum APBGame.cSDD.etTaskTargetClass
/*enum etTaskTargetClass
{
	TaskTargetClass_None                               = 0,
	TaskTargetClass_GraffitiPoint                      = 1,
	TaskTargetClass_ItemSpawnPoint                     = 2,
	TaskTargetClass_Checkpoint                         = 3,
	TaskTargetClass_NPC                                = 4,
	TaskTargetClass_Prop                               = 5,
	TaskTargetClass_VehicleSpawnPoint                  = 6,
	TaskTargetClass_MAX                                = 7
};*/

// Enum APBGame.cSDD.etTaskTargetGraffiti
/*enum etTaskTargetGraffiti
{
	Graffiti_Default                                   = 0,
	Graffiti_MAX                                       = 1
};*/

// Enum APBGame.cSDD.etTaskTargetSpecificationMethod
/*enum etTaskTargetSpecificationMethod
{
	TTSM_SpecificTaskTargetType                        = 0,
	TTSM_AnyOneTypeFromClass                           = 1,
	TTSM_AnyMixFromClass                               = 2,
	TTSM_MAX                                           = 3
};*/

// Enum APBGame.cSDD.etTESProjectionInfo
/*enum etTESProjectionInfo
{
	TESProjectionInfo_Body_MaxProjections              = 0,
	TESProjectionInfo_Body_MaxPrimitives               = 1,
	TESProjectionInfo_Body_AverageNumItems             = 2,
	TESProjectionInfo_ComplexityCutOff_LowMed          = 3,
	TESProjectionInfo_ComplexityCutOff_MedHigh         = 4,
	TESProjectionInfo_Vehicle_MaxProjections           = 5,
	TESProjectionInfo_Vehicle_MaxPrimitives            = 6,
	TESProjectionInfo_Symbol_MaxPrimitives             = 7,
	TESProjectionInfo_MAX                              = 8
};*/

// Enum APBGame.cSDD.etTimeOfDayAvailability
/*enum etTimeOfDayAvailability
{
	TimeOfDayAvailability_0000                         = 0,
	TimeOfDayAvailability_0001                         = 1,
	TimeOfDayAvailability_0010                         = 2,
	TimeOfDayAvailability_0011                         = 3,
	TimeOfDayAvailability_0100                         = 4,
	TimeOfDayAvailability_0101                         = 5,
	TimeOfDayAvailability_0110                         = 6,
	TimeOfDayAvailability_0111                         = 7,
	TimeOfDayAvailability                              = 8,
	TimeOfDayAvailability01                            = 9,
	TimeOfDayAvailability02                            = 10,
	TimeOfDayAvailability03                            = 11,
	TimeOfDayAvailability04                            = 12,
	TimeOfDayAvailability05                            = 13,
	TimeOfDayAvailability06                            = 14,
	TimeOfDayAvailability07                            = 15,
	TimeOfDayAvailability_Always                       = 16,
	TimeOfDayAvailability_MAX                          = 17
};*/

// Enum APBGame.cSDD.etTimeofDayPeriod
/*enum etTimeofDayPeriod
{
	TimeofDayPeriod_Morning                            = 0,
	TimeofDayPeriod_Afternoon                          = 1,
	TimeofDayPeriod_Evening                            = 2,
	TimeofDayPeriod_Night                              = 3,
	TimeofDayPeriod_MAX                                = 4
};*/

// Enum APBGame.cSDD.etTrackedActivityFixed
/*enum etTrackedActivityFixed
{
	TrackedActivityFixed_None                          = 0,
	TrackedActivityFixed_ArrestStats_AgainstEnemy      = 1,
	TrackedActivityFixed_ArrestStats_RescuedFriendly   = 2,
	TrackedActivityFixed_KillStats_FriendlyKills       = 3,
	TrackedActivityFixed_MatchStats_TotalLost          = 4,
	TrackedActivityFixed_MatchStats_TotalWon           = 5,
	TrackedActivityFixed_MedalStats_MedalsWon          = 6,
	TrackedActivityFixed_MiscStats_ContactLevelUp      = 7,
	TrackedActivityFixed_TakeoutStats_AgainstEnemy     = 8,
	TrackedActivityFixed_TimeStats_TotalActionDistrictTime = 9,
	TrackedActivityFixed_TimeStats_TotalAnyEditorTime  = 10,
	TrackedActivityFixed_TimeStats_TotalClothingEditorTime = 11,
	TrackedActivityFixed_TimeStats_TotalGameTime       = 12,
	TrackedActivityFixed_TimeStats_TotalMusicEditorTime = 13,
	TrackedActivityFixed_TimeStats_TotalSymbolEditorTime = 14,
	TrackedActivityFixed_TimeStats_TotalVehicleEditorTime = 15,
	TrackedActivityFixed_Total_Deaths                  = 16,
	TrackedActivityFixed_Total_Kills                   = 17,
	TrackedActivityFixed_MAX                           = 18
};*/

// Enum APBGame.cSDD.etTrackedActivityOperation
/*enum etTrackedActivityOperation
{
	TrackedActivityOperation_None                      = 0,
	TrackedActivityOperation_0_DivideBy                = 1,
	TrackedActivityOperation_0_DivideBy_1_Percent      = 2,
	TrackedActivityOperation_Sum                       = 3,
	TrackedActivityOperation_MAX                       = 4
};*/

// Enum APBGame.cSDD.etTrackedActivityUnitConversion
/*enum etTrackedActivityUnitConversion
{
	TrackedActivityUnitConversion_None                 = 0,
	TrackedActivityUnitConversion_Days_Hours_Minutes_Seconds = 1,
	TrackedActivityUnitConversion_FixedPoint           = 2,
	TrackedActivityUnitConversion_MAX                  = 3
};*/

// Enum APBGame.cSDD.etTTINPCEndingType
/*enum etTTINPCEndingType
{
	Despawn                                            = 0,
	WalkAway                                           = 1,
	RunAway                                            = 2,
	Die                                                = 3,
	etTTINPCEndingType_MAX                             = 4
};*/

// Enum APBGame.cSDD.etTTIPlayerAnimType
/*enum etTTIPlayerAnimType
{
	IntroAnim                                          = 0,
	MainAnim1                                          = 1,
	MainAnim2                                          = 2,
	MainAnim3                                          = 3,
	OutroAnim                                          = 4,
	IdleAnim                                           = 5,
	etTTIPlayerAnimType_MAX                            = 6
};*/

// Enum APBGame.cSDD.etTutorialBypassBehaviour
/*enum etTutorialBypassBehaviour
{
	TutorialBypassBehaviour_None                       = 0,
	TutorialBypassBehaviour_MaxOutTutorContacts_NoRewards = 1,
	TutorialBypassBehaviour_MaxOutTutorContacts_FullRewards = 2,
	TutorialBypassBehaviour_MAX                        = 3
};*/

// Enum APBGame.cSDD.etTutorialPosition
/*enum etTutorialPosition
{
	TopLeft                                            = 0,
	MiddleLeft                                         = 1,
	BottomLeft                                         = 2,
	etTutorialPosition_MAX                             = 3
};*/

// Enum APBGame.cSDD.etTutorialType
/*enum etTutorialType
{
	Small                                              = 0,
	Large                                              = 1,
	etTutorialType_MAX                                 = 2
};*/

// Enum APBGame.cSDD.etVehicleBatch
/*enum etVehicleBatch
{
	VehicleBatch_None                                  = 0,
	VehicleBatch_A                                     = 1,
	VehicleBatch_B                                     = 2,
	VehicleBatch_C                                     = 3,
	VehicleBatch_D                                     = 4,
	VehicleBatch_E                                     = 5,
	VehicleBatch_F                                     = 6,
	VehicleBatch_G                                     = 7,
	VehicleBatch_H                                     = 8,
	VehicleBatch_MAX                                   = 9
};*/

// Enum APBGame.cSDD.etVehicleColour
/*enum etVehicleColour
{
	White                                              = 0,
	Silver                                             = 1,
	Grey                                               = 2,
	SlateGrey                                          = 3,
	DarkGrey                                           = 4,
	Black                                              = 5,
	CadetBlue                                          = 6,
	RoyalBlue                                          = 7,
	MediumBlue                                         = 8,
	Blue                                               = 9,
	DarkBlueMike                                       = 10,
	LightSlateGrey                                     = 11,
	Cyan                                               = 12,
	MediumSeaGreen                                     = 13,
	SeaGreenStig                                       = 14,
	DarkCyan                                           = 15,
	DarkSeaGreen                                       = 16,
	Green                                              = 17,
	DarkGreen                                          = 18,
	DarkOliveGreen                                     = 19,
	Orange                                             = 20,
	Red                                                = 21,
	DarkRed                                            = 22,
	Brown                                              = 23,
	DarkBrownPranay                                    = 24,
	Khaki                                              = 25,
	HoneyDew                                           = 26,
	LightPink                                          = 27,
	Yellow                                             = 28,
	Golden                                             = 29,
	DarkOrange                                         = 30,
	DarkGolden                                         = 31,
	Silver_Metallic                                    = 32,
	Grey_Metallic                                      = 33,
	SlateGrey_Metallic                                 = 34,
	LightSlateGrey_Metallic                            = 35,
	DarkSeaGreen_Metallic                              = 36,
	HoneyDew_Metallic                                  = 37,
	Orange_Metallic                                    = 38,
	etVehicleColour_MAX                                = 39
};*/

// Enum APBGame.cSDD.etVehicleDamageVFXState
/*enum etVehicleDamageVFXState
{
	VehicleDamageVFX_None                              = 0,
	VehicleDamageVFX_DamageState1                      = 1,
	VehicleDamageVFX_DamageState2                      = 2,
	VehicleDamageVFX_DamageState3                      = 3,
	VehicleDamageVFX_DamageState4                      = 4,
	VehicleDamageVFX_MAX                               = 5
};*/

// Enum APBGame.cSDD.etOrganisation
/*enum etOrganisation
{
	Organisation_None                                  = 0,
	Organisation_CriminalDefault                       = 1,
	Organisation_GKings                                = 2,
	Organisation_BloodRoses                            = 3,
	Organisation_Praetorian                            = 4,
	Organisation_PrentissTigers                        = 5,
	Organisation_RedRain                               = 6,
	Organisation_SPPD                                  = 7,
	Organisation_EnforcerDefault                       = 8,
	Organisation_MAX                                   = 9
};*/

// Enum APBGame.cSDD.etPawnHitReaction_BoneList
/*enum etPawnHitReaction_BoneList
{
	aHitReactionBoneList                               = 0,
	etPawnHitReaction_BoneList_MAX                     = 1
};*/

// Enum APBGame.cSDD.etPawnHitReaction_BoneRemapTable
/*enum etPawnHitReaction_BoneRemapTable
{
	aHitReactionBoneRemapTable1                        = 0,
	aHitReactionBoneRemapTable2                        = 1,
	etPawnHitReaction_BoneRemapTable_MAX               = 2
};*/

// Enum APBGame.cSDD.etPawnHitReaction_Bool
/*enum etPawnHitReaction_Bool
{
	bEnableHitReactionBoneSprings                      = 0,
	etPawnHitReaction_Bool_MAX                         = 1
};*/

// Enum APBGame.cSDD.etPawnHitReaction_ConstrainedBoneList
/*enum etPawnHitReaction_ConstrainedBoneList
{
	aHitReactionConstrainedBoneList                    = 0,
	etPawnHitReaction_ConstrainedBoneList_MAX          = 1
};*/

// Enum APBGame.cSDD.etPawnHitReaction_Float
/*enum etPawnHitReaction_Float
{
	fHitReactionBlendOutTime                           = 0,
	fHitReactionImpulseScale                           = 1,
	fHitReactionImpulseScaleWalking                    = 2,
	fHitReactionImpulseScaleRunning                    = 3,
	fHitReactionImpulseScaleSprinting                  = 4,
	fHitReactionImpulseScaleLocalPlayer                = 5,
	fHitReactionMassEffectScale                        = 6,
	etPawnHitReaction_Float_MAX                        = 7
};*/

// Enum APBGame.cSDD.etPawnHitReaction_SpringList
/*enum etPawnHitReaction_SpringList
{
	aHitReactionSpringList                             = 0,
	etPawnHitReaction_SpringList_MAX                   = 1
};*/

// Enum APBGame.cSDD.etPawnHitReaction_Vector2D
/*enum etPawnHitReaction_Vector2D
{
	vHitReactionMotorStrength                          = 0,
	vHitReactionSpringStrength                         = 1,
	etPawnHitReaction_Vector2D_MAX                     = 2
};*/

// Enum APBGame.cSDD.etPawnHitReactionType
/*enum etPawnHitReactionType
{
	PawnHitReaction_BoneList                           = 0,
	PawnHitReaction_ConstrainedBoneList                = 1,
	PawnHitReaction_SpringList                         = 2,
	PawnHitReaction_BoneRemapTable                     = 3,
	PawnHitReaction_Float                              = 4,
	PawnHitReaction_Vector2D                           = 5,
	PawnHitReaction_Bool                               = 6,
	PawnHitReaction_MAX                                = 7
};*/

// Enum APBGame.cSDD.etPedestrianPaletteType
/*enum etPedestrianPaletteType
{
	F_Business_City                                    = 0,
	F_Business_Local                                   = 1,
	F_Clubber_Casual                                   = 2,
	F_Clubber_Fashion                                  = 3,
	F_Industrial_DockWorker                            = 4,
	F_Industrial_FactoryWorker                         = 5,
	F_LowerClass_TrailerTrash                          = 6,
	F_LowerClass_Welfare                               = 7,
	F_MiddleClass_Casual                               = 8,
	F_MiddleClass_Professional                         = 9,
	F_Seedy_Grifter                                    = 10,
	F_Seedy_Hobo                                       = 11,
	F_Uniformed_Casual                                 = 12,
	F_Uniformed_Smart                                  = 13,
	F_UpperClass_Casual                                = 14,
	F_UpperClass_Fashion                               = 15,
	F_Urban1_HipHop                                    = 16,
	F_Urban1_Rocker                                    = 17,
	F_Urban2_Athletic                                  = 18,
	F_Urban2_Emo                                       = 19,
	M_Business_City                                    = 20,
	M_Business_City_AsianDyed_06                       = 21,
	M_Business_Local                                   = 22,
	M_Clubber_Casual                                   = 23,
	M_Clubber_Fashion                                  = 24,
	M_Industrial_DockWorker                            = 25,
	M_Industrial_FactoryWorker                         = 26,
	M_LowerClass_TrailerTrash                          = 27,
	M_LowerClass_Welfare                               = 28,
	M_MiddleClass_Casual                               = 29,
	M_MiddleClass_Professional                         = 30,
	M_Seedy_Grifter                                    = 31,
	M_Seedy_Hobo                                       = 32,
	M_Uniformed_Casual                                 = 33,
	M_Uniformed_Professional                           = 34,
	M_Uniformed_Smart_AsianDyed_06                     = 35,
	M_UpperClass_Casual                                = 36,
	M_UpperClass_Fashion                               = 37,
	M_Urban1_HipHop                                    = 38,
	M_Urban1_Rocker                                    = 39,
	M_Urban2_Athletic                                  = 40,
	M_Urban2_Emo                                       = 41,
	etPedestrianPaletteType_MAX                        = 42
};*/

// Enum APBGame.cSDD.etPedestrianTempSetup
/*enum etPedestrianTempSetup
{
	Male                                               = 0,
	Female                                             = 1,
	etPedestrianTempSetup_MAX                          = 2
};*/

// Enum APBGame.cSDD.etPedestrianTTIReaction
/*enum etPedestrianTTIReaction
{
	NPCMugging                                         = 0,
	etPedestrianTTIReaction_MAX                        = 1
};*/

// Enum APBGame.cSDD.etPlayerRadarPings
/*enum etPlayerRadarPings
{
	Pings_None                                         = 0,
	Pings_Partial                                      = 1,
	Pings_Full                                         = 2,
	Pings_MAX                                          = 3
};*/

// Enum APBGame.cSDD.etPopulation
/*enum etPopulation
{
	kPopulation_Low                                    = 0,
	kPopulation_Medium                                 = 1,
	kPopulation_High                                   = 2,
	kPopulation_Full                                   = 3,
	kPopulation_MAX                                    = 4
};*/

// Enum APBGame.cSDD.etPrimitiveType
/*enum etPrimitiveType
{
	kPrimitive_Vinyl                                   = 0,
	kPrimitive_Decal                                   = 1,
	kPrimitive_Font                                    = 2,
	kPrimitive_MAX                                     = 3
};*/

// Enum APBGame.cSDD.etPvPRule
/*enum etPvPRule
{
	PvPRule_DisabledAlways                             = 0,
	PvPRule_EnabledAlways                              = 1,
	PvPRule_EnabledFriendsOnly                         = 2,
	PvPRule_EnabledEnemiesOnly                         = 3,
	PvPRule_EnabledFriendsAndEnemiesOnly               = 4,
	PvPRule_MAX                                        = 5
};*/

// Enum APBGame.cSDD.etPvPType
/*enum etPvPType
{
	PvPType_Environment                                = 0,
	PvPType_PlayerEnforcer                             = 1,
	PvPType_PlayerCriminal                             = 2,
	PvPType_PlayerGM                                   = 3,
	PvPType_MAX                                        = 4
};*/

// Enum APBGame.cAPBSkelControlLimb.etMatchAxis
/*enum etMatchAxis
{
	kIGNORE                                            = 0,
	kMATCH                                             = 1,
	etMatchAxis_MAX                                    = 2
};*/

// Enum APBGame.cAPBSkelControlLimb.etSideOfTheBody
/*enum etSideOfTheBody
{
	kLEFT                                              = 0,
	kRIGHT                                             = 1,
	etSideOfTheBody_MAX                                = 2
};*/

// Enum APBGame.cAPBSkelControlLimbStrategy.eSocketResult
/*enum eSocketResult
{
	kSR_NONE                                           = 0,
	kSR_FOUND                                          = 1,
	kSR_CACHED_LOCAL                                   = 2,
	kSR_MAX                                            = 3
};*/

// Enum APBGame.cAPBSkelControlLimbStrategy.etIKStrategy
/*enum etIKStrategy
{
	IK_DEFAULT                                         = 0,
	IK_NONE                                            = 1,
	IK_UNSCALED                                        = 2,
	IK_ANY_OBJECT                                      = 3,
	IK_VEHICLE                                         = 4,
	IK_MAX                                             = 5
};*/

// Enum APBGame.cAPBSkelControlLimbStrategy.etEffectorRotation
/*enum etEffectorRotation
{
	IK_EFFECTOR_DEFAULT                                = 0,
	IK_EFFECTOR_MAINTAIN_RELATIVE_ROTATION             = 1,
	IK_EFFECTOR_TAKE_FROM_EFFECTOR_SPACE               = 2,
	IK_EFFECTOR_MATCH_SOCKET                           = 3,
	IK_EFFECTOR_MAX                                    = 4
};*/

// Enum APBGame.cAnimNodePlayEquipmentCSA.etCSAPhase
/*enum etCSAPhase
{
	eCSAPhase_Default                                  = 0,
	eCSAPhase_Intro                                    = 1,
	eCSAPhase_Main                                     = 2,
	eCSAPhase_Outro                                    = 3,
	eCSAPhase_MAX                                      = 4
};*/

// Enum APBGame.cAnimNotifyLogical_TaskItem.etTaskItemNotify
/*enum etTaskItemNotify
{
	eTIN_None                                          = 0,
	eTIN_PassTaskItem                                  = 1,
	eTIN_ReceiveTaskItem                               = 2,
	eTIN_DropTaskItem                                  = 3,
	eTIN_MAX                                           = 4
};*/

// Enum APBGame.cSDD.etWeaponImpactClass
/*enum etWeaponImpactClass
{
	WIC_Null                                           = 0,
	WIC_Small                                          = 1,
	WIC_Medium                                         = 2,
	WIC_Heavy                                          = 3,
	WIC_Explosive                                      = 4,
	WIC_Melee                                          = 5,
	WIC_Shotgun                                        = 6,
	WIC_NonLethal                                      = 7,
	WIC_MAX                                            = 8
};*/

// Enum APBGame.cSDD.etWeaponFiringState
/*enum etWeaponFiringState
{
	WeaponNone                                         = 0,
	WeaponSemi                                         = 1,
	WeaponAuto                                         = 2,
	WeaponBurst                                        = 3,
	WeaponCooking                                      = 4,
	etWeaponFiringState_MAX                            = 5
};*/

// Enum APBGame.cAPBPawn.etCharacterLeanState
/*enum etCharacterLeanState
{
	CLS_None                                           = 0,
	CLS_MirroredLeft                                   = 1,
	CLS_Left                                           = 2,
	CLS_Right                                          = 3,
	CLS_MAX                                            = 4
};*/

// Enum APBGame.cAPBPawn.etCanUseDoor
/*enum etCanUseDoor
{
	CanUseDoor_False_Roll_None                         = 0,
	CanUseDoor_True                                    = 1,
	CanUseDoor_False_Angle_Pitch                       = 2,
	CanUseDoor_False_Angle_Roll                        = 3,
	CanUseDoor_False_No_Floor_At_VAP                   = 4,
	CanUseDoor_False_VAP_Too_Far_Z                     = 5,
	CanUseDoor_False_Collision                         = 6,
	CanUseDoor_MAX                                     = 7
};*/

// Enum APBGame.cAPBPawn.etCurrentRecoilPart
/*enum etCurrentRecoilPart
{
	RecoilPart_None                                    = 0,
	RecoilPart_Recoil                                  = 1,
	RecoilPart_Recover                                 = 2,
	RecoilPart_MAX                                     = 3
};*/

// Enum APBGame.cAPBPawn.etWeaponState
/*enum etWeaponState
{
	WEAPONSTATE_Normal                                 = 0,
	WEAPONSTATE_UnHolster                              = 1,
	WEAPONSTATE_Holster                                = 2,
	WEAPONSTATE_Reloading                              = 3,
	WEAPONSTATE_EndReloading                           = 4,
	WEAPONSTATE_SwitchToUnarmed                        = 5,
	WEAPONSTATE_MAX                                    = 6
};*/

// Enum APBGame.cAPBPawn.etGrenadeWeaponState
/*enum etGrenadeWeaponState
{
	GRENADEWEAPON_Normal                               = 0,
	GRENADEWEAPON_PinPull                              = 1,
	GRENADEWEAPON_Throw                                = 2,
	GRENADEWEAPON_MAX                                  = 3
};*/

// Enum APBGame.cAPBPawn.etDyingState
/*enum etDyingState
{
	eDS_None                                           = 0,
	eDS_OnFoot                                         = 1,
	eDS_InVehicle                                      = 2,
	eDS_InVehicleTelefrag                              = 3,
	eDS_Respawn                                        = 4,
	eDS_TeleFrag                                       = 5,
	eDS_MAX                                            = 6
};*/

// Enum APBGame.cAPBPawn.etCSAMirrorState
/*enum etCSAMirrorState
{
	CSAMirror_UseCameraSwap                            = 0,
	CSAMirror_NotMirrored                              = 1,
	CSAMirror_Mirrored                                 = 2,
	CSAMirror_MAX                                      = 3
};*/

// Enum APBGame.cSDD.etVIPAssignmentMethod
/*enum etVIPAssignmentMethod
{
	VIPAssignmentMethod_SideLeader                     = 0,
	VIPAssignmentMethod_HighestHeatPlayer              = 1,
	VIPAssignmentMethod_MAX                            = 2
};*/

// Enum APBGame.cSDD.etWarningPromptGroup
/*enum etWarningPromptGroup
{
	WPG_Warning_Email                                  = 0,
	WPG_Warning_Vending                                = 1,
	WPG_Warning_MAX                                    = 2
};*/

// Enum APBGame.cSDD.etWeaponClass
/*enum etWeaponClass
{
	Grenade                                            = 0,
	Melee                                              = 1,
	Projectile                                         = 2,
	Raycast                                            = 3,
	ShotGun                                            = 4,
	Witnessing                                         = 5,
	etWeaponClass_MAX                                  = 6
};*/

// Enum APBGame.cContact.etPlayerStanding
/*enum etPlayerStanding
{
	ePS_Default                                        = 0,
	ePS_Maxed                                          = 1,
	ePS_NoDeal                                         = 2,
	ePS_WrongFaction                                   = 3,
	ePS_MAX                                            = 4
};*/

// Enum APBGame.cContact.etContactInteractionState
/*enum etContactInteractionState
{
	eCIS_DefaultIdle                                   = 0,
	eCIS_DefaultIdleToAlertIdle                        = 1,
	eCIS_Hail                                          = 2,
	eCIS_AlertIdle                                     = 3,
	eCIS_Greeting                                      = 4,
	eCIS_Response                                      = 5,
	eCIS_Dealing                                       = 6,
	eCIS_Goodbye                                       = 7,
	eCIS_AlertIdleToDefaultIdle                        = 8,
	eCIS_Rotate                                        = 9,
	eCIS_MAX                                           = 10
};*/

// Enum APBGame.cContact.etContactInteractionType
/*enum etContactInteractionType
{
	eCIT_None                                          = 0,
	eCIT_Remote                                        = 1,
	eCIT_FaceToFace                                    = 2,
	eCIT_FaceToFaceInventoryAccess                     = 3,
	eCIT_MAX                                           = 4
};*/

// Enum APBGame.cPseudoKinematicComponent.EPKCState
/*enum EPKCState
{
	PKCSTATE_None                                      = 0,
	PKCSTATE_Limbo                                     = 1,
	PKCSTATE_EncroachCheck                             = 2,
	PKCSTATE_Kinematic_NoCollision                     = 3,
	PKCSTATE_Kinematic_WithCollision                   = 4,
	PKCSTATE_PseudoKinematic                           = 5,
	PKCSTATE_Dynamic                                   = 6,
	PKCSTATE_MAX                                       = 7
};*/

// Enum APBGame.Golemobile.etEmissiveLightType
/*enum etEmissiveLightType
{
	kLight_Dummy                                       = 0,
	kLight_HeadlightLeft                               = 1,
	kLight_HeadlightRight                              = 2,
	kLight_IndicatorFrontLeft                          = 3,
	kLight_IndicatorFrontRight                         = 4,
	kLight_BrakeLeft                                   = 5,
	kLight_BrakeRight                                  = 6,
	kLight_ReverseLeft                                 = 7,
	kLight_ReverseRight                                = 8,
	kLight_Interior                                    = 9,
	kLight_Dashboard                                   = 10,
	kLight_BrakeDiscs                                  = 11,
	kLight_CentreBrake                                 = 12,
	kLight_TailLightLeft                               = 13,
	kLight_TailLightRight                              = 14,
	kLight_IndicatorRearLeft                           = 15,
	kLight_IndicatorRearRight                          = 16,
	kLight_Special_01                                  = 17,
	kLight_Special_02                                  = 18,
	kLight_Special_03                                  = 19,
	kLight_Special_04                                  = 20,
	kLight_Special_05                                  = 21,
	kLight_Special_06                                  = 22,
	kLight_Special_07                                  = 23,
	kLight_Special_08                                  = 24,
	kLight_Special_09                                  = 25,
	kLight_Special                                     = 26,
	kLight_RoofLight                                   = 27,
	kLight_MAX                                         = 28
};*/

// Enum APBGame.Golemobile.etExtremeDamageType
/*enum etExtremeDamageType
{
	kExtreme_Front                                     = 0,
	kExtreme_Rear                                      = 1,
	kExtreme_SideLeft                                  = 2,
	kExtreme_SideRight                                 = 3,
	kExtreme_Top                                       = 4,
	kExtreme_MAX                                       = 5
};*/

// Enum APBGame.Golemobile.etPaintType
/*enum etPaintType
{
	PT_BASIC                                           = 0,
	PT_METALLIC                                        = 1,
	PT_PEARLESCENT                                     = 2,
	PT_METALLIC_PEARLESCENT                            = 3,
	PT_MAX                                             = 4
};*/

// Enum APBGame.Golemobile.etVehicleTextureType
/*enum etVehicleTextureType
{
	VT_EXTERIOR_DIFFUSE                                = 0,
	VT_EXTERIOR_NORMAL                                 = 1,
	VT_EXTERIOR_EMISSIVE                               = 2,
	VT_INTERIOR_DIFFUSE                                = 3,
	VT_INTERIOR_NORMAL                                 = 4,
	VT_INTERIOR_EMISSIVE                               = 5,
	VT_WHEEL_DIFFUSE                                   = 6,
	VT_WHEEL_NORMAL                                    = 7,
	VT_EXTERIOR_ScratchDiffuse_DirtMask_DamageMask_DustMask = 8,
	VT_EXTERIOR_DamagedNormal                          = 9,
	VT_EXTERIOR_ScratchMask                            = 10,
	VT_MAX                                             = 11
};*/

// Enum APBGame.Golemobile.etVehicleLookupTextureType
/*enum etVehicleLookupTextureType
{
	VLT_DAMAGE                                         = 0,
	VLT_EMISSIVE                                       = 1,
	VLT_MAX                                            = 2
};*/

// Enum APBGame.Golemobile.etDamageType
/*enum etDamageType
{
	kDamage_FrontLeft                                  = 0,
	kDamage_FrontRight                                 = 1,
	kDamage_RearLeft                                   = 2,
	kDamage_RearRight                                  = 3,
	kDamage_SideLeft                                   = 4,
	kDamage_SideRight                                  = 5,
	kDamage_Top                                        = 6,
	kDamage_MAX                                        = 7
};*/

// Enum APBGame.cAPBVehicleBase.etDoorInteractionAnimation
/*enum etDoorInteractionAnimation
{
	kDIA_Open_Door                                     = 0,
	kDIA_Close_Door                                    = 1,
	kDIA_Close_Door_From_Inside                        = 2,
	kDIA_Get_In_And_Close_Door                         = 3,
	kDIA_Open_Door_And_Get_Out                         = 4,
	kDIA_Open_Door_And_Bail_Out                        = 5,
	kDIA_NPC_Hijack_Open_Door_Criminal                 = 6,
	kDIA_NPC_Hijack_Open_Door_Enforcer                 = 7,
	kDIA_MAX                                           = 8
};*/

// Enum APBGame.cVehicleTypes.etSeatUseState
/*enum etSeatUseState
{
	SUS_None                                           = 0,
	SUS_LockedDuringHijack                             = 1,
	SUS_UsingNotOnRoutingToVAP                         = 2,
	SUS_UsingNotOnGettingInNonOwning                   = 3,
	SUS_UsingNotOnGettingInOwning                      = 4,
	SUS_UsingNotOnGettingOut                           = 5,
	SUS_UsingNotOnSwitchingSeats                       = 6,
	SUS_UsingOn                                        = 7,
	SUS_MAX                                            = 8
};*/

// Enum APBGame.cVehicleTypes.etVehicleExitPosition
/*enum etVehicleExitPosition
{
	VEP_None                                           = 0,
	VEP_AtVAP                                          = 1,
	VEP_Teleport                                       = 2,
	VEP_MAX                                            = 3
};*/

// Enum APBGame.iDeliverable.etDeliverableState
/*enum etDeliverableState
{
	DeliverableState_None                              = 0,
	DeliverableState_Free                              = 1,
	DeliverableState_CarriedOwners                     = 2,
	DeliverableState_CarriedOpposition                 = 3,
	DeliverableState_Delivered                         = 4,
	DeliverableState_MAX                               = 5
};*/

// Enum APBGame.cVehicleTypes.EVehicleType
/*enum EVehicleType
{
	VEHICLETYPE_None                                   = 0,
	VEHICLETYPE_Free                                   = 1,
	VEHICLETYPE_LivingCity                             = 2,
	VEHICLETYPE_PlayerDeployed                         = 3,
	VEHICLETYPE_HackSpawned                            = 4,
	VEHICLETYPE_TestPseudoKinematic                    = 5,
	VEHICLETYPE_ParkedTaskTarget                       = 6,
	VEHICLETYPE_MAX                                    = 7
};*/

// Enum APBGame.cVehicleTypes.etVehicleSpawnState
/*enum etVehicleSpawnState
{
	eVSS_NotSpawned                                    = 0,
	eVSS_Spawned                                       = 1,
	eVSS_DiedDamaged                                   = 2,
	eVSS_DiedVandalised                                = 3,
	eVSS_Recycled                                      = 4,
	eVSS_Telefragged                                   = 5,
	eVSS_MAX                                           = 6
};*/

// Enum APBGame.cVehicleTypes.etSeatActionEnum
/*enum etSeatActionEnum
{
	SAE_GettingIn                                      = 0,
	SAE_GettingOut                                     = 1,
	SAE_MAX                                            = 2
};*/

// Enum APBGame.cVehicleTypes.etDoorState
/*enum etDoorState
{
	DS_Open                                            = 0,
	DS_Closed                                          = 1,
	DS_MAX                                             = 2
};*/

// Enum APBGame.cNPCDef.etNPCClass
/*enum etNPCClass
{
	kLC_None                                           = 0,
	kLC_Pedestrian                                     = 1,
	kLC_Vehicle                                        = 2,
	kLC_MAX                                            = 3
};*/

// Enum APBGame.cNPCDef.etClassRole
/*enum etClassRole
{
	kCR_None                                           = 0,
	kCR_Client                                         = 1,
	kCR_Server                                         = 2,
	kCR_ClientServer                                   = 3,
	kCR_MAX                                            = 4
};*/

// Enum APBGame.cNPCDef.etClassScope
/*enum etClassScope
{
	kCS_None                                           = 0,
	kCS_Global                                         = 1,
	kCS_Individual                                     = 2,
	kCS_MAX                                            = 3
};*/

// Enum APBGame.cNPCDef.etManagementStatus
/*enum etManagementStatus
{
	kMS_None                                           = 0,
	kMS_Ignored                                        = 1,
	kMS_Manual                                         = 2,
	kMS_Automatic                                      = 3,
	kMS_MAX                                            = 4
};*/

// Enum APBGame.cNPCDef.etReplicationStatus
/*enum etReplicationStatus
{
	kRS_None                                           = 0,
	kRS_NotReplicated                                  = 1,
	kRS_Replicated                                     = 2,
	kRS_MAX                                            = 3
};*/

// Enum APBGame.cNPCDef.etBrainAndPhysRepState
/*enum etBrainAndPhysRepState
{
	kBPS_None                                          = 0,
	kBPS_Init                                          = 1,
	kBPS_Active                                        = 2,
	kBPS_Disconnected                                  = 3,
	kBPS_Limbo                                         = 4,
	kBPS_SelfDestructCountdown                         = 5,
	kBPS_RagDoll                                       = 6,
	kBPS_MAX                                           = 7
};*/

// Enum APBGame.cLaneCommand.etLaneState
/*enum etLaneState
{
	kLS_None                                           = 0,
	kLS_FollowLane                                     = 1,
	kLS_ChangeLane                                     = 2,
	kLS_MAX                                            = 3
};*/

// Enum APBGame.cSDD.etWitnessingFunctionality
/*enum etWitnessingFunctionality
{
	RulesetWitnessing_Off                              = 0,
	RulesetWitnessing_HeatGenerated                    = 1,
	RulesetWitnessing_HeatAndMissionsGenerated         = 2,
	RulesetWitnessing_MAX                              = 3
};*/

// Enum APBGame.cSDD.etWorldFaction
/*enum etWorldFaction
{
	kWorldFaction_Normal                               = 0,
	kWorldFaction_Recommended                          = 1,
	kWorldFaction_Full                                 = 2,
	kWorldFaction_MAX                                  = 3
};*/

// Enum APBGame.cSDD.etYesNoEither
/*enum etYesNoEither
{
	kYNE_Either                                        = 0,
	kYNE_Yes                                           = 1,
	kYNE_No                                            = 2,
	kYNE_MAX                                           = 3
};*/

// Enum APBGame.cAPBCameraModifierScreenShake.EShakeParam
/*enum EShakeParam
{
	ESP_OffsetRandom                                   = 0,
	ESP_OffsetZero                                     = 1,
	ESP_MAX                                            = 2
};*/

// Enum APBGame.cAPBCamera.etModeIntendedTarget
/*enum etModeIntendedTarget
{
	Targ_None                                          = 0,
	Targ_Controller                                    = 1,
	Targ_Character                                     = 2,
	Targ_Vehicle                                       = 3,
	Targ_MAX                                           = 4
};*/

// Enum APBGame.cAPBCamera.etCameraPosition
/*enum etCameraPosition
{
	CameraPosition_ZoomedIn                            = 0,
	CameraPosition_UserDefined                         = 1,
	CameraPosition_ZoomedOut                           = 2,
	CameraPosition_MAX                                 = 3
};*/

// Enum APBGame.cAPBCameraModeVehicleUber.ECurrentVehicleCameraMode
/*enum ECurrentVehicleCameraMode
{
	VCM_NONE                                           = 0,
	VCM_DRIVER                                         = 1,
	VCM_PASSENGER_SIT                                  = 2,
	VCM_PASSENGER_AIM                                  = 3,
	VCM_PASSENGER_MARKS                                = 4,
	VCM_MAX                                            = 5
};*/

// Enum APBGame.cHostingChatMessage.etChatMessageType
/*enum etChatMessageType
{
	kCHAT_SAY                                          = 0,
	kCHAT_YELL                                         = 1,
	kCHAT_WHISPER                                      = 2,
	kCHAT_WHISPER_SENT                                 = 3,
	kCHAT_METAGROUP                                    = 4,
	kCHAT_GROUP                                        = 5,
	kCHAT_CLAN                                         = 6,
	kCHAT_OFFICER                                      = 7,
	kCHAT_DISTRICT                                     = 8,
	kCHAT_AFK                                          = 9,
	kCHAT_DND                                          = 10,
	kCHAT_SYSTEM                                       = 11,
	kCHAT_BROADCAST_SYSTEM                             = 12,
	kCHAT_MAX                                          = 13
};*/

// Enum APBGame.cPlayerControllerCSAComponent.etPendingCSAType
/*enum etPendingCSAType
{
	ePT_None                                           = 0,
	ePT_AutoRoute                                      = 1,
	ePT_CSAEnd                                         = 2,
	ePT_MAX                                            = 3
};*/

// Enum APBGame.cTaskTypes.etMissionJustificationType
/*enum etMissionJustificationType
{
	eJT_MissionCriminalContactJustification            = 0,
	eJT_MissionEnforcerContactJustification            = 1,
	eJT_MissionCriminalOrganisationJustification       = 2,
	eJT_MissionEnforcerOrganisationJustification       = 3,
	eJT_MissionCriminalDispatchJustification           = 4,
	eJT_MissionEnforcerDispatchJustification           = 5,
	eJT_MAX                                            = 6
};*/

// Enum APBGame.cTaskDescription.etTaskMarkerIndices
/*enum etTaskMarkerIndices
{
	TaskMarker_A                                       = 0,
	TaskMarker_B                                       = 1,
	TaskMarker_C                                       = 2,
	TaskMarker_D                                       = 3,
	TaskMarker_E                                       = 4,
	TaskMarker_F                                       = 5,
	TaskMarker_G                                       = 6,
	TaskMarker_H                                       = 7,
	TaskMarker_I                                       = 8,
	TaskMarker_J                                       = 9,
	TaskMarker_K                                       = 10,
	TaskMarker_L                                       = 11,
	TaskMarker_M                                       = 12,
	TaskMarker_N                                       = 13,
	TaskMarker_O                                       = 14,
	TaskMarker_P                                       = 15,
	TaskMarker_Q                                       = 16,
	TaskMarker_R                                       = 17,
	TaskMarker_S                                       = 18,
	TaskMarker_T                                       = 19,
	TaskMarker_U                                       = 20,
	TaskMarker_V                                       = 21,
	TaskMarker_W                                       = 22,
	TaskMarker_X                                       = 23,
	TaskMarker_Y                                       = 24,
	TaskMarker_Z                                       = 25,
	TaskMarker_MAX                                     = 26
};*/

// Enum APBGame.cTaskDescription.etMovingTargetPossessionType
/*enum etMovingTargetPossessionType
{
	eMTPT_None                                         = 0,
	eMTPT_Participant                                  = 1,
	eMTPT_Opposition                                   = 2,
	eMTPT_MAX                                          = 3
};*/

// Enum APBGame.cTaskDescription.etObjectiveResult
/*enum etObjectiveResult
{
	eOR_Win                                            = 0,
	eOR_Lose                                           = 1,
	eOR_Draw                                           = 2,
	eOR_MAX                                            = 3
};*/

// Enum APBGame.cTaskDescription.etMissionResult
/*enum etMissionResult
{
	eMR_None                                           = 0,
	eMR_OwnersWon                                      = 1,
	eMR_OppositionWon                                  = 2,
	eMR_Draw                                           = 3,
	eMR_NobodyWon                                      = 4,
	eMR_MAX                                            = 5
};*/

// Enum APBGame.cTaskDescription.etStageResult
/*enum etStageResult
{
	eSR_OwnersWon                                      = 0,
	eSR_OppositionWon                                  = 1,
	eSR_Draw                                           = 2,
	eSR_MAX                                            = 3
};*/

// Enum APBGame.cCharacterScorer.etHeatDebugInfoReason
/*enum etHeatDebugInfoReason
{
	HeatDebugInfoReason_DirectHeat                     = 0,
	HeatDebugInfoReason_HeatTimeDecay                  = 1,
	HeatDebugInfoReason_PayForHeat                     = 2,
	HeatDebugInfoReason_WitnessedByNPC                 = 3,
	HeatDebugInfoReason_WitnessedByEnforcer            = 4,
	HeatDebugInfoReason_ForWitnessingCriminal          = 5,
	HeatDebugInfoReason_MAX                            = 6
};*/

// Enum APBGame.cCharacterScorer.etCrimeListState
/*enum etCrimeListState
{
	CrimeListState_Empty                               = 0,
	CrimeListState_Decaying                            = 1,
	CrimeListState_CrimeInProgress                     = 2,
	CrimeListState_MAX                                 = 3
};*/

// Enum APBGame.cAPBPlayerController.etPlayerInteractionState
/*enum etPlayerInteractionState
{
	ePIS_None                                          = 0,
	ePIS_Contact                                       = 1,
	ePIS_MailBox                                       = 2,
	ePIS_DisplayPoint                                  = 3,
	ePIS_Garage                                        = 4,
	ePIS_Wardrobe                                      = 5,
	ePIS_Persona                                       = 6,
	ePIS_SymbolEditor                                  = 7,
	ePIS_MarketPlace                                   = 8,
	ePIS_MusicStudio                                   = 9,
	ePIS_Max                                           = 10
};*/

// Enum APBGame.cEnums.etPlayerCustomisation
/*enum etPlayerCustomisation
{
	PC_CHARACTER                                       = 0,
	PC_VEHICLE                                         = 1,
	PC_GRAFFITI                                        = 2,
	PC_THEME                                           = 3,
	PC_MAX                                             = 4
};*/

// Enum APBGame.cAPBPlayerController.etItemOperation
/*enum etItemOperation
{
	Operation_ApplyFnMod                               = 0,
	Operation_Consume                                  = 1,
	Operation_Copy                                     = 2,
	Operation_Destroy                                  = 3,
	Operation_Refurbish                                = 4,
	Operation_Rename                                   = 5,
	Operation_SellToVendor                             = 6,
	Operation_SetStartTime                             = 7,
	Operation_SetExpiryTime                            = 8,
	Operation_SetNumCharges                            = 9,
	Operation_SplitStack                               = 10,
	Operation_CombineStack                             = 11,
	Operation_Deploy                                   = 12,
	Operation_DeployFnMod                              = 13,
	Operation_Undeploy                                 = 14,
	Operation_UndeployFnMod                            = 15,
	Operation_UnapplyFnMod                             = 16,
	Operation_Reedit                                   = 17,
	Operation_MAX                                      = 18
};*/

// Enum APBGame.cAPBPlayerController.etGM_ErrorCode
/*enum etGM_ErrorCode
{
	eGM_Success                                        = 0,
	eGM_PlayerNotFound                                 = 1,
	eGM_PlayerDead                                     = 2,
	eGM_CommandForbiddenInVehicle                      = 3,
	eGM_InvalidLocation                                = 4,
	eGM_NoVehicleUnderReticule                         = 5,
	eGM_MAX                                            = 6
};*/

// Enum APBGame.cAPBPlayerController.AtAutoReachedPositionReturnValue
/*enum AtAutoReachedPositionReturnValue
{
	AtAutoReachedPositionReturnValue_Fail              = 0,
	AtAutoReachedPositionReturnValue_NormalSucess      = 1,
	AtAutoReachedPositionReturnValue_StateFinished     = 2,
	AtAutoReachedPositionReturnValue_MAX               = 3
};*/

// Enum APBGame.cAPBPlayerController.etPlayerEventTypes
/*enum etPlayerEventTypes
{
	kPlayerEvent_PickedUpItem                          = 0,
	kPlayerEvent_DroppedItem                           = 1,
	kPlayerEvent_PassItemToPlayer                      = 2,
	kPlayerEvent_PassItemToCargoHold                   = 3,
	kPlayerEvent_ReceiveItemFromPlayer                 = 4,
	kPlayerEvent_ReceiveItemFromCargoHold              = 5,
	kPlayerEvent_EnteredVehicle                        = 6,
	kPlayerEvent_LeftVehicle                           = 7,
	kPlayerEvent_Died                                  = 8,
	kPlayerEvent_Arrested                              = 9,
	kPlayerEvent_Rescued                               = 10,
	kPlayerEvent_LostConsciousness                     = 11,
	kPlayerEvent_RegainedConsciousness                 = 12,
	kPlayerEvent_BeginCSA                              = 13,
	kPlayerEvent_EndCSA                                = 14,
	kPlayerEvent_MAX                                   = 15
};*/

// Enum APBGame.cGroupTypes.etSideChangeEventType
/*enum etSideChangeEventType
{
	eSCET_OwningSideStartedTask                        = 0,
	eSCET_OpposingSideAssignedToTask                   = 1,
	eSCET_SideMemberLeft                               = 2,
	eSCET_SideMemberDied                               = 3,
	eSCET_SideMemberArrested                           = 4,
	eSCET_SideMemberRescued                            = 5,
	eSCET_SideLeaderChanged                            = 6,
	eSCET_MAX                                          = 7
};*/

// Enum APBGame.cAPBGameReplicationInfo.EDumpedStatType
/*enum EDumpedStatType
{
	eDUMPEDSTATTYPE_None                               = 0,
	eDUMPEDSTATTYPE_Nsecs                              = 1,
	eDUMPEDSTATTYPE_Minute                             = 2,
	eDUMPEDSTATTYPE_Hour                               = 3,
	eDUMPEDSTATTYPE_MAX                                = 4
};*/

// Enum APBGame.cAPBRoute.etRouteTypes
/*enum etRouteTypes
{
	eInvalidRouteType                                  = 0,
	ePathfindingRoute                                  = 1,
	eDetailedRoute                                     = 2,
	etRouteTypes_MAX                                   = 3
};*/

// Enum APBGame.cAPBUberPostProcessEffect.ERenderTargetTapPoint
/*enum ERenderTargetTapPoint
{
	RTTP_PreUberPP                                     = 0,
	RTTP_PostDownsample                                = 1,
	RTTP_PostAverageLuminance                          = 2,
	RTTP_PostAdaptation                                = 3,
	RTTP_PostBrightPass                                = 4,
	RTTP_PostBlur1                                     = 5,
	RTTP_PostBlur2                                     = 6,
	RTTP_MAX                                           = 7
};*/

// Enum APBGame.cDisplayPointManager.etDisplayPointInteractionType
/*enum etDisplayPointInteractionType
{
	eDPIT_ViewOnly                                     = 0,
	eDPIT_Activate                                     = 1,
	eDPIT_Update                                       = 2,
	eDPIT_Deactivate                                   = 3,
	eDPIT_MAX                                          = 4
};*/

// Enum APBGame.cBotPlayerController.etBotPlayerState
/*enum etBotPlayerState
{
	BOTPS_None                                         = 0,
	BOTPS_Locomotion                                   = 1,
	BOTPS_BudgetTrackerAutomation                      = 2,
	BOTPS_MAX                                          = 3
};*/

// Enum APBGame.cCharacterRequest.etTextureType
/*enum etTextureType
{
	TextureType_Diffuse                                = 0,
	TextureType_Normal                                 = 1,
	TextureType_MAX                                    = 2
};*/

// Enum APBGame.cCharacterRequest.etCharacterBuildState
/*enum etCharacterBuildState
{
	kCBS_SourceAssetStreaming                          = 0,
	kCBS_SourceMeshesStreamingDelay                    = 1,
	kCBS_SourceTexturesStreaming                       = 2,
	kCBS_Mesh                                          = 3,
	kCBS_UVBleedMesh                                   = 4,
	kCBS_SourceTexturesStreamingDelay                  = 5,
	kCBS_Diffuse                                       = 6,
	kCBS_Normal                                        = 7,
	kCBS_MorphScale                                    = 8,
	kCBS_Audio                                         = 9,
	kCBS_Cleanup                                       = 10,
	kCBS_MAX                                           = 11
};*/

// Enum APBGame.cCharacterTextureBaker.etCharacterTextureBuildState
/*enum etCharacterTextureBuildState
{
	kCTBS_Null                                         = 0,
	kCTBS_Diffuse_Setup                                = 1,
	kCTBS_Diffuse_BaseSkinColour                       = 2,
	kCTBS_Diffuse_SkinDetails                          = 3,
	kCTBS_Diffuse_PredefinedTattoos                    = 4,
	kCTBS_Diffuse_Tattoos                              = 5,
	kCTBS_Diffuse_HairBody                             = 6,
	kCTBS_Diffuse_HairEyebrows                         = 7,
	kCTBS_Diffuse_HairBeard                            = 8,
	kCTBS_Diffuse_Scars                                = 9,
	kCTBS_Diffuse_HairHead                             = 10,
	kCTBS_Diffuse_BodyFacePaint                        = 11,
	kCTBS_Diffuse_Makeup                               = 12,
	kCTBS_Diffuse_NailVarnishIrisColourPupilShape      = 13,
	kCTBS_Diffuse_Item_BaseColour                      = 14,
	kCTBS_Diffuse_Item_PredefinedColourDyeDecals       = 15,
	kCTBS_Diffuse_Item_ProjectedColourDyeDecals        = 16,
	kCTBS_Diffuse_Item_Overlay                         = 17,
	kCTBS_Diffuse_Item_PredefinedStitchOnIronOnDecals  = 18,
	kCTBS_Diffuse_Item_CombineBRDF                     = 19,
	kCTBS_Diffuse_GenerateUVMask                       = 20,
	kCTBS_Diffuse_Dilate                               = 21,
	kCTBS_Diffuse_Generate                             = 22,
	kCTBS_Diffuse_Cleanup                              = 23,
	kCTBS_Normal_Setup                                 = 24,
	kCTBS_Normal_Base                                  = 25,
	kCTBS_Normal_Muscle                                = 26,
	kCTBS_Normal_Ears                                  = 27,
	kCTBS_Normal_Cheeks                                = 28,
	kCTBS_Normal_Chin                                  = 29,
	kCTBS_Normal_Mouth                                 = 30,
	kCTBS_Normal_Forehead                              = 31,
	kCTBS_Normal_Eyes                                  = 32,
	kCTBS_Normal_Brow                                  = 33,
	kCTBS_Normal_Nose                                  = 34,
	kCTBS_Normal_SkinnyVeins                           = 35,
	kCTBS_Normal_Wrinkles                              = 36,
	kCTBS_Normal_HairBody                              = 37,
	kCTBS_Normal_HairEyebrows                          = 38,
	kCTBS_Normal_Scars                                 = 39,
	kCTBS_Normal_HairBeard                             = 40,
	kCTBS_Normal_HairHead                              = 41,
	kCTBS_Normal_Item                                  = 42,
	kCTBS_Normal_Generate                              = 43,
	kCTBS_Normal_Cleanup                               = 44,
	kCTBS_MAX                                          = 45
};*/

// Enum APBGame.TaskTargetInterface.etTriggerState
/*enum etTriggerState
{
	eTS_Untriggered                                    = 0,
	eTS_PartiallyTriggeredOwners                       = 1,
	eTS_TriggeredOwners                                = 2,
	eTS_PartiallyTriggeredOpposition                   = 3,
	eTS_TriggeredOpposition                            = 4,
	eTS_ResettingOwners                                = 5,
	eTS_ResettingOpposition                            = 6,
	eTS_MAX                                            = 7
};*/

// Enum APBGame.cCheckpoint.etTerritoryControlState
/*enum etTerritoryControlState
{
	eTCS_None                                          = 0,
	eTCS_Untriggered                                   = 1,
	eTCS_ResettingOwningSide                           = 2,
	eTCS_ResettingOpposingSide                         = 3,
	eTCS_TransitionToOwningSide                        = 4,
	eTCS_TransitionToOpposingSide                      = 5,
	eTCS_CapturedOwningSide                            = 6,
	eTCS_CapturedOpposingSide                          = 7,
	eTCS_MAX                                           = 8
};*/

// Enum APBGame.cCustomGraffitiDisplayPoint.etNotifyFlag
/*enum etNotifyFlag
{
	eNF_None                                           = 0,
	eNF_Capture1                                       = 1,
	eNF_Capture2                                       = 2,
	eNF_Cancel                                         = 3,
	eNF_End                                            = 4,
	eNF_MAX                                            = 5
};*/

// Enum APBGame.cCustomisationSettings.etColourType
/*enum etColourType
{
	kColour_Symbols                                    = 0,
	kColour_Hair                                       = 1,
	kColour_StandardPaint                              = 2,
	kColour_PearlescentPaint                           = 3,
	kColour_Clothing                                   = 4,
	kColour_MAX                                        = 5
};*/

// Enum APBGame.cEnums.etCustomisationPrecacheType
/*enum etCustomisationPrecacheType
{
	CPCT_Character                                     = 0,
	CPCT_Vehicle                                       = 1,
	CPCT_Graffiti                                      = 2,
	CPCT_Statue                                        = 3,
	CPCT_Theme                                         = 4,
	CPCT_MAX                                           = 5
};*/

// Enum APBGame.cEnums.etAchievementType
/*enum etAchievementType
{
	AchievementType_None                               = 0,
	AchievementType_MaxKills                           = 1,
	AchievementType_MAX                                = 2
};*/

// Enum APBGame.cItem.etItemState
/*enum etItemState
{
	ItemState_Inactive                                 = 0,
	ItemState_Active                                   = 1,
	ItemState_Reloading                                = 2,
	ItemState_LoopedReloading                          = 3,
	ItemState_WeaponSemi                               = 4,
	ItemState_WeaponBurst                              = 5,
	ItemState_WeaponAuto                               = 6,
	ItemState_WeaponCooking                            = 7,
	ItemState_H2HAttack                                = 8,
	ItemState_Chambering                               = 9,
	ItemState_GrenadeEmpty                             = 10,
	ItemState_MAX                                      = 11
};*/

// Enum APBGame.cFlythroughSkeletalMeshActor.EFlythroughActorType
/*enum EFlythroughActorType
{
	FLYTHROUGH_Undefined                               = 0,
	FLYTHROUGH_Ped                                     = 1,
	FLYTHROUGH_Veh                                     = 2,
	FLYTHROUGH_MAX                                     = 3
};*/

// Enum APBGame.cGraffitiCrimeTarget.etGraffitiState
/*enum etGraffitiState
{
	eGS_Reset                                          = 0,
	eGS_InProgress_Graffiti                            = 1,
	eGS_InProgress_AntiGraffiti                        = 2,
	eGS_Triggered_Graffiti                             = 3,
	eGS_Triggered_AntiGraffiti                         = 4,
	eGS_MAX                                            = 5
};*/

// Enum APBGame.cGraffitiCrimeTarget.etGraffitiTextureType
/*enum etGraffitiTextureType
{
	eGTT_None                                          = 0,
	eGTT_Graffiti                                      = 1,
	eGTT_AntiGraffiti                                  = 2,
	eGTT_MAX                                           = 3
};*/

// Enum APBGame.cHeightAdjustmentNodeCalculate.etBoneSelectionMethod
/*enum etBoneSelectionMethod
{
	kBONESELECT_LOWEST                                 = 0,
	kBONESELECT_NAMED_BONE                             = 1,
	kBONESELECT_MATCH_BONE                             = 2,
	kBONESELECT_MAX                                    = 3
};*/

// Enum APBGame.cHeightAdjustmentNodeCalculate.etAffectAxis
/*enum etAffectAxis
{
	kAFFECT_DEFAULT                                    = 0,
	kAFFECT_IGNORE                                     = 1,
	kAFFECT_MAX                                        = 2
};*/

// Enum APBGame.cHoldableItemManager.etWeaponSlot
/*enum etWeaponSlot
{
	PrimaryWeaponSlot                                  = 0,
	SecondaryWeaponSlot                                = 1,
	MeleeWeaponSlot                                    = 2,
	GrenadeWeaponSlot                                  = 3,
	etWeaponSlot_MAX                                   = 4
};*/

// Enum APBGame.cHostingClient.etClientDisconnectReason
/*enum etClientDisconnectReason
{
	kCLIENT_DISCONNECT_REASON_NONE                     = 0,
	kCLIENT_DISCONNECT_REASON_RETURN_TO_LOGIN          = 1,
	kCLIENT_DISCONNECT_REASON_RETURN_TO_LOBBY          = 2,
	kCLIENT_DISCONNECT_REASON_KICK_DUPLICATE_LOGIN     = 3,
	kCLIENT_DISCONNECT_REASON_KICK_GM                  = 4,
	kCLIENT_DISCONNECT_REASON_KICK_SUBSCRIPTION_EXPIRED = 5,
	kCLIENT_DISCONNECT_REASON_KICK_PUNKBUSTER          = 6,
	kCLIENT_DISCONNECT_REASON_PACKAGE_VERIFICATION_FAILED = 7,
	kCLIENT_DISCONNECT_REASON_MAX                      = 8
};*/

// Enum APBGame.cHostingClient.etClientState
/*enum etClientState
{
	kCLIENT_STATE_DISCONNECTED                         = 0,
	kCLIENT_STATE_LOGINSERVER_CONNECT_IN_PROGRESS      = 1,
	kCLIENT_STATE_LOGINSERVER_CONNECT_COMPLETE         = 2,
	kCLIENT_STATE_LOGIN_IN_PROGRESS                    = 3,
	kCLIENT_STATE_LOGIN_SUCCESS                        = 4,
	kCLIENT_STATE_CHARACTER_LIST_RECEIVED              = 5,
	kCLIENT_STATE_WORLD_LIST_RECEIVED                  = 6,
	kCLIENT_STATE_WORLD_ENTER1_IN_PROGRESS             = 7,
	kCLIENT_STATE_WORLD_ENTER1_COMPLETE                = 8,
	kCLIENT_STATE_WORLDSERVER_CONNECT_IN_PROGRESS      = 9,
	kCLIENT_STATE_WORLDSERVER_CONNECT_COMPLETE         = 10,
	kCLIENT_STATE_WORLD_ENTER2_IN_PROGRESS             = 11,
	kCLIENT_STATE_WORLD_ENTER2_IN_QUEUE                = 12,
	kCLIENT_STATE_WORLD_ENTER2_COMPLETE                = 13,
	kCLIENT_STATE_DISTRICT_ENTER1_IN_PROGRESS          = 14,
	kCLIENT_STATE_DISTRICT_ENTER1_COMPLETE             = 15,
	kCLIENT_STATE_DISTRICTSERVER_CONNECT_IN_PROGRESS   = 16,
	kCLIENT_STATE_DISTRICTSERVER_CONNECT_COMPLETE      = 17,
	kCLIENT_STATE_DISTRICT_ENTER2_IN_PROGRESS          = 18,
	kCLIENT_STATE_DISTRICT_ENTER2_COMPLETE             = 19,
	kCLIENT_STATE_DISTRICT_EXIT_IN_PROGRESS            = 20,
	kCLIENT_STATE_LOGOUT_IN_PROGRESS                   = 21,
	kCLIENT_STATE_MAX                                  = 22
};*/

// Enum APBGame.cHostingServer.etDistrictState
/*enum etDistrictState
{
	kDISTRICT_STATE_DISCONNECTED                       = 0,
	kDISTRICT_STATE_WORLDSERVER_LISTENING              = 1,
	kDISTRICT_STATE_WORLDSERVER_CONNECT_IN_PROGRESS    = 2,
	kDISTRICT_STATE_WORLDSERVER_CONNECT_COMPLETE       = 3,
	kDISTRICT_STATE_WORLDSERVER_DEV_ATTACH_IN_PROGRESS = 4,
	kDISTRICT_STATE_WORLDSERVER_DEV_ATTACH_COMPLETE    = 5,
	kDISTRICT_STATE_WORLDSERVER_ATTACH_IN_PROGRESS     = 6,
	kDISTRICT_STATE_WORLDSERVER_ATTACH_COMPLETE        = 7,
	kDISTRICT_STATE_MAX                                = 8
};*/

// Enum APBGame.cJunction.etJunctionState
/*enum etJunctionState
{
	JS_DefaultState                                    = 0,
	JS_PrepareToHalt                                   = 1,
	JS_VehiclesCrossing                                = 2,
	JS_WaitForPedsToClear                              = 3,
	JS_WaitForVehiclesToClear                          = 4,
	JS_PedsCrossing                                    = 5,
	JS_MAX                                             = 6
};*/

// Enum APBGame.cLCManager.etRole
/*enum etRole
{
	eInvalid                                           = 0,
	eEditor                                            = 1,
	eStandAlone                                        = 2,
	eServer                                            = 3,
	eClient                                            = 4,
	etRole_MAX                                         = 5
};*/

// Enum APBGame.cLCManager.etLCM_State
/*enum etLCM_State
{
	eLCM_None                                          = 0,
	eLCM_WaitingForDependencies                        = 1,
	eLCM_Active                                        = 2,
	eLCM_MAX                                           = 3
};*/

// Enum APBGame.cMusicStudioManager.etThemePlayRequestState
/*enum etThemePlayRequestState
{
	ThemePlayRequest_Empty                             = 0,
	ThemePlayRequest_WaitingForGuid                    = 1,
	ThemePlayRequest_WaitingForThemeData               = 2,
	ThemePlayRequest_LoadingInstruments                = 3,
	ThemePlayRequest_StartPlaying                      = 4,
	ThemePlayRequest_Playing                           = 5,
	ThemePlayRequest_Stopping                          = 6,
	ThemePlayRequest_MAX                               = 7
};*/

// Enum APBGame.cNPCDriverSkeletalMeshComponent.etNPCEjectAnimation
/*enum etNPCEjectAnimation
{
	NEA_Driver_Being_Ejected_None                      = 0,
	NEA_Driver_Being_Ejected_Initial_Criminal          = 1,
	NEA_Driver_Being_Ejected_Initial_Enforcer          = 2,
	NEA_Driver_Being_Ejected_Later_Criminal            = 3,
	NEA_Driver_Being_Ejected_Later_Enforcer            = 4,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Initial_Criminal = 5,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Initial_Enforcer = 6,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Later_Criminal = 7,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Later_Enforcer = 8,
	NEA_Driver_Being_Ejected_MAX                       = 9
};*/

// Enum APBGame.cPedestrianDef.etLocomotionState
/*enum etLocomotionState
{
	kLcS_None                                          = 0,
	kLcS_Edge                                          = 1,
	kLcS_Smooth                                        = 2,
	kLcS_MAX                                           = 3
};*/

// Enum APBGame.cPedestrianDef.etRouteState
/*enum etRouteState
{
	kRtS_None                                          = 0,
	kRtS_Following                                     = 1,
	kRtS_Paused                                        = 2,
	kRtS_Completed                                     = 3,
	kRtS_MAX                                           = 4
};*/

// Enum APBGame.cPedestrianDef.etAvoidAnim
/*enum etAvoidAnim
{
	kAA_AvoidLeft                                      = 0,
	kAA_AvoidRight                                     = 1,
	kAA_MAX                                            = 2
};*/

// Enum APBGame.cPedestrianDef.etNPCBrainState
/*enum etNPCBrainState
{
	kNPCB_None                                         = 0,
	kNPCB_RouteFollowing                               = 1,
	kNPCB_PerformingVignette                           = 2,
	kNPCB_PerformingTTIReaction                        = 3,
	kNPCB_WaitingAtObstruction                         = 4,
	kNPCB_MAX                                          = 5
};*/

// Enum APBGame.cPedestrianDef.etTTIState
/*enum etTTIState
{
	kTTI_None                                          = 0,
	kTTI_Active                                        = 1,
	kTTI_Canceled                                      = 2,
	kTTI_Completed                                     = 3,
	kTTI_Aborted                                       = 4,
	kTTI_MAX                                           = 5
};*/

// Enum APBGame.cPedestrianDef.etTTIStage
/*enum etTTIStage
{
	kTTIStage_None                                     = 0,
	kTTIStage_Intro                                    = 1,
	kTTIStage_Loop                                     = 2,
	kTTIStage_Outro                                    = 3,
	kTTIStage_Idle                                     = 4,
	kTTIStage_MAX                                      = 5
};*/

// Enum APBGame.cOpenWorldDropOff.etOpenWorldDeliveryResult
/*enum etOpenWorldDeliveryResult
{
	DeliveryResult_AllSuccessful                       = 0,
	DeliveryResult_SomeFailed                          = 1,
	DeliveryResult_AllFailed                           = 2,
	DeliveryResult_MAX                                 = 3
};*/

// Enum APBGame.cPlayerCharacterMissionSpawnZone.etMissionSide
/*enum etMissionSide
{
	kOwners                                            = 0,
	kOpposition                                        = 1,
	etMissionSide_MAX                                  = 2
};*/

// Enum APBGame.cPlayerVehicleDisplayPoint.etSpawnBayState
/*enum etSpawnBayState
{
	kDefaultUnoccupied                                 = 0,
	kUsedUnoccupied                                    = 1,
	kUsedOccupied                                      = 2,
	etSpawnBayState_MAX                                = 3
};*/

// Enum APBGame.cPlayerVehicleSpawnBay.etOccupancyState
/*enum etOccupancyState
{
	kBayUnoccupied                                     = 0,
	kBayPartiallyOccupied                              = 1,
	kBayOccupied                                       = 2,
	etOccupancyState_MAX                               = 3
};*/

// Enum APBGame.cPlayerVehicleSpawnZone.etVehicleSpawnErrorCode
/*enum etVehicleSpawnErrorCode
{
	kVehicleSpawn_OK                                   = 0,
	kVehicleSpawn_NoDeployedVehicle                    = 1,
	kVehicleSpawn_WrongFaction                         = 2,
	kVehicleSpawn_JustSpawnedAVehicle                  = 3,
	kVehicleSpawn_NotAllowedToRecall                   = 4,
	kVehicleSpawn_InsufficientFunds                    = 5,
	kVehicleSpawn_AllBaysOccupied                      = 6,
	kVehicleSpawn_NoSpawnBays                          = 7,
	kVehicleSpawn_PlayerIsDead                         = 8,
	kVehicleSpawn_SpawnFailed                          = 9,
	kVehicleSpawn_MAX                                  = 10
};*/

// Enum APBGame.cPropComponent.EPropState
/*enum EPropState
{
	PROPSTATE_None                                     = 0,
	PROPSTATE_Prepare                                  = 1,
	PROPSTATE_Neutral                                  = 2,
	PROPSTATE_Running                                  = 3,
	PROPSTATE_Disabled                                 = 4,
	PROPSTATE_MAX                                      = 5
};*/

// Enum APBGame.cPropComponent_Master.EPropType
/*enum EPropType
{
	PROPTYPE_FullLogical                               = 0,
	PROPTYPE_FullCosmetic                              = 1,
	PROPTYPE_Hybrid                                    = 2,
	PROPTYPE_MAX                                       = 3
};*/

// Enum APBGame.cReaction_SpawnDestroy.etPedEvent
/*enum etPedEvent
{
	kPE_Spawn                                          = 0,
	kPE_Destroy                                        = 1,
	kPE_MAX                                            = 2
};*/

// Enum APBGame.cServerHUDMarker.EHMReplicationType
/*enum EHMReplicationType
{
	HMReplicationType_All                              = 0,
	HMReplicationType_DataOnly                         = 1,
	HMReplicationType_TextOnly                         = 2,
	HMReplicationType_MAX                              = 3
};*/

// Enum APBGame.cSetupTypeDef.etSetupTypeNPCClasses
/*enum etSetupTypeNPCClasses
{
	kSTN_None                                          = 0,
	kSTN_Pedestrian                                    = 1,
	kSTN_Vehicle                                       = 2,
	kSTN_MAX                                           = 3
};*/

// Enum APBGame.cSetupTypeTimer.etTimerState
/*enum etTimerState
{
	kTS_None                                           = 0,
	kTS_Active                                         = 1,
	kTS_Aborted                                        = 2,
	kTS_Completed                                      = 3,
	kTS_MAX                                            = 4
};*/

// Enum APBGame.cStorageInventory.etInventoryEvent
/*enum etInventoryEvent
{
	eInventoryEvent_TableChanged                       = 0,
	eInventoryEvent_DeploymentChanged                  = 1,
	eInventoryEvent_UnlockFlagsChanged                 = 2,
	eInventoryEvent_ExaminedFlagsChanged               = 3,
	eInventoryEvent_UsableActivated                    = 4,
	eInventoryEvent_UsableDeactivated                  = 5,
	eInventoryEvent_AvailabilityChanged                = 6,
	eInventoryEvent_MAX                                = 7
};*/

// Enum APBGame.cStorageInventory.etDeployedUsableType
/*enum etDeployedUsableType
{
	eDUType_None                                       = 0,
	eDUType_UsableToken                                = 1,
	eDUType_FnMod                                      = 2,
	eDUType_MAX                                        = 3
};*/

// Enum APBGame.cStorageInventory.etModifierEvent
/*enum etModifierEvent
{
	eModifierEvent_None                                = 0,
	eModifierEvent_BeginModifier                       = 1,
	eModifierEvent_EndModifier                         = 2,
	eModifierEvent_MAX                                 = 3
};*/

// Enum APBGame.cStorageInventory.etUnlockableTableIndex
/*enum etUnlockableTableIndex
{
	eUTI_DeployedCharacterUsables                      = 0,
	eUTI_DeployedVehicleUsables                        = 1,
	eUTI_DeployedEquipment                             = 2,
	eUTI_DeployedSymbols                               = 3,
	eUTI_CharacterFnMods                               = 4,
	eUTI_Max                                           = 5
};*/

// Enum APBGame.cTaskItem.etTaskItemState
/*enum etTaskItemState
{
	TaskItemState_Initial                              = 0,
	TaskItemState_Pickup                               = 1,
	TaskItemState_PlayerInventory                      = 2,
	TaskItemState_Cargo                                = 3,
	TaskItemState_Delivered                            = 4,
	TaskItemState_Invalid                              = 5,
	TaskItemState_MAX                                  = 6
};*/

// Enum APBGame.cTaskObjective.etTaskObjectiveState
/*enum etTaskObjectiveState
{
	eTOS_Pending                                       = 0,
	eTOS_InProgress                                    = 1,
	eTOS_CompletedOwners                               = 2,
	eTOS_CompletedOpposition                           = 3,
	eTOS_CompletedDraw                                 = 4,
	eTOS_EndedNoWinner                                 = 5,
	eTOS_MAX                                           = 6
};*/

// Enum APBGame.cTaskObjective.etEscapePenaltyType
/*enum etEscapePenaltyType
{
	eEPT_WitnessableCrime                              = 0,
	eEPT_HeatAction                                    = 1,
	eEPT_WeaponFired                                   = 2,
	eEPT_TakeDamage                                    = 3,
	eEPT_Arrested                                      = 4,
	eEPT_ArrestOpponent                                = 5,
	eEPT_Killed                                        = 6,
	eEPT_KillOpponent                                  = 7,
	eEPT_MAX                                           = 8
};*/

// Enum APBGame.cToDManager.etToDManagerEvent
/*enum etToDManagerEvent
{
	eToDEvent_PeriodTransition                         = 0,
	eToDEvent_MAX                                      = 1
};*/

// Enum APBGame.cTrafficLightJunction.etTrafficLightState
/*enum etTrafficLightState
{
	kTL_Red                                            = 0,
	kTL_Amber                                          = 1,
	kTL_Green                                          = 2,
	kTL_MAX                                            = 3
};*/

// Enum APBGame.cTrafficLightJunction.etTrafficLightGroup
/*enum etTrafficLightGroup
{
	kTLG_None                                          = 0,
	kTLG_One                                           = 1,
	kTLG_Two                                           = 2,
	kTLG_Three                                         = 3,
	kTLG_Four                                          = 4,
	kTLG_MAX                                           = 5
};*/

// Enum APBGame.cTurfControlPointMarker.etTurfControlPointMessage
/*enum etTurfControlPointMessage
{
	eTCPM_FactionChanged                               = 0,
	eTCPM_MAX                                          = 1
};*/

// Enum APBGame.cUIAction_CheckHostingClientState.eOutput_CheckHostingClientState
/*enum eOutput_CheckHostingClientState
{
	eCheckHostingClientState_Success                   = 0,
	eCheckHostingClientState_Failure                   = 1,
	eCheckHostingClientState_Failure_NonHosted         = 2,
	eCheckHostingClientState_MAX                       = 3
};*/

// Enum APBGame.cUVBleedMeshBaker.etUVBleedBuildState
/*enum etUVBleedBuildState
{
	kUBBS_Null                                         = 0,
	kUBBS_DuplicateMesh                                = 1,
	kUBBS_SeamExtrude                                  = 2,
	kUBBS_InitRHI                                      = 3,
	kUBBS_MAX                                          = 4
};*/

// Enum APBGame.cVehicleCargoInventory.etCurrentCargoType
/*enum etCurrentCargoType
{
	eCargoType_None                                    = 0,
	eCargoType_Passengers                              = 1,
	eCargoType_TaskItems                               = 2,
	eCargoType_MAX                                     = 3
};*/

// Enum APBGame.cVehicleController.etObjectAheadType
/*enum etObjectAheadType
{
	kOAT_None                                          = 0,
	kOAT_Bend                                          = 1,
	kOAT_EndOfRoute                                    = 2,
	kOAT_Junction                                      = 3,
	kOAT_NPCVehicle                                    = 4,
	kOAT_Obstacle                                      = 5,
	kOAT_MAX                                           = 6
};*/

// Enum APBGame.cVehicleLightsPattern.etLightsPattern
/*enum etLightsPattern
{
	LightsPattern_None                                 = 0,
	LightsPattern_TEST                                 = 1,
	LightsPattern_EnforcerPlaceholder                  = 2,
	LightsPattern_FlashOneAndTwo                       = 3,
	LightsPattern_MAX                                  = 4
};*/

// Enum APBGame.cVehicleRequest.etVehicleBuildState
/*enum etVehicleBuildState
{
	kVBS_SourceAssetStreaming                          = 0,
	kVBS_Mesh                                          = 1,
	kVBS_UVBleedMesh                                   = 2,
	kVBS_SourceTexturesStreamingDelay                  = 3,
	kVBS_ExteriorTexture                               = 4,
	kVBS_InteriorTexture                               = 5,
	kVBS_GlassTexture                                  = 6,
	kVBS_WheelsTexture                                 = 7,
	kVBS_EvictResources                                = 8,
	kVBS_Audio                                         = 9,
	kVBS_MAX                                           = 10
};*/

// Enum APBGame.cVehicleRouteGenerator.eRenderStates
/*enum eRenderStates
{
	eDelta                                             = 0,
	eWorldRoutes                                       = 1,
	eBestRoutes                                        = 2,
	eNewRoutes                                         = 3,
	eRenderStates_MAX                                  = 4
};*/

// Enum APBGame.cVehicleTextureBaker.etVehicleTextureBuildState
/*enum etVehicleTextureBuildState
{
	kVTBS_Null                                         = 0,
	kVTBS_Exterior_Setup                               = 1,
	kVTBS_Exterior_Clear_Decals                        = 2,
	kVTBS_Exterior_Build_Decals                        = 3,
	kVTBS_Exterior_GenerateUVMask                      = 4,
	kVTBS_Exterior_Decals_Dilate                       = 5,
	kVTBS_Exterior_Diffuse_Base                        = 6,
	kVTBS_Exterior_Diffuse_Parts                       = 7,
	kVTBS_Exterior_Diffuse_LicencePlate                = 8,
	kVTBS_Exterior_Normal_Base                         = 9,
	kVTBS_Exterior_Normal_Parts                        = 10,
	kVTBS_Exterior_Normal_LicencePlate                 = 11,
	kVTBS_Exterior_Diffuse_MergeDecals                 = 12,
	kVTBS_Exterior_Normal_MergeDecals                  = 13,
	kVTBS_Exterior_Emissive_Base                       = 14,
	kVTBS_Exterior_Emissive_Parts                      = 15,
	kVTBS_Exterior_Generate_Diffuse                    = 16,
	kVTBS_Exterior_Generate_Normal                     = 17,
	kVTBS_Exterior_Generate_Emissive                   = 18,
	kVTBS_Interior_Setup                               = 19,
	kVTBS_Interior_Diffuse_Base                        = 20,
	kVTBS_Interior_Diffuse_Parts                       = 21,
	kVTBS_Interior_Normal_Base                         = 22,
	kVTBS_Interior_Normal_Parts                        = 23,
	kVTBS_Interior_Emissive_Base                       = 24,
	kVTBS_Interior_Emissive_Parts                      = 25,
	kVTBS_Interior_Generate_Diffuse                    = 26,
	kVTBS_Interior_Generate_Normal                     = 27,
	kVTBS_Interior_Generate_Emissive                   = 28,
	kVTBS_Wheels_Setup                                 = 29,
	kVTBS_Wheels_Diffuse_Parts                         = 30,
	kVTBS_Wheels_Normal_Parts                          = 31,
	kVTBS_Wheels_Generate_Diffuse                      = 32,
	kVTBS_Wheels_Generate_Normal                       = 33,
	kVTBS_MAX                                          = 34
};*/

// Enum APBGame.GolemMeshBaker.etMeshBuildState
/*enum etMeshBuildState
{
	kMBS_Null                                          = 0,
	kMBS_LoadMorphs                                    = 1,
	kMBS_CloneMorphs                                   = 2,
	kMBS_CalculateSegmentRemovedFlags                  = 3,
	kMBS_CreateTextureLayout                           = 4,
	kMBS_BakeMorphs                                    = 5,
	kMBS_UpdateTexCoords                               = 6,
	kMBS_RemoveSegments                                = 7,
	kMBS_FixTangentSpace                               = 8,
	kMBS_AddMeshFragments                              = 9,
	kMBS_SortMorphVertsByIndex                         = 10,
	kMBS_AccumulateHairMorphs                          = 11,
	kMBS_AppendHairMesh                                = 12,
	kMBS_BakeHairMorphs                                = 13,
	kMBS_SetupShapeMorphsHeightScaling                 = 14,
	kMBS_ShapeMorphsAndScaleVerts                      = 15,
	kMBS_ScaleReferenceSkeleton                        = 16,
	kMBS_RemoveCulledVertices                          = 17,
	kMBS_RebuildTangentSpace                           = 18,
	kMBS_BuildShadowInformation                        = 19,
	kMBS_InitSkelMeshRHI                               = 20,
	kMBS_MAX                                           = 21
};*/

// Enum APBGame.GolemobilePart.etAudioPartCategory
/*enum etAudioPartCategory
{
	APC_None                                           = 0,
	APC_Engine                                         = 1,
	APC_Exhaust                                        = 2,
	APC_Turbo                                          = 3,
	APC_Transmission                                   = 4,
	APC_DumpValve                                      = 5,
	APC_GearChange                                     = 6,
	APC_Horn                                           = 7,
	APC_Siren                                          = 8,
	APC_Amp                                            = 9,
	APC_Speaker                                        = 10,
	APC_MAX                                            = 11
};*/

// Enum APBGame.MaterialExpressionPrimaryLight.etPrimaryLightDataType
/*enum etPrimaryLightDataType
{
	kPLDT_Colour                                       = 0,
	kPLDT_Direction                                    = 1,
	kPLDT_SkyColour                                    = 2,
	kPLDT_VFXLightColour                               = 3,
	kPLDT_MAX                                          = 4
};*/

// Enum APBGame.TESLayer.etTextureBlend
/*enum etTextureBlend
{
	kAlpha                                             = 0,
	kAdditive                                          = 1,
	kMultiplicative                                    = 2,
	kAlphaTest                                         = 3,
	etTextureBlend_MAX                                 = 4
};*/

// Enum APBGame.TESLayer.etTextureAddress
/*enum etTextureAddress
{
	kClamp                                             = 0,
	kWrap                                              = 1,
	kMirror                                            = 2,
	kBorder                                            = 3,
	etTextureAddress_MAX                               = 4
};*/

// Enum APBGame.TESLayer.etProjectionMode
/*enum etProjectionMode
{
	kPerspective                                       = 0,
	kOrthogonal                                        = 1,
	kCylindrical                                       = 2,
	etProjectionMode_MAX                               = 3
};*/

// Enum APBGame.TESTextureClass.etTESPrimitiveType
/*enum etTESPrimitiveType
{
	TESPrimitive_Vinyl                                 = 0,
	TESPrimitive_Decal                                 = 1,
	TESPrimitive_Font                                  = 2,
	TESPrimitive_MAX                                   = 3
};*/

// Enum APBGame.cAudioEnums.etAudioEventTypes
/*enum etAudioEventTypes
{
	Play_UIDefaultControlNavDown                       = 0,
	Play_Login_ExitToDesktop                           = 1,
	Play_UIDefaultButtonClick                          = 2,
	Play_Login_CreateCharacter                         = 3,
	Play_UIDeploymentTheme                             = 4,
	Play_UICharacterCustom_Back                        = 5,
	Play_Login_Play                                    = 6,
	Play_MenuOpen                                      = 7,
	Play_PropLadderFoot_Land                           = 8,
	Play_ArmBackwardMed                                = 9,
	Play_HUD_MissionStageComplete                      = 10,
	Play_GroupReady                                    = 11,
	Play_Exh_Estate_01                                 = 12,
	Play_UICharacterCustom_ButtLeft                    = 13,
	Play_UI_Garage_PreviousVehcile                     = 14,
	Play_PlayerSpawn                                   = 15,
	Play_UISymbol_Canvas_ButtScaleUni                  = 16,
	Play_StaminaEffect                                 = 17,
	Play_UI_Garage_TopSelection                        = 18,
	Play_HUD_StageComplete                             = 19,
	Play_UI_Garage_Load                                = 20,
	Play_UIDefaultSliderDecrement                      = 21,
	Play_PropLadderFoot_Generic                        = 22,
	Stop_Alarm                                         = 23,
	Play_AchievementAlert                              = 24,
	Play_Eng_VanArmoured_01                            = 25,
	Play_UIDeploymentClose                             = 26,
	Play_NotifyPlayerActivity                          = 27,
	Play_GroupMemberLeft                               = 28,
	Play_UIChat_OpenMenu                               = 29,
	Play_UICharacterCustom_PageSelect                  = 30,
	Play_BackupArrives                                 = 31,
	Play_Option_Gameplay_VehicleReversingCamera        = 32,
	Stop_Siren                                         = 33,
	Play_Option_Audio_Subtitles                        = 34,
	Play_UISymbol_Canvas_ButtScaleNoneUni              = 35,
	Play_UICharacterStudio_HairLeftRight               = 36,
	Play_Alarm                                         = 37,
	Play_UICharacterCustom_ButtRight                   = 38,
	Play_Mail_Reply                                    = 39,
	Play_ArmForwardMed                                 = 40,
	Play_UIDefaultListOpen                             = 41,
	Play_Music_MP3_Display                             = 42,
	Play_Exh_Carry_Crim_02                             = 43,
	Play_Exh_Carry_Crim_03                             = 44,
	Play_Exh_Carry_Crim_01                             = 45,
	Play_BodyAccessoryMoveFast                         = 46,
	Play_SocialUI_AddFriend                            = 47,
	Play_BodyAccessoryMoveSlow                         = 48,
	Play_UIDefaultSceneClosed                          = 49,
	Play_FootstepRunLeft                               = 50,
	Play_SocialUI_Ignore                               = 51,
	Play_OptionMenu_Audio                              = 52,
	Play_UICharacterStudio_AgeMarksLeft                = 53,
	Play_EnemyStunned                                  = 54,
	Play_SideReward                                    = 55,
	Play_UI_Garage_Save                                = 56,
	Stop_Music_MP3                                     = 57,
	Play_CharacterCustom_Randomize                     = 58,
	Play_Eng_Comp_Enf_01                               = 59,
	Stop_TimerDead                                     = 60,
	Play_VehicleCritical                               = 61,
	Play_CombatALert                                   = 62,
	Play_UIDeploymentItem                              = 63,
	Play_UIDeployment_Consume                          = 64,
	Play_Eng_Carry_Enf_01                              = 65,
	Play_HealthWarning                                 = 66,
	Play_UISymbol_Canvas_FlipVert                      = 67,
	Play_FootstepScuff                                 = 68,
	Play_HUD_MissionRedirect                           = 69,
	Play_DumpValve_Comp_05                             = 70,
	Play_DumpValve_Comp_04                             = 71,
	Play_DumpValve_Comp_03                             = 72,
	Play_DumpValve_Comp_02                             = 73,
	Play_DumpValve_Comp_01                             = 74,
	Play_UIDeployment_Veh                              = 75,
	Play_UIDeploymentVehicle                           = 76,
	Play_UIWCharacterStudio_SkinScarSelcet             = 77,
	Play_Siren                                         = 78,
	Play_Exh_Truck_01                                  = 79,
	Play_OptionMenu_BugReporter                        = 80,
	Play_Trans_Carry_03                                = 81,
	Play_Trans_Carry_02                                = 82,
	Play_Trans_Carry_01                                = 83,
	Play_UIDeploymentVehiclemods                       = 84,
	Play_ErrorBeep                                     = 85,
	Play_EngineStart                                   = 86,
	End_VOIP_Duck                                      = 87,
	Play_Exh_EstateVan_01                              = 88,
	Play_Eng_Comp_Crim_01                              = 89,
	Play_Eng_Comp_Crim_03                              = 90,
	Play_Eng_Comp_Crim_02                              = 91,
	Play_UIDefaultSceneOpened                          = 92,
	Play_UISymbol_Canvas_Undo                          = 93,
	Unmute_Music                                       = 94,
	Play_UIChat_Close                                  = 95,
	Play_Eng_Truck_01                                  = 96,
	Play_UIDeployment_Othr                             = 97,
	Play_UICharacterCustom_ParameterSelect             = 98,
	Play_UICharacterStudio_ScarLeft                    = 99,
	Play_Exh_ClassicMuscle_01                          = 100,
	Play_Eng_Carry_Crim_01                             = 101,
	Play_UI_Garage_CreateDesign                        = 102,
	Play_Eng_Estate_01                                 = 103,
	Play_Exh_VanAmbulance_01                           = 104,
	Play_UICharacterStudio_Plusminus                   = 105,
	Play_Emote_Kiss                                    = 106,
	Play_UIDeploymentEquipment                         = 107,
	Stop_MouseSpeed                                    = 108,
	Play_Eng_SUV_Sport_01                              = 109,
	Play_Login_CheckName                               = 110,
	Play_UIDeploymentSecondaryWeapon                   = 111,
	Play_HUD_ScoreBoardResults                         = 112,
	Play_PoitiveBeep                                   = 113,
	Play_LegMed                                        = 114,
	Play_ChatAlert                                     = 115,
	Play_EnemyArrested                                 = 116,
	Play_UI_Garage_NextVehicle                         = 117,
	Play_FootstepRunRight                              = 118,
	Play_Option_Gameplay_Invertmouse                   = 119,
	Play_Login_DeleteCharacter                         = 120,
	Play_Exh_Comp_Enf_02                               = 121,
	Play_Exh_Comp_Enf_03                               = 122,
	Play_Exh_Comp_Enf_01                               = 123,
	Play_Eng_KingCab_01                                = 124,
	Play_UIDefaultPointerLeft                          = 125,
	Play_UIDefaultListIndexDecrement                   = 126,
	Stop_Music_Studio_Display                          = 127,
	Play_UIDeployment_WeapEquip                        = 128,
	Play_UISymbol_Canvas_Butt_MoveHoriz                = 129,
	Play_StandardBeep                                  = 130,
	Play_UIDeploymentGraffiti                          = 131,
	Play_Login_Login                                   = 132,
	Play_Emote_ClapSmall                               = 133,
	Play_Emote_CoinToss                                = 134,
	Play_Music_Studio                                  = 135,
	Play_Exh_Hatchback_01                              = 136,
	Stop_All_Except_NonEngine                          = 137,
	Play_UIDefaultSilent                               = 138,
	Stop_HealthWarning                                 = 139,
	Play_LegSlow                                       = 140,
	Play_Exh_ExecSaloon_01                             = 141,
	Play_UISymbol_Canvas_Rotate                        = 142,
	Play_Exh_LowRider_01                               = 143,
	Play_Eng_Roadster_01                               = 144,
	End_VOIP_Duck_Severe                               = 145,
	Play_UISymbol_Canvas_RotateCCW                     = 146,
	Play_ArmForwardFast                                = 147,
	Play_Option_Gameplay_Contacts                      = 148,
	Play_ArmForwardSlow                                = 149,
	Play_Mail_Forward                                  = 150,
	Play_Mail_RetrieveCash                             = 151,
	Play_OptionMenu_Video                              = 152,
	Play_Option_Gameplay_InteractiveObj                = 153,
	Play_Emote_Sob                                     = 154,
	Play_UI_Garage_PurchaseVehicle                     = 155,
	Play_FootstepSprintLeft                            = 156,
	Play_UIDefaultListClickSuccess                     = 157,
	Fade_Out_Environment                               = 158,
	Play_Trans_Comp_01                                 = 159,
	Play_Trans_Comp_03                                 = 160,
	Play_Trans_Comp_02                                 = 161,
	Play_UIDefaultControlNavLeft                       = 162,
	Play_Eng_Taxi_01                                   = 163,
	Play_Trans_Perf_01                                 = 164,
	Play_Trans_Perf_03                                 = 165,
	Play_Trans_Perf_02                                 = 166,
	Play_Trans_Perf_05                                 = 167,
	Play_Trans_Perf_04                                 = 168,
	Play_Mail_UpArrow                                  = 169,
	Play_Mail_Close                                    = 170,
	Play_UIDefaultControlNavUp                         = 171,
	Play_Mail_DownArrow                                = 172,
	Play_UIDeployment_View                             = 173,
	Play_PlayerEntry                                   = 174,
	Play_EnemyKilled                                   = 175,
	Play_UIDefaultControlFocused                       = 176,
	Play_Mail_InboxPageLeft                            = 177,
	Play_Exh_2DrVan_01                                 = 178,
	Play_Login_Canel                                   = 179,
	Play_KillArrestSuccess                             = 180,
	Play_UICharacterStudio_TattooDesigner              = 181,
	Play_SocialUI_Invite                               = 182,
	Play_Exh_Taxi_01                                   = 183,
	Play_UIDeploymentPrimaryWeapon                     = 184,
	Play_GroupNotReady                                 = 185,
	Play_Eng_ExecSaloon_01                             = 186,
	Play_UIDeployment_Manufacture                      = 187,
	Play_Option_Close                                  = 188,
	Play_Emote_Howl                                    = 189,
	Play_UIDefaultControlNavRight                      = 190,
	Play_TimerDead                                     = 191,
	Play_UISymbol_Canvas_RotateCW                      = 192,
	Play_TutorialSound                                 = 193,
	Play_FootstepWalkRight                             = 194,
	Play_ArmBackwardFast                               = 195,
	Play_HUD_FinalStage                                = 196,
	Stop_LoadingSound                                  = 197,
	Play_CharacterCustom_FactionCriminal               = 198,
	Play_UIDefaultListIndexIncrement                   = 199,
	Play_LivingCity                                    = 200,
	Play_NewGroupMember                                = 201,
	Fade_In_Environment                                = 202,
	Play_Option_Gameplay_Tutorials                     = 203,
	Play_Exh_Carry_Enf_02                              = 204,
	Play_Exh_Carry_Enf_03                              = 205,
	Play_Exh_Carry_Enf_01                              = 206,
	Play_Login_Accept                                  = 207,
	Mute_Music                                         = 208,
	Play_Exh_SUV_Sport_01                              = 209,
	Play_FootstepLand                                  = 210,
	Play_Exh_VanStandard_01                            = 211,
	Play_UIDefaultControlActivated                     = 212,
	Play_Eng_VanStandard_01                            = 213,
	Stop_Horn                                          = 214,
	Play_ReticuleDirectHit                             = 215,
	Stop_Music_Studio                                  = 216,
	Play_Option_Audio_SFXVol                           = 217,
	Play_DumpValve_Perf_03                             = 218,
	Play_DumpValve_Perf_02                             = 219,
	Play_DumpValve_Perf_01                             = 220,
	Play_DumpValve_Perf_05                             = 221,
	Play_DumpValve_Perf_04                             = 222,
	Play_Option_Audio_MusicVol                         = 223,
	Play_Mail_InboxPageRight                           = 224,
	End_VOIP_Duck_Mild                                 = 225,
	Play_PlayerNotReady                                = 226,
	Play_VehicleRepair                                 = 227,
	Play_Music_MP3                                     = 228,
	Play_Eng_EstateVan_01                              = 229,
	Play_FootstepSprintRight                           = 230,
	Play_Horn                                          = 231,
	Play_UICharacterStudio_ChangeTattoo                = 232,
	Play_Exh_Comp_Crim_02                              = 233,
	Play_Exh_Comp_Crim_03                              = 234,
	Play_Exh_Comp_Crim_01                              = 235,
	Play_UISymbol_Canvas_Butt_MoveFree                 = 236,
	Play_UICharacterStudio_ScarRight                   = 237,
	Play_Exh_Perf_Enf_02                               = 238,
	Play_Exh_Perf_Enf_03                               = 239,
	Play_Exh_Perf_Enf_01                               = 240,
	Play_Mail_Open                                     = 241,
	Play_ArmBackwardSlow                               = 242,
	Play_UISymbol_Canvas_SkewVert                      = 243,
	Play_UIDefaultPointerRight                         = 244,
	Play_MissionStarted                                = 245,
	Play_Mail_Delete                                   = 246,
	Play_UIDefaultListSort                             = 247,
	Play_UISymbol_Canvas_Redo                          = 248,
	Play_UIDeploymentSymbol                            = 249,
	Stop_StaminaEffect                                 = 250,
	Play_UICharacterStudio_AgeMarksRight               = 251,
	Play_KillAssist                                    = 252,
	Start_VOIP_Duck_Mild                               = 253,
	Play_OptionMenu_Control                            = 254,
	Play_MouseSpeed                                    = 255,
	Play_LoadingSound                                  = 256,
	Start_VOIP_Duck                                    = 257,
	Play_ReticuleMove                                  = 258,
	Play_Option_Apply                                  = 259,
	Play_CharacterCustom_FactionEnforcer               = 260,
	Play_Turbo_Perf_05                                 = 261,
	Play_Turbo_Perf_04                                 = 262,
	Play_Turbo_Perf_03                                 = 263,
	Play_Turbo_Perf_02                                 = 264,
	Play_Turbo_Perf_01                                 = 265,
	Play_Exh_SUV_01                                    = 266,
	Play_Music_Studio_Display                          = 267,
	Play_CharacterCustom_Advanced                      = 268,
	Play_Login_Next                                    = 269,
	Play_UIDefaultTabActivated                         = 270,
	Play_Mail_IgnoreSender                             = 271,
	Play_SocialUI_ButtonClose                          = 272,
	Play_Turbo_Comp_03                                 = 273,
	Play_Turbo_Comp_02                                 = 274,
	Play_Turbo_Comp_01                                 = 275,
	Play_DumpValve_Carry_01                            = 276,
	Play_DumpValve_Carry_03                            = 277,
	Play_DumpValve_Carry_02                            = 278,
	Play_DumpValve_Carry_05                            = 279,
	Play_DumpValve_Carry_04                            = 280,
	Play_Emote_Laugh                                   = 281,
	Play_Emote_Whistle                                 = 282,
	Play_UIDeployment_Split                            = 283,
	Play_Emote_Smoke                                   = 284,
	Play_OptionMenu_Gameplay                           = 285,
	Play_Eng_Pickup_01                                 = 286,
	Play_UIDeployment_Destroy                          = 287,
	Play_HealthFull                                    = 288,
	Play_Option_Video_VSync                            = 289,
	Play_Eng_2DrVan_01                                 = 290,
	Play_UICharacterStudio_RemoveItem                  = 291,
	Play_UICharacterStudio_Purchase                    = 292,
	Play_UI_Garage_Save_03                             = 293,
	Play_UIDeployment_Rename                           = 294,
	Stop_HealthFull                                    = 295,
	Play_Witnessing                                    = 296,
	Play_Exh_VanArmoured_01                            = 297,
	Play_UISymbol_Canvas_SkewHoriz                     = 298,
	Play_UICharacterStudio_TattooColor                 = 299,
	Play_MissionOfferAlert                             = 300,
	Play_UIDeployment_Template                         = 301,
	Play_UIDefaultListClose                            = 302,
	Play_Option_Video_Windowed                         = 303,
	Play_Eng_Saloon_01                                 = 304,
	Play_Exh_Pickup_01                                 = 305,
	Play_LandingHeavy                                  = 306,
	Play_Emote_Fart                                    = 307,
	Play_Exh_Saloon_01                                 = 308,
	Play_Emote_CoinCatch                               = 309,
	Play_FootstepWalkLeft                              = 310,
	Play_Option_Gameplay_YourName                      = 311,
	Play_UIDeploymentOutfit                            = 312,
	Play_LegFast                                       = 313,
	Play_UIDeploymentMeleeWeeapon                      = 314,
	Play_Eng_VanAmbulance_01                           = 315,
	Play_Emote_Clap                                    = 316,
	Start_VOIP_Duck_Severe                             = 317,
	Stop_Music_MP3_Display                             = 318,
	Play_Option_Cancel                                 = 319,
	Play_BodyAccessoryMoveMed                          = 320,
	Play_Exh_Roadster_01                               = 321,
	Play_UIDeployment_Edit                             = 322,
	Play_Eng_SUV_01                                    = 323,
	Play_UISymbol_Canvas_ButtScaleVert                 = 324,
	Play_Emote_SmokeMatch                              = 325,
	Play_Mail_RetrieveItem                             = 326,
	Play_PlayerReady                                   = 327,
	Stop_TimerMission                                  = 328,
	Play_Exh_Perf_Crim_02                              = 329,
	Play_Exh_Perf_Crim_03                              = 330,
	Play_Exh_Perf_Crim_01                              = 331,
	Play_Mail_NewMessage                               = 332,
	Play_UIDeploymentCharacterMods                     = 333,
	Play_BountyAlert                                   = 334,
	Play_Turbo_Carry_01                                = 335,
	Play_Turbo_Carry_03                                = 336,
	Play_Turbo_Carry_02                                = 337,
	Play_Login_Decline                                 = 338,
	Stop_All_Game_Object                               = 339,
	Play_Exh_KingCab_01                                = 340,
	Play_Eng_LowRider_01                               = 341,
	Play_Eng_Perf_Enf_03                               = 342,
	Play_Eng_Perf_Enf_02                               = 343,
	Play_Eng_Perf_Enf_01                               = 344,
	Play_Eng_ClassicMuscle_01                          = 345,
	Play_UISymbol_Canvas_Butt_MoveVert                 = 346,
	Play_UIDeployment_Cloth                            = 347,
	Play_UI_Garage_BottomSelection                     = 348,
	Play_BountyClaimed                                 = 349,
	Play_HeatRatingRaise                               = 350,
	Play_Option_Defaults                               = 351,
	Play_Eng_Hatchback_01                              = 352,
	Play_RewardReceived                                = 353,
	Play_Eng_Perf_Crim_01                              = 354,
	Play_Eng_Perf_Crim_03                              = 355,
	Play_Eng_Perf_Crim_02                              = 356,
	Play_UICharacterStudio_Back                        = 357,
	Play_WhisperAlert                                  = 358,
	Play_UIDefaultListClickFail                        = 359,
	Play_UISymbol_Canvas_SkewFree                      = 360,
	Play_UISymbol_Canvas_FlipHoriz                     = 361,
	Play_UISymbol_Canvas_ButtScaleHoriz                = 362,
	Play_UIDeploymentGrenades                          = 363,
	Play_UICharacterCustom_CharacterCreate             = 364,
	Play_ActionMessage                                 = 365,
	Play_HeatRatingDrop                                = 366,
	Play_Option_Gameplay_Players                       = 367,
	Play_PropFence2m                                   = 368,
	Play_ED_Tan_DriveThru                              = 369,
	Play_HelicopterDistant01_150m                      = 370,
	Play_PropFence3m                                   = 371,
	Play_WaterPier_20m                                 = 372,
	Play_ED_Crim_Apartment_Misc                        = 373,
	Play_CSA_Arson_CanLift                             = 374,
	Play_Vignette_NewspaperDispenser_Fail_InsertCoin   = 375,
	Play_Vignette_NewspaperDispenserDoorOpen           = 376,
	Play_ED_Civ_Bars_GunFun                            = 377,
	Play_PropLadderHand                                = 378,
	Play_EnforcerDept_Int03_30m                        = 379,
	Play_Window_Workshop_15m                           = 380,
	Play_Vent004_10m                                   = 381,
	Play_WeaponFire                                    = 382,
	Play_CSA_LockPickClose                             = 383,
	Play_Flames_Cargo_Arson                            = 384,
	Play_CSA_Bomb_WireCut01                            = 385,
	Play_RoadnoiseFar002                               = 386,
	Play_RoadnoiseFar001                               = 387,
	Play_Vent010_20m                                   = 388,
	Play_Debris_ElectricBox_C                          = 389,
	Play_Debris_ElectricBox_B                          = 390,
	Play_Debris_ElectricBox_A                          = 391,
	Play_SecurityCamera_Destroy                        = 392,
	Play_LC_Mugged_Grabbed                             = 393,
	Play_Chimney001_10m                                = 394,
	Play_ED_Blbrds_Playtoy                             = 395,
	Play_Reload_SnubNoseRev_01_A                       = 396,
	Play_DoorCloseVan01                                = 397,
	Play_DoorCloseVan02                                = 398,
	Play_Vent003_30m                                   = 399,
	Play_CSA_SlimJim_Spawn                             = 400,
	Play_Debris_StreetBillBoard_A                      = 401,
	Play_Debris_StreetBillBoard_B                      = 402,
	Play_ED_Tan_PS_PortAuthority                       = 403,
	Play_Debris_Pallet_Single_B                        = 404,
	Play_Debris_Pallet_Single_C                        = 405,
	Play_Debris_Pallet_Single_A                        = 406,
	Play_Window_MiddleClass001_15m                     = 407,
	WeaponReload_Close                                 = 408,
	Play_Debris_FireObjects_C                          = 409,
	Play_Debris_FireObjects_B                          = 410,
	Play_Debris_FireObjects_A                          = 411,
	Play_Vent009_10m                                   = 412,
	Play_LightFluroHum02                               = 413,
	Play_LightFluroHum01                               = 414,
	Play_Vent010_10m                                   = 415,
	Play_AlarmCarBreakin                               = 416,
	Play_EnforcerDept_Tannoy001_40m                    = 417,
	Play_ED_Crim_Slum_Torture                          = 418,
	Play_ED_Civ_WF_PortAuthority                       = 419,
	Play_MeleeWeaponSwipe                              = 420,
	Play_Vignette_MailBoxLetterDrop                    = 421,
	Play_ED_Tan_NoodleShack                            = 422,
	Play_Vent006a_10m                                  = 423,
	Play_Vent003_20m                                   = 424,
	Play_Equip_Grenade_PullPin                         = 425,
	Play_Equip_Grenade                                 = 426,
	Play_Vent002a_10m                                  = 427,
	Play_TVMuffled001                                  = 428,
	Play_DoorOpenSports1                               = 429,
	Play_DoorOpenSports3                               = 430,
	Play_DoorOpenSports2                               = 431,
	Play_Vent008_10m                                   = 432,
	Play_Debris_GlassWindow_Ceiling                    = 433,
	Play_AirCon_Industrial                             = 434,
	Play_Chimney001_60m                                = 435,
	Play_WaterStream001                                = 436,
	Play_WaterStream002                                = 437,
	Play_Generator004_15m                              = 438,
	Play_Chimney001_30m                                = 439,
	Play_CSA_Arson_LighterPocket                       = 440,
	Play_ED_Crim_Office_BotchedJob                     = 441,
	Play_ED_Blbrds_Car_Bishada                         = 442,
	Play_CricketsNight01                               = 443,
	Play_CricketsNight02                               = 444,
	Play_VendingMachineAmmo_Crim                       = 445,
	Play_Factory013_100m                               = 446,
	Play_Vent003_10m                                   = 447,
	Play_Chimney014_20m                                = 448,
	Play_ED_Enf_Apartment                              = 449,
	Play_Debris_Generic_A                              = 450,
	Play_CSA_Bomb_Button03                             = 451,
	Play_CSA_Bomb_Button02                             = 452,
	Play_CSA_Bomb_Button01                             = 453,
	Play_DoorCloseSports1                              = 454,
	Play_DoorCloseSports3                              = 455,
	Play_DoorCloseSports2                              = 456,
	Play_ED_Blbrds_TastyBurger                         = 457,
	Play_Vent008_20m                                   = 458,
	BulletImpact_2D                                    = 459,
	Play_ED_Tan_PS_Crim                                = 460,
	Play_BirdSparrow                                   = 461,
	Play_EnforcerDept_Carpark                          = 462,
	Play_CSA_DoorForced_Break                          = 463,
	Stop_AmmoFlash                                     = 464,
	Play_BombFlash_Set                                 = 465,
	Play_Chimney013_40m                                = 466,
	Play_LiquidContainer005_25m                        = 467,
	Play_Vent002_10m                                   = 468,
	Play_CSA_AmmoBox_Lift                              = 469,
	Play_LightBuzz002                                  = 470,
	Play_LightBuzz001                                  = 471,
	Play_PropExtractor012                              = 472,
	Play_PropExtractor010                              = 473,
	Play_PropExtractor011                              = 474,
	Play_SteamVent_10m                                 = 475,
	Play_Window_BuildingSite002_15m                    = 476,
	Play_MissionStage                                  = 477,
	Play_PropExtractor001                              = 478,
	Play_PropExtractor003                              = 479,
	Play_PropExtractor002                              = 480,
	Play_PropExtractor005                              = 481,
	Play_PropExtractor004                              = 482,
	Play_PropExtractor007                              = 483,
	Play_PropExtractor006                              = 484,
	Play_PropExtractor009                              = 485,
	Play_PropExtractor008                              = 486,
	Play_HUD_TaskItemDefault                           = 487,
	Play_Flames_Window_Arson                           = 488,
	Play_SirenDistant001                               = 489,
	Play_Chimney001_80m                                = 490,
	Play_Duct003_30m                                   = 491,
	Stop_Vehicle_Flames                                = 492,
	Play_HUDMessage_OnDeath                            = 493,
	Play_Flames_ElectricalBox_Bomb                     = 494,
	Play_Vignette_NewspaperDispenserPaperMovement      = 495,
	Play_LC_Mugged_BodyMove                            = 496,
	Play_BombFlash_Slow                                = 497,
	Play_Debris_Vending_Bottle_A                       = 498,
	Play_Debris_Vending_Bottle_B                       = 499,
	Play_ED_Civ_Bars_OldMan                            = 500,
	Play_Duct006_30m                                   = 501,
	Play_Debris_NewsRackLadder_Sm_A                    = 502,
	Play_Debris_NewsRackLadder_Sm_B                    = 503,
	Play_RoadNoise_PlayerCar                           = 504,
	Play_ClockLarge                                    = 505,
	Play_Reload_BeanBagGun_01_A                        = 506,
	Play_Reload_BeanBagGun_01_C                        = 507,
	Play_Reload_BeanBagGun_01_B                        = 508,
	Play_Reload_DartGun_B                              = 509,
	Play_Reload_DartGun_C                              = 510,
	Play_Reload_DartGun_A                              = 511,
	Play_SteamVent_50m                                 = 512,
	Play_ED_Crim_Office_FourcheBank                    = 513,
	Play_Debris_Dumpster_A                             = 514,
	Play_Debris_Dumpster_B                             = 515,
	Play_StarDowngrade                                 = 516,
	Play_DamageAmount                                  = 517,
	Play_WaterSeaNear001                               = 518,
	Play_Mug_PunchSwipe                                = 519,
	Play_Vent001_10m                                   = 520,
	Play_Duct006_20m                                   = 521,
	Play_Item                                          = 522,
	Play_ED_Civ_Apartm_Low                             = 523,
	Stop_TimerActiveCSA                                = 524,
	Play_Debris_VendingStand_B                         = 525,
	Play_Debris_VendingStand_C                         = 526,
	Play_Debris_VendingStand_A                         = 527,
	Play_Debris_FireHydrant_D                          = 528,
	Play_Debris_FireHydrant_A                          = 529,
	Play_Debris_FireHydrant_C                          = 530,
	Play_Debris_FireHydrant_B                          = 531,
	Play_Reload_GrenadeLauncher_01_A                   = 532,
	Play_Reload_GrenadeLauncher_01_C                   = 533,
	Play_Reload_GrenadeLauncher_01_B                   = 534,
	Play_AlarmSchoolBell                               = 535,
	Play_Vignette_MailBoxClose02                       = 536,
	Play_BirdPigeon                                    = 537,
	Play_Reload_Magnum_01_B                            = 538,
	Play_Reload_Magnum_01_C                            = 539,
	Play_Reload_Magnum_01_A                            = 540,
	Play_Generator006_25m                              = 541,
	Stop_TyreSquealLateral                             = 542,
	Play_Trees                                         = 543,
	Play_Flames_PortaCabin_Small_Bomb_End              = 544,
	Play_CSA_CrimeScene_PocketOut                      = 545,
	Play_Factory012_10m                                = 546,
	Play_Equip_Grenade_Throw                           = 547,
	Play_ED_Civ_Slums_TVAnger                          = 548,
	Play_CSA_DoorForced_RamDrop                        = 549,
	Play_SirenDistant002_400m                          = 550,
	Play_ED_Civ_Apartm_Sex                             = 551,
	Play_ED_Tan_PS_Roadblocks                          = 552,
	Play_CSA_BugPlant_PocketOut                        = 553,
	Play_EnforcerDept_Int01_30m                        = 554,
	Play_ED_RadioStation03                             = 555,
	Play_ED_RadioStation02                             = 556,
	Play_ED_RadioStation01                             = 557,
	Play_ED_Crim_Slum_HellNight                        = 558,
	Play_CSA_SlimJim_SlideIn                           = 559,
	Play_Chimney005_10m                                = 560,
	Play_ED_Crim_ConstructionArea                      = 561,
	Play_ExplosionMedium                               = 562,
	Play_CSA_Hacking_CloseLid                          = 563,
	Play_LiquidContainerLarge004_80m                   = 564,
	Play_Reload_Shotgun_OneHanded                      = 565,
	Play_Grasshopper                                   = 566,
	Play_BombGlow                                      = 567,
	Play_CSA_Graffiti_CanSpawn                         = 568,
	Play_CSA_CrimeScene_Photo                          = 569,
	Play_CSA_SlimJim_Rattle                            = 570,
	Play_HelicopterDistant02_300m                      = 571,
	Play_CSA_BurglaryWindow_Slide                      = 572,
	Play_CSA_CrimeScene_PocketIn                       = 573,
	Play_EnforcerDept_Entrance001_15m                  = 574,
	Play_Restuarant002_30m                             = 575,
	Play_Duct003_20m                                   = 576,
	Play_Vehicle_Steam                                 = 577,
	Play_Vehicle_Steam01                               = 578,
	Play_Debris_GlassWindow_Wall                       = 579,
	Play_FluroAircon_RoomAmb02                         = 580,
	Play_FluroAircon_RoomAmb03                         = 581,
	Play_FluroAircon_RoomAmb01                         = 582,
	Play_CSA_Arson_CanThrow                            = 583,
	Play_KilledBy                                      = 584,
	Play_Window_Bedroom001_15m                         = 585,
	Play_Grenade_Timer                                 = 586,
	Play_Reload_SAPistol_01_A                          = 587,
	Play_Reload_SAPistol_01_B                          = 588,
	Play_Reload_SAPistol_01_C                          = 589,
	Play_Vignette_NewspaperDispenser_Fail_OpenFail     = 590,
	Play_CSA_BurglaryDoor_Impact_Metal                 = 591,
	Play_Debris_CivicGarbageCan_Ashtray_A              = 592,
	Play_Debris_CivicGarbageCan_Ashtray_B              = 593,
	Play_Vignette_MailBoxSlideOpen                     = 594,
	Play_CSA_WireCutter_Spawn01                        = 595,
	BulletRicochet                                     = 596,
	Play_CSA_Arson_CanPour_B                           = 597,
	Play_WaterSeaNear001_15m                           = 598,
	Play_ED_Tan_TastyBurger                            = 599,
	Play_DuctMetal_20m                                 = 600,
	Play_Aerial_Tall_Destroy                           = 601,
	Play_LiquidContainer004_30m                        = 602,
	Play_Chimney011_30m                                = 603,
	Play_Chimney006_20m                                = 604,
	Play_ExplosionLarge                                = 605,
	Play_Debris_CrashBarrier_A                         = 606,
	Play_Debris_CrashBarrier_B                         = 607,
	Play_Bar001_30m                                    = 608,
	Play_WaterSeaNear001_75m                           = 609,
	Play_Vignette_NewspaperDispenserDoorClose          = 610,
	Play_HUDMessage_OnKill                             = 611,
	Play_Cafe002_15m                                   = 612,
	Play_Flames_Crate_Bomb                             = 613,
	Play_ED_Civ_Bars_NightClubs                        = 614,
	Play_Chimney006_30m                                = 615,
	Play_Debris_MailBox_B                              = 616,
	Play_Debris_MailBox_A                              = 617,
	Play_LiquidContainerLarge004_120m                  = 618,
	Play_TimerMission                                  = 619,
	Play_Flames_IndustrialAirCon_Bomb                  = 620,
	Play_Vent002b_10m                                  = 621,
	Play_PropExtractor005a                             = 622,
	Play_CSA_BurglaryWindow_Creak                      = 623,
	Play_CashIncrement                                 = 624,
	Play_ED_TVSequence01                               = 625,
	Play_ED_TVSequence02                               = 626,
	Play_VehicleImpact_Ped                             = 627,
	Play_SteamPipe_20m                                 = 628,
	Play_Debris_BusShelter_B                           = 629,
	Play_Debris_BusShelter_C                           = 630,
	Play_Debris_BusShelter_A                           = 631,
	Play_Debris_BusShelter_D                           = 632,
	Play_Vent011_10m                                   = 633,
	Play_Factory017_80m                                = 634,
	Play_WaterSeaNear001_40m                           = 635,
	Play_DrainCircular                                 = 636,
	Play_ElectricalBox_Destroy                         = 637,
	Play_ED_Tan_PS_Roadway                             = 638,
	Play_ED_Crim_SpawnArea_01                          = 639,
	Play_ED_Crim_SpawnArea_03                          = 640,
	Play_ED_Crim_SpawnArea_02                          = 641,
	Play_ED_Tan_PS_SafeArea                            = 642,
	Play_ED_Civ_Bars_ArtGallery                        = 643,
	Play_NoAmmo                                        = 644,
	Play_GarageDoor_RamRaid1                           = 645,
	Play_GarageDoor_RamRaid2                           = 646,
	Play_DoorCloseSlideVan01                           = 647,
	Play_DoorCloseSlideVan02                           = 648,
	Play_FlagPole_50m                                  = 649,
	Play_TimerActiveCSA                                = 650,
	Play_Vent005_10m                                   = 651,
	Play_Chimney001_120m                               = 652,
	Stop_Scrape                                        = 653,
	Play_ED_Crim_Apartment_PhoneCalls                  = 654,
	Play_Garage002                                     = 655,
	Play_Garage001                                     = 656,
	Play_Vignette_ATM_Keypad                           = 657,
	Play_CSA_DoorForced_Break_Cargo                    = 658,
	Play_Vignette_GarbageHitConc                       = 659,
	Play_Vignette_VendingMachineKeypad                 = 660,
	Stop_VehicleLand                                   = 661,
	Play_LC_BodyMove                                   = 662,
	Play_SteamPipe_15m                                 = 663,
	Play_Vignette_ATM_MoneyPocket                      = 664,
	Play_PunchSwipe                                    = 665,
	Play_BarBilliards_70m                              = 666,
	Play_Debris_FruitStall_B                           = 667,
	Play_Debris_FruitStall_A                           = 668,
	Play_CSA_Bomb_Place01                              = 669,
	Play_WaterFall_250m                                = 670,
	Play_CSA_BurglaryWindow_Creak_Soft                 = 671,
	Play_EnforcerDept_Int02_30m                        = 672,
	Play_Mug_FistSlap                                  = 673,
	Stop_RoadNoise_RemotePlayerCars                    = 674,
	Play_LC_BodyLand_Light                             = 675,
	Play_Grenade_Land                                  = 676,
	Play_ED_Crim_Apartment_Messages                    = 677,
	Play_AlarmCar                                      = 678,
	Play_AirConditioner                                = 679,
	Play_BarSlums_30m                                  = 680,
	Play_VentSmall                                     = 681,
	Play_Vehicle_Smoke                                 = 682,
	Play_Alarm_Destroy                                 = 683,
	Play_VehicleLand                                   = 684,
	Play_Duct008_30m                                   = 685,
	Play_RoofVentTowerHat                              = 686,
	Play_Chimney009_20m                                = 687,
	Play_GarageDoor_Destroy2                           = 688,
	Play_GarageDoor_Destroy1                           = 689,
	Stop_VehicleScrape                                 = 690,
	Play_ED_Civ_WF_Apartment                           = 691,
	Play_Vignette_ATM_SlotOpen                         = 692,
	Stop_CashIncrement                                 = 693,
	Play_GasPump_15m                                   = 694,
	Play_NitroOn                                       = 695,
	Play_ED_Enf_Spawn                                  = 696,
	Play_Restaurant_Chinese                            = 697,
	Play_DoorOpenSlideVan01                            = 698,
	Play_DoorOpenSlideVan02                            = 699,
	Play_CSA_Arson_FireIgnite                          = 700,
	Play_CSA_AmmoBox_Open                              = 701,
	Play_Duct008_20m                                   = 702,
	Play_Flames_TicketMachine_Arson                    = 703,
	Play_TyreSquealLateral                             = 704,
	Stop_Flames_PortaCabin_Large_Arson                 = 705,
	Play_Chimney015_20m                                = 706,
	Play_Duct010_10m                                   = 707,
	Play_CSA_DoorForced_Break_Metal                    = 708,
	Play_ED_Crim_Office_Waskawi                        = 709,
	Play_CSA_Hacking_Success                           = 710,
	Play_Vignette_MailBoxPat                           = 711,
	Play_Debris_NewsStand_A                            = 712,
	Play_Debris_NewsStand_B                            = 713,
	Play_CeremonyPositive                              = 714,
	Play_ChimneyBlast001                               = 715,
	Play_ChimneyBlast003                               = 716,
	Play_ChimneyBlast002                               = 717,
	Play_ChimneyBlast005                               = 718,
	Play_ChimneyBlast004                               = 719,
	Play_ChimneyBlast007                               = 720,
	Play_ChimneyBlast006                               = 721,
	Play_VehicleDamage                                 = 722,
	Play_VehicleDamage01                               = 723,
	Play_VehicleDamage02                               = 724,
	Play_VehicleDamage03                               = 725,
	Play_VehicleDamage04                               = 726,
	Play_VehicleDamage05                               = 727,
	Play_VehicleDamage06                               = 728,
	Play_VehicleDamage07                               = 729,
	Play_VehicleDamage08                               = 730,
	Play_VehicleDamage09                               = 731,
	Play_Chimney004_20m                                = 732,
	Stop_LC_TyreSqueal                                 = 733,
	Play_CSA_BurglaryDoor_Impact                       = 734,
	Play_VehicleDamage10                               = 735,
	Play_VehicleDamage11                               = 736,
	Play_VehicleDamage12                               = 737,
	Play_LC_PunchImpact                                = 738,
	Play_Duct004_30m                                   = 739,
	Play_TimerArrested                                 = 740,
	Play_CSA_DoorForced_Ram_Cargo                      = 741,
	Play_BirdCricketSingle01                           = 742,
	Play_BirdCricketSingle02                           = 743,
	Play_Vignette_ATM_MoneyWithdraw                    = 744,
	Play_Chimney008_60m                                = 745,
	Play_Explode_ElectricalBox_Bomb                    = 746,
	Play_ElecBox                                       = 747,
	Play_ED_Blbrds_Wildcats                            = 748,
	Play_Explosion_Level                               = 749,
	Play_Explosion_Level01                             = 750,
	Play_Explosion_Level02                             = 751,
	Play_Explosion_Level03                             = 752,
	Play_Chimney004_30m                                = 753,
	Play_BarBilliards02_25m                            = 754,
	BulletImpact                                       = 755,
	Play_Chimney007_10m                                = 756,
	Play_DrainPavement                                 = 757,
	Play_SlumEmitter001_100m                           = 758,
	Play_ED_Blbrds_Car_Nomad                           = 759,
	Play_ED_Tan_GasStation                             = 760,
	Play_Vignette_VendingMachineFail_Thump             = 761,
	Stop_TimerUnconscious                              = 762,
	BulletOutgoing                                     = 763,
	Play_Chimney009_30m                                = 764,
	Play_Debris_SatDish_Large_B                        = 765,
	Play_Debris_SatDish_Large_A                        = 766,
	Play_CricketGrasshopper                            = 767,
	Play_Shops_HairSalon                               = 768,
	Play_CSA_Graffiti_Spray01                          = 769,
	Play_Flames_Yacht_Bomb                             = 770,
	Play_Chimney012_50m                                = 771,
	Stop_VehicleExplode_PostFlames                     = 772,
	Play_Debris_SatDish_Small_C                        = 773,
	Play_Debris_SatDish_Small_B                        = 774,
	Play_Debris_SatDish_Small_A                        = 775,
	Play_Vent003a_10m                                  = 776,
	Play_CSA_BugPlant_Success                          = 777,
	Play_ED_Blbrds_Asylum                              = 778,
	Play_SlumBaby_50m                                  = 779,
	Play_Vignette_VendingMachineItemDrop               = 780,
	Play_Apartment01_70m                               = 781,
	Stop_Flames_PortaCabin_Small_Arson                 = 782,
	Play_Vignette_VendingMachineFlapOpen               = 783,
	Play_Vignette_VendingMachineFlapClose              = 784,
	Play_ED_Blbrds_Myoko                               = 785,
	Play_Duct001_10m                                   = 786,
	Play_TelephoneRing_12m                             = 787,
	Play_BirdsInsects04                                = 788,
	Play_BirdsInsects01                                = 789,
	Play_BirdsInsects03                                = 790,
	Play_BirdsInsects02                                = 791,
	Play_LC_Mugged_DropToKnees                         = 792,
	Play_Cafe001_15m                                   = 793,
	Play_BirdWingFlap02                                = 794,
	Play_BirdWingFlap01                                = 795,
	Play_CSA_BurglaryWindow_Break                      = 796,
	Play_AmbienceTestLevel                             = 797,
	Play_FrogSwamp                                     = 798,
	Play_Explosion_Portacabin_Sm_End                   = 799,
	Play_LC_Mugged_Kicked                              = 800,
	Stop_Flies_Dumpster01                              = 801,
	Play_Debris_CivicGarbage_A                         = 802,
	Play_Debris_CivicGarbage_B                         = 803,
	Play_Debris_CivicGarbage_C                         = 804,
	Play_Crate_Thump                                   = 805,
	Play_Elevator_25m                                  = 806,
	Play_SlumMusic_50m                                 = 807,
	Play_Vignette_PayphoneCoins                        = 808,
	Play_Chimney002_20m                                = 809,
	Play_LiquidContainerLarge001                       = 810,
	Play_LiquidContainerLarge002                       = 811,
	Play_LiquidContainerLarge003                       = 812,
	Play_DogsBarkSuburb                                = 813,
	Play_Missile                                       = 814,
	Play_BannerSmall                                   = 815,
	Play_Airplane_PassOverhead_300m                    = 816,
	Play_CSA_Arson_LighterIgnite                       = 817,
	Play_CSA_SlimJim_Rattle_Soft                       = 818,
	Play_Vent004_20m                                   = 819,
	Play_BombFlash_Fast                                = 820,
	Play_Debris_AdvertBoard_A                          = 821,
	Play_Scrape                                        = 822,
	Play_Duct002_10m                                   = 823,
	Play_LC_TyreSqueal                                 = 824,
	Play_RamRaid_Damage2                               = 825,
	Play_RamRaid_Damage1                               = 826,
	Play_CSA_BugPlant_Place                            = 827,
	Play_Vignette_PayphoneHangUp                       = 828,
	Play_ClockSmall                                    = 829,
	Play_Apartment03_70m                               = 830,
	ShopMusic                                          = 831,
	Play_CSA_DoorForced_RamLift                        = 832,
	Play_Equip_SAPistol_01                             = 833,
	Play_Chimney002_30m                                = 834,
	Play_PropExtractor014_30m                          = 835,
	Play_Debris_Pallet_Stack_A                         = 836,
	Play_Debris_Pallet_Stack_B                         = 837,
	Play_Debris_Pallet_Stack_C                         = 838,
	Play_CSA_LockPickOpen                              = 839,
	Play_ED_Civ_Bars_Rich                              = 840,
	Play_Vent004_30m                                   = 841,
	Play_Duct002_15m                                   = 842,
	Play_Equip_SniperRifle_01                          = 843,
	Play_CSA_SlimJim_DoorUnlock                        = 844,
	Play_Vent007_10m                                   = 845,
	Play_Flames_Yacht_Arson                            = 846,
	Play_Bird03                                        = 847,
	Play_Bird02                                        = 848,
	Play_Bird01                                        = 849,
	Play_Bird04                                        = 850,
	Play_Apartment04_70m                               = 851,
	Play_PropExtractor014_20m                          = 852,
	Play_Debris_IndustrialWheeled_Large_B              = 853,
	Play_Debris_IndustrialWheeled_Large_A              = 854,
	Play_CSA_LockPickUnlock                            = 855,
	Play_CSA_AmmoBox_Close                             = 856,
	VehicleImpact                                      = 857,
	Play_Factory011a                                   = 858,
	Play_VendingMachine5M                              = 859,
	Play_Chimney001_20m                                = 860,
	Play_ED_Blbrds_CombatWear                          = 861,
	Play_Factory019_100m                               = 862,
	Play_Vehicle_Flames                                = 863,
	Play_Equip_HMG_01                                  = 864,
	Play_GunsDistant01_500m                            = 865,
	Play_APB                                           = 866,
	Play_Reload_RocketLauncher_01_C                    = 867,
	Play_Reload_RocketLauncher_01_B                    = 868,
	Play_Reload_RocketLauncher_01_A                    = 869,
	Play_Chimney005_30m                                = 870,
	Play_BankMachine                                   = 871,
	Play_Debris_CivicGarbageCan_Metal_A                = 872,
	Play_Debris_CivicGarbageCan_Metal_B                = 873,
	Play_Debris_CivicGarbageCan_Metal_C                = 874,
	Play_VehicleExplode_PostFlames                     = 875,
	Play_BannerLarge                                   = 876,
	Play_Flames_TicketMachine_Bomb                     = 877,
	Stop_Flames_Cargo_Arson                            = 878,
	Play_ED_Blbrds_Car_Patriot                         = 879,
	Play_CSA_BugPlant_Button01                         = 880,
	BulletIncoming                                     = 881,
	Play_DoorOpenVan01                                 = 882,
	Play_DoorOpenVan02                                 = 883,
	Play_CricketSingle                                 = 884,
	Play_Vignette_VendingMachineCoin                   = 885,
	Play_DoorClose                                     = 886,
	Play_BomdDisengage                                 = 887,
	Play_Duct003_40m                                   = 888,
	Play_Impact                                        = 889,
	Play_Chimney005_20m                                = 890,
	Play_StarUpgrade                                   = 891,
	Play_Chimney001_40m                                = 892,
	Play_NitroOff                                      = 893,
	Play_TimerUnconscious                              = 894,
	Play_MissionLose                                   = 895,
	Play_CSA_Hacking_Keyboard_Press                    = 896,
	Stop_TimerArrested                                 = 897,
	Play_Duct009_10m                                   = 898,
	Play_CSA_Bomb_Spawn01                              = 899,
	Play_DogBarking002                                 = 900,
	Play_DogBarking003                                 = 901,
	Play_DogBarking001                                 = 902,
	Play_DogBarkInt                                    = 903,
	Play_LightBuzz003_Int                              = 904,
	Play_VehicleScrape                                 = 905,
	Play_Factory008                                    = 906,
	Play_Factory009                                    = 907,
	Play_Factory001                                    = 908,
	Play_Factory002                                    = 909,
	Play_Factory003                                    = 910,
	Play_Factory004                                    = 911,
	Play_Factory005                                    = 912,
	Play_Factory006                                    = 913,
	Play_Factory007                                    = 914,
	Play_Shops_Supermarket                             = 915,
	Play_Generator003_15m                              = 916,
	Play_Factory013                                    = 917,
	Play_Factory012                                    = 918,
	Play_Factory011                                    = 919,
	Play_Factory010                                    = 920,
	Play_Factory016                                    = 921,
	Play_Factory015                                    = 922,
	Play_Factory014                                    = 923,
	Play_CSA_AmmoBox_Spawn                             = 924,
	Play_Debris_NewsRackLadder_Lg_B                    = 925,
	Play_Debris_NewsRackLadder_Lg_A                    = 926,
	Play_Debris_Pallet_Sack_A                          = 927,
	Play_Debris_Pallet_Sack_B                          = 928,
	Play_Dish_Sparks                                   = 929,
	Play_ED_Blbrds_Inet                                = 930,
	Play_Banner_FlapOnly                               = 931,
	Play_DoorCloseGeneric2                             = 932,
	Play_DoorCloseGeneric1                             = 933,
	Play_RamRaid_Success                               = 934,
	Play_Vignette_ATM_CardEnter                        = 935,
	Play_Restuarant001_30m                             = 936,
	Play_ED_Blbrds_MaeJoe                              = 937,
	Play_Vignette_GarbageDispose                       = 938,
	Play_BombEngage                                    = 939,
	Play_IndustrialAirCon_Destroy                      = 940,
	Play_Club003_35m                                   = 941,
	Play_Vignette_MailBoxClose                         = 942,
	Play_WaterNear_Calm                                = 943,
	Play_Debris_NewsPaperBox_C                         = 944,
	Play_Debris_NewsPaperBox_B                         = 945,
	Play_Debris_NewsPaperBox_A                         = 946,
	Play_Vignette_CanOpen                              = 947,
	Play_Chimney006_10m                                = 948,
	Play_Equip_GrenadeLauncher_01                      = 949,
	Play_CSA_DoorKickOpen                              = 950,
	Play_DoorSlam001_15m                               = 951,
	Play_Flames_PortaCabin_Large_Arson                 = 952,
	Play_Debris_ParkBench_A                            = 953,
	Play_Debris_ParkBench_C                            = 954,
	Play_Debris_ParkBench_B                            = 955,
	Play_CSA_DoorForced_Ram                            = 956,
	Play_Equip_AssaultRifle_01                         = 957,
	Play_AircraftDistant01_300m                        = 958,
	Play_Debris_ParkingMeter_A                         = 959,
	Play_Debris_ParkingMeter_B                         = 960,
	Play_Debris_ParkingMeter_C                         = 961,
	Play_VendingMachineTicket                          = 962,
	Play_Debris_PayPhone_A                             = 963,
	Play_Debris_PayPhone_C                             = 964,
	Play_Debris_PayPhone_B                             = 965,
	Play_Debris_Vending_Small_A                        = 966,
	Play_Debris_Vending_Small_B                        = 967,
	Play_Generator                                     = 968,
	Play_Equip_Magnum_01                               = 969,
	Play_Window_Office001_15m                          = 970,
	Play_Garage003_20m                                 = 971,
	Play_Shops                                         = 972,
	Play_FlagPole_35m                                  = 973,
	Play_CeremonyNegative                              = 974,
	Play_ED_Civ_Apartm_Middle                          = 975,
	Play_OneMinuteLeftPlayer                           = 976,
	Play_ED_Civ_Bars_Cafe                              = 977,
	Play_ED_Civ_WF_Bar                                 = 978,
	Play_ED_Civ_WF_Boxing                              = 979,
	Play_DoorOpen                                      = 980,
	Play_ED_Crim_Apartment_GunFights                   = 981,
	Play_CSA_BurglaryWindow_Impact                     = 982,
	Play_Equip_RocketLauncher_01                       = 983,
	Play_CSA_LockPickPocket                            = 984,
	Play_Window_Bathroom001_15m                        = 985,
	Play_WaterFall_25m                                 = 986,
	Play_ElecRadarHum                                  = 987,
	Play_ED_Blbrds_Obeya                               = 988,
	Stop_RoadNoise_PlayerCar                           = 989,
	Play_MissionWin                                    = 990,
	Play_Vignette_NewspaperDispenserInsertCoin         = 991,
	Play_ED_Civ_Slums_Junkies                          = 992,
	Play_LC_BodyGrab                                   = 993,
	Play_Generator001                                  = 994,
	Play_ED_Blbrds_Effigy                              = 995,
	Play_Window_BuildingSite001_15m                    = 996,
	Play_Explosion_Portacabin_Lg_End                   = 997,
	Play_EnforcerDept_Window001_15m                    = 998,
	Play_Vignette_GarbageMiss                          = 999,
	Play_Explosion_Grenade                             = 1000,
	Play_Flames_ShopFront_Bomb                         = 1001,
	Play_CSA_BurglaryDoor_Break                        = 1002,
	Play_GasStation_20m                                = 1003,
	Play_ChimneyLarge001_80m                           = 1004,
	Play_CarDespawnVFX                                 = 1005,
	Play_DogBarkNear001                                = 1006,
	Play_DogBarkNear002                                = 1007,
	Play_DogBarkNear003                                = 1008,
	Play_FlagPole_10m                                  = 1009,
	Play_RadioStation001_20m                           = 1010,
	Play_ED_Civ_Cafe_Inspection                        = 1011,
	Break_WeaponFire                                   = 1012,
	Play_Duct005_30m                                   = 1013,
	Play_AlarmBell                                     = 1014,
	Play_Flames_Crate_Arson                            = 1015,
	Play_CSA_BurglaryDoor_Break_Metal                  = 1016,
	Play_BankMachine_Destroy1                          = 1017,
	Play_BankMachine_Destroy2                          = 1018,
	Play_WaterSeaNear001_30m                           = 1019,
	Play_Tinitus                                       = 1020,
	Play_Flames_PortaCabin_Large_Bomb                  = 1021,
	Play_Roadnoise001                                  = 1022,
	Play_Reload_SniperRifle_01_A                       = 1023,
	Play_Reload_SniperRifle_01_B                       = 1024,
	Play_Reload_SniperRifle_01_C                       = 1025,
	Play_CSA_AmmoBox_Place                             = 1026,
	Play_BirdTweet02                                   = 1027,
	Play_BirdTweet01                                   = 1028,
	Play_CSA_BurglaryDoor_Creak_Soft                   = 1029,
	Play_CSA_BurglaryDoor_Creak                        = 1030,
	Play_Restaurant_Window001                          = 1031,
	Play_Equip_BeanBagGun_01                           = 1032,
	Play_CSA_Graffiti_CanShake                         = 1033,
	Play_RestaurantRear001_10m                         = 1034,
	Play_Hotwire_WireSpark                             = 1035,
	Play_Vent006_10m                                   = 1036,
	Play_5StarAlert                                    = 1037,
	Play_DrainSquare                                   = 1038,
	Stop_CSA_Graffiti_Spray01                          = 1039,
	Play_CSA_Hacking_OpenLid                           = 1040,
	Play_Vignette_MailBoxSlideClose                    = 1041,
	BulletSequence                                     = 1042,
	Play_Vignette_NewspaperDispenser_Fail_RattleUnit   = 1043,
	Play_PropDoor                                      = 1044,
	Play_Duct011_20m                                   = 1045,
	Play_LC_Mugged_Punched                             = 1046,
	Play_Club                                          = 1047,
	Play_Vignette_ATM_CardExit                         = 1048,
	Play_ED_Civ_Slums_Domestics                        = 1049,
	Play_OneMinuteLeftOpposition                       = 1050,
	Play_CSA_LockPickLoop                              = 1051,
	Play_DrainRect                                     = 1052,
	Play_Seagull300m                                   = 1053,
	Play_Factory018_20m                                = 1054,
	Play_AirConditionerWall                            = 1055,
	Play_Hotwire_WireSnap                              = 1056,
	Play_Flames_PortaCabin_Small_Bomb                  = 1057,
	Play_CSA_BurglaryDoor_Creak_Metal                  = 1058,
	Play_Vent011_20m                                   = 1059,
	Play_Reload_StunGun_B                              = 1060,
	Play_Reload_StunGun_A                              = 1061,
	Play_PropExtractor013_20m                          = 1062,
	Play_BarBilliards01_25m                            = 1063,
	Play_ExplosionSmall                                = 1064,
	Play_RoadNoise_RemotePlayerCars                    = 1065,
	Play_Apartment02_70m                               = 1066,
	Play_VehicleDamage13                               = 1067,
	Play_VehicleDamage14                               = 1068,
	Play_VehicleDamage15                               = 1069,
	Play_VehicleDamage16                               = 1070,
	Play_VehicleDamage17                               = 1071,
	Play_VehicleDamage18                               = 1072,
	Play_VehicleDamage19                               = 1073,
	Play_VehicleDamage20                               = 1074,
	Play_VehicleDamage21                               = 1075,
	Play_BombFlash_Defused                             = 1076,
	Play_Flames_Door_Arson                             = 1077,
	Play_Equip_SMG_01                                  = 1078,
	Play_CSA_Hacking_PocketOut                         = 1079,
	Play_ED_Civ_Apartm_Rich                            = 1080,
	Play_ED_Civ_WF_Docks                               = 1081,
	Play_Reload_HMG_01_C                               = 1082,
	Play_Reload_HMG_01_B                               = 1083,
	Play_Reload_HMG_01_A                               = 1084,
	Play_Reload_HMG_01_E                               = 1085,
	Play_Reload_HMG_01_D                               = 1086,
	Play_ED_Tan_Recruitment                            = 1087,
	Play_AmmoFlash                                     = 1088,
	Play_Flames_PortaCabin_Small_Arson                 = 1089,
	Play_Vehicle_Explode                               = 1090,
	Play_Chimney010_30m                                = 1091,
	Play_BirdTropical                                  = 1092,
	Play_Fusebox                                       = 1093,
	Play_PropLadderFoot                                = 1094,
	Stop_BombFlash                                     = 1095,
	Play_VendingMachineAmmo                            = 1096,
	Play_Equip_SnubNoseRev_01                          = 1097,
	Play_Restaurant_French                             = 1098,
	Play_Reload_AssaultRifle_01_A                      = 1099,
	Play_Reload_AssaultRifle_01_B                      = 1100,
	Play_Reload_AssaultRifle_01_C                      = 1101,
	Play_WindowOpen002                                 = 1102,
	Play_WindowOpen001                                 = 1103,
	Play_SlumEmitter003_100m                           = 1104,
	Play_Vignette_PayphonePickUp                       = 1105,
	Play_CSA_Arson_CanMove01                           = 1106,
	Play_CSA_Arson_CanPour                             = 1107,
	Play_Chimney004_10m                                = 1108,
	Play_Debris_IndustrialWheeled_Small_B              = 1109,
	Play_Debris_IndustrialWheeled_Small_A              = 1110,
	Play_Chimney007_30m                                = 1111,
	Play_CarDeployVFX                                  = 1112,
	Play_CrateTall_Destroy2                            = 1113,
	Play_CrateTall_Destroy1                            = 1114,
	Play_Chimney003_30m                                = 1115,
	Play_ShopFront_Destroy1                            = 1116,
	Play_ShopFront_Destroy2                            = 1117,
	Play_Vignette_ATM_WarningBeep                      = 1118,
	Play_Flies_Dumpster01                              = 1119,
	Play_DoorBang001                                   = 1120,
	Play_LC_BodyRoll                                   = 1121,
	Play_Chimney009_10m                                = 1122,
	Play_CSA_Hacking_PocketIn                          = 1123,
	Play_Reload_Magnum_02_A                            = 1124,
	Play_Reload_Magnum_02_C                            = 1125,
	Play_Reload_Magnum_02_B                            = 1126,
	Play_Reload_Magnum_02_D                            = 1127,
	Play_DogBarkAlley001                               = 1128,
	Play_Chimney007_20m                                = 1129,
	Play_Drips                                         = 1130,
	Play_Chimney003_20m                                = 1131,
	Play_VendingMachine15M                             = 1132,
	Play_SlumEmitter002_100m                           = 1133,
	Play_DoorOpenGeneric2                              = 1134,
	Play_DoorOpenGeneric1                              = 1135,
	Play_Vignette_NewspaperDispenserPaperTuck          = 1136,
	Play_HelicopterWithTannoy001_150m                  = 1137,
	Play_Chimney008_10m                                = 1138,
	Play_Bar002_30m                                    = 1139,
	Play_Debris_BillBoard_A                            = 1140,
	Play_BirdWingFlap02_15m                            = 1141,
	Play_PropLadderSlide4m                             = 1142,
	Play_VendingMachineVehicle                         = 1143,
	Play_LC_BodyLand                                   = 1144,
	Play_ED_Crim_Slum_Kidnap                           = 1145,
	Play_Debris_TicketMachine_A                        = 1146,
	Play_Debris_TicketMachine_B                        = 1147,
	Play_EnforcerDept_PrisonCell_15m                   = 1148,
	Play_RoofVentCurved                                = 1149,
	Play_Club002_50m                                   = 1150,
	Play_DoorOpenCompact2                              = 1151,
	Play_DoorOpenCompact1                              = 1152,
	Play_Chimney003_10m                                = 1153,
	Play_HUD_PopUp                                     = 1154,
	Play_Duct007_30m                                   = 1155,
	Play_CSA_DoorForced_Ram_Metal                      = 1156,
	Play_EnforcerDept_PCStation                        = 1157,
	Play_PropLadderSlide8m                             = 1158,
	Play_PropExtractor015_20m                          = 1159,
	Play_Chimney008_20m                                = 1160,
	Play_VendingMachineAmmo_Enf                        = 1161,
	Play_Club002_30m                                   = 1162,
	Play_Vignette_GarbagePickUp                        = 1163,
	Play_Generator005_15m                              = 1164,
	Play_ED_Blbrds_Car_Hahn                            = 1165,
	Play_Window_Slum001_15m                            = 1166,
	Play_Reload_SniperRifle_FireBoltAction             = 1167,
	Play_ED_Tan_PS_LoadingDock                         = 1168,
	Play_Vignette_PayphoneKeypad                       = 1169,
	Play_AlarmBell_Destroy                             = 1170,
	Play_TyreSquealLongitudinal                        = 1171,
	WeaponReload_ChamberRound                          = 1172,
	Play_Chimney002_10m                                = 1173,
	Play_LC_HeadOnSteeringWheel                        = 1174,
	Play_Seagull100m                                   = 1175,
	Play_AlarmElectronic                               = 1176,
	Play_PropExtractor015_30m                          = 1177,
	Play_Chimney008_30m                                = 1178,
	Play_Reload_StunShotgun_01_A                       = 1179,
	Play_Reload_StunShotgun_01_C                       = 1180,
	Play_Reload_StunShotgun_01_B                       = 1181,
	Play_Club001_100m                                  = 1182,
	Play_DoorCloseCompact2                             = 1183,
	Play_DoorCloseCompact1                             = 1184,
	Stop_Vehicle_Steam                                 = 1185,
	Stop_Vehicle_Steam01                               = 1186,
	Stop_TyreSquealLongitudinal                        = 1187,
	Play_WeaponFoley                                   = 1188,
	Play_ED_Blbrds_Sushiburger                         = 1189,
	Play_Restuarant_Indian                             = 1190,
	Play_Club001_30m                                   = 1191,
	Play_Reload_SMG_01_B                               = 1192,
	Play_Reload_SMG_01_A                               = 1193,
	Play_GroupInvite                                   = 1194,
	Play_APBBackup                                     = 1195,
	Play_RWS_NightCrickets01                           = 1196,
	Play_RWS_NightCrickets03                           = 1197,
	Play_RWS_NightCrickets02                           = 1198,
	Play_MusicTrackGarageAudition                      = 1199,
	Play_RWS_RoomAircon01                              = 1200,
	Play_RWS_NeonLight01                               = 1201,
	Play_RWS_Mus_Shops                                 = 1202,
	Play_RWS_Mus_PianoBar                              = 1203,
	Play_RWS_WaterPier_25m                             = 1204,
	Play_RWS_Sea01_50m                                 = 1205,
	Play_RWS_PierCreak                                 = 1206,
	Play_RWS_BirdWingflap01                            = 1207,
	Play_RWS_BirdWingflap02                            = 1208,
	Play_RWS_ShipBell_200m                             = 1209,
	Play_RWS_CarPodium01                               = 1210,
	Play_RWS_Bar_30m                                   = 1211,
	Play_RWS_Bar_Fridge                                = 1212,
	Play_RWS_Mus_Tattoist                              = 1213,
	Play_RWS_HeliDistant_300m                          = 1214,
	Play_RWS_BirdInsect01                              = 1215,
	Play_RWS_Ambience                                  = 1216,
	Play_RWS_Mus_Showroom                              = 1217,
	Play_RWS_BirdPigeon                                = 1218,
	Play_RWS_Trees_01                                  = 1219,
	Stop_MusicTrackGarageAudition                      = 1220,
	Play_RWS_HeliDistant_100m                          = 1221,
	Play_RWS_RoomAmb01                                 = 1222,
	Play_RWS_Mus_NightClub04                           = 1223,
	Play_RWS_Mus_NightClub01                           = 1224,
	Play_RWS_Mus_NightClub03                           = 1225,
	Play_RWS_Mus_NightClub02                           = 1226,
	Play_RWS_Woodboat_50m                              = 1227,
	Play_RWS_Woodboat_20m                              = 1228,
	Play_RWS_BirdTweet02                               = 1229,
	Play_RWS_BirdTweet01                               = 1230,
	Play_RWS_Bar_15m                                   = 1231,
	Play_RWS_BirdSeagulls01                            = 1232,
	Play_RWS_BirdSeagulls02                            = 1233,
	Play_Fountain01_40m                                = 1234,
	Play_BusStation                                    = 1235,
	Play_ShoppingMallMusic01_30m                       = 1236,
	Play_FN_AmbUrbanSlum                               = 1237,
	Play_FN_ChurchMusic_50m                            = 1238,
	Play_ConcertHall_30m                               = 1239,
	Play_FN_ChurchBell001_200m                         = 1240,
	Play_FN_Club03_30m                                 = 1241,
	Play_FN_Warehouse02_50m_01                         = 1242,
	Play_FN_TattooParlour                              = 1243,
	Play_FN_WaterSeaFar001_90m                         = 1244,
	Play_FN_ChinesePagoda                              = 1245,
	Play_FN_Warehouse04_50m_01                         = 1246,
	Play_FN_TreesWildlife02                            = 1247,
	Play_FN_TreesWildlife03                            = 1248,
	Play_FN_TreesWildlife01                            = 1249,
	Play_FN_TreesWildlife04                            = 1250,
	Play_FN_ClubRestaurant                             = 1251,
	Play_FN_CasinoEntrance001_25m                      = 1252,
	Play_SubwayPA                                      = 1253,
	Play_FN_ClubGalin                                  = 1254,
	Play_FN_Club01_30m                                 = 1255,
	Play_FN_Crane001_150m                              = 1256,
	Play_HospitalTannoy_50m                            = 1257,
	Play_FN_AlleyRubbish                               = 1258,
	Play_FN_Chimes                                     = 1259,
	Play_FN_ClubBoxing                                 = 1260,
	Play_FN_WaterSeaFar001_180m                        = 1261,
	Play_FN_AmbMidtown                                 = 1262,
	Play_FN_Construction01_200m                        = 1263,
	Play_Flames_Torch01                                = 1264,
	Play_Flames_Torch03                                = 1265,
	Play_Flames_Torch02                                = 1266,
	Play_Fountain_WaterLake                            = 1267,
	Play_FN_Warehouse03_50m_01                         = 1268,
	Play_FN_Warehouse06_50m_01                         = 1269,
	Play_FN_Club02_100m                                = 1270,
	Play_FN_AlleyCatDogs                               = 1271,
	Play_FN_WarehouseEmpty02_30m_01                    = 1272,
	Play_FN_AmbDowntown                                = 1273,
	Play_FN_Warehouse01_50m_01                         = 1274,
	Play_ShoppingMallMusic02_30m                       = 1275,
	Play_FN_TreesNoWildlife                            = 1276,
	Play_FN_Construction02_150m                        = 1277,
	Play_FN_Construction01_150m                        = 1278,
	Play_HospitalSiren                                 = 1279,
	Play_BusStationTannoy001_50m                       = 1280,
	Play_FN_AmbCitypark                                = 1281,
	Play_Subway_2D                                     = 1282,
	Play_Civicbell001_250m                             = 1283,
	Play_Fountain_20m                                  = 1284,
	Play_FN_WarehouseEmpty01_30m_01                    = 1285,
	Play_FN_ClubGym                                    = 1286,
	Play_Escalator                                     = 1287,
	Play_FN_LoadingDock01_25m_01                       = 1288,
	Play_FN_SchoolBell                                 = 1289,
	Play_FN_Warehouse05_50m_01                         = 1290,
	Play_Fountain02_40m                                = 1291,
	Play_WF_LighthouseBell001                          = 1292,
	Play_WF_WaterSeaFar001_70m                         = 1293,
	Play_WF_Dockland002_300m                           = 1294,
	Play_WF_TattooParlour                              = 1295,
	Play_WaterSeaFar001_180m                           = 1296,
	Play_WF_Dockland001_300m                           = 1297,
	Play_WF_TrainDepot001_70m                          = 1298,
	Play_WF_Rats                                       = 1299,
	Play_WF_ClubGym                                    = 1300,
	Play_WF_WarehouseEmpty01_30m                       = 1301,
	Play_WF_ShipInterior001_30m                        = 1302,
	Play_WF_Trees_02                                   = 1303,
	Play_WF_Trees_01                                   = 1304,
	Play_WF_Warehouse03_50m                            = 1305,
	Play_WF_ShoppingMall_Marina001_25m                 = 1306,
	Play_Restaurant_Mexican                            = 1307,
	Play_WF_WoodBoat                                   = 1308,
	Play_WF_WaterSeaFar001_30m                         = 1309,
	Play_WF_BoxCar05_50m                               = 1310,
	Play_WF_ShipHorn001_800m                           = 1311,
	Play_WF_Crane001_150m                              = 1312,
	Play_WF_CasinoEntrance001_25m                      = 1313,
	Play_WF_BoxCar04_50m                               = 1314,
	Play_WF_DocklandTannoy001_200m_02                  = 1315,
	Play_WF_ShipBell                                   = 1316,
	Play_WF_ClubBoxing                                 = 1317,
	Play_WF_PierCreak                                  = 1318,
	Play_WF_Warehouse04_50m                            = 1319,
	Play_WF_ShoppingMall001_25m                        = 1320,
	Play_WF_WaterSeaFar001_90m                         = 1321,
	Play_WF_AmbIndustry                                = 1322,
	Play_WF_BoxCar01_50m                               = 1323,
	Play_WF_WarehouseEmpty02_30m                       = 1324,
	Play_WF_ShoppingMall001_30m                        = 1325,
	Play_WF_AlleyCatDogs                               = 1326,
	Play_WF_TrainHornDistant001_150m                   = 1327,
	Play_WF_Warehouse02_50m                            = 1328,
	Play_WF_LoadingDock01_25m                          = 1329,
	Play_WF_ShoppingMall_Hesten001_25m                 = 1330,
	Play_WF_BoatYard001_30m                            = 1331,
	Play_WF_ShoppingMall_Hope001_25m                   = 1332,
	Play_WF_RifelRange_30m                             = 1333,
	Play_WF_Mall                                       = 1334,
	Play_WF_WaterSeaFar001_200m                        = 1335,
	Play_WF_BoxCar03_50m                               = 1336,
	Play_WF_ShipCreak001_20m                           = 1337,
	Play_WF_AlleyRubbish                               = 1338,
	Play_WF_ShipCreak001_30m                           = 1339,
	Play_WF_BoatMoored                                 = 1340,
	Play_WF_TrainDistant001_150m                       = 1341,
	Play_WF_DocklandTannoy001_200m                     = 1342,
	Play_WF_Warehouse06_50m                            = 1343,
	Play_WF_BoxCar02_50m                               = 1344,
	Play_WF_AmbDocks                                   = 1345,
	Play_WF_AmbCentre                                  = 1346,
	Play_WF_ConcertHall                                = 1347,
	Play_WF_WaterSeaFar001_50m                         = 1348,
	Play_WF_AmbResidential                             = 1349,
	Play_WF_Warehouse01_50m                            = 1350,
	Play_WF_WoodBoat_50m                               = 1351,
	Play_WF_TreesOnly                                  = 1352,
	Play_WF_Warehouse05_50m                            = 1353,
	Play_WF_TrainDistant001_300m                       = 1354,
	Play_WF_TrainHornDistant001_300m                   = 1355,
	etAudioEventTypes_MAX                              = 1356
};*/

// Enum APBGame.cAudioEnums.etAudioSwitchGroups
/*enum etAudioSwitchGroups
{
	IgnitionRequired                                   = 0,
	DisplayPointAmp                                    = 1,
	ClothingLegs                                       = 2,
	Siren                                              = 3,
	MusicPlaybackMode                                  = 4,
	ClothingFootwear                                   = 5,
	ClothingBodyAccessories                            = 6,
	LC_VehicleType                                     = 7,
	ClothingArms                                       = 8,
	Materials                                          = 9,
	Horns                                              = 10,
	VentSmall                                          = 11,
	DrainCircular                                      = 12,
	DrainPavement                                      = 13,
	Items                                              = 14,
	RoofVentCurved                                     = 15,
	DrainRect                                          = 16,
	SuspensionType                                     = 17,
	RoofVentTowerHat                                   = 18,
	Perspective                                        = 19,
	DrainSquare                                        = 20,
	VehicleAmp                                         = 21,
	Contacts                                           = 22,
	LC_Character                                       = 23,
	LC_PanicReaction                                   = 24,
	LC_DialogueReason                                  = 25,
	etAudioSwitchGroups_MAX                            = 26
};*/

// Enum APBGame.cAudioEnums.etAudioSwitchValues
/*enum etAudioSwitchValues
{
	ClothingFemale_Flats                               = 0,
	Mat_Wood_Plywood                                   = 1,
	ClothingTShirtHipHop                               = 2,
	Prop_Mat_WoodenSleeper                             = 3,
	Prop_Mat_ParkLight_Metal                           = 4,
	Mat_Roof_Copper                                    = 5,
	Mat_RailTrack                                      = 6,
	Prop_Mat_WindowsIndustrial                         = 7,
	Prop_Mat_ParkBench                                 = 8,
	SirenFire_03                                       = 9,
	SirenFire_02                                       = 10,
	SirenFire_01                                       = 11,
	SirenFire_04                                       = 12,
	Prop_Mat_Billboard                                 = 13,
	Prop_Mat_NewspaperBox_Lid                          = 14,
	Prop_Mat_CableReel_Wheeled                         = 15,
	ExecSaloon                                         = 16,
	Prop_Mat_CafeTable_Metal                           = 17,
	ClothingSkateHoodie_F                              = 18,
	Prop_Mat_WarehouseDoor                             = 19,
	Mat_Tile_Floor                                     = 20,
	ClothingCombats_Fem                                = 21,
	Prop_Mat_ConcreteCrucible                          = 22,
	Prop_Mat_Foliage_Bulky                             = 23,
	Prop_Mat_TicketBarrier_Railing                     = 24,
	Prop_Mat_PayPhone_Box                              = 25,
	Prop_Mat_ParkLight_Glass                           = 26,
	Prop_Mat_GasStationSign                            = 27,
	Prop_Mat_GarbageBag                                = 28,
	Mat_Cornice                                        = 29,
	Prop_Mat_Aerials                                   = 30,
	Prop_Mat_TreeSmall_Foliage                         = 31,
	Prop_Mat_Ramp_Gravel                               = 32,
	SirenPolice_01                                     = 33,
	SirenPolice_02                                     = 34,
	Mat_NeonStrip                                      = 35,
	Prop_Mat_Foliage_Grassy                            = 36,
	Mat_Rainscreen                                     = 37,
	VanStandard                                        = 38,
	eState                                             = 39,
	Positional                                         = 40,
	SUV                                                = 41,
	Prop_Mat_CommercialWindows                         = 42,
	Prop_Mat_ParkingMeter                              = 43,
	Mat_Glass                                          = 44,
	Prop_Mat_RoofVents_Box                             = 45,
	Prop_Mat_DestructibleGlass                         = 46,
	Prop_Mat_Yacht                                     = 47,
	NoClothingBodyAccessories                          = 48,
	Prop_Mat_StreetSign                                = 49,
	Mat_Road_Cobbles                                   = 50,
	Prop_Mat_CafeTable_Parasol                         = 51,
	ClothingEnforcementBoots                           = 52,
	ClothingUtilityBelt                                = 53,
	Prop_Mat_LightsModern                              = 54,
	Prop_Mat_Foliage_Bushy                             = 55,
	Prop_Mat_BreakableDoors_MetalSolid                 = 56,
	Prop_Mat_LoadingBayDoor                            = 57,
	Prop_Mat_ParkingBarrier_Pole                       = 58,
	Prop_Mat_GarbageCan                                = 59,
	Mat_Wood_Solid                                     = 60,
	Prop_Mat_CargoContainer                            = 61,
	Prop_Mat_Fence_Wire                                = 62,
	Prop_Mat_IndustrialAiConditioningUnit              = 63,
	Mat_Road_Pavement                                  = 64,
	Prop_Mat_DoorsResidential02                        = 65,
	Prop_Mat_DoorsResidential01                        = 66,
	Yes                                                = 67,
	ClothingHipHopTrainers                             = 68,
	Prop_Mat_Mailbox                                   = 69,
	Prop_Mat_Cleat                                     = 70,
	Prop_Mat_Skips_Large                               = 71,
	TruckCurtain                                       = 72,
	Prop_Mat_GarbageCan_Lid                            = 73,
	Prop_Mat_ArsonDoor                                 = 74,
	Prop_Mat_Clocks                                    = 75,
	ClothingRegularJeans                               = 76,
	Prop_Mat_ShopAwning                                = 77,
	ClothingLongsleevedLeatherJacketCollar             = 78,
	Mat_Tile_Granite                                   = 79,
	Prop_Mat_Escalator                                 = 80,
	ClothingTShirtEnforcement                          = 81,
	Prop_Mat_WindowsBoarded                            = 82,
	ClothingHipHopShorts                               = 83,
	Prop_Mat_GarageDoorsSegmented                      = 84,
	NoClothingLegs                                     = 85,
	Prop_Mat_Pallets_WoodenStack                       = 86,
	ClothingPullover_F                                 = 87,
	Prop_Mat_Skips                                     = 88,
	Prop_Mat_WashingLine                               = 89,
	Mat_Fabric                                         = 90,
	Prop_Mat_Fence_RustyRailing                        = 91,
	Prop_Mat_VendingMachine                            = 92,
	Mat_Road_Countryside                               = 93,
	NonPositional                                      = 94,
	Prop_Mat_BreakableDoors_MetalBar                   = 95,
	Prop_Mat_ElectricalBox                             = 96,
	Prop_Mat_Fence_IronGate                            = 97,
	Mat_Clothing                                       = 98,
	Prop_Mat_GasCylinders_Trolley                      = 99,
	ClothingLatexVest                                  = 100,
	Prop_Mat_Dumpster                                  = 101,
	Prop_Mat_CableReel_Cable                           = 102,
	Prop_Mat_InformationBooth                          = 103,
	Mat_Fence_Chain                                    = 104,
	Prop_Mat_CivicGarbageCan_Metal                     = 105,
	Prop_Mat_BoxCar                                    = 106,
	No                                                 = 107,
	Prop_Mat_NewsStand                                 = 108,
	Prop_Mat_TreeSmall_Trunk                           = 109,
	Mat_Roof_Corrugated                                = 110,
	Prop_Mat_GasStationPump                            = 111,
	Prop_Mat_ShopFrontDoors                            = 112,
	Prop_Mat_RamRaidShopFront                          = 113,
	Mat_Body                                           = 114,
	Prop_Mat_SateliteDishes                            = 115,
	Hatchback                                          = 116,
	Prop_Mat_FruitStall                                = 117,
	Prop_Mat_RoadMarkers_Upright                       = 118,
	Prop_Mat_BreakableDoors_MetalShutter               = 119,
	Mat_Rocks                                          = 120,
	Mat_Brick_LargeBlock                               = 121,
	Small                                              = 122,
	Prop_Mat_TreeLarge_Trunk                           = 123,
	Prop_Mat_CivicGarbageCan_Ashtray                   = 124,
	Prop_Mat_ChainLinkFence                            = 125,
	KingCab                                            = 126,
	Mat_Skyscraper                                     = 127,
	ClothingLeggings_Fem                               = 128,
	ClothingSuitJacket_F                               = 129,
	Prop_Mat_NewsRacksLadder                           = 130,
	Mat_Fence_Metal                                    = 131,
	ClothingCombatTrousers                             = 132,
	Prop_Mat_WindowsBroken                             = 133,
	Horn08                                             = 134,
	Horn09                                             = 135,
	Horn02                                             = 136,
	Horn03                                             = 137,
	Horn01                                             = 138,
	Horn06                                             = 139,
	Horn07                                             = 140,
	Horn04                                             = 141,
	Horn05                                             = 142,
	Horn15                                             = 143,
	Horn14                                             = 144,
	Horn11                                             = 145,
	Horn10                                             = 146,
	Horn13                                             = 147,
	Horn12                                             = 148,
	VanAmbulance                                       = 149,
	Mat_Wood_Hollow                                    = 150,
	Prop_Mat_WaterFrontSafety_Pole                     = 151,
	Prop_Mat_CardboardBox                              = 152,
	Prop_Mat_Pallets_WoodenSingle                      = 153,
	ClothingJacketHoodUp                               = 154,
	Mat_Water_Shallow                                  = 155,
	Mat_Tile_Marble                                    = 156,
	NoClothingFootwear                                 = 157,
	ClothingFemale_HighHeels                           = 158,
	Prop_Mat_BankMachine                               = 159,
	ClothingSkinnyJeans_Fem                            = 160,
	Mat_Foliage_Bush                                   = 161,
	Prop_Mat_BreakableDoors_WireFence                  = 162,
	Prop_Mat_TelephonePole                             = 163,
	Prop_Mat_VendingStand_Metal                        = 164,
	Prop_Mat_PayPhone_Base                             = 165,
	Mat_Tile_Ceramic                                   = 166,
	Mat_Stucco                                         = 167,
	Prop_Mat_WoodenCrates                              = 168,
	Mat_Wood_Slats                                     = 169,
	Prop_Mat_NewsRacksWire                             = 170,
	Prop_Mat_FireHydrant                               = 171,
	Roadster                                           = 172,
	Convertible                                        = 173,
	NoClothingArms                                     = 174,
	Prop_Mat_IndustrialWheeledUnits                    = 175,
	Prop_Mat_CivicGarbageCan_Plastic                   = 176,
	Saloon                                             = 177,
	Prop_Mat_Alarms                                    = 178,
	Prop_Mat_RoadMarkers_Cylindrical                   = 179,
	Prop_Mat_TowerCrane                                = 180,
	ClothingTShirt_F                                   = 181,
	Prop_Mat_RollUpDoor                                = 182,
	Prop_Mat_WindowsResidential02                      = 183,
	Prop_Mat_WindowsResidential01                      = 184,
	Mat_Foliage_Grass                                  = 185,
	Prop_Mat_GasCylinders                              = 186,
	ClothingShirt_F                                    = 187,
	Prop_Mat_BusShelter                                = 188,
	ClothingEnforcementFieldJacket                     = 189,
	Mat_Metal_Hollow                                   = 190,
	Prop_Mat_FencePost_Metal                           = 191,
	Mat_Plastic_Solid                                  = 192,
	Mat_Fence_Barbed                                   = 193,
	Prop_Mat_ShelfMetalRack                            = 194,
	Prop_Mat_BackDoor                                  = 195,
	ClassicMuscle                                      = 196,
	ClothingTShirtLongSleevedHipHop                    = 197,
	Prop_Mat_FireObjects_Sign                          = 198,
	Prop_Mat_RoadMarkers_Barrel                        = 199,
	Prop_Mat_TrainContainer                            = 200,
	Prop_Mat_SecurityCamera                            = 201,
	Taxi                                               = 202,
	Medium                                             = 203,
	Prop_Mat_ParkingBarrier_Indestruct                 = 204,
	Prop_Mat_TicketMachine                             = 205,
	Prop_Mat_BreakableDoors_GlassPane                  = 206,
	ClothingSilkDress_Fem                              = 207,
	Amb_2DrVan                                         = 208,
	VanArmoured                                        = 209,
	Prop_Mat_Skylight                                  = 210,
	Prop_Mat_ConstructionPipes                         = 211,
	Mat_Gravel                                         = 212,
	ClothingThighLengthTrenchCoat_F                    = 213,
	Mat_Metal_Pipe                                     = 214,
	Prop_Mat_Barrels                                   = 215,
	Prop_Mat_StreetSign_Plate                          = 216,
	Prop_Mat_Ladder                                    = 217,
	Prop_Mat_RoadMarkers_CatsEye                       = 218,
	Prop_Mat_NewsStand_Closed                          = 219,
	Prop_Mat_CafeChair_Metal                           = 220,
	ClothingBaggyJeans                                 = 221,
	Prop_Mat_Pallets_CementStack                       = 222,
	Prop_Mat_Ramp_Steel                                = 223,
	Mat_Road_Asphalt                                   = 224,
	Prop_Mat_TrainEngine                               = 225,
	Amb_2DrCoupe                                       = 226,
	LowRider                                           = 227,
	ClothingSuitTrousers                               = 228,
	Mat_Sand                                           = 229,
	JewlleryJingle                                     = 230,
	Prop_Mat_CableReel                                 = 231,
	Prop_Mat_TicketBarrier                             = 232,
	ClothingKevlar                                     = 233,
	ClothingJeans_Fem                                  = 234,
	ClothingLongsleevedJacketHooded                    = 235,
	ClothingSuitJacket                                 = 236,
	Prop_Mat_RoadMarkers_Barrier                       = 237,
	Prop_Mat_ParkingBarrier_Hanging                    = 238,
	Prop_Mat_ShopFrontTextures                         = 239,
	Prop_Mat_FireObjects                               = 240,
	Prop_Mat_WaterTower                                = 241,
	Prop_Mat_RoofVents_Tower                           = 242,
	Prop_Mat_IndustrialGenerator                       = 243,
	ClothingRegularChinos                              = 244,
	Prop_Mat_RollerShutters                            = 245,
	ClothingVestEnforcementShooting_F                  = 246,
	Prop_Mat_BackDoor_Wood                             = 247,
	Prop_Mat_ParkingBarrier_PayBox                     = 248,
	SportsSUV                                          = 249,
	Prop_Mat_Bollards                                  = 250,
	Prop_Mat_RoadMarkers_Cone                          = 251,
	Mat_Metal_Vehicle                                  = 252,
	Prop_Mat_Boxes                                     = 253,
	Prop_Mat_Tree                                      = 254,
	Prop_Mat_ResidentialPlanters                       = 255,
	Mat_Tile_Floor_Wet                                 = 256,
	Prop_Mat_TreeLarge_Foliage                         = 257,
	ClothingShoesBrogues                               = 258,
	Prop_Mat_DoorsBoarded                              = 259,
	Prop_Mat_ShopFrontPawnShop                         = 260,
	ClothingFemale_Boots                               = 261,
	Prop_Mat_StreetLight                               = 262,
	Mat_Brick                                          = 263,
	Prop_Mat_StopLights                                = 264,
	Prop_Mat_BasketballHoop                            = 265,
	Mat_Cables                                         = 266,
	Mat_Stones_Loose                                   = 267,
	Prop_Mat_Scaffolding                               = 268,
	ClothingFemale_Trainers                            = 269,
	Mat_Metal_Solid                                    = 270,
	Prop_Mat_LightsModern_Pole                         = 271,
	Pickup                                             = 272,
	Prop_Mat_Walkway_Wood                              = 273,
	Prop_Mat_Walkway_Metal                             = 274,
	LC_Default                                         = 275,
	Prop_Mat_FenceWood                                 = 276,
	Prop_Mat_WallLights_RoofLights                     = 277,
	Prop_Mat_IndustrialMachinery                       = 278,
	ClothingSmartShirt                                 = 279,
	Prop_Mat_PublicAddress                             = 280,
	Mat_Metal_Gantry                                   = 281,
	Mat_Default                                        = 282,
	Mat_Dirt                                           = 283,
	Prop_Mat_GarageDoorsCanopy                         = 284,
	Mat_Roof_Tile                                      = 285,
	Prop_Mat_BackDoor_Metal                            = 286,
	Mat_Concrete                                       = 287,
	ClothingLongOfficeSkirt_Fem                        = 288,
	ClothingEnforcementBootsStudded                    = 289,
	Prop_Mat_NewspaperBox                              = 290,
	SirenAmb_02                                        = 291,
	SirenAmb_01                                        = 292,
	Prop_Mat_GarageDoorsSliding                        = 293,
	Large                                              = 294,
	DrainSquare1                                       = 295,
	WeaponTazerShotgun                                 = 296,
	WeaponSilencedPistol                               = 297,
	WeaponBeanBagGun                                   = 298,
	DrainRect1                                         = 299,
	SuspensionCarrying                                 = 300,
	Weapon_Pole                                        = 301,
	WeaponDartGun                                      = 302,
	RoofVentTowerHatDef3                               = 303,
	RoofVentTowerHatDef2                               = 304,
	RoofVentTowerHatDef1                               = 305,
	WeaponShotgunAuto                                  = 306,
	WeaponMaceSpray                                    = 307,
	VentSmallDef2                                      = 308,
	VentSmallDef1                                      = 309,
	WeaponSemiAutoRifle                                = 310,
	NoWeapon                                           = 311,
	WeaponAssaultRifle_Criminal                        = 312,
	FirstPerson                                        = 313,
	RoofVentCurvedDef2                                 = 314,
	RoofVentCurvedDef3                                 = 315,
	RoofVentCurvedDef1                                 = 316,
	SuspensionPerformance                              = 317,
	WeaponRocketLauncher                               = 318,
	WeaponRifle_01                                     = 319,
	WeaponRifle_02                                     = 320,
	WeaponRifle_03                                     = 321,
	Weapon_BaseballBat                                 = 322,
	WeaponMagnum02                                     = 323,
	DrainPavement1                                     = 324,
	Weapon_Sword                                       = 325,
	SuspensionTruck                                    = 326,
	SuspensionVan                                      = 327,
	WeaponStunBaton                                    = 328,
	WeaponAssaultRifle_Enforcer                        = 329,
	DrainSquareDef1                                    = 330,
	WeaponSubMachineGun                                = 331,
	WeaponSniperRifle_Silenced                         = 332,
	DrainCircular1                                     = 333,
	WeaponKnife                                        = 334,
	WeaponShotgun                                      = 335,
	DrainCircularDef1                                  = 336,
	WeaponHeavyMachineGun                              = 337,
	WeaponGasCanisters                                 = 338,
	WeaponGrenadeLauncher                              = 339,
	SuspensionSUV                                      = 340,
	WeaponScaffoldingPole                              = 341,
	WeaponSemiAutoPistol                               = 342,
	Weapon_SledgeHammer                                = 343,
	TEST_Loop                                          = 344,
	TEST_Single                                        = 345,
	WeaponSmokeGrenade                                 = 346,
	ThirdPerson                                        = 347,
	SuspensionCompact                                  = 348,
	WeaponSniperRifle                                  = 349,
	WeaponSnubNoseRevolver                             = 350,
	WeaponSMG02                                        = 351,
	DrainPavementDef1                                  = 352,
	WeaponTazerGun                                     = 353,
	Weapon_NightStick                                  = 354,
	Weapon_Axe                                         = 355,
	WeaponFragGrenade                                  = 356,
	SuspensionLowRider                                 = 357,
	SuspensionDefault                                  = 358,
	WeaponBurstFirePistol                              = 359,
	WeaponMagnum                                       = 360,
	DrainRectDef1                                      = 361,
	AmpLevel05                                         = 362,
	AmpLevel04                                         = 363,
	AmpLevel01                                         = 364,
	AmpLevel03                                         = 365,
	AmpLevel02                                         = 366,
	AmpLivingCity02                                    = 367,
	AmpLivingCity01                                    = 368,
	DispatcherPT                                       = 369,
	StregaBloodrose                                    = 370,
	FS_LAM1                                            = 371,
	FS_LAM2                                            = 372,
	Chiro                                              = 373,
	Suji                                               = 374,
	NPCDeathNearby                                     = 375,
	Shot                                               = 376,
	MK_KOR1                                            = 377,
	MK_KOR2                                            = 378,
	MK_KOR3                                            = 379,
	DarrylKent                                         = 380,
	VehicleCollisionNearby                             = 381,
	Chiza                                              = 382,
	LookAtNPCPanicing                                  = 383,
	EvaOrlandez                                        = 384,
	ME_AMM                                             = 385,
	SimonTran                                          = 386,
	Javez                                              = 387,
	Run                                                = 388,
	AkikoX                                             = 389,
	FE_LAM1                                            = 390,
	StuPhoenix                                         = 391,
	MichaelSimeone                                     = 392,
	SaulLinklater                                      = 393,
	ByronBloodrose                                     = 394,
	FK_KOR3                                            = 395,
	FK_KOR2                                            = 396,
	FK_KOR1                                            = 397,
	ChungHee                                           = 398,
	TyDurrant                                          = 399,
	WilsonLeBoyce                                      = 400,
	Sofia                                              = 401,
	EventWithNoSpecificDialogue                        = 402,
	DispatcherP                                        = 403,
	BonitaBenjamin                                     = 404,
	LookAtGeneral                                      = 405,
	OrlenzMoretti                                      = 406,
	GunfireNearby                                      = 407,
	LookAtPlayer                                       = 408,
	FE_IND1                                            = 409,
	BulletImpactNearby                                 = 410,
	MirriKent                                          = 411,
	VehicleApproaching                                 = 412,
	Zombie                                             = 413,
	HeaChoi                                            = 414,
	JeungBloodrose                                     = 415,
	ME_UKS1                                            = 416,
	ExplosionNearby                                    = 417,
	LilithBloodrose                                    = 418,
	FE_CHI                                             = 419,
	JustinTeng                                         = 420,
	ME_UAF1                                            = 421,
	Cower                                              = 422,
	VioletPrentiss                                     = 423,
	VeronikaLee                                        = 424,
	FE_KOR1                                            = 425,
	LaRocha                                            = 426,
	Grissom                                            = 427,
	ArlonBenjamin                                      = 428,
	ByeongLee                                          = 429,
	CharlotteBloodrose                                 = 430,
	TerriQuan                                          = 431,
	MS_SPA3                                            = 432,
	MS_SPA1                                            = 433,
	MS_LAM2                                            = 434,
	MS_LAM3                                            = 435,
	MS_LAM1                                            = 436,
	Shift                                              = 437,
	SeungBloodrose                                     = 438,
	FM_SPA1                                            = 439,
	BritneyBloodrose                                   = 440,
	GraysonFell                                        = 441,
	LookAtDead                                         = 442,
	LookAtSiren                                        = 443,
	TyronSennet                                        = 444,
	PaganBloodrose                                     = 445,
	HarmonBenjamin                                     = 446,
	FE_AME1                                            = 447,
	FE_AME2                                            = 448,
	FE_AME3                                            = 449,
	Sabbat                                             = 450,
	FE_AFA1                                            = 451,
	ME_AFA1                                            = 452,
	FE_AUS1                                            = 453,
	DoubleB                                            = 454,
	MiguelEstebano                                     = 455,
	FE_AMJ1                                            = 456,
	DispatcherGK                                       = 457,
	DispatcherBR                                       = 458,
	KasparDanko                                        = 459,
	ME_AMI1                                            = 460,
	ME_AMJ1                                            = 461,
	ME_AME3                                            = 462,
	ME_AME2                                            = 463,
	ME_AME1                                            = 464,
	etAudioSwitchValues_MAX                            = 465
};*/

// Enum APBGame.cAudioEnums.etAudioLocEventTypes
/*enum etAudioLocEventTypes
{
	Play_Contact_Pledge_Break_Hot                      = 0,
	Cancel_LC_Mug                                      = 1,
	Play_ThemeMusicNonlinear                           = 2,
	Play_LC_MugStart                                   = 3,
	Play_Contact_GreetingKnown                         = 4,
	Play_Player_Angry                                  = 5,
	Play_Contact_Dispatch                              = 6,
	Play_Death                                         = 7,
	Play_Player_Smoke                                  = 8,
	Play_LC_EjectedUpset                               = 9,
	Play_Player_Exertion_Med                           = 10,
	Play_LC_CollidedWith                               = 11,
	Play_Player_Exertion_High                          = 12,
	Play_LC_Curse                                      = 13,
	Play_LC_Help                                       = 14,
	Play_Contact_Mission_Accepted                      = 15,
	Play_Player_Exertion_Low                           = 16,
	Play_Player_Cry                                    = 17,
	Play_Contact_GreetingLiked                         = 18,
	Stop_LC_BeingEjected                               = 19,
	Play_Player_Celebrate                              = 20,
	Play_LC_BeingEjected                               = 21,
	Play_LC_BeingEjected_Offside                       = 22,
	Play_LC_MugPunch                                   = 23,
	Stop_ThemeMusicNonlinear                           = 24,
	Play_LC_Police                                     = 25,
	Play_Player_Chuckle                                = 26,
	Play_ThemeMusic                                    = 27,
	Stop_LC_MugPunch                                   = 28,
	Play_LC_Panic_MidSequence                          = 29,
	Play_Player_Death_High                             = 30,
	Play_Contact_Dispatch_Rival                        = 31,
	Play_Contact_ResponseFaction                       = 32,
	Play_Contact_Dispatch_Bounty                       = 33,
	Play_LC_Death                                      = 34,
	Play_LC_MugEnd                                     = 35,
	Play_LC_LookAt                                     = 36,
	Stop_LC_Panic                                      = 37,
	Play_LC_MobilePhone                                = 38,
	Play_Player_Death_Low                              = 39,
	Play_Player_HurtLow                                = 40,
	Stop_ThemeMusic                                    = 41,
	Play_LC_EjectedAngryCrim                           = 42,
	Play_LC_Panic                                      = 43,
	Play_Contact_GoodbyeKnown                          = 44,
	Play_Player_HurtMed                                = 45,
	Play_LC_PunchedVehicle                             = 46,
	Play_LC_Hurt_Med                                   = 47,
	Play_LC_EjectedAngryEnf                            = 48,
	Play_Player_HurtHigh                               = 49,
	Play_Contact_Dispatch_Backup                       = 50,
	Play_LC_Ejected_Initial                            = 51,
	Play_LC_PainNudgedByCar                            = 52,
	Play_Contact_Pledge_Break_Passes                   = 53,
	Stop_LC_MobilePhone                                = 54,
	Play_LC_PainBullet                                 = 55,
	Play_Contact_ResponseLocked                        = 56,
	Play_LC_Hurt_Low                                   = 57,
	Play_Player_Shock                                  = 58,
	Stop_LC_Ejected_Initial                            = 59,
	etAudioLocEventTypes_MAX                           = 60
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class APBGame.cTaskTargetComponent
// 0x00AF (0x0108 - 0x0059)
class UcTaskTargetComponent : public UActorComponent
{
public:
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x005C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiBombTarget;                             		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                m_eTaskTargetType;                                		// 0x0064 (0x0004) [0x0000000000000000]              
	class AcTaskDescription*                           m_TaskDescription;                                		// 0x0068 (0x0004) [0x0000000000000000]              
	class AcTaskObjective*                             m_TaskObjective;                                  		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nTaskOperationID;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nTaskOperationID_Pending;                       		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bTaskItemsSpawned : 1;                          		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bOwnerHUDMarkerEnabled : 1;                     		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bOppositionHUDMarkerEnabled : 1;                		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bOwnerHUDMarkerIsBeingModified : 1;             		// 0x0078 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bOppositionHUDMarkerIsBeingModified : 1;        		// 0x0078 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bSafeSpawnLocationChecked : 1;                  		// 0x0078 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bSafeSpawnLocationFound : 1;                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bEnableSpawnLocationDebug : 1;                  		// 0x0078 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	int                                                m_nHUDMarkerID;                                   		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                m_nOppositionHUDMarkerID;                         		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eOwnerHUDMarkerState;                           		// 0x0084 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eOppositionHUDMarkerState;                      		// 0x0085 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nOwnerHUDMarkerType;                            		// 0x0086 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nOppositionHUDMarkerType;                       		// 0x0087 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eTaskTargetTriggerState;                        		// 0x0088 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePreviousTaskTargetTriggerState;                		// 0x0089 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eServerTaskTargetState;                         		// 0x008A (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eClientTaskTargetState;                         		// 0x008B (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nHUDMarkerIndex;                                		// 0x008C (0x0004) [0x0000000000000000]              
	class AcAPBPlayerController*                       m_pBomberPC;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	class AcAPBPlayerController*                       m_pDefuserPC;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_nBombState;                                     		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nBombTimer;                                     		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vecBombLocation;                                		// 0x00A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    m_pSddBombLevelInfo;                              		// 0x00AC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskTargetClass;                            		// 0x00B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskTargetType;                             		// 0x00B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddOpenWorldActivityInfo;                      		// 0x00B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_nTaskRandomSeed;                                		// 0x00BC (0x0004) [0x0000000000000000]              
	class USeqVar_Int*                                 seqVarVFX_BombLevel;                              		// 0x00C0 (0x0004) [0x0000000000000000]              
	class USeqVar_Int*                                 seqVarVFX_BombTimer;                              		// 0x00C4 (0x0004) [0x0000000000000000]              
	class USeqVar_Vector*                              seqVarVFX_BombLocation;                           		// 0x00C8 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_TaskTargetActor;                                		// 0x00CC (0x0004) [0x0000000000000000]              
	TArray< class AcAPBPlayerController* >             m_aPlayersCurrentlyAttempting;                    		// 0x00D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AcAPBPlayerController* >             m_aLastPlayersToTriggerOrReset;                   		// 0x00DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nTaskOwningSideID;                              		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTaskOpposingSideID;                            		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vecSafeSpawnLocation;                           		// 0x00F0 (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __OnTaskItemSpawned__Delegate;                    		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTargetComponent" );

		return pClassPointer;
	};

	void ClientPendingVFXUpdate ( );
	void UpdateBombTimer ( );
	void NotifyBombStateChanged ( int nBombState );
	bool IsBombExplodeTimerSet ( );
	void ClearBombExplodeTimer ( );
	void StartBombExplodeTimer ( float fDelay );
	void ClientNotifyBombTimerUpdated ( int nBombTimeRemaining );
	void ClientNotifyBombStateChanged ( int nBombState, unsigned long bAllowTransitionEffects );
	void ClientNotifyBombLocationChanged ( struct FVector vecLocation );
	class AcAPBPlayerController* RetDefuser ( );
	class AcAPBPlayerController* RetBomber ( );
	int RetBombState ( );
	bool IsBombDefused ( );
	bool IsBombExploded ( );
	bool IsBombPlanted ( );
	void DefuseBomb ( class AcAPBPlayerController* pDefuserPC );
	void PlantBomb ( class AcAPBPlayerController* pBomberPC );
	void NotifyBombDisposalSuccessful ( );
	void NotifyBombExploded ( );
	void NotifyBombFuseTriggered ( );
	class UiBombTarget* RetBombTarget ( );
	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyPVPLocked ( );
	void ClientNotifyPVPLockPending ( );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void NotifyTaskVFXStateChanged ( unsigned char eTaskTargetState );
	unsigned char RetClientTaskTargetVFXState ( );
	unsigned char RetTaskTargetVFXState ( );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	void SetTriggeredState ( unsigned char eTriggerState );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	bool IsValidUntriggeredTarget ( class AcAPBPlayerController* pPC );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	void ActivateProxyTaskTarget ( class AcTaskObjective* TaskObjective, class AActor* RealTaskTarget );
	void OnTaskItemSpawned ( class AcTaskItem* pSpawnedTaskItem );
};

UClass* UcTaskTargetComponent::pClassPointer = NULL;

// Class APBGame.cTaskTargetComponentNPC
// 0x0004 (0x010C - 0x0108)
class UcTaskTargetComponentNPC : public UcTaskTargetComponent
{
public:
	int                                                m_nTaskOperationInstanceID;                       		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTargetComponentNPC" );

		return pClassPointer;
	};

	void CleanUpTaskTarget ( );
	void DeactivateTaskTarget ( );
	void OnEndUse ( class AcAPBPlayerController* pPC, unsigned char eCSA, unsigned char eCSAState );
	bool OnBeginUse ( class APawn* User, unsigned char eCSA );
};

UClass* UcTaskTargetComponentNPC::pClassPointer = NULL;

// Class APBGame.cAPBUsableComponent
// 0x00D0 (0x0129 - 0x0059)
class UcAPBUsableComponent : public UActorComponent
{
public:
	struct FIPData                                     m_aIPData[ 0x5 ];                                 		// 0x005C (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FIPData                                     m_aPendingIPData[ 0x5 ];                          		// 0x00C0 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fCentralCachedProgress;                         		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eCentralCachedCSA;                              		// 0x0128 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBUsableComponent" );

		return pClassPointer;
	};

	void ResetAllUsers ( unsigned char eCSA );
	void ResetAllCSAUsers ( unsigned char eCSA );
	void ResetAllPendingUsers ( unsigned char eCSA );
};

UClass* UcAPBUsableComponent::pClassPointer = NULL;

// Class APBGame.cEnums
// 0x0000 (0x0040 - 0x0040)
class UcEnums : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEnums" );

		return pClassPointer;
	};

};

UClass* UcEnums::pClassPointer = NULL;

// Class APBGame.cDelegates
// 0x0030 (0x0070 - 0x0040)
class UcDelegates : public UObject
{
public:
	struct FScriptDelegate                             __OnConsumerUseRequestReceived__Delegate;         		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCarrierUseRequestReceived__Delegate;          		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnConsumerLeftZone__Delegate;                   		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCarrierLeftZone__Delegate;                    		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDelegates" );

		return pClassPointer;
	};

	void OnCarrierLeftZone ( class UiAmmoCarrier* carrier );
	void OnConsumerLeftZone ( class UiAmmoConsumer* consumer );
	bool OnCarrierUseRequestReceived ( class UiAmmoCarrier* carrier );
	bool OnConsumerUseRequestReceived ( class UiAmmoConsumer* consumer );
};

UClass* UcDelegates::pClassPointer = NULL;

// Class APBGame.cSDD
// 0x0000 (0x0040 - 0x0040)
class UcSDD : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDD" );

		return pClassPointer;
	};

	unsigned char CastYesNoEither ( int I );
	unsigned char CastWorldFaction ( int I );
	unsigned char CastWitnessingFunctionality ( int I );
	unsigned char CastWeaponImpactClass ( int I );
	unsigned char CastWeaponFiringState ( int I );
	unsigned char CastWeaponClass ( int I );
	unsigned char CastWarningPromptGroup ( int I );
	unsigned char CastVIPAssignmentMethod ( int I );
	unsigned char CastVehicleUICategory ( int I );
	unsigned char CastVehicleTempSetup ( int I );
	unsigned char CastVehicleSpecificationMethod ( int I );
	unsigned char CastVehicleSetupType ( int I );
	unsigned char CastVehiclePositionIndex ( int I );
	unsigned char CastVehicleModelClass ( int I );
	unsigned char CastVehicleInteractionAnimation ( int I );
	unsigned char CastVehicleGear ( int I );
	unsigned char CastVehicleDriveType ( int I );
	unsigned char CastVehicleDistricts ( int I );
	unsigned char CastVehicleDamageVFXState ( int I );
	unsigned char CastVehicleColour ( int I );
	unsigned char CastVehicleBatch ( int I );
	unsigned char CastTutorialType ( int I );
	unsigned char CastTutorialPosition ( int I );
	unsigned char CastTutorialBypassBehaviour ( int I );
	unsigned char CastTTIPlayerAnimType ( int I );
	unsigned char CastTTINPCEndingType ( int I );
	unsigned char CastTrackedActivityUnitConversion ( int I );
	unsigned char CastTrackedActivityOperation ( int I );
	unsigned char CastTrackedActivityFixed ( int I );
	unsigned char CastTimeofDayPeriod ( int I );
	unsigned char CastTimeOfDayAvailability ( int I );
	unsigned char CastTESProjectionInfo ( int I );
	unsigned char CastTaskTargetSpecificationMethod ( int I );
	unsigned char CastTaskTargetGraffiti ( int I );
	unsigned char CastTaskTargetClass ( int I );
	unsigned char CastTaskTargetCategory ( int I );
	unsigned char CastTaskOperationCategory ( int I );
	unsigned char CastTaskObjectiveStage ( int I );
	unsigned char CastTaskMemberRequirement ( int I );
	unsigned char CastTaskItemVisibility ( int I );
	unsigned char CastTaskItemSpecificationMethod ( int I );
	unsigned char CastTaskItemSize ( int I );
	unsigned char CastTaskItemBatch ( int I );
	unsigned char CastTaskItemAnimationType ( int I );
	unsigned char CastSpawnDestroyData ( int I );
	unsigned char CastSpawnConstant ( int I );
	unsigned char CastRCEType ( int I );
	unsigned char CastPvPType ( int I );
	unsigned char CastPvPRule ( int I );
	unsigned char CastPrimitiveType ( int I );
	unsigned char CastPopulation ( int I );
	unsigned char CastPlayerRadarPings ( int I );
	unsigned char CastPedestrianTTIReaction ( int I );
	unsigned char CastPedestrianTempSetup ( int I );
	unsigned char CastPedestrianPaletteType ( int I );
	unsigned char CastPawnHitReactionType ( int I );
	unsigned char CastPawnHitReaction_Vector2D ( int I );
	unsigned char CastPawnHitReaction_SpringList ( int I );
	unsigned char CastPawnHitReaction_Float ( int I );
	unsigned char CastPawnHitReaction_ConstrainedBoneList ( int I );
	unsigned char CastPawnHitReaction_Bool ( int I );
	unsigned char CastPawnHitReaction_BoneRemapTable ( int I );
	unsigned char CastPawnHitReaction_BoneList ( int I );
	unsigned char CastOrganisation ( int I );
	unsigned char CastOpenWorldConstant ( int I );
	unsigned char CastOnFootDeathAnimation ( int I );
	unsigned char CastNPCWorldEvent ( int I );
	unsigned char CastNPCReaction ( int I );
	unsigned char CastNPCEvent ( int I );
	unsigned char CastNPCCategory ( int I );
	unsigned char CastNameQuery ( int I );
	unsigned char CastModifierStatus ( int I );
	unsigned char CastModifierClass ( int I );
	unsigned char CastModifierCategory ( int I );
	unsigned char CastMissionUITrackedValueDisplay ( int I );
	unsigned char CastMissionUITrackedValue ( int I );
	unsigned char CastMissionResultReason ( int I );
	unsigned char CastMissionEnforcerDispatchTypes ( int I );
	unsigned char CastMissionCriminalDispatchTypes ( int I );
	unsigned char CastMedalCategory ( int I );
	unsigned char CastMarketplaceTimeLeft ( int I );
	unsigned char CastMarketplaceSort ( int I );
	unsigned char CastMarketplaceSearch ( int I );
	unsigned char CastMarketplaceListType ( int I );
	unsigned char CastMarketplaceInfo ( int I );
	unsigned char CastMarketplaceDuration ( int I );
	unsigned char CastMarketplaceConstant ( int I );
	unsigned char CastMarketplaceCashType ( int I );
	unsigned char CastMarketplaceAuctionType ( int I );
	unsigned char CastMailSort ( int I );
	unsigned char CastMailInfo ( int I );
	unsigned char CastMailDuration ( int I );
	unsigned char CastMailDetach ( int I );
	unsigned char CastMailConstant ( int I );
	unsigned char CastLocaleTypePriority ( int I );
	unsigned char CastLoadingScreenHintDomain ( int I );
	unsigned char CastLoadingMovieTransitionType ( int I );
	unsigned char CastLoadingMovieTip ( int I );
	unsigned char CastLeagueScope ( int I );
	unsigned char CastLeagueRewardType ( int I );
	unsigned char CastLeaguePeriod ( int I );
	unsigned char CastLeagueParticipants ( int I );
	unsigned char CastLeagueEntity ( int I );
	unsigned char CastLeagueCycle ( int I );
	unsigned char CastLeagueActivity ( int I );
	unsigned char CastInventoryItemSubCategory ( int I );
	unsigned char CastInventoryItemCategoryLimited ( int I );
	unsigned char CastInventoryItemCategory ( int I );
	unsigned char CastInteractiveActorType ( int I );
	unsigned char CastInteractiveActorCategory ( int I );
	unsigned char CastHUDZoneNotifier ( int I );
	unsigned char CastHUDWSCharInfo ( int I );
	unsigned char CastHUDReticule ( int I );
	unsigned char CastHUDPopUpItemRule ( int I );
	unsigned char CastHUDMessageType ( int I );
	unsigned char CastHUDMessageRank ( int I );
	unsigned char CastHUDMarkerUsage ( int I );
	unsigned char CastHUDMarkerState ( int I );
	unsigned char CastHUDMarkerCategory ( int I );
	unsigned char CastHUDInfoBrowser ( int I );
	unsigned char CastHudGroupState ( int I );
	unsigned char CastHUDConstantBool ( int I );
	unsigned char CastHUDConstant ( int I );
	unsigned char CastHUDCeremonyMsgType ( int I );
	unsigned char CastHostingConfigFileType ( int I );
	unsigned char CastHostingConfigFileCharacterPersistentId ( int I );
	unsigned char CastHostingConfigFileAccountPersistentId ( int I );
	unsigned char CastHostingConfigFile ( int I );
	unsigned char CastHeatFunctionality ( int I );
	unsigned char CastHeatConstant ( int I );
	unsigned char CastH2HAttackDir ( int I );
	unsigned char CastGraffitiInteractionType ( int I );
	unsigned char CastGenericVFXEvent ( int I );
	unsigned char CastGameplayVehicleHealthRange ( int I );
	unsigned char CastGameplayState ( int I );
	unsigned char CastGameplayObjectFixed ( int I );
	unsigned char CastGameplayEventMutuallyExclusiveGroup ( int I );
	unsigned char CastGameplayEventCategory ( int I );
	unsigned char CastGameplayEvent_VehicleHealth ( int I );
	unsigned char CastFXMaterialImpact ( int I );
	unsigned char CastFireOffset ( int I );
	unsigned char CastFeedbackMessage ( int I );
	unsigned char CastFaction ( int I );
	unsigned char CastFacialHairRandomGeneration ( int I );
	unsigned char CastErrorCode ( int I );
	unsigned char CastEncumbrance ( int I );
	unsigned char CastDistrictTypeInfo ( int I );
	unsigned char CastDistrictFirstEntry ( int I );
	unsigned char CastDisplayPointType ( int I );
	unsigned char CastDisplayPointActivationType ( int I );
	unsigned char CastDirection ( int I );
	unsigned char CastDifficultyRating ( int I );
	unsigned char CastDesignerConstant ( int I );
	unsigned char CastDeployedUsableArray ( int I );
	unsigned char CastCustomisedAssetPriority ( int I );
	unsigned char CastCSAType ( int I );
	unsigned char CastCSAState ( int I );
	unsigned char CastCSALineCheckType ( int I );
	unsigned char CastCSAInputType ( int I );
	unsigned char CastCSAEndPoint ( int I );
	unsigned char CastCSAAutoRouteType ( int I );
	unsigned char CastCSAAnimType ( int I );
	unsigned char CastCSAAnimEvent ( int I );
	unsigned char CastCSAAlignmentType ( int I );
	unsigned char CastCSA_IATState ( int I );
	unsigned char CastCrimeType ( int I );
	unsigned char CastCrimeTargetZone ( int I );
	unsigned char CastCrimeTargetType ( int I );
	unsigned char CastCrimeTargetEnvironmental ( int I );
	unsigned char CastCrimeTargetCategory ( int I );
	unsigned char CastContextSensitiveActionBase ( int I );
	unsigned char CastContactType ( int I );
	unsigned char CastClanRank ( int I );
	unsigned char CastChatState ( int I );
	unsigned char CastChatConstant ( int I );
	unsigned char CastCharacterVOIPStatus ( int I );
	unsigned char CastCharacterStatus ( int I );
	unsigned char CastCameraShakePresetExported ( int I );
	unsigned char CastCameraMode ( int I );
	unsigned char CastCameraConstant ( int I );
	unsigned char CastAPBViewportType ( int I );
	unsigned char CastAPBPawnConstant ( int I );
	unsigned char CastActivityMessageScope ( int I );
	unsigned char CastActivityMessageRelevance ( int I );
	unsigned char CastActivityMessageParameterConversion ( int I );
	unsigned char CastActivityMessageLocation ( int I );
	unsigned char CastActivityMessageExclude ( int I );
};

UClass* UcSDD::pClassPointer = NULL;

// Class APBGame.cSDDTask
// 0x0000 (0x0040 - 0x0040)
class UcSDDTask : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDTask" );

		return pClassPointer;
	};

};

UClass* UcSDDTask::pClassPointer = NULL;

// Class APBGame.cSDDItem
// 0x0000 (0x0040 - 0x0040)
class UcSDDItem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDItem" );

		return pClassPointer;
	};

};

UClass* UcSDDItem::pClassPointer = NULL;

// Class APBGame.cSDDVehicle
// 0x0000 (0x0040 - 0x0040)
class UcSDDVehicle : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDVehicle" );

		return pClassPointer;
	};

};

UClass* UcSDDVehicle::pClassPointer = NULL;

// Class APBGame.cSDDContact
// 0x0000 (0x0040 - 0x0040)
class UcSDDContact : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDContact" );

		return pClassPointer;
	};

};

UClass* UcSDDContact::pClassPointer = NULL;

// Class APBGame.cSDDTimeOfDay
// 0x0000 (0x0040 - 0x0040)
class UcSDDTimeOfDay : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDTimeOfDay" );

		return pClassPointer;
	};

};

UClass* UcSDDTimeOfDay::pClassPointer = NULL;

// Class APBGame.cSDDTaskItem
// 0x0000 (0x0040 - 0x0040)
class UcSDDTaskItem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDTaskItem" );

		return pClassPointer;
	};

};

UClass* UcSDDTaskItem::pClassPointer = NULL;

// Class APBGame.cSDDWeapon
// 0x0000 (0x0040 - 0x0040)
class UcSDDWeapon : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDWeapon" );

		return pClassPointer;
	};

};

UClass* UcSDDWeapon::pClassPointer = NULL;

// Class APBGame.cSDDPreload
// 0x0000 (0x0040 - 0x0040)
class UcSDDPreload : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDPreload" );

		return pClassPointer;
	};

};

UClass* UcSDDPreload::pClassPointer = NULL;

// Class APBGame.cSDDPawnAttachment
// 0x0000 (0x0040 - 0x0040)
class UcSDDPawnAttachment : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDPawnAttachment" );

		return pClassPointer;
	};

};

UClass* UcSDDPawnAttachment::pClassPointer = NULL;

// Class APBGame.cSDDLeague
// 0x0000 (0x0040 - 0x0040)
class UcSDDLeague : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDLeague" );

		return pClassPointer;
	};

};

UClass* UcSDDLeague::pClassPointer = NULL;

// Class APBGame.cSDDVFX
// 0x0004 (0x0044 - 0x0040)
class UcSDDVFX : public UObject
{
public:
	unsigned long                                      m_bDebugVFX : 1;                                  		// 0x0040 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bSetupSDDVFX : 1;                               		// 0x0040 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_bSetupDefaultVFX : 1;                           		// 0x0040 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDVFX" );

		return pClassPointer;
	};

};

UClass* UcSDDVFX::pClassPointer = NULL;

// Class APBGame.cSDDHeat
// 0x0000 (0x0040 - 0x0040)
class UcSDDHeat : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDHeat" );

		return pClassPointer;
	};

};

UClass* UcSDDHeat::pClassPointer = NULL;

// Class APBGame.cSDDGameplayEvent
// 0x0000 (0x0040 - 0x0040)
class UcSDDGameplayEvent : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDGameplayEvent" );

		return pClassPointer;
	};

};

UClass* UcSDDGameplayEvent::pClassPointer = NULL;

// Class APBGame.cSDDInteractionPoint
// 0x0000 (0x0040 - 0x0040)
class UcSDDInteractionPoint : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDInteractionPoint" );

		return pClassPointer;
	};

};

UClass* UcSDDInteractionPoint::pClassPointer = NULL;

// Class APBGame.cAPBPawnDeclarations
// 0x0000 (0x0040 - 0x0040)
class UcAPBPawnDeclarations : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBPawnDeclarations" );

		return pClassPointer;
	};

};

UClass* UcAPBPawnDeclarations::pClassPointer = NULL;

// Class APBGame.cGolemTypes
// 0x0000 (0x0040 - 0x0040)
class UcGolemTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGolemTypes" );

		return pClassPointer;
	};

};

UClass* UcGolemTypes::pClassPointer = NULL;

// Class APBGame.cWeaponTypes
// 0x0000 (0x0040 - 0x0040)
class UcWeaponTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWeaponTypes" );

		return pClassPointer;
	};

};

UClass* UcWeaponTypes::pClassPointer = NULL;

// Class APBGame.cGroupTypes
// 0x0000 (0x0040 - 0x0040)
class UcGroupTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGroupTypes" );

		return pClassPointer;
	};

};

UClass* UcGroupTypes::pClassPointer = NULL;

// Class APBGame.cVehicleTypes
// 0x0000 (0x0040 - 0x0040)
class UcVehicleTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleTypes" );

		return pClassPointer;
	};

};

UClass* UcVehicleTypes::pClassPointer = NULL;

// Class APBGame.cAPBInterfacesDummy
// 0x0000 (0x023C - 0x023C)
class AcAPBInterfacesDummy : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBInterfacesDummy" );

		return pClassPointer;
	};

};

UClass* AcAPBInterfacesDummy::pClassPointer = NULL;

// Class APBGame.iAmmoContainer
// 0x0000 (0x0040 - 0x0040)
class UiAmmoContainer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iAmmoContainer" );

		return pClassPointer;
	};

	int WithdrawAmmo ( int eCategory, int nAmount );
	int StoreAmmo ( int eCategory, int eTarget, int nAmount );
	bool IsAmmoCategorySupported ( int eCategory );
	bool IsEmpty ( int eCategory );
	bool IsFull ( int eCategory );
	int RetCapacity ( int eCategory );
	int RetAmmoAmount ( int eCategory );
};

UClass* UiAmmoContainer::pClassPointer = NULL;

// Class APBGame.iAmmoConsumer
// 0x0000 (0x0040 - 0x0040)
class UiAmmoConsumer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iAmmoConsumer" );

		return pClassPointer;
	};

	unsigned char RetInventoryAccessType ( );
	void NotifyEndInventoryAccess ( unsigned long bCancel );
	void NotifyBeginInventoryAccess ( unsigned char eType, class UiAmmoSupplier* supplier );
	bool IsAccessingInventory ( );
	void CancelInventoryAccess ( );
	float RetAmmoResupplyProgress ( );
	void UpdateAmmoResupplyProgress ( float fProgress );
	void NotifyEndAmmoResupply ( unsigned long bCancel );
	void NotifyBeginAmmoResupply ( class UiAmmoSupplier* supplier );
	bool IsResupplyingAmmo ( );
	void CancelAmmoResupply ( unsigned char eWeaponType );
	class AActor* RetAmmoConsumerActor ( );
	class UiAmmoSupplier* RetInteractingAmmoSupplier ( );
	unsigned char CheckCanBeginInventoryAccess ( class UiAmmoSupplier* pSupplier );
	unsigned char CheckCanBeginAmmoResupply ( );
};

UClass* UiAmmoConsumer::pClassPointer = NULL;

// Class APBGame.iAmmoSupplier
// 0x0000 (0x0040 - 0x0040)
class UiAmmoSupplier : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iAmmoSupplier" );

		return pClassPointer;
	};

	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	bool IsAmmoCarrier ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
};

UClass* UiAmmoSupplier::pClassPointer = NULL;

// Class APBGame.iAmmoCarrier
// 0x0000 (0x0040 - 0x0040)
class UiAmmoCarrier : public UiAmmoSupplier
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iAmmoCarrier" );

		return pClassPointer;
	};

	class AcAPBPlayerController* RetAmmoCarrierOwner ( );
	void SetAmmoCarrierDepotDeployed ( unsigned long bDeployed );
	bool CanDeployAmmoCarrierDepot ( );
	bool IsAmmoCarrierDepotDeployed ( );
	bool IsAmmoCarrierFnModActive ( );
};

UClass* UiAmmoCarrier::pClassPointer = NULL;

// Class APBGame.iBombTarget
// 0x0000 (0x0040 - 0x0040)
class UiBombTarget : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iBombTarget" );

		return pClassPointer;
	};

	void ClientNotifyBombTimerUpdated ( int nBombTimeRemaining );
	void ClientNotifyBombStateChanged ( int nBombState, unsigned long bAllowTransitionEffects );
	void ClientNotifyBombLocationChanged ( struct FVector vecLocation );
	class AcAPBPlayerController* RetDefuser ( );
	class AcAPBPlayerController* RetBomber ( );
	int RetBombState ( );
	bool IsBombDefused ( );
	bool IsBombExploded ( );
	bool IsBombPlanted ( );
	void DefuseBomb ( class AcAPBPlayerController* pDefuserPC );
	void PlantBomb ( class AcAPBPlayerController* pBomberPC );
	void NotifyBombDisposalSuccessful ( );
	void NotifyBombExploded ( );
	void NotifyBombFuseTriggered ( );
	class UiBombTarget* RetBombTarget ( );
};

UClass* UiBombTarget::pClassPointer = NULL;

// Class APBGame.CombatTargetingInterface
// 0x0000 (0x0040 - 0x0040)
class UCombatTargetingInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.CombatTargetingInterface" );

		return pClassPointer;
	};

	void RetExplosionOcclusionExtents ( TArray< struct FVector >* Verts, struct FVector* ExplosionLocation );
	bool IsStaticTarget ( );
	bool IsDynamicTarget ( );
	bool CanBeDamaged ( class AcAPBPlayerController* PC );
	bool CanBeTargeted ( class AcAPBPlayerController* PC );
};

UClass* UCombatTargetingInterface::pClassPointer = NULL;

// Class APBGame.iCustomisedActor
// 0x0000 (0x0040 - 0x0040)
class UiCustomisedActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iCustomisedActor" );

		return pClassPointer;
	};

	void eventCustomisationDownloadComplete ( class UcCompressedAssetCustomisation* Data, int nUserData );
};

UClass* UiCustomisedActor::pClassPointer = NULL;

// Class APBGame.DamageInterface
// 0x0000 (0x0040 - 0x0040)
class UDamageInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.DamageInterface" );

		return pClassPointer;
	};

	bool FilterHealing ( class UClass* DamageType );
	bool FilterDamage ( class UClass* DamageType );
	bool IsFiltered ( class UClass* DamageType );
	void UpdateDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void RemoveDamageType ( class UClass* DamageType );
	void AddDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void eventHealDamageTimed ( float TimePeriod, int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamageTimed ( float TimePeriod, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool eventIsSoft ( );
	bool eventIsHard ( );
	bool eventRestore ( int Amount, class AController* Healer, class UClass* DamageType );
};

UClass* UDamageInterface::pClassPointer = NULL;

// Class APBGame.iDeliverable
// 0x0000 (0x0040 - 0x0040)
class UiDeliverable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iDeliverable" );

		return pClassPointer;
	};

	void SetDeliverableHUDMarkerVisibility ( unsigned long bHideAllFromOwners, unsigned long bHideAllFromOpposition );
	unsigned char RetDeliverableState ( );
};

UClass* UiDeliverable::pClassPointer = NULL;

// Class APBGame.TaskTargetInterface
// 0x0000 (0x0040 - 0x0040)
class UTaskTargetInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.TaskTargetInterface" );

		return pClassPointer;
	};

	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
};

UClass* UTaskTargetInterface::pClassPointer = NULL;

// Class APBGame.iRepairableVehicle
// 0x0000 (0x0040 - 0x0040)
class UiRepairableVehicle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iRepairableVehicle" );

		return pClassPointer;
	};

	void UpdateVisualDamageAmounts ( );
	void SetExtremeDamageLevel ( unsigned char eDamageIndex, float fAmount );
	void SetDamageLevel ( unsigned char eDamageIndex, float fAmount );
	float RetExtremeDamageLevel ( unsigned char eDamageIndex );
	float RetDamageLevel ( unsigned char eDamageIndex );
	void OnRepairOperationUpdated ( class UiVehicleRepairer* repairer, int nCost, int nTotalCost, float fRepairPercentage );
	void OnRepairEnd ( class UiVehicleRepairer* repairer );
	void OnRepairBegin ( class UiVehicleRepairer* repairer );
	void RepairDamage ( int nAmount );
	int RetMaxRepairCost ( );
	float RetMaxRepairTimeSecs ( );
	int RetMaxHealth ( );
	int RetHealth ( );
	int RetDamageAmount ( );
	float RetDamagePercentage ( );
	class UiVehicleRepairer* RetRepairer ( );
	bool IsRepairing ( );
	float RetLastDamageTimeStamp ( );
};

UClass* UiRepairableVehicle::pClassPointer = NULL;

// Class APBGame.iVehicleRepairer
// 0x0000 (0x0040 - 0x0040)
class UiVehicleRepairer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iVehicleRepairer" );

		return pClassPointer;
	};

	void OnRepairAttributesModified ( class UiRepairableVehicle* Vehicle );
	bool IsCurrentlyRepairing ( class UiRepairableVehicle* Vehicle );
	void EndRepair ( class UiRepairableVehicle* Vehicle, unsigned long bCancel );
	bool BeginRepair ( class UiRepairableVehicle* Vehicle, class AcAPBPlayerController* payingPlayer );
	bool CanBeginRepair ( class UiRepairableVehicle* Vehicle, class AcAPBPlayerController* payingPlayer );
};

UClass* UiVehicleRepairer::pClassPointer = NULL;

// Class APBGame.UseInterface
// 0x0000 (0x0040 - 0x0040)
class UUseInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.UseInterface" );

		return pClassPointer;
	};

	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
};

UClass* UUseInterface::pClassPointer = NULL;

// Class APBGame.iNPCLookAt
// 0x0000 (0x0040 - 0x0040)
class UiNPCLookAt : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iNPCLookAt" );

		return pClassPointer;
	};

	struct FVector GetLookAtPosition ( );
	void SetLookAtPriority ( int pr_nLookAtPriority );
	int GetLookAtPriority ( );
};

UClass* UiNPCLookAt::pClassPointer = NULL;

// Class APBGame.cTaskTypes
// 0x0000 (0x0040 - 0x0040)
class UcTaskTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTypes" );

		return pClassPointer;
	};

};

UClass* UcTaskTypes::pClassPointer = NULL;

// Class APBGame.cTaskTargetTypes
// 0x0000 (0x0040 - 0x0040)
class UcTaskTargetTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTargetTypes" );

		return pClassPointer;
	};

};

UClass* UcTaskTargetTypes::pClassPointer = NULL;

// Class APBGame.cTaskDescription
// 0x02B8 (0x04F4 - 0x023C)
class AcTaskDescription : public AActor
{
public:
	unsigned char                                      m_eMovingTargetPossession;                        		// 0x023C (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_TaskStatus;                                     		// 0x023D (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nCallingForBackup;                              		// 0x023E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eMissionResult;                                 		// 0x023F (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eMissionResultReason;                           		// 0x0240 (0x0001) [0x0000000000000000]              
	struct FTaskVIPState                               m_OwningSideVIPState;                             		// 0x0244 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FTaskVIPState                               m_OpposingSideVIPState;                           		// 0x0250 (0x000C) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FtPlayerTriggerInfo >               m_aOwnerObjectiveCompletingPlayers;               		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtPlayerTriggerInfo >               m_aOppositionObjectiveCompletingPlayers;          		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGuid                                       m_GloballyUniqueID;                               		// 0x0274 (0x0010) [0x0000000000000000]              
	int                                                m_nUniqueID;                                      		// 0x0284 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nMissionTemplateID;                             		// 0x0288 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FMissionTemplate                            m_MissionTemplate;                                		// 0x028C (0x0060) [0x0000000000000000]              
	TArray< class AcTaskObjective* >                   m_OwnerObjectives;                                		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcTaskObjective* >                   m_OppositionObjectives;                           		// 0x02F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcTaskTargetAllocation* >            m_TaskTargetAllocations;                          		// 0x0304 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nOwningSideID;                                  		// 0x0310 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOpposingSideID;                                		// 0x0314 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCurrentObjective;                              		// 0x0318 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nConcurrentObjective;                           		// 0x031C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCurrentStage;                                  		// 0x0320 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nStageObjectivesCompleted;                      		// 0x0324 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nStageObjectiveCount;                           		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                m_nNextStageObjectiveIndex;                       		// 0x032C (0x0004) [0x0000000000000000]              
	int                                                m_nOwnerObjectivePoints;                          		// 0x0330 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOppositionObjectivePoints;                     		// 0x0334 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOwnerTakeouts;                                 		// 0x0338 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOppositionTakeouts;                            		// 0x033C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOwnerTakeoutLimit;                             		// 0x0340 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOppositionTakeoutLimit;                        		// 0x0344 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nVIPOwnerTakeoutLimit;                          		// 0x0348 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nVIPOppositionTakeoutLimit;                     		// 0x034C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nLargestPlayerCount;                            		// 0x0350 (0x0004) [0x0000000000000000]              
	int                                                m_nMissionTimeRemaining;                          		// 0x0354 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcTaskObjective*                             m_OwnerObjectivesMirror[ 0x28 ];                  		// 0x0358 (0x00A0) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOwnerObjectivesMirrorLength;                   		// 0x03F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcTaskObjective*                             m_OppositionObjectivesMirror[ 0x28 ];             		// 0x03FC (0x00A0) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nOppositionObjectivesMirrorLength;              		// 0x049C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nNextRandSeed;                                  		// 0x04A0 (0x0004) [0x0000000000000000]              
	int                                                m_nMissionTimeLimit;                              		// 0x04A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nTimeMissionStart;                              		// 0x04A8 (0x0004) [0x0000000000000000]              
	int                                                m_nTimeMissionEnd;                                		// 0x04AC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInstigated : 1;                                		// 0x04B0 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      m_bPendingNPCTargetRequest : 1;                   		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bPendingBeginTask : 1;                          		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bPendingBeginTaskOpposition : 1;                		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bHideAllDeliverablesFromOwners : 1;             		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bHideAllDeliverablesFromOpposition : 1;         		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bWasEndedByKills : 1;                           		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPendingOwnerTakeoutLimitReached : 1;           		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bPendingOppositionTakeoutLimitReached : 1;      		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bPendingOwnerVIPTakeoutLimitReached : 1;        		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bPendingOppositionVIPTakeoutLimitReached : 1;   		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bPendingWinOnUnopposed : 1;                     		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000800] 
	TArray< class AcTaskItemPickup* >                  m_TaskItemPickups;                                		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nAbandonTimerExpiryTime;                        		// 0x04C0 (0x0004) [0x0000000000000000]              
	struct FtMissionJustification                      m_OwnerJustification;                             		// 0x04C4 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FtMissionJustification                      m_OppositionJustification;                        		// 0x04CC (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nNextTaskTargetHUDMarkerIndex;                  		// 0x04D4 (0x0004) [0x0000000000000000]              
	TArray< class UiDeliverable* >                     m_aActiveDeliverables;                            		// 0x04D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_nObjectiveToDisplayStage;                       		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pLogInfo;                                       		// 0x04F0 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskDescription" );

		return pClassPointer;
	};

	void DelayedCallOnTaskEnded ( );
	void SimulateTimeout ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcTaskDescription::pClassPointer = NULL;

// Class APBGame.cObservers
// 0x0010 (0x0050 - 0x0040)
class UcObservers : public UObject
{
public:
	struct FPointer                                    m_aObservers;                                     		// 0x0040 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FScriptDelegate                             __OnNotify__Delegate;                             		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cObservers" );

		return pClassPointer;
	};

	void Notify ( int nMessage, int nParam );
	void Remove ( class AActor* Observer, struct FName CallbackFunctionName );
	void Add ( class AActor* Observer, struct FName CallbackFunctionName );
	void OnNotify ( int nMessage, int nParam, class AActor* Emitter );
};

UClass* UcObservers::pClassPointer = NULL;

// Class APBGame.cAPBMath
// 0x0000 (0x0040 - 0x0040)
class UcAPBMath : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBMath" );

		return pClassPointer;
	};

	void VectorQuantize ( struct FVector* inOut );
	bool RandPercentageChance ( float percentageChance, int* X );
	float RandFloatTrapezium ( float A, float B, float C, float D, int* X );
	void RandGetArrayOfUnique ( int A, int B, int Count, int* X, TArray< int >* intArray );
	bool RandUnitTests ( );
	int RandIntRange ( int A, int B, int* X );
	float RandFloatRange ( float A, float B, int* X );
	float RandFloatSigned ( int* X );
	float RandFloat ( int* X );
	int RandSeedFromClock ( );
	int RandClampSeed ( int* X );
	int RandGetMax ( );
};

UClass* UcAPBMath::pClassPointer = NULL;

// Class APBGame.APBGameInfo
// 0x0030 (0x03DC - 0x03AC)
class AAPBGameInfo : public AGameInfo
{
public:
	int                                                m_nRandomSeed;                                    		// 0x03AC (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_CollisionGroupFreeList;                         		// 0x03B0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      m_bLevelLoadsComplete : 1;                        		// 0x03B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAllowInstantPlayerRestart : 1;                 		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_bAllowGrenades : 1;                             		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      m_cfg_bEnablePlayerDataLogging : 1;               		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      m_cfg_bEnableLCDataLogging_Ped : 1;               		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      m_cfg_bEnableLCDataLogging_Vehicle : 1;           		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      m_bMatchmakingPreviousOppositionPenalty : 1;      		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      m_bMatchmakingSameFactionPenalty : 1;             		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      m_bAlwaysUseMissionCache : 1;                     		// 0x03B4 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	int                                                m_cfg_nPlayerDataLogVersion;                      		// 0x03B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPlayerPostionDataLogTime;                  		// 0x03BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPlayerDataLogFlushTime;                    		// 0x03C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fLCDataLoggingTime;                         		// 0x03C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     m_sFeedbackMessageRow;                            		// 0x03C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              m_fGameplayLoggingPeriod;                         		// 0x03D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fGameplayPeriodicLastLogTime;                   		// 0x03D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBGameInfo" );

		return pClassPointer;
	};

	bool CanPlayerInstantRestart ( );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void SetGroupLeader ( int nGroupUID, class AcAPBPlayerController* PC, int nLeaderUID );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage );
	class AcPlayerCharacterSpawnZone* GetRandomBotSpawnZone ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void PostBeginPlay ( );
	void eventCallStartMatchBase ( );
	void eventCallKilledBase ( class AController* KillerC, class AController* DeadC, class APawn* DeadPawn, class UClass* DamageType, int nWeaponType );
	void eventPostSeamlessTravel ( );
	void OnTick ( float fTimeElapsed );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void StartHumans ( );
	void ExitDistrict ( class AcAPBPlayerController* PC );
	void EnterDistrict ( class AcAPBPlayerController* PC );
	void Killed ( class AController* KillerC, class AController* DeadC, class APawn* DeadPawn, class UClass* DamageType, int nInventoryItemTypeID );
	void AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void RestartPlayer ( class AController* NewPlayer );
	void StartPlayer ( class AController* NewPlayer, class AcPlayerCharacterSpawnZone* SpawnZone );
	void StartMatchNative ( );
	bool AllowCheats ( class APlayerController* P );
	void LevelLoadsComplete ( );
	bool RetAllowGrenades ( );
	void ResetMaxRepFreqs ( );
	void OnTimerLogTaskTargets ( );
	void OnTimerPlayerLog ( );
};

UClass* AAPBGameInfo::pClassPointer = NULL;

// Class APBGame.cAPBPawnAnimation
// 0x0118 (0x053C - 0x0424)
class AcAPBPawnAnimation : public APawn
{
public:
	struct FtCarAnimation                              m_CurrentCarAnimation;                            		// 0x0424 (0x000C) [0x0000000000000000]              
	TArray< class AActor* >                            m_aInteractingWith;                               		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FAnimationRequest                           m_AnimationRequest;                               		// 0x043C (0x0020) [0x0000000000000020]              ( CPF_Net )
	struct FAnimationRequest                           m_CurrentAnimation;                               		// 0x045C (0x0020) [0x0000000000000000]              
	struct FAnimationRequest                           m_UnconfirmedPrediction;                          		// 0x047C (0x0020) [0x0000000000000000]              
	class UcInterpComponent*                           InterpComp;                                       		// 0x049C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     LastReceivedLocation;                             		// 0x04A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastReceivedRotation;                             		// 0x04AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastReceivedVelocity;                             		// 0x04B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastReceivedBase;                                 		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      LastReceivedCollideWorld : 1;                     		// 0x04C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      LastReceivedCollideActors : 1;                    		// 0x04C8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      EmoteInterrupted : 1;                             		// 0x04C8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bFastTurn : 1;                                    		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWasFiring : 1;                                   		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bWeaponWasShown : 1;                            		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bWasMirroring : 1;                              		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPendingReequipRequest : 1;                     		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bIsPlayingCosmeticReequip : 1;                  		// 0x04C8 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              FiringQuickBlendTimeToGo;                         		// 0x04CC (0x0004) [0x0000000000000000]              
	struct FRotator                                    TargetRotation;                                   		// 0x04D0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    InterpolatedRotation;                             		// 0x04DC (0x000C) [0x0000000000000000]              
	struct FRotator                                    InterpolatedAim;                                  		// 0x04E8 (0x000C) [0x0000000000000000]              
	float                                              QuickBlendTimeToGo;                               		// 0x04F4 (0x0004) [0x0000000000000000]              
	float                                              CrouchWeight;                                     		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              FallWeight;                                       		// 0x04FC (0x0004) [0x0000000000000000]              
	TArray< struct FAnimationRequest >                 ChainedEmotes;                                    		// 0x0500 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcAnimNotifyPeriod* >                m_aShowHideNotifiers;                             		// 0x050C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nNotifierTotal;                                 		// 0x0518 (0x0004) [0x0000000000000000]              
	struct FName                                       m_sNotifierSocket;                                		// 0x051C (0x0008) [0x0000000000000000]              
	float                                              m_fHideDuringMirroringCountdown;                  		// 0x0524 (0x0004) [0x0000000000000000]              
	class UAnimNode*                                   m_LastAnimRoot;                                   		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAnimNode* >                         m_aCommonAnimNodes;                               		// 0x052C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UcPlayerAnimSetup*                           m_pPlayerAnimSetup;                               		// 0x0538 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBPawnAnimation" );

		return pClassPointer;
	};

	float RetLocomotionSpeed ( unsigned char eLocomotionType );
	bool IsUsingRouteControlElement ( );
	bool IsInAnimationDrivenAction ( );
	class AActor* GetAnimationInteractingActor ( );
	class AcAnimationDrivenTrigger* GetAnimationTrigger ( );
	bool IsUsingRootMotion ( );
	class UcAnimationDescriptor* GetAnimation ( );
	void SetAnimSetup ( class UcPlayerAnimSetup* pPlayerAnimSetup );
	void ShowHideNotifier ( class UcAnimNotifyPeriod* pNotifier, unsigned long bAdd );
	void UpdateAttachmentDisplay ( );
	bool IsAnimationMirroringRequired ( );
	bool ShouldShowAttachedItem ( unsigned long bShouldShowAttachedItemForReequip );
	bool ShouldShowAttachedItemForReequip ( );
	class AcItemAttachment* RetAttachedItem ( );
	float RetFallWeight ( );
	float RetCrouchWeight ( );
	void SnapWeights ( float fQuickBlendTime );
	void UpdateWeights ( float fDeltaSeconds );
	void ResetToMainIdle ( );
	void Turntable ( struct FString sParameterName, float fValue );
	void AimInterp ( float fX, float fY );
	bool IsTurningRight ( );
	bool IsTurningLeft ( );
	struct FRotator RetInterpolatedAim ( );
	struct FRotator RetInterpolatedRotation ( );
	struct FRotator RetTargetRotation ( );
	struct FRotator GetCosmeticAim ( );
	struct FRotator GetCosmeticRotation ( );
	void SnapAnimTreeBlends ( float Blend );
	void QuickAnimTreeBlends ( );
	void SnapTurntabling ( );
	void UpdateTurntabling ( float fDeltaSeconds );
	bool IsUnconscious ( );
	struct FRotator GetWeaponAimDirn ( );
	bool GetMarksManShipMode ( );
	bool GetAimStrafeMode ( );
	class UcSkelControlTurntable* GetTurntableNode ( );
	void eventBaseChange ( );
	void eventEncroachedBy ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float fDeltaTime );
	bool InFreeCam ( );
	void AutonomousPhysicsPhysNone ( float fDeltaSeconds );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventReplicatedEvent ( struct FName sVariableName );
	struct FName AdjustSocket ( struct FName Socket );
	void eventProcessAnimationRequest ( struct FAnimationRequest Req );
	void eventNotifyAnimationEnd ( class UcAnimationDescriptor* Animation, class AcAnimationDrivenTrigger* Trigger, unsigned long bInterrupted );
	void eventStopAnimationLocal ( struct FAnimationRequest Req );
	bool eventPlayAnimationLocal ( struct FAnimationRequest Req );
	void StopEmoting ( );
	bool IsEmoting ( );
	void StopAnimation ( unsigned char ePhysicsOverride );
	void CancelPredictedAnimation ( );
	void PredictAnimationFromTrigger ( class AcAnimationDrivenTrigger* Trigger, class UcAnimationDescriptor* Animation, struct FVector StartLocation );
	void MakeAnimationRequest ( class UcAnimationDescriptor* Req, class AcAnimationDrivenTrigger* Trigger, struct FVector StartLocation, unsigned char ePhysicsOverride, unsigned char Action );
	void PlayAnimationFromDescriptor ( class UcAnimationDescriptor* Animation, unsigned long bLooping );
	void PlayAnimationFromTrigger ( class AcAnimationDrivenTrigger* Trigger, class UcAnimationDescriptor* Animation, struct FVector StartLocation );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* pSkelComp, struct FBoneAtom* outExtractedRootMotionDelta );
	bool IsPlayingCarAnimation ( );
	void eventNotifyCarDoorRequest ( class AcAPBVehicleBase* Vehicle, unsigned char eVehicleSeat, unsigned char eVehicleInteractionAnimation );
	void NotifyCarAnimationEnd ( class AcAPBVehicleBase* Vehicle, unsigned char eVehicleSeat, unsigned char eVehicleInteractionAnimation );
	void CancelCarAnimation ( float Blend );
	void PlayCarAnimation ( class AcAPBVehicleBase* Vehicle, unsigned char eVehicleSeat, unsigned char eVehicleInteractionAnimation, struct FVector StartOrEndPosition );
	void SetupCarAnimationOffsetsAndExtraMotion ( struct FName sSequenceName, unsigned long bStartAtRoot, struct FVector StartOrEndPosition );
	struct FName GetVehicleInteractionSequenceFromSDD ( unsigned char eVehiclePlayerAnimationSet, unsigned char eVehicleInteractionAnimation );
	struct FVehicleInteractionAnimation GetVehicleInteractionAnimationFromSDD ( unsigned char eVehicleInteractionAnimation );
	struct FVehiclePlayerAnimationSet GetVehiclePlayerAnimationSetFromSDD ( unsigned char eVehiclePlayerAnimationSet );
	unsigned char GetVehiclePlayerAnimationSet ( class AcAPBVehicleBase* Vehicle, unsigned char eVehicleSeat );
	void eventOnNotifyStopEquipmentCSAAnimation ( class UAnimNodeSequence* SequenceNode );
	void eventOnNotifyPlayEquipmentCSAAnimation ( class UAnimNodeSequence* SequenceNode, unsigned long bRootMotion );
	void StopEquipmentCSA ( );
	void PlayEquipmentCSAOutro ( );
	void PlayEquipmentCSA ( int eEquipmentCSAAnimType, int nSeed );
	void eventNotifyCSAAnimationEnd ( );
	void eventStopCSAAnimation ( );
	void eventPlayCSAAnimation ( struct FName sSequenceName, unsigned long bLogical );
	void PlayOnFootDeathAnimation ( unsigned char eDeathAnimation );
	void GetOnFootDeathSequence ( unsigned char eDeathAnimation, struct FOnFootDeathAnimation* SDDRow );
	void PlayThrowAnimation ( );
	void PlayPinPullAnimation ( );
	void PlaySwingAnimation ( int nCurrentAttack );
	void PlayFireAnimation ( );
	void EndInteractingWith ( );
	void SetInteractingWith ( class AcAnimationDrivenTrigger* Trigger );
	void PostBeginPlay ( );
};

UClass* AcAPBPawnAnimation::pClassPointer = NULL;

// Class APBGame.cAPBPawn
// 0x04A0 (0x09DC - 0x053C)
class AcAPBPawn : public AcAPBPawnAnimation
{
public:
	struct FPointer                                    VfTable_ICombatTargetingInterface;                		// 0x053C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiAmmoCarrier;                            		// 0x0540 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiAmmoConsumer;                           		// 0x0544 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0548 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IDamageInterface;                         		// 0x054C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiModifiable;                             		// 0x0550 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiNPCLookAt;                              		// 0x0554 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FDyingData                                  m_DyingData;                                      		// 0x0558 (0x0020) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     m_vLastExplosionLocation;                         		// 0x0578 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nLastExplosionType;                             		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHitReactionInfo                            m_HitReactionInfo;                                		// 0x0588 (0x0030) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fHitReactionBlendTimeRemaining;                 		// 0x05B8 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             m_aHitReactionBoneList;                           		// 0x05BC (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FName >                             m_aHitReactionConstrainedBoneList;                		// 0x05C8 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FName >                             m_aHitReactionSpringList;                         		// 0x05D4 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fHitReactionImpulseScale;                       		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHitReactionImpulseScaleWalking;                		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHitReactionImpulseScaleRunning;                		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHitReactionImpulseScaleSprinting;              		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHitReactionImpulseScaleLocalPlayer;            		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHitReactionBlendOutTime;                       		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHitReactionMassEffectScale;                    		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_vHitReactionMotorStrength;                      		// 0x05FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   m_vHitReactionSpringStrength;                     		// 0x0604 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEnableHitReactionBoneSprings : 1;              		// 0x060C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bHasMovedSinceLastUpdate : 1;                   		// 0x060C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bHitReactionAngleConstraintBroken : 1;          		// 0x060C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDisplayCSAProgressBar : 1;                     		// 0x060C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bIgnoreMoveInputForCSA : 1;                     		// 0x060C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bBlockCamera : 1;                               		// 0x060C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bDoingDriverEjectFromDriverSide : 1;            		// 0x060C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bSwitchingSeatToGetOut : 1;                     		// 0x060C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bSwitchingSeatToGetIn : 1;                      		// 0x060C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bEjectLaterNetInitial : 1;                      		// 0x060C (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      m_bInteractingWithVehicle : 1;                    		// 0x060C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bBlocking : 1;                                  		// 0x060C (0x0004) [0x0000000000000020] [0x00000800] ( CPF_Net )
	unsigned long                                      m_bCanBlock : 1;                                  		// 0x060C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bStunned : 1;                                   		// 0x060C (0x0004) [0x0000000000000020] [0x00002000] ( CPF_Net )
	unsigned long                                      m_bShieldHealthCanRecharge : 1;                   		// 0x060C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bStaminaCanRecharge : 1;                        		// 0x060C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bImmuneToStaminaDamage : 1;                     		// 0x060C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      m_bImmuneToDamage : 1;                            		// 0x060C (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      m_bIsResupplyingAmmo : 1;                         		// 0x060C (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	unsigned long                                      m_bShowAmmoResupplyProgressBar : 1;               		// 0x060C (0x0004) [0x0000000000000020] [0x00080000] ( CPF_Net )
	unsigned long                                      m_bIsAmmoCarrierDepotDeployed : 1;                		// 0x060C (0x0004) [0x0000000000000020] [0x00100000] ( CPF_Net )
	unsigned long                                      m_bIsAmmoCarrierFnModActive : 1;                  		// 0x060C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bWasLastResupplierAPerson : 1;                  		// 0x060C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bWasLastResupplierAVehicle : 1;                 		// 0x060C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bUnconscious : 1;                               		// 0x060C (0x0004) [0x0000000000000020] [0x01000000] ( CPF_Net )
	unsigned long                                      m_bArrested : 1;                                  		// 0x060C (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      m_bArrestedAsPVPUnlockedToAll : 1;                		// 0x060C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      m_bArrestTimeExpired : 1;                         		// 0x060C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      m_bIsVIP : 1;                                     		// 0x060C (0x0004) [0x0000000000002020] [0x10000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bPerformingUIInteraction : 1;                   		// 0x060C (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      m_bIsRunning : 1;                                 		// 0x060C (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	unsigned long                                      m_bCanRun : 1;                                    		// 0x060C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      m_bCanSprint : 1;                                 		// 0x0610 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCanCrouchMove : 1;                             		// 0x0610 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bMarksManShipMode : 1;                          		// 0x0610 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      m_bIsWinded : 1;                                  		// 0x0610 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      m_bIsCurrentlySprinting : 1;                      		// 0x0610 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bDeathAnimations : 1;                           		// 0x0610 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      m_bDebugWeaponAimDirection : 1;                   		// 0x0610 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      m_bActivateEdgeUsage : 1;                         		// 0x0610 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_replicatePendingVFX : 1;                        		// 0x0610 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bIsCustomising : 1;                             		// 0x0610 (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      m_bIsJumping : 1;                                 		// 0x0610 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_DEBUG_ShowDebugForOtherPawn : 1;                		// 0x0610 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_DEBUG_DisableIK : 1;                            		// 0x0610 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bApplyAntiCarSurfingSideForce : 1;              		// 0x0610 (0x0004) [0x0000000000000020] [0x00002000] ( CPF_Net )
	unsigned long                                      m_bAntiCarSurfingtTeleportPlayerTimer : 1;        		// 0x0610 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bWasCurrentlyCarSurfingLastUpdate : 1;          		// 0x0610 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bInAmmoZone : 1;                                		// 0x0610 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      m_bCanDoResupplyOperations : 1;                   		// 0x0610 (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      m_bStaminaExhausted : 1;                          		// 0x0610 (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	struct FVector                                     m_vOldRotation;                                   		// 0x0614 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vOldLocation;                                   		// 0x0620 (0x000C) [0x0000000000000000]              
	TArray< struct FHitReactionBoneRemap >             m_aHitReactionBoneRemapTable;                     		// 0x062C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      m_GrenadeWeaponState;                             		// 0x0638 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nStaminaRechargePercent;                        		// 0x0639 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eInventoryAccessType;                           		// 0x063A (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nMarksManShipModeRequestID;                     		// 0x063B (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nThreat;                                        		// 0x063C (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eWantsToLean;                                   		// 0x063D (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eIsLeaning;                                     		// 0x063E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eFaction;                                       		// 0x063F (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eGender;                                        		// 0x0640 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eChatState;                                     		// 0x0641 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_pendingVFX;                                     		// 0x0642 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_LocomotionOnPhysFalling;                        		// 0x0643 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_LocomotionOnPhysFallingPredicted;               		// 0x0644 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nHeatLevel;                                     		// 0x0645 (0x0001) [0x0000000000000020]              ( CPF_Net )
	struct FCSAVFXData                                 m_CSAVFXData;                                     		// 0x0648 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCSAVFXSuccess;                                 		// 0x065C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FCSAData                                    m_CurrentCSAData;                                 		// 0x0660 (0x0028) [0x0000000000000020]              ( CPF_Net )
	struct FCSAData                                    m_OldCSAData;                                     		// 0x0688 (0x0028) [0x0000000000000000]              
	struct FRotator                                    m_AimRotation;                                    		// 0x06B0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              m_LeanOutCollisionHeight;                         		// 0x06BC (0x0004) [0x0000000000000000]              
	float                                              m_LeanOutCollisionRadius;                         		// 0x06C0 (0x0004) [0x0000000000000000]              
	float                                              m_LeanOutIntersectRadius;                         		// 0x06C4 (0x0004) [0x0000000000000000]              
	class AcAPBVehicleBase*                            m_VehicleUseReplicated;                           		// 0x06C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcAPBVehicleBase*                            m_VehicleUse;                                     		// 0x06CC (0x0004) [0x0000000000000000]              
	class AcAPBVehicleBase*                            m_VehicleUseOld;                                  		// 0x06D0 (0x0004) [0x0000000000000000]              
	struct FVehicleUseData                             m_VehicleUseData;                                 		// 0x06D4 (0x0028) [0x0000000000000020]              ( CPF_Net )
	struct FVehicleUseData                             m_VehicleUseDataOld;                              		// 0x06FC (0x0028) [0x0000000000000000]              
	class AcAPBVehicleBase*                            m_LastVehicleUsed;                                		// 0x0724 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLastVehicleUsedSet;                        		// 0x0728 (0x0004) [0x0000000000000000]              
	class UcDebugPage*                                 m_MyDebugPage;                                    		// 0x072C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_MaxHealth;                                      		// 0x0730 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_HealthRemainder;                                		// 0x0734 (0x0004) [0x0000000000000000]              
	float                                              m_HealthRechargeDuration;                         		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHealthRegenerated;                             		// 0x073C (0x0004) [0x0000000000000000]              
	int                                                m_MaxShieldHealth;                                		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_ShieldHealth;                                   		// 0x0744 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              m_ShieldHealthRemainder;                          		// 0x0748 (0x0004) [0x0000000000000000]              
	float                                              m_ShieldHealthRechargeDuration;                   		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_ShieldHealthRechargeDelay;                      		// 0x0750 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_MaxStamina;                                     		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_Stamina;                                        		// 0x0758 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                m_StaminaBuffer;                                  		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_StaminaRemainder;                               		// 0x0760 (0x0004) [0x0000000000000000]              
	float                                              m_StaminaRechargeDuration;                        		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_StaminaRechargeDelay;                           		// 0x0768 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fEnableStaminaActionsFraction;                  		// 0x076C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AcAPBPlayerController*                       m_AssistLastHit;                                  		// 0x0770 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vSpawnLocation;                                 		// 0x0774 (0x000C) [0x0000000000000000]              
	float                                              m_fImmunityCheckTimeAccumulator;                  		// 0x0780 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingImmunityTime;                         		// 0x0784 (0x0004) [0x0000000000000000]              
	class UiAmmoSupplier*                              m_pInteractingAmmoSupplier;                       		// 0x0788 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x078C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              m_fAmmoResupplyProgress;                          		// 0x0790 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UcAmmoDepotComponent*                        m_AmmoCarrierDepotComponent;                      		// 0x0794 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_ArrestTime;                                     		// 0x0798 (0x0004) [0x0000000000000000]              
	float                                              m_ArrestedTimerExpiry;                            		// 0x079C (0x0004) [0x0000000000000000]              
	float                                              m_fArrestTimeRemaining;                           		// 0x07A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fWitnessableCrimeServerTimestamp;               		// 0x07A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x07A8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FStrafeFiring                               m_StrafeFiring;                                   		// 0x07AC (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              m_StrafeFiringTime;                               		// 0x07B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_StrafeReloadTime;                               		// 0x07B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UcDamageFilterComponent*                     m_DamageFilterComponent;                          		// 0x07BC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_BodyMatInst;                                    		// 0x07C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCustomisationVersion;                          		// 0x07C4 (0x0004) [0x0000000000000000]              
	int                                                m_nVehicleCustomisationVersion;                   		// 0x07C8 (0x0004) [0x0000000000000000]              
	float                                              m_fCharacterHeightFactor;                         		// 0x07CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCharacterHeightFactorNormalised;               		// 0x07D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FItemAttachmentData                         m_ItemAttachmentData;                             		// 0x07D4 (0x0018) [0x0000000000000020]              ( CPF_Net )
	struct FItemAttachmentData                         m_OldItemAttachmentData;                          		// 0x07EC (0x0018) [0x0000000000000000]              
	class AcItemAttachment*                            m_ItemAttachment;                                 		// 0x0804 (0x0004) [0x0000000000000000]              
	float                                              m_fRunningPct;                                    		// 0x0808 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCrouchRequestID;                               		// 0x080C (0x0004) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  m_LightEnvironment;                               		// 0x0810 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FCompactGolemDescriptor                     m_CustomisationGuids;                             		// 0x0814 (0x0030) [0x0000000000000020]              ( CPF_Net )
	struct FCompactGolemDescriptor                     m_PreviousCustomisationGuids;                     		// 0x0844 (0x0030) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_WeaponAimDirn;                                  		// 0x0874 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              m_CurrentAccuracy;                                		// 0x0880 (0x0004) [0x0000000000000000]              
	float                                              m_TargetAccuracy;                                 		// 0x0884 (0x0004) [0x0000000000000000]              
	float                                              m_fWindedSpeed;                                   		// 0x0888 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fWindedTime;                                    		// 0x088C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFallSpeedCauseDamage;                          		// 0x0890 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxFallSpeedScaleToDamage;                     		// 0x0894 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_FallDamageScalar;                               		// 0x0898 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_FallDamageWaterScalar;                          		// 0x089C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_FallStaminaScalar;                              		// 0x08A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_FallStaminaWaterScalar;                         		// 0x08A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_VCPRaycastClampSpeed;                           		// 0x08A8 (0x0004) [0x0000000000000000]              
	float                                              m_fSprintStaminaPart;                             		// 0x08AC (0x0004) [0x0000000000000000]              
	float                                              m_fSprintStaminaDrainPerSec;                      		// 0x08B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCrouchingStaminaRechargeScalar;                		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJumpStaminaDrain;                              		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDistanceSprinted;                              		// 0x08BC (0x0004) [0x0000000000000000]              
	class UcAudioCharacterInterface*                   m_AudioCharacterInterface;                        		// 0x08C0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fTimeOfDeath;                                   		// 0x08C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDespawnDelay;                                  		// 0x08C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fDespawnDelayMax;                               		// 0x08CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nMaxDeadRagDollPawns;                           		// 0x08D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTimeToPlayDeathAnimInVehicle;                  		// 0x08D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class URWTechReachSpec* >                  m_aRegisteredEdgeList;                            		// 0x08D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pLCBroadBoundingVolume;                         		// 0x08E4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pLCNarrowBoundingVolume;                        		// 0x08E8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nTickCount;                                     		// 0x08EC (0x0004) [0x0000000000000000]              
	float                                              m_fMinCharacterHeight;                            		// 0x08F0 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxCharacterHeight;                            		// 0x08F4 (0x0004) [0x0000000000000000]              
	float                                              m_fRunSpeed;                                      		// 0x08F8 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkSpeed;                                     		// 0x08FC (0x0004) [0x0000000000000000]              
	float                                              m_fCrouchSpeed;                                   		// 0x0900 (0x0004) [0x0000000000000000]              
	int                                                m_RemoteClientJumpAnimCount;                      		// 0x0904 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nRating;                                        		// 0x0908 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fTagetingLeanOffset;                            		// 0x090C (0x0004) [0x0000000000000000]              
	int                                                m_nControllerCharacterUID;                        		// 0x0910 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sClanName;                                      		// 0x0914 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                m_customisationRequestCount;                      		// 0x0920 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_lastCustomisationRequestCount;                  		// 0x0924 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_customisationRequestTotal;                      		// 0x0928 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_nNPCLookAtEventID;                              		// 0x092C (0x0004) [0x0000000000000000]              
	int                                                m_nNPCLookAtPriority;                             		// 0x0930 (0x0004) [0x0000000000000000]              
	int                                                m_nThrowingGrenadeWorldEventID;                   		// 0x0934 (0x0004) [0x0000000000000000]              
	struct FMissionSideInfo                            m_MissionSideInfo;                                		// 0x0938 (0x0008) [0x0000000000000020]              ( CPF_Net )
	TArray< struct UiModifiable_FModifierData >        m_aActiveModifiers;                               		// 0x0940 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AcAPBVehicleBase*                            m_RecentVehicleBase;                              		// 0x094C (0x0004) [0x0000000000000000]              
	float                                              m_fHeatAmount;                                    		// 0x0950 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FPvPFlags                                   m_PvPFlags;                                       		// 0x0954 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AcAmmoDepotTriggerVolume*                    m_CurrentAmmoVolume;                              		// 0x095C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_CurrentAmmoSupplier;                            		// 0x0960 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nMaxHeatCriminalHUDMarkerID;                    		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMaxHeatEnforcerHUDMarkerID;                    		// 0x0968 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMaxThreatHUDMarkerID;                          		// 0x096C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBPlayerController*                       m_ControllerLastConnected;                        		// 0x0970 (0x0004) [0x0000000000000000]              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x0974 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nHealthDebug;                                   		// 0x0978 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nMaxHealthDebug;                                		// 0x097C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nStaminaDebug;                                  		// 0x0980 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nMaxStaminaDebug;                               		// 0x0984 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FRecoilInfo                                 m_RecoilInfo;                                     		// 0x0988 (0x0030) [0x0000000000000000]              
	struct FScriptDelegate                             __OnPayForHeatSuccess__Delegate;                  		// 0x09B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPayForHeatFailure__Delegate;                  		// 0x09C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCSAAnimationFinished__Delegate;               		// 0x09D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBPawn" );

		return pClassPointer;
	};

	bool SourceActorAllowCameraBlockingTest ( );
	void ClientReStartNative ( );
	bool ShouldShowAttachedItem ( unsigned long bShouldShowAttachedItemForReequip );
	bool ShouldShowAttachedItemForReequip ( );
	class AcItemAttachment* RetAttachedItem ( );
	class AcAPBPlayerController* RetControllerLastConnected ( );
	void SetControllerLastConnected ( class AcAPBPlayerController* ControllerLastConnected );
	void IncrementVehicleUseID ( );
	bool DoesVehicleCollisionTakeDamage ( class AcAPBVehicleBase* APBVehicle );
	void SetLastVehicleUsed ( class AcAPBVehicleBase* APBVehicle );
	void NotifyThreatValueChanged ( );
	float GetZNormalFloorPlacePlayer ( );
	float GetDownRayPlacePlayerExtent ( );
	bool AdjustFloorPositionForHeightAndCollision ( unsigned long bAlterHeightForCollisionIfNoFindFloor, float fRayCastDown, float RayCastFromAbove, struct FVector* outVehiclePosition );
	class AcAPBVehicleBase* GetAntiCarSurfingVehicle ( );
	class AcAPBVehicleBase* GetRecentVehicleBase ( );
	bool GetApplyAntiCarSurfingSideForce ( );
	void AntiCarSurfingTeleportPlayer ( class AcAPBVehicleBase* APBVehicleBase );
	void AntiCarSurfingTeleportPlayerTimer ( );
	void AntiCarSurfingApplySideForceTimer ( );
	void IsConsideredStillCarSurfingTimer ( );
	bool IsVehicleGoingAboveCarSurfingSpeed ( class AcAPBVehicleBase* APBVehicleBaseTest );
	bool IsCurrentlyCarSurfing ( );
	float GetBailOutSpeed ( );
	void SetIsCustomising ( unsigned long bIsCustomising );
	bool RetIsCustomising ( );
	float GetSprintTolerance ( );
	void SetBaseEyeheight ( );
	void GetStaminaEncumbranceSettings ( struct FEncumbrance* EncumbranceSettings );
	void GetHoldableItemManagerEncumbranceSettings ( struct FEncumbrance* EncumbranceSettings );
	void GetMarksManShipModeEncumbranceSettings ( struct FEncumbrance* EncumbranceSettings );
	unsigned char GetLocomotionTypeInAir ( );
	void eventCallSetFiringMode ( unsigned char FiringModeNum );
	void PollEncumbranceSettings ( );
	struct FName RetRandomHitReactionBoneName ( );
	bool RetArrestedWhilstPVPUnlockedToAll ( );
	float RetArrestedTimerExpiry ( );
	float RetArrestTime ( );
	int RetMaxShieldHealth ( );
	int RetMaxStamina ( );
	int RetMaxHealth ( );
	int RetShieldHealth ( );
	int RetStaminaBuffer ( );
	int RetStamina ( );
	int RetHealth ( );
	bool IsArrested ( );
	bool IsUnconscious ( );
	void SetCameraAimRotPawn ( struct FRotator* NewRotation );
	void SetAimRotation ( struct FRotator* NewRotation );
	struct FRotator RetAimRotationScript ( );
	class ULightEnvironmentComponent* RetLightEnvironment ( );
	class AcItemAttachment* RetItemAttachment ( );
	void NotifyMarksManShipModeChanged ( );
	void NotifyCustomisationChanged ( );
	bool eventCloseDoorIfAppropriate ( class AcAPBVehicleBase* Vehicle, unsigned char ePosition );
	void ClientCancelCrouchRequest ( unsigned long bCrouch, int nCrouchRequestID );
	void ServerCrouchRequest ( unsigned long bCrouch, int nCrouchRequestID );
	bool ShouldBeAbleToCrouch ( );
	void ShouldCrouch ( unsigned long bCrouch, unsigned long bFromServer );
	float GetDefaultJumpZ ( );
	float GetAPBPawnConstantFromSDD ( unsigned char eAPBPawnConstant );
	float GetDesignerConstantFromSDD ( int eDesignerConstant );
	float RetLocomotionSpeed ( unsigned char eLocomotionType );
	void eventSetCrouchSpeed ( float fNewCrouchSpeed );
	void eventSetWalkSpeed ( float fNewWalkSpeed );
	void eventSetRunSpeed ( float fNewRunSpeed );
	void eventSetSprintSpeed ( float fNewSprintSpeed );
	class AcAPBPlayerController* GetCharacterPlayerController ( );
	void NotifyHUDExitVehicle ( unsigned long bDriver );
	void NotifyHUDEnterVehicle ( class AcAPBPawn* pPawn, class AcAPBVehicleBase* pVehicleBase );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayDebugIKController ( class AHUD* HUD, class UcAPBSkelControlLimbStrategy* IKController, float* out_YL, float* out_YPos );
	void DrawString ( class AHUD* HUD, float X, float Y, struct FString Text );
	void GetActiveAimNodes ( TArray< class UcAPBAnimNodeAimOffsetAnimSetProfile* >* aResults );
	void GetActiveSelectionNodes ( TArray< class UcAnimConfigureSelect* >* aResults );
	void GetAnimationBlendResults ( TArray< class UAnimNodeSequence* >* aResults );
	void ToggleIK ( );
	void ShowDebugForOtherPawn ( );
	bool IsAnimationMirroringRequired ( );
	float GetStandingCollisionHeight ( );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void RecentVehicleBaseChangeTimer ( );
	void eventBaseChange ( );
	void OpenDoorAndBailOutAnimNotify ( );
	void OpenDoorAndGetOutAnimNotify ( );
	void GetInAndCloseDoorAnimNotify ( );
	void CloseDoorFromInsideAnimNotify ( );
	void CloseDoorAnimNotify ( );
	void OpenDoorAnimNotify ( );
	void SwitchVehiclePositions ( unsigned char eVPISwitchTo );
	bool TryToInitiateLeaveVehicle ( unsigned long bLeaveImmediately, unsigned long bForceLeave, unsigned long bGetOut );
	bool CanInitiateEnterVehicle ( class AcAPBVehicleBase* VehicleEnter, unsigned char eVPIPositionEnter );
	void InitiateEnterVehicle ( class AcAPBVehicleBase* VehicleEnter, unsigned char eVPIPositionEnter, unsigned long bCanDriveWhenEntered, unsigned long bEnterImmediately );
	bool LeaveVehicle ( unsigned long bForceLeave, unsigned long bGetOut, unsigned long bAnimateDoorClosedIfPossible );
	bool EnterVehicle ( );
	void ResetVehicleUseData ( );
	void ChangedVehicleUseDataCleanUpFailedRouteingToVAPOrOpeningDoor ( );
	void TriggerDriverCower ( class AcAPBVehicleBase* pr_pVehicle );
	void ChangedVehicleUseDataCloseDoorIfAppropriateOldVehicleUse ( );
	void ChangedVehicleUseDataCloseDoorIfAppropriateVehicleUse ( );
	void eventChangedVehicleUseData ( );
	void eventChangedVehicleUseReplicated ( );
	void OnEndVehicleInteraction ( );
	void OnBeginVehicleInteraction ( );
	void eventNotifyCarDoorRequest ( class AcAPBVehicleBase* Vehicle, unsigned char eVehicleSeat, unsigned char eVehicleInteractionAnimation );
	void NotifyCarAnimationEnd ( class AcAPBVehicleBase* Vehicle, unsigned char eVehicleSeat, unsigned char eVehicleInteractionAnimation );
	void UpdateCurrentlySprinting ( );
	bool IsSprinting ( );
	bool IsJumping ( );
	void eventSetUnconscious ( unsigned long bUnconsciousNew );
	void SetIsWinded ( unsigned long bNewWinded );
	struct FRotator GetWeaponAimDirn ( );
	bool IsInLookBehindCamera ( );
	void eventCallClientNotifyEmoteAnimationEnd ( struct FString sEmoteName, struct FString sResultMarkup );
	void ClientNotifyEmoteAnimationEnd ( struct FString sEmoteName, struct FString sResultMarkup );
	void NotifyEmoteAnimationEnd ( class UcAnimationDescriptor* Descriptor );
	void PlayEmote ( class UcAnimationDescriptor* Descriptor, unsigned long Loop );
	bool CanPlayEmoteCommon ( );
	bool ShouldStopPlayingEmote ( );
	bool CanInitiatePlayingEmote ( );
	bool CanEnterMarksManShipMode ( );
	bool IsBlocking ( );
	bool CanBlock ( );
	bool eventCanInitiateCSARadiusCheck ( );
	bool eventCanInitiateCSA ( );
	bool CanWitness ( );
	bool CanReloadWeapon ( );
	bool CanFireWeapon ( );
	bool CanRotateCharacter ( );
	bool IsPawnImmobile ( );
	unsigned char IsCSAAnimationMirrored ( );
	void CancelCSAAutoRoute ( );
	void eventServerForceEndPerformCSA ( unsigned char eCSAState );
	bool ForceEndPerformCSA ( unsigned char eCSAState );
	bool ForceEndCSA ( unsigned char eCSAState );
	void OnTimerEndCSA ( );
	void SetEquipmentCSAAnimationData ( int eAnimIndex, unsigned char eCSAState );
	void SetTaskItemCSAAnimationData ( int eAnimIndex, unsigned char eCSAState );
	void SetCSAAnimationData ( unsigned char eCSA, int eAnimIndex, unsigned char eCSAState );
	int GetCSARand ( );
	void SetCurrentCSA ( unsigned char eCSA );
	void SetCSADataSucceeded ( );
	void SetCSADataStartOutro ( );
	void SetCSADataEnd ( unsigned char eCSAState );
	void RestoreTargetVolume ( );
	void SwitchToSmallTargetVolume ( );
	float RetItemEffectivenessModifier ( );
	int RetCurrentCSAInteractionPoint ( );
	class AActor* RetCurrentCSAInteractiveActor ( );
	void ClientOnTimerEndCSA ( );
	float RetEstimatedCSAProgress ( );
	float RetCurrentCSAProgress ( );
	float RetCSAProgressOnStart ( );
	float RetCurrentCSADuration ( );
	float RetCSADurationOnStart ( );
	bool IsPerformingCSAOutro ( );
	bool IsPerformingLogicalCSA ( );
	bool IsPerformingCSA ( );
	bool IsPerformingCSAAutoRoute ( );
	int RetCSAEquipmentAnimationType ( );
	bool IsPlayingEquipmentCSAAnimation ( );
	unsigned char RetCSAAnimationType ( );
	unsigned char RetCurrentCSA ( );
	void ClientPlayEquipmentCSACancelledVFX ( );
	void ClientPlayEquipmentCSASuccessfulVFX ( );
	void ClientPlayEquipmentCSAOutroVFX ( );
	void ClientPlayEquipmentCSALoopVFX ( int nLoopAnimationIndex );
	void ClientPlayEquipmentCSAIntroVFX ( );
	void ChangedPlayEquipmentCSAOutro ( unsigned long bCSAOutro );
	void ChangedEquipmentCSAAnimationData ( int eAnimIndex, int nSeed );
	void ChangedTaskItemCSAAnimationData ( int eAnimIndex );
	void ChangedCSAAnimationData ( unsigned char eCSA, int eAnimIndex, int nSeed );
	void ChangedCSADuration ( unsigned char eCSA, float fCSADuration, float fCSAProgress );
	void ChangedCurrentCSA ( unsigned char eCSA );
	void ChangedCurrentCSAData ( );
	void WindedTimer ( );
	void eventChangedStunned ( );
	void Stun ( );
	void StunnedTimer ( );
	void StopAnimationLocal ( struct FAnimationRequest Req );
	bool PlayAnimationLocal ( struct FAnimationRequest Req );
	void DoPlayAnimationNative ( struct FAnimationRequest Req );
	bool GetCanSprint ( );
	bool GetAimStrafeMode ( );
	void SetMarksManShipModeRequestID ( unsigned char nMarksManShipModeRequestID );
	unsigned char GetMarksManShipModeRequestID ( );
	bool GetMarksManShipMode ( );
	void SetMarksManShipMode ( unsigned char nMarksManShipModeRequestID, unsigned long bClientPredicted, unsigned long bCorrectlyPredicted, unsigned long bNewMarksManShipMode );
	void SetRunning ( unsigned long bNewIsRunning );
	void SetWalking ( unsigned long bNewIsWalking );
	void eventServerNotifyLeftVCP ( );
	bool DoJump ( unsigned long bUpdating );
	float RetUseableStamina ( );
	void OnEndADA ( );
	void OnStartADA ( float fStaminaDrain );
	void eventPlayJumpAnimation ( );
	void eventUseProp ( struct FName sUseTagName );
	void eventDetachFromPawn ( );
	void AttachToPawn ( class APawn* PawnAttach, struct FVector AttachLocation, struct FRotator AttachRotation, unsigned long bSetCollisionAndPhysics );
	void AttachToSocket ( class APawn* SocketOwner, struct FName SocketName );
	void eventStopPassenger ( class AVehicle* V, unsigned char eSeatLeaving );
	void StartPassenger ( class AcAPBVehicleBase* V );
	void eventStopDriving ( class AVehicle* V );
	void StartDriving ( class AcAPBVehicleBase* V );
	void KilledBy ( class APawn* EventInstigator );
	bool eventScriptDiedBase ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nInventoryItemTypeID );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nInventoryItemTypeID );
	void DiedCommon ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nInventoryItemTypeID );
	void RespawnNative ( );
	void ServerRespawn ( );
	void eventAskForRespawn ( );
	void eventEndCrouch ( float HeightAdjust );
	void eventStartCrouch ( float HeightAdjust );
	void UpdateMeshTranslation ( );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	void UnPossessedNative ( );
	void UnPossessed ( );
	void PossessedByNative ( class AController* C, unsigned long bVehicleTransition );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void StopAllAnimations ( );
	void eventTurnOnRagdoll ( );
	void PlayRagDollDeath ( class UClass* DamageType, struct FVector HitLoc );
	float eventRetGlobalRagdollImpulseScale ( );
	void BlendDeathAnimToRagDoll ( );
	void DeathAnimBlendToMotors ( );
	void SelectOnFootDeathAnimation ( class UClass* DamageType, struct FVector HitLoc );
	void BeginOnFootDeathSequence ( class UClass* DamageType, struct FVector HitLoc );
	float RetFallDeathMomentumScale ( );
	float RetRagdollSpeedThreshold ( );
	bool IsAlive ( );
	bool IsDead ( );
	void eventNotifyControllerCharacterUIDChanged ( );
	void BeginOnFootDeath ( class UClass* DamageType, struct FVector HitLoc );
	void eventForceLeaveVehicleAndDestroy ( );
	void eventPlayInVehicleDeathAnimation ( class AcAPBVehicleBase* Vehicle, unsigned char eVehicleSeat, unsigned long bLeanOut );
	void BeginVehicleDeath ( );
	void DefaultPlayDeath ( );
	void BeginTeleFragDeath ( );
	void BeginRespawnDeath ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	unsigned char RetDyingState ( );
	void eventChangedDyingData ( );
	void eventTornOff ( );
	void eventBodyImpactBlendOutNotify ( unsigned long bKeepPhysicsAsset );
	bool StartPhysicsBodyImpact ( struct FName HitBoneName, unsigned long bUseMotors );
	struct FName GetHitReactionRemappedBone ( struct FName InBoneName );
	struct FVector GetPhysicsImpulse ( class UClass* DamageType, struct FVector HitLoc, struct FVector Momentum, unsigned long bIsHitReaction, struct FTraceHitInfo* OutHitInfo );
	void InitHitReaction ( struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void ReplicatedPlayHitReaction ( );
	void PlayHitReaction ( class APawn* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void ServerIllegalLocation_APB ( );
	void ClientIllegalLocation_APB ( );
	float GetPawnViewHeightAdjustNoCrouch ( );
	float GetPawnViewHeightAdjust ( );
	struct FVector GetPawnViewLocation ( );
	void GetActorEyesViewPointNoCrouch ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	struct FRotator GetPassengerViewRotation ( );
	struct FRotator GetViewRotation ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_PlayerControllerRotation, struct FRotator* out_DeltaRot );
	void eventBaseChanged ( );
	void HealthDown ( );
	void HealthUp ( );
	void RenderDebugPage ( class UCanvas* Canvas );
	void eventDestroyed ( );
	unsigned char RetTaskItemAnimationType ( );
	void ChangedItemAttachmentData ( );
	void SetupItemAttachment ( );
	void RemoveItemAttachment ( );
	bool InWeaponRange ( class AActor* Target );
	void ChangedGrenadeWeaponState ( );
	void eventCallSuperReplicated ( struct FName VarName );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName sVariableName );
	void eventReplicateVFX ( unsigned char pawnVfxType );
	void PlayPendingVFX ( );
	void PostBeginPlay ( );
	void InitVFX ( );
	void PreBeginPlay ( );
	void Native_PreBeginPlay ( );
	class AcStorageInventory* RetStorageInventory ( );
	class AcHoldableItemManager* RetHoldableItemManager ( );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	bool IsModifierActiveNative ( unsigned char eCategory );
	bool GetModifierEffectNative ( unsigned char eCategory, struct FModifierEffect* OutEffect );
	bool IsInvokedCSASupported ( unsigned char eCSA, class AActor* InteractiveActor );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndInvokedCSA ( unsigned char eCSA, class AActor* InteractiveActor, unsigned char eCSAState );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginInvokedCSA ( unsigned char eCSA, class AActor* InteractiveActor );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void DropTaskItemAnimNotify ( );
	void ReceiveTaskItemAnimNotify ( );
	void PassTaskItemAnimNotify ( );
	void OpenPlayerInteractionMenu ( class AcAPBPawn* pPawn );
	void eventNotifyCSAAnimationEnd ( );
	void NotifyAnimationEnd ( class UcAnimationDescriptor* Animation, class AcAnimationDrivenTrigger* Trigger, unsigned long bInterrupted );
	void eventRegisterCSAAnimationFinishedCallback ( struct FScriptDelegate Callback );
	void OnCSAAnimationFinished ( );
	void Falling ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void OnBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	bool CanPassTaskItem ( class AcAPBPawn* Receiver );
	class AcEquipableTaskItem* eventRetCarriedTaskItem ( );
	void NotifyReceiveTaskItemFromVehicle ( class AcEquipableTaskItem* pEquipableTaskItem, class AcAPBVehicleBase* pOther );
	void NotifyReceiveTaskItemFromPlayer ( class AcEquipableTaskItem* pEquipableTaskItem, class AcAPBPawn* pOther );
	unsigned char RetCarriedTaskItemSize ( );
	bool IsCarryingLargeTaskItem ( );
	bool IsCarryingTaskItem ( );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	bool IsFiringWeapon ( );
	void OnBeginFire ( class AcWeapon* Weapon );
	bool eventIsInSeatAndIdle ( );
	bool RetTargetInVehicleFiringArc ( );
	bool RetSDDWeaponIsLessLethal ( int WeaponID );
	bool RetLeaningOutReverseAim ( );
	bool RetIsDrivingVehicle ( );
	bool RetInVehicle ( );
	bool RetLeavingVCP ( );
	bool RetEnteringVCP ( );
	bool RetEnterLeaveVCP ( );
	bool RetLeaningOutForAnimation ( );
	bool RetLeaningOut ( );
	void OnLeanInAnimEnd ( );
	void StartLeanIn ( );
	void OnLeanOutAnimEnd ( );
	void StartLeanOut ( );
	bool CanLeanIn ( );
	bool CanLeanOut ( );
	void PortLeanIn ( );
	void LeanIn ( );
	void LeanOut ( );
	bool VCPRaycastVelocityCheck ( );
	bool VCPRadiusOverlapCheck ( struct FVector VCPLocation );
	void ClearAssistingPlayer ( );
	void SetKillAssistingPlayer ( class AcAPBPlayerController* Assisting );
	void eventResumeStaminaRecharge ( );
	void ResumeShieldHealthRecharge ( );
	void StopStaminaRecharge ( );
	void PauseStaminaRecharge ( float Duration );
	bool IsShieldEnabled ( );
	bool FilterHealing ( class UClass* DamageType );
	bool FilterDamage ( class UClass* DamageType );
	bool IsFiltered ( class UClass* DamageType );
	void UpdateDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void RemoveDamageType ( class UClass* DamageType );
	void AddDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void eventHealDamageTimed ( float TimePeriod, int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamageTimed ( float TimePeriod, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool eventRestore ( int Amount, class AController* Healer, class UClass* DamageType );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	bool eventIsSoft ( );
	bool eventIsHard ( );
	bool CanTakeDamage ( int DamageAmount, class AController* EventInstigator, class UClass* DamageType, class AActor* DamageCauser, struct FVector* HitLocation, struct FVector* Momentum, struct FTraceHitInfo* HitInfo );
	float RetImmuneToStaminaDamageTime ( );
	void eventOnNotifyAggressiveAction ( );
	void EndImmuneToStaminaDamage ( );
	void eventStartImmuneToStaminaDamage ( );
	class AcItem* RetCurrentItem ( );
	void BlockingTimer ( );
	void eventClientPlaySound ( class USoundCue* ASound );
	void SetUIInteraction ( unsigned long bInteraction );
	void ClientTriggerDespawnVFX ( );
	void ClientTriggerSpawnVFX ( );
	void ClientUpdateChatStateVFX ( );
	void ClientUpdateVIPVFX ( );
	void ClientUpdateArrestedVFX ( );
	void ClientUpdateStunnedVFX ( );
	void ClientUpdateVFXOnOppositionChanged ( int nOldID, int nNewID );
	void ClientUpdateVFXOnGroupMemberLeave ( unsigned long bThisPlayerLeft );
	void ChangedVIPStatus ( );
	void eventInitArrestedExpiryTime ( );
	void ChangedArrestStatus ( );
	void ArrestRespawnQuestionCallback ( unsigned char Answer );
	void RemoveArrestRespawnQuestion ( );
	void AddArrestRespawnQuestion ( );
	void ArrestedTimer ( );
	void DebugRescue ( );
	void DebugArrest ( );
	void eventRescued ( class AcAPBPlayerController* pRescuerPC );
	void eventEndArrest ( );
	void eventTryToRescue ( );
	bool CheckRescueRespawn ( );
	void EndRescuedCSA ( unsigned char eCSAState, class AcAPBPlayerController* pRescuerPC );
	void BeginRescuedCSA ( );
	void UpdateArrestTimeRemaining ( );
	void OnRescued ( class AcAPBPlayerController* pRescuerPC );
	void OnArrested ( class AcAPBPlayerController* pArresterPC );
	void EndArrestedCSA ( unsigned char eCSAState, class AcAPBPlayerController* pArresterPC );
	void BeginArrestedCSA ( );
	float RetRemainingUnconsciousTime ( );
	float RetStaminaPercent ( );
	void eventChangedConsciousness ( );
	void RegainConsciousness ( );
	void KnockOut ( class AcAPBPlayerController* pAttacker, int nInventoryTypeID );
	void RetExplosionOcclusionExtents ( TArray< struct FVector >* Verts, struct FVector* ExplosionLocation );
	bool IsStaticTarget ( );
	bool IsDynamicTarget ( );
	bool CanBeDamaged ( class AcAPBPlayerController* PC );
	bool CanBeTargeted ( class AcAPBPlayerController* PC );
	void SetGrenadeWeaponState ( unsigned char GrenadeWeaponState );
	void SetWeaponState ( unsigned char WeaponState );
	void Native_PostBeginPlay ( );
	void eventCancelStrafeFireing ( );
	void SetStrafeFiringReloadTimer ( );
	void eventEndStrafeFiring ( );
	void StrafeFiringTimer ( );
	void ClientRemoveStrafeFiring ( int Id );
	void DebugEnterStrafeFiringState ( );
	void ServerSetStrafeFiring ( int Id );
	void eventEnterStrafeFiringState ( );
	struct FVector GetLookAtPosition ( );
	void SetLookAtPriority ( int pr_nLookAtPriority );
	int GetLookAtPriority ( );
	void eventServerNotifyPlayerClosedInventory ( );
	void ClientNotifyPlayerClosedInventory ( );
	void eventClientNotifyEndInventoryAccess ( unsigned long bCancel );
	void eventClientNotifyBeginInventoryAccess ( unsigned char eType, class AActor* pSupplier );
	unsigned char RetInventoryAccessType ( );
	void NotifyEndInventoryAccess ( unsigned long bCancel );
	void NotifyBeginInventoryAccess ( unsigned char eType, class UiAmmoSupplier* supplier );
	bool IsAccessingInventory ( );
	void NotifyEndInventoryAccessCSA ( unsigned long bCancel );
	void CancelInventoryAccess ( );
	void HideAmmoResupplyProgressBar ( );
	void ShowAmmoResupplyProgressBar ( );
	float RetAmmoResupplyProgress ( );
	void UpdateAmmoResupplyProgress ( float fProgress );
	void NotifyEndAmmoResupply ( unsigned long bCancel );
	void NotifyBeginAmmoResupply ( class UiAmmoSupplier* supplier );
	bool IsResupplyingAmmo ( );
	void CancelAmmoResupply ( unsigned char eWeaponType );
	class AActor* RetAmmoConsumerActor ( );
	class UiAmmoSupplier* RetInteractingAmmoSupplier ( );
	unsigned char CheckCanBeginInventoryAccess ( class UiAmmoSupplier* pSupplier );
	unsigned char CheckCanBeginAmmoResupply ( );
	void NotifyAmmoCarrierStatusChanged ( );
	void BeginAmmoCarrierInteraction ( unsigned char eCSA, class AcAPBPawn* pUser );
	bool CanPerformAmmoCarrierInteraction ( class AcAPBPawn* pUser );
	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	class AcAPBPlayerController* RetAmmoCarrierOwner ( );
	void SetAmmoCarrierDepotDeployed ( unsigned long bDeployed );
	bool CanDeployAmmoCarrierDepot ( );
	bool IsAmmoCarrierDepotDeployed ( );
	bool IsAmmoCarrierFnModActive ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
	void LogItemAttachmentStatus ( );
	unsigned char CanPhysicallyUseVehicleDoor ( class AcAPBVehicleBase* VehicleUse, unsigned char eVehiclePoistionUse );
	void DeRegisterWithPGEdges ( );
	void eventOnPayForHeat ( unsigned long bSuccess );
	void eventDoPayForHeat ( int nNewLevel );
	void OnPayForHeatFailure ( );
	void OnPayForHeatSuccess ( );
	bool DoPayForHeatServerNative ( int nNewLevel );
	int RetPayForHeatPrice ( int nNewLevel );
};

UClass* AcAPBPawn::pClassPointer = NULL;

// Class APBGame.cAPBDummyPawn
// 0x0014 (0x09F0 - 0x09DC)
class AcAPBDummyPawn : public AcAPBPawn
{
public:
	class APlayerController*                           m_MyController;                                   		// 0x09DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_TheRealPawn;                                    		// 0x09E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bAckFakeMove : 1;                               		// 0x09E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bSimulateControllerTraffic : 1;                 		// 0x09E4 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      m_bUseMeasuredWorkTimeToSleep : 1;                		// 0x09E4 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                m_nNumAcks;                                       		// 0x09E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nFakeWorkLoops;                                 		// 0x09EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBDummyPawn" );

		return pClassPointer;
	};

	void PostBeginPlay ( );
	class AcItem* RetCurrentItem ( );
	void FakeMoveAck ( float fFakeTimeStamp );
	void eventProcessMove ( float DeltaTime, struct FVector newAccel, struct FRotator DeltaRot );
	void MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot );
	void FakeServerUpdateViewRotation ( int View );
	void FakeServerMove ( float FakeTimeStamp, struct FVector FakeInAccel, struct FVector FakeClientLoc, unsigned char FakeMoveFlags, unsigned char FakeClientRoll, int FakeView );
	void SleepForRealServerMoveTime ( );
	void FakeServerMoveStat_End ( );
	void FakeServerMoveStat_Start ( );
	void DoSomeFakeWork ( float FakeTimeStamp, struct FVector FakeInAccel, struct FVector FakeClientLoc, unsigned char FakeMoveFlags, unsigned char FakeClientRoll, int FakeView );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nWeaponType );
	void eventTick ( float DeltaTime );
	void TakeFallingDamage ( );
	void QuickSetLocation ( struct FVector vNewLocation );
};

UClass* AcAPBDummyPawn::pClassPointer = NULL;

// Class APBGame.cInterpComponent
// 0x0018 (0x01F0 - 0x01D8)
class UcInterpComponent : public UPrimitiveComponent
{
public:
	class APrefabInstance*                             PrefabInst;                                       		// 0x01D8 (0x0004) [0x0000000000000000]              
	class USeqAct_Interp*                              InterpAction;                                     		// 0x01DC (0x0004) [0x0000000000000000]              
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x01E0 (0x0004) [0x0000000000000000]              
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x01E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPerformedPhysics : 1;                            		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              fTimeShift;                                       		// 0x01EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cInterpComponent" );

		return pClassPointer;
	};

};

UClass* UcInterpComponent::pClassPointer = NULL;

// Class APBGame.cAnimationDescriptor
// 0x0048 (0x0088 - 0x0040)
class UcAnimationDescriptor : public UObject
{
public:
	struct FName                                       m_sAnimationName;                                 		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             m_AnimationDescriptorType;                        		// 0x0048 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_AnimationDesctiptorOrdinal;                     		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UAnimSet* >                          m_AnimSets;                                       		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bUseRootMotion : 1;                             		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSnap : 1;                                      		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPreventMovement : 1;                           		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bAllowCancel : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bEmote : 1;                                     		// 0x0068 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FName                                       m_sUseTagNameOverride;                            		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPlayRate;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendInTime;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendOutTime;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eBlendOutToLocomotion;                          		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCancelImpulse;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimationDescriptor" );

		return pClassPointer;
	};

	void GetAnimationDescriptorAttributes ( struct FAnimationDescriptor* Attribs );
};

UClass* UcAnimationDescriptor::pClassPointer = NULL;

// Class APBGame.cAnimCameraShake
// 0x000C (0x0064 - 0x0058)
class UcAnimCameraShake : public UcAnimCameraNode
{
public:
	int                                                OutDrawY;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                InDrawY;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           ChildNode;                                        		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimCameraShake" );

		return pClassPointer;
	};

};

UClass* UcAnimCameraShake::pClassPointer = NULL;

// Class APBGame.cAnimNodeBlendAvoidCharacter
// 0x0010 (0x00E8 - 0x00D8)
class UcAnimNodeBlendAvoidCharacter : public UAnimNodeBlendBase
{
public:
	float                                              m_fCurrentRotation;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetRotation;                                		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              m_fMaxRotationSpeed;                              		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxRotationResetSpeed;                         		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNodeBlendAvoidCharacter" );

		return pClassPointer;
	};

};

UClass* UcAnimNodeBlendAvoidCharacter::pClassPointer = NULL;

// Class APBGame.cAnimNodeLCCustomEject
// 0x0004 (0x00F0 - 0x00EC)
class UcAnimNodeLCCustomEject : public UAnimNodePlayCustomAnim
{
public:
	unsigned long                                      m_bPauseAtEnd : 1;                                		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNodeLCCustomEject" );

		return pClassPointer;
	};

	void StopCustomAnim ( float fBlendOutTime );
	void SetPauseAtEnd ( unsigned long bPauseAtEnd );
};

UClass* UcAnimNodeLCCustomEject::pClassPointer = NULL;

// Class APBGame.cAnimNodeLCDriverOutside
// 0x0000 (0x00EC - 0x00EC)
class UcAnimNodeLCDriverOutside : public UAnimNodePlayCustomAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNodeLCDriverOutside" );

		return pClassPointer;
	};

};

UClass* UcAnimNodeLCDriverOutside::pClassPointer = NULL;

// Class APBGame.cAnimNodeLCDrivingInside
// 0x0000 (0x00EC - 0x00EC)
class UcAnimNodeLCDrivingInside : public UAnimNodePlayCustomAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNodeLCDrivingInside" );

		return pClassPointer;
	};

};

UClass* UcAnimNodeLCDrivingInside::pClassPointer = NULL;

// Class APBGame.cAnimNodePlayEquipmentCSA
// 0x0038 (0x012C - 0x00F4)
class UcAnimNodePlayEquipmentCSA : public UAnimNodeBlendList
{
public:
	class AcAPBPawn*                                   m_pPawnOwner;                                     		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      m_eCurrentCSAPhase;                               		// 0x00F8 (0x0001) [0x0000000000000000]              
	struct FName                                       m_sIntroSequence;                                 		// 0x00FC (0x0008) [0x0000000000000000]              
	struct FName                                       m_sOutroSequence;                                 		// 0x0104 (0x0008) [0x0000000000000000]              
	TArray< struct FName >                             m_aMainSequences;                                 		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bUseRootMotion : 1;                             		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nSeed;                                          		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              m_fOutroBlendTime;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fIntroBlendTime;                                		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendOutTime;                                  		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNodePlayEquipmentCSA" );

		return pClassPointer;
	};

	void OnEquipmentCSAAnimEnd ( );
	void PlayEquipmentCSAOutro ( );
	bool StopEquipmentCSA ( );
	bool PlayEquipmentCSA ( int eEquipmentCSAAnimType, int nSeed );
};

UClass* UcAnimNodePlayEquipmentCSA::pClassPointer = NULL;

// Class APBGame.cAnimNodePlayVignette
// 0x001C (0x0108 - 0x00EC)
class UcAnimNodePlayVignette : public UAnimNodePlayCustomAnim
{
public:
	TArray< struct FtVignetteSequence >                m_aSequences;                                     		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fBlendTime;                                     		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sLastVignetteName;                              		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNodePlayVignette" );

		return pClassPointer;
	};

	void StopVignette ( );
	void PlayVignette ( int nSeed, class UcVignetteDescriptor* Vignette, float fInitialPlaybackPosition );
};

UClass* UcAnimNodePlayVignette::pClassPointer = NULL;

// Class APBGame.cAnimNotify_Audio
// 0x0028 (0x0068 - 0x0040)
class UcAnimNotify_Audio : public UAnimNotify_Scripted
{
public:
	struct FEnumeratedName                             AudioEventType;                                   		// 0x0040 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxDistance;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsFootstep : 1;                                		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_iOrdinal;                                       		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FString                                     m_strArgument;                                    		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_Audio" );

		return pClassPointer;
	};

};

UClass* UcAnimNotify_Audio::pClassPointer = NULL;

// Class APBGame.cAnimNotify_AudioLCDialogue
// 0x0018 (0x0058 - 0x0040)
class UcAnimNotify_AudioLCDialogue : public UAnimNotify_Scripted
{
public:
	struct FEnumeratedName                             AudioEventType;                                   		// 0x0040 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nLCDialogueAudioEventTypeOrdinal;               		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDistance;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_AudioLCDialogue" );

		return pClassPointer;
	};

};

UClass* UcAnimNotify_AudioLCDialogue::pClassPointer = NULL;

// Class APBGame.cAnimNotify_AudioLoc
// 0x0014 (0x0054 - 0x0040)
class UcAnimNotify_AudioLoc : public UAnimNotify_Scripted
{
public:
	struct FEnumeratedName                             AudioEventType;                                   		// 0x0040 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nAudioLocAudioEventTypeOrdinal;                 		// 0x0050 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_AudioLoc" );

		return pClassPointer;
	};

};

UClass* UcAnimNotify_AudioLoc::pClassPointer = NULL;

// Class APBGame.cAnimNotify_DoorFullyOpen
// 0x0000 (0x0040 - 0x0040)
class UcAnimNotify_DoorFullyOpen : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_DoorFullyOpen" );

		return pClassPointer;
	};

};

UClass* UcAnimNotify_DoorFullyOpen::pClassPointer = NULL;

// Class APBGame.cAnimNotify_HeldObjectAnimation
// 0x0018 (0x0058 - 0x0040)
class UcAnimNotify_HeldObjectAnimation : public UAnimNotify
{
public:
	class AActor*                                      m_Archetype;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sSocketName;                                    		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sAnimationName;                                 		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAnimationLooping : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_HeldObjectAnimation" );

		return pClassPointer;
	};

};

UClass* UcAnimNotify_HeldObjectAnimation::pClassPointer = NULL;

// Class APBGame.cAnimNotify_LookAtDisable
// 0x0000 (0x0040 - 0x0040)
class UcAnimNotify_LookAtDisable : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_LookAtDisable" );

		return pClassPointer;
	};

};

UClass* UcAnimNotify_LookAtDisable::pClassPointer = NULL;

// Class APBGame.cAnimNotify_LookAtEnable
// 0x0000 (0x0040 - 0x0040)
class UcAnimNotify_LookAtEnable : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_LookAtEnable" );

		return pClassPointer;
	};

};

UClass* UcAnimNotify_LookAtEnable::pClassPointer = NULL;

// Class APBGame.cAnimNotifyActiveInterface
// 0x0000 (0x0040 - 0x0040)
class UcAnimNotifyActiveInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyActiveInterface" );

		return pClassPointer;
	};

	void NotifyInactive ( );
	void NotifyActive ( unsigned long bIsEditorPreview );
};

UClass* UcAnimNotifyActiveInterface::pClassPointer = NULL;

// Class APBGame.cAnimNotifyLogical_CarDoorRequest
// 0x0000 (0x0040 - 0x0040)
class UcAnimNotifyLogical_CarDoorRequest : public UcAnimNotifyLogical
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyLogical_CarDoorRequest" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotifyLogical_CarDoorRequest::pClassPointer = NULL;

// Class APBGame.cAnimNotifyLogical_ContactPoint
// 0x0020 (0x0060 - 0x0040)
class UcAnimNotifyLogical_ContactPoint : public UcAnimNotifyLogical
{
public:
	struct FName                                       m_sContactBoneName;                               		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_RootMotionOffset;                               		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_ConstantOffset;                                 		// 0x0054 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyLogical_ContactPoint" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotifyLogical_ContactPoint::pClassPointer = NULL;

// Class APBGame.cAnimNotifyLogical_CSA
// 0x0001 (0x0041 - 0x0040)
class UcAnimNotifyLogical_CSA : public UcAnimNotifyLogical
{
public:
	unsigned char                                      m_eCSAAnimEvent;                                  		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyLogical_CSA" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotifyLogical_CSA::pClassPointer = NULL;

// Class APBGame.cAnimNotifyLogical_RMThreshold
// 0x000C (0x004C - 0x0040)
class UcAnimNotifyLogical_RMThreshold : public UcAnimNotifyLogical
{
public:
	struct FVector                                     RootMotionThreshold;                              		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyLogical_RMThreshold" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotifyLogical_RMThreshold::pClassPointer = NULL;

// Class APBGame.cAnimNotifyPeriod
// 0x0008 (0x0048 - 0x0040)
class UcAnimNotifyPeriod : public UAnimNotify
{
public:
	float                                              m_fDuration;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEntireSequence : 1;                            		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bEndPeriodOnBlendOut : 1;                       		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyPeriod" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyPeriod::pClassPointer = NULL;

// Class APBGame.cAnimNotifyPeriod_HeightAdjustment
// 0x0010 (0x0058 - 0x0048)
class UcAnimNotifyPeriod_HeightAdjustment : public UcAnimNotifyPeriod
{
public:
	struct FName                                       m_sMatchBoneName;                                 		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fEaseInTime;                                    		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fEaseOutTime;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyPeriod_HeightAdjustment" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyPeriod_HeightAdjustment::pClassPointer = NULL;

// Class APBGame.cAnimNotifyPeriod_HeldObject
// 0x0018 (0x0060 - 0x0048)
class UcAnimNotifyPeriod_HeldObject : public UcAnimNotifyPeriod
{
public:
	class AActor*                                      m_Archetype;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sSocketName;                                    		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sAnimationName;                                 		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAnimationLooping : 1;                          		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyPeriod_HeldObject" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyPeriod_HeldObject::pClassPointer = NULL;

// Class APBGame.cAnimNotifyPeriod_HideAttachedItem
// 0x0000 (0x0048 - 0x0048)
class UcAnimNotifyPeriod_HideAttachedItem : public UcAnimNotifyPeriod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyPeriod_HideAttachedItem" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyPeriod_HideAttachedItem::pClassPointer = NULL;

// Class APBGame.cAnimNotifyPeriod_HideWeaponClip
// 0x0000 (0x0048 - 0x0048)
class UcAnimNotifyPeriod_HideWeaponClip : public UcAnimNotifyPeriod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyPeriod_HideWeaponClip" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyPeriod_HideWeaponClip::pClassPointer = NULL;

// Class APBGame.cAnimNotifyPeriod_IK
// 0x0021 (0x0069 - 0x0048)
class UcAnimNotifyPeriod_IK : public UcAnimNotifyPeriod
{
public:
	struct FName                                       SkelControlName;                                  		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FtIKStrategySetting                         Setting;                                          		// 0x0050 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_Strategy;                                       		// 0x0068 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyPeriod_IK" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyPeriod_IK::pClassPointer = NULL;

// Class APBGame.cAnimNotifyPeriod_ShowAttachedItem
// 0x0014 (0x005C - 0x0048)
class UcAnimNotifyPeriod_ShowAttachedItem : public UcAnimNotifyPeriod
{
public:
	struct FName                                       m_sSocketName;                                    		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sAnimationName;                                 		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAnimationLooping : 1;                          		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyPeriod_ShowAttachedItem" );

		return pClassPointer;
	};

};

UClass* UcAnimNotifyPeriod_ShowAttachedItem::pClassPointer = NULL;

// Class APBGame.cAnimProfileInterface
// 0x0000 (0x0040 - 0x0040)
class UcAnimProfileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimProfileInterface" );

		return pClassPointer;
	};

	struct FName RetActiveProfileName ( );
	void SetActiveProfileByName ( struct FName sNewProfileName );
};

UClass* UcAnimProfileInterface::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeSequence
// 0x0032 (0x0148 - 0x0116)
class UcAPBAnimNodeSequence : public UAnimNodeSequence
{
public:
	struct FPointer                                    VfTable_IcAnimProfileInterface;                   		// 0x0118 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UAnimSequence*                               m_PrevAnimSeq;                                    		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_PrevAnimLinkupIndex;                            		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fPrevAnimCurrentTime;                           		// 0x0124 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fPrevAnimWeight;                                		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fAnimChangeGlobalTime;                          		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              m_fContextBlendTime;                              		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEndAnimWhenBlendOut : 1;                       		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RestartOnBecomeRelevant : 1;                      		// 0x0134 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class UcAnimNotifyPeriod* >                m_aPeriods;                                       		// 0x0138 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              HeadAimLeanScale;                                 		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeSequence" );

		return pClassPointer;
	};

	struct FName RetActiveProfileName ( );
	void SetActiveProfileByName ( struct FName sNewProfileName );
	void SetAnim ( struct FName sSeqName );
};

UClass* UcAPBAnimNodeSequence::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeActionSequence
// 0x0018 (0x0160 - 0x0148)
class UcAPBAnimNodeActionSequence : public UcAPBAnimNodeSequence
{
public:
	struct FName                                       CrouchedAnimSeqName;                              		// 0x0148 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimSequence*                               CrouchedAnimSeq;                                  		// 0x0150 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CrouchedAnimLinkupIndex;                          		// 0x0154 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimSequence*                               PrevCrouchedAnimSeq;                              		// 0x0158 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                PrevCrouchedAnimLinkupIndex;                      		// 0x015C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeActionSequence" );

		return pClassPointer;
	};

	void SetActionAnim ( struct FName sSeqName, struct FName sCrouchedSeqName );
};

UClass* UcAPBAnimNodeActionSequence::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeActionState
// 0x0010 (0x0104 - 0x00F4)
class UcAPBAnimNodeActionState : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTransitionTimeOut;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAllowStrafingWithoutAWeapon : 1;               		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsWeapon : 1;                                  		// 0x00FC (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                m_nPreviousItemType;                              		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeActionState" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeActionState::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeAim360
// 0x001C (0x0110 - 0x00F4)
class UcAPBAnimNodeAim360 : public UAnimNodeBlendList
{
public:
	float                                              m_InterpolateSpeed;                               		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTransitionTime;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTransitionTimeLeft;                            		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Aim;                                              		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_IsActive : 1;                                   		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeAim360" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeAim360::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeAimOffsetAnimSetProfile
// 0x0014 (0x0134 - 0x0120)
class UcAPBAnimNodeAimOffsetAnimSetProfile : public UAnimNodeAimOffset
{
public:
	struct FPointer                                    VfTable_IcAnimProfileInterface;                   		// 0x0120 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       ProfileName;                                      		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    m_pAnimSet;                                       		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentProfileIndex;                           		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeAimOffsetAnimSetProfile" );

		return pClassPointer;
	};

	struct FName RetActiveProfileName ( );
	void SetActiveProfileByName ( struct FName sNewProfileName );
};

UClass* UcAPBAnimNodeAimOffsetAnimSetProfile::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeAimOffset
// 0x0020 (0x0154 - 0x0134)
class UcAPBAnimNodeAimOffset : public UcAPBAnimNodeAimOffsetAnimSetProfile
{
public:
	struct FVector2D                                   m_MaximumRange;                                   		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_InterpolateSpeed;                               		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bClamp : 1;                                     		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDoAimLeanCompensation : 1;                     		// 0x0140 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bWasZeroed : 1;                                 		// 0x0140 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bInterpolating : 1;                             		// 0x0140 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              m_fLeanRightStandingOffset;                       		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLeanRightCrouchingOffset;                      		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLeanLeftStandingOffset;                        		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLeanLeftCrouchingOffset;                       		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeAimOffset" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeAimOffset::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeAimOffsetLean
// 0x0009 (0x013D - 0x0134)
class UcAPBAnimNodeAimOffsetLean : public UcAPBAnimNodeAimOffsetAnimSetProfile
{
public:
	float                                              m_fInterpolateSpeed;                              		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInterpolateSpeedUse;                           		// 0x0138 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eLastLean;                                      		// 0x013C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeAimOffsetLean" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeAimOffsetLean::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeArrested
// 0x0008 (0x00FC - 0x00F4)
class UcAPBAnimNodeArrested : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTransitionTimeOut;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeArrested" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeArrested::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeBlendBySpeed
// 0x0000 (0x0118 - 0x0118)
class UcAPBAnimNodeBlendBySpeed : public UAnimNodeBlendBySpeed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeBlendBySpeed" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeBlendBySpeed::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeBlendByStamina
// 0x0010 (0x0104 - 0x00F4)
class UcAPBAnimNodeBlendByStamina : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    m_afBlendPercent;                                 		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeBlendByStamina" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeBlendByStamina::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeBlendContactState
// 0x0014 (0x0108 - 0x00F4)
class UcAPBAnimNodeBlendContactState : public UAnimNodeBlendList
{
public:
	class AcContact*                                   m_Contact;                                        		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      m_eContactInteractionState;                       		// 0x00F8 (0x0001) [0x0000000000000000]              
	TArray< float >                                    BlendTime;                                        		// 0x00FC (0x000C) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeBlendContactState" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeBlendContactState::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeBlendDirectional
// 0x0000 (0x00E8 - 0x00E8)
class UcAPBAnimNodeBlendDirectional : public UAnimNodeBlendDirectional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeBlendDirectional" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeBlendDirectional::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeBlendFootShuffle
// 0x0004 (0x00F8 - 0x00F4)
class UcAPBAnimNodeBlendFootShuffle : public UAnimNodeBlendList
{
public:
	float                                              TransitionTime;                                   		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeBlendFootShuffle" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeBlendFootShuffle::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeBlendList
// 0x000C (0x0100 - 0x00F4)
class UcAPBAnimNodeBlendList : public UAnimNodeBlendList
{
public:
	int                                                m_nIndexInParentList;                             		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                m_nPlayCount;                                     		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWarnAnimInterruptions : 1;                     		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeBlendList" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeBlendList::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeBlendPerBone
// 0x0014 (0x0120 - 0x010C)
class UcAPBAnimNodeBlendPerBone : public UAnimNodeBlendPerBone
{
public:
	struct FPointer                                    VfTable_IcAnimProfileInterface;                   		// 0x010C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                m_nProfileIndex;                                  		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FtPerBoneProfile >                  m_aProfiles;                                      		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeBlendPerBone" );

		return pClassPointer;
	};

	struct FName RetActiveProfileName ( );
	void SetActiveProfileByName ( struct FName sProfileName );
};

UClass* UcAPBAnimNodeBlendPerBone::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeCarAction
// 0x0004 (0x00F0 - 0x00EC)
class UcAPBAnimNodeCarAction : public UAnimNodePlayCustomAnim
{
public:
	unsigned long                                      m_bPauseAtEnd : 1;                                		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeCarAction" );

		return pClassPointer;
	};

	void StopCustomAnim ( float fBlendOutTime );
	void SetPauseAtEnd ( unsigned long bPauseAtEnd );
};

UClass* UcAPBAnimNodeCarAction::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeCombatAction
// 0x0028 (0x011C - 0x00F4)
class UcAPBAnimNodeCombatAction : public UAnimNodeBlendList
{
public:
	struct FPointer                                    VfTable_IcAnimProfileInterface;                   		// 0x00F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              m_fTransitionTime;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTransitionTimeOut;                             		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nProfileIndex;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FtCombatActionProfile >             m_aProfiles;                                      		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcAPBAnimNodeActionSequence*                 m_ActionSequence;                                 		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPlaying : 1;                                   		// 0x0114 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                m_nCurrentSwingType;                              		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeCombatAction" );

		return pClassPointer;
	};

	bool RetIsPlaying ( );
	void PlayThrowAnimation ( );
	void PlayPinPullAnimation ( );
	void PlaySwingAnimation ( int nSwingType );
	void PlayFireAnimation ( );
	struct FName RetActiveProfileName ( );
	void SetActiveProfileByName ( struct FName sProfileName );
};

UClass* UcAPBAnimNodeCombatAction::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeCrouched
// 0x0000 (0x00D8 - 0x00D8)
class UcAPBAnimNodeCrouched : public UAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeCrouched" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeCrouched::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeDecision
// 0x0008 (0x00FC - 0x00F4)
class UcAPBAnimNodeDecision : public UAnimNodeBlendList
{
public:
	struct FPointer                                    VfTable_IcAnimNotifyActiveInterface;              		// 0x00F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      m_bDecisionRoot : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bActive : 1;                                    		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeDecision" );

		return pClassPointer;
	};

	void NotifyInactive ( );
	void NotifyActive ( unsigned long bIsEditorPreview );
	void SetActiveChild ( int iChildIndex, float fBlendTime );
};

UClass* UcAPBAnimNodeDecision::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeDecisionFromSDD
// 0x0018 (0x0114 - 0x00FC)
class UcAPBAnimNodeDecisionFromSDD : public UcAPBAnimNodeDecision
{
public:
	float                                              m_fTransitionTime;                                		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FEnumeratedName >                   m_aeCurrentMapping;                               		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_iDecisionNone;                                  		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_iDecisionInvalid;                               		// 0x0110 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeDecisionFromSDD" );

		return pClassPointer;
	};

	struct FName GetDecisionName ( );
};

UClass* UcAPBAnimNodeDecisionFromSDD::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeDecisionEquippedItem
// 0x0000 (0x0114 - 0x0114)
class UcAPBAnimNodeDecisionEquippedItem : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeDecisionEquippedItem" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeDecisionEquippedItem::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeDecisionFaction
// 0x0000 (0x0114 - 0x0114)
class UcAPBAnimNodeDecisionFaction : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeDecisionFaction" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeDecisionFaction::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeDecisionTaskItem
// 0x0000 (0x0114 - 0x0114)
class UcAPBAnimNodeDecisionTaskItem : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeDecisionTaskItem" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeDecisionTaskItem::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeDecisionVehicle
// 0x0000 (0x0114 - 0x0114)
class UcAPBAnimNodeDecisionVehicle : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeDecisionVehicle" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeDecisionVehicle::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeExhausted
// 0x0010 (0x00E8 - 0x00D8)
class UcAPBAnimNodeExhausted : public UAnimNodeBlendBase
{
public:
	float                                              StaminaPercent;                                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExhaustedWhenMoving : 1;                         		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              QuickBlendTimeToGo;                               		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeExhausted" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeExhausted::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeFalling
// 0x0000 (0x00D8 - 0x00D8)
class UcAPBAnimNodeFalling : public UAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeFalling" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeFalling::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeInCar
// 0x0008 (0x00FC - 0x00F4)
class UcAPBAnimNodeInCar : public UAnimNodeBlendList
{
public:
	unsigned char                                      m_eVehicleSetupType;                              		// 0x00F4 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eVehiclePositionIndex;                          		// 0x00F5 (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bMirror : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeInCar" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeInCar::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeInterruption
// 0x0008 (0x00FC - 0x00F4)
class UcAPBAnimNodeInterruption : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWasStunnedRecovery : 1;                          		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWasHeavyLanding : 1;                             		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeInterruption" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeInterruption::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeJump
// 0x0004 (0x00F8 - 0x00F4)
class UcAPBAnimNodeJump : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeJump" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeJump::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeLocomotionState
// 0x0004 (0x00F8 - 0x00F4)
class UcAPBAnimNodeLocomotionState : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeLocomotionState" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeLocomotionState::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeRandomIdle
// 0x0004 (0x010C - 0x0108)
class UcAPBAnimNodeRandomIdle : public UAnimNodeRandom
{
public:
	int                                                MainIdleIndex;                                    		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeRandomIdle" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeRandomIdle::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeScaleRateBySpeed
// 0x0000 (0x00E0 - 0x00E0)
class UcAPBAnimNodeScaleRateBySpeed : public UAnimNodeScaleRateBySpeed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeScaleRateBySpeed" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeScaleRateBySpeed::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeSelectSequences
// 0x001C (0x00F4 - 0x00D8)
class UcAPBAnimNodeSelectSequences : public UAnimNodeBlendBase
{
public:
	struct FPointer                                    VfTable_IcAnimNotifyActiveInterface;              		// 0x00D8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IcAnimProfileInterface;                   		// 0x00DC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                m_nProfileIndex;                                  		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FtSelectSequencesProfile >          m_aProfiles;                                      		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bActive : 1;                                    		// 0x00F0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeSelectSequences" );

		return pClassPointer;
	};

	struct FName RetActiveProfileName ( );
	void SetActiveProfileByName ( struct FName sProfileName );
	void NotifyInactive ( );
	void NotifyActive ( unsigned long bIsEditorPreview );
};

UClass* UcAPBAnimNodeSelectSequences::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeSteeringScrub
// 0x0008 (0x0150 - 0x0148)
class UcAPBAnimNodeSteeringScrub : public UcAPBAnimNodeSequence
{
public:
	float                                              m_fInterpolateSpeed;                              		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRangeDegrees;                                  		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeSteeringScrub" );

		return pClassPointer;
	};

};

UClass* UcAPBAnimNodeSteeringScrub::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeUpperBodyAction
// 0x005C (0x0150 - 0x00F4)
class UcAPBAnimNodeUpperBodyAction : public UAnimNodeBlendList
{
public:
	struct FPointer                                    VfTable_IcAnimProfileInterface;                   		// 0x00F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              m_fTransitionTime;                                		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              m_fTransitionTimeOut;                             		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              m_fTransitionBodySplit;                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sSwitchToUnarmedStanding;                       		// 0x0104 (0x0008) [0x0000000000000000]              
	struct FName                                       m_sSwitchToUnarmedCrouched;                       		// 0x010C (0x0008) [0x0000000000000000]              
	struct FtUpperBodyActionWeaponAnimation            m_SwitchToUnarmed;                                		// 0x0114 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nProfileIndex;                                  		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FtUpperBodyActionProfile >          m_aProfiles;                                      		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcAPBAnimNodeActionSequence*                 m_ActionSequence;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                m_eEquippedInventoryItemType;                     		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bEquippedItemIsWeapon : 1;                      		// 0x0148 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bIsPlayingCosmeticReequip : 1;                  		// 0x0148 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              m_fPreviousTransitionTimeOut;                     		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeUpperBodyAction" );

		return pClassPointer;
	};

	struct FName RetActiveProfileName ( );
	void SetActiveProfileByName ( struct FName sProfileName );
};

UClass* UcAPBAnimNodeUpperBodyAction::pClassPointer = NULL;

// Class APBGame.cAPBAnimNodeVehicleDoors
// 0x0018 (0x00F0 - 0x00D8)
class UcAPBAnimNodeVehicleDoors : public UAnimNodeBlendBase
{
public:
	TArray< struct FtDoor >                            m_aDoors;                                         		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      m_anPerBoneSource;                                		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBAnimNodeVehicleDoors" );

		return pClassPointer;
	};

	void OpenDoorNotifyReached ( unsigned char eVehiclePositionIndex );
	void AnimateDoorClosed ( unsigned char eVehiclePositionIndex );
	void PlayDoorAnimation ( unsigned char eVehiclePositionIndex, unsigned char eDoorInteractionAnimation, unsigned long bReTriggerIfAlreadyPlaying, float fRate );
};

UClass* UcAPBAnimNodeVehicleDoors::pClassPointer = NULL;

// Class APBGame.cAPBSkelControlLimb
// 0x0008 (0x00D0 - 0x00C8)
class UcAPBSkelControlLimb : public USkelControlLimb
{
public:
	unsigned char                                      SideOfTheBody;                                    		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFixTwistBone : 1;                                		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSkelControlLimb" );

		return pClassPointer;
	};

};

UClass* UcAPBSkelControlLimb::pClassPointer = NULL;

// Class APBGame.cAPBSkelControlLimbStrategy
// 0x00B8 (0x0188 - 0x00D0)
class UcAPBSkelControlLimbStrategy : public UcAPBSkelControlLimb
{
public:
	struct FtIKStrategySetting                         m_DefaultSetting;                                 		// 0x00D0 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FtIKStrategySetting                         m_AimedSetting;                                   		// 0x00E8 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendTime;                                     		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UcAnimNotifyPeriod_IK* >             m_aStrategyStack;                                 		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bUseAimedSetting : 1;                           		// 0x0110 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FtIKStrategySetting                         m_BlendOutSetting;                                		// 0x0114 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fBlendOutWeight;                                		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fBlendOutTimeToGo;                              		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedStrategy;                                   		// 0x0134 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CachedVehicleSocket;                              		// 0x0138 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FMatrix                                     CachedVehicleTransform;                           		// 0x0140 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      CachedVehicle;                                    		// 0x0180 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AcAPBPawn*                                   CachedVehiclePawn;                                		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSkelControlLimbStrategy" );

		return pClassPointer;
	};

	void DebugGetSetting ( struct FtIKStrategySetting* Setting, class UcAnimNotifyPeriod_IK** notifier );
};

UClass* UcAPBSkelControlLimbStrategy::pClassPointer = NULL;

// Class APBGame.cAPBSkelControlTwistBoneHACK
// 0x0000 (0x0098 - 0x0098)
class UcAPBSkelControlTwistBoneHACK : public USkelControlBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSkelControlTwistBoneHACK" );

		return pClassPointer;
	};

};

UClass* UcAPBSkelControlTwistBoneHACK::pClassPointer = NULL;

// Class APBGame.cEdgeHighlightComponent
// 0x0004 (0x01DC - 0x01D8)
class UcEdgeHighlightComponent : public UPrimitiveComponent
{
public:
	class AcAnimationDrivenTrigger*                    m_Trigger;                                        		// 0x01D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEdgeHighlightComponent" );

		return pClassPointer;
	};

};

UClass* UcEdgeHighlightComponent::pClassPointer = NULL;

// Class APBGame.cHeightAdjustmentNode
// 0x0010 (0x0050 - 0x0040)
class UcHeightAdjustmentNode : public UObject
{
public:
	struct FName                                       m_sNodeName;                                      		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nNodePosX;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nNodePosY;                                      		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHeightAdjustmentNode" );

		return pClassPointer;
	};

};

UClass* UcHeightAdjustmentNode::pClassPointer = NULL;

// Class APBGame.cHeightAdjustmentNodeBlendBase
// 0x0018 (0x0068 - 0x0050)
class UcHeightAdjustmentNodeBlendBase : public UcHeightAdjustmentNode
{
public:
	TArray< struct FtHeightAdjustmentBlendChild >      m_aChildren;                                      		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bFixNumChildren : 1;                            		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nOutDrawY;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nDrawWidth;                                     		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHeightAdjustmentNodeBlendBase" );

		return pClassPointer;
	};

};

UClass* UcHeightAdjustmentNodeBlendBase::pClassPointer = NULL;

// Class APBGame.cHeightAdjustmentNodeBlend
// 0x0008 (0x0070 - 0x0068)
class UcHeightAdjustmentNodeBlend : public UcHeightAdjustmentNodeBlendBase
{
public:
	float                                              m_fWeightChangePerSecond;                         		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetChild;                                   		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHeightAdjustmentNodeBlend" );

		return pClassPointer;
	};

	void BlendToChild ( int nTargetChild, float fTime );
};

UClass* UcHeightAdjustmentNodeBlend::pClassPointer = NULL;

// Class APBGame.cHeightAdjustmentNodeCalculate
// 0x0014 (0x0064 - 0x0050)
class UcHeightAdjustmentNodeCalculate : public UcHeightAdjustmentNode
{
public:
	unsigned char                                      m_eUnscaledBoneSelection;                         		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eScaledBoneSelection;                           		// 0x0051 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_aeAffectAxis[ 0x3 ];                            		// 0x0052 (0x0003) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sBoneName;                                      		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOutDrawY;                                      		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHeightAdjustmentNodeCalculate" );

		return pClassPointer;
	};

};

UClass* UcHeightAdjustmentNodeCalculate::pClassPointer = NULL;

// Class APBGame.cHeightAdjustmentNodeSmooth
// 0x0014 (0x007C - 0x0068)
class UcHeightAdjustmentNodeSmooth : public UcHeightAdjustmentNodeBlendBase
{
public:
	float                                              m_fMaxDeltaPerSecond;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLastTickTime;                                  		// 0x006C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_HeightAdjustment;                               		// 0x0070 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHeightAdjustmentNodeSmooth" );

		return pClassPointer;
	};

};

UClass* UcHeightAdjustmentNodeSmooth::pClassPointer = NULL;

// Class APBGame.cHeldObjectComponent
// 0x000F (0x0068 - 0x0059)
class UcHeldObjectComponent : public UActorComponent
{
public:
	TArray< struct FtHeldObject >                      m_aHeldObjects;                                   		// 0x005C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHeldObjectComponent" );

		return pClassPointer;
	};

};

UClass* UcHeldObjectComponent::pClassPointer = NULL;

// Class APBGame.cSkelControl_HairSquash
// 0x0010 (0x00A8 - 0x0098)
class UcSkelControl_HairSquash : public USkelControlBase
{
public:
	int                                                State;                                            		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              TimeLeft;                                         		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              ScaleFrom;                                        		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              ScaleTo;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkelControl_HairSquash" );

		return pClassPointer;
	};

};

UClass* UcSkelControl_HairSquash::pClassPointer = NULL;

// Class APBGame.cSkelControlBodyRoll
// 0x029C (0x0364 - 0x00C8)
class UcSkelControlBodyRoll : public USkelControlSingleBone
{
public:
	struct FVector                                     m_vAccelVectorUsed;                               		// 0x00C8 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     m_vLastAccel[ 0x28 ];                             		// 0x00D4 (0x01E0) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastAccelTimeDeltas[ 0x28 ];                   		// 0x02B4 (0x00A0) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNextAccelIndex;                                		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastVelocity;                                  		// 0x0358 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkelControlBodyRoll" );

		return pClassPointer;
	};

};

UClass* UcSkelControlBodyRoll::pClassPointer = NULL;

// Class APBGame.cSkelControlHeightAdjustment
// 0x0068 (0x0100 - 0x0098)
class UcSkelControlHeightAdjustment : public USkelControlBase
{
public:
	struct FtHeightAdjustmentStrategy                  m_DefaultStrategy;                                		// 0x0098 (0x000C) [0x0000000000000000]              
	TArray< struct FtHeightAdjustmentStrategy >        m_aStrategyStack;                                 		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMesh*                               m_MaleUnscaledMesh;                               		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_FemaleUnscaledMesh;                             		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxDeltaPerSecond;                             		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sMatchBoneName;                                 		// 0x00BC (0x0008) [0x0000000000000000]              
	float                                              m_fMatchLowestAdjustment;                         		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              m_fLastTickTime;                                  		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              m_fMatchBoneWeight;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              m_fWeightChangePerSecond;                         		// 0x00D0 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               m_CachedScaledMesh;                               		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMesh*                               m_CachedUnscaledMesh;                             		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            m_aUnscaledToScaled;                              		// 0x00DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMatrix >                           m_aUnscaledSpaceBases;                            		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_HeightAdjustment;                               		// 0x00F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkelControlHeightAdjustment" );

		return pClassPointer;
	};

};

UClass* UcSkelControlHeightAdjustment::pClassPointer = NULL;

// Class APBGame.cSkelControlLCBodyRotation
// 0x0000 (0x00C8 - 0x00C8)
class UcSkelControlLCBodyRotation : public USkelControlSingleBone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkelControlLCBodyRotation" );

		return pClassPointer;
	};

};

UClass* UcSkelControlLCBodyRotation::pClassPointer = NULL;

// Class APBGame.cSkelControlTurntable
// 0x0020 (0x00B8 - 0x0098)
class UcSkelControlTurntable : public USkelControlBase
{
public:
	float                                              TurnSpeed;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FastTurnTolerance;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FastTurnSpeed;                                    		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AimSpeed;                                         		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimTolerance;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimMaximum;                                       		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FiringQuickBlendTime;                             		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkelControlTurntable" );

		return pClassPointer;
	};

};

UClass* UcSkelControlTurntable::pClassPointer = NULL;

// Class APBGame.cSkelControlWheelOrientation
// 0x000C (0x00D4 - 0x00C8)
class UcSkelControlWheelOrientation : public USkelControlSingleBone
{
public:
	float                                              WheelRoll;                                        		// 0x00C8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      WheelRollAxis;                                    		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkelControlWheelOrientation" );

		return pClassPointer;
	};

};

UClass* UcSkelControlWheelOrientation::pClassPointer = NULL;

// Class APBGame.cSkelControlWheelSuspension
// 0x0020 (0x00E8 - 0x00C8)
class UcSkelControlWheelSuspension : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x00C8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     WheelBoneOffset;                                  		// 0x00CC (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WheelMaxRenderDisplacement;                       		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSteering;                                    		// 0x00DC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      WheelSteeringAxis;                                		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkelControlWheelSuspension" );

		return pClassPointer;
	};

};

UClass* UcSkelControlWheelSuspension::pClassPointer = NULL;

// Class APBGame.cVignetteDescriptor
// 0x0064 (0x00A4 - 0x0040)
class UcVignetteDescriptor : public UObject
{
public:
	TArray< class UcVignetteDescriptorNode* >          m_aNext;                                          		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bBeingEdited : 1;                               		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                m_nOriginX;                                       		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_nOriginY;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_fZoom;                                          		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_PreviewCameraPosition;                          		// 0x005C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_PreviewCameraRotation;                          		// 0x0068 (0x000C) [0x0000000000000000]              
	int                                                m_nStartNodeX;                                    		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                m_nStartNodeY;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_nEndNodeX;                                      		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                m_nEndNodeY;                                      		// 0x0080 (0x0004) [0x0000000000000000]              
	class UcPedestrianSetupInfo*                       m_PedestrianSetup;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     m_Prop;                                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_PropLocation;                                   		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_PropRotation;                                   		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVignetteDescriptor" );

		return pClassPointer;
	};

	void CollapseVignette ( int nSeed, TArray< struct FtVignetteSequence >* aSequences );
};

UClass* UcVignetteDescriptor::pClassPointer = NULL;

// Class APBGame.cVignetteDescriptorNode
// 0x0028 (0x0068 - 0x0040)
class UcVignetteDescriptorNode : public UObject
{
public:
	struct FName                                       m_sSequenceName;                                  		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMinRepetitions;                                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaxRepetitions;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fWeight;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UcVignetteDescriptorNode* >          m_aNext;                                          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nNodeX;                                         		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nNodeY;                                         		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVignetteDescriptorNode" );

		return pClassPointer;
	};

};

UClass* UcVignetteDescriptorNode::pClassPointer = NULL;

// Class APBGame.cAnimConfigureDecision
// 0x0014 (0x006C - 0x0058)
class UcAnimConfigureDecision : public UcAnimConfigureNode
{
public:
	TArray< struct FtDecisionChild >                   Children;                                         		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nOutDrawY;                                      		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              m_fSliderPos;                                     		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimConfigureDecision" );

		return pClassPointer;
	};

	struct FName RetDecisionName ( class UAnimTree* pAnimTree );
};

UClass* UcAnimConfigureDecision::pClassPointer = NULL;

// Class APBGame.cAnimConfigureDecisionEquippedItem
// 0x0000 (0x006C - 0x006C)
class UcAnimConfigureDecisionEquippedItem : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimConfigureDecisionEquippedItem" );

		return pClassPointer;
	};

	struct FName RetDecisionName ( class UAnimTree* pAnimTree );
};

UClass* UcAnimConfigureDecisionEquippedItem::pClassPointer = NULL;

// Class APBGame.cAnimConfigureDecisionFaction
// 0x0000 (0x006C - 0x006C)
class UcAnimConfigureDecisionFaction : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimConfigureDecisionFaction" );

		return pClassPointer;
	};

	struct FName RetDecisionName ( class UAnimTree* pAnimTree );
};

UClass* UcAnimConfigureDecisionFaction::pClassPointer = NULL;

// Class APBGame.cAnimConfigureDecisionTaskItem
// 0x0000 (0x006C - 0x006C)
class UcAnimConfigureDecisionTaskItem : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimConfigureDecisionTaskItem" );

		return pClassPointer;
	};

	struct FName RetDecisionName ( class UAnimTree* pAnimTree );
};

UClass* UcAnimConfigureDecisionTaskItem::pClassPointer = NULL;

// Class APBGame.cAnimConfigureDecisionVehicle
// 0x0000 (0x006C - 0x006C)
class UcAnimConfigureDecisionVehicle : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimConfigureDecisionVehicle" );

		return pClassPointer;
	};

	struct FName RetDecisionName ( class UAnimTree* pAnimTree );
};

UClass* UcAnimConfigureDecisionVehicle::pClassPointer = NULL;

// Class APBGame.cAnimConfigureSelect
// 0x0018 (0x0070 - 0x0058)
class UcAnimConfigureSelect : public UcAnimConfigureNode
{
public:
	TArray< struct FtSelectProfile >                   Profiles;                                         		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcAnimConfigureNode*                         ChildNode;                                        		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nOutDrawY;                                      		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nInDrawY;                                       		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimConfigureSelect" );

		return pClassPointer;
	};

	struct FName RetProfileName ( class UAnimTree* pAnimTree );
};

UClass* UcAnimConfigureSelect::pClassPointer = NULL;

// Class APBGame.cFlythroughSkeletalMeshActor
// 0x0008 (0x0258 - 0x0250)
class AcFlythroughSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	unsigned char                                      m_ActorType;                                      		// 0x0250 (0x0001) [0x0000000000000020]              ( CPF_Net )
	int                                                m_meshIndex;                                      		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cFlythroughSkeletalMeshActor" );

		return pClassPointer;
	};

	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName sVariableName );
};

UClass* AcFlythroughSkeletalMeshActor::pClassPointer = NULL;

// Class APBGame.cGolemRenderTarget
// 0x0014 (0x0054 - 0x0040)
class UcGolemRenderTarget : public UObject
{
public:
	struct FVector2D                                   m_Offset;                                         		// 0x0040 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_Scale;                                          		// 0x0048 (0x0008) [0x0000000000000000]              
	class UTextureRenderTarget2D*                      m_pRenderTarget;                                  		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGolemRenderTarget" );

		return pClassPointer;
	};

	int GetHeight ( );
	int GetWidth ( );
	void SetDesiredSize ( int nWidth, int nHeight );
};

UClass* UcGolemRenderTarget::pClassPointer = NULL;

// Class APBGame.DrawTESLayerComponent
// 0x000C (0x01E4 - 0x01D8)
class UDrawTESLayerComponent : public UPrimitiveComponent
{
public:
	class UTESTexture*                                 TextureDescriptor;                                		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                LayerIndex;                                       		// 0x01DC (0x0004) [0x0000000000000000]              
	struct FColor                                      ProjectionVolumeColour;                           		// 0x01E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.DrawTESLayerComponent" );

		return pClassPointer;
	};

};

UClass* UDrawTESLayerComponent::pClassPointer = NULL;

// Class APBGame.GolemBase
// 0x02A8 (0x02E8 - 0x0040)
class UGolemBase : public UObject
{
public:
	int                                                Id;                                               		// 0x0040 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     UserName;                                         		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LastPartID;                                       		// 0x0050 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FGolemPartExternalData >            aParts;                                           		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcItemRestrictionTree*                       ItemRestrictionTree;                              		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               SourceSkeletalMesh;                               		// 0x0068 (0x0004) [0x0000000000000000]              
	class UAnimTree*                                   StudioAnimTree;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          StudioAnimSets;                                   		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AnimSetupName;                                    		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocialAnimSetupName;                              		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMorphTargetSet* >                   MorphSets;                                        		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMesh*                               SegmentedMesh;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	TArray< struct FSegmentationDataLOD >              aSegmentationData;                                		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nTextureDivisor;                                  		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                nMaxTextureDivisor;                               		// 0x00AC (0x0004) [0x0000000000000000]              
	TArray< struct FGolemBaseSkinTone >                SkinTones;                                        		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  SkinToneMask;                                     		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      Pigmentation1;                                    		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      Pigmentation2;                                    		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        FrecklesMap;                                      		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        AgeMarks;                                         		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemBaseColourNormalMap >         BodyHair;                                         		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemBaseColourNormalMap >         MolesMap;                                         		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemScar >                        Scars;                                            		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        Tattoos;                                          		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemProjectionArea >              ProjectionAreas;                                  		// 0x0110 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemProjectionPose >              ProjectionPoses;                                  		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  BaseNormalMap;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        MuscleNormalMap;                                  		// 0x012C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        VeinsNormalMap;                                   		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        SkinnyNormalMap;                                  		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        WrinklesNormalMap;                                		// 0x0150 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aEyeLidShapes;                                    		// 0x015C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aEyePupils;                                       		// 0x0168 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aEyeIris;                                         		// 0x0174 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aLipDetail;                                       		// 0x0180 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aChinDetail;                                      		// 0x018C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aForeheadDetail;                                  		// 0x0198 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aCheeksDetail;                                    		// 0x01A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemBaseColourNormalMap >         aEyebrows;                                        		// 0x01B0 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UTexture2D* >                        aEyeShadow;                                       		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aEyeLiner;                                        		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aLipstick;                                        		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aBlusher;                                         		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aNailVarnish;                                     		// 0x01EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aBodyPaint;                                       		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aFacePaint;                                       		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aGreyscaleEyeShadow;                              		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aGreyscaleEyeLiner;                               		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aGreyscaleLipstick;                               		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aGreyscaleBlusher;                                		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aGreyscaleNailVarnish;                            		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aGreyscaleBodyPaint;                              		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        aGreyscaleFacePaint;                              		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGolemMakeUpData >                  aDataEyeShadow;                                   		// 0x0264 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemMakeUpData >                  aDataEyeLiner;                                    		// 0x0270 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemMakeUpData >                  aDataLipstick;                                    		// 0x027C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemMakeUpData >                  aDataBlusher;                                     		// 0x0288 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemMakeUpData >                  aDataNailVarnish;                                 		// 0x0294 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemMakeUpData >                  aDataBodyPaint;                                   		// 0x02A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemMakeUpData >                  aDataFacePaint;                                   		// 0x02AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemBaseHairShape >               aShapes;                                          		// 0x02B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      DefaultBaseColor;                                 		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeltaSpecularLightness1;                          		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeltaSpecularLightness2;                          		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           aHairFittingMorphTargets;                         		// 0x02D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemBaseTextureBlock >            aTextureBlocks;                                   		// 0x02DC (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemBase" );

		return pClassPointer;
	};

};

UClass* UGolemBase::pClassPointer = NULL;

// Class APBGame.cAssetCustomisation
// 0x0020 (0x0060 - 0x0040)
class UcAssetCustomisation : public UObject
{
public:
	class UcAsyncPackages*                             m_AsyncPackages;                                  		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     m_sDevelopmentFolder;                             		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bPostAsyncLoadCalled : 1;                       		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FColor >                            m_aComplexityCols;                                		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAssetCustomisation" );

		return pClassPointer;
	};

	bool SaveToDisk ( struct FString sName );
	bool LoadFromDisk ( struct FString sName );
	bool LoadFromMemory ( TArray< unsigned char > Data );
	bool IsReady ( );
	void StartLoading ( );
};

UClass* UcAssetCustomisation::pClassPointer = NULL;

// Class APBGame.GolemBodyDescriptor
// 0x0164 (0x01C4 - 0x0060)
class UGolemBodyDescriptor : public UcAssetCustomisation
{
public:
	class UGolemBase*                                  Base;                                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedsMorphFixup : 1;                             		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              fHeightFactor;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FGolemMorphNodeWithWeight >         aBodyMorphs;                                      		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      BrowsNormalMap;                                   		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EyeLidNormalMap;                                  		// 0x0079 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EyebrowsShape;                                    		// 0x007A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EyebrowsColourIndex;                              		// 0x007B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NoseShape;                                        		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LipDetailNormalMap;                               		// 0x007D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChinDetail;                                       		// 0x007E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForeheadDetail;                                   		// 0x007F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CheekDetail;                                      		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EarShape;                                         		// 0x0081 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IrisColour;                                       		// 0x0082 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PupilShape;                                       		// 0x0083 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MolesPatternIndex;                                		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FrecklesPatternIndex;                             		// 0x0085 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MusclesPatternIndex;                              		// 0x0086 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VeinsPatternIndex;                                		// 0x0087 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SkinninessPatternIndex;                           		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WrinklesPatternIndex;                             		// 0x0089 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AgeMarksPatternIndex;                             		// 0x008A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HairShape;                                        		// 0x008B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HairType;                                         		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HairColourIndex;                                  		// 0x008D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              EyeLidStrength;                                   		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BodyHairPattern;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LipDetailStrength;                                		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChinDetailStrength;                               		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForeheadDetailStrength;                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CheekDetailStrength;                              		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkinTone;                                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkinPigment1Level;                                		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkinPigment2Level;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGolemMakeupInfo                            EyeShadow;                                        		// 0x00B4 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FGolemMakeupInfo                            EyeLiner;                                         		// 0x00CC (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FGolemMakeupInfo                            Lipstick;                                         		// 0x00E4 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FGolemMakeupInfo                            Blusher;                                          		// 0x00FC (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FGolemMakeupInfo                            NailVarnish;                                      		// 0x0114 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FGolemMakeupInfo                            BodyPaint;                                        		// 0x012C (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FGolemMakeupInfo                            FacePaint;                                        		// 0x0144 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	float                                              MolesFactor;                                      		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrecklesFactor;                                   		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Muscularity;                                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VeinsFactor;                                      		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Skinniness;                                       		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WrinklesFactor;                                   		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AgeMarksFactor;                                   		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FScarsLayer >                       ScarsLayers;                                      		// 0x0178 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPredefinedTattooLayer >            PredefinedTattooLayers;                           		// 0x0184 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTESTexture*                                 BodyTESTattoo;                                    		// 0x0190 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< unsigned char >                            LayerProjectionArea;                              		// 0x0194 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            LayerProjectionMask;                              		// 0x01A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned long >                            LayerProjectionInvertMask;                        		// 0x01AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UGolemPartDescriptor* >              FacialHairDescriptors;                            		// 0x01B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemBodyDescriptor" );

		return pClassPointer;
	};

};

UClass* UGolemBodyDescriptor::pClassPointer = NULL;

// Class APBGame.GolemDescriptor
// 0x0060 (0x00C0 - 0x0060)
class UGolemDescriptor : public UcAssetCustomisation
{
public:
	struct FCompactGolemDescriptor                     m_CompactDescriptor;                              		// 0x0060 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UGolemBodyDescriptor*                        BodyDescriptor;                                   		// 0x0090 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< class UGolemPartDescriptor* >              PartDescriptors;                                  		// 0x0094 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< int >                                      aLayerData;                                       		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPurchaseElementInfo >              aPurchaseElements;                                		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bPrecacheStatue : 1;                            		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bUILobbyCharacterMesh : 1;                      		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bUIClothingPreviewCharacterMesh : 1;            		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class USkeletalMeshComponent*                      m_pBaseMeshComponent;                             		// 0x00BC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemDescriptor" );

		return pClassPointer;
	};

	void Randomise ( );
};

UClass* UGolemDescriptor::pClassPointer = NULL;

// Class APBGame.GolemHairSkeletalMeshComponent
// 0x0004 (0x04AC - 0x04A8)
class UGolemHairSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	class UGolemDescriptor*                            m_pDescriptor;                                    		// 0x04A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemHairSkeletalMeshComponent" );

		return pClassPointer;
	};

};

UClass* UGolemHairSkeletalMeshComponent::pClassPointer = NULL;

// Class APBGame.GolemMeshBaker
// 0x01A4 (0x01E4 - 0x0040)
class UGolemMeshBaker : public UObject
{
public:
	struct FMeshBuildData                              m_AsyncBuildData;                                 		// 0x0040 (0x0088) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              m_AverageStepTimes[ 0x15 ];                       		// 0x00C8 (0x0054) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_LastStepTimes[ 0x15 ];                          		// 0x011C (0x0054) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_LastStepMaxOverBudgetTime[ 0x15 ];              		// 0x0170 (0x0054) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMeshDuplicationTime;                           		// 0x01C4 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalTime;                                     		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalStepsTime;                                		// 0x01CC (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pRenderFence;                                   		// 0x01D0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UMaterial*                                   m_pParentHairMaterial;                            		// 0x01D4 (0x0004) [0x0000000000000000]              
	TArray< class UTexture* >                          m_HairTextures;                                   		// 0x01D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemMeshBaker" );

		return pClassPointer;
	};

};

UClass* UGolemMeshBaker::pClassPointer = NULL;

// Class APBGame.Golemobile
// 0x0138 (0x0178 - 0x0040)
class UGolemobile : public UObject
{
public:
	class UGolemSkeletalMesh*                          VehicleSkelMesh;                                  		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMorphTargetSet*                             VehicleMorphTargetSet;                            		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      VehicleSkelComp;                                  		// 0x0048 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTexture2D*                                  Textures[ 0xB ];                                  		// 0x004C (0x002C) [0x0000000000000001]              ( CPF_Edit )
	int                                                PaintMaterialIndex;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InteriorMaterialIndex;                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GlassMaterialIndex;                               		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WheelMaterialIndex;                               		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   PaintMaterialInst;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   GlassMaterialInst;                                		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   InteriorMaterialInst;                             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   WheelMaterialInst;                                		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_PaintMaterialParent;                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_GlassMaterialParent;                            		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_InteriorMaterialParent;                         		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_WheelMaterialParent;                            		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_SimplePaintMaterialParent;                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_SimpleGlassMaterialParent;                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_SimpleInteriorMaterialParent;                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   m_SimpleWheelMaterialParent;                      		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTextureDynamicLookup*                       TextureLookups[ 0x2 ];                            		// 0x00B8 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FGolemobileCommonData                       CommonData;                                       		// 0x00C0 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DustIntensity;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DustColour;                                       		// 0x00F4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirtIntensity;                                    		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DirtColour;                                       		// 0x0108 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FGolemMorphNodeWithWeight >         aDamageMorphs;                                    		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEmissiveTexDirty : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageTexDirty : 1;                              		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDamageMeshDirty : 1;                             		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bLightsPatternDirty : 1;                        		// 0x0124 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_qualityChangePending : 1;                       		// 0x0124 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_usingProperAsset : 1;                           		// 0x0124 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              m_aExtremeDamage[ 0x5 ];                          		// 0x0128 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class UVehicleMaskTemplate*                        m_pDamageAreasMask;                               		// 0x013C (0x0004) [0x0000000000000000]              
	class UVehicleMaskTemplate*                        m_pEmissiveAreasMask;                             		// 0x0140 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eCurrentLightsToD;                              		// 0x0144 (0x0001) [0x0000000000000000]              
	TArray< class UcVehicleLightsPattern* >            m_aCurrentLightPatterns;                          		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture*                                    m_districtHeightfield;                            		// 0x0154 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_worldToTextureOffsetXY;                         		// 0x0158 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_worldToTextureScaleXY;                          		// 0x0164 (0x000C) [0x0000000000000000]              
	float                                              m_worldToTextureOffsetZ;                          		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              m_worldToTextureScaleZ;                           		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.Golemobile" );

		return pClassPointer;
	};

	void UpdateLightsToD ( );
	void LightsToDChange ( );
	void CopyLogicalStateFrom ( class UGolemobile* pOther );
	void CopySettingsFrom ( class UGolemobile* pOther, class USkeletalMeshComponent* pMesh );
	void SetTexture ( unsigned char eTextureType, class UTexture* pTexture );
	void Tick ( );
	float GetExtremeDamageLevel ( int nIndex );
	void SetExtremeDamageLevel ( int nIndex, float fLevel );
	float GetDamageLevel ( int nDamageIndex );
	void SetDamageLevel ( int nDamageIndex, float fLevel );
	float GetEmissiveLevel ( int nEmissiveIndex );
	void SetEmissiveLevel ( int nEmissiveIndex, float fLevel );
	void UpdateMaterials ( );
	void Init ( class USkeletalMeshComponent* pSkeletalMeshComp );
	void UpdateLightPatterns ( float fDeltaSeconds );
	class UMaterial* WheelMaterialParent ( );
	class UMaterial* InteriorMaterialParent ( );
	class UMaterial* GlassMaterialParent ( );
	class UMaterial* PaintMaterialParent ( );
	void ChangeMaterialQuality ( );
};

UClass* UGolemobile::pClassPointer = NULL;

// Class APBGame.GolemobileBase
// 0x00B4 (0x00F4 - 0x0040)
class UGolemobileBase : public UObject
{
public:
	int                                                NumTextureSets;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastPartID;                                       		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FGolemobilePartType >               aPartTypes;                                       		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           aCommonPartTypes;                                 		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   LobbyAnimTree;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMorphTargetSet* >                   MorphSets;                                        		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  DiffuseMap;                                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  NormalMap;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  EmissiveMap;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DamagedNormal_ScratchMask;                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ScratchMask;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ScratchDiffuse_DirtDamageDustMask;                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  InteriorDiffuseMap;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  InteriorNormalMap;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  InteriorEmissiveMap;                              		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialMapLODBase[ 0x4 ];                        		// 0x0098 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialMapLOD1[ 0x4 ];                           		// 0x00A8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialMapLOD2[ 0x4 ];                           		// 0x00B8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UcGolemobileShared*                          SharedData;                                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FGolemProjectionArea >              ProjectionAreas;                                  		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemobileLicensePlateData >       LicensePlates;                                    		// 0x00D8 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UTESTexture*                                 GlassPresetDecals;                                		// 0x00E4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              LOD1Distance;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LOD2Distance;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bDoubleSizeDiffuse : 1;                         		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemobileBase" );

		return pClassPointer;
	};

};

UClass* UGolemobileBase::pClassPointer = NULL;

// Class APBGame.GolemobileCommonParts
// 0x000C (0x004C - 0x0040)
class UGolemobileCommonParts : public UObject
{
public:
	TArray< struct FGolemobilePartType >               aPartTypes;                                       		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemobileCommonParts" );

		return pClassPointer;
	};

};

UClass* UGolemobileCommonParts::pClassPointer = NULL;

// Class APBGame.GolemobileDescriptor
// 0x00A0 (0x0100 - 0x0060)
class UGolemobileDescriptor : public UcAssetCustomisation
{
public:
	struct FCompactGolemobileDescriptor                m_CompactDescriptor;                              		// 0x0060 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	class UGolemobileBase*                             Base;                                             		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UGolemobilePartDescriptor* >         aParts;                                           		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                HSLBasePaintColour;                               		// 0x0090 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                HSLSecondPaintColour;                             		// 0x00A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PaintType;                                        		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UTESTexture*                                 TESDecals;                                        		// 0x00B4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UTESTextureClass*                            m_pDecalsTextureClass;                            		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            LayerProjectionArea;                              		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LicencePlateBackground;                           		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      LicencePlateDigits;                               		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                PaintMaterialIndex;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                InteriorMaterialIndex;                            		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                WheelMaterialIndex;                               		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                GlassMaterialIndex;                               		// 0x00E4 (0x0004) [0x0000000000000000]              
	class UTexture*                                    DamagedNormal;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	class UTexture*                                    ScratchMask;                                      		// 0x00EC (0x0004) [0x0000000000000000]              
	class UTexture*                                    ScratchDiffuse_DirtDamageDustMask;                		// 0x00F0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      PartLightsPatterns;                               		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemobileDescriptor" );

		return pClassPointer;
	};

	void Randomise ( int nNumDecals, int nNumLayersPerDecal );
	void SetBase ( class UGolemobileBase* pBase );
	void Init ( );
};

UClass* UGolemobileDescriptor::pClassPointer = NULL;

// Class APBGame.GolemobileMeshBaker
// 0x0000 (0x01E4 - 0x01E4)
class UGolemobileMeshBaker : public UGolemMeshBaker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemobileMeshBaker" );

		return pClassPointer;
	};

};

UClass* UGolemobileMeshBaker::pClassPointer = NULL;

// Class APBGame.GolemobilePart
// 0x0070 (0x00B0 - 0x0040)
class UGolemobilePart : public UObject
{
public:
	struct FString                                     UserName;                                         		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LinkedPartName;                                   		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LinkedPartIndex;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMorphTargetSet*                             ShapeMorphs;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DiffuseMap;                                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  NormalMap;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  EmissiveMap;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               DamageSkeletalMesh;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DamageDiffuseMap;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DamageNormalMap;                                  		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLightsPattern;                                 		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< class USkeletalMesh* >                     a_WheelSkeletalMeshes;                            		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             a_sWheelSocketNames;                              		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_eAudioPartCategory;                             		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nAudioPartIndex;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bColourCustomisable : 1;                        		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     PartTypeName;                                     		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemobilePart" );

		return pClassPointer;
	};

};

UClass* UGolemobilePart::pClassPointer = NULL;

// Class APBGame.GolemobilePartDescriptor
// 0x0034 (0x0074 - 0x0040)
class UGolemobilePartDescriptor : public UObject
{
public:
	struct FString                                     sName;                                            		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     sDisplayName;                                     		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                Index;                                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGolemobilePart*                             Part;                                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCommon : 1;                                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseBaseColour : 1;                                		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FLinearColor                                HSLColour;                                        		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemobilePartDescriptor" );

		return pClassPointer;
	};

};

UClass* UGolemobilePartDescriptor::pClassPointer = NULL;

// Class APBGame.GolemPart
// 0x0104 (0x0144 - 0x0040)
class UGolemPart : public UObject
{
public:
	int                                                Id;                                               		// 0x0040 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                ClassID;                                          		// 0x0044 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UGolemBase*                                  Base;                                             		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FString                                     UserName;                                         		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      EnabledByDefault : 1;                             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ShareUVLayout : 1;                                		// 0x0058 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPseudoWeldOnAutoBuild : 1;                       		// 0x0058 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCullHairMesh : 1;                                		// 0x0058 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< struct FString >                           BodyMorphGroupsToDisable;                         		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FEnumeratedName                             AudioSwitchGroup;                                 		// 0x0068 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FEnumeratedName                             AudioSwitchValue;                                 		// 0x0078 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FConditionalMorph >                 Morphs;                                           		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               SourceSkeletalMesh;                               		// 0x0098 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ExtraMeshSegments;                                		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FConditionalMorph >                 ExtraMeshVariants;                                		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      OccludedSegments;                                 		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVerticesMapLOD >                   CoincidentVerticesLOD;                            		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2D*                                  NormalMap;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ColourMap;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ExtraMeshNormalMap;                               		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ExtraMeshColourMap;                               		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  BRDFMask;                                         		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FOverlayTextures >                  Overlays;                                         		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FBaseExtraTextures >                PredefinedVinyls;                                 		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FBaseExtraTextures >                PredefinedDecals;                                 		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGolemBaseArea >                    CustomisableAreas;                                		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                nTextureDivisor;                                  		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                nMaxTextureDivisor;                               		// 0x0114 (0x0004) [0x0000000000000000]              
	TArray< struct FGolemPartTextureBlock >            aTextureBlocks;                                   		// 0x0118 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     HairFittingMorph;                                 		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaximumOverlayStrength;                           		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShoeHeight;                                       		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPartProjectionArea >               aSupportedProjectionAreas;                        		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemPart" );

		return pClassPointer;
	};

};

UClass* UGolemPart::pClassPointer = NULL;

// Class APBGame.GolemPartDescriptor
// 0x004C (0x00AC - 0x0060)
class UGolemPartDescriptor : public UcAssetCustomisation
{
public:
	class UGolemPart*                                  Part;                                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLinearColor >                      aHSLColours;                                      		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      OverlayIndex;                                     		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverlayStrength;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPredefinedDecalLayer >             PredefinedDecals;                                 		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            ProjectionAreas;                                  		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            ProjectionMasks;                                  		// 0x0090 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned long >                            LayerProjectionInvertMask;                        		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTESTexture*                                 PartTESDecals;                                    		// 0x00A8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemPartDescriptor" );

		return pClassPointer;
	};

};

UClass* UGolemPartDescriptor::pClassPointer = NULL;

// Class APBGame.GolemSkeletalMesh
// 0x0018 (0x0338 - 0x0320)
class UGolemSkeletalMesh : public USkeletalMesh
{
public:
	struct FTextureTransform                           aUVLayoutTransforms;                              		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      aLODSizes;                                        		// 0x032C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemSkeletalMesh" );

		return pClassPointer;
	};

};

UClass* UGolemSkeletalMesh::pClassPointer = NULL;

// Class APBGame.GolemSpawnerActor
// 0x00E8 (0x0324 - 0x023C)
class AGolemSpawnerActor : public AActor
{
public:
	class UClass*                                      characterPawnClass;                               		// 0x023C (0x0004) [0x0000000000000000]              
	TArray< struct FActorDescriptorMap >               spawnedCharacters;                                		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nNumCharacterDescriptors;                         		// 0x024C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     sCharacterDescriptorPrefix;                       		// 0x0250 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDescriptorDataStream >             CharacterCompressedDescriptors;                   		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           aEmotesAvailable;                                 		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nMinRandomCharacterDescriptorRange;               		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                nMaxRandomCharacterDescriptorRange;               		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              fRandomCharacterSpawnRadius;                      		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              fRandomCharacterSpawnFrequency;                   		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              fRandomCharacterDespawnFrequency;                 		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                nNumMaxRandomCharacters;                          		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                nRandomCharactersSpawned;                         		// 0x028C (0x0004) [0x0000000000000000]              
	int                                                nRandomCharacterLastDescriptorUsed;               		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              fRandomCharacterTimeSinceLastSpawn;               		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              fRandomCharacterTimeSinceLastDespawn;             		// 0x0298 (0x0004) [0x0000000000000000]              
	struct FVector                                     vRandomCharacterSpawnCentreLocation;              		// 0x029C (0x000C) [0x0000000000000000]              
	TArray< class UcCompressedAssetCustomisation* >    m_aCompressedCharacterData;                       		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      vehiclePawnClass;                                 		// 0x02B4 (0x0004) [0x0000000000000000]              
	TArray< struct FActorDescriptorMap >               spawnedVehicles;                                  		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nNumVehicleDescriptors;                           		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     sVehicleDescriptorPrefix;                         		// 0x02C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDescriptorDataStream >             VehicleCompressedDescriptors;                     		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nMinRandomVehicleDescriptorRange;                 		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                nMaxRandomVehicleDescriptorRange;                 		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              fRandomVehicleSpawnRadius;                        		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              fRandomVehicleSpawnFrequency;                     		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              fRandomVehicleDespawnFrequency;                   		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                nNumMaxRandomVehicles;                            		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                nRandomVehiclesSpawned;                           		// 0x02F8 (0x0004) [0x0000000000000000]              
	int                                                nRandomVehicleLastDescriptorUsed;                 		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              fRandomVehicleTimeSinceLastSpawn;                 		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              fRandomVehicleTimeSinceLastDespawn;               		// 0x0304 (0x0004) [0x0000000000000000]              
	struct FVector                                     vRandomVehicleSpawnCentreLocation;                		// 0x0308 (0x000C) [0x0000000000000000]              
	TArray< class UcCompressedAssetCustomisation* >    m_aCompressedVehicleData;                         		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AcAPBPlayerController*                       m_OwnerPC;                                        		// 0x0320 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemSpawnerActor" );

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	bool FindValidSpawnHeight ( struct FVector vGolemLocation, struct FVector* vSpawnLocation, int* nFailedPositionMidAir );
	void SpawnVehicleAtRandomLocation ( );
	void SpawnRandomVehicles ( int nNumVehicles, float fSpawnRadius, float fSpawnFrequency, float fDespawnFrequency );
	void SpawnCharacterAtRandomLocation ( );
	void SpawnRandomCharacters ( int nNumCharacters, float fSpawnRadius, float fSpawnFrequency, float fDespawnFrequency );
	void SpawnVehicleAtPlayerLocation ( int nDescriptorIndex );
	void SetVehicleDescriptor ( int nVehicleIndex, int nDescriptorIndex );
	void SetVehicleRotation ( int nVehicleIndex, struct FRotator vehicleRotation );
	void SetVehiclePosition ( int nVehicleIndex, struct FVector vehicleLocation );
	void DestroyAllVehicles ( );
	void DestroyVehicle ( int nVehicleIndex );
	int SpawnVehicle ( struct FVector vehicleLocation, struct FRotator vehicleRotation, int nDescriptorIndex );
	void SetRandomEmotes ( unsigned long bPlay );
	void SetCharacterRandomEmoteTrace ( unsigned long bPlay );
	void SetCharacterRandomEmote ( int nCharacterIndex, unsigned long bPlay );
	void SetEmoteStatus ( unsigned long bPlay );
	void SetCharacterEmoteStatusTrace ( unsigned long bPlay );
	void SetCharacterEmoteStatus ( int nCharacterIndex, unsigned long bPlay );
	void SetCharacterEmoteTrace ( struct FString emoteName, unsigned long bPlay );
	void SetCharacterEmote ( int nCharacterIndex, struct FString emoteName, unsigned long bPlay );
	void SpawnCharacterAtPlayerLocation ( int nDescriptorIndex );
	void DestroyAssetTrace ( );
	void SetAssetDescriptorTrace ( int nDescriptorIndex );
	struct FAssetTraceResult GetAssetTrace ( );
	void SetCharacterDescriptor ( int nCharacterIndex, int nDescriptorIndex );
	void SetCharacterRotation ( int nCharacterIndex, struct FRotator characterRotation );
	void SetCharacterPosition ( int nCharacterIndex, struct FVector characterLocation );
	void DestroyAllCharacters ( );
	void DestroyCharacter ( int nCharacterIndex );
	int SpawnCharacter ( struct FVector characterLocation, struct FRotator characterRotation, int nDescriptorIndex, struct FString emoteName, unsigned long bPlayEmote );
	void SetRandomVehicleDescriptorRange ( int nMin, int nMax );
	void SetRandomCharacterDescriptorRange ( int nMin, int nMax );
	void FindEmotes ( );
	void SetVehicleCustomisation ( class AcAPBVehicleBase* pVehicle, class UcCompressedAssetCustomisation* pCAC );
	void SetCharacterCustomisation ( class AcAPBPawn* pPawn, class UcCompressedAssetCustomisation* pCAC );
	class UcCompressedAssetCustomisation* LoadCustomisationFromDisk ( unsigned char eType, struct FString sFilename );
	void eventPostBeginPlay ( );
};

UClass* AGolemSpawnerActor::pClassPointer = NULL;

// Class APBGame.GolemTextureBaker
// 0x000C (0x004C - 0x0040)
class UGolemTextureBaker : public UObject
{
public:
	class UcGolemRenderTarget*                         m_pWorkTex;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsBaking : 1;                                  		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    m_pCanvas;                                        		// 0x0048 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.GolemTextureBaker" );

		return pClassPointer;
	};

	bool IsBaking ( );
	void RenderFull ( class UMaterialInterface* pMaterial, int nBorderSize );
	void Render ( class UObject* pElement, class UMaterialInterface* pMaterial, unsigned long SetMaterialParameters, struct FTextureTransform* Transform );
	void End ( );
	void Clear ( struct FLinearColor Col );
	void SetRenderTarget ( class UcGolemRenderTarget* pTexture );
	void Begin ( class UcGolemRenderTarget* pTexture );
};

UClass* UGolemTextureBaker::pClassPointer = NULL;

// Class APBGame.TESLayer
// 0x0084 (0x00C4 - 0x0040)
class UTESLayer : public UObject
{
public:
	TArray< struct FVector2D >                         m_MatRows;                                        		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcSymbolDescriptor*                          Symbol;                                           		// 0x004C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                nPrimitive;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nPrimitiveGuid;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    Mask;                                             		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInvertMask : 1;                                  		// 0x005C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FLinearColor                                HSLColour;                                        		// 0x0060 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     sDisplayName;                                     		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      TextureAddressMode;                               		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TextureBlendMode;                                 		// 0x007D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FProjectionParameters                       Projection;                                       		// 0x0080 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	struct FTransformsParameters                       Transforms;                                       		// 0x00B0 (0x0014) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.TESLayer" );

		return pClassPointer;
	};

};

UClass* UTESLayer::pClassPointer = NULL;

// Class APBGame.TESTexture
// 0x0018 (0x0078 - 0x0060)
class UTESTexture : public UcAssetCustomisation
{
public:
	class USkeletalMeshComponent*                      ReceiverMesh;                                     		// 0x0060 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                MaterialIndex;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MeshProxy;                                        		// 0x0068 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTESLayer* >                         Layers;                                           		// 0x006C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.TESTexture" );

		return pClassPointer;
	};

	void RenderNextLayer ( );
	void Render ( unsigned long bClearRT, int LayerMinIdx, int LayerMaxIdx );
	void End ( );
	void Begin ( class UcGolemRenderTarget* TargetTexture, unsigned long bWriteAlpha, unsigned long bEnableDepthPass );
	void SetReceiverMesh ( class USkeletalMeshComponent* pReceiverMesh, int nMaterialIndex );
	class UTESTexture* Create ( int NumLayers, class UObject* Package );
};

UClass* UTESTexture::pClassPointer = NULL;

// Class APBGame.TESTextureBuilder
// 0x001C (0x005C - 0x0040)
class UTESTextureBuilder : public UObject
{
public:
	struct FPointer                                    m_pDepthRenderTarget;                             		// 0x0040 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_nDepthTextureResolution;                        		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTESTexture*                                 m_pTESTexture;                                    		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bBuildInProgress : 1;                           		// 0x004C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	class UcGolemRenderTarget*                         m_pRenderTarget;                                  		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nLastLayerRendered;                             		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    m_pRenderingThreadData;                           		// 0x0058 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.TESTextureBuilder" );

		return pClassPointer;
	};

	void DilateTexture ( class UcGolemRenderTarget* pTargetTexture, class UcGolemRenderTarget* pMaskTexture, class UcGolemRenderTarget* pTempTexture, int nNumPixels );
	class UTESTextureBuilder* RetTextureBuilder ( );
	bool RenderNextLayer ( );
	void RenderAll ( );
	void Render ( unsigned long bClearRT, int LayerMinIdx, int LayerMaxIdx );
	void End ( );
	void Begin ( class UTESTexture* TextureDescriptor, class UcGolemRenderTarget* TargetTexture, unsigned long bWriteAlpha, unsigned long bEnableDepthPass );
};

UClass* UTESTextureBuilder::pClassPointer = NULL;

// Class APBGame.TESTextureClass
// 0x0038 (0x0078 - 0x0040)
class UTESTextureClass : public UObject
{
public:
	struct FString                                     m_sName;                                          		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_eType;                                          		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        Textures;                                         		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FTESPrimitive >                     m_aPrimitives;                                    		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                m_aFillEffects;                                   		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nCost;                                          		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.TESTextureClass" );

		return pClassPointer;
	};

	int GetCost ( );
};

UClass* UTESTextureClass::pClassPointer = NULL;

// Class APBGame.VehicleMaskTemplate
// 0x000C (0x004C - 0x0040)
class UVehicleMaskTemplate : public UObject
{
public:
	TArray< struct FString >                           MaskSlots;                                        		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.VehicleMaskTemplate" );

		return pClassPointer;
	};

};

UClass* UVehicleMaskTemplate::pClassPointer = NULL;

// Class APBGame.cGolemobileShared
// 0x003C (0x007C - 0x0040)
class UcGolemobileShared : public UObject
{
public:
	class UTexture2D*                                  DamagedNormal;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ScratchMask;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ScratchDiffuse_DirtDamageDustMask;                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialMapLODBase[ 0x4 ];                        		// 0x004C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialMapLOD1[ 0x4 ];                           		// 0x005C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialMapLOD2[ 0x4 ];                           		// 0x006C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGolemobileShared" );

		return pClassPointer;
	};

};

UClass* UcGolemobileShared::pClassPointer = NULL;

// Class APBGame.StaticMeshDLODActor
// 0x0000 (0x0240 - 0x0240)
class AStaticMeshDLODActor : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.StaticMeshDLODActor" );

		return pClassPointer;
	};

};

UClass* AStaticMeshDLODActor::pClassPointer = NULL;

// Class APBGame.BuildingActor
// 0x0010 (0x0250 - 0x0240)
class ABuildingActor : public AStaticMeshDLODActor
{
public:
	class UTextureDynamicLookup*                       m_EmissiveLookupTexture;                          		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bEmissiveLookupCreated : 1;                     		// 0x0244 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UMaterialInstanceConstant*                   m_FeatureMaterialInstance;                        		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNumFeatures;                                   		// 0x024C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.BuildingActor" );

		return pClassPointer;
	};

	void SetFeatureEmissive ( int nIndex, float fLevel );
};

UClass* ABuildingActor::pClassPointer = NULL;

// Class APBGame.cFeatureEmissiveManager
// 0x0024 (0x0064 - 0x0040)
class UcFeatureEmissiveManager : public UcFeatureEmissiveManagerBase
{
public:
	TArray< struct FcFeatureEmissivePeriod >           m_aPeriods;                                       		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fTransitionTime;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIncidentalTransitionsPerDay;                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AcStreamedBuildingActor* >           m_aBuildings;                                     		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nUpdateIndex;                                   		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cFeatureEmissiveManager" );

		return pClassPointer;
	};

};

UClass* UcFeatureEmissiveManager::pClassPointer = NULL;

// Class APBGame.cFeatureGroupCollectionActor
// 0x000C (0x0248 - 0x023C)
class AcFeatureGroupCollectionActor : public AActor
{
public:
	TArray< class UFeatureGroupComponent* >            FeatureGroupComponents;                           		// 0x023C (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cFeatureGroupCollectionActor" );

		return pClassPointer;
	};

};

UClass* AcFeatureGroupCollectionActor::pClassPointer = NULL;

// Class APBGame.cSkeletalMeshComponentActiveFeature
// 0x0004 (0x04AC - 0x04A8)
class UcSkeletalMeshComponentActiveFeature : public USkeletalMeshComponent
{
public:
	class AcStreamedBuildingActor*                     m_Building;                                       		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkeletalMeshComponentActiveFeature" );

		return pClassPointer;
	};

};

UClass* UcSkeletalMeshComponentActiveFeature::pClassPointer = NULL;

// Class APBGame.cStreamedLightingStaticMeshActor
// 0x0018 (0x0258 - 0x0240)
class AcStreamedLightingStaticMeshActor : public AStaticMeshActor
{
public:
	struct FPointer                                    VfTable_cObjectStreamingCallback;                 		// 0x0240 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_iLightweightStreamedObject;               		// 0x0244 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      m_bStreamedIn : 1;                                		// 0x0248 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bModifiedAndUnsaved : 1;                        		// 0x0248 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	TArray< struct FcStreamedLightingLODInfo >         LODData;                                          		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStreamedLightingStaticMeshActor" );

		return pClassPointer;
	};

};

UClass* AcStreamedLightingStaticMeshActor::pClassPointer = NULL;

// Class APBGame.cTextureStreamingTracker
// 0x0040 (0x0080 - 0x0040)
class UcTextureStreamingTracker : public UObject
{
public:
	unsigned long                                      m_bTracking : 1;                                  		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FMap_Mirror                                 m_TrackedTextures;                                		// 0x0044 (0x003C) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTextureStreamingTracker" );

		return pClassPointer;
	};

};

UClass* UcTextureStreamingTracker::pClassPointer = NULL;

// Class APBGame.CurveLight
// 0x0040 (0x0284 - 0x0244)
class ACurveLight : public ALight
{
public:
	struct FRawDistributionVector                      m_ColourCurve;                                    		// 0x0244 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      m_bNormaliseColours : 1;                          		// 0x0260 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       m_BrightnessCurve;                                		// 0x0264 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              m_fBrightnessFactor;                              		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.CurveLight" );

		return pClassPointer;
	};

};

UClass* ACurveLight::pClassPointer = NULL;

// Class APBGame.FeatureGroupActor
// 0x0004 (0x0240 - 0x023C)
class AFeatureGroupActor : public AActor
{
public:
	class UFeatureGroupComponent*                      m_FeatureGroupComponent;                          		// 0x023C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.FeatureGroupActor" );

		return pClassPointer;
	};

};

UClass* AFeatureGroupActor::pClassPointer = NULL;

// Class APBGame.FeatureGroupComponent
// 0x0090 (0x0268 - 0x01D8)
class UFeatureGroupComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    VfTable_cObjectStreamingCallback;                 		// 0x01D8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_iLightweightStreamedObject;               		// 0x01DC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FcFeatureInfo >                     m_aFeatures;                                      		// 0x01E0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                m_nMergedLOD;                                     		// 0x01EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fMergeDistance;                                 		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABuildingActor*                              m_Building;                                       		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AcStreamedBuildingActor*                     m_StreamedBuilding;                               		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_MergedWireframeColour;                          		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_DiscreteWireframeColour;                        		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubDivisionStepSize;                              		// 0x0204 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MinSubDivisions;                                  		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxSubDivisions;                                  		// 0x020C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSubDivisions : 1;                             		// 0x0210 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                m_nForcedLOD;                                     		// 0x0214 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pLightMap;                                      		// 0x0218 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct UFeatureGroupComponent_FcStreamedShadowMap1D > m_aStreamedShadowMaps;                            		// 0x021C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct UFeatureGroupComponent_FcStreamedShadowMap1D m_StreamedAOMap1D;                                		// 0x0228 (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           m_aShadowMaps;                                    		// 0x0234 (0x000C) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	class UObject*                                     m_AOMap1D;                                        		// 0x0240 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FPointer                                    m_pVertexFactory;                                 		// 0x0244 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pPositionBuffer;                                		// 0x0248 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pVertexBuffer;                                  		// 0x024C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pIndexBuffer;                                   		// 0x0250 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_ReleaseResourcesFence;                          		// 0x0254 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      m_aElements;                                      		// 0x0258 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      m_bStreamedIn : 1;                                		// 0x0264 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bModifiedAndUnsaved : 1;                        		// 0x0264 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.FeatureGroupComponent" );

		return pClassPointer;
	};

};

UClass* UFeatureGroupComponent::pClassPointer = NULL;

// Class APBGame.PointNightLight
// 0x0000 (0x0244 - 0x0244)
class APointNightLight : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.PointNightLight" );

		return pClassPointer;
	};

};

UClass* APointNightLight::pClassPointer = NULL;

// Class APBGame.RoadActor
// 0x0000 (0x0240 - 0x0240)
class ARoadActor : public AStaticMeshDLODActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RoadActor" );

		return pClassPointer;
	};

};

UClass* ARoadActor::pClassPointer = NULL;

// Class APBGame.SkeletalMeshDLODComponent
// 0x000C (0x04B4 - 0x04A8)
class USkeletalMeshDLODComponent : public USkeletalMeshComponent
{
public:
	TArray< float >                                    m_afLODDistances;                                 		// 0x04A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.SkeletalMeshDLODComponent" );

		return pClassPointer;
	};

};

UClass* USkeletalMeshDLODComponent::pClassPointer = NULL;

// Class APBGame.SkeletalPropActor
// 0x0024 (0x0274 - 0x0250)
class ASkeletalPropActor : public ASkeletalMeshActor
{
public:
	TArray< class USkeletalMesh* >                     m_aVariantMeshes;                                 		// 0x0250 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMatInstanceArray >                 m_aMaterialInstances;                             		// 0x025C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nCurrentVariant;                                		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentMatDamage;                              		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentEmissive;                               		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.SkeletalPropActor" );

		return pClassPointer;
	};

	void SetEmissiveLevel ( float fLevel );
	float RetEmissiveLevel ( );
	void SetMaterialDamageLevel ( float fLevel );
	float RetMaterialDamageLevel ( );
	void SetVariant ( int nVariant );
	int RetVariant ( );
};

UClass* ASkeletalPropActor::pClassPointer = NULL;

// Class APBGame.SkyCurveLight
// 0x0004 (0x0288 - 0x0284)
class ASkyCurveLight : public ACurveLight
{
public:
	float                                              m_fLowerBrightnessScalar;                         		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.SkyCurveLight" );

		return pClassPointer;
	};

};

UClass* ASkyCurveLight::pClassPointer = NULL;

// Class APBGame.SMPropActor
// 0x0024 (0x0260 - 0x023C)
class ASMPropActor : public AActor
{
public:
	TArray< class UStaticMeshComponent* >              m_aVariants;                                      		// 0x023C (0x000C) [0x000000000448000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         m_aMaterialInstances;                             		// 0x0248 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nCurrentVariant;                                		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentMatDamage;                              		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentEmissive;                               		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.SMPropActor" );

		return pClassPointer;
	};

	void SetEmissiveLevel ( float fLevel );
	float RetEmissiveLevel ( );
	void SetMaterialDamageLevel ( float fLevel );
	float RetMaterialDamageLevel ( );
	void SetVariant ( int nVariant );
	int RetVariant ( );
};

UClass* ASMPropActor::pClassPointer = NULL;

// Class APBGame.SpotNightLight
// 0x0000 (0x0244 - 0x0244)
class ASpotNightLight : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.SpotNightLight" );

		return pClassPointer;
	};

};

UClass* ASpotNightLight::pClassPointer = NULL;

// Class APBGame.StaticMeshDLODComponent
// 0x000C (0x0254 - 0x0248)
class UStaticMeshDLODComponent : public UStaticMeshComponent
{
public:
	TArray< float >                                    m_afLODDistances;                                 		// 0x0248 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.StaticMeshDLODComponent" );

		return pClassPointer;
	};

};

UClass* UStaticMeshDLODComponent::pClassPointer = NULL;

// Class APBGame.TerrainActor
// 0x0000 (0x0240 - 0x0240)
class ATerrainActor : public AStaticMeshDLODActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.TerrainActor" );

		return pClassPointer;
	};

};

UClass* ATerrainActor::pClassPointer = NULL;

// Class APBGame.cActorFactoryAPBVehicle
// 0x0004 (0x006C - 0x0068)
class UcActorFactoryAPBVehicle : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cActorFactoryAPBVehicle" );

		return pClassPointer;
	};

};

UClass* UcActorFactoryAPBVehicle::pClassPointer = NULL;

// Class APBGame.cAPBVehicleBase
// 0x056C (0x0B48 - 0x05DC)
class AcAPBVehicleBase : public ASVehicle
{
public:
	struct FPointer                                    VfTable_ICombatTargetingInterface;                		// 0x05DC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IDamageInterface;                         		// 0x05E0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiAmmoCarrier;                            		// 0x05E4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiRepairableVehicle;                      		// 0x05E8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x05EC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiModifiable;                             		// 0x05F0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiNPCLookAt;                              		// 0x05F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiDeliverable;                            		// 0x05F8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      m_eDriverPosition;                                		// 0x05FC (0x0001) [0x0000000000000000]              
	unsigned char                                      m_IndicatorLightActive;                           		// 0x05FD (0x0001) [0x0000000000000000]              
	unsigned char                                      m_NextIndicatorLightActive;                       		// 0x05FE (0x0001) [0x0000000000000000]              
	unsigned char                                      m_DriverIndicator;                                		// 0x05FF (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nCriticalDamageType;                            		// 0x0600 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_maxExplodingTime;                               		// 0x0601 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      vehicleType;                                      		// 0x0602 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      m_eVehicleSetupType;                              		// 0x0603 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned char                                      m_eOldVehicleSetupType;                           		// 0x0604 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eBrainAndPhysRepState;                          		// 0x0605 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eBrainAndPhysRepState_Replicated;               		// 0x0606 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eStoppingReason;                                		// 0x0607 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eInitialTheftFaction;                           		// 0x0608 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nTaskOwningCollisionGroupID;                    		// 0x0609 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nMissionTaskItemInsideOwningCollisionGroupID;   		// 0x060A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_nUsingCollisionGroupID;                         		// 0x060B (0x0001) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned char                                      m_eSpawnState;                                    		// 0x060C (0x0001) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       m_aWindowNames[ 0x4 ];                            		// 0x0610 (0x0020) [0x0000000000000000]              
	int                                                m_aWindowOpen[ 0x4 ];                             		// 0x0630 (0x0010) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FAPBVehicleSeat >                   m_aSeats;                                         		// 0x0640 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAPBVehicleDoor >                   m_aDoors;                                         		// 0x064C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAPBVehicleSocket >                 m_aVAPs;                                          		// 0x0658 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAPBVehicleSocket >                 m_aCSAGroundPositions;                            		// 0x0664 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAPBVehicleVCP >                    m_aVCPs;                                          		// 0x0670 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AcAPBPawn*                                   m_aSeatPawnsForWitnessing[ 0x4 ];                 		// 0x067C (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AcVehicleCargoInventory*                     m_CargoInventory;                                 		// 0x068C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      m_bIsStoringTaskItems : 1;                        		// 0x0690 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bHasExploded : 1;                               		// 0x0690 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDEBUGIsGoingToRespawn : 1;                     		// 0x0690 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bClientHUDMarkerEnabled : 1;                    		// 0x0690 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      m_bIsAmmoCarrierDeployed : 1;                     		// 0x0690 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bIsRepairing : 1;                               		// 0x0690 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      m_bUsingProperAsset : 1;                          		// 0x0690 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bEnableSpecialLights : 1;                       		// 0x0690 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      m_bEnableVehicleHorn : 1;                         		// 0x0690 (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      m_bVehicleHasTailLights : 1;                      		// 0x0690 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bMusicNameInfoRequested : 1;                    		// 0x0690 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bVehicleDelivered : 1;                          		// 0x0690 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bDeliveredVehicleCleanUpTimerElapsed : 1;       		// 0x0690 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bMissionVehicleCleanUpTimerElapsed : 1;         		// 0x0690 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bVehicleBrokenInto : 1;                         		// 0x0690 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bVehicleHotwired : 1;                           		// 0x0690 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bVehicleNeedsHotwiring : 1;                     		// 0x0690 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      m_bIsLocked : 1;                                  		// 0x0690 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bDisallowAllUse : 1;                            		// 0x0690 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bHasAlarm : 1;                                  		// 0x0690 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      m_bAlarmGoingOff : 1;                             		// 0x0690 (0x0004) [0x0000000000000021] [0x00100000] ( CPF_Edit | CPF_Net )
	unsigned long                                      m_bDoOldAlarm : 1;                                		// 0x0690 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bIsRecycleComplete : 1;                         		// 0x0690 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bDeployedOwnerValid : 1;                        		// 0x0690 (0x0004) [0x0000000000000020] [0x00800000] ( CPF_Net )
	unsigned long                                      m_bTransientRecycleTimerElapsed : 1;              		// 0x0690 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      m_bRecycleDeployedVehicleByTelefrag : 1;          		// 0x0690 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      m_bAllowAutoAssignCollisionCategory : 1;          		// 0x0690 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      m_bAllowUseInAllDistricts : 1;                    		// 0x0690 (0x0004) [0x0000000000004000] [0x08000000] ( CPF_Config )
	unsigned long                                      m_bInsideSpawnBlockingVolume : 1;                 		// 0x0690 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      m_bHasBeenUsedByPlayer : 1;                       		// 0x0690 (0x0004) [0x0000000000000020] [0x20000000] ( CPF_Net )
	unsigned long                                      m_bHasBeenPlayerCollisionCategory : 1;            		// 0x0690 (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	class UGolemobile*                                 m_pGolemobile;                                    		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    m_afDamage;                                       		// 0x0698 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    m_afExtremeDamage;                                		// 0x06A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned long >                            m_abWheelDamage;                                  		// 0x06B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_ExplosionType;                                  		// 0x06BC (0x0004) [0x0000000000000000]              
	class AcAPBPlayerController*                       m_LastDamageController;                           		// 0x06C0 (0x0004) [0x0000000000000000]              
	float                                              m_fLastDamageTimer;                               		// 0x06C4 (0x0004) [0x0000000000000000]              
	float                                              m_fNeutralDamageTimer;                            		// 0x06C8 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxHealth;                                     		// 0x06CC (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                m_eDamageHandlingEffectIndex;                     		// 0x06D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FPointer                                    m_pCurrentDamageHandlingEffect;                   		// 0x06D4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fLastTimeIndicatorLightToggled;                 		// 0x06D8 (0x0004) [0x0000000000000000]              
	float                                              m_fCriticalDamageRate;                            		// 0x06DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fDamageRemainder;                               		// 0x06E0 (0x0004) [0x0000000000000000]              
	int                                                m_nVisualDamage;                                  		// 0x06E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nVisualDamageMisc;                              		// 0x06E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fVisualDamageArmour;                            		// 0x06EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fFinalDamageArmour;                             		// 0x06F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLightDamageThreshold;                          		// 0x06F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCollisionDamageThreshold;                      		// 0x06F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UcDamageFilterComponent*                     m_DamageFilterComponent;                          		// 0x06FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nLastHealth;                                    		// 0x0700 (0x0004) [0x0000000000000000]              
	float                                              m_lastExternalDamageTime;                         		// 0x0704 (0x0004) [0x0000000000000000]              
	class UcPseudoKinematicComponent*                  pseudoKinComp;                                    		// 0x0708 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FRigidBodyState                             replicatedRBState;                                		// 0x070C (0x003C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fTimeDisable;                                     		// 0x0748 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fTimeRespawn;                                     		// 0x074C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fTimeCleanUp;                                     		// 0x0750 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fViewingAngle;                                  		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fViewingDistance;                               		// 0x0758 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHUDMarkerID;                                   		// 0x075C (0x0004) [0x0000000000000000]              
	struct FName                                       m_sCurrentState;                                  		// 0x0760 (0x0008) [0x0000000000000000]              
	struct FAPBVehicleStateFSM                         stReplicatedStateFSM;                             		// 0x0768 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     InitialLocation;                                  		// 0x0774 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x0780 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     m_VehicleExtents;                                 		// 0x078C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UcAmmoDepotComponent*                        m_AmmoCarrierComponent;                           		// 0x0798 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UiVehicleRepairer*                           m_repairer;                                       		// 0x079C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x07A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              m_fLastTakeDamageTimeStamp;                       		// 0x07A4 (0x0004) [0x0000000000000000]              
	float                                              m_fRepairPercentage;                              		// 0x07A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nPointsRepaired;                                		// 0x07AC (0x0004) [0x0000000000000000]              
	class UcNPCDriverSkeletalMeshComponent*            NPCDriverMesh;                                    		// 0x07B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nID;                                            		// 0x07B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nTypeID;                                        		// 0x07B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fLocomotionSpeed;                               		// 0x07BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FSReactionIDReplicated                      m_ReactionID_Replicated;                          		// 0x07C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UcNPCVehicleBrain*                           m_pBrain;                                         		// 0x07C4 (0x0004) [0x0000000000000000]              
	int                                                m_bNPCDriverUsingProperAsset;                     		// 0x07C8 (0x0004) [0x0000000000000000]              
	int                                                m_nVehicleCategory;                               		// 0x07CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UcAudioNPCInterface*                         m_AudioNPCInterface;                              		// 0x07D0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FSpeedInfo                                  m_SpeedData_Replicated;                           		// 0x07D4 (0x0054) [0x0000000000000020]              ( CPF_Net )
	struct FSpeedInfo                                  m_SpeedData_ReplicatedInitial;                    		// 0x0828 (0x0054) [0x0000000000000020]              ( CPF_Net )
	struct FPositionAndOrientationInfo                 m_PositionAndOrientation_ReplicatedInitial;       		// 0x087C (0x0040) [0x0000000000000020]              ( CPF_Net )
	struct FPositionAndOrientationInfo                 m_PositionAndOrientation_Replicated;              		// 0x08BC (0x0040) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fOffsetFromLaneCenter;                          		// 0x08FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_LastReplicatedRouteIndex;                       		// 0x0900 (0x0004) [0x0000000000000000]              
	int                                                m_LastReplicatedDetourRouteIndices[ 0x3 ];        		// 0x0904 (0x000C) [0x0000000000000000]              
	int                                                m_LastUsedPositionID;                             		// 0x0910 (0x0004) [0x0000000000000000]              
	int                                                m_LastUsedSpeedID;                                		// 0x0914 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vFarOffset;                                     		// 0x0918 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vWorstOffset;                                   		// 0x0924 (0x000C) [0x0000000000000000]              
	float                                              m_fFarCamDist;                                    		// 0x0930 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  WreckedVehicleDiffuse;                            		// 0x0934 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  WreckedVehicleDiffuseNoAlpha;                     		// 0x0938 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  WreckedVehicleNormal;                             		// 0x093C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  OriginalExteriorDiffuse;                          		// 0x0940 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  OriginalExteriorNormal;                           		// 0x0944 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  OriginalWheelDiffuse;                             		// 0x0948 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  OriginalWheelNormal;                              		// 0x094C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  OriginalInteriorDiffuse;                          		// 0x0950 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  OriginalInteriorNormal;                           		// 0x0954 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioEngineType;                               		// 0x0958 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioExhaustType;                              		// 0x095C (0x0004) [0x0000000000000000]              
	int                                                m_nAudioTurboType;                                		// 0x0960 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioTransmissionType;                         		// 0x0964 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioDumpValveType;                            		// 0x0968 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioGearChangeType;                           		// 0x096C (0x0004) [0x0000000000000000]              
	int                                                m_nAudioHornType;                                 		// 0x0970 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioSirenType;                                		// 0x0974 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioAmpType;                                  		// 0x0978 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioSpeakerType;                              		// 0x097C (0x0004) [0x0000000000000000]              
	float                                              m_fAudioWheelForceThreshold;                      		// 0x0980 (0x0004) [0x0000000000000000]              
	float                                              m_fAudioWheelForceMax;                            		// 0x0984 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorOpenFront;                   		// 0x0988 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorOpenRearSide;                		// 0x098C (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorOpenBack;                    		// 0x0990 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorCloseFront;                  		// 0x0994 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorCloseRearSide;               		// 0x0998 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorCloseBack;                   		// 0x099C (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDSuspensionType;                  		// 0x09A0 (0x0004) [0x0000000000000000]              
	float                                              m_fAudioEnclosednessMax;                          		// 0x09A4 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseID_LC_VehicleType;                 		// 0x09A8 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseID_DamageType;                     		// 0x09AC (0x0004) [0x0000000000000000]              
	class UcAudioVehicleInterface*                     m_AudioVehicleInterface;                          		// 0x09B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVehicleMusicPlaybackInfo                   m_MusicPlaybackInfo;                              		// 0x09B4 (0x002C) [0x0000000000000020]              ( CPF_Net )
	struct FVehicleMusicNameInfo                       m_MusicNameInfo;                                  		// 0x09E0 (0x0028) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	class AcAPBPlayerController*                       m_pMusicOwner;                                    		// 0x0A08 (0x0004) [0x0000000000000000]              
	int                                                m_nTrackID;                                       		// 0x0A0C (0x0004) [0x0000000000000000]              
	float                                              m_fStyleVectorDistance;                           		// 0x0A10 (0x0004) [0x0000000000000000]              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0A14 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPointer                                    m_pSddVehicleSetupType;                           		// 0x0A18 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pNPCDriverActor;                                		// 0x0A1C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class AcTaskObjective*                             m_TaskObjective;                                  		// 0x0A20 (0x0004) [0x0000000000000000]              
	int                                                m_eDeliverableBatch;                              		// 0x0A24 (0x0004) [0x0000000000000000]              
	class AcTaskTargetVehicleSpawner*                  m_VehicleSpawner;                                 		// 0x0A28 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxHealthOld;                                  		// 0x0A2C (0x0004) [0x0000000000000000]              
	int                                                m_eTaskOperationID;                               		// 0x0A30 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fTimeSinceLastRecycleCheck;                     		// 0x0A34 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastForcedRecycleCheck;               		// 0x0A38 (0x0004) [0x0000000000000000]              
	class UiDisplayPoint*                              m_OwningDisplayPoint;                             		// 0x0A3C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0A40 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0A44 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcBlobShadowComponent*                       BlobShadow;                                       		// 0x0A48 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcParticleDecalComponent*                    DecalTest;                                        		// 0x0A4C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FCompactGolemobileDescriptor                m_CustomisationGuids;                             		// 0x0A50 (0x0020) [0x0000000000000020]              ( CPF_Net )
	struct FCompactGolemobileDescriptor                m_PreviousCustomisationGuids;                     		// 0x0A70 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nIncrementalID;                                 		// 0x0A90 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FNPCDriverData                              m_NPCDriverData;                                  		// 0x0A94 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FNPCDriverData                              m_NPCDriverDataOld;                               		// 0x0AA4 (0x0010) [0x0000000000000000]              
	float                                              m_fAlarmFlashDelta;                               		// 0x0AB4 (0x0004) [0x0000000000000000]              
	class AcAPBPlayerController*                       m_DeployedOwner;                                  		// 0x0AB8 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class AcAPBPlayerController*                       m_DeployedOwnerLastVaild;                         		// 0x0ABC (0x0004) [0x0000000000000000]              
	float                                              m_fAbandonedTime;                                 		// 0x0AC0 (0x0004) [0x0000000000000000]              
	TArray< struct UiModifiable_FModifierData >        m_aActiveModifiers;                               		// 0x0AC4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FModifierEffect                             m_MatesRatesModifier;                             		// 0x0AD0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_QuickRepairModifier;                            		// 0x0AD8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_EngineOverhaulModifier;                         		// 0x0AE0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_CriticalThresholdModifier;                      		// 0x0AE8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_CriticalTimerModifier;                          		// 0x0AF0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_QuickResupplyModifier;                          		// 0x0AF8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_AmmoRadiusIncreaseModifier;                     		// 0x0B00 (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fFurtherVAPAdjustAmount;                        		// 0x0B08 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nNPCLookAtEventID;                              		// 0x0B0C (0x0004) [0x0000000000000000]              
	int                                                m_nSirenWorldEventID;                             		// 0x0B10 (0x0004) [0x0000000000000000]              
	int                                                m_nHornWorldEventID;                              		// 0x0B14 (0x0004) [0x0000000000000000]              
	int                                                m_nNPCLookAtPriority;                             		// 0x0B18 (0x0004) [0x0000000000000000]              
	int                                                m_nNPCAvoidVehicleEventID;                        		// 0x0B1C (0x0004) [0x0000000000000000]              
	struct FPvPFlags                                   m_PvPFlags;                                       		// 0x0B20 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInstanceConstant*                   m_pDriverClothingMatInst;                         		// 0x0B28 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_pDriverRacialMatInst;                           		// 0x0B2C (0x0004) [0x0000000000000000]              
	class UcSkelControlLCBodyRotation*                 m_pLCBodyRotationControl;                         		// 0x0B30 (0x0004) [0x0000000000000000]              
	struct FDouble                                     m_fLastOutOfSyncReplicationTime;                  		// 0x0B34 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __VehicleOnToDEvent__Delegate;                    		// 0x0B3C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBVehicleBase" );

		return pClassPointer;
	};

	int GetNumPlayersUsingGroupVehicle ( );
	void GetActualVelocity ( struct FVector* OutActualVelocity );
	void eventCreateAudioNPCInterface ( );
	void DoorOpenAnimNotify ( unsigned char VehiclePosition );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void eventVehicleUnSubscribeToToDManager ( class AcToDManager* ToDManager );
	void eventVehicleSubscribeToToDManager ( class AcToDManager* ToDManager );
	void DoToDStateChange ( );
	void VehicleOnToDEvent ( int nMessage, int nParam, class AActor* Emitter );
	void CleanUpDisabledVehicle ( );
	void VehicleTransientRecycleTimer ( );
	void SetDeployedOwner ( class AcAPBPlayerController* NewOwner, unsigned long bDoRecylceDeployedVehicle, unsigned long bTelefragDeployedVehicle );
	void GetDoorAnimationSequences ( unsigned char eVehicleSeat, struct FVehicleDoorAnimationSet* SDDRow );
	void SetAlarm ( unsigned long bAlarmOn );
	void ReceivedReactionIDOnAClient ( );
	unsigned char GetBrainAndPhysRepState ( );
	class UcNPCVehicleBrain* GetBrain ( );
	void BrainAndPhysRepStateLimbo ( );
	void BrainAndPhysRepStateDisconnected ( );
	void BrainAndPhysRepStateActive ( );
	void BrainAndPhysRepStateInit ( );
	void ProcessBrainAndPhysRepStateChange ( unsigned char pr_State );
	void SetRandomVehicleColour ( );
	void InitialiseBrain ( );
	void DriverBeingEjected ( class AcAPBPawn* APBPawnEjecting );
	class AcNPCDriverSkeletalMeshActor* GetNPCDriverActor ( );
	void NotifyCustomisationChanged ( );
	bool CanPhysicallyEjectNPCDriver ( class AcAPBPawn* PawnEjecting, unsigned char pr_eVehiclePositionIndex );
	void GetNPCInsideVehicleAnimationSequences ( unsigned char eVehicleSeat, struct FVehicleNPCInsideAnimationSet* SDDRow );
	int GetNPCInsideVehicleAnimationSet ( unsigned char eVehicleSeat );
	void ClearNPCDriverComponent ( );
	void NPCDriverDataChanged ( );
	class AcNPCDriverSkeletalMeshActor* SpawnNPCDriverActor ( class AcAPBPawn* pr_pEjectingPawn, unsigned long pr_bEjectedByEnforcer, unsigned long pr_bEjectedFromPassengerSide );
	void RemoveVehicleMissionTaskItemInsideGroup ( );
	void RemoveVehicleTaskGroup ( );
	void RemoveVehicleUsingGroup ( class AcAPBPawn* APBPawnException, unsigned long bCheckGroupUsing );
	void RemoveNPCDriverComponent ( );
	void AddNPCDriverComponent ( int nNPCTypeDriver, int nAssetIndex );
	int GetIncrementalID ( );
	void UpdateClientHUDMarkerState ( );
	void DestroyClientSideHUDMarker ( );
	void CreateClientSideHUDMarker ( );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool TryExitPosAPB ( class APawn* ExitingPawn, unsigned char eVehiclePosition, unsigned long bInsideVehicle, struct FVector ExitPos, unsigned long bMustFindGround, unsigned long bAllowTeleportDownToGround, unsigned long bAnimateOut );
	bool IsVehicleStoringTaskItems ( );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void JumpOffPawn ( );
	void Destroyed_HandleDriver ( );
	unsigned char GetAdjacentSeat ( unsigned char eVPIFrom );
	void SwitchSeats ( class AcAPBPawn* ApbPawn, unsigned char eVPISwitchTo, unsigned char eSeatActionEnum );
	bool CanSwitchSeats ( class AcAPBPawn* ApbPawn, unsigned char eVPIFrom, unsigned char eVPISwitchTo, unsigned char eSeatActionEnum );
	void CancelDoorAnimation ( );
	void eventAnimateDoorClosed ( unsigned char eVehiclePositionIndex );
	void eventPlayDoorAnimation ( unsigned char eVehiclePositionIndex, unsigned char eDoorInteractionAnimation );
	void PostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void RenderIKSockets ( );
	void RenderVCPSockets ( );
	void RenderSeatSockets ( );
	void RenderDoorSockets ( );
	void RenderVAPAdjustedSockets ( class AcAPBPawn* ApbPawn );
	void RenderVAPSockets ( );
	void RenderCSAGroundPositionSockets ( );
	void eventRenderDebugSockets ( );
	void eventRenderViewCones ( );
	bool IsInsideFieldOfView ( struct FVector vPosition );
	void ClientTriggerVandalismVFX ( );
	void ClientTriggerDespawnVFX ( );
	void ClientTriggerSpawnVFX ( );
	void ClientNotifyChangedSpawnState ( );
	void SetSpawnState ( unsigned char eNewState );
	unsigned char RetSpawnState ( );
	void NotifyBombExploded ( );
	void NotifyBombDefused ( );
	void NotifyBombPlanted ( );
	bool IsBombPlanted ( );
	void DefuseBomb ( class AcAPBPlayerController* pDefuserPC );
	void PlantBomb ( class AcAPBPlayerController* pBomberPC );
	bool IsAPassenger ( class AcAPBPawn* P );
	bool CanPerformFreeVehicleBreakInInteraction ( class APawn* User, int nIPIndex );
	bool CanPerformVehicleAmmoCarrierInteraction ( unsigned char eCSA, class APawn* User, int nIPIndex );
	bool CanPerformVehicleEntryInteraction ( class APawn* User, int nIPIndex );
	bool CanPerformCargoInteraction ( class APawn* User, int nIPIndex );
	bool GetFakeVAP ( int eVPIndex, struct FVector* outFakeVAP );
	void GetCSAGroundPosition ( unsigned char eVehiclePositionIndex, struct FVector* outGroundPosition );
	bool CanPerformTaskInteraction ( unsigned char eCSA, class APawn* User, int nIPIndex );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	unsigned char RetInteractiveActorStateScript ( );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void UpdateVisualDamageAmounts ( );
	void SetExtremeDamageLevel ( unsigned char eDamageIndex, float fAmount );
	void SetDamageLevel ( unsigned char eDamageIndex, float fAmount );
	float RetExtremeDamageLevel ( unsigned char eDamageIndex );
	float RetDamageLevel ( unsigned char eDamageIndex );
	void OnRepairOperationUpdated ( class UiVehicleRepairer* repairer, int nCost, int nTotalCost, float fRepairPercentage );
	void OnRepairEnd ( class UiVehicleRepairer* repairer );
	void OnRepairBegin ( class UiVehicleRepairer* repairer );
	void RepairDamage ( int nAmount );
	int RetMaxRepairCost ( );
	float eventRetMaxRepairTimeSecs ( );
	int RetMaxHealth ( );
	int RetHealth ( );
	int RetDamageAmount ( );
	float RetDamagePercentage ( );
	class UiVehicleRepairer* RetRepairer ( );
	bool IsRepairing ( );
	float RetLastDamageTimeStamp ( );
	bool FindRepairer ( class UiVehicleRepairer** repairer );
	void eventTelefraggedWrapper ( );
	void eventSuicideWrapper ( );
	void Suicide ( );
	void RecycleDeployedVehicle ( unsigned long bTelefrag );
	void UpdateClientState ( );
	unsigned char GetVehicleType ( );
	void SetVehicleType ( unsigned char eNewType );
	void CheckForRespawn ( );
	void ResetInvertedFlag ( );
	void ResetToZero ( );
	void eventEmptyVehicle ( unsigned long bLeaveImmediately, unsigned long bForceOut, unsigned long bGetOut, unsigned long bIgnoreDeadPlayers );
	void DBGEmptyVehicle ( );
	void ServerEmptyVehicle ( );
	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	class AcAPBPlayerController* RetAmmoCarrierOwner ( );
	void SetAmmoCarrierDepotDeployed ( unsigned long bDeployed );
	bool CanDeployAmmoCarrierDepot ( );
	bool IsAmmoCarrierDepotDeployed ( );
	bool IsAmmoCarrierFnModActive ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
	float RetMissionCleanupTimerDuration ( );
	void OnMissionCleanupTimerElapsed ( );
	float RetDeliverCleanupTimerDuration ( );
	void OnDeliveryCleanupTimerElapsed ( );
	void SetDeliverableHUDMarkerVisibility ( unsigned long bHideAllFromOwners, unsigned long bHideAllFromOpposition );
	unsigned char RetDeliverableState ( );
	bool IsDelivered ( );
	void TriggerHackingEvent ( class AcAPBPlayerController* pHacker );
	void TriggerSabotageEvent ( class AcAPBPlayerController* pSaboteur );
	void TriggerCSIEvent ( class AcAPBPlayerController* pInvestigator );
	void TriggerArsonEvent ( class AcAPBPlayerController* DamageInstigator );
	void OnVandalismDamageEnd ( );
	void OnVandalismDamageBegin ( class AcAPBPlayerController* DamageInstigator );
	void OnTaskCSACompleted ( class AcAPBPlayerController* pPC, unsigned char eCSA, int nIPIndex );
	void OnTaskCSACancelled ( class AcAPBPlayerController* pPC, unsigned char eCSA, int nIPIndex );
	void OnTaskCSAStarted ( class AcAPBPlayerController* pPC, unsigned char eCSA, int nIPIndex );
	bool IsTaskCSA ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex );
	unsigned char RetTaskOperationCategory ( );
	bool IsTaskVehicleAllowedToRespawn ( );
	class AcTaskTargetVehicleSpawner* RetVehicleSpawner ( );
	int RetVehicleBatch ( );
	void ClearVehicleBatch ( );
	void SetVehicleBatch ( int eDeliverableBatch );
	void NotifyTaskVehicleSpawnSucceeded ( );
	void NotifyTaskVehicleSpawnFailed ( );
	void NotifyTaskVehicleRespawnBegin ( );
	void EndParkedVehicleTask ( );
	void BeginParkedVehicleTask ( class AcTaskTargetVehicleSpawner* VehicleSpawner, class AcTaskObjective* pTaskObjective );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	struct FString GetSetupinfoAssetNameFor ( unsigned char eVehicleSetupType );
	struct FString GetArchetypeAssetNameFor ( unsigned char eVehicleSetupType );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	void eventReplicateVehicleImpactEffect ( struct FVector hitPosition, struct FVector Normal, struct FVector impactVelocity, unsigned long scrape, class AActor* Other );
	void SetUpIncrementalID ( );
	void GetSVehicleDebug ( TArray< struct FString >* DebugInfo );
	bool CheckUsingCollisionGroupConsistency ( );
	bool IsBeingUsedBy ( int nCollisionGroupID, class AcAPBPawn* APBPawnException );
	bool IsVehicleEmpty ( );
	bool IsVehicleEmptyAndSeatUseNone ( unsigned long bCountTaskItems );
	int eventGetPlayersUsingVehicleCount ( );
	int eventGetPlayersInsideCount ( );
	void eventCancelRepair ( );
	bool PassengerLeave ( class AcAPBPawn* P, unsigned long bForceLeave, unsigned long bGetOut, unsigned long bAnimateDoorClosedIfPossible, unsigned long bResetVehicleUseData );
	bool PassengerEnter ( class AcAPBPawn* P );
	unsigned char FindVehicleExit ( class AcAPBPawn* APBPawnExiting, unsigned char eVehiclePosition, unsigned long bInsideVehicle, unsigned long bAllowTeleportDownToGround, unsigned long bAnimateOut );
	bool DriverLeave ( unsigned long bForceLeave, unsigned long bGetOut, unsigned long bAnimateDoorClosedIfPossible, unsigned long bResetVehicleUseData );
	void DriverDied ( );
	bool DriverEnter ( class AcAPBPawn* P );
	bool FindClosestSeatIndex ( struct FVector vecLocation, unsigned char* eSeatPosition );
	int FindClosestEmptySeatIndex ( struct FVector vecLocation, unsigned long bCanDriveVehicle );
	bool DisconnectBrain ( unsigned long bSetTimer );
	void PerformVehicleEntryInteraction ( class AcAPBPawn* P, int nIPIndex );
	class AcVehicleCargoInventory* RetCargoInventory ( );
	class AcEquipableTaskItem* TryRetrieveCargoTaskItem ( class AcAPBPlayerController* pRetrievingPlayer );
	void PerformCargoInteraction ( class APawn* P, int nIPIndex );
	void UseInteractionPoint ( class APawn* P, int nIPIndex );
	void SetUnusable ( unsigned long bUnusable );
	void SetDoorsLocked ( unsigned long bIsLocked );
	bool CanEnterVehicleDoor ( class AcAPBPawn* PawnEnter, unsigned char eDoorIndexEnter, unsigned long bInitialCheckBeforeVehicleInteraction );
	bool CanInteractWithVehicleCommon ( class AcAPBPawn* APBPawng, unsigned char eDoorIndexEnter, unsigned long bSuppressEvents );
	void SetMaxSpeed ( float SpeedInMPH );
	void OnClientReceiveCriticalDamage ( );
	void ForceCriticalDamage ( );
	bool FilterHealing ( class UClass* DamageType );
	bool FilterDamage ( class UClass* DamageType );
	bool IsFiltered ( class UClass* DamageType );
	void UpdateDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void RemoveDamageType ( class UClass* DamageType );
	void AddDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void eventHealDamageTimed ( float TimePeriod, int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamageTimed ( float TimePeriod, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool eventRestore ( int Amount, class AController* Healer, class UClass* DamageType );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void OnHealthChanged ( );
	void LogVehicleDestroyedNative ( int nDamage, int nWeaponType );
	bool CanBeDamagedBy ( class AcAPBPlayerController* Player );
	float GetTimeDurationForNeutralDamage ( );
	float GetTimeDurationLastDamageIsValid ( );
	bool CanTakeDamage ( int DamageAmount, class AController* EventInstigator, class UClass* DamageType, class AActor* DamageCauser, struct FVector* HitLocation, struct FVector* Momentum, struct FTraceHitInfo* HitInfo );
	void eventTookExternalDamage ( );
	bool eventIsSoft ( );
	bool eventIsHard ( );
	float RetTimeToDisabled ( );
	void Dying_DisableMe ( );
	void Dying_ExplodeMe ( );
	void ExplodeWreck ( );
	void NotifyBreakInEnd ( class AcAPBPlayerController* BreakinController, unsigned long bCancelled );
	void NotifyBreakInBegin ( class AcAPBPlayerController* BreakinController );
	void NotifyVandalised ( class AcAPBPlayerController* VandalisingController );
	void NotifyHotwired ( class AcAPBPlayerController* StealingController );
	void NotifyBrokenInto ( class AcAPBPlayerController* BreakinController );
	void Explode ( );
	bool eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nWeaponType );
	void DiedNative ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int nWeaponType );
	void RepNotifySetupType ( );
	void eventCallSuperReplicated ( struct FName VarName );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void SetEmissiveLightValue ( unsigned char eType, float fAmount );
	void ClientUpdateVisualDamage ( );
	void UpdateVisualDamage ( );
	void TakeVisualDamage ( struct FVector Direction, float fDamage, float fFinalDamage );
	void RetExplosionOcclusionExtents ( TArray< struct FVector >* Verts, struct FVector* ExplosionLocation );
	bool IsStaticTarget ( );
	bool IsDynamicTarget ( );
	bool CanBeDamaged ( class AcAPBPlayerController* PC );
	bool CanBeTargeted ( class AcAPBPlayerController* PC );
	bool IsPawnUsingAnySeatInVehicleExceptSeat ( class AcAPBPawn* ApbPawn, unsigned char eSeatExempt );
	bool IsPawnUsingAnySeatInVehicle ( class AcAPBPawn* ApbPawn );
	void SetAllSeatUse ( unsigned char eSeatExempt, unsigned char eSeatUse, class AcAPBPlayerController* Occupier, class AcAPBPawn* OccupierPawn );
	bool CanUseSeatFromOutside ( class AcAPBPawn* ApbPawn, unsigned char eSeat );
	class AcAPBPlayerController* RetSeatOccupyingController ( unsigned char eSeat );
	class AcAPBPawn* RetSeatOccupyingPawn ( unsigned char eSeat );
	unsigned char RetSeatUse ( unsigned char eSeat );
	void SetSeatUse ( unsigned char eSeat, unsigned char eSeatUse, class AcAPBPlayerController* Occupier, class AcAPBPawn* OccupierPawn );
	bool IsSeatUseStateUsingVehicle ( unsigned char eSeat );
	void UpdateWindowBone ( int Window );
	void eventUpdateWindowState ( );
	void eventShowWindow ( unsigned char Window );
	void eventHideWindow ( unsigned char Window );
	bool IsDirectionWithinFiringArc ( struct FRotator aimDirection, unsigned char SeatPosition );
	class UcVehicleSetupInfo* GetTempAssetForType ( unsigned char eVehicleSetupType );
	class UcVehicleSetupInfo* GetTempAsset ( );
	void InitSeatCameraSetups ( );
	void eventSetUpVehicle ( unsigned long bKeepLogicalState );
	void NotifyLCSirenStopped ( );
	void NotifyLCSirenStarted ( );
	void NotifyLCHornStopped ( );
	void NotifyLCHornStarted ( );
	int InitVCPInfo ( TArray< struct FName > Names );
	float GetLeanInAnimTime ( unsigned char eVehiclePositionIndex );
	bool GetSeatSocketName ( unsigned char eVehiclePositionIndex, struct FName* SocketName );
	bool GetVCPSocketName ( unsigned char eVehiclePositionIndex, struct FName* SocketName );
	bool GetVCPLocation ( unsigned char eVehiclePositionIndex, struct FVector* OutLocation, struct FRotator* OutRotation );
	void GetSeatLocation ( unsigned char eVehiclePositionIndex, struct FVector* OutLocation, struct FRotator* OutRotation );
	void GetDoorLocation ( unsigned char eVehiclePositionIndex, struct FVector* OutLocation );
	bool GetVAPAdjusted ( unsigned char eVehiclePositionIndex, class AcAPBPawn* PawnExiting, struct FVector* outVAP );
	void GetVAP ( unsigned char eVehiclePositionIndex, struct FVector* outVAP, struct FRotator* OutRotation );
	void GetAxleOffsets ( float* fFrontAxleOffset, float* fRearAxleOffset );
	struct FVehicleSetupType RetSddVehicleSetupTypeScript ( );
	void OnSpawned ( );
	void OnTrackInfoUpdated ( );
	struct FVector GetLookAtPosition ( );
	void SetLookAtPriority ( int pr_nLookAtPriority );
	int GetLookAtPriority ( );
	struct FModifierEffect RetEngineOverhaulModifier ( );
	void UnWreckVehicle ( );
	void WreckVehicle ( );
	void DrivingStatusChanged ( );
	void serverStopVehicleHorn ( );
	void serverStartVehicleHorn ( );
	void StopVehicleHorn ( );
	void StartVehicleHorn ( );
	void serverToggleSpecialLights ( );
	void ToggleSpecialLights ( );
	void eventTick ( float DeltaTime );
	void SetVehicleDamageEffect ( int nDamageHandlingEffect );
	void UpdateDriverIndicator ( );
	void serverIndicateRight ( );
	void serverIndicateLeft ( );
	void IndicatorRight ( );
	void IndicatorLeft ( );
	void ClearIndicatorLightStatus ( );
	void SetActiveIndicatorLight ( unsigned char pr_IndicatorLightActive );
	void UpdateIndicatorLights ( );
	int GetCollisionDamageTriggerAlarm ( );
	void AlarmTimer ( );
	bool IsModifierActiveNative ( unsigned char eCategory );
	bool GetModifierEffectNative ( unsigned char eCategory, struct FModifierEffect* OutEffect );
};

UClass* AcAPBVehicleBase::pClassPointer = NULL;

// Class APBGame.cAPBVehicle
// 0x0F8C (0x1AD4 - 0x0B48)
class AcAPBVehicle : public AcAPBVehicleBase
{
public:
	float                                              aRPMSamples[ 0x32 ];                              		// 0x0B48 (0x00C8) [0x0000000000000000]              
	float                                              aFakeRPMSamples[ 0x32 ];                          		// 0x0C10 (0x00C8) [0x0000000000000000]              
	float                                              aAudioRPMSamples[ 0x32 ];                         		// 0x0CD8 (0x00C8) [0x0000000000000000]              
	float                                              aPowerSamples[ 0x32 ];                            		// 0x0DA0 (0x00C8) [0x0000000000000000]              
	struct FVehicleStateDelta                          m_OldVehicleMoves[ 0x32 ];                        		// 0x0E68 (0x0AF0) [0x0000000000000000]              
	struct FVehicleStateInfo                           m_LastFrameVehicleState;                          		// 0x1958 (0x0034) [0x0000000000000000]              
	unsigned char                                      m_OldBrainAndPhysRepState;                        		// 0x198C (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bHasMovedSinceLastUpdate : 1;                   		// 0x1990 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bActivateEdgeUsage : 1;                         		// 0x1990 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_DEBUG_ShowDebugForDriver : 1;                   		// 0x1990 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FVehicleStateInfo                           m_TargetVehicleState;                             		// 0x1994 (0x0034) [0x0000000000000000]              
	struct FVehicleStateInfo                           m_LastReceivedServerState;                        		// 0x19C8 (0x0034) [0x0000000000000000]              
	struct FVehicleStateInfo                           m_MostRecentServerState;                          		// 0x19FC (0x0034) [0x0000000000000000]              
	int                                                m_nNextVehicleMove;                               		// 0x1A30 (0x0004) [0x0000000000000000]              
	float                                              m_fServerSideTimestamp;                           		// 0x1A34 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentDragForce;                              		// 0x1A38 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MAX_BRAKE_DECELERATION;                           		// 0x1A3C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              THROTTLE_FORCE_MULTIPLIER;                        		// 0x1A40 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LONGITUDNAL_FORCE_MULTIPLIER;                     		// 0x1A44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LATERAL_FORCE_MULTIPLIER;                         		// 0x1A48 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DRAG_FORCE_MULTIPLIER;                            		// 0x1A4C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       wheelBones[ 0x4 ];                                		// 0x1A50 (0x0020) [0x0000000000000000]              
	struct FPointer                                    nxWheels[ 0x4 ];                                  		// 0x1A70 (0x0010) [0x0000000000000000]              
	struct FVector                                     m_vMovementForce;                                 		// 0x1A80 (0x000C) [0x0000000000000000]              
	float                                              m_fCurrentHandbrakeFactor;                        		// 0x1A8C (0x0004) [0x0000000000000000]              
	float                                              HANDBRAKE_RAMPDOWN_TIME;                          		// 0x1A90 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              HANDBRAKE_THRESHOLD_SPEED;                        		// 0x1A94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fFrontRearBrakeBalance;                         		// 0x1A98 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSpeed;                                      		// 0x1A9C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fMaxReverseSpeed;                               		// 0x1AA0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nWheelDebugMode;                                		// 0x1AA4 (0x0004) [0x0000000000000000]              
	class UcVehicleSetupInfo*                          m_pVehicleSetup;                                  		// 0x1AA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_CurrentViewRotation;                            		// 0x1AAC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class URWTechReachSpec* >                  m_aRegisteredEdgeList;                            		// 0x1AB8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pLCBroadBoundingVolume;                         		// 0x1AC4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pLCNarrowBoundingVolume;                        		// 0x1AC8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nTickCount;                                     		// 0x1ACC (0x0004) [0x0000000000000000]              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x1AD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBVehicle" );

		return pClassPointer;
	};

	float HermiteEval2 ( float Slip, unsigned long bLongForces );
	void DisplayWheelsDebug2 ( class AHUD* HUD, float YL, unsigned long bLongForces );
	void DeRegisterWithPGEdges ( );
	void ServerIllegalLocation_APB ( );
	void ClientIllegalLocation_APB ( );
	void RepNotifySetupType ( );
	void SwitchVehicleSetup ( class UcVehicleSetupInfo* pNewVehicleSetup, unsigned long bSwitchSetupButKeepType );
	void PerformVehicleEntryInteraction ( class AcAPBPawn* P, int nIPIndex );
	struct FRotator GetViewRotation ( );
	void SetTorqueMods ( float fMod1, float fMod2, float fMod3, float fMod4 );
	void ServerSetTorqueMods ( float fMod1, float fMod2, float fMod3, float fMod4 );
	void WDB ( int nNewDebugMode );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ShowDebugForDriver ( );
	void PostBeginPlay ( );
	void ResetLocalPredictionState ( );
	void ApplyClientsideCorrection ( );
	void CalculateCorrectedPosition ( );
	void PushVehicleMove ( float TimeStamp, float TimeDelta, struct FVector PosDelta, struct FRotator RotDelta, struct FVector LinVelDelta, struct FVector AngVelDelta );
};

UClass* AcAPBVehicle::pClassPointer = NULL;

// Class APBGame.cParkedVehicleSpawner
// 0x001C (0x0258 - 0x023C)
class AcParkedVehicleSpawner : public AActor
{
public:
	class AcAPBVehicle*                                m_pVehicle;                                       		// 0x023C (0x0004) [0x0000000000000000]              
	class UcFlatTexturedQuadComponent*                 m_pBayMarker;                                     		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FEnumeratedName                             m_eVehicleCategory;                               		// 0x0244 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nParkedVehicleCategoryOrdinal;                  		// 0x0254 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cParkedVehicleSpawner" );

		return pClassPointer;
	};

	class AcAPBVehicle* RetVehicle ( );
	void DestroyVehicle ( );
	void SpawnVehicle ( );
	void eventTick ( float DeltaTime );
};

UClass* AcParkedVehicleSpawner::pClassPointer = NULL;

// Class APBGame.MaterialExpressionBakedColourTransform
// 0x0038 (0x0094 - 0x005C)
class UMaterialExpressionBakedColourTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            m_Input;                                          		// 0x005C (0x001C) [0x0000000000000000]              
	struct FName                                       ExpressionName;                                   		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                UVIndex;                                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    LookupTexture;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VCoord[ 0x3 ];                                    		// 0x0088 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionBakedColourTransform" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBakedColourTransform::pClassPointer = NULL;

// Class APBGame.MaterialExpressionBakedScalarParameter
// 0x0020 (0x007C - 0x005C)
class UMaterialExpressionBakedScalarParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                UVIndex;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    LookupTexture;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VCoord;                                           		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              UnpackMin;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UnpackMax;                                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ColourComponent;                                  		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionBakedScalarParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBakedScalarParameter::pClassPointer = NULL;

// Class APBGame.MaterialExpressionBakedVectorParameter
// 0x0034 (0x0090 - 0x005C)
class UMaterialExpressionBakedVectorParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                UVIndex;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    LookupTexture;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VCoord;                                           		// 0x006C (0x0004) [0x0000000000000000]              
	struct FLinearColor                                UnpackMin;                                        		// 0x0070 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                UnpackMax;                                        		// 0x0080 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionBakedVectorParameter" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBakedVectorParameter::pClassPointer = NULL;

// Class APBGame.MaterialExpressionColourTransform
// 0x0078 (0x00D4 - 0x005C)
class UMaterialExpressionColourTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            m_Input;                                          		// 0x005C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            m_Hue;                                            		// 0x0078 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            m_Saturation;                                     		// 0x0094 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            m_Brightness;                                     		// 0x00B0 (0x001C) [0x0000000000000000]              
	struct FName                                       ExpressionName;                                   		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionColourTransform" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionColourTransform::pClassPointer = NULL;

// Class APBGame.MaterialExpressionFeatureEmissiveLevel
// 0x0010 (0x006C - 0x005C)
class UMaterialExpressionFeatureEmissiveLevel : public UMaterialExpression
{
public:
	class UTexture*                                    m_DefaultTexture;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_CoordinateIndex;                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialExpressionScalarParameter*          m_UVOverrideParameter;                            		// 0x0064 (0x0004) [0x0000000006400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	class UMaterialExpressionScalarParameter*          m_UVMaskParameter;                                		// 0x0068 (0x0004) [0x0000000006400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionFeatureEmissiveLevel" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFeatureEmissiveLevel::pClassPointer = NULL;

// Class APBGame.MaterialExpressionNightLightLevel
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionNightLightLevel : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionNightLightLevel" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionNightLightLevel::pClassPointer = NULL;

// Class APBGame.MaterialExpressionPrimaryLight
// 0x0001 (0x005D - 0x005C)
class UMaterialExpressionPrimaryLight : public UMaterialExpression
{
public:
	unsigned char                                      m_eDataType;                                      		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionPrimaryLight" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPrimaryLight::pClassPointer = NULL;

// Class APBGame.MaterialExpressionRandom
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionRandom : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionRandom" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionRandom::pClassPointer = NULL;

// Class APBGame.MaterialExpressionScaleAndBias
// 0x0024 (0x0080 - 0x005C)
class UMaterialExpressionScaleAndBias : public UMaterialExpression
{
public:
	float                                              m_fScale;                                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBias;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            m_Input;                                          		// 0x0064 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionScaleAndBias" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionScaleAndBias::pClassPointer = NULL;

// Class APBGame.MaterialExpressionTimeOfDay
// 0x0000 (0x005C - 0x005C)
class UMaterialExpressionTimeOfDay : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionTimeOfDay" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTimeOfDay::pClassPointer = NULL;

// Class APBGame.MaterialExpressionVectorCurve
// 0x003C (0x0098 - 0x005C)
class UMaterialExpressionVectorCurve : public UMaterialExpression
{
public:
	struct FRawDistributionVector                      m_Curve;                                          		// 0x005C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      m_bSRGB : 1;                                      		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FExpressionInput                            m_Time;                                           		// 0x007C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.MaterialExpressionVectorCurve" );

		return pClassPointer;
	};

};

UClass* UMaterialExpressionVectorCurve::pClassPointer = NULL;

// Class APBGame.RTWMorphNodeWeightBase
// 0x0024 (0x0094 - 0x0070)
class URTWMorphNodeWeightBase : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              DefaultWeight;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Description;                                      		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                Uid;                                              		// 0x0084 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	TArray< class URTWMorphNodeWeightBase* >           Subscribers;                                      		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNodeWeightBase" );

		return pClassPointer;
	};

	void Reset ( );
	void eventAddSubscriber ( class URTWMorphNodeWeightBase* MorphNode );
	void ForceNodeWeight ( float Weight );
	void ComputeRandomWeight ( );
	void SetRandomWeight ( );
	bool CanBeDecreased ( );
	bool CanBeIncreased ( );
	void UpdateNodeWeight ( float Delta );
	void ChangeNodeWeight ( float Delta );
	struct FString RetDescription ( );
	void SetDefaultWeight ( float Weight );
	float RetDefaultWeight ( );
	float RetNodeWeight ( );
};

UClass* URTWMorphNodeWeightBase::pClassPointer = NULL;

// Class APBGame.RTWMorphNodeMultiWay
// 0x0010 (0x00A4 - 0x0094)
class URTWMorphNodeMultiWay : public URTWMorphNodeWeightBase
{
public:
	int                                                BaseSlot;                                         		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< float >                                    Thresholds;                                       		// 0x0098 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNodeMultiWay" );

		return pClassPointer;
	};

	void ComputeRandomWeight ( );
	bool CanBeDecreased ( );
	bool CanBeIncreased ( );
	void UpdateNodeWeight ( float Delta );
};

UClass* URTWMorphNodeMultiWay::pClassPointer = NULL;

// Class APBGame.RTWMorphNode3Way
// 0x0000 (0x00A4 - 0x00A4)
class URTWMorphNode3Way : public URTWMorphNodeMultiWay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNode3Way" );

		return pClassPointer;
	};

};

UClass* URTWMorphNode3Way::pClassPointer = NULL;

// Class APBGame.RTWMorphNode4Way
// 0x0000 (0x00A4 - 0x00A4)
class URTWMorphNode4Way : public URTWMorphNodeMultiWay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNode4Way" );

		return pClassPointer;
	};

};

UClass* URTWMorphNode4Way::pClassPointer = NULL;

// Class APBGame.RTWMorphNode5Way
// 0x0000 (0x00A4 - 0x00A4)
class URTWMorphNode5Way : public URTWMorphNodeMultiWay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNode5Way" );

		return pClassPointer;
	};

};

UClass* URTWMorphNode5Way::pClassPointer = NULL;

// Class APBGame.RTWMorphNodeBiPolar
// 0x0000 (0x0094 - 0x0094)
class URTWMorphNodeBiPolar : public URTWMorphNodeWeightBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNodeBiPolar" );

		return pClassPointer;
	};

	void ComputeRandomWeight ( );
	bool CanBeDecreased ( );
	bool CanBeIncreased ( );
	void UpdateNodeWeight ( float Delta );
};

UClass* URTWMorphNodeBiPolar::pClassPointer = NULL;

// Class APBGame.RTWMorphNodeGroup
// 0x0028 (0x0098 - 0x0070)
class URTWMorphNodeGroup : public UMorphNodeWeightBase
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0070 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bVisibleUI : 1;                                   		// 0x0070 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bConstrainChildrenWeights : 1;                    		// 0x0070 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              MaxChildrenWeightSum;                             		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CameraPosition;                                   		// 0x0078 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CameraTarget;                                     		// 0x0084 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxTiltAngle;                                     		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FOV;                                              		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNodeGroup" );

		return pClassPointer;
	};

};

UClass* URTWMorphNodeGroup::pClassPointer = NULL;

// Class APBGame.RTWMorphNodeTexPose
// 0x0010 (0x0084 - 0x0074)
class URTWMorphNodeTexPose : public UMorphNodePose
{
public:
	class UTexture2D*                                  NormalMap;                                        		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  ColourMap;                                        		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Uid;                                              		// 0x007C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class URTWMorphNodeWeight*                         ParentNode;                                       		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNodeTexPose" );

		return pClassPointer;
	};

};

UClass* URTWMorphNodeTexPose::pClassPointer = NULL;

// Class APBGame.RTWMorphNodeWeight
// 0x0004 (0x0098 - 0x0094)
class URTWMorphNodeWeight : public URTWMorphNodeWeightBase
{
public:
	unsigned long                                      bSelectOnlyOneChildren : 1;                       		// 0x0094 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWMorphNodeWeight" );

		return pClassPointer;
	};

	void ComputeRandomWeight ( );
	bool CanBeDecreased ( );
	bool CanBeIncreased ( );
	void UpdateNodeWeight ( float Delta );
	int GetNumChildren ( );
	class UMorphNodeBase* GetChild ( int N );
	int GetSelectedChildIndex ( );
	void SetSelectedChildIndex ( int N );
};

UClass* URTWMorphNodeWeight::pClassPointer = NULL;

// Class APBGame.RTWSkelControlSingleBoneScale
// 0x001C (0x00B4 - 0x0098)
class URTWSkelControlSingleBoneScale : public USkelControlBase
{
public:
	struct FVector                                     MinBoneScale;                                     		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxBoneScale;                                     		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPropagateScaling : 1;                            		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsForHeightScaling : 1;                          		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWSkelControlSingleBoneScale" );

		return pClassPointer;
	};

};

UClass* URTWSkelControlSingleBoneScale::pClassPointer = NULL;

// Class APBGame.APBStudio
// 0x0014 (0x0054 - 0x0040)
class UAPBStudio : public UObject
{
public:
	TArray< struct FPointer >                          m_apStates;                                       		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pCurrentState;                                  		// 0x004C (0x0004) [0x0000000000000000]              
	class UAPBStudioHelper*                            m_pHelper;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBStudio" );

		return pClassPointer;
	};

	void ClearSymbol ( );
	void LoadSymbol ( struct FString sName );
	struct FString GetStringParameter ( struct FString sName );
	void SetStringParameter ( struct FString sName, struct FString sValue );
	bool GetBoolParameter ( struct FString sName );
	void SetBoolParameter ( struct FString sName, unsigned long fValue );
	int GetIntParameter ( struct FString sName );
	void SetIntParameter ( struct FString sName, int fValue );
	float GetFloatParameter ( struct FString sName );
	void SetFloatParameter ( struct FString sName, float fValue );
	unsigned char GetParameterType ( struct FString sName );
	TArray< struct FString > GetStateParameters ( );
	TArray< struct FString > GetStates ( );
	void SetState ( struct FString sName );
	void Init ( unsigned long bIsInGame );
};

UClass* UAPBStudio::pClassPointer = NULL;

// Class APBGame.APBStudioCharacter
// 0x0044 (0x0098 - 0x0054)
class UAPBStudioCharacter : public UAPBStudio
{
public:
	unsigned long                                      m_bIsInGame : 1;                                  		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	class UGolemDescriptor*                            m_pDescriptor;                                    		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UGolemMeshBaker*                             m_pMeshBaker;                                     		// 0x005C (0x0004) [0x0000000000000000]              
	class UcUVBleedMeshBaker*                          m_pUVBleedMeshBaker;                              		// 0x0060 (0x0004) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pGolemSkeletalMesh;                             		// 0x0064 (0x0004) [0x0000000000000000]              
	class UMorphTargetSet*                             m_pGolemMorphSet;                                 		// 0x0068 (0x0004) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x006C (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_pSkeletalMeshComponent;                         		// 0x0070 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_pBakingSkeletalMeshComponent;                   		// 0x0074 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UGolemHairSkeletalMeshComponent*             m_pHairSkeletalMeshComponent;                     		// 0x0078 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_pBodyMaterial;                                  		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< class UcGolemRenderTarget* >               m_apWorkRenderTargets;                            		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UcCharacterTextureBaker*                     m_pCharacterTextureBaker;                         		// 0x008C (0x0004) [0x0000000000000000]              
	class UMaterial*                                   m_pParentBodyMaterial;                            		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pBakingMeshProxy;                               		// 0x0094 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBStudioCharacter" );

		return pClassPointer;
	};

	void ForceRebuild ( );
	void Done ( );
	void SetGolemDescriptor ( class UGolemDescriptor* pDesc );
	void Init ( unsigned long bIsInGame );
};

UClass* UAPBStudioCharacter::pClassPointer = NULL;

// Class APBGame.APBStudioHelper
// 0x0020 (0x0060 - 0x0040)
class UAPBStudioHelper : public UObject
{
public:
	class UTextureRenderTarget2D*                      m_aRenderTargets[ 0x4 ];                          		// 0x0040 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UTextureRenderTarget2D*                      m_SymbolRenderTarget;                             		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UTextureRenderTarget2D*                      m_SymbolTempRenderTarget;                         		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nRenderTargetSize;                              		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UGolemTextureBaker*                          m_pTextureBaker;                                  		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBStudioHelper" );

		return pClassPointer;
	};

	class UTextureRenderTarget2D* GetRenderTarget ( int nIndex );
	void Init ( );
};

UClass* UAPBStudioHelper::pClassPointer = NULL;

// Class APBGame.APBStudioVehicle
// 0x00AC (0x0100 - 0x0054)
class UAPBStudioVehicle : public UAPBStudio
{
public:
	class UGolemobileDescriptor*                       m_pDescriptor;                                    		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UGolemobileMeshBaker*                        m_pMeshBaker;                                     		// 0x0058 (0x0004) [0x0000000000000000]              
	class UGolemTextureBaker*                          m_pTextureBaker;                                  		// 0x005C (0x0004) [0x0000000000000000]              
	class UcUVBleedMeshBaker*                          m_pUVBleedMeshBaker;                              		// 0x0060 (0x0004) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x0064 (0x0004) [0x0000000000000000]              
	class UGolemobile*                                 m_pGolemobile;                                    		// 0x0068 (0x0004) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_apRenderTargets[ 0x9 ];                         		// 0x006C (0x0024) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_pDilationRenderTarget;                          		// 0x0090 (0x0004) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_pMaskRenderTarget;                              		// 0x0094 (0x0004) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_pTempRenderTarget;                              		// 0x0098 (0x0004) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_pIntermediateRenderTarget;                      		// 0x009C (0x0004) [0x0000000000000000]              
	class UGolemobileCommonParts*                      m_pCommonParts;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fExteriorDecalsTime;                            		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fExteriorDiffuseTime;                           		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              m_fExteriorNormalTime;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fExteriorEmissiveTime;                          		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fExteriorTotalTime;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fInteriorDiffuseTime;                           		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fInteriorNormalTime;                            		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_fInteriorEmissiveTime;                          		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              m_fInteriorTotalTime;                             		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              m_fWheelDiffuseTime;                              		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              m_fWheelNormalTime;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              m_fWheelEmissiveTime;                             		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              m_fWheelTotalTime;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              m_fGlassDecalsTime;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              m_fGlassTotalTime;                                		// 0x00DC (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pBodyColourStack;                               		// 0x00E0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPartColourStack;                               		// 0x00E4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pBodyNormalStack;                               		// 0x00E8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPartNormalStack;                               		// 0x00EC (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pLicensePlateStack;                             		// 0x00F0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UcVehicleTextureBaker*                       m_pVehicleTextureBaker;                           		// 0x00F4 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_pBakingSkeletalMeshComponent;                   		// 0x00F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPointer                                    m_pBakingMeshProxy;                               		// 0x00FC (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBStudioVehicle" );

		return pClassPointer;
	};

	class UcVehicleTextureBaker* RetVehicleTextureBaker ( );
	void BakeGolemobileToPackage ( struct FString PackageName, unsigned long bDoubleSizeDiffuse );
	void ForceRebuild ( );
	void Done ( );
	void SetGolemobile ( class UGolemobile* pGolemobile );
	void SetGolemobileDescriptor ( class UGolemobileDescriptor* pDesc );
	void Init ( unsigned long bIsInGame );
};

UClass* UAPBStudioVehicle::pClassPointer = NULL;

// Class APBGame.cCharacterTextureBaker
// 0x0284 (0x02C4 - 0x0040)
class UcCharacterTextureBaker : public UObject
{
public:
	struct FCharacterTextureBuildData                  m_BuildData;                                      		// 0x0040 (0x0038) [0x0000000000000000]              
	struct FTextureGenerationData                      m_TextureGenerationData;                          		// 0x0078 (0x0020) [0x0000000000000000]              
	float                                              m_AverageStepTimes[ 0x2D ];                       		// 0x0098 (0x00B4) [0x0000000000000000]              
	float                                              m_LastStepTimes[ 0x2D ];                          		// 0x014C (0x00B4) [0x0000000000000000]              
	float                                              m_LastStepMaxOverBudgetTime[ 0x2D ];              		// 0x0200 (0x00B4) [0x0000000000000000]              
	float                                              m_fDiffuseTotalTime;                              		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              m_fDiffuseTotalStepsTime;                         		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              m_fNormalTotalTime;                               		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              m_fNormalTotalStepsTime;                          		// 0x02C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCharacterTextureBaker" );

		return pClassPointer;
	};

};

UClass* UcCharacterTextureBaker::pClassPointer = NULL;

// Class APBGame.cUVBleedMeshBaker
// 0x0078 (0x00B8 - 0x0040)
class UcUVBleedMeshBaker : public UObject
{
public:
	struct FUVBleedBuildData                           m_BuildData;                                      		// 0x0040 (0x0014) [0x0000000000000000]              
	float                                              m_AverageStepTimes[ 0x4 ];                        		// 0x0054 (0x0010) [0x0000000000000000]              
	float                                              m_LastStepTimes[ 0x4 ];                           		// 0x0064 (0x0010) [0x0000000000000000]              
	struct FDouble                                     m_SeamExtBuildTotal;                              		// 0x0074 (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_SeamExtBuildUVBleedGeometry;                    		// 0x007C (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_SeamExtBuildExpandedVBIB_Chunked;               		// 0x0084 (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_SeamExtUpdateFStaticLODModel;                   		// 0x008C (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_SeamExtUVBleedGeometryFnTotal;                  		// 0x0094 (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_SeamExtUVBleedUniquePosNebCache;                		// 0x009C (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_SeamExtUVBleedRawObjectCoInfo;                  		// 0x00A4 (0x0008) [0x0000000000000000]              
	float                                              m_fTotalTime;                                     		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fTotalStepsTime;                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pRenderFence;                                   		// 0x00B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUVBleedMeshBaker" );

		return pClassPointer;
	};

};

UClass* UcUVBleedMeshBaker::pClassPointer = NULL;

// Class APBGame.cVehicleTextureBaker
// 0x0120 (0x0160 - 0x0040)
class UcVehicleTextureBaker : public UObject
{
public:
	struct FVehicleTextureBuildData                    m_BuildData;                                      		// 0x0040 (0x0028) [0x0000000000000000]              
	struct FTextureGenerationData                      m_TextureGenerationData;                          		// 0x0068 (0x0020) [0x0000000000000000]              
	TArray< float >                                    m_AverageStepTimes;                               		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_LastStepTimes[ 0x22 ];                          		// 0x0094 (0x0088) [0x0000000000000000]              
	float                                              m_fExteriorTotalStepsTime;                        		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              m_fInteriorTotalStepsTime;                        		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              m_fGlassTotalStepsTime;                           		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              m_fWheelsTotalStepsTime;                          		// 0x0128 (0x0004) [0x0000000000000000]              
	struct FDouble                                     m_fExteriorTotalTime;                             		// 0x012C (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_fInteriorTotalTime;                             		// 0x0134 (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_fGlassTotalTime;                                		// 0x013C (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_fWheelsTotalTime;                               		// 0x0144 (0x0008) [0x0000000000000000]              
	int                                                m_nNumDecalsBuilt;                                		// 0x014C (0x0004) [0x0000000000000000]              
	int                                                m_nNumSymbolsBuilt;                               		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                m_nNumDecalBuildCalls;                            		// 0x0154 (0x0004) [0x0000000000000000]              
	struct FDouble                                     m_fTotalDecalsStepTime;                           		// 0x0158 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleTextureBaker" );

		return pClassPointer;
	};

};

UClass* UcVehicleTextureBaker::pClassPointer = NULL;

// Class APBGame.cAssetDescriptorManager
// 0x0048 (0x0088 - 0x0040)
class UcAssetDescriptorManager : public UObject
{
public:
	struct FMap_Mirror                                 m_Descriptors;                                    		// 0x0040 (0x003C) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nMaxSize;                                       		// 0x007C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fPurgeAmount;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nSize;                                          		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAssetDescriptorManager" );

		return pClassPointer;
	};

	class UcCompressedAssetCustomisation* FindDescriptor ( struct FGuid TheGuid );
	void RemoveDescriptor ( class UcCompressedAssetCustomisation* Customisation );
	void AddDescriptor ( class UcCompressedAssetCustomisation* Customisation );
};

UClass* UcAssetDescriptorManager::pClassPointer = NULL;

// Class APBGame.cBuildManager
// 0x002C (0x006C - 0x0040)
class UcBuildManager : public UcBuildManagerBase
{
public:
	class UcBuildScheduler*                            m_Scheduler;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcCustomisedAssetMemoryCache*                m_MemoryCache;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_DiskCache;                                      		// 0x0048 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_nRequestRefreshStride;                          		// 0x004C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bActive : 1;                                    		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fBuildTime;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fIdleBuildTime;                                 		// 0x0058 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fActionBuildTime;                               		// 0x005C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fSocialBuildTime;                               		// 0x0060 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fThumbBuildTime;                                		// 0x0064 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                m_iNumTopPriority;                                		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBuildManager" );

		return pClassPointer;
	};

	void SetThumbTimeBudget ( );
	void SetIngameTimeBudget ( unsigned long bAction );
	void SetIdleTimeBudget ( unsigned long bStreamWithTimeReserve );
	void NotifyActorIrrelevant ( class AActor* pActor );
};

UClass* UcBuildManager::pClassPointer = NULL;

// Class APBGame.cBuildRequest
// 0x002C (0x006C - 0x0040)
class UcBuildRequest : public UObject
{
public:
	struct FPointer                                    VfTable_IiCustomisedActor;                        		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AActor*                                      m_pActor;                                         		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      m_vfxActor;                                       		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bFirstTime : 1;                                 		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bLoadingStarted : 1;                            		// 0x004C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bInProgress : 1;                                		// 0x004C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bPrecache : 1;                                  		// 0x004C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bTopPriority : 1;                               		// 0x004C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bLocalPlayer : 1;                               		// 0x004C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bFinished : 1;                                  		// 0x004C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_wasCancelled : 1;                               		// 0x004C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bDisableCache : 1;                              		// 0x004C (0x0004) [0x0000000000000000] [0x00000100] 
	struct FGuid                                       m_Guid;                                           		// 0x0050 (0x0010) [0x0000000000000000]              
	class UcCompressedAssetCustomisation*              m_CompressedDescriptor;                           		// 0x0060 (0x0004) [0x0000000000000000]              
	class UcAssetCustomisation*                        m_pAssetDescriptor;                               		// 0x0064 (0x0004) [0x0000000000000000]              
	class UcBuildRequest*                              m_pPreviousRequest;                               		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBuildRequest" );

		return pClassPointer;
	};

	void eventCustomisationDownloadComplete ( class UcCompressedAssetCustomisation* Data, int nUserData );
	class UcAssetCustomisation* RetAssetDescriptor ( );
	void SetAssetDescriptor ( class UcAssetCustomisation* pDesc );
	void BuildVFXEvent ( );
};

UClass* UcBuildRequest::pClassPointer = NULL;

// Class APBGame.cBuildScheduler
// 0x001C (0x005C - 0x0040)
class UcBuildScheduler : public UObject
{
public:
	struct FPointer                                    m_pQueue;                                         		// 0x0040 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pDeferredRequestsQueue;                         		// 0x0044 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pProcessedDeferredArray;                        		// 0x0048 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UcBuildRequest*                              m_pActiveRequest;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              m_fActiveRequestPriority;                         		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bStreamWithTimeReserve : 1;                     		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_iMaxDeferredRequests;                           		// 0x0058 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBuildScheduler" );

		return pClassPointer;
	};

};

UClass* UcBuildScheduler::pClassPointer = NULL;

// Class APBGame.cCustomisedAssetCacheEntry
// 0x0014 (0x0054 - 0x0040)
class UcCustomisedAssetCacheEntry : public UObject
{
public:
	TArray< struct FNamedBinaryData >                  m_aNamedBinaryData;                               		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FDouble                                     m_fCachedLastUsedTimeStamp;                       		// 0x004C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCustomisedAssetCacheEntry" );

		return pClassPointer;
	};

};

UClass* UcCustomisedAssetCacheEntry::pClassPointer = NULL;

// Class APBGame.cCharacterCacheEntry
// 0x0014 (0x0068 - 0x0054)
class UcCharacterCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UGolemSkeletalMesh*                          m_SkeletalMesh;                                   		// 0x0054 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_DiffuseTexture;                                 		// 0x0058 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_NormalTexture;                                  		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              m_HeightFactor;                                   		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsFemale : 1;                                  		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCharacterCacheEntry" );

		return pClassPointer;
	};

};

UClass* UcCharacterCacheEntry::pClassPointer = NULL;

// Class APBGame.cCharacterRequest
// 0x0058 (0x00C4 - 0x006C)
class UcCharacterRequest : public UcBuildRequest
{
public:
	TArray< struct FAudioCustomisationSwitch >         m_aAudioCustomisationSwitches;                    		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bIsAStatue : 1;                                 		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsAUILobbyCharacter : 1;                       		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bStateJustChanged : 1;                          		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIsFemale : 1;                                  		// 0x0078 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                m_nNumLODs;                                       		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                m_nLOD;                                           		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevLOD;                                       		// 0x0084 (0x0004) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pTargetSkeletalMesh;                            		// 0x0088 (0x0004) [0x0000000000000000]              
	class UMorphTargetSet*                             m_pTargetMorphSet;                                		// 0x008C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pTargetDiffuse;                                 		// 0x0090 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pTargetNormal;                                  		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_BuildState;                                     		// 0x009C (0x0001) [0x0000000000000000]              
	TArray< class UTexture2D* >                        m_aSourceTexturesRequired;                        		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USkeletalMesh* >                     m_aSourceMeshesRequired;                          		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_HeightFactor;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nTotalSourceTexturesReady;                      		// 0x00BC (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x00C0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCharacterRequest" );

		return pClassPointer;
	};

	class UTexture2D* RetTargetNormal ( );
	class UTexture2D* RetTargetDiffuse ( );
	class UMorphTargetSet* RetTargetMorphSet ( );
	class USkeletalMesh* RetTargetSkeletalMesh ( );
	void SetNumLODs ( int nNumLODs );
	bool RetIsAUILobbyCharacter ( );
	void SetIsAUILobbyCharacter ( unsigned long bValue );
	bool RetIsAStatue ( );
	void SetIsAStatue ( unsigned long bValue );
};

UClass* UcCharacterRequest::pClassPointer = NULL;

// Class APBGame.cCustomisationSettings
// 0x01AC (0x01EC - 0x0040)
class UcCustomisationSettings : public UObject
{
public:
	float                                              m_fLODFactor;                                     		// 0x0040 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fDistanceFactor;                                		// 0x0044 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fDistancePowerFactor;                           		// 0x0048 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fVelocityFactor;                                		// 0x004C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fAssetFactor_Texture;                           		// 0x0050 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fAssetFactor_Mesh;                              		// 0x0054 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fAssetFactor_AnimSets;                          		// 0x0058 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fEntityFactor_Player;                           		// 0x005C (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fEntityFactor_Vehicle;                          		// 0x0060 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              m_fEntityFactor_Graffiti;                         		// 0x0064 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	unsigned long                                      m_bUseDiskCache : 1;                              		// 0x0068 (0x0004) [0x0000000000004003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_Config )
	unsigned long                                      m_bStreamOutMeshWhenDetached : 1;                 		// 0x0068 (0x0004) [0x0000000000004003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_Config )
	unsigned long                                      m_bLoadedTESTexturePages : 1;                     		// 0x0068 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bTESEnableCylindricalDepthTest : 1;             		// 0x0068 (0x0004) [0x0000000000004002] [0x00000008] ( CPF_Const | CPF_Config )
	int                                                m_nNumBits_Hue;                                   		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nNumBits_Sat;                                   		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nNumBits_Lum;                                   		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nNumBits_Alpha;                                 		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fMinSat;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxSat;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinLum;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxLum;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSymbolPrimitive >                  m_aSymbolPrimitives;                              		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_asColourLookupFiles[ 0x5 ];                     		// 0x0098 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColourLookup                               m_aColourLookups[ 0x5 ];                          		// 0x00D4 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           m_aSymbolVinylFillNames;                          		// 0x0138 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           m_aSymbolDistanceFieldVinylFillNames;             		// 0x0144 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           m_aSymbolDecalFillNames;                          		// 0x0150 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           m_aSymbolFontFillNames;                           		// 0x015C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         m_aSymbolVinylFillMaterials;                      		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         m_aSymbolDistanceFieldVinylFillMaterials;         		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         m_aSymbolDecalFillMaterials;                      		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         m_aSymbolFontFillMaterials;                       		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2D*                                  m_pWhiteTexture;                                  		// 0x0198 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                VehicleBakedExteriorDiffuseSize;                  		// 0x019C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleBakedExteriorNormalSize;                   		// 0x01A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleBakedExteriorEmissiveSize;                 		// 0x01A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleBakedInteriorDiffuseSize;                  		// 0x01A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleBakedInteriorNormalSize;                   		// 0x01AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleBakedInteriorEmissiveSize;                 		// 0x01B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleBakedWheelDiffuseSize;                     		// 0x01B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleBakedWheelNormalSize;                      		// 0x01B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleSharedDamagedNormalSize;                   		// 0x01BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleSharedScratchMaskSize;                     		// 0x01C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VehicleSharedSdDDDSize;                           		// 0x01C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VideoQuality;                                     		// 0x01C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VideoFrameRate;                                   		// 0x01CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VideoResX;                                        		// 0x01D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VideoResY;                                        		// 0x01D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTESDepthBias;                                  		// 0x01D8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fTESSlopeThreshold;                             		// 0x01DC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fTESCylindricalDepthBias;                       		// 0x01E0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fUVExtrusionDistance;                           		// 0x01E4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nNumDilationPasses;                             		// 0x01E8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCustomisationSettings" );

		return pClassPointer;
	};

};

UClass* UcCustomisationSettings::pClassPointer = NULL;

// Class APBGame.cCustomisedAssetMemoryCache
// 0x003C (0x007C - 0x0040)
class UcCustomisedAssetMemoryCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0040 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cCustomisedAssetMemoryCache.m_Assets

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCustomisedAssetMemoryCache" );

		return pClassPointer;
	};

};

UClass* UcCustomisedAssetMemoryCache::pClassPointer = NULL;

// Class APBGame.cCustomisedSkeletalMeshComponent
// 0x0024 (0x04D8 - 0x04B4)
class UcCustomisedSkeletalMeshComponent : public USkeletalMeshDLODComponent
{
public:
	unsigned char                                      m_eCustomisationGender;                           		// 0x04B4 (0x0001) [0x0000000000000000]              
	TArray< class UTexture2D* >                        m_aTextures;                                      		// 0x04B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bCustomisationIsValid : 1;                      		// 0x04C4 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FGameplayPriorityInfo                       m_GameplayInfo;                                   		// 0x04C8 (0x000C) [0x0000000000000000]              
	float                                              m_fPriority;                                      		// 0x04D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCustomisedSkeletalMeshComponent" );

		return pClassPointer;
	};

};

UClass* UcCustomisedSkeletalMeshComponent::pClassPointer = NULL;

// Class APBGame.cDummyRequest
// 0x000C (0x0078 - 0x006C)
class UcDummyRequest : public UcBuildRequest
{
public:
	int                                                m_nTotalNumSteps;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStepTime;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCurrentNumSteps;                               		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDummyRequest" );

		return pClassPointer;
	};

};

UClass* UcDummyRequest::pClassPointer = NULL;

// Class APBGame.cGraffitiTextureRequest
// 0x0008 (0x0074 - 0x006C)
class UcGraffitiTextureRequest : public UcBuildRequest
{
public:
	class UTexture2D*                                  m_pTargetAsset;                                   		// 0x006C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pBuilder;                                       		// 0x0070 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGraffitiTextureRequest" );

		return pClassPointer;
	};

};

UClass* UcGraffitiTextureRequest::pClassPointer = NULL;

// Class APBGame.cSingleTextureCacheEntry
// 0x0004 (0x0058 - 0x0054)
class UcSingleTextureCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UTexture2D*                                  m_Texture;                                        		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSingleTextureCacheEntry" );

		return pClassPointer;
	};

};

UClass* UcSingleTextureCacheEntry::pClassPointer = NULL;

// Class APBGame.cSkeletalMeshCacheEntry
// 0x0004 (0x0058 - 0x0054)
class UcSkeletalMeshCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class USkeletalMesh*                               m_SkeletalMesh;                                   		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkeletalMeshCacheEntry" );

		return pClassPointer;
	};

};

UClass* UcSkeletalMeshCacheEntry::pClassPointer = NULL;

// Class APBGame.cStatueCacheEntry
// 0x0008 (0x005C - 0x0054)
class UcStatueCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UGolemSkeletalMesh*                          m_SkeletalMesh;                                   		// 0x0054 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_NormalTexture;                                  		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStatueCacheEntry" );

		return pClassPointer;
	};

};

UClass* UcStatueCacheEntry::pClassPointer = NULL;

// Class APBGame.cTexture2DCustomised
// 0x0008 (0x0158 - 0x0150)
class UcTexture2DCustomised : public UTexture2D
{
public:
	struct FRefCountPtr_Mirror                         m_pArchive;                                       		// 0x0150 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_iGamePriority;                                  		// 0x0154 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTexture2DCustomised" );

		return pClassPointer;
	};

};

UClass* UcTexture2DCustomised::pClassPointer = NULL;

// Class APBGame.cThumbnailBaseWorker
// 0x0018 (0x0084 - 0x006C)
class UcThumbnailBaseWorker : public UcBuildRequest
{
public:
	class UTexture2D*                                  m_pOutputImage;                                   		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nImageSize;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                m_BackgroundColor;                                		// 0x0074 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cThumbnailBaseWorker" );

		return pClassPointer;
	};

};

UClass* UcThumbnailBaseWorker::pClassPointer = NULL;

// Class APBGame.cThumbnailSkelBaseWorker
// 0x0094 (0x0118 - 0x0084)
class UcThumbnailSkelBaseWorker : public UcThumbnailBaseWorker
{
public:
	class UcBuildRequest*                              m_pSkelRequest;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0088 (0x0008) MISSED OFFSET
	struct FMatrix                                     m_ViewMatrix;                                     		// 0x0090 (0x0040) [0x0000000000000000]              
	struct FMatrix                                     m_ProjectionMatrix;                               		// 0x00D0 (0x0040) [0x0000000000000000]              
	struct FPointer                                    m_pScenePointer;                                  		// 0x0110 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      m_bStartStreamIn : 1;                             		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cThumbnailSkelBaseWorker" );

		return pClassPointer;
	};

};

UClass* UcThumbnailSkelBaseWorker::pClassPointer = NULL;

// Class APBGame.cThumbnailGolemobileWorker
// 0x0001 (0x0119 - 0x0118)
class UcThumbnailGolemobileWorker : public UcThumbnailSkelBaseWorker
{
public:
	unsigned char                                      m_eVehicleSetupType;                              		// 0x0118 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cThumbnailGolemobileWorker" );

		return pClassPointer;
	};

};

UClass* UcThumbnailGolemobileWorker::pClassPointer = NULL;

// Class APBGame.cThumbnailGolemWorker
// 0x0000 (0x0118 - 0x0118)
class UcThumbnailGolemWorker : public UcThumbnailSkelBaseWorker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cThumbnailGolemWorker" );

		return pClassPointer;
	};

};

UClass* UcThumbnailGolemWorker::pClassPointer = NULL;

// Class APBGame.cThumbnailHelper
// 0x0004 (0x0044 - 0x0040)
class UcThumbnailHelper : public UObject
{
public:
	class UcThumbnailBaseWorker*                       m_pWorker;                                        		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cThumbnailHelper" );

		return pClassPointer;
	};

};

UClass* UcThumbnailHelper::pClassPointer = NULL;

// Class APBGame.cThumbnailSymbolWorker
// 0x0008 (0x008C - 0x0084)
class UcThumbnailSymbolWorker : public UcThumbnailBaseWorker
{
public:
	struct FPointer                                    m_pBuilder;                                       		// 0x0084 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pDescriptor;                                    		// 0x0088 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cThumbnailSymbolWorker" );

		return pClassPointer;
	};

};

UClass* UcThumbnailSymbolWorker::pClassPointer = NULL;

// Class APBGame.cVehicleCacheEntry
// 0x005C (0x00B0 - 0x0054)
class UcVehicleCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UGolemSkeletalMesh*                          m_pSkeletalMesh;                                  		// 0x0054 (0x0004) [0x0000000000000000]              
	class UMorphTargetSet*                             m_pMorphTargetSet;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pWheelDamageMesh;                               		// 0x005C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pExteriorDiffuseTexture;                        		// 0x0060 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pExteriorNormalMapTexture;                      		// 0x0064 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pExteriorEmissiveTexture;                       		// 0x0068 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pInteriorDiffuseTexture;                        		// 0x006C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pInteriorNormalMapTexture;                      		// 0x0070 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pInteriorEmissiveTexture;                       		// 0x0074 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pWheelsDiffuseTexture;                          		// 0x0078 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pWheelsNormalMapTexture;                        		// 0x007C (0x0004) [0x0000000000000000]              
	struct FGolemobileCommonData                       CommonData;                                       		// 0x0080 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleCacheEntry" );

		return pClassPointer;
	};

};

UClass* UcVehicleCacheEntry::pClassPointer = NULL;

// Class APBGame.cVehicleRequest
// 0x00A8 (0x0114 - 0x006C)
class UcVehicleRequest : public UcBuildRequest
{
public:
	int                                                m_nAudioEngineType;                               		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nAudioExhaustType;                              		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioTurboType;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioTransmissionType;                         		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioDumpValveType;                            		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                m_nAudioGearChangeType;                           		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioHornType;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioSirenType;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioAmpType;                                  		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_nAudioSpeakerType;                              		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                m_nNumLODs;                                       		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_nLOD;                                           		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevLOD;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pTargetSkeletalMesh;                            		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UMorphTargetSet*                             m_pTargetMorphSet;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	struct FVehicleChunkTextures                       m_TargetTextures[ 0x4 ];                          		// 0x00A8 (0x0030) [0x0000000000000000]              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_BuildState;                                     		// 0x00DC (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bStateJustChanged : 1;                          		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FGolemobileCommonData                       CommonData;                                       		// 0x00E4 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleRequest" );

		return pClassPointer;
	};

	struct FGolemobileCommonData RetCommonData ( );
	struct FVehicleChunkTextures RetTargetTextures ( unsigned char Part );
	class UMorphTargetSet* RetTargetMorphSet ( );
	class USkeletalMesh* RetTargetSkeletalMesh ( );
	void SetNumLODs ( int nNumLODs );
};

UClass* UcVehicleRequest::pClassPointer = NULL;

// Class APBGame.cProp
// 0x056C (0x07A8 - 0x023C)
class AcProp : public AActor
{
public:
	struct FPointer                                    VfTable_ICombatTargetingInterface;                		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IDamageInterface;                         		// 0x0240 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x0244 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0248 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiBombTarget;                             		// 0x024C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiNPCLookAt;                              		// 0x0250 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x0254 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcAudioPropInterface*                        m_AudioPropInterface;                             		// 0x0258 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x025C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcPropComponent_TaskTarget*                  propTaskTarget;                                   		// 0x0260 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcPropComponent_Master*                      propMaster;                                       		// 0x0264 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcPropComponent_RigidBody*                   propRigidBody;                                    		// 0x0268 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcPropComponent_Damageable*                  propDamageable;                                   		// 0x026C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcPropComponent_MeshSwitch*                  propMeshSwitch;                                   		// 0x0270 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcPropComponent_Timer*                       propTimer;                                        		// 0x0274 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcPropComponent_LC*                          propLC;                                           		// 0x0278 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UcPropComponent_Use*                         propUse;                                          		// 0x027C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UcDamageFilterComponent*                     m_DamageFilterComponent;                          		// 0x0280 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0284 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class AcProp*                                      PropParent;                                       		// 0x0288 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class AcProp* >                            PropChildren;                                     		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      eRepPropState;                                    		// 0x0298 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eCurrentTaskOperationCategory;                  		// 0x0299 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x029A (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      m_eIATState;                                      		// 0x029B (0x0001) [0x0000000000000020]              ( CPF_Net )
	int                                                nRepCurrentHealth;                                		// 0x029C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                nRepMaxHealth;                                    		// 0x02A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FStPlayingAnimation                         RepAnimation;                                     		// 0x02A4 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FRigidBodyState                             aRepRBStates[ 0x14 ];                             		// 0x02B0 (0x04B0) [0x0000000000003020]              ( CPF_Net | CPF_Native | CPF_Transient )
	int                                                m_nLastDamageCharacterUID;                        		// 0x0760 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FPointer                                    m_pLastDamageInfo;                                		// 0x0764 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                m_nRepTaskOperationID;                            		// 0x0768 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepBombState;                                  		// 0x076C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepBombTimer;                                  		// 0x0770 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     m_vRepBombLocation;                               		// 0x0774 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID;                           		// 0x0780 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOpposingSideID;                         		// 0x0784 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bIsTrafficLight : 1;                            		// 0x0788 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bRegisterWithPG : 1;                            		// 0x0788 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FPointer                                    m_pLCCollisionBound;                              		// 0x078C (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< class URWTechReachSpec* >                  m_aRegisteredEdgeList;                            		// 0x0790 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nTickCount;                                     		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNPCLookAtEventID;                              		// 0x07A0 (0x0004) [0x0000000000000000]              
	int                                                m_nNPCLookAtPriority;                             		// 0x07A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cProp" );

		return pClassPointer;
	};

	bool CanTakeCosmeticDamage ( );
	void eventSetInitialState ( );
	void ClientNotifyBombLocationChanged ( struct FVector vecLocation );
	void ClientNotifyBombTimerUpdated ( int nBombTimeRemaining );
	void ClientNotifyBombStateChanged ( int nBombState, unsigned long bAllowTransitionEffects );
	class AcAPBPlayerController* RetDefuser ( );
	class AcAPBPlayerController* RetBomber ( );
	int RetBombState ( );
	bool IsBombDefused ( );
	bool IsBombExploded ( );
	bool IsBombPlanted ( );
	void DefuseBomb ( class AcAPBPlayerController* pDefuserPC );
	void PlantBomb ( class AcAPBPlayerController* pBomberPC );
	void NotifyBombDisposalSuccessful ( );
	void NotifyBombExploded ( );
	void NotifyBombFuseTriggered ( );
	class UiBombTarget* RetBombTarget ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	void eventReplicatedEvent ( struct FName VarName );
	void RegisterWithLCSystem ( );
	void ResetToServerPropState ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SequenceNode, float fPlayedTime, float fExcessTime );
	void eventUse ( struct FName sUseTagName );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	bool FilterHealing ( class UClass* DamageType );
	bool FilterDamage ( class UClass* DamageType );
	bool IsFiltered ( class UClass* DamageType );
	void UpdateDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void RemoveDamageType ( class UClass* DamageType );
	void AddDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void eventHealDamageTimed ( float TimePeriod, int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamageTimed ( float TimePeriod, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool eventRestore ( int Amount, class AController* Healer, class UClass* DamageType );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void eventTakeRadiusDamageEventWrapper ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	bool eventIsSoft ( );
	bool eventIsHard ( );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	struct FVector GetLookAtPosition ( );
	void SetLookAtPriority ( int pr_nLookAtPriority );
	int GetLookAtPriority ( );
	void RetExplosionOcclusionExtents ( TArray< struct FVector >* Verts, struct FVector* ExplosionLocation );
	bool IsStaticTarget ( );
	bool IsDynamicTarget ( );
	bool CanBeDamaged ( class AcAPBPlayerController* PC );
	bool CanBeTargeted ( class AcAPBPlayerController* PC );
};

UClass* AcProp::pClassPointer = NULL;

// Class APBGame.cPropComponent
// 0x0047 (0x00A0 - 0x0059)
class UcPropComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x005C (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cPropComponent.mapTimers
	class UcPropComponent_Master*                      Master;                                           		// 0x0098 (0x0004) [0x000000000408300A]              ( CPF_Const | CPF_ExportObject | CPF_Native | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bHasTimer : 1;                                    		// 0x009C (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bNeedsTick : 1;                                   		// 0x009C (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent" );

		return pClassPointer;
	};

	void eventDebugPrint ( );
	void eventExecState ( unsigned char eNewState );
	bool IsTimer ( struct FName FuncName );
	void ClearTimer ( struct FName FuncName );
	void SetTimer ( struct FName FuncName, float fTime );
	void WakeUpActor ( unsigned long bWakeUp );
	void eventOnAnimEnd ( class UAnimNodeSequence* SequenceNode );
	void eventUse ( struct FName sUseTagName );
};

UClass* UcPropComponent::pClassPointer = NULL;

// Class APBGame.cPropComponent_Damageable
// 0x0018 (0x00B8 - 0x00A0)
class UcPropComponent_Damageable : public UcPropComponent
{
public:
	unsigned long                                      bTargetable : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDamageable : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwitchMeshWithDamage : 1;                        		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasBrokenMesh : 1;                               		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bGoIntoRunningStateWhenBroken : 1;                		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyDamageInMission : 1;                         		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateHealth : 1;                             		// 0x00A0 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	int                                                maxHealth;                                        		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                currentHealth;                                    		// 0x00A8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              fTimeResetHealth;                                 		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UcPropComponent_MeshSwitch*                  propMeshSwitch;                                   		// 0x00B0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USeqVar_Float*                               seqVarVFX_HitTaken;                               		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_Damageable" );

		return pClassPointer;
	};

	void eventExecState ( unsigned char eNewState );
	void TimerResetHealth ( );
	bool HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void DamageablePropDied ( class AController* EventInstigator, class UClass* DamageType, class AActor* DamageCauser );
	bool IsTargetable ( );
	void SetMaxHealth ( int newMaxHealth );
	int RetCurrentHealth ( );
	void SetCurrentHealth ( int newHealth );
	float GetHealthRatio ( );
};

UClass* UcPropComponent_Damageable::pClassPointer = NULL;

// Class APBGame.cPropComponent_LC
// 0x000C (0x00AC - 0x00A0)
class UcPropComponent_LC : public UcPropComponent
{
public:
	TArray< class URWTechNode* >                       m_pAssociatedVNodes;                              		// 0x00A0 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_LC" );

		return pClassPointer;
	};

	void eventExecState ( unsigned char eNewState );
	void eventRepairVNode ( );
	void eventBreakVNode ( );
};

UClass* UcPropComponent_LC::pClassPointer = NULL;

// Class APBGame.cPropComponent_Master
// 0x0018 (0x00B8 - 0x00A0)
class UcPropComponent_Master : public UcPropComponent
{
public:
	unsigned char                                      PropType;                                         		// 0x00A0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      eCurrentPropState;                                		// 0x00A1 (0x0001) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      eNextPropState;                                   		// 0x00A2 (0x0001) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bForceNextState : 1;                              		// 0x00A4 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	class AcProp*                                      propOwner;                                        		// 0x00A8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UcPropComponent* >                   aSlaves;                                          		// 0x00AC (0x000C) [0x000000000408300A]              ( CPF_Const | CPF_ExportObject | CPF_Native | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_Master" );

		return pClassPointer;
	};

	bool CanTakeCosmeticDamage ( );
	void eventDebugPrint ( );
	void eventExecState ( unsigned char eNewState );
	void QueryGoToState ( unsigned char eNewState, unsigned long bForce );
	void DetachAllSlaves ( );
	void DetachSlave ( class UcPropComponent* exSlave );
	void AttachSlave ( class UcPropComponent* newSlave );
	void eventOnAnimEnd ( class UAnimNodeSequence* SequenceNode );
	void eventUse ( struct FName sUseTagName );
};

UClass* UcPropComponent_Master::pClassPointer = NULL;

// Class APBGame.cPropComponent_MeshSwitch
// 0x0028 (0x00C8 - 0x00A0)
class UcPropComponent_MeshSwitch : public UcPropComponent
{
public:
	TArray< class UMeshComponent* >                    aMeshVariants;                                    		// 0x00A0 (0x000C) [0x000000000648000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	unsigned long                                      bInstantiateMaterials : 1;                        		// 0x00AC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHidden : 1;                                      		// 0x00AC (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bLinkLODToBuilding : 1;                         		// 0x00AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                nCurrentVariant;                                  		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMeshComponent*                              pCurrentMeshVariant;                              		// 0x00B4 (0x0004) [0x0000000004083008]              ( CPF_ExportObject | CPF_Native | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         aOverridenMaterials;                              		// 0x00B8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    m_LODPolicy;                                      		// 0x00C4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_MeshSwitch" );

		return pClassPointer;
	};

	void eventExecState ( unsigned char eNewState );
	void eventInstantiateMaterials ( );
	void eventSetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetHidden ( unsigned long bNewHidden );
	int GetNumVariants ( );
	int GetCurrentVariantIndex ( );
	class UMeshComponent* GetCurrentVariant ( );
	void SetVariant ( int nVariant );
};

UClass* UcPropComponent_MeshSwitch::pClassPointer = NULL;

// Class APBGame.cPropComponent_RigidBody
// 0x0540 (0x05E0 - 0x00A0)
class UcPropComponent_RigidBody : public UcPropComponent
{
public:
	unsigned long                                      bFixedBody : 1;                                   		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasPhysicsWhenRunning : 1;                       		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateRB : 1;                                 		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNeedInitRB : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMovedRB : 1;                                     		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bHasCollisionData : 1;                            		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bInitialSpeed : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bEncroached : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bForceAwake : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              fDisablingForce;                                  		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fAnchorBreakingForce;                             		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fTimeWaitNoEncroach;                              		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMeshComponent*                              primComponent;                                    		// 0x00B0 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	struct FPointer                                    aRBStates;                                        		// 0x00B4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FRigidBodyState                             aInitialRBStates[ 0x14 ];                         		// 0x00B8 (0x04B0) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FRigidBodyUnpackParams                      unpackParams;                                     		// 0x0568 (0x0014) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                nbBodies;                                         		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                nbReplicatedBodies;                               		// 0x0580 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URB_ConstraintSetup*                         TempConstraintSetup;                              		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URB_ConstraintSetup*                         AnchorSetup;                                      		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URB_ConstraintInstance*                      AnchorInstance;                                   		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fConstraintsScale;                                		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      eStateCol;                                        		// 0x0594 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeNotEncroached;                               		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     InitialLocation;                                  		// 0x059C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x05A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     InitialVelocity;                                  		// 0x05B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 CollisionInstigator;                              		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CollisionLocation;                                		// 0x05C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CollisionMomentum;                                		// 0x05D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CollisionDamageCauser;                            		// 0x05DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_RigidBody" );

		return pClassPointer;
	};

	void eventBeginDisabled ( );
	void ResetAnimTree ( );
	void eventBeginRunning ( );
	void eventBeginNeutral ( );
	void eventBeginPrepare ( );
	void eventExecState ( unsigned char eNewState );
	void eventDebugPrint ( );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void TakeRadiusDamageNative ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	int eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int nWeaponType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeDamageNative ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int nWeaponType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, unsigned long r_bMicroImpulse );
	void ApplyDeferredDamageNative ( );
	void DebugCPP ( );
	void SetupPropState ( unsigned long bHasPhysics, unsigned long bLogical, unsigned long bIsTrigger, unsigned long bIsAnchored );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
};

UClass* UcPropComponent_RigidBody::pClassPointer = NULL;

// Class APBGame.cPropComponent_TaskTarget
// 0x004C (0x00EC - 0x00A0)
class UcPropComponent_TaskTarget : public UcPropComponent
{
public:
	struct FEnumeratedName                             m_eTaskTargetType;                                		// 0x00A0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nRandomSeed;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                m_nPropMaxHealthOld;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UcTaskTargetComponent*                       m_TaskTargetComponent;                            		// 0x00B8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcPropComponent_Damageable*                  propDamageable;                                   		// 0x00BC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UcPropComponent_Use*                         propUse;                                          		// 0x00C0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UcPropComponent_RigidBody*                   propRigidBody;                                    		// 0x00C4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FPointer                                    m_pSddTaskTargetPropInfo;                         		// 0x00C8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class AcAPBPlayerController*                       m_pLastPlayerToDamage;                            		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBPlayerController*                       m_pDeferredDamagePC;                              		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      m_pDeferredDamageType;                            		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bIsBrokenOff : 1;                               		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              m_fTimeLastDamagedEncroachers;                    		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            m_aBlockingEncroachers;                           		// 0x00E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_TaskTarget" );

		return pClassPointer;
	};

	bool eventIsWeaponDamage ( class UClass* DamageType );
	bool eventIsH2HDamage ( class UClass* DamageType );
	unsigned char RetInteractiveActorState ( );
	bool IsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void EndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void BeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	bool IsBombPlanted ( );
	void DefuseBomb ( class AcAPBPlayerController* pDefuserPC );
	void PlantBomb ( class AcAPBPlayerController* pBomberPC );
	void PostTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	float PreTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ResetPropState ( );
	int RetPropHealth ( );
	float RetPropHealthRatio ( );
	bool IsPropHealingRequired ( );
	void DamageProp ( float fAmount, class AController* EventInstigator, class UClass* DamageType );
	bool eventHealPropDamage ( );
	float RetPropFullHealth ( );
	void eventExecState ( unsigned char eNewState );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	bool IsBrokenOff ( );
	void NotifyReset ( );
	void NotifyBrokenOff ( );
	void OnDamageInteractionFinished ( );
	void InflictArsonDamage ( );
	void DamageSpawnBlockingActors ( );
};

UClass* UcPropComponent_TaskTarget::pClassPointer = NULL;

// Class APBGame.cPropComponent_Timer
// 0x000C (0x00AC - 0x00A0)
class UcPropComponent_Timer : public UcPropComponent
{
public:
	float                                              fActivateTime;                                    		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fDisableTime;                                     		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              fRespawnTime;                                     		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_Timer" );

		return pClassPointer;
	};

	void eventExecState ( unsigned char eNewState );
	void QueryDisabled ( );
	void QueryRunning ( );
	void QueryPrepare ( );
};

UClass* UcPropComponent_Timer::pClassPointer = NULL;

// Class APBGame.cPropComponent_Use
// 0x0024 (0x00C4 - 0x00A0)
class UcPropComponent_Use : public UcPropComponent
{
public:
	unsigned long                                      m_bUseOnStateChange : 1;                          		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayedAnim : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FtUseAction >                       m_aUseActions;                                    		// 0x00A4 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FStPlayingAnimation                         m_Animation;                                      		// 0x00B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      m_SkeletalMeshComponent;                          		// 0x00BC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                nExtraTicks;                                      		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_Use" );

		return pClassPointer;
	};

	void eventExecState ( unsigned char eNewState );
	void eventOnAnimEnd ( class UAnimNodeSequence* SequenceNode );
	void PlayAnimation ( struct FName sAnimationName, unsigned long bLoop, unsigned long bReachedEnd );
	void eventUse ( struct FName sUseTagName );
};

UClass* UcPropComponent_Use::pClassPointer = NULL;

// Class APBGame.APBAnimNotify_Kismet
// 0x000C (0x004C - 0x0040)
class UAPBAnimNotify_Kismet : public UAnimNotify
{
public:
	struct FString                                     AnimName;                                         		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBAnimNotify_Kismet" );

		return pClassPointer;
	};

};

UClass* UAPBAnimNotify_Kismet::pClassPointer = NULL;

// Class APBGame.APBSeqAct_VehicleParticleBinding
// 0x0008 (0x00F0 - 0x00E8)
class UAPBSeqAct_VehicleParticleBinding : public USequenceAction
{
public:
	class AEmitter*                                    ParticleEmitter;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetVehicle;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqAct_VehicleParticleBinding" );

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UAPBSeqAct_VehicleParticleBinding::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_Actor
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_Actor : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_Actor" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_Actor::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_AnimNotify
// 0x000C (0x010C - 0x0100)
class UAPBSeqEvent_AnimNotify : public USequenceEvent
{
public:
	struct FString                                     AnimName;                                         		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_AnimNotify" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_AnimNotify::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_BombTaskTarget
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_BombTaskTarget : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_BombTaskTarget" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_BombTaskTarget::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_Damage
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_Damage : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_Damage" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_Damage::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_cAPBPawn
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_cAPBPawn : public UAPBSeqEvent_Damage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_cAPBPawn" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_cAPBPawn::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_cAPBVehicle
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_cAPBVehicle : public UAPBSeqEvent_Damage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_cAPBVehicle" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_cAPBVehicle::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_cProp
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_cProp : public UAPBSeqEvent_Damage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_cProp" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_cProp::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_Pedestrian
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_Pedestrian : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_Pedestrian" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_Pedestrian::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTarget
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_TaskTarget : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTarget" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTarget::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction
// 0x0004 (0x0104 - 0x0100)
class UAPBSeqEvent_TaskTargetAction : public USequenceEvent
{
public:
	class UObject*                                     InteractingPlayer;                                		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_AntiGraffiti
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_AntiGraffiti : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_AntiGraffiti" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_AntiGraffiti::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Arson
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Arson : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Arson" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Arson::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_BombDisposal
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_BombDisposal : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_BombDisposal" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_BombDisposal::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Bombing
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Bombing : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Bombing" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Bombing::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_BreakIn
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_BreakIn : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_BreakIn" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_BreakIn::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Burglary
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Burglary : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Burglary" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Burglary::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Bust
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_TaskTargetAction_Bust : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Bust" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Bust::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_CSI
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_CSI : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_CSI" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_CSI::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_ForcedArrest
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_ForcedArrest : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_ForcedArrest" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_ForcedArrest::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_ForcedEntry
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_ForcedEntry : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_ForcedEntry" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_ForcedEntry::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Graffiti
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Graffiti : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Graffiti" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Graffiti::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Hacking
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Hacking : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Hacking" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Hacking::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Hotwire
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Hotwire : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Hotwire" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Hotwire::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Mugging
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Mugging : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Mugging" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Mugging::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_PlayerArrest
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_PlayerArrest : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_PlayerArrest" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_PlayerArrest::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_PlayerRescue
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_PlayerRescue : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_PlayerRescue" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_PlayerRescue::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_RamRaid
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_TaskTargetAction_RamRaid : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_RamRaid" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_RamRaid::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Sabotage
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_Sabotage : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Sabotage" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Sabotage::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_StopAndSearch
// 0x0000 (0x0104 - 0x0104)
class UAPBSeqEvent_TaskTargetAction_StopAndSearch : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_StopAndSearch" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_StopAndSearch::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TaskTargetAction_Vandalism
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_TaskTargetAction_Vandalism : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TaskTargetAction_Vandalism" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TaskTargetAction_Vandalism::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_TestVFX
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_TestVFX : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_TestVFX" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_TestVFX::pClassPointer = NULL;

// Class APBGame.cAPBSeqAct_GetPlayerBombLevel
// 0x0004 (0x00EC - 0x00E8)
class UcAPBSeqAct_GetPlayerBombLevel : public USequenceAction
{
public:
	int                                                BombLevel;                                        		// 0x00E8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSeqAct_GetPlayerBombLevel" );

		return pClassPointer;
	};

};

UClass* UcAPBSeqAct_GetPlayerBombLevel::pClassPointer = NULL;

// Class APBGame.cAPBSeqAct_ResetableCountGate
// 0x000C (0x00F4 - 0x00E8)
class UcAPBSeqAct_ResetableCountGate : public USequenceAction
{
public:
	int                                                nCount;                                           		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bOpen : 1;                                        		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                AutoCloseCount;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSeqAct_ResetableCountGate" );

		return pClassPointer;
	};

};

UClass* UcAPBSeqAct_ResetableCountGate::pClassPointer = NULL;

// Class APBGame.cAPBSeqCond_IsTaskTargetOfType
// 0x0005 (0x00D5 - 0x00D0)
class UcAPBSeqCond_IsTaskTargetOfType : public USequenceCondition
{
public:
	class UObject*                                     m_TargetActor;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eTaskOperationCategory;                         		// 0x00D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSeqCond_IsTaskTargetOfType" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UcAPBSeqCond_IsTaskTargetOfType::pClassPointer = NULL;

// Class APBGame.cAPBSeqCond_PlayerSide
// 0x0004 (0x00D4 - 0x00D0)
class UcAPBSeqCond_PlayerSide : public USequenceCondition
{
public:
	class UObject*                                     m_TargetActor;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSeqCond_PlayerSide" );

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UcAPBSeqCond_PlayerSide::pClassPointer = NULL;

// Class APBGame.cPrototypeVFX
// 0x0014 (0x0254 - 0x0240)
class AcPrototypeVFX : public AStaticMeshActor
{
public:
	struct FVector                                     InitialLocation;                                  		// 0x0240 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fInitialTime;                                     		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastTriggerUsedTime;                             		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPrototypeVFX" );

		return pClassPointer;
	};

};

UClass* AcPrototypeVFX::pClassPointer = NULL;

// Class APBGame.cCompressedAssetCustomisation
// 0x0020 (0x0060 - 0x0040)
class UcCompressedAssetCustomisation : public UObject
{
public:
	TArray< unsigned char >                            m_Data;                                           		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             m_aCachedGuids;                                   		// 0x004C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FDouble                                     m_LastAccessTime;                                 		// 0x0058 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCompressedAssetCustomisation" );

		return pClassPointer;
	};

	bool IsValid ( );
	void AddToLookup ( );
	bool DecompressAssetCustomisation ( class UcAssetCustomisation* pAsset, unsigned long bWaitForPackages );
	bool CompressAssetCustomisation ( class UcAssetCustomisation* pAsset );
};

UClass* UcCompressedAssetCustomisation::pClassPointer = NULL;

// Class APBGame.cCustomisationReplicator
// 0x0004 (0x0240 - 0x023C)
class AcCustomisationReplicator : public AReplicationInfo
{
public:
	class UcCompressedAssetCustomisation*              m_Data;                                           		// 0x023C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCustomisationReplicator" );

		return pClassPointer;
	};

	void eventServerNotifyOperationComplete ( );
	void eventClientNotifyTransferComplete ( class AcAPBPlayerController* pOwner );
	void eventClientReceiveData ( int nCount, unsigned char* packet );
	bool eventServerSendData ( int nBaseIndex );
	bool eventReplicateCustomisation ( class UcCompressedAssetCustomisation* Data );
};

UClass* AcCustomisationReplicator::pClassPointer = NULL;

// Class APBGame.cBaseState
// 0x0004 (0x0044 - 0x0040)
class UcBaseState : public UObject
{
public:
	unsigned long                                      m_bFinished : 1;                                  		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseState" );

		return pClassPointer;
	};

};

UClass* UcBaseState::pClassPointer = NULL;

// Class APBGame.cBaseControllerState
// 0x0008 (0x004C - 0x0044)
class UcBaseControllerState : public UcBaseState
{
public:
	class UcVehicleController*                         m_pOwner;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bExiting : 1;                                   		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseControllerState" );

		return pClassPointer;
	};

	void Render ( class UCanvas* Canvas );
	void OnRouteFollowerEvent ( unsigned char Event );
	void OnTick ( float fTimeElapsed );
};

UClass* UcBaseControllerState::pClassPointer = NULL;

// Class APBGame.cControllerChangeSpeedState
// 0x0008 (0x0054 - 0x004C)
class UcControllerChangeSpeedState : public UcBaseControllerState
{
public:
	float                                              m_fAcceleration;                                  		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              m_fTargetSpeed;                                   		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cControllerChangeSpeedState" );

		return pClassPointer;
	};

	void OnRouteFollowerEvent ( unsigned char Event );
	void OnExit ( );
	void OnEnter ( );
};

UClass* UcControllerChangeSpeedState::pClassPointer = NULL;

// Class APBGame.cAccelerateToDefaultSpeedState
// 0x0000 (0x0054 - 0x0054)
class UcAccelerateToDefaultSpeedState : public UcControllerChangeSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAccelerateToDefaultSpeedState" );

		return pClassPointer;
	};

	void OnExit ( );
};

UClass* UcAccelerateToDefaultSpeedState::pClassPointer = NULL;

// Class APBGame.cApproachJunctionState
// 0x000C (0x0058 - 0x004C)
class UcApproachJunctionState : public UcBaseControllerState
{
public:
	struct FcRoutePosition                             m_EntrancePosition;                               		// 0x004C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cApproachJunctionState" );

		return pClassPointer;
	};

	void OnExit ( );
};

UClass* UcApproachJunctionState::pClassPointer = NULL;

// Class APBGame.cBaseHierarchicalState
// 0x0004 (0x0050 - 0x004C)
class UcBaseHierarchicalState : public UcBaseControllerState
{
public:
	class UcBaseControllerState*                       m_pChildState;                                    		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseHierarchicalState" );

		return pClassPointer;
	};

	void SetChildState ( class UcBaseControllerState* pChildState );
	void OnChildStateFinished ( );
	void OnRouteFollowerEvent ( unsigned char Event );
	void OnTick ( float fTimeElapsed );
	void OnExit ( );
};

UClass* UcBaseHierarchicalState::pClassPointer = NULL;

// Class APBGame.cAvoidObstacleState
// 0x000C (0x005C - 0x0050)
class UcAvoidObstacleState : public UcBaseHierarchicalState
{
public:
	class UcWaitAtObstacleState*                       m_pWaitAtObstacleState;                           		// 0x0050 (0x0004) [0x0000000000000000]              
	class UcHaltForObstacleState*                      m_pHaltForObstacleState;                          		// 0x0054 (0x0004) [0x0000000000000000]              
	class UcChangeToUnblockedLaneState*                m_pChangeToUnblockedLaneState;                    		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAvoidObstacleState" );

		return pClassPointer;
	};

};

UClass* UcAvoidObstacleState::pClassPointer = NULL;

// Class APBGame.cBaseInitState
// 0x0008 (0x004C - 0x0044)
class UcBaseInitState : public UcBaseState
{
public:
	class UcBaseInitStateParams*                       m_pInitParams;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsInitialised : 1;                             		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseInitState" );

		return pClassPointer;
	};

};

UClass* UcBaseInitState::pClassPointer = NULL;

// Class APBGame.cBaseInitStateParams
// 0x0000 (0x0040 - 0x0040)
class UcBaseInitStateParams : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseInitStateParams" );

		return pClassPointer;
	};

};

UClass* UcBaseInitStateParams::pClassPointer = NULL;

// Class APBGame.cBaseLaneState
// 0x0004 (0x0048 - 0x0044)
class UcBaseLaneState : public UcBaseState
{
public:
	class UcVehicleRouteFollower*                      m_pOwner;                                         		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseLaneState" );

		return pClassPointer;
	};

	void Render2D ( class UCanvas* Canvas );
	void Render ( class UCanvas* Canvas );
	class URWTechNode* GetCurrentJunctionNode ( );
	float GetDistAlongRegisteredEdge ( class URWTechReachSpec* pEdge );
	void UpdateLocation ( struct FVector* vLocation, struct FVector* vDirection );
	void OnTick ( float fTimeElapsed );
};

UClass* UcBaseLaneState::pClassPointer = NULL;

// Class APBGame.cBaseLocomotionState
// 0x0028 (0x0074 - 0x004C)
class UcBaseLocomotionState : public UcBaseInitState
{
public:
	class UcPedestrianLocomotion*                      m_pParentLocomotion;                              		// 0x004C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vPosition;                                      		// 0x0050 (0x000C) [0x0000000000000000]              
	float                                              m_fDistanceAlongSegment;                          		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              m_fSegmentLength;                                 		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bReachedNewDTNode : 1;                          		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bReachedNewDTNodePreviously : 1;                		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FVector                                     m_vMovementVector;                                		// 0x0068 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseLocomotionState" );

		return pClassPointer;
	};

};

UClass* UcBaseLocomotionState::pClassPointer = NULL;

// Class APBGame.cBaseLocomotionStateControlPoints
// 0x001C (0x005C - 0x0040)
class UcBaseLocomotionStateControlPoints : public UcBaseInitStateParams
{
public:
	struct FVector                                     m_vInitialPosition;                               		// 0x0040 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vDestinationPosition;                           		// 0x004C (0x000C) [0x0000000000000000]              
	float                                              m_fStartingDistanceAlongSegment;                  		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseLocomotionStateControlPoints" );

		return pClassPointer;
	};

};

UClass* UcBaseLocomotionStateControlPoints::pClassPointer = NULL;

// Class APBGame.cBaseSpeedState
// 0x0008 (0x004C - 0x0044)
class UcBaseSpeedState : public UcBaseState
{
public:
	class UcVehicleRouteFollower*                      m_pOwner;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              m_fSpeed;                                         		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBaseSpeedState" );

		return pClassPointer;
	};

	void Render2D ( class UCanvas* Canvas );
	void Render ( class UCanvas* Canvas );
	void OnConstantTick ( float fTimeElapsed );
};

UClass* UcBaseSpeedState::pClassPointer = NULL;

// Class APBGame.cChangeLaneState
// 0x0048 (0x0090 - 0x0048)
class UcChangeLaneState : public UcBaseLaneState
{
public:
	struct FcRoutePosition                             m_StartPosition;                                  		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FcRoutePosition                             m_TargetPosition;                                 		// 0x0054 (0x000C) [0x0000000000000000]              
	float                                              m_fDistance;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              m_fDistanceAlongTargetLane;                       		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              m_fLeftOverDistance;                              		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetLaneIndexInCurrentSection;               		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentSectionIndex;                           		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              m_fLaneFraction;                                  		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_nNumRegisteredLanes;                            		// 0x0078 (0x0001) [0x0000000000000000]              
	int                                                m_nCurrentLaneIndex[ 0x2 ];                       		// 0x007C (0x0008) [0x0000000000000000]              
	TArray< class URWTechReachSpec* >                  m_aRegisteredEdgeList;                            		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cChangeLaneState" );

		return pClassPointer;
	};

	void Render2D ( class UCanvas* Canvas );
	void Render ( class UCanvas* Canvas );
	void SendRepInfo ( struct FcRoutePosition* StartPos, struct FcRoutePosition* TargetPos, float* fDistance );
	void ReceiveRepInfo ( struct FcRoutePosition StartPos, struct FcRoutePosition TargetPos, float fDistance );
	void UnregisterEdges ( );
	void RegisterLane ( int nLaneIndex );
	float GetSpeedMultiplier ( );
	float GetDistanceToGo ( );
	class URWTechNode* GetCurrentJunctionNode ( );
	float GetDistAlongRegisteredEdge ( class URWTechReachSpec* pEdge );
	int GetTargetLaneIndexInStartingSection ( float* fDistanceAlongTargetLane );
	void UpdateLocation ( struct FVector* vLocation, struct FVector* vDirection );
	void OnTick ( float fTimeElapsed );
	void OnExit ( );
	void OnEnter ( );
};

UClass* UcChangeLaneState::pClassPointer = NULL;

// Class APBGame.cChangeSpeedState
// 0x0008 (0x0054 - 0x004C)
class UcChangeSpeedState : public UcBaseSpeedState
{
public:
	float                                              m_fAcceleration;                                  		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              m_fTargetSpeed;                                   		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cChangeSpeedState" );

		return pClassPointer;
	};

	void SendRepInfo ( float* fSpeed, float* fAcceleration, float* fTargetSpeed );
	void ReceiveRepInfo ( float fSpeed, float fAcceleration, float fTargetSpeed );
	void OnConstantTick ( float fTimeElapsed );
	void OnExit ( );
	void OnEnter ( );
};

UClass* UcChangeSpeedState::pClassPointer = NULL;

// Class APBGame.cControllerChangeLaneState
// 0x000C (0x0058 - 0x004C)
class UcControllerChangeLaneState : public UcBaseControllerState
{
public:
	struct FcRoutePosition                             m_TargetPosition;                                 		// 0x004C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cControllerChangeLaneState" );

		return pClassPointer;
	};

	void OnRouteFollowerEvent ( unsigned char Event );
	void OnExit ( );
};

UClass* UcControllerChangeLaneState::pClassPointer = NULL;

// Class APBGame.cChangeToUnblockedLaneState
// 0x0000 (0x0058 - 0x0058)
class UcChangeToUnblockedLaneState : public UcControllerChangeLaneState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cChangeToUnblockedLaneState" );

		return pClassPointer;
	};

	void OnExit ( );
	void OnEnter ( );
};

UClass* UcChangeToUnblockedLaneState::pClassPointer = NULL;

// Class APBGame.cConstantSpeedState
// 0x0000 (0x004C - 0x004C)
class UcConstantSpeedState : public UcBaseSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cConstantSpeedState" );

		return pClassPointer;
	};

	void SendRepInfo ( float* fSpeed );
	void ReceiveRepInfo ( float fSpeed );
	void OnExit ( );
	void OnEnter ( );
};

UClass* UcConstantSpeedState::pClassPointer = NULL;

// Class APBGame.cControllerIdleState
// 0x0000 (0x004C - 0x004C)
class UcControllerIdleState : public UcBaseControllerState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cControllerIdleState" );

		return pClassPointer;
	};

	void OnExit ( );
	void OnEnter ( );
};

UClass* UcControllerIdleState::pClassPointer = NULL;

// Class APBGame.cCruiseState
// 0x0030 (0x007C - 0x004C)
class UcCruiseState : public UcBaseControllerState
{
public:
	class UcBaseControllerState*                       m_pSpeedState;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	class UcBaseControllerState*                       m_pLaneState;                                     		// 0x0050 (0x0004) [0x0000000000000000]              
	class UcBaseControllerState*                       m_pChangeLaneSpeedState;                          		// 0x0054 (0x0004) [0x0000000000000000]              
	class UcControllerIdleState*                       m_pIdleSpeedState;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	class UcControllerIdleState*                       m_pIdleLaneState;                                 		// 0x005C (0x0004) [0x0000000000000000]              
	class UcAccelerateToDefaultSpeedState*             m_pAccelerateToDefaultSpeedState;                 		// 0x0060 (0x0004) [0x0000000000000000]              
	class UcGetInDefaultLaneState*                     m_pGetInDefaultLaneState;                         		// 0x0064 (0x0004) [0x0000000000000000]              
	class UcMatchSlowerSpeedState*                     m_pMatchSlowerSpeedState;                         		// 0x0068 (0x0004) [0x0000000000000000]              
	class UcMatchFasterSpeedState*                     m_pMatchFasterSpeedState;                         		// 0x006C (0x0004) [0x0000000000000000]              
	class UcHaltForVehicleInFrontState*                m_pHaltForVehicleInFrontState;                    		// 0x0070 (0x0004) [0x0000000000000000]              
	class UcSlowDownForEndOfRouteState*                m_pSlowDownForEndOfRouteState;                    		// 0x0074 (0x0004) [0x0000000000000000]              
	class UcSlowDownToChangeLaneState*                 m_pSlowDownToChangeLaneState;                     		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCruiseState" );

		return pClassPointer;
	};

};

UClass* UcCruiseState::pClassPointer = NULL;

// Class APBGame.cEdgeLocomotionState
// 0x000C (0x0080 - 0x0074)
class UcEdgeLocomotionState : public UcBaseLocomotionState
{
public:
	struct FVector                                     m_vDirectionVectorNorm;                           		// 0x0074 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEdgeLocomotionState" );

		return pClassPointer;
	};

};

UClass* UcEdgeLocomotionState::pClassPointer = NULL;

// Class APBGame.cEdgeLocomotionStateControlPoints
// 0x0004 (0x0060 - 0x005C)
class UcEdgeLocomotionStateControlPoints : public UcBaseLocomotionStateControlPoints
{
public:
	unsigned long                                      m_bIsEndingOnDTRouteNode : 1;                     		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEdgeLocomotionStateControlPoints" );

		return pClassPointer;
	};

};

UClass* UcEdgeLocomotionStateControlPoints::pClassPointer = NULL;

// Class APBGame.cEdgeUsageManager
// 0x0024 (0x0064 - 0x0040)
class UcEdgeUsageManager : public UObject
{
public:
	TArray< struct FPointer >                          m_aUsers;                                         		// 0x0040 (0x000C) [0x0000000000101000]              ( CPF_Native )
	int                                                m_nNumRegDelayRequests;                           		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bRenderDebugGraphics : 1;                       		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bEdgesInGrid : 1;                               		// 0x0050 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bEdgeUsersCreated : 1;                          		// 0x0050 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                m_nEdgeCount;                                     		// 0x0054 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            m_aEdgeUserTypesToRender;                         		// 0x0058 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEdgeUsageManager" );

		return pClassPointer;
	};

	void Initialise ( );
};

UClass* UcEdgeUsageManager::pClassPointer = NULL;

// Class APBGame.cExitJunctionState
// 0x0010 (0x005C - 0x004C)
class UcExitJunctionState : public UcBaseControllerState
{
public:
	class URWTechNode*                                 m_pJunctionNode;                                  		// 0x004C (0x0004) [0x0000000000000000]              
	struct FcRoutePosition                             m_ExitPosition;                                   		// 0x0050 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cExitJunctionState" );

		return pClassPointer;
	};

	void OnExit ( );
};

UClass* UcExitJunctionState::pClassPointer = NULL;

// Class APBGame.cFollowLaneState
// 0x0014 (0x005C - 0x0048)
class UcFollowLaneState : public UcBaseLaneState
{
public:
	struct FcRoutePosition                             m_RoutePosition;                                  		// 0x0048 (0x000C) [0x0000000000000000]              
	float                                              m_fInitialDistance;                               		// 0x0054 (0x0004) [0x0000000000000000]              
	class URWTechReachSpec*                            m_pLaneEdge;                                      		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cFollowLaneState" );

		return pClassPointer;
	};

	void SendRepInfo ( struct FcRoutePosition* pos );
	void ReceiveRepInfo ( struct FcRoutePosition pos );
	void UpdateLocation ( struct FVector* vLocation, struct FVector* vDirection );
	class URWTechNode* GetCurrentJunctionNode ( );
	float GetDistAlongRegisteredEdge ( class URWTechReachSpec* pEdge );
	void GetLocationOnLaneEdge ( float fDistance, struct FVector* vLocation, struct FVector* vDirection );
	void Move ( float fDistanceToGo );
	void ExitLaneEdge ( );
	void EnterLaneEdge ( );
	void SetLaneEdge ( class URWTechReachSpec* pLaneEdge );
	void OnTick ( float fTimeElapsed );
	void OnExit ( );
	void OnEnter ( );
};

UClass* UcFollowLaneState::pClassPointer = NULL;

// Class APBGame.cGetInDefaultLaneState
// 0x0000 (0x0058 - 0x0058)
class UcGetInDefaultLaneState : public UcControllerChangeLaneState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGetInDefaultLaneState" );

		return pClassPointer;
	};

	void OnExit ( );
	void OnEnter ( );
};

UClass* UcGetInDefaultLaneState::pClassPointer = NULL;

// Class APBGame.cHaltForJunctionState
// 0x0004 (0x0058 - 0x0054)
class UcHaltForJunctionState : public UcControllerChangeSpeedState
{
public:
	unsigned long                                      m_bDecelerating : 1;                              		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHaltForJunctionState" );

		return pClassPointer;
	};

};

UClass* UcHaltForJunctionState::pClassPointer = NULL;

// Class APBGame.cHaltForObstacleState
// 0x0004 (0x0058 - 0x0054)
class UcHaltForObstacleState : public UcControllerChangeSpeedState
{
public:
	unsigned long                                      m_bDecelerating : 1;                              		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHaltForObstacleState" );

		return pClassPointer;
	};

};

UClass* UcHaltForObstacleState::pClassPointer = NULL;

// Class APBGame.cHaltForVehicleInFrontState
// 0x0000 (0x0054 - 0x0054)
class UcHaltForVehicleInFrontState : public UcControllerChangeSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHaltForVehicleInFrontState" );

		return pClassPointer;
	};

	void OnExit ( );
};

UClass* UcHaltForVehicleInFrontState::pClassPointer = NULL;

// Class APBGame.cIEventReaction
// 0x0000 (0x0040 - 0x0040)
class UcIEventReaction : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cIEventReaction" );

		return pClassPointer;
	};

};

UClass* UcIEventReaction::pClassPointer = NULL;

// Class APBGame.cLCEditorMisc
// 0x0034 (0x0074 - 0x0040)
class UcLCEditorMisc : public UObject
{
public:
	TArray< int >                                      m_anTODPedPopulationLimit;                        		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_anTODVehPopulationLimit;                        		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLCRacialColourVariations >         m_aRacialColourVariations;                        		// 0x0058 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	float                                              m_fPedMaxHealth;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              m_fPedHealthRechargeDelay;                        		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              m_fPedHealthRechargeDuration;                     		// 0x006C (0x0004) [0x0000000000000000]              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCEditorMisc" );

		return pClassPointer;
	};

};

UClass* UcLCEditorMisc::pClassPointer = NULL;

// Class APBGame.cLCEditorNPCTypes
// 0x00A4 (0x00E4 - 0x0040)
class UcLCEditorNPCTypes : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0040 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorNPCTypes.m_mTypeOrCategoriesDynamic
	struct FPointer                                    m_pmCurrentTODTypeOrCategoriesDynamic;            		// 0x007C (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0080 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorNPCTypes.m_mTypeOrCategoriesStatic
	TArray< int >                                      m_aNPCTypeIDAry;                                  		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aPedestrianTypeIDAry;                           		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aVehicleTypeIDAry;                              		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AcLCManager*                                 m_pLCManager;                                     		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCEditorNPCTypes" );

		return pClassPointer;
	};

};

UClass* UcLCEditorNPCTypes::pClassPointer = NULL;

// Class APBGame.cLCEditorReactions
// 0x0050 (0x0090 - 0x0040)
class UcLCEditorReactions : public UObject
{
public:
	TArray< struct FLCData_NPC >                       m_aNPCArr;                                        		// 0x0040 (0x000C) [0x0000000000001000]              ( CPF_Native )
	class AcLCManager*                                 m_pLCManager;                                     		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nNoReactionID;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0054 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorReactions.m_aEventNameToID

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCEditorReactions" );

		return pClassPointer;
	};

};

UClass* UcLCEditorReactions::pClassPointer = NULL;

// Class APBGame.cLCEditorUtility
// 0x0004 (0x0044 - 0x0040)
class UcLCEditorUtility : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCEditorUtility" );

		return pClassPointer;
	};

};

UClass* UcLCEditorUtility::pClassPointer = NULL;

// Class APBGame.cLCEditorVignettes
// 0x0134 (0x0174 - 0x0040)
class UcLCEditorVignettes : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0040 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorVignettes.m_mVignetteNameToEventIDs
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x007C (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorVignettes.m_mVignetteEventIDToOverrrideEventIDs
	class AcLCManager*                                 m_pLCManager;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x00BC (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorVignettes.m_mVignetteNPCTypeTODProbability
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x00F8 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorVignettes.m_mVignetteEventIDToReactions
	unsigned char                                      UnknownData04[ 0x3C ];                            		// 0x0134 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cLCEditorVignettes.m_mVignetteEventOverrideIDToReactions
	int                                                m_nNoReactionID;                                  		// 0x0170 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCEditorVignettes" );

		return pClassPointer;
	};

};

UClass* UcLCEditorVignettes::pClassPointer = NULL;

// Class APBGame.cLCIniData
// 0x01B4 (0x01F4 - 0x0040)
class UcLCIniData : public UObject
{
public:
	float                                              m_cfg_fPedestriansPerSecPerNode;                  		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nNPCsPerSecInLC;                            		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinRunAwayFromDangerAngle;                 		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxWitnessReactionTime;                    		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxDangerReactionTime;                     		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fDriverCowerMinDuration;                    		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fDriverCowerMaxDuration;                    		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fWorldEventEvaluationIntervalTime;          		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fAvoidVehicleEvaluationIntervalTime;        		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxWorldEventsPerSecond;                   		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxLocalEventsPerSecond;                   		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fLookAtDurationMin;                         		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fLookAtDurationMax;                         		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fLookAtCooldownTimeMin;                     		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fLookAtCooldownTimeMax;                     		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianCollisionVolumeRadius;           		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianCollisionVolumeLocomotionHeight; 		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianCollisionVolumeBottomOffset;     		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianCollisionVolumeAdditionalHeight; 		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianFatalVehicleSpeed;               		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianFatalNudgeDistance;              		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianNudgeRetractSpeed;               		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianBeginSlideOffNudgeDistance;      		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianClientSnapBackNudgeDistance;     		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianBumpReactionAngleThreshold;      		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianVehicleImpactLookaheadTime;      		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinPedestrianVehicleImpactSpeed;           		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinNPCRagdollDisplayTime;                  		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxNPCRagdollDisplayTime;                  		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxNumberOfNPCRagdolls;                    		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nHardMaxNumberOfNPCRagdolls;                		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinNPCRagdollDespawnDelay;                 		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxPedVignettesPerRoute;                   		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nPedVignettesToSkip;                        		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nPedVignettesPerformedBeforeSkip;           		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinDeviationOfBaseRunSpeed;                		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxDeviationOfBaseRunSpeed;                		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinDeviationOfBaseWalkSpeed;               		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxDeviationOfBaseWalkSpeed;               		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fObstructionLookAheadVarianceMin;           		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fObstructionLookAheadVarianceMax;           		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fObstructionCheckIntervalTime;              		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxObstructionRerouteCount;                		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxObstructionWaitTime;                    		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fObstructionRerouteCountResetTime;          		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fObstructionRerouteWaitTimeMin;             		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fObstructionRerouteWaitTimeMax;             		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMinPedRouteChunkNodes;                     		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinPedRouteChunkLength;                    		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianCurbStopLineDistance;            		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianStopLineCollisionDistanceMin;    		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianStopLineCollisionDistanceMax;    		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianInMotionCollisionDistanceMin;    		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianInMotionCollisionDistanceMax;    		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianStationaryCollisionDistanceMin;  		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianStationaryCollisionDistanceMax;  		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianMinCrossingStopTimeMin;          		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianMinCrossingStopTimeMax;          		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVehicleSpawnIntervalVeryHigh;                  		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVehicleSpawnIntervalHigh;                      		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVehicleSpawnIntervalMedium;                    		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVehicleSpawnIntervalLow;                       		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVehicleSpawnIntervalVeryLow;                   		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxVehicleTickTime;                        		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_nMaxVehicleTicksPerFrame;                   		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPGPlayerRegistrationInterval;                  		// 0x0144 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPGPropRegistrationInterval;                    		// 0x0148 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPGVehicleRegistrationInterval;                 		// 0x014C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTTICancelDuration;                             		// 0x0150 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxLookAroundDistance;                     		// 0x0154 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianJunctionPriorityScale;           		// 0x0158 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fVehicleJunctionPriorityScale;              		// 0x015C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_cfg_bChooseOnlyWholePedestrianColourSets : 1;   		// 0x0160 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_cfg_bChoosePedestrianColoursByColourIndex : 1;  		// 0x0160 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	int                                                m_cfg_nDebugOverridePedAssetIndexLow;             		// 0x0164 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nDebugOverridePedAssetIndexHigh;            		// 0x0168 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fCollisionVolumeUpdateIntervalDuringRootMotion;		// 0x016C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fAvoidLoudVehicleConeHorizontalAngle;       		// 0x0170 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fAvoidLoudVehicleConeVerticalAngle;         		// 0x0174 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinLoudVehicleNotifySpeed;                 		// 0x0178 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fAllowedTTIHeightDifference;                		// 0x017C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianBankingScale;                    		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianBankingMaxAngle;                 		// 0x0184 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianBankingBlendInSpeed;             		// 0x0188 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fPedestrianBankingBlendOutSpeed;            		// 0x018C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fIgnoreBehindDistance;                          		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              m_fMinCollisionRelativeSpeed;                     		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxCollisionRelativeSpeed;                     		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              m_fCollisionRadius;                               		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              m_fCollisionShoulderRadius;                       		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                m_nCollisionSamples;                              		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              m_fCollisionLookAheadTime;                        		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              m_fCollisionLookBehindTime;                       		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              m_fMaxInternalRotationAngle;                      		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxVisibleRotationAngle;                       		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxRotationSpeed;                              		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxRotationResetSpeed;                         		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              m_fMinSideDistance;                               		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSideStepSpeed;                              		// 0x01C4 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSideStepResetSpeed;                         		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              m_fSideStepOutputCoefficient;                     		// 0x01CC (0x0004) [0x0000000000000000]              
	float                                              m_fMaxSideStepOutput;                             		// 0x01D0 (0x0004) [0x0000000000000000]              
	float                                              m_fOnTopDistance;                                 		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              m_fOnTopSameSpeedThreshold;                       		// 0x01D8 (0x0004) [0x0000000000000000]              
	float                                              m_fMinStandTime;                                  		// 0x01DC (0x0004) [0x0000000000000000]              
	float                                              m_fMaxStandTime;                                  		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              m_fMinTimeBetweenStandings;                       		// 0x01E4 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxNumberOfStandings;                          		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              m_fMinTimeBetweenSpeedChanges;                    		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                m_nMaxNumberOfSpeedChanges;                       		// 0x01F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCIniData" );

		return pClassPointer;
	};

};

UClass* UcLCIniData::pClassPointer = NULL;

// Class APBGame.cLCManager
// 0x01F4 (0x0430 - 0x023C)
class AcLCManager : public AcLCManagerBase
{
public:
	class UcSpawnDestroyManager*                       m_pSpawnDestroyManager;                           		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcVehicleManager*                            m_pVehicleManager;                                		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcNodeManager*                               m_pNodeManager;                                   		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcEventManager*                              m_pEventManager;                                  		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcNPCTrackingManager*                        m_pNPCTrackingManager;                            		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcJunctionManager*                           m_pJunctionManager;                               		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcEdgeUsageManager*                          m_pEdgeUsageManager;                              		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcNPCDriverManager*                          m_pNPCDriverManager;                              		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcLCIniData*                                 m_pLCIniData;                                     		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcPedestrianPathGenerator*                   m_pPPathGenerator;                                		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAStarManager*                              m_pAStarManager;                                  		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcLCEditorMisc*                              m_pLCEditorMisc;                                  		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcLCEditorNPCTypes*                          m_pLCEditorNPCTypes;                              		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcLCEditorReactions*                         m_pLCEditorReactions;                             		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcLCEditorVignettes*                         m_pLCEditorVignettes;                             		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    m_pLCManagerDebugPage;                            		// 0x0278 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pNPCTypesDebugPage;                             		// 0x027C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pPGDebugPage;                                   		// 0x0280 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pReactionsDebugPage;                            		// 0x0284 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSTMDebugPage;                                  		// 0x0288 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pLCSynchDebugPage;                              		// 0x028C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pLCDistributionDebugPage;                       		// 0x0290 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      m_eState;                                         		// 0x0294 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeLeftToLog;                                 		// 0x0298 (0x0004) [0x0000000000000000]              
	TArray< class AcRagdollableNPCSkeletalMeshActor* > m_aActiveRagdolls;                                		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fTimeSinceLastRagdollRegistered;                		// 0x02A8 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sNPCStats[ 0x1E ];                              		// 0x02AC (0x0168) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                m_nStatReplicationCompeleted;                     		// 0x0414 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nFrameNumber;                                   		// 0x0418 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHasDestroyLCBeenUsed : 1;                      		// 0x041C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAllowInfiniteLoopAssert : 1;                   		// 0x041C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                m_nLoggingCurrentNPCIndex;                        		// 0x0420 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnToDEvent__Delegate;                           		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCManager" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName sVariableName );
	void LogNPCStats ( );
	void OnToDEvent ( int nMessage, int nParam, class AActor* Emitter );
	void NotifyTODChange ( int pr_nTOD );
};

UClass* AcLCManager::pClassPointer = NULL;

// Class APBGame.cLCStats
// 0x0008 (0x0048 - 0x0040)
class UcLCStats : public UObject
{
public:
	int                                                m_nVRepOverflows;                                 		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nFRepOverflows;                                 		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCStats" );

		return pClassPointer;
	};

};

UClass* UcLCStats::pClassPointer = NULL;

// Class APBGame.cMatchFasterSpeedState
// 0x000C (0x0060 - 0x0054)
class UcMatchFasterSpeedState : public UcControllerChangeSpeedState
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleAhead;                                  		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleAheadAcceleration;                      		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleAheadTargetSpeed;                       		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cMatchFasterSpeedState" );

		return pClassPointer;
	};

};

UClass* UcMatchFasterSpeedState::pClassPointer = NULL;

// Class APBGame.cMatchSlowerSpeedState
// 0x0010 (0x0064 - 0x0054)
class UcMatchSlowerSpeedState : public UcControllerChangeSpeedState
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleAhead;                                  		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleAheadAcceleration;                      		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleAheadTargetSpeed;                       		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDecelerating : 1;                              		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cMatchSlowerSpeedState" );

		return pClassPointer;
	};

};

UClass* UcMatchSlowerSpeedState::pClassPointer = NULL;

// Class APBGame.cNodeManager
// 0x0038 (0x0078 - 0x0040)
class UcNodeManager : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< class URWTechNode* >                       m_aPedestrianDetailedNodes;                       		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URWTechNode* >                       m_aPedestrianDetailedSDNodes;                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URWTechNode* >                       m_aAlternateVehicleSpawnNodes;                    		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URWTechNode* >                       m_aVehicleSpawnDestroyNodes;                      		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcPedestrianBlockManager*                    m_pPedestrianBlockManager;                        		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNodeManager" );

		return pClassPointer;
	};

	void InitializeInGameOnClient ( );
	void InitializeInGame ( );
	void InitializeInEditor ( );
};

UClass* UcNodeManager::pClassPointer = NULL;

// Class APBGame.cNPCBrain
// 0x0028 (0x0068 - 0x0040)
class UcNPCBrain : public UObject
{
public:
	class AActor*                                      m_pPhysRep;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsPresentAtLoadUp : 1;                         		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fRadiusLC;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pSpawnNode;                                     		// 0x004C (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pDestroyNode;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FDouble                                     m_fLastLookAtTime;                                		// 0x0054 (0x0008) [0x0000000000000000]              
	struct FDouble                                     m_fLookAtCooldownTime;                            		// 0x005C (0x0008) [0x0000000000000000]              
	struct FPointer                                    m_pRandomGenerator;                               		// 0x0064 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCBrain" );

		return pClassPointer;
	};

};

UClass* UcNPCBrain::pClassPointer = NULL;

// Class APBGame.cNPCDef
// 0x0000 (0x0040 - 0x0040)
class UcNPCDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCDef" );

		return pClassPointer;
	};

};

UClass* UcNPCDef::pClassPointer = NULL;

// Class APBGame.cNPCDriverManager
// 0x0010 (0x0050 - 0x0040)
class UcNPCDriverManager : public UObject
{
public:
	TArray< struct FNPCDriverInfo >                    m_NPCArray;                                       		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fTimeInQueue;                                   		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCDriverManager" );

		return pClassPointer;
	};

	void ResetDrivers ( );
	void ManualTick ( float fDeltaTime );
	void AddNPCToQueue ( int eNPCType );
};

UClass* UcNPCDriverManager::pClassPointer = NULL;

// Class APBGame.cNPCPedestrianBrain
// 0x0060 (0x00C8 - 0x0068)
class UcNPCPedestrianBrain : public UcNPCBrain
{
public:
	struct FPointer                                    VfTable_IcIEventReaction;                         		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcPedestrianController*                      m_pController;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pSpeedController;                               		// 0x0070 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UcPedestrianRouteFollower*                   m_pRouteFollower;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	class UcEventManager*                              m_pEM;                                            		// 0x0078 (0x0004) [0x0000000000000000]              
	class UcReactionManager*                           m_pRM;                                            		// 0x007C (0x0004) [0x0000000000000000]              
	class UcPedestrianAvoidanceManager*                m_pPAM;                                           		// 0x0080 (0x0004) [0x0000000000000000]              
	class UcPedestrianJunctionManager*                 m_pPJM;                                           		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fPedestrianRadius;                              		// 0x0088 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              m_fPedestrianHeight;                              		// 0x008C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FPointer                                    m_pLCCollisionBound;                              		// 0x0090 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      m_eBrainState;                                    		// 0x0094 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nReactionIDIncrementor;                         		// 0x0095 (0x0001) [0x0000000000000000]              
	class URWTechNode*                                 m_pStartNode;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pTargetSDNode;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pPendingVignetteNode;                           		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceVignetteStarted;                      		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                m_nObstructionRerouteCount;                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeWaitingAtObstruction;                      		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fTimeObstructionCleared;                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fRerouteCountResetTimer;                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fWaitBeforeReroutingTimer;                      		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToSkipObstructionChecks;                   		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_nNumObstructionCheckSkippingsToSkip;            		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bMugged : 1;                                    		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCPedestrianBrain" );

		return pClassPointer;
	};

	void NotifyOnVignetteAnimationComplete ( );
};

UClass* UcNPCPedestrianBrain::pClassPointer = NULL;

// Class APBGame.cNPCSpawnRequest
// 0x0018 (0x0058 - 0x0040)
class UcNPCSpawnRequest : public UObject
{
public:
	int                                                m_nID;                                            		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nNPCTypeID;                                     		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                m_nNumToSpawn;                                    		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSpawnImmediately : 1;                          		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    m_paSpawnNodes;                                   		// 0x0050 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_paDestroyNodes;                                 		// 0x0054 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCSpawnRequest" );

		return pClassPointer;
	};

};

UClass* UcNPCSpawnRequest::pClassPointer = NULL;

// Class APBGame.cNPCStats
// 0x0014 (0x0054 - 0x0040)
class UcNPCStats : public UObject
{
public:
	int                                                m_nTicksAliveFor;                                 		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nTicksOverDesiredPopSize;                       		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetsRequested;                              		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetRequests;                                		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nTargetsSpawned;                                		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCStats" );

		return pClassPointer;
	};

};

UClass* UcNPCStats::pClassPointer = NULL;

// Class APBGame.cNPCTrackingManager
// 0x0074 (0x00B4 - 0x0040)
class UcNPCTrackingManager : public UObject
{
public:
	TArray< class UcNPCPedestrianBrain* >              m_aPedestrianWaitingRoom;                         		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcNPCVehicleBrain* >                 m_aVehicleWaitingRoom;                            		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0058 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cNPCTrackingManager.m_mNPCTypeOrCategoryRecords
	TArray< class UcNPCBrain* >                        m_aActiveNPCs;                                    		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nActivePedestrians;                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                m_nActiveVehicles;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                m_nNumPedestriansAllocated;                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                m_nNumVehiclesAllocated;                          		// 0x00AC (0x0004) [0x0000000000000000]              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCTrackingManager" );

		return pClassPointer;
	};

};

UClass* UcNPCTrackingManager::pClassPointer = NULL;

// Class APBGame.cNPCVehicleBrain
// 0x008C (0x00F4 - 0x0068)
class UcNPCVehicleBrain : public UcNPCBrain
{
public:
	struct FPointer                                    VfTable_IcIEventReaction;                         		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcVehicleRouteFollower*                      m_pVehicleRouteFollower;                          		// 0x006C (0x0004) [0x0000000000000000]              
	class UcEventManager*                              m_pEM;                                            		// 0x0070 (0x0004) [0x0000000000000000]              
	class UcReactionManager*                           m_pRM;                                            		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vLocation;                                      		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rRotation;                                      		// 0x0084 (0x000C) [0x0000000000000000]              
	unsigned long                                      m_bAssetsLoaded : 1;                              		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRearAxleReplicated : 1;                        		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bReplicatingSpeedUpdateThisFrame : 1;           		// 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FVector                                     m_vRearAxleLocation;                              		// 0x0094 (0x000C) [0x0000000000000000]              
	class URWTechReachSpec*                            m_pStartingEdge;                                  		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UcVehicleController*                         m_pVehicleController;                             		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fDefaultAcceleration;                           		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              m_fDefaultDeceleration;                           		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fFrontAxleOffset;                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fRearAxleOffset;                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleLength;                                 		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fVehicleWidth;                                  		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vFrontAxleLocation;                             		// 0x00C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vFrontAxleDirection;                            		// 0x00CC (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vDirection;                                     		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              m_fStationaryTimer;                               		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                m_nBlockedCount;                                  		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              m_fDefaultSpeedRatio;                             		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pLCCollisionBound;                              		// 0x00F0 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCVehicleBrain" );

		return pClassPointer;
	};

	void RepChangeLaneState ( class UcChangeLaneState* pState );
	void RepFollowLaneState ( class UcFollowLaneState* pState );
	void RepChangeSpeedState ( class UcChangeSpeedState* pState );
	void RepConstantSpeedState ( class UcConstantSpeedState* pState );
	void OnRouteFollowerEvent ( unsigned char Event );
	void ChangeSpeed ( float fAcceleration, float fTargetSpeed );
	void ConstantSpeed ( float fSpeed );
	void SetPathfindingRoute ( int nRouteLUTIndex );
	void SetPathfindingDetourRoute ( int nDetourRouteLUTIndex );
	void MovePhysRep ( );
	void ClearIndicatorLightStatus ( );
	void SetActiveIndicatorLight ( unsigned char pr_IndicatorLightActive );
	float GetCurrentSpeed ( );
	void HijackCancelled ( );
	void StopAndWait ( );
	void InstantiatePathgraphRouteFollower ( );
	void VehicleRecycleByLC ( );
};

UClass* UcNPCVehicleBrain::pClassPointer = NULL;

// Class APBGame.cPedestrianAvoidanceManager
// 0x002C (0x006C - 0x0040)
class UcPedestrianAvoidanceManager : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcLCIniData*                                 m_pLCIniData;                                     		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fTimeSinceLastStanding;                         		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nNumberOfStandings;                             		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastSpeedChange;                      		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_nNumberOfSpeedChanges;                          		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentSideStep;                               		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetSideStep;                                		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                m_nRotationPriority;                              		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nSideStepPriority;                              		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nStopAndStandPriority;                          		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianAvoidanceManager" );

		return pClassPointer;
	};

};

UClass* UcPedestrianAvoidanceManager::pClassPointer = NULL;

// Class APBGame.cPedestrianController
// 0x0038 (0x0078 - 0x0040)
class UcPedestrianController : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< class URWTechNode* >                       m_aVNodesPerformedAt;                             		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URWTechNode* >                       m_aVDPNodesPerformedAt;                           		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bChosenToDoVignette : 1;                        		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDebugPerformAllVignettes : 1;                  		// 0x005C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                m_nVignettesPerformed;                            		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nVignettesPassedOn;                             		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fNearestNode_ExtraOffsetTolerance;          		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fNearestNode_ExtraNodeDistanceTolerance;    		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fNearestNode_ExtraNodeDistanceToleranceAtCrossing;		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fConsiderNextEdgeThreshold;                 		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianController" );

		return pClassPointer;
	};

};

UClass* UcPedestrianController::pClassPointer = NULL;

// Class APBGame.cPedestrianDef
// 0x0000 (0x0040 - 0x0040)
class UcPedestrianDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianDef" );

		return pClassPointer;
	};

};

UClass* UcPedestrianDef::pClassPointer = NULL;

// Class APBGame.cPopulationManager
// 0x0000 (0x0040 - 0x0040)
class UcPopulationManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPopulationManager" );

		return pClassPointer;
	};

};

UClass* UcPopulationManager::pClassPointer = NULL;

// Class APBGame.cSlowDownForEndOfRouteState
// 0x0000 (0x004C - 0x004C)
class UcSlowDownForEndOfRouteState : public UcBaseControllerState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSlowDownForEndOfRouteState" );

		return pClassPointer;
	};

	void OnExit ( );
};

UClass* UcSlowDownForEndOfRouteState::pClassPointer = NULL;

// Class APBGame.cSlowDownForJunctionState
// 0x0004 (0x0058 - 0x0054)
class UcSlowDownForJunctionState : public UcControllerChangeSpeedState
{
public:
	float                                              m_fDistanceToJunction;                            		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSlowDownForJunctionState" );

		return pClassPointer;
	};

	void OnExit ( );
};

UClass* UcSlowDownForJunctionState::pClassPointer = NULL;

// Class APBGame.cSlowDownToChangeLaneState
// 0x0000 (0x0054 - 0x0054)
class UcSlowDownToChangeLaneState : public UcControllerChangeSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSlowDownToChangeLaneState" );

		return pClassPointer;
	};

};

UClass* UcSlowDownToChangeLaneState::pClassPointer = NULL;

// Class APBGame.cSmoothLocomotionState
// 0x0008 (0x007C - 0x0074)
class UcSmoothLocomotionState : public UcBaseLocomotionState
{
public:
	struct FPointer                                    m_pSpline;                                        		// 0x0074 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fNodePassDistance;                              		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSmoothLocomotionState" );

		return pClassPointer;
	};

};

UClass* UcSmoothLocomotionState::pClassPointer = NULL;

// Class APBGame.cSmoothLocomotionStateControlPoints
// 0x000C (0x0068 - 0x005C)
class UcSmoothLocomotionStateControlPoints : public UcBaseLocomotionStateControlPoints
{
public:
	struct FVector                                     m_vMiddlePosition;                                		// 0x005C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSmoothLocomotionStateControlPoints" );

		return pClassPointer;
	};

};

UClass* UcSmoothLocomotionStateControlPoints::pClassPointer = NULL;

// Class APBGame.cSpawnDestroyManager
// 0x007C (0x00BC - 0x0040)
class UcSpawnDestroyManager : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0040 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSpawnDestroyManager.m_mNPCSpawnRequests
	int                                                m_nCurrentSpawnRequestID;                         		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                m_nLastProcessedRequest;                          		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeElapsedSinceNPCSpawned;                    		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nNextNPCIDToGive;                               		// 0x0088 (0x0004) [0x0000000000000000]              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_debug_nForcedPedestrianSpawnNode;               		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                m_debug_nForcedPedestrianDestroyNode;             		// 0x0094 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsSTBPActive : 1;                              		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_edgesProcessed;                                 		// 0x009C (0x0004) [0x0000000000000000]              
	TArray< struct FspawnEdgeEvaluationInfo >          m_edgesToEvaluate;                                		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FspawnEdgeEvaluationInfo >          m_fitnessSortedEdges;                             		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCurrentFitnessCriteriaIndex;                   		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSpawnDestroyManager" );

		return pClassPointer;
	};

};

UClass* UcSpawnDestroyManager::pClassPointer = NULL;

// Class APBGame.cStopAndWaitState
// 0x0004 (0x0050 - 0x004C)
class UcStopAndWaitState : public UcBaseControllerState
{
public:
	float                                              m_fTimer;                                         		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStopAndWaitState" );

		return pClassPointer;
	};

	bool IsHalting ( );
	void OnTick ( float fTimeElapsed );
	void OnExit ( );
};

UClass* UcStopAndWaitState::pClassPointer = NULL;

// Class APBGame.cUseJunctionState
// 0x003C (0x008C - 0x0050)
class UcUseJunctionState : public UcBaseHierarchicalState
{
public:
	class URWTechNode*                                 m_pJunctionNode;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FcRoutePosition                             m_EntrancePosition;                               		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FcRoutePosition                             m_ExitPosition;                                   		// 0x0060 (0x000C) [0x0000000000000000]              
	float                                              m_fJunctionDistance;                              		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              m_fWaitForObstacleTimer;                          		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCrossedIntoJunction : 1;                       		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	class UcSlowDownForJunctionState*                  m_pSlowDownForJunctionState;                      		// 0x0078 (0x0004) [0x0000000000000000]              
	class UcHaltForJunctionState*                      m_pHaltForJunctionState;                          		// 0x007C (0x0004) [0x0000000000000000]              
	class UcWaitAtJunctionState*                       m_pWaitAtJunctionState;                           		// 0x0080 (0x0004) [0x0000000000000000]              
	class UcExitJunctionState*                         m_pExitJunctionState;                             		// 0x0084 (0x0004) [0x0000000000000000]              
	class UcApproachJunctionState*                     m_pApproachJunctionState;                         		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUseJunctionState" );

		return pClassPointer;
	};

};

UClass* UcUseJunctionState::pClassPointer = NULL;

// Class APBGame.cVehicleController
// 0x0058 (0x0098 - 0x0040)
class UcVehicleController : public UObject
{
public:
	float                                              UPDATE_INTERVAL_VERY_LONG;                        		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              UPDATE_INTERVAL_LONG;                             		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              UPDATE_INTERVAL_NORMAL;                           		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              UPDATE_INTERVAL_SHORT;                            		// 0x004C (0x0004) [0x0000000000000000]              
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	class UcBaseControllerState*                       m_pState;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	class UcCruiseState*                               m_pCruiseState;                                   		// 0x0058 (0x0004) [0x0000000000000000]              
	class UcUseJunctionState*                          m_pUseJunctionState;                              		// 0x005C (0x0004) [0x0000000000000000]              
	class UcAvoidObstacleState*                        m_pAvoidObstacleState;                            		// 0x0060 (0x0004) [0x0000000000000000]              
	class UcStopAndWaitState*                          m_pStopAndWaitState;                              		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FcObjectAhead                               m_ObjectAhead;                                    		// 0x0068 (0x0018) [0x0000000000000000]              
	float                                              m_fDistanceToNextJunction;                        		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nLastClearedJunction;                           		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fUpdateInterval;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastUpdate;                           		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastObstructionCheck;                 		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastSpawnCheck;                       		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleController" );

		return pClassPointer;
	};

};

UClass* UcVehicleController::pClassPointer = NULL;

// Class APBGame.cVehicleManager
// 0x0104 (0x0144 - 0x0040)
class UcVehicleManager : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxVehicleLength;                              		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0048 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cVehicleManager.m_mDriverPedestrianTypeFromVehicleAssetIndex
	float                                              m_cfg_fJunctionSpeedFraction;                     		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fBendSpeedFraction;                         		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fEndOfRouteSpeedFraction;                   		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinVehicleSeparationStationary;            		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinVehicleSeparationMoving;                		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinObstacleSeparation;                     		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxObstacleSeparation;                     		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinInitialSeparation;                      		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinJunctionDistance;                       		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxJunctionDistance;                       		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fVehicleLengthBuffer;                       		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinDeceleration;                           		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxDeceleration;                           		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMatchSpeedThreshold;                       		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fLookAheadDistance;                         		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fLaneClearDistance;                         		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fChangeLaneTime;                            		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinChangeLaneDistance;                     		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fChangeLaneSharpness;                       		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fSlowDownToChangeLaneDistance;              		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fIndicateDistance;                          		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxStationaryTime;                         		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fRouteAnalysisInterval;                     		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fSpawnCheckInterval;                        		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nNumEdgesToCheckAhead;                      		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fSpawnNodeObstructionRatioForSTBPActivation;		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nNumAlternateSpawnEdgesToProcessPerFrame;   		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nSpawnEligibilityDelay;                     		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinDistanceFromAltSpawnNodeToNearestPlayer;		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fTurningOrientationTolerance;               		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nClosestDestroyNodeSortingFraction;         		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nSTBPDistanceToFirstVehicleHeuristicWeight; 		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nSTBPEmptyEdgeTimerHeuristicWeight;         		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxVehicleQueueLength;                     		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxNearbyVehicles;                         		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fNearbyVehicleCheckDistance;                		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_cfg_nMaxVisibilityChecksPerVehicle;             		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMinDistanceToNearestPlayerForRecycling;    		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fVehicleRecycleCheckInterval;               		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxWaitTime;                               		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_cfg_bDetectBends : 1;                           		// 0x0124 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_cfg_bDetectEndOfRoute : 1;                      		// 0x0124 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_cfg_bDetectJunctions : 1;                       		// 0x0124 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      m_cfg_bDetectNPCVehicles : 1;                     		// 0x0124 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      m_cfg_bDetectObstacles : 1;                       		// 0x0124 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      m_cfg_bDetectObstructions : 1;                    		// 0x0124 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      m_cfg_bCompensateForMovingObstacles : 1;          		// 0x0124 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	float                                              m_cfg_fRaiseWheelAmount;                          		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fJunctionRegistrationDistance;              		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fJunctionRegistrationUpdateIntervalTime;    		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxBodyPitch;                              		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fMaxBodyRoll;                               		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fBodyRotationSpeed;                         		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fWaitDurationAfterCancelledHijack;          		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleManager" );

		return pClassPointer;
	};

	class UcSpawnDestroyManager* GetSpawnDestroyManager ( );
	void SetLCManager ( class AcLCManager* pr_pLCM );
	bool HasLCManager ( );
	class AcLCManager* GetLCManager ( );
	int GetDriverPedestrianTypeFromVehicleAssetIndex ( int pr_nVehicleAssetIndex );
};

UClass* UcVehicleManager::pClassPointer = NULL;

// Class APBGame.cWaitAtJunctionState
// 0x000C (0x0058 - 0x004C)
class UcWaitAtJunctionState : public UcBaseControllerState
{
public:
	struct FcRoutePosition                             m_EntrancePosition;                               		// 0x004C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWaitAtJunctionState" );

		return pClassPointer;
	};

	void OnExit ( );
	void OnEnter ( );
};

UClass* UcWaitAtJunctionState::pClassPointer = NULL;

// Class APBGame.cWaitAtObstacleState
// 0x0010 (0x005C - 0x004C)
class UcWaitAtObstacleState : public UcBaseControllerState
{
public:
	float                                              m_fWaitAtObstacleTimer;                           		// 0x004C (0x0004) [0x0000000000000000]              
	struct FcRoutePosition                             m_TargetPosition;                                 		// 0x0050 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWaitAtObstacleState" );

		return pClassPointer;
	};

	void OnEnter ( );
};

UClass* UcWaitAtObstacleState::pClassPointer = NULL;

// Class APBGame.cHostingChat
// 0x0028 (0x0068 - 0x0040)
class UcHostingChat : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< class UcHostingChatMessage* >              m_aPendingNameQuery;                              		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcHostingChatMessage* >              m_aPendingWhisper;                                		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      m_nWhisperUID;                                    		// 0x005C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eChatState;                                     		// 0x005D (0x0001) [0x0000000000000000]              
	float                                              m_fTimeAFK;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAutomaticAFK : 1;                              		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAFKEventTriggered : 1;                         		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingChat" );

		return pClassPointer;
	};

	void SortStringArray ( unsigned long bAscending, unsigned long bCaseSensitive, TArray< struct FString >* aStrings );
	void OnNameQueryFailed ( int nError, int nCharacterUID );
	void OnNameQuerySuccess ( int nCharacterUID, struct FString sCharacterName );
	void NameQuery ( int nCharacterUID );
	void DisplayMessage ( class UcHostingChatMessage* Message );
	void OnGMCommand ( int nReturnCode );
	void eventGMCommand ( struct FString sCommand );
	void OnWho ( TArray< struct FString > enforcers, TArray< struct FString > criminals );
	void eventWho ( );
	void OnPopulation ( int nReturnCode, int nDistrictUID, int nInstanceNo, int nWorldPopulation, int nWorldEnforcers, int nWorldCriminals, int nInstancePopulation, int nInstanceEnforcers, int nInstanceCriminals );
	void eventPopulation ( int nDistrictUID, int nInstanceNo );
	void OnPlayed ( int nPlayedSeconds );
	void eventPlayed ( );
	void EndChatLogging ( );
	void SaveChatLogging ( );
	void StartChatLogging ( );
	void ExecuteUIConsoleCommand ( struct FString sConsoleCommand );
	void DispatchUIChatMessage ( class UcHostingChatMessage* Message );
	void SetChatModeToDefault ( );
	void eventDispatchUIClanMotD ( struct FString sMessage );
	void DispatchUIDNDMessage ( struct FString sSysMessage );
	void DispatchUIAFKMessage ( struct FString sSysMessage );
	void eventDispatchUISystemMessage ( struct FString sSysMessage );
	unsigned char GetChatMessageCategory ( unsigned char eType );
	class UcHostingChatMessage* CreateMessage ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage, unsigned char eType, int nDuration );
	void OnReceiveConversationEnd ( struct FString sCharacterName );
	void OnReceiveMessage ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage, unsigned char eType, int nDuration );
	void eventSetDoNotDisturb ( struct FString sMessage );
	void eventSetAwayFromKeyboard ( struct FString sMessage );
	void eventSetAvailable ( );
	void District ( struct FString sMessage );
	void Officer ( struct FString sMessage );
	void Clan ( struct FString sMessage );
	void Group ( struct FString sMessage );
	void OnWhisperFailed ( int nError, unsigned char nWhisperUID );
	void OnWhisperSuccess ( unsigned char nWhisperUID, int nCharacterUID );
	void eventWhisper ( struct FString sCharacterName, struct FString sMessage );
	void eventDistrictServer ( unsigned char eCategory, struct FString sMessage );
	struct FString LocalizeText ( struct FString sKey );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
};

UClass* UcHostingChat::pClassPointer = NULL;

// Class APBGame.cHostingChatMessage
// 0x0028 (0x0068 - 0x0040)
class UcHostingChatMessage : public UObject
{
public:
	unsigned char                                      m_eType;                                          		// 0x0040 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nWhisperUID;                                    		// 0x0041 (0x0001) [0x0000000000000000]              
	int                                                m_nCharacterUID;                                  		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bFromGM : 1;                                    		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     m_sCharacterName;                                 		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMessage;                                       		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nDuration;                                      		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingChatMessage" );

		return pClassPointer;
	};

	struct FString Format ( );
	struct FString LocalizeText ( struct FString sKey );
};

UClass* UcHostingChatMessage::pClassPointer = NULL;

// Class APBGame.cHostingChatServer
// 0x0004 (0x0044 - 0x0040)
class UcHostingChatServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingChatServer" );

		return pClassPointer;
	};

	void OnGMCommand ( int nCharacterUID, struct FString sCommand );
	void BroadcastSystemChatMessage ( struct FString sMessage );
	void BroadcastChatMessage ( class AcHostingPlayerController* Sender, struct FString sMessage, unsigned char eType );
	void OnChatState ( int nCharacterUID, unsigned char eChatState );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingChatServer::pClassPointer = NULL;

// Class APBGame.cHostingClan
// 0x00FC (0x013C - 0x0040)
class UcHostingClan : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sClanName;                                      		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nLeaderUID;                                     		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< class UcHostingClanMember* >               m_aMembers;                                       		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcHostingClanRank* >                 m_aRanks;                                         		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sBio;                                           		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sInformation;                                   		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMotd;                                          		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_aSymbol;                                        		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_aTheme;                                         		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewBio;                                        		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewInformation;                                		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewMotd;                                       		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_aNewSymbol;                                     		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_aNewTheme;                                      		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nLocalMemberIndex;                              		// 0x00E4 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMembersChanged_Social__Delegate;              		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMembersChanged_Mgmt__Delegate;                		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProfileChanged__Delegate;                     		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPermissionsChanged__Delegate;                 		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTeamCreationProcessed__Delegate;              		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInviteReceived__Delegate;                     		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSendInviteResult__Delegate;                   		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingClan" );

		return pClassPointer;
	};

	int GetRankIndex ( int nRankUID );
	int GetMemberIndex ( int nCharacterUID );
	void DisplayRank ( int nRankIndex );
	void DisplayRanks ( );
	void DisplayMemberPrivateNote ( int nMemberIndex );
	void DisplayMemberPublicNote ( int nMemberIndex );
	void DisplayMemberBio ( int nMemberIndex );
	void DisplayClanMotd ( );
	void DisplayClanInformation ( );
	void DisplayClanBio ( );
	void DisplayMembers ( );
	void DisplayInfo ( );
	int eventGetLocalMemberIndex ( );
	void OnReceiveStatus ( int nCharacterUID, int nStatus );
	void OnReceiveDelete ( );
	void OnReceiveLeader ( int nCharacterUID );
	void OnReceiveRemove ( int nCharacterUID );
	void OnReceiveLeave ( int nCharacterUID );
	void OnReceiveJoin ( );
	void OnReceiveInfo ( );
	void OnReceiveRankInfo ( );
	void OnReceiveRankAssign ( int nCharacterUID, int nRankUID );
	void OnReceiveRankEdit ( int nRankUID, struct FString sRankName, int nPermission );
	void OnReceiveRankDelete ( int nRankUID );
	void OnReceiveRankCreate ( int nRankUID, struct FString sRankName, int nPermission );
	struct FString eventGetMotd ( );
	void OnReceiveMotd ( struct FString sMotd );
	void OnSetMotdFailed ( int nError );
	void OnSetMotdSuccess ( );
	void eventSetMotd ( struct FString sMotd );
	void OnSetInformationFailed ( int nError );
	void OnSetInformationSuccess ( );
	void eventSetInformation ( struct FString sInformation );
	void OnGetInformationFailed ( int nError );
	void OnGetInformationSuccess ( struct FString sInformation );
	void eventGetInformation ( );
	void OnRankAssignFailed ( int nError, int nCharacterUID, int nRankUID );
	void OnRankAssignSuccess ( int nCharacterUID, int nRankUID );
	void eventRankAssign ( int nMemberIndex, int nRankIndex );
	void OnRankEditFailed ( int nError, int nRankUID );
	void OnRankEditSuccess ( int nRankUID );
	void RankEdit ( int nRankIndex, struct FString sRankName, int nPermission );
	void OnRankDeleteFailed ( int nError, int nRankUID );
	void OnRankDeleteSuccess ( int nRankUID );
	void RankDelete ( int nRankIndex );
	void OnRankCreateFailed ( int nError );
	void OnRankCreateSuccess ( );
	void RankCreate ( struct FString sRankName, int nPermission );
	void OnMemberSetPrivateNoteFailed ( int nError, int nCharacterUID );
	void OnMemberSetPrivateNoteSuccess ( int nCharacterUID );
	void eventMemberSetPrivateNote ( int nMemberIndex, struct FString sPrivateNote );
	void OnMemberSetPublicNoteFailed ( int nError, int nCharacterUID );
	void OnMemberSetPublicNoteSuccess ( int nCharacterUID );
	void eventMemberSetPublicNote ( int nMemberIndex, struct FString sPublicNote );
	void OnMemberSetBioFailed ( int nError );
	void OnMemberSetBioSuccess ( );
	void eventMemberSetBio ( struct FString sBio );
	void OnMemberGetProfileFailed ( int nError, int nCharacterUID );
	void OnMemberGetProfileSuccess ( int nCharacterUID );
	void eventMemberGetProfile ( int nMemberIndex );
	void OnMembersGetStateFailed ( int nError );
	void OnMembersGetStateSuccess ( int nMembers );
	void eventMembersGetState ( );
	void OnMemberGetStatsFailed ( int nError );
	void OnMemberGetStatsSuccess ( int nCharacterUID, int nMembers );
	void eventMemberGetStats ( int nMemberIndex );
	void MembersGetStats ( );
	void OnSetThemeFailed ( int nError );
	void OnSetThemeSuccess ( );
	void eventSetTheme ( TArray< unsigned char > aTheme );
	void OnGetThemeFailed ( int nError );
	void OnGetThemeSuccess ( );
	void eventGetTheme ( );
	void OnSetSymbolFailed ( int nError );
	void OnSetSymbolSuccess ( );
	void eventSetSymbol ( TArray< unsigned char > aSymbol );
	void OnGetSymbolFailed ( int nError );
	void OnGetSymbolSuccess ( );
	void eventGetSymbol ( );
	void OnSetBioFailed ( int nError );
	void OnSetBioSuccess ( );
	void eventSetBio ( struct FString sBio );
	void OnGetBioFailed ( int nError );
	void OnGetBioSuccess ( struct FString sBio );
	void eventGetBio ( );
	void OnLeaderFailed ( int nError, int nCharacterUID );
	void OnLeaderSuccess ( int nCharacterUID );
	void eventLeader ( int nMemberIndex );
	void OnRemoveFailed ( int nError, int nCharacterUID );
	void OnRemoveSuccess ( int nCharacterUID );
	void eventRemove ( int nMemberIndex );
	void OnLeaveFailed ( int nError );
	void OnLeaveSuccess ( );
	void eventLeave ( );
	void eventDeclineInvite ( int nReturnCode );
	void eventAcceptInvite ( );
	void OnReceiveInvite ( struct FString sCharacterName, struct FString sClanName );
	void OnSendInviteFailed ( int nError, struct FString sCharacterName );
	void OnSendInviteSuccess ( struct FString sCharacterName );
	void eventSendInvite ( struct FString sCharacterName );
	void OnDeleteFailed ( int nError );
	void OnDeleteSuccess ( );
	void eventDelete ( );
	void OnCreateFailed ( int nError );
	void OnCreateSuccess ( );
	int eventCreate ( struct FString sClanName );
	bool eventIsLeader ( );
	bool eventHasClan ( );
	struct FString LocalizeText ( struct FString sKey );
	void OnExit ( );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void OnSendInviteResult ( int nError );
	void OnInviteReceived ( struct FString sPlayerName, struct FString sClanName );
	void OnTeamCreationProcessed ( int nErrorCode );
	void OnPermissionsChanged ( );
	void OnProfileChanged ( );
	void OnMembersChanged_Mgmt ( );
	void OnMembersChanged_Social ( );
};

UClass* UcHostingClan::pClassPointer = NULL;

// Class APBGame.cHostingClanMember
// 0x008C (0x00CC - 0x0040)
class UcHostingClanMember : public UObject
{
public:
	int                                                m_nAccountUID;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nCharacterUID;                                  		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sCharacterName;                                 		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcHostingClanRank*                           m_rank;                                           		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                m_nStatus;                                        		// 0x0058 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bLookingForGroup : 1;                           		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nGroupStatus;                                   		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nGroupPublic;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nGroupInvite;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictUID;                                   		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nInstanceNo;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictStatus;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                m_nLastLogoutSpan;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sBio;                                           		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPublicNote;                                    		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPrivateNote;                                   		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewBio;                                        		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewPublicNote;                                 		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewPrivateNote;                                		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nStatRating;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                m_nStatThreat;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingClanMember" );

		return pClassPointer;
	};

};

UClass* UcHostingClanMember::pClassPointer = NULL;

// Class APBGame.cHostingClanRank
// 0x0014 (0x0054 - 0x0040)
class UcHostingClanRank : public UObject
{
public:
	int                                                m_nRankUID;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sRankName;                                      		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nPermission;                                    		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingClanRank" );

		return pClassPointer;
	};

	bool HasPermissionContact ( );
	bool HasPermissionEditClanTheme ( );
	bool HasPermissionEditClanSymbol ( );
	bool HasPermissionEditClanInformation ( );
	bool HasPermissionEditClanBio ( );
	bool HasPermissionEditPrivateNote ( );
	bool HasPermissionViewPrivateNote ( );
	bool HasPermissionEditPublicNote ( );
	bool HasPermissionEditMotd ( );
	bool HasPermissionRemoveMember ( );
	bool HasPermissionInviteMember ( );
	bool HasPermissionAssignRank ( );
	bool HasPermissionOfficerChatSpeak ( );
	bool HasPermissionOfficerChatListen ( );
	bool HasPermissionChatSpeak ( );
	bool HasPermissionChatListen ( );
};

UClass* UcHostingClanRank::pClassPointer = NULL;

// Class APBGame.cHostingClanServer
// 0x0004 (0x0044 - 0x0040)
class UcHostingClanServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingClanServer" );

		return pClassPointer;
	};

	void OnLeader ( int nClanUID, int nCharacterUID, unsigned long bLeader );
	void OnLeave ( int nClanUID, int nCharacterUID );
	void OnJoin ( int nClanUID, int nCharacterUID, struct FString sClanName );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingClanServer::pClassPointer = NULL;

// Class APBGame.cHostingClient
// 0x0178 (0x01B8 - 0x0040)
class UcHostingClient : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      m_bInitClientLoginSequence : 1;                   		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsGM : 1;                                      		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bTutorialComplete : 1;                          		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bGroupInviteReceived : 1;                       		// 0x0044 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bClanInviteReceived : 1;                        		// 0x0044 (0x0004) [0x0000000000000000] [0x00000010] 
	class UcHostingLobby*                              m_lobby;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	class UcHostingChat*                               m_chat;                                           		// 0x004C (0x0004) [0x0000000000000000]              
	class UcHostingGroup*                              m_group;                                          		// 0x0050 (0x0004) [0x0000000000000000]              
	class UcHostingDistrict*                           m_district;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	class UcHostingClan*                               m_clan;                                           		// 0x0058 (0x0004) [0x0000000000000000]              
	class UcHostingFriendList*                         m_friendlist;                                     		// 0x005C (0x0004) [0x0000000000000000]              
	class UcHostingIgnoreList*                         m_ignorelist;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	class UcHostingFinder*                             m_finder;                                         		// 0x0064 (0x0004) [0x0000000000000000]              
	class UcHostingMarketplace*                        m_marketplace[ 0x3 ];                             		// 0x0068 (0x000C) [0x0000000000000000]              
	class UcHostingMail*                               m_mail;                                           		// 0x0074 (0x0004) [0x0000000000000000]              
	class UcHostingLeague*                             m_league;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	class UcHostingNames*                              m_Name;                                           		// 0x007C (0x0004) [0x0000000000000000]              
	class UcHostingConfigFile*                         m_configfile;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	class UcHostingNameQuery*                          m_namequery;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	class UcHostingVoice*                              m_voice;                                          		// 0x0088 (0x0004) [0x0000000000000000]              
	class UcHostingSubscription*                       m_subscription;                                   		// 0x008C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pConfig;                                        		// 0x0090 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pBugReportHProcess;                             		// 0x0094 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UcHostingGC2LS*                              m_LoginServer;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	class UcHostingGC2WS*                              m_WorldServer;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	class UcHostingGC2DS*                              m_DistrictServer;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	struct FGuid                                       m_PledgedContactGUID;                             		// 0x00A4 (0x0010) [0x0000000000000000]              
	int                                                m_nClientBindPort;                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionHigh;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionMiddle;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_nVersionLow;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionBuildNo;                                		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sUsername;                                      		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPassword;                                      		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nSlotNumber;                                    		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictUID;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                m_nAccountUID;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                m_nCharacterUID;                                  		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FString                                     m_sRealTag;                                       		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldEnterTime;                                		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                m_nServerSyncTime;                                		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                m_nServerTimezoneOffset;                          		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                m_nClientSyncTime;                                		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sCharacterName;                                 		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldUID;                                      		// 0x0118 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sWorldName;                                     		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nRating;                                        		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_aSrpSessionKey[ 0x28 ];                         		// 0x012C (0x0028) [0x0000000000000000]              
	unsigned char                                      m_aSessionTimestamp[ 0x8 ];                       		// 0x0154 (0x0008) [0x0000000000000000]              
	unsigned char                                      m_aWorldEnterTimestamp[ 0x8 ];                    		// 0x015C (0x0008) [0x0000000000000000]              
	unsigned char                                      m_aDistrictEnterTimestamp[ 0x8 ];                 		// 0x0164 (0x0008) [0x0000000000000000]              
	unsigned char                                      m_eClientState;                                   		// 0x016C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePreviousClientState;                           		// 0x016D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eFaction;                                       		// 0x016E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eDisconnectReason;                              		// 0x016F (0x0001) [0x0000000000000000]              
	int                                                m_nWorldServerIPAddress;                          		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldServerPort;                               		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictServerIPAddress;                       		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictServerPort;                            		// 0x017C (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictExitTimeout;                           		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nDistrictExitTimer;                             		// 0x0184 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sDisconnectReasonExtraInfo;                     		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnLoginSuccess__Delegate;                      		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnLoginFailed__Delegate;                       		// 0x01A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnDisconnected__Delegate;                      		// 0x01AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingClient" );

		return pClassPointer;
	};

	void OnLoginServerDisconnect ( unsigned long bReturnToLobbyExpected );
	void OnDistrictEnter ( class UcUIAction_DistrictEnter* Action );
	void OnWorldEnter ( class UcUIAction_WorldEnter* Action );
	void OnGetWorldList ( class UcUIAction_GetWorldList* Action );
	void OnCharacterInfo ( class UcUIAction_CharacterInfo* Action );
	void OnCharacterDelete ( class UcUIAction_CharacterDelete* Action );
	void OnCharacterCreate ( class UcUIAction_CharacterCreate* Action );
	void OnCharacterNameCheck ( class UcUIAction_CharacterNameCheck* Action );
	struct FString ProcessErrorReport ( );
	bool IsGM ( );
	void ReportBug ( struct FString sSummary, struct FString sDescription, TArray< struct FString > aAttachments );
	void ScrubString ( struct FString* sString );
	class UEngine* GetEngine ( );
	class AcAPBPlayerController* GetPC ( );
	void GenerateAuthenticationKey ( unsigned char* aTimestamp, unsigned char* aAuthenticationKey );
	void Term ( );
	void OnDisconnectComplete_UI ( );
	void OnDisconnectComplete ( );
	void eventOnKick ( int nReason, struct FString sInformation );
	void OnDisconnect ( );
	void CleanupUIScenes ( );
	void eventLogout ( unsigned char Reason );
	void GetUTCServerTime ( int* nYear, int* nMonth, int* nDay, int* nHour, int* nMinute, int* nSecond );
	void GetLocalServerTime ( int* nYear, int* nMonth, int* nDay, int* nHour, int* nMinute, int* nSecond );
	int GetServerTime_SecondsSince1970UTC ( );
	void UpdateServerTime ( int nServerTime, int nServerTimeZone );
	bool GetTutorialCompleteAnyCharacter ( );
	bool CanAcceptGroupInvite ( );
	void OnGroupLeaveSuccess ( );
	void CleanupNative ( );
	void eventOnLoginFailed ( int nError );
	void eventOnLoginSuccess ( int nPoints );
	void eventLogin ( struct FString sUsername, struct FString sPassword );
	void PopClientState ( );
	unsigned char eventGetClientState ( );
	void eventSetClientState ( unsigned char eClientState );
	struct FString GetPassword ( );
	void SetPassword ( struct FString sPassword );
	struct FString GetUsername ( );
	void SetUsername ( struct FString sUsername );
	bool HasSession ( );
	void TermSession ( );
	void InitSession ( struct FString sUsername, struct FString sPassword );
	void eventPreExit ( );
	void Cleanup ( );
	void eventPostInit ( );
	void eventPreInit ( );
	void _OnDisconnected ( );
	void _OnLoginFailed ( int nError );
	void _OnLoginSuccess ( int nPoints );
};

UClass* UcHostingClient::pClassPointer = NULL;

// Class APBGame.cHostingConfigFile
// 0x0014 (0x0054 - 0x0040)
class UcHostingConfigFile : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingConfigFile >               m_aConfigFiles;                                   		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nPendingDownloads;                              		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingConfigFile" );

		return pClassPointer;
	};

	struct FString GetCharacterFolderName ( );
	struct FString GetAccountFolderName ( );
	bool FileSet ( int nIndex, struct FString sSection, struct FString sKey, struct FString sValue );
	bool FileGet ( int nIndex, struct FString sSection, struct FString sKey, struct FString* sValue );
	bool FileUnload ( int nIndex );
	bool FileFlush ( int nIndex );
	bool FileRead ( int nIndex );
	bool CheckIdFile ( int nID, struct FString sDirname );
	bool InitConfigFiles ( );
	int eventGetConfigFileIndex ( unsigned char eSDDKey );
	int eventGetPersistentConfigFileIndex ( int nPersistentId, unsigned char eType );
	void OnFileUploadFailed ( int nError, int nIndex );
	void OnFileUploadSuccess ( int nIndex );
	void eventFileUpload ( int nIndex );
	void eventFileSave ( unsigned char eSDDKey );
	void OnFileDownloadFailed ( int nError, int nIndex );
	void OnFileDownloadSuccess ( int nIndex );
	void FileDownload ( int nIndex );
	void OnFileLoadCompleteNative ( unsigned char eType );
	void OnFileLoadComplete ( unsigned char eType );
	void FileLoad ( unsigned char eType );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
};

UClass* UcHostingConfigFile::pClassPointer = NULL;

// Class APBGame.cHostingConnectionWrapper
// 0x0028 (0x0068 - 0x0040)
class UcHostingConnectionWrapper : public UObject
{
public:
	struct FPointer                                    VfTable_cHostingConnectionHandler;                		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                m_nSendBufferSize;                                		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nRecvBufferSize;                                		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxMessageSize;                                		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nKeepaliveTime;                                 		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nKeepaliveInterval;                             		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nConnectTimeout;                                		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTickInterval;                                  		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fElapsedSeconds;                                		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pConnection;                                    		// 0x0064 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingConnectionWrapper" );

		return pClassPointer;
	};

	void eventOnDisconnect ( );
	void eventOnConnectFailed ( );
	void eventOnConnectSuccess ( );
	bool IsDisconnected ( );
	bool IsConnecting ( );
	bool IsConnected ( );
	int GetPort ( );
	struct FString GetHost ( );
	void Disconnect ( unsigned long bNotify );
	void ConnectAddress ( int nIPAddress, int nPort, int nTimeout, int LocalPort );
	void ConnectHostname ( struct FString sHost, int nPort, int nTimeout, int nLocalPort );
	void _Term ( );
	void _Init ( );
	void Configure ( int nSendBufferSize, int nRecvBufferSize, int nMaxMessageSize, int nKeepaliveTime, int nKeepaliveInterval, int nConnectTimeout, int nTickInterval );
};

UClass* UcHostingConnectionWrapper::pClassPointer = NULL;

// Class APBGame.cHostingDisplayPointServer
// 0x0004 (0x0044 - 0x0040)
class UcHostingDisplayPointServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingDisplayPointServer" );

		return pClassPointer;
	};

	void OnSynchronise ( struct FGuid nDisplayPointUID, unsigned char eInteractionType );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingDisplayPointServer::pClassPointer = NULL;

// Class APBGame.cHostingDistrict
// 0x00C4 (0x0104 - 0x0040)
class UcHostingDistrict : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingDistrictInfo >             m_aDistricts;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtHostingInstanceInfo >             m_aInstances;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bDistrictReserved : 1;                          		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nCurrentDistrictUID;                            		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentDistrictInstance;                       		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             ___OnGetInstanceListSuccess__Delegate;            		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnGetInstanceListFailed__Delegate;             		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDistrictInfoChanged_SocialUIGroup__Delegate;  		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDistrictInfoChanged_SocialUIFriends__Delegate;		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDistrictInfoChanged_SocialUITeam__Delegate;   		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDistrictInfoChanged_TeamMgmtUI__Delegate;     		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDistrictInfoChanged_CityMapUI__Delegate;      		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDistrictInfoChanged_LeaguesUI__Delegate;      		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDistrictEnterUI__Delegate;                    		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnDistrictReserveSuccess__Delegate;            		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnDistrictReserveFailed__Delegate;             		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnDistrictEnterSuccess__Delegate;              		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnDistrictEnterFailed__Delegate;               		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingDistrict" );

		return pClassPointer;
	};

	void DisplayInstanceList ( );
	void DisplayDistrictList ( );
	int eventNumInstances ( int nDistrictUID );
	int eventGetDistrictIndex ( int nDistrictUID );
	void eventOnDistrictQueueCancelFailed ( int nError, unsigned long bGroup );
	void eventOnDistrictQueueCancelSuccess ( unsigned long bGroup );
	void DistrictQueueCancel ( unsigned long bGroup );
	void OnDistrictQueueStatus ( int nDistrictUID, int nInstanceNo, int nPosition, int nSize, int nCharacterUID );
	void eventOnDistrictExitFailed ( int nError );
	void eventOnDistrictExitSuccess ( );
	void DistrictExit ( );
	void eventOnDistrictEnterFailed ( int nError );
	void eventOnDistrictEnterSuccess ( int nDistrictUID, int nInstanceNo );
	void DistrictEnter ( );
	void eventOnDistrictReserveCancelFailed ( int nError );
	void eventOnDistrictReserveCancelSuccess ( );
	void DistrictReserveCancel ( );
	void DistrictReserveAccept ( );
	void eventOnDistrictReserveFailed ( int nError, int nDistrictUID, int nInstanceNo, unsigned long bGroup, unsigned long bQueued );
	void eventOnDistrictReserveSuccess ( int nDistrictUID, int nInstanceNo, unsigned long bGroup, unsigned long bQueued );
	void eventDistrictReserve ( int nDistrictUID, int nInstanceNo, int nCharacterUID, unsigned long bGroup );
	void OnGetInstanceListFailed ( int nError );
	void OnGetInstanceListSuccess ( );
	void eventGetInstanceList ( );
	void OnReceiveDistrictList ( );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void _OnDistrictEnterFailed ( int nError );
	void _OnDistrictEnterSuccess ( );
	void _OnDistrictReserveFailed ( int nError, int nDistrictUID, int nInstanceNo, unsigned long bGroup );
	void _OnDistrictReserveSuccess ( );
	void OnDistrictEnterUI ( int nDistrictUID, int nInstanceNo );
	void OnDistrictInfoChanged_LeaguesUI ( );
	void OnDistrictInfoChanged_CityMapUI ( );
	void OnDistrictInfoChanged_TeamMgmtUI ( );
	void OnDistrictInfoChanged_SocialUITeam ( );
	void OnDistrictInfoChanged_SocialUIFriends ( );
	void OnDistrictInfoChanged_SocialUIGroup ( );
	void _OnGetInstanceListFailed ( int nError );
	void _OnGetInstanceListSuccess ( );
};

UClass* UcHostingDistrict::pClassPointer = NULL;

// Class APBGame.cHostingDistrictServer
// 0x0010 (0x0050 - 0x0040)
class UcHostingDistrictServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              m_fCleanupDistrictEnterListElapsedSeconds;        		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pDistrictEnters;                                		// 0x0048 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nQueueSize;                                     		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingDistrictServer" );

		return pClassPointer;
	};

	void CleanupNative ( );
	void InitNative ( );
	void OnDistrictQueueStatus ( int nQueueSize );
	void OnPointsChange ( int nCharacterUID, int nPoints );
	void OnReceiveDistrictExit ( int nCharacterUID, unsigned long bSubscriptionExpired );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingDistrictServer::pClassPointer = NULL;

// Class APBGame.cHostingDS2WS
// 0x0008 (0x0070 - 0x0068)
class UcHostingDS2WS : public UcHostingConnectionWrapper
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pListenSocket;                                  		// 0x006C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingDS2WS" );

		return pClassPointer;
	};

	void Send_DS2WS_DISTRICT_LOCK ( unsigned long bLocked );
	void Send_DS2WS_ANS_GM_COMMAND ( int nReturnCode, int nCharacterUID );
	void Send_DS2WS_DISPLAY_POINT_STATUS ( struct FGuid nDisplayPointUID, int nStatus );
	void Send_DS2WS_ANS_GROUP_LEADER ( int nGroupUID, TArray< int > aCharacterUIDs );
	void Send_DS2WS_DISTRICT_EXIT ( int nCharacterUID );
	void Send_DS2WS_DISTRICT_ENTER ( int nReturnCode, int nCharacterUID );
	void Send_DS2WS_ASK_ATTACH_SERVER ( );
	void Send_DS2WS_ANS_ATTACH_SERVER ( int nReturnCode );
	int _AcceptTimeout ( int nMilliseconds );
	bool _Accept ( );
	bool _Listen ( struct FString sHost, int nPort );
	void DistrictLock ( unsigned long bLock );
	void eventGMCommandResult ( int nReturnCode, int nCharacterUID );
	void eventOnReceiveGMCommand ( int nCharacterUID, struct FString sCommand );
	void eventOnReceiveDistrictExit ( int nCharacterUID, unsigned long bSubscriptionExpired );
	void eventOnReceiveDisplayPointStatus ( struct FGuid nDisplayPointUID, unsigned char nStatus );
	void eventDisplayPointStatus ( struct FGuid nDisplayPointUID, unsigned char nStatus );
	void eventOnReceiveClanLeader ( int nClanUID, int nCharacterUID, unsigned long bLeader );
	void eventOnReceiveClanLeave ( int nClanUID, int nCharacterUID );
	void eventOnReceiveClanJoin ( int nClanUID, int nCharacterUID, struct FString sClanName );
	void GroupAnsNewLeader ( int nGroupUID, TArray< int > aCharacterUIDs );
	void eventOnReceiveGroupAskNewLeader ( int nGroupUID );
	void eventOnReceiveGroupLeader ( int nGroupUID, int nCharacterUID, int nLeaderUID );
	void eventOnReceiveGroupLeave ( int nGroupUID, int nCharacterUID );
	void eventOnReceiveGroupJoin ( int nGroupUID, int nCharacterUID, int nLeaderID );
	void eventOnReceiveDistrictQueueStatus ( int nQueueSize );
	void eventOnReceivePointsChange ( int nCharacterUID, int nPoints );
	void eventOnReceiveChatState ( int nCharacterUID, unsigned char eChatState );
	void eventOnDisconnect ( );
	void Disconnect ( unsigned long bNotify );
	void eventOnAttachFailed ( int nError );
	void eventOnAttachSuccess ( );
	void eventAttach ( );
	void eventOnConnectFailed ( );
	void eventOnConnectSuccess ( );
	void eventConnect ( );
	void eventAnswerAttach ( );
	void eventOnReceiveAttach ( int nServerUID, int nDistrictUID, int nInstanceNo, int nDistrictInstanceTypeSecondaryKey, int nWorldDatabaseUID, struct FString sWorldDatabaseIP, int nWorldDatabasePort, struct FString sWorldDatabaseUsername, struct FString sWorldDatabasePassword, struct FString sWorldDatabaseDatabase, int nWorldLogDatabaseUID, struct FString sWorldLogDatabaseIP, int nWorldLogDatabasePort, struct FString sWorldLogDatabaseUsername, struct FString sWorldLogDatabasePassword, struct FString sWorldLogDatabaseDatabase, int nBulkLogServerExecutionCount, int dateBulkLogServerExecutionYear, int dateBulkLogServerExecutionMonth, int dateBulkLogServerExecutionDay, int dateBulkLogServerExecutionHour, int dateBulkLogServerExecutionMinute, int dateBulkLogServerExecutionSecond );
	int eventAcceptTimeout ( int nMilliseconds );
	bool eventAccept ( );
	bool eventListen ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingDS2WS::pClassPointer = NULL;

// Class APBGame.cHostingFinder
// 0x001C (0x005C - 0x0040)
class UcHostingFinder : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __UI_CharacterFinderInfoSuccess__Delegate;        		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UI_CharacterFinderInfoFailure__Delegate;        		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingFinder" );

		return pClassPointer;
	};

	void OnCharacterGetInfoFailed ( int nError, struct FString sCharacterName );
	void OnCharacterGetInfoSuccess ( int nCharacterUID, struct FString sCharacterName, unsigned long bLookingForGroup, int nGroupStatus, int nGroupPublic, int nGroupInvite, int nDistrictUID, int nInstanceNo, int nDistrictStatus, unsigned char eFaction );
	void eventCharacterGetInfo ( struct FString sCharacterName );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void UI_CharacterFinderInfoFailure ( int nError, struct FString sCharacterName );
	void UI_CharacterFinderInfoSuccess ( int nCharacterUID, int nDistrictUID, int nInstanceNo, unsigned char eFaction, struct FString sCharacterName );
};

UClass* UcHostingFinder::pClassPointer = NULL;

// Class APBGame.cHostingFriendList
// 0x0028 (0x0068 - 0x0040)
class UcHostingFriendList : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingFriendListMember >         m_aMembers;                                       		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMembersChanged__Delegate;                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddResult__Delegate;                          		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingFriendList" );

		return pClassPointer;
	};

	int GetMemberIndex ( int nCharacterUID );
	void DisplayMembers ( );
	void DisplayInfo ( );
	void OnReceiveStatus ( int nCharacterUID, int nStatus );
	void OnReceiveInfo ( );
	void OnMembersGetStateFailed ( int nError );
	void OnMembersGetStateSuccess ( int nMembers );
	void eventMembersGetState ( );
	void OnRemoveFailed ( int nError, int nCharacterUID );
	void OnRemoveSuccess ( int nCharacterUID );
	void eventRemove ( int nMemberIndex );
	void OnAddFailed ( int nError, struct FString sCharacterName );
	void OnAddSuccess ( int nCharacterUID, struct FString sCharacterName, int nStatus, unsigned long bLookingForGroup, int nGroupStatus, int nGroupPublic, int nGroupInvite, int nDistrictUID, int nInstanceNo, int nDistrictStatus, unsigned char eFaction );
	void eventAdd ( struct FString sCharacterName );
	struct FString LocalizeText ( struct FString sKey );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void OnAddResult ( int nError );
	void OnMembersChanged ( );
};

UClass* UcHostingFriendList::pClassPointer = NULL;

// Class APBGame.cHostingGC2DS
// 0x0004 (0x0044 - 0x0040)
class UcHostingGC2DS : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingGC2DS" );

		return pClassPointer;
	};

	bool IsConnecting ( );
	bool IsConnected ( );
	void Disconnect ( );
	void Connect ( int nIPAddress, int nPort );
	void eventOnDistrictShutdownNotify ( int nMinutesLeft );
	void eventOnDisconnect ( );
	void eventOnDistrictEnterFailed ( int nError );
	void eventOnDistrictEnterSuccess ( int nDistrictUID, int nInstanceNo );
	void eventOnConnectFailed ( int nError );
	void eventOnConnectSuccess ( );
	void DistrictEnter ( );
	void Init ( class UcHostingClient* Client );
	struct FString LocalizeText ( struct FString sKey );
};

UClass* UcHostingGC2DS::pClassPointer = NULL;

// Class APBGame.cHostingGC2LS
// 0x04D0 (0x0538 - 0x0068)
class UcHostingGC2LS : public UcHostingConnectionWrapper
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sHost;                                          		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nPort;                                          		// 0x0078 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           m_aLS;                                            		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sLS1;                                           		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS2;                                           		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS3;                                           		// 0x00A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS4;                                           		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS5;                                           		// 0x00B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS6;                                           		// 0x00C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS7;                                           		// 0x00D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS8;                                           		// 0x00DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS9;                                           		// 0x00E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS10;                                          		// 0x00F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS11;                                          		// 0x0100 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS12;                                          		// 0x010C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS13;                                          		// 0x0118 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS14;                                          		// 0x0124 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS15;                                          		// 0x0130 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS16;                                          		// 0x013C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS17;                                          		// 0x0148 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS18;                                          		// 0x0154 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS19;                                          		// 0x0160 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS20;                                          		// 0x016C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS21;                                          		// 0x0178 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS22;                                          		// 0x0184 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS23;                                          		// 0x0190 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS24;                                          		// 0x019C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS25;                                          		// 0x01A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS26;                                          		// 0x01B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS27;                                          		// 0x01C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS28;                                          		// 0x01CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS29;                                          		// 0x01D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS30;                                          		// 0x01E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS31;                                          		// 0x01F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS32;                                          		// 0x01FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS33;                                          		// 0x0208 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS34;                                          		// 0x0214 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS35;                                          		// 0x0220 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS36;                                          		// 0x022C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS37;                                          		// 0x0238 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS38;                                          		// 0x0244 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS39;                                          		// 0x0250 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS40;                                          		// 0x025C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS41;                                          		// 0x0268 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS42;                                          		// 0x0274 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS43;                                          		// 0x0280 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS44;                                          		// 0x028C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS45;                                          		// 0x0298 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS46;                                          		// 0x02A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS47;                                          		// 0x02B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS48;                                          		// 0x02BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS49;                                          		// 0x02C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS50;                                          		// 0x02D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS51;                                          		// 0x02E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS52;                                          		// 0x02EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS53;                                          		// 0x02F8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS54;                                          		// 0x0304 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS55;                                          		// 0x0310 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS56;                                          		// 0x031C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS57;                                          		// 0x0328 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS58;                                          		// 0x0334 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS59;                                          		// 0x0340 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS60;                                          		// 0x034C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS61;                                          		// 0x0358 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS62;                                          		// 0x0364 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS63;                                          		// 0x0370 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS64;                                          		// 0x037C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS65;                                          		// 0x0388 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS66;                                          		// 0x0394 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS67;                                          		// 0x03A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS68;                                          		// 0x03AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS69;                                          		// 0x03B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS70;                                          		// 0x03C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS71;                                          		// 0x03D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS72;                                          		// 0x03DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS73;                                          		// 0x03E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS74;                                          		// 0x03F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS75;                                          		// 0x0400 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS76;                                          		// 0x040C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS77;                                          		// 0x0418 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS78;                                          		// 0x0424 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS79;                                          		// 0x0430 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS80;                                          		// 0x043C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS81;                                          		// 0x0448 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS82;                                          		// 0x0454 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS83;                                          		// 0x0460 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS84;                                          		// 0x046C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS85;                                          		// 0x0478 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS86;                                          		// 0x0484 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS87;                                          		// 0x0490 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS88;                                          		// 0x049C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS89;                                          		// 0x04A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS90;                                          		// 0x04B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS91;                                          		// 0x04C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS92;                                          		// 0x04CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS93;                                          		// 0x04D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS94;                                          		// 0x04E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS95;                                          		// 0x04F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS96;                                          		// 0x04FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS97;                                          		// 0x0508 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS98;                                          		// 0x0514 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS99;                                          		// 0x0520 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sLS100;                                         		// 0x052C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingGC2LS" );

		return pClassPointer;
	};

	void LoadLoginDLLs ( );
	void Send_GC2LS_ASK_CONFIGFILE_SAVE ( int nIndex );
	void Send_GC2LS_ASK_CONFIGFILE_LOAD ( int nIndex );
	void Send_GC2LS_ASK_WORLD_ENTER ( int nSlotNumber );
	void Send_GC2LS_ASK_CHARACTER_INFO ( int nSlotNumber );
	void Send_GC2LS_ASK_CHARACTER_DELETE ( int nSlotNumber );
	void Send_GC2LS_ASK_CHARACTER_CREATE ( unsigned char nFaction, unsigned char nGender, TArray< unsigned char > aCustomisation, int nSeconds );
	void Send_GC2LS_ASK_CHARACTER_NAME_CHECK ( int nWorldUID, struct FString sCharacterName );
	void Send_GC2LS_ASK_CHARACTER_NAME_CHANGE ( int nSlotNumber );
	void Send_GC2LS_ASK_WORLD_LIST ( );
	void Send_GC2LS_ASK_LOGIN ( int nPuzzleSolution, unsigned char* aAuthenticationKey );
	void eventOnKick ( int nReason, struct FString sInformation );
	void eventOnError ( int nMessageId, int nQueryId, int nReturnCode, int nParam1, int nParam2, int nParam3, int nParam4 );
	void eventOnDisconnect ( );
	void Disconnect ( unsigned long bNotify );
	void Logout ( );
	void eventOnSaveConfigFailed ( int nError, int nIndex );
	void eventOnPointsChange ( int nAmount );
	void eventOnSaveConfigSuccess ( int nIndex );
	void SaveConfigFile ( int nIndex );
	void eventOnLoadConfigFailed ( int nError, int nIndex );
	void eventOnLoadConfigSuccess ( int nIndex );
	void LoadConfigFile ( int nIndex );
	void eventOnWorldEnterFailed ( int nError );
	void eventOnWorldEnterSuccess ( );
	void WorldEnter ( int nSlotNumber );
	void eventOnCharacterInfoFailed ( int nError );
	void eventOnCharacterInfoSuccess ( int nSlotNumber );
	void CharacterInfo ( int nSlotNumber );
	void eventOnCharacterDeleteFailed ( int nError );
	void eventOnCharacterDeleteSuccess ( );
	void CharacterDelete ( int nSlotNumber );
	void eventOnCharacterCreateFailed ( int nError );
	void eventOnCharacterCreateSuccess ( int nSlotNumber );
	void CharacterCreate ( unsigned char eFaction, unsigned char eGender, TArray< unsigned char > aCustomisation, int nSeconds );
	void eventOnNameChangeFailed ( int nError );
	void eventOnNameChangeSuccess ( int nSlotNumber );
	void NameChange ( int nSlotNumber );
	void eventOnNameCheckFailed ( int nError );
	void eventOnNameCheckSuccess ( );
	void NameCheck ( int nWorldUID, struct FString sCharacterName );
	void eventOnWorldStatus ( int nWorldUID, int nStatus );
	void eventOnGetWorldListFailed ( int nError );
	void eventOnGetWorldListSuccess ( );
	void GetWorldList ( );
	void eventOnCharacterList ( );
	void eventOnLoginFailed ( int nError );
	void eventOnLoginSuccess ( int nPoints );
	void eventOnPuzzleFailed ( int nError );
	void eventOnPuzzleSuccess ( int nPuzzleSolution );
	void AllConnectsFailed ( );
	void eventOnConnectFailed ( );
	void eventOnConnectSuccess ( );
	void ConnectRandom ( );
	void AddLS ( struct FString sLS );
	void ConnectToLS ( );
	void FastLogin ( );
	void Login ( struct FString sUsername, struct FString sPassword );
	void Init ( class UcHostingClient* Client );
};

UClass* UcHostingGC2LS::pClassPointer = NULL;

// Class APBGame.cHostingGC2WS
// 0x0004 (0x006C - 0x0068)
class UcHostingGC2WS : public UcHostingConnectionWrapper
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingGC2WS" );

		return pClassPointer;
	};

	void Send_GC2WS_LFG ( unsigned long bLookingForGroup );
	void Send_GC2WS_ASK_SUBSCRIPTION_REMAINING_TIME ( );
	void Send_GC2WS_ASK_GM_COMMAND ( struct FString sCommand );
	void Send_GC2WS_ASK_WHO ( );
	void Send_GC2WS_ASK_POPULATION ( int nDistrictUID, int nInstanceNo );
	void Send_GC2WS_ASK_PLAYED ( );
	void Send_GC2WS_ASK_LEAGUE_VALUE ( int nLeagueUID, int nDistrictLeagueID );
	void Send_GC2WS_ASK_LEAGUE_MYLEAGUE_LIST ( int nType );
	void Send_GC2WS_ASK_LEAGUE_LIST ( int nLeagueUID, int nDistrictLeagueID );
	void Send_GC2WS_ASK_MAIL_DELETE ( int nMailUID );
	void Send_GC2WS_ASK_MAIL_ITEM ( int nMailUID );
	void Send_GC2WS_ASK_MAIL_READ ( int nMailUID );
	void Send_GC2WS_ASK_MAIL_LIST ( int nPage, unsigned char eSort );
	void Send_GC2WS_MARKETPLACE_THUMBNAIL ( unsigned char eAuctionType, unsigned char eListType, int nClientPage, int nPageRequestSequence, TArray< int > aAuctionUIDs );
	void Send_GC2WS_ASK_MARKETPLACE_SELLER_LIST ( unsigned char eAuctionType, struct FString sSearch );
	void Send_GC2WS_ASK_MARKETPLACE_MYBID_LIST ( unsigned char eAuctionType, int nRowsPerServerPage, int nServerPage, unsigned char eSort );
	void Send_GC2WS_ASK_MARKETPLACE_MYAUCTION_LIST ( unsigned char eAuctionType, int nRowsPerServerPage, int nServerPage, unsigned char eSort );
	void Send_GC2WS_ASK_MARKETPLACE_AUCTION_LIST ( unsigned char eAuctionType, int nRowsPerServerPage, int nServerPage, unsigned char eSort, unsigned char eSearch, struct FString sSearch, int nCategory, int nSubcategory, int nRatingOrCashStart, int nRatingOrCashEnd );
	void Send_GC2WS_ASK_MARKETPLACE_AUCTION_ITEM ( unsigned char eAuctionType, int nAuctionUID );
	void Send_GC2WS_ASK_MARKETPLACE_AUCTION_CANCEL ( unsigned char eAuctionType, int nAuctionUID );
	void Send_GC2WS_ASK_CHARACTERFINDER_INFO ( struct FString sCharacterName );
	void Send_GC2WS_ASK_IGNORELIST_REMOVE ( int nCharacterUID );
	void Send_GC2WS_ASK_IGNORELIST_ADD ( struct FString sCharacterName );
	void Send_GC2WS_ASK_FRIENDLIST_STATE ( );
	void Send_GC2WS_ASK_FRIENDLIST_REMOVE ( int nCharacterUID );
	void Send_GC2WS_ASK_FRIENDLIST_ADD ( struct FString sCharacterName );
	void Send_GC2WS_ASK_CLAN_MOTD_EDIT ( struct FString sMotd );
	void Send_GC2WS_ASK_CLAN_INFORMATION_EDIT ( struct FString sInformation );
	void Send_GC2WS_ASK_CLAN_INFORMATION ( );
	void Send_GC2WS_ASK_CLAN_RANK_ASSIGN ( int nCharacterUID, int nRankUID );
	void Send_GC2WS_ASK_CLAN_RANK_EDIT ( int nRankUID, struct FString sRankName, int nPermission );
	void Send_GC2WS_ASK_CLAN_RANK_DELETE ( int nRankUID );
	void Send_GC2WS_ASK_CLAN_RANK_CREATE ( struct FString sRankName, int nPermission );
	void Send_GC2WS_ASK_CLAN_MEMBER_NOTE_EDIT ( unsigned char nType, int nCharacterUID, struct FString sNote );
	void Send_GC2WS_ASK_CLAN_MEMBER_BIO_EDIT ( struct FString sBio );
	void Send_GC2WS_ASK_CLAN_MEMBER_PROFILE ( int nCharacterUID );
	void Send_GC2WS_ASK_CLAN_MEMBER_STATE ( );
	void Send_GC2WS_ASK_CLAN_MEMBER_STATS ( int nCharacterUID );
	void Send_GC2WS_ASK_CLAN_THEME_EDIT ( TArray< unsigned char > aTheme );
	void Send_GC2WS_ASK_CLAN_THEME ( );
	void Send_GC2WS_ASK_CLAN_SYMBOL_EDIT ( TArray< unsigned char > aSymbol );
	void Send_GC2WS_ASK_CLAN_SYMBOL ( );
	void Send_GC2WS_ASK_CLAN_BIO_EDIT ( struct FString sBio );
	void Send_GC2WS_ASK_CLAN_BIO ( );
	void Send_GC2WS_ASK_CLAN_LEADER ( int nCharacterUID );
	void Send_GC2WS_ASK_CLAN_REMOVE ( int nCharacterUID );
	void Send_GC2WS_ASK_CLAN_LEAVE ( );
	void Send_GC2WS_ANS_CLAN_INVITE ( int nReturnCode );
	void Send_GC2WS_ASK_CLAN_INVITE ( struct FString sCharacterName );
	void Send_GC2WS_ASK_CLAN_DELETE ( );
	void Send_GC2WS_ASK_CLAN_CREATE ( struct FString sClanName );
	void Send_GC2WS_ASK_GROUP_INFO ( struct FString sCharacterName );
	void Send_GC2WS_ASK_GROUP_LIST ( int nDistrictUID, int nInstanceNo );
	void Send_GC2WS_ASK_GROUP_STATE ( );
	void Send_GC2WS_ASK_GROUP_LEADER ( int nCharacterUID );
	void Send_GC2WS_ASK_GROUP_REMOVE ( int nCharacterUID );
	void Send_GC2WS_ASK_GROUP_LEAVE ( );
	void Send_GC2WS_ANS_GROUP_INVITE ( int nReturnCode );
	void Send_GC2WS_ASK_GROUP_INVITE ( struct FString sCharacterName );
	void Send_GC2WS_ASK_GROUP_JOIN ( struct FString sCharacterName );
	void Send_GC2WS_ASK_GROUP_CONFIG ( unsigned long bPublic, unsigned long bInvite );
	void Send_GC2WS_CHAT_STATE ( unsigned char eState, struct FString sMessage );
	void Send_GC2WS_CHAT_DISTRICT ( struct FString sMessage );
	void Send_GC2WS_CHAT_OFFICER ( struct FString sMessage );
	void Send_GC2WS_CHAT_CLAN ( struct FString sMessage );
	void Send_GC2WS_CHAT_GROUP ( struct FString sMessage );
	void Send_GC2WS_ASK_CHAT_WHISPER ( unsigned char nWhisperUID, struct FString sCharacterName, struct FString sMessage );
	void Send_GC2WS_ASK_NAME_QUERY ( unsigned char eNameQuery, int nCharacterUID );
	void Send_GC2WS_LOGOUT ( );
	void Send_GC2WS_ASK_DISTRICT_QUEUE_CANCEL ( unsigned long bGroup );
	void Send_GC2WS_ASK_DISTRICT_EXIT ( );
	void Send_GC2WS_ASK_DISTRICT_ENTER ( );
	void Send_GC2WS_ASK_DISTRICT_RESERVE_CANCEL ( );
	void Send_GC2WS_ASK_DISTRICT_RESERVE ( int nDistrictUID, int nInstanceNo, int nCharacterUID, unsigned long bGroup );
	void Send_GC2WS_ASK_INSTANCE_LIST ( );
	void Send_GC2WS_ASK_CONFIGFILE_SAVE ( int nIndex );
	void Send_GC2WS_ASK_CONFIGFILE_LOAD ( int nIndex );
	void Send_GC2WS_ASK_WORLD_QUEUE_CANCEL ( );
	void Send_GC2WS_ASK_WORLD_ENTER ( );
	void eventOnMarketplaceThumbnailFailed ( unsigned char eAuctionType, unsigned char eListType, int nClientPage, int nPageRequestSequence, int nError );
	void eventOnMarketplaceThumbnail ( unsigned char eAuctionType, unsigned char eListType, int nClientPage, int nPageRequestSequence, int nAuctionUID, struct FString sItemXml );
	void eventOnKick ( int nReason, struct FString sInformation );
	void eventOnError ( int nMessageId, int nQueryId, int nReturnCode, int nParam1, int nParam2, int nParam3, int nParam4 );
	void eventOnSubscriptionInfo ( int nRemainingSecondsHourly, int nRemainingSecondsMonthly );
	void LookingForGroup ( unsigned long bLookingForGroup );
	void eventOnSubscriptionRemainingTimeFailed ( int nErrorCode );
	void eventOnSubscriptionRemainingTimeSuccess ( int nRemainingSecondsHourly, int nRemainingSecondsMonthly );
	void eventOnGMCommand ( int nReturnCode );
	void GMCommand ( struct FString sCommand );
	void eventOnWho ( TArray< struct FString > enforcers, TArray< struct FString > criminals );
	void Who ( );
	void eventOnPopulation ( int nReturnCode, int nDistrictUID, int nInstanceNo, int nWorldPopulation, int nWorldEnforcers, int nWorldCriminals, int nInstancePopulation, int nInstanceEnforcers, int nInstanceCriminals );
	void Population ( int nDistrictUID, int nInstanceNo );
	void eventOnPlayed ( int nPlayedSeconds );
	void Played ( );
	void eventOnLeagueGetMyValueFailed ( int nError, int nLeagueUID, int nDistrictLeagueID );
	void eventOnLeagueGetMyValueSuccess ( int nLeagueUID, int nDistrictLeagueID, float fValue );
	void LeagueGetMyValue ( int nLeagueUID, int nDistrictLeagueID );
	void eventOnLeagueGetMyLeaguesFailed ( int nError, int nType );
	void eventOnLeagueGetMyLeaguesSuccess ( int nType );
	void LeagueGetMyLeagues ( int nType );
	void eventOnLeagueGetLeadersFailed ( int nError, int nLeagueUID, int nDistrictLeagueID );
	void eventOnLeagueGetLeadersSuccess ( int nLeagueUID, int nDistrictLeagueID );
	void LeagueGetLeaders ( int nLeagueUID, int nDistrictLeagueID );
	void eventOnMailDeleteFailed ( int nError, int nMailUID );
	void eventOnMailDeleteSuccess ( int nMailUID );
	void MailDelete ( int nMailUID );
	void eventOnMailGetItemFailed ( int nError, int nMailUID );
	void eventOnMailGetItemSuccess ( int nMailUID, struct FString sItem );
	void MailGetItem ( int nMailUID );
	void eventOnMailReadFailed ( int nError, int nMailUID );
	void eventOnMailReadSuccess ( int nMailUID, int nRemainingTime, int nTotal, int nUnread, struct FString sBody );
	void MailRead ( int nMailUID );
	void eventOnMailGetMailListFailed ( int nError );
	void eventOnMailGetMailListSuccess ( int nTotal, int nUnread );
	void MailGetMailList ( int nPage, unsigned char eSort );
	void eventOnMailInfo ( int nInfoType, int nTotal, int nUnread, int nExpired );
	void eventOnMarketplaceGetMyBidListFailed ( unsigned char eAuctionType, int nError );
	void eventOnMarketplaceGetMyBidListSuccess ( unsigned char eAuctionType );
	void MarketplaceGetMyBidList ( unsigned char eAuctionType, int nRowsPerServerPage, int nServerPage, unsigned char eSort );
	void eventOnMarketplaceGetMyAuctionListFailed ( unsigned char eAuctionType, int nError );
	void eventOnMarketplaceGetMyAuctionListSuccess ( unsigned char eAuctionType );
	void MarketplaceGetMyAuctionList ( unsigned char eAuctionType, int nRowsPerServerPage, int nServerPage, unsigned char eSort );
	void eventOnMarketplaceGetAuctionListFailed ( unsigned char eAuctionType, int nError );
	void eventOnMarketplaceGetAuctionListSuccess ( unsigned char eAuctionType );
	void MarketplaceGetAuctionList ( unsigned char eAuctionType, int nRowsPerServerPage, int nServerPage, unsigned char eSort, unsigned char eSearch, struct FString sSearch, int nCategory, int nSubcategory, int nRatingStart, int nRatingEnd );
	void MarketplaceGetThumbnails ( unsigned char eAuctionType, unsigned char eListType, int nClientPage, int nPageRequestSequence, TArray< int > aAuctionUIDs );
	void eventOnMarketplaceGetSellerListFailed ( unsigned char eAuctionType, int nError );
	void eventOnMarketplaceGetSellerListSuccess ( unsigned char eAuctionType, int nTotalNames );
	void MarketplaceGetSellerList ( unsigned char eAuctionType, struct FString sSearch );
	void eventOnMarketplaceAuctionGetItemFailed ( unsigned char eAuctionType, int nError, int nAuctionUID );
	void eventOnMarketplaceAuctionGetItemSuccess ( unsigned char eAuctionType, int nAuctionUID, struct FString sItem );
	void MarketplaceAuctionGetItem ( unsigned char eAuctionType, int nAuctionUID );
	void eventOnMarketplaceAuctionCancelFailed ( unsigned char eAuctionType, int nError, int nAuctionUID );
	void eventOnMarketplaceAuctionCancelSuccess ( unsigned char eAuctionType, int nAuctionUID );
	void MarketplaceAuctionCancel ( unsigned char eAuctionType, int nAuctionUID );
	void eventOnMarketplaceAuctionInfo ( unsigned char eAuctionType, int nAuctionUID, int nInfoType, int nItemType, struct FString sItemName, int nAmount );
	void eventOnFinderCharacterGetInfoFailed ( int nError, struct FString sCharacterName );
	void eventOnFinderCharacterGetInfoSuccess ( int nCharacterUID, struct FString sCharacterName, unsigned long bLookingForGroup, int nGroupStatus, int nGroupPublic, int nGroupInvite, int nDistrictUID, int nInstanceNo, int nDistrictStatus, unsigned char eFaction );
	void FinderCharacterGetInfo ( struct FString sCharacterName );
	void eventOnReceiveIgnoreListInfo ( );
	void eventOnIgnoreListRemoveFailed ( int nError, int nCharacterUID );
	void eventOnIgnoreListRemoveSuccess ( int nCharacterUID );
	void IgnoreListRemove ( int nCharacterUID );
	void eventOnIgnoreListAddFailed ( int nError, struct FString sCharacterName );
	void eventOnIgnoreListAddSuccess ( int nCharacterUID, struct FString sCharacterName );
	void IgnoreListAdd ( struct FString sCharacterName );
	void eventOnReceiveFriendListStatus ( int nCharacterUID, int nStatus );
	void eventOnReceiveFriendListInfo ( );
	void eventOnFriendListGetStateFailed ( int nError );
	void eventOnFriendListGetStateSuccess ( int nMembers );
	void FriendListGetState ( );
	void eventOnFriendListRemoveFailed ( int nError, int nCharacterUID );
	void eventOnFriendListRemoveSuccess ( int nCharacterUID );
	void FriendListRemove ( int nCharacterUID );
	void eventOnFriendListAddFailed ( int nError, struct FString sCharacterName );
	void eventOnFriendListAddSuccess ( int nCharacterUID, struct FString sCharacterName, unsigned char eFaction, int nStatus, unsigned long bLookingForGroup, int nGroupStatus, int nGroupPublic, int nGroupInvite, int nDistrictUID, int nInstanceNo, int nDistrictStatus );
	void FriendListAdd ( struct FString sCharacterName );
	void eventOnReceiveClanStatus ( int nCharacterUID, int nStatus );
	void eventOnReceiveClanDelete ( );
	void eventOnReceiveClanLeader ( int nCharacterUID );
	void eventOnReceiveClanRemove ( int nCharacterUID );
	void eventOnReceiveClanLeave ( int nCharacterUID );
	void eventOnReceiveClanJoin ( );
	void eventOnReceiveClanInfo ( );
	void eventOnReceiveClanRankInfo ( );
	void eventOnReceiveClanRankAssign ( int nCharacterUID, int nRankUID );
	void eventOnReceiveClanRankEdit ( int nRankUID, struct FString sRankName, int nPermission );
	void eventOnReceiveClanRankDelete ( int nRankUID );
	void eventOnReceiveClanRankCreate ( int nRankUID, struct FString sRankName, int nPermission );
	void eventOnReceiveClanMotd ( struct FString sMotd );
	void eventOnClanSetMotdFailed ( int nError );
	void eventOnClanSetMotdSuccess ( );
	void ClanSetMotd ( struct FString sMotd );
	void eventOnClanSetInformationFailed ( int nError );
	void eventOnClanSetInformationSuccess ( );
	void ClanSetInformation ( struct FString sInformation );
	void eventOnClanGetInformationFailed ( int nError );
	void eventOnClanGetInformationSuccess ( struct FString sInformation );
	void ClanGetInformation ( );
	void eventOnClanRankAssignFailed ( int nError, int nCharacterUID, int nRankUID );
	void eventOnClanRankAssignSuccess ( int nCharacterUID, int nRankUID );
	void ClanRankAssign ( int nCharacterUID, int nRankUID );
	void eventOnClanRankEditFailed ( int nError, int nRankUID );
	void eventOnClanRankEditSuccess ( int nRankUID );
	void ClanRankEdit ( int nRankUID, struct FString sRankName, int nPermission );
	void eventOnClanRankDeleteFailed ( int nError, int nRankUID );
	void eventOnClanRankDeleteSuccess ( int nRankUID );
	void ClanRankDelete ( int nRankUID );
	void eventOnClanRankCreateFailed ( int nError );
	void eventOnClanRankCreateSuccess ( );
	void ClanRankCreate ( struct FString sRankName, int nPermission );
	void eventOnClanMemberSetPrivateNoteFailed ( int nError, int nCharacterUID );
	void eventOnClanMemberSetPrivateNoteSuccess ( int nCharacterUID );
	void ClanMemberSetPrivateNote ( int nCharacterUID, struct FString sPrivateNote );
	void eventOnClanMemberSetPublicNoteFailed ( int nError, int nCharacterUID );
	void eventOnClanMemberSetPublicNoteSuccess ( int nCharacterUID );
	void ClanMemberSetPublicNote ( int nCharacterUID, struct FString sPublicNote );
	void eventOnClanMemberSetBioFailed ( int nError );
	void eventOnClanMemberSetBioSuccess ( );
	void ClanMemberSetBio ( struct FString sBio );
	void eventOnClanMemberGetProfileFailed ( int nError, int nCharacterUID );
	void eventOnClanMemberGetProfileSuccess ( int nCharacterUID );
	void ClanMemberGetProfile ( int nCharacterUID );
	void eventOnClanMemberGetStateFailed ( int nError );
	void eventOnClanMemberGetStateSuccess ( int nMembers );
	void ClanMemberGetState ( );
	void eventOnClanMemberGetStatsFailed ( int nError );
	void eventOnClanMemberGetStatsSuccess ( int nCharacterUID, int nMembers );
	void ClanMemberGetStats ( int nCharacterUID );
	void eventOnClanSetThemeFailed ( int nError );
	void eventOnClanSetThemeSuccess ( );
	void ClanSetTheme ( TArray< unsigned char > aTheme );
	void eventOnClanGetThemeFailed ( int nError );
	void eventOnClanGetThemeSuccess ( );
	void ClanGetTheme ( );
	void eventOnClanSetSymbolFailed ( int nError );
	void eventOnClanSetSymbolSuccess ( );
	void ClanSetSymbol ( TArray< unsigned char > aSymbol );
	void eventOnClanGetSymbolFailed ( int nError );
	void eventOnClanGetSymbolSuccess ( );
	void ClanGetSymbol ( );
	void eventOnClanSetBioFailed ( int nError );
	void eventOnClanSetBioSuccess ( );
	void ClanSetBio ( struct FString sBio );
	void eventOnClanGetBioFailed ( int nError );
	void eventOnClanGetBioSuccess ( struct FString sBio );
	void ClanGetBio ( );
	void eventOnClanLeaderFailed ( int nError, int nCharacterUID );
	void eventOnClanLeaderSuccess ( int nCharacterUID );
	void ClanLeader ( int nCharacterUID );
	void eventOnClanRemoveFailed ( int nError, int nCharacterUID );
	void eventOnClanRemoveSuccess ( int nCharacterUID );
	void ClanRemove ( int nCharacterUID );
	void eventOnClanLeaveFailed ( int nError );
	void eventOnClanLeaveSuccess ( );
	void ClanLeave ( );
	void DeclineClanInvite ( int nReturnCode );
	void AcceptClanInvite ( );
	void eventOnReceiveClanInvite ( struct FString sCharacterName, struct FString sClanName );
	void eventOnSendClanInviteFailed ( int nError, struct FString sCharacterName );
	void eventOnSendClanInviteSuccess ( struct FString sCharacterName );
	void SendClanInvite ( struct FString sCharacterName );
	void eventOnClanDeleteFailed ( int nError );
	void eventOnClanDeleteSuccess ( );
	void ClanDelete ( );
	void eventOnClanCreateFailed ( int nError );
	void eventOnClanCreateSuccess ( );
	void ClanCreate ( struct FString sClanName );
	void eventOnReceiveGroupInviteCancelled ( struct FString sCharacterName );
	void eventOnReceiveGroupStatus ( int nCharacterUID, int nStatus );
	void eventOnReceiveGroupLeader ( int nCharacterUID );
	void eventOnReceiveGroupRemove ( int nCharacterUID );
	void eventOnReceiveGroupLeave ( int nCharacterUID );
	void eventOnReceiveGroupJoin ( );
	void eventOnReceiveGroupConfig ( unsigned long bPublic, unsigned long bInvite );
	void eventOnReceiveGroupInfo ( unsigned long bPublic, unsigned long bInvite );
	void eventOnGroupInfoFailed ( int nError, struct FString sCharacterName );
	void eventOnGroupInfoSuccess ( struct FString sCharacterName );
	void GroupInfo ( struct FString sCharacterName );
	void eventOnGroupListFailed ( int nError, int nDistrictUID, int nInstanceNo );
	void eventOnGroupListSuccess ( int nDistrictUID, int nInstanceNo );
	void GroupList ( int nDistrictUID, int nInstanceNo );
	void eventOnGroupStateFailed ( int nError );
	void eventOnGroupStateSuccess ( int nMembers );
	void GroupState ( );
	void eventOnGroupLeaderFailed ( int nError, int nCharacterUID );
	void eventOnGroupLeaderSuccess ( int nCharacterUID );
	void GroupLeader ( int nCharacterUID );
	void eventOnGroupRemoveFailed ( int nError, int nCharacterUID );
	void eventOnGroupRemoveSuccess ( int nCharacterUID );
	void GroupRemove ( int nCharacterUID );
	void eventOnGroupLeaveFailed ( int nError );
	void eventOnGroupLeaveSuccess ( );
	void GroupLeave ( );
	void DeclineGroupInvite ( int nReturnCode );
	void AcceptGroupInvite ( );
	void eventOnReceiveGroupInvite ( struct FString sCharacterName );
	void eventOnSendGroupInviteFailed ( int nError, struct FString sCharacterName );
	void eventOnSendGroupInviteSuccess ( struct FString sCharacterName );
	void SendGroupInvite ( struct FString sCharacterName );
	void eventOnSendGroupJoinFailed ( int nError, struct FString sCharacterName );
	void eventOnSendGroupJoinSuccess ( struct FString sCharacterName );
	void SendGroupJoin ( struct FString sCharacterName );
	void eventOnSendGroupConfigFailed ( int nError );
	void eventOnSendGroupConfigSuccess ( );
	void SendGroupConfig ( unsigned long bPublic, unsigned long bInvite );
	void eventOnReceiveChatConversationEnd ( struct FString sCharacterName );
	void eventOnReceiveChatDND ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void eventOnReceiveChatAFK ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void ChatState ( unsigned char eState, struct FString sMessage );
	void eventOnReceiveChatSystem ( int nDuration, struct FString sMessage );
	void eventOnReceiveChatDistrict ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void SendChatDistrict ( struct FString sMessage );
	void eventOnReceiveChatOfficer ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void SendChatOfficer ( struct FString sMessage );
	void eventOnReceiveChatClan ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void SendChatClan ( struct FString sMessage );
	void eventOnReceiveChatGroup ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void SendChatGroup ( struct FString sMessage );
	void eventOnReceiveChatWhisper ( int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void eventOnSendChatWhisperFailed ( int nError, unsigned char nWhisperUID );
	void eventOnSendChatWhisperSuccess ( unsigned char nWhisperUID, int nCharacterUID );
	void SendChatWhisper ( unsigned char nWhisperUID, struct FString sCharacterName, struct FString sMessage );
	void eventOnNameQueryFailed ( int nError, unsigned char eNameQuery, int nCharacterUID );
	void eventOnNameQuerySuccess ( unsigned char eNameQuery, int nCharacterUID, struct FString sCharacterName );
	void NameQuery ( unsigned char eNameQuery, int nCharacterUID );
	void eventOnDisconnect ( );
	void Disconnect ( unsigned long bNotify );
	void Logout ( );
	void eventOnDistrictQueueCancelFailed ( int nError, unsigned long bGroup );
	void eventOnDistrictQueueCancelSuccess ( unsigned long bGroup );
	void DistrictQueueCancel ( unsigned long bGroup );
	void eventOnDistrictQueueStatus ( int nDistrictUID, int nInstanceNo, int nPosition, int nSize, int nCharacterUID );
	void eventOnDistrictExitFailed ( int nError );
	void eventOnDistrictExitSuccess ( );
	void DistrictExit ( );
	void eventOnDistrictEnterFailed ( int nError );
	void eventOnDistrictEnterSuccess ( );
	void DistrictEnter ( );
	void eventOnDistrictReserveCancelFailed ( int nError );
	void eventOnDistrictReserveCancelSuccess ( );
	void DistrictReserveCancel ( );
	void eventOnDistrictReserveFailed ( int nError, int nDistrictUID, int nInstanceNo, unsigned long bGroup, unsigned long bQueued );
	void eventOnDistrictReserveSuccess ( int nDistrictUID, int nInstanceNo, unsigned long bGroup, unsigned long bQueued );
	void DistrictReserve ( int nDistrictUID, int nInstanceNo, int nCharacterUID, unsigned long bGroup );
	void eventOnGetInstanceListFailed ( int nError );
	void eventOnGetInstanceListSuccess ( );
	void GetInstanceList ( );
	void eventOnReceiveDistrictList ( );
	void eventOnSaveConfigFailed ( int nError, int nIndex );
	void eventOnSaveConfigSuccess ( int nIndex );
	void SaveConfigFile ( int nIndex );
	void eventOnLoadConfigFailed ( int nError, int nIndex );
	void eventOnLoadConfigSuccess ( int nIndex );
	void LoadConfigFile ( int nIndex );
	void eventOnWorldQueueCancelFailed ( int nError );
	void eventOnWorldQueueCancelSuccess ( );
	void WorldQueueCancel ( );
	void eventOnWorldQueueStatus ( int nPosition, int nSize, int nEstimatedWait );
	void eventOnWorldShutdownNotify ( int nMinutesLeft );
	void eventOnWorldEnterFailed ( int nError );
	void eventOnWorldEnterSuccess ( int nCharacterUID, unsigned long bIsGM, int nServerTime, int nPoints, unsigned long bTutorialComplete, unsigned long bLookingForGroup );
	void eventOnConnectFailed ( );
	void eventOnConnectSuccess ( );
	void WorldEnter ( );
	void Init ( class UcHostingClient* Client );
	struct FString LocalizeText ( struct FString sKey );
};

UClass* UcHostingGC2WS::pClassPointer = NULL;

// Class APBGame.cHostingGroup
// 0x00D0 (0x0110 - 0x0040)
class UcHostingGroup : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nLeaderUID;                                     		// 0x0044 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingGroupMember >              m_aMembers;                                       		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bShowGroupListInChat : 1;                       		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bShowGroupInfoInChat : 1;                       		// 0x0054 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bPublic : 1;                                    		// 0x0054 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bInvite : 1;                                    		// 0x0054 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bLookingForGroup : 1;                           		// 0x0054 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< struct FtHostingGroupInfo >                m_aGroupList;                                     		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nGroupInfoLeaderUID;                            		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingGroupMember >              m_aGroupInfoMembers;                              		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMembersChanged_Soc__Delegate;                 		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMembersChanged_DistrictSel__Delegate;         		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInviteReceived__Delegate;                     		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInviteSent_UI__Delegate;                      		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInviteSendFailed_UI__Delegate;                		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinSuccess_UI__Delegate;                     		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinFailed_UI__Delegate;                      		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGroupListSuccess_UI__Delegate;                		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGroupListFailed_UI__Delegate;                 		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGroupInfoSuccess_UI__Delegate;                		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGroupInfoFailed_UI__Delegate;                 		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSetConfigSuccess_UI__Delegate;                		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSetConfigFailed_UI__Delegate;                 		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingGroup" );

		return pClassPointer;
	};

	int GetMemberIndex ( int nCharacterUID );
	void DisplayMembers ( );
	void DisplayInfo ( );
	void OnReceiveStatus ( int nCharacterUID, int nStatus );
	void OnReceiveLeader ( int nCharacterUID );
	void OnReceiveRemove ( int nCharacterUID );
	void OnReceiveLeave ( int nCharacterUID );
	void OnReceiveJoin ( );
	void OnReceiveInfo ( unsigned long bPublic, unsigned long bInvite );
	void OnGroupInfoFailed ( int nError, struct FString sCharacterName );
	void OnGroupInfoSuccess ( struct FString sCharacterName );
	void eventGroupInfo ( struct FString sCharacterName, unsigned long bShowGroupInfoInChat );
	void OnGroupListFailed ( int nError, int nDistrictUID, int nInstanceNo );
	void OnGroupListSuccess ( int nDistrictUID, int nInstanceNo );
	void eventGroupList ( int nDistrictUID, int nInstanceNo, unsigned long bShowGroupListInChat );
	void OnStateFailed ( int nError );
	void OnStateSuccess ( int nMembers );
	void eventState ( );
	void OnLeaderFailed ( int nError, int nCharacterUID );
	void OnLeaderSuccess ( int nCharacterUID );
	void eventLeader ( int nMemberIndex );
	void OnRemoveFailed ( int nError, int nCharacterUID );
	void OnRemoveSuccess ( int nCharacterUID );
	void eventRemove ( int nMemberIndex );
	void OnLeaveFailed ( int nError );
	void OnLeaveSuccess ( );
	void eventLeave ( );
	void eventBounceInvite ( );
	void OnReceiveInviteCancelled ( struct FString sCharacterName );
	void eventDeclineInvite ( int nReturnCode );
	void eventAcceptInvite ( );
	void OnReceiveInvite ( struct FString sCharacterName );
	void OnSendInviteFailed ( int nError, struct FString sCharacterName );
	void OnSendInviteSuccess ( struct FString sCharacterName );
	void eventSendInvite ( struct FString sCharacterName );
	void OnJoinFailed ( int nError, struct FString sCharacterName );
	void OnJoinSuccess ( struct FString sCharacterName );
	void eventJoin ( struct FString sCharacterName );
	bool eventGetLookingForGroup ( );
	void eventSetLookingForGroup ( unsigned long bLookingForGroup );
	void InitLookingForGroup ( unsigned long bLookingForGroup );
	void OnReceiveConfig ( unsigned long bPublic, unsigned long bInvite );
	void OnSetConfigFailed ( int nError );
	void OnSetConfigSuccess ( );
	void SetConfig ( unsigned long bPublic, unsigned long bInvite );
	void eventSetInvite ( unsigned long bInvite );
	bool eventRetInvite ( );
	void eventSetPublic ( unsigned long bPublic );
	bool eventIsPublic ( );
	bool eventIsLeader ( );
	bool eventHasGroup ( );
	struct FString LocalizeText ( struct FString sKey );
	void OnExit ( );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void OnSetConfigFailed_UI ( int nError );
	void OnSetConfigSuccess_UI ( );
	void OnGroupInfoFailed_UI ( int nError, struct FString sCharacterName );
	void OnGroupInfoSuccess_UI ( struct FString sCharacterName );
	void OnGroupListFailed_UI ( int nDistrictUID, int nInstanceNo );
	void OnGroupListSuccess_UI ( int nDistrictUID, int nInstanceNo );
	void OnJoinFailed_UI ( int nError, struct FString sCharacterName );
	void OnJoinSuccess_UI ( struct FString sCharacterName );
	void OnInviteSendFailed_UI ( int nError );
	void OnInviteSent_UI ( );
	void OnInviteReceived ( struct FString sPlayerName );
	void OnMembersChanged_DistrictSel ( );
	void OnMembersChanged_Soc ( );
};

UClass* UcHostingGroup::pClassPointer = NULL;

// Class APBGame.cHostingGroupServer
// 0x0004 (0x0044 - 0x0040)
class UcHostingGroupServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingGroupServer" );

		return pClassPointer;
	};

	void GetNewLeader ( int nGroupUID, TArray< int >* aCharacterUIDs );
	void OnAskNewLeader ( int nGroupUID );
	void OnLeader ( int nGroupUID, int nCharacterUID, int nLeaderUID );
	void OnLeave ( int nGroupUID, int nCharacterUID );
	void OnJoin ( int nGroupUID, int nCharacterUID, int nLeaderUID );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingGroupServer::pClassPointer = NULL;

// Class APBGame.cHostingIC2IS
// 0x0008 (0x0048 - 0x0040)
class UcHostingIC2IS : public UObject
{
public:
	class UcHostingImageServer*                        m_HostingImageServer;                             		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pListenSocket;                                  		// 0x0044 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingIC2IS" );

		return pClassPointer;
	};

	bool Listen ( struct FString sHostname, int nPort );
	void Init ( class UcHostingImageServer* Server );
};

UClass* UcHostingIC2IS::pClassPointer = NULL;

// Class APBGame.cHostingIgnoreList
// 0x0028 (0x0068 - 0x0040)
class UcHostingIgnoreList : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingIgnoreListMember >         m_aMembers;                                       		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMembersChanged__Delegate;                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddResult__Delegate;                          		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingIgnoreList" );

		return pClassPointer;
	};

	int GetMemberIndex ( int nCharacterUID );
	void DisplayMembers ( );
	void DisplayInfo ( );
	void OnReceiveInfo ( );
	void OnRemoveFailed ( int nError, int nCharacterUID );
	void OnRemoveSuccess ( int nCharacterUID );
	void eventRemove ( int nMemberIndex );
	void OnAddFailed ( int nError, struct FString sCharacterName );
	void OnAddSuccess ( int nCharacterUID, struct FString sCharacterName );
	void eventAdd ( struct FString sCharacterName );
	struct FString LocalizeText ( struct FString sKey );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void OnAddResult ( int nError );
	void OnMembersChanged ( );
};

UClass* UcHostingIgnoreList::pClassPointer = NULL;

// Class APBGame.cHostingImageServer
// 0x0098 (0x00D8 - 0x0040)
class UcHostingImageServer : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                m_nServerUID;                                     		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionHigh;                                   		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionMiddle;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nVersionLow;                                    		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionBuildNo;                                		// 0x0054 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sComputerName;                                  		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sClientListenIP;                                		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nClientListenPort;                              		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nClientAcceptTimeout;                           		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                m_nClientRecvTimeout;                             		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sMonitorListenIP;                               		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMonitorListenPort;                             		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nConfigDatabaseLoginTimeout;                    		// 0x008C (0x0004) [0x0000000000000000]              
	struct FString                                     m_sConfigDatabaseIP;                              		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nConfigDatabasePort;                            		// 0x009C (0x0004) [0x0000000000000000]              
	struct FString                                     m_sConfigDatabaseUsername;                        		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sConfigDatabasePassword;                        		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sConfigDatabaseDatabase;                        		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMonitoringBuffers;                             		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              m_fElapsedSeconds;                                		// 0x00C8 (0x0004) [0x0000000000000000]              
	class UcHostingIC2IS*                              m_ImageClient;                                    		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pConfigDatabase;                                		// 0x00D0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UcThumbnailHelper*                           m_ThumbnailHelper;                                		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingImageServer" );

		return pClassPointer;
	};

	void Exit ( );
	void Term ( );
	void eventPreExit ( );
	void eventPostInit ( );
	bool eventPreInit ( );
};

UClass* UcHostingImageServer::pClassPointer = NULL;

// Class APBGame.cHostingLeague
// 0x0028 (0x0068 - 0x0040)
class UcHostingLeague : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingLeague >                   m_aLeagues;                                       		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtHostingMyLeague >                 m_aMyLeagues;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtHostingMyLeague >                 m_aMyClanLeagues;                                 		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingLeague" );

		return pClassPointer;
	};

	void NotifyUILeaguesDatastore ( unsigned long bSuccess, int nLeagueUID, int nDistrictLeagueID );
	int eventGetLeagueIndex ( int nLeagueUID, int nDistrictLeagueID );
	void DisplayMyClanLeagues ( );
	void DisplayMyLeagues ( );
	void DisplayLeague ( int nLeagueUID, int nDistrictLeagueID );
	void OnGetMyValueFailed ( int nError, int nLeagueUID, int nDistrictLeagueID );
	void OnGetMyValueSuccess ( int nLeagueUID, int nDistrictLeagueID, float fValue );
	void eventGetMyValue ( int nLeagueUID, int nDistrictLeagueID );
	void OnGetMyLeaguesFailed ( int nError, int nType );
	void OnGetMyLeaguesSuccess ( int nType );
	void eventGetMyLeagues ( int nType );
	void OnGetLeadersFailed ( int nError, int nLeagueUID, int nDistrictLeagueID );
	void OnGetLeadersSuccess ( int nLeagueUID, int nDistrictLeagueID );
	void eventGetLeaders ( int nLeagueUID, int nDistrictLeagueID );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
};

UClass* UcHostingLeague::pClassPointer = NULL;

// Class APBGame.cHostingLobby
// 0x0140 (0x0180 - 0x0040)
class UcHostingLobby : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingLobbyCharacter >           m_aCharacters;                                    		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtHostingLobbyWorld >               m_aWorlds;                                        		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nSubscriptionExpiryDay;                         		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                m_nSubscriptionExpiryMonth;                       		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nSubscriptionExpiryYear;                        		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nSubscriptionExpiryHour;                        		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nSubscriptionExpiryMinute;                      		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nSubscriptionExpirySecond;                      		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nPlayTimeSeconds;                               		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sCheckingCharacterName;                         		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCheckingWorldUID;                              		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sCheckedCharacterName;                          		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCheckedWorldUID;                               		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_nEnteringWorldUID;                              		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             ___OnNameCheckSuccess__Delegate;                  		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnNameCheckFailed__Delegate;                   		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnNameChangeSuccess__Delegate;                 		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnNameChangeFailed__Delegate;                  		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnCharacterCreateSuccess__Delegate;            		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnCharacterCreateFailed__Delegate;             		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnCharacterDeleteSuccess__Delegate;            		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnCharacterDeleteFailed__Delegate;             		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnCharacterInfoSuccess__Delegate;              		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnCharacterInfoFailed__Delegate;               		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnGetWorldListSuccess__Delegate;               		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnGetWorldListFailed__Delegate;                		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnWorldStatusUpdated__Delegate;                		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnWorldEnterSuccess__Delegate;                 		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnWorldEnterFailed__Delegate;                  		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnWorldQueueStatus__Delegate;                  		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnWorldQueueCancelSuccess__Delegate;           		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             ___OnWorldQueueCancelFailed__Delegate;            		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWorldEnterUI__Delegate;                       		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingLobby" );

		return pClassPointer;
	};

	int eventGetWorldIndex ( int nWorldUID );
	int eventGetCharacterIndex ( int nSlotNumber );
	void DisplayWorldList ( );
	void DisplayCharacterList ( );
	void SetWorldOffline ( int nWorldUID );
	void OnWorldQueueCancelFailed ( int nError );
	void OnWorldQueueCancelSuccess ( );
	void eventWorldQueueCancel ( );
	void OnWorldQueueStatus ( int nPosition, int nSize, int nEstimatedWait );
	void OnWorldEnterFailed ( int nError );
	void OnWorldEnterSuccess ( int nCharacterUID, unsigned long bIsGM, int nServerTime, int nPoints, unsigned long bTutorialComplete, unsigned long bLookingForGroup );
	void eventWorldEnter ( int nSlotNumber );
	void OnPointsChange ( int nAmount );
	void OnCharacterInfoFailed ( int nError );
	void OnCharacterInfoSuccess ( int nSlotNumber );
	void eventCharacterInfo ( int nSlotNumber );
	void OnCharacterDeleteFailed ( int nError );
	void OnCharacterDeleteSuccess ( );
	void eventCharacterDelete ( int nSlotNumber );
	void OnCharacterCreateFailed ( int nError );
	void OnCharacterCreateSuccess ( int nSlotNumber );
	void CharacterCreate ( unsigned char eFaction, unsigned char eGender, TArray< unsigned char > aCustomisation, int nSeconds );
	void OnNameChangeFailed ( int nError );
	void OnNameChangeSuccess ( int nSlotNumber );
	void eventNameChange ( int nSlotNumber );
	void OnNameCheckFailed ( int nError );
	void OnNameCheckSuccess ( );
	void NameCheck ( int nWorldUID, struct FString sCharacterName );
	void OnWorldStatus ( int nWorldUID, int nStatus );
	void OnGetWorldListFailed ( int nError );
	void OnGetWorldListSuccess ( );
	void eventGetWorldList ( );
	void OnCharacterList ( );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void OnWorldEnterUI ( int nCharacterUID );
	void _OnWorldQueueCancelFailed ( int nError );
	void _OnWorldQueueCancelSuccess ( );
	void _OnWorldQueueStatus ( int nPosition, int nSize, int nEstimatedWait );
	void _OnWorldEnterFailed ( int nError );
	void _OnWorldEnterSuccess ( );
	void _OnWorldStatusUpdated ( );
	void _OnGetWorldListFailed ( int nError );
	void _OnGetWorldListSuccess ( );
	void _OnCharacterInfoFailed ( int nError );
	void _OnCharacterInfoSuccess ( );
	void _OnCharacterDeleteFailed ( int nError );
	void _OnCharacterDeleteSuccess ( );
	void _OnCharacterCreateFailed ( int nError );
	void _OnCharacterCreateSuccess ( int nSlotNumber );
	void _OnNameChangeFailed ( int nError );
	void _OnNameChangeSuccess ( );
	void _OnNameCheckFailed ( int nError );
	void _OnNameCheckSuccess ( );
};

UClass* UcHostingLobby::pClassPointer = NULL;

// Class APBGame.cHostingMailBase
// 0x0008 (0x0048 - 0x0040)
class UcHostingMailBase : public UObject
{
public:
	int                                                m_nCost;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nSoftLimit;                                     		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingMailBase" );

		return pClassPointer;
	};

	void GetConstantFromSDD ( int eKey, struct FMailConstant* Constant );
	void InitBase ( );
};

UClass* UcHostingMailBase::pClassPointer = NULL;

// Class APBGame.cHostingMail
// 0x00AC (0x00F4 - 0x0048)
class UcHostingMail : public UcHostingMailBase
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nUnread;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nTotal;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< struct FtHostingMail >                     m_aMail;                                          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMailCurrentPage;                               		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nMailRequestedPage;                             		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nMailListSize;                                  		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                m_nMailRequestedRead;                             		// 0x006C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMailListChanged__Delegate;                    		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailListDetailsChanged__Delegate;             		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailContentsChanged__Delegate;                		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailDeleted__Delegate;                        		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailTotalsChanged__Delegate;                  		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailSent__Delegate;                           		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailSendFailed__Delegate;                     		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailItemDetach__Delegate;                     		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailCashDetach__Delegate;                     		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailInfoReceived__Delegate;                   		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMailCleanup__Delegate;                        		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingMail" );

		return pClassPointer;
	};

	int GetMailIndex ( int nMailUID );
	void DisplayMailList ( );
	void DisplayMailInfo ( );
	void OnMailSystem ( );
	void OnMailInfo ( int nInfoType, int nTotal, int nUnread, int nExpired );
	void OnGetMailListFailed ( int nError );
	void OnGetMailListSuccess ( int nTotal, int nUnread );
	void eventGetMailList ( int nPage, unsigned char eSort );
	void OnDeleteFailed ( int nError, int nMailUID );
	void OnDeleteSuccess ( int nMailUID );
	void eventDelete ( int nMailIndex );
	void OnGetItemFailed ( int nError, int nMailUID );
	void OnGetItemSuccess ( int nMailUID, struct FString sItem );
	void eventGetItem ( int nMailIndex );
	void OnReadFailed ( int nError, int nMailUID );
	void OnReadSuccess ( int nMailUID, int nRemainingTime, int nTotal, int nUnread, struct FString sBody );
	void eventRead ( int nMailIndex );
	void OnDetachItemFailed ( int nError, int nMailUID, int nRemainingTime );
	void OnDetachItemSuccess ( int nMailUID, int nRemainingTime );
	void eventDetachItem ( int nMailUID, int nSelectedChildReward );
	void OnDetachPointsFailed ( int nError, int nMailUID, int nRemainingTime );
	void OnDetachPointsSuccess ( int nMailUID, int nRemainingTime );
	void eventDetachPoints ( int nMailIndex );
	void OnDetachCashFailed ( int nError, int nMailUID, int nRemainingTime );
	void OnDetachCashSuccess ( int nMailUID, int nRemainingTime );
	void eventDetachCash ( int nMailIndex );
	void OnSendFailed ( int nError );
	void OnSendSuccess ( );
	void eventSend ( struct FString sTo, struct FString sSubject, struct FString sBody, struct FGuid nItemGuid, int nCash );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void OnMailCleanup ( );
	void OnMailInfoReceived ( int nUnread );
	void OnMailCashDetach ( int nError );
	void OnMailItemDetach ( int nError );
	void OnMailSendFailed ( int nError );
	void OnMailSent ( );
	void OnMailTotalsChanged ( );
	void OnMailDeleted ( );
	void OnMailContentsChanged ( );
	void OnMailListDetailsChanged ( );
	void OnMailListChanged ( );
};

UClass* UcHostingMail::pClassPointer = NULL;

// Class APBGame.cHostingMailServer
// 0x0004 (0x004C - 0x0048)
class UcHostingMailServer : public UcHostingMailBase
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingMailServer" );

		return pClassPointer;
	};

	void DatabaseDetachItem ( class AcAPBPlayerController* pPC, int nMailUID, int nSelectedChildReward );
	void DatabaseDetachPoints ( class AcAPBPlayerController* pPC, int nMailUID );
	void DatabaseDetachCash ( class AcAPBPlayerController* pPC, int nMailUID );
	void DatabaseSend ( int nSenderUID, class AcAPBPlayerController* pPC, struct FString sTo, struct FString sSubject, struct FString sBody, struct FGuid nItemGuid, int nCash );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingMailServer::pClassPointer = NULL;

// Class APBGame.cHostingMarketplaceBase
// 0x000C (0x004C - 0x0040)
class UcHostingMarketplaceBase : public UObject
{
public:
	int                                                m_nMaximumAuctions;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              m_fMinimumBidPercentage;                          		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              m_fTariffPercentage;                              		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingMarketplaceBase" );

		return pClassPointer;
	};

	void GetConstantFromSDD ( int eKey, struct FMarketplaceConstant* Constant );
	void InitBase ( );
};

UClass* UcHostingMarketplaceBase::pClassPointer = NULL;

// Class APBGame.cHostingMarketplace
// 0x01AC (0x01F8 - 0x004C)
class UcHostingMarketplace : public UcHostingMarketplaceBase
{
public:
	unsigned char                                      m_eAuctionType;                                   		// 0x004C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eMyAuctionsPrevSort;                            		// 0x004D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eMyBidsPrevSort;                                		// 0x004E (0x0001) [0x0000000000000000]              
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           m_aSellers;                                       		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtHostingMarketplaceAuction >       m_aAuctions;                                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtHostingMarketplaceMyAuction >     m_aMyAuctions;                                    		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtHostingMarketplaceMyBid >         m_aMyBids;                                        		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMarketplacePageRequestSequence;                		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nMarketplaceRowsPerClientPage;                  		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nAuctionsCurrentServerPage;                     		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_nAuctionsCurrentClientPage;                     		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                m_nAuctionsRequestedClientPage;                   		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_nAuctionsListSize;                              		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FtHostingMarketplaceAuctionListSearchParams m_auctionsPrevSearchParams;                       		// 0x009C (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMyAuctionsCurrentServerPage;                   		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_nMyAuctionsCurrentClientPage;                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                m_nMyAuctionsRequestedClientPage;                 		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                m_nMyAuctionsListSize;                            		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                m_nMyBidsCurrentServerPage;                       		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                m_nMyBidsCurrentClientPage;                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                m_nMyBidsRequestedClientPage;                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nMyBidsListSize;                                		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                m_nBidAmount;                                     		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                m_nRequestedItemAuctionUID;                       		// 0x00E0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnAuctionsListChanged__Delegate;                		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetAuctionsListFailed__Delegate;              		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMyAuctionsListChanged__Delegate;              		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetMyAuctionsListFailed__Delegate;            		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMyBidsListChanged__Delegate;                  		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetMyBidsListFailed__Delegate;                		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionsListDetailsChanged__Delegate;         		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMyAuctionsListDetailsChanged__Delegate;       		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMyBidsListDetailsChanged__Delegate;           		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionRemoved__Delegate;                     		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMyAuctionRemoved__Delegate;                   		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMyBidRemoved__Delegate;                       		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionCreateSuccess_UI__Delegate;            		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionCreateFailure_UI__Delegate;            		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionCancelSuccess_UI__Delegate;            		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionCancelFailure_UI__Delegate;            		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionBidSuccess_UI__Delegate;               		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionBidFailure_UI__Delegate;               		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCreatorCompletionSuccess_UI__Delegate;        		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCreatorCompletionFailure_UI__Delegate;        		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionGetItemSuccess_UI__Delegate;           		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionGetItemFailure_UI__Delegate;           		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuctionCleanup_UI__Delegate;                  		// 0x01EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingMarketplace" );

		return pClassPointer;
	};

	int GetMyBidsIndex ( int nAuctionUID );
	int GetMyAuctionsIndex ( int nAuctionUID );
	int GetAuctionIndex ( int nAuctionUID );
	void OnAuctionInfo ( int nAuctionUID, int nInfoType, int nItemType, struct FString sItemName, int nAmount );
	void DisplayMyBidInfo ( );
	void OnGetMyBidListFailed ( int nError );
	void OnGetMyBidListSuccess ( );
	void eventGetMyBidList ( int nClientPage, int nRowsPerClientPage, unsigned char eSort );
	void DisplayMyAuctionInfo ( );
	void OnGetMyAuctionListFailed ( int nError );
	void OnGetMyAuctionListSuccess ( );
	void eventGetMyAuctionList ( int nClientPage, int nRowsPerClientPage, unsigned char eSort );
	void DisplaySellerList ( );
	void DisplayAuctionInfo ( );
	bool eventGetListNextIndex ( struct FtHostingMarketplaceListPos* pos, int* nIndex );
	bool eventGetListFirstIndex ( unsigned char eListType, int nClientPage, struct FtHostingMarketplaceListPos* headPos );
	void GetThumbnails ( unsigned char eListType, int nClientPage );
	bool IsThumbnailCached ( int nAuctionUID );
	void OnGetAuctionListFailed ( int nError );
	void OnGetAuctionListSuccess ( );
	void eventGetAuctionList ( int nClientPage, int nRowsPerClientPage, unsigned char eSort, unsigned char eSearch, struct FString sSearch, int nCategory, int nSubcategory, int nRatingOrCashStart, int nRatingOrCashEnd );
	void OnGetSellerListFailed ( int nError );
	void OnGetSellerListSuccess ( int nTotalNames );
	void eventGetSellerList ( struct FString sSearch );
	void OnThumbnailFailed ( unsigned char eListType, int nClientPage, int nPageRequestSequence, int nError );
	void OnThumbnail ( unsigned char eListType, int nClientPage, int nPageRequestSequence, int nAuctionUID, struct FString sItemXml );
	void OnAuctionGetItemFailed ( int nError, int nAuctionUID );
	void OnAuctionGetItemSuccess ( int nAuctionUID, struct FString sItem );
	void event_AuctionGetItem ( int nAuctionUID );
	void MyBidsGetItem ( int nMyBidsIndex );
	void MyAuctionsGetItem ( int nMyAuctionsIndex );
	void eventAuctionGetItem ( int nAuctionIndex );
	void OnAuctionCancelFailed ( int nError, int nAuctionUID );
	void OnAuctionCancelSuccess ( int nAuctionUID );
	void event_AuctionCancel ( int nAuctionUID );
	void MyAuctionsCancel ( int nMyAuctionsIndex );
	void AuctionCancel ( int nAuctionIndex );
	void OnAuctionBidFailed ( int nError, int nAuctionUID );
	void OnAuctionBidSuccess ( int nAuctionUID );
	void event_AuctionBid ( int nAuctionUID, int nAmount );
	bool eventIsValidBid ( int nAmount, struct FQWord nStartingBid, int nCurrentBid, int nBuyout );
	bool eventIsValidBid_MyBids ( int nAmount, int nCurrentBid, int nBuyout );
	void MyBidsBid ( int nMyBidsIndex, int nAmount );
	void AuctionBid ( int nAuctionIndex, int nAmount );
	void OnAuctionCreateFailed ( int nError );
	void OnAuctionCreateSuccess ( );
	void eventAuctionCreate ( unsigned char nFactionRestriction, struct FGuid nItemGuid, unsigned char eDuration, int nStartingBid, int nBuyout, int nCash );
	int eventMinimumBid ( int nCurrentBid );
	struct FString Text ( struct FString sKey );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client, unsigned char eAuctionType );
	struct FString GetItemName ( struct FString sUserSpecifiedName, int eInventoryItemType );
	void OnAuctionCleanup_UI ( int nCurrency );
	void OnAuctionGetItemFailure_UI ( int nCurrency, int nAuctionID );
	void OnAuctionGetItemSuccess_UI ( int nCurrency, int nAuctionID, struct FString sItemXMLData );
	void OnCreatorCompletionFailure_UI ( int nError );
	void OnCreatorCompletionSuccess_UI ( );
	void OnAuctionBidFailure_UI ( int nError );
	void OnAuctionBidSuccess_UI ( );
	void OnAuctionCancelFailure_UI ( int nError );
	void OnAuctionCancelSuccess_UI ( );
	void OnAuctionCreateFailure_UI ( int nError );
	void OnAuctionCreateSuccess_UI ( );
	void OnMyBidRemoved ( int nCurrency );
	void OnMyAuctionRemoved ( int nCurrency );
	void OnAuctionRemoved ( int nCurrency );
	void OnMyBidsListDetailsChanged ( int nCurrency );
	void OnMyAuctionsListDetailsChanged ( int nCurrency );
	void OnAuctionsListDetailsChanged ( int nCurrency );
	void OnGetMyBidsListFailed ( int nError );
	void OnMyBidsListChanged ( int nCurrency );
	void OnGetMyAuctionsListFailed ( int nError );
	void OnMyAuctionsListChanged ( int nCurrency );
	void OnGetAuctionsListFailed ( int nError );
	void OnAuctionsListChanged ( int nCurrency );
};

UClass* UcHostingMarketplace::pClassPointer = NULL;

// Class APBGame.cHostingMarketplaceServer
// 0x0004 (0x0050 - 0x004C)
class UcHostingMarketplaceServer : public UcHostingMarketplaceBase
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingMarketplaceServer" );

		return pClassPointer;
	};

	void DatabaseAuctionBid ( class AcHostingPlayerController* pPC, unsigned char eAuctionType, int nAuctionUID, int nAmount );
	void DatabaseAuctionCreate ( class AcHostingPlayerController* pPC, unsigned char eAuctionType, unsigned char eFactionRestriction, struct FGuid nItemGuid, unsigned char eDuration, int nStartingBid, int nBuyout, int nCash );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingMarketplaceServer::pClassPointer = NULL;

// Class APBGame.cHostingMissionServer
// 0x0004 (0x0044 - 0x0040)
class UcHostingMissionServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingMissionServer" );

		return pClassPointer;
	};

	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingMissionServer::pClassPointer = NULL;

// Class APBGame.cHostingNameFilterServer
// 0x0004 (0x0044 - 0x0040)
class UcHostingNameFilterServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingNameFilterServer" );

		return pClassPointer;
	};

	void Check ( struct FString sName, class AcAPBPlayerController* pPC );
	void Cleanup ( );
	void Init ( class UcHostingServer* Server );
};

UClass* UcHostingNameFilterServer::pClassPointer = NULL;

// Class APBGame.cHostingNameQuery
// 0x0020 (0x0060 - 0x0040)
class UcHostingNameQuery : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pCharacterNameCache;                            		// 0x0044 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FScriptDelegate                             __OnNameQuerySuccessItem_UI__Delegate;            		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNameQueryFailureItem_UI__Delegate;            		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingNameQuery" );

		return pClassPointer;
	};

	bool GetCharacterNameNative ( int nCharacterUID, struct FString* sCharacterName );
	void AddCachedCharacterName ( int nCharacterUID, struct FString sCharacterName );
	bool GetCachedCharacterName ( int nCharacterUID, struct FString* sCharacterName );
	void OnNameQueryFailedItem ( int nError, int nCharacterUID );
	void OnNameQuerySuccessItem ( int nCharacterUID, struct FString sCharacterName );
	void OnNameQueryFailed ( int nError, unsigned char eNameQuery, int nCharacterUID );
	void OnNameQuerySuccess ( unsigned char eNameQuery, int nCharacterUID, struct FString sCharacterName );
	void eventNameQuery ( unsigned char eNameQuery, int nCharacterUID );
	bool eventGetCharacterName ( int nCharacterUID, struct FString* sCharacterName );
	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
	void OnNameQueryFailureItem_UI ( int nError, int nCharacterUID );
	void OnNameQuerySuccessItem_UI ( int nCharacterUID, struct FString sCharacterName );
};

UClass* UcHostingNameQuery::pClassPointer = NULL;

// Class APBGame.cHostingNames
// 0x000C (0x004C - 0x0040)
class UcHostingNames : public UObject
{
public:
	struct FString                                     m_sRegion;                                        		// 0x0040 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingNames" );

		return pClassPointer;
	};

	bool IsValidItemName ( struct FString sMessage );
	bool IsValidChatMessage ( struct FString sMessage );
	bool IsValidClanRankName ( struct FString sName );
	bool IsValidClanName ( struct FString sName );
	bool IsValidCharacterName ( struct FString sName );
	bool IsValidPassword ( struct FString sPassword );
	bool IsValidUsername ( struct FString sUsername );
	void Init ( );
	void Configure ( struct FString sRegion );
};

UClass* UcHostingNames::pClassPointer = NULL;

// Class APBGame.cHostingServer
// 0x021D (0x025D - 0x0040)
class UcHostingServer : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                m_nServerUID;                                     		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictServerGroupUID;                        		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionHigh;                                   		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nVersionMiddle;                                 		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionLow;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                m_nVersionBuildNo;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sComputerName;                                  		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWorldServerListenIP;                           		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldServerListenPort;                         		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sClientListenIP;                                		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nClientListenPort;                              		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nNetworkKeepaliveTime;                          		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nNetworkKeepaliveInterval;                      		// 0x008C (0x0004) [0x0000000000000000]              
	struct FString                                     m_sMonitorListenIP;                               		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMonitorListenPort;                             		// 0x009C (0x0004) [0x0000000000000000]              
	struct FString                                     m_sServerRegion;                                  		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nServerShutdownDelay;                           		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                m_nClientAuthenticationTimeout;                   		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                m_nCharacterCheckpointInterval;                   		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nCharacterSaveInterval;                         		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldServerSendBufferSize;                     		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_nWorldServerRecvBufferSize;                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldServerMaxMessageSize;                     		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldServerConnectTimeout;                     		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldServerTickInterval;                       		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                m_nConfigDatabaseLoginTimeout;                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldDatabaseLoginTimeout;                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldDatabaseThreads;                          		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sConfigDatabaseIP;                              		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nConfigDatabasePort;                            		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sConfigDatabaseUsername;                        		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sConfigDatabasePassword;                        		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sConfigDatabaseDatabase;                        		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldDatabaseUID;                              		// 0x0110 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sWorldDatabaseIP;                               		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldDatabasePort;                             		// 0x0120 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sWorldDatabaseUsername;                         		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWorldDatabasePassword;                         		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWorldDatabaseDatabase;                         		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldLogDatabaseUID;                           		// 0x0148 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sWorldLogDatabaseIP;                            		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldLogDatabasePort;                          		// 0x0158 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sWorldLogDatabaseUsername;                      		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWorldLogDatabasePassword;                      		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWorldLogDatabaseDatabase;                      		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nWorldLogDatabaseLoginTimeout;                  		// 0x0180 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sBulkLogDirectoryPath;                          		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sBulkLogArchiveDirectoryPath;                   		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sBulkLogFormatFilePath;                         		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nBulkLogFileArchiveSize;                        		// 0x01A8 (0x0004) [0x0000000000000000]              
	int                                                m_nBulkLogFileArchiveTimeout;                     		// 0x01AC (0x0004) [0x0000000000000000]              
	int                                                m_nBulkLogFileCollectingInterval;                 		// 0x01B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bBulkLogReceiveResultRowsAffected : 1;          		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bInstance : 1;                                  		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bRecovery : 1;                                  		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bBulkLog : 1;                                   		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bIsRequestingExit : 1;                          		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bLocked : 1;                                    		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                m_nBulkLogPendingBufferSize;                      		// 0x01B8 (0x0004) [0x0000000000000000]              
	int                                                m_nBulkLogPendingOverflowBufferSize;              		// 0x01BC (0x0004) [0x0000000000000000]              
	int                                                m_nBulkLogPendingTimeout;                         		// 0x01C0 (0x0004) [0x0000000000000000]              
	int                                                m_nBulkLogServerExecutionCount;                   		// 0x01C4 (0x0004) [0x0000000000000000]              
	int                                                m_dateBulkLogServerExecutionYear;                 		// 0x01C8 (0x0004) [0x0000000000000000]              
	int                                                m_dateBulkLogServerExecutionMonth;                		// 0x01CC (0x0004) [0x0000000000000000]              
	int                                                m_dateBulkLogServerExecutionDay;                  		// 0x01D0 (0x0004) [0x0000000000000000]              
	int                                                m_dateBulkLogServerExecutionHour;                 		// 0x01D4 (0x0004) [0x0000000000000000]              
	int                                                m_dateBulkLogServerExecutionMinute;               		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                m_dateBulkLogServerExecutionSecond;               		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                m_nSubscriptionDisconnectTimeout;                 		// 0x01E0 (0x0004) [0x0000000000000000]              
	int                                                m_nWorldServerUID;                                		// 0x01E4 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictUID;                                   		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                m_nInstanceNo;                                    		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                m_nMonitoringBuffers;                             		// 0x01F0 (0x0004) [0x0000000000000000]              
	float                                              m_fElapsedSeconds;                                		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                m_nInstanceTime;                                  		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictInstanceType;                          		// 0x01FC (0x0004) [0x0000000000000000]              
	struct FString                                     m_sMap;                                           		// 0x0200 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcHostingDistrictServer*                     m_district;                                       		// 0x020C (0x0004) [0x0000000000000000]              
	class UcHostingChatServer*                         m_chat;                                           		// 0x0210 (0x0004) [0x0000000000000000]              
	class UcHostingGroupServer*                        m_group;                                          		// 0x0214 (0x0004) [0x0000000000000000]              
	class UcHostingClanServer*                         m_clan;                                           		// 0x0218 (0x0004) [0x0000000000000000]              
	class UcHostingMarketplaceServer*                  m_marketplace;                                    		// 0x021C (0x0004) [0x0000000000000000]              
	class UcHostingMailServer*                         m_mail;                                           		// 0x0220 (0x0004) [0x0000000000000000]              
	class UcHostingNames*                              m_Name;                                           		// 0x0224 (0x0004) [0x0000000000000000]              
	class UcHostingNameFilterServer*                   m_namefilter;                                     		// 0x0228 (0x0004) [0x0000000000000000]              
	class UcHostingMissionServer*                      m_Mission;                                        		// 0x022C (0x0004) [0x0000000000000000]              
	class UcHostingDisplayPointServer*                 m_displaypoint;                                   		// 0x0230 (0x0004) [0x0000000000000000]              
	class UcHostingDS2WS*                              m_WorldServer;                                    		// 0x0234 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pItem;                                          		// 0x0238 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pConfigDatabase;                                		// 0x023C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pWorldDatabase;                                 		// 0x0240 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pAsyncWork;                                     		// 0x0244 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pMemoryMappedFile;                              		// 0x0248 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPersistentCharacterData;                       		// 0x024C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPlayerControllers;                             		// 0x0250 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nShutdownSeconds;                               		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pShutdownNotification;                          		// 0x0258 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      m_eDistrictState;                                 		// 0x025C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingServer" );

		return pClassPointer;
	};

	class AcAPBPlayerReplicationInfo* GetPRI ( int nCharacterUID );
	class AcAPBPlayerController* GetPC ( int nCharacterUID );
	class UEngine* GetEngine ( );
	void MessageBox ( struct FString sMessage );
	void Exit ( );
	void ShutDown ( struct FString sType );
	void Term ( );
	void PreExitNative ( );
	void CleanupNative ( );
	void SetDistrictInstanceType2nd ( int nSecondaryKey );
	void eventLock ( unsigned long bLock );
	unsigned char GetDistrictState ( );
	void SetDistrictState ( unsigned char eDistrictState );
	void eventPreExit ( );
	void Cleanup ( );
	void eventPostInit ( );
	void eventPreInit ( );
};

UClass* UcHostingServer::pClassPointer = NULL;

// Class APBGame.cHostingSubscription
// 0x0010 (0x0050 - 0x0040)
class UcHostingSubscription : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             ___OnSubscriptionInfo__Delegate;                  		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingSubscription" );

		return pClassPointer;
	};

	void OnSubscriptionRemainingTimeFailed ( int nErrorCode );
	void OnSubscriptionRemainingTimeSuccess ( int nRemainingSecondsHourly, int nRemainingSecondsMonthly );
	void eventGetSubscriptionRemainingTime ( );
	void OnSubscriptionInfo ( int nRemainingSecondsHourly, int nRemainingSecondsMonthly );
	void Init ( class UcHostingClient* Client );
	void _OnSubscriptionInfo ( int nRemainingSecondsHourly, int nRemainingSecondsMonthly );
};

UClass* UcHostingSubscription::pClassPointer = NULL;

// Class APBGame.cHostingVoice
// 0x0034 (0x0074 - 0x0040)
class UcHostingVoice : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nAccountID;                                     		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sUsername;                                      		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPassword;                                      		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sURL;                                           		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nPortMin;                                       		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nPortMax;                                       		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingVoice" );

		return pClassPointer;
	};

	void Cleanup ( );
	void Init ( class UcHostingClient* Client );
};

UClass* UcHostingVoice::pClassPointer = NULL;

// Class APBGame.cLeague
// 0x0008 (0x0048 - 0x0040)
class UcLeague : public UObject
{
public:
	int                                                m_nLeagueUID;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pLeague;                                        		// 0x0044 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLeague" );

		return pClassPointer;
	};

};

UClass* UcLeague::pClassPointer = NULL;

// Class APBGame.cUIAction_CheckHostingClientState
// 0x0001 (0x00F1 - 0x00F0)
class UcUIAction_CheckHostingClientState : public UUIAction
{
public:
	unsigned char                                      m_eCheckClientState;                              		// 0x00F0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUIAction_CheckHostingClientState" );

		return pClassPointer;
	};

};

UClass* UcUIAction_CheckHostingClientState::pClassPointer = NULL;

// Class APBGame.cHostingErrors
// 0x0000 (0x0040 - 0x0040)
class UcHostingErrors : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingErrors" );

		return pClassPointer;
	};

};

UClass* UcHostingErrors::pClassPointer = NULL;

// Class APBGame.cHostingLimits
// 0x0000 (0x0040 - 0x0040)
class UcHostingLimits : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingLimits" );

		return pClassPointer;
	};

};

UClass* UcHostingLimits::pClassPointer = NULL;

// Class APBGame.cGraffitiDisplayPoint
// 0x003C (0x0278 - 0x023C)
class AcGraffitiDisplayPoint : public AActor
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UMaterialInstanceConstant*                   m_MaterialInstance;                               		// 0x0240 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMeshComponent*                        m_StaticMeshComponent;                            		// 0x0244 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FBoxSphereBounds                            m_Bounds;                                         		// 0x0248 (0x001C) [0x0000000000000000]              
	float                                              m_fTexelFactor;                                   		// 0x0264 (0x0004) [0x0000000000000000]              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0268 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      m_bSpraying : 1;                                  		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	class AcDistrictBlock*                             m_Owner;                                          		// 0x0270 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_CurrentTexture;                                 		// 0x0274 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGraffitiDisplayPoint" );

		return pClassPointer;
	};

	bool IsPawnInFrontOf ( class APawn* pUser );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void eventSprayedBeginState ( class APawn* User );
	void TextureChanged ( class UTexture2D* PrevTexture, class UTexture2D* NewTexture );
	void eventSetTexture ( class UTexture2D* Tex );
};

UClass* AcGraffitiDisplayPoint::pClassPointer = NULL;

// Class APBGame.cCustomGraffitiDisplayPoint
// 0x0030 (0x02A8 - 0x0278)
class AcCustomGraffitiDisplayPoint : public AcGraffitiDisplayPoint
{
public:
	struct FGuid                                       m_CustomisationGuid;                              		// 0x0278 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FGuid                                       m_PreviousCustomisationGuid;                      		// 0x0288 (0x0010) [0x0000000000000000]              
	class UcCompressedAssetCustomisation*              m_CompressedCustomisationData;                    		// 0x0298 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_CachedTexture;                                  		// 0x029C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eNotifyFlag;                                    		// 0x02A0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      m_bCaptured : 1;                                  		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCustomGraffitiDisplayPoint" );

		return pClassPointer;
	};

	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void eventSetInitialState ( );
	void eventReplicatedEvent ( struct FName sVariableName );
	void NotifyCustomisationChanged ( );
	void SetCustomisationNew ( class APawn* User );
	void SetCachedTexture ( class UTexture2D* Texture );
};

UClass* AcCustomGraffitiDisplayPoint::pClassPointer = NULL;

// Class APBGame.cGraffitiCrimeTarget
// 0x0048 (0x02C0 - 0x0278)
class AcGraffitiCrimeTarget : public AcGraffitiDisplayPoint
{
public:
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x0278 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FEnumeratedName                             m_eGraffitiTaskTargetType;                        		// 0x027C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        m_aTextures;                                      		// 0x028C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        m_aAntiTextures;                                  		// 0x0298 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_eGraffitiState;                                 		// 0x02A4 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eGraffitiCSA;                                   		// 0x02A5 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eSprayedFaction;                                		// 0x02A6 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x02A7 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FGraffitiTextureData                        m_TextureData;                                    		// 0x02A8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x02B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nRepTaskOperationID;                            		// 0x02B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID;                           		// 0x02B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOpposingSideID;                         		// 0x02BC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGraffitiCrimeTarget" );

		return pClassPointer;
	};

	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	bool IsValidAntiGraffitiUser ( class AcAPBPlayerController* pPC );
	bool IsValidGraffitiUser ( class AcAPBPlayerController* pPC );
	void SelectGraffitiTexture ( class APawn* User );
	void SelectRandomGraffitiTexture ( );
	void SetGraffitiTexture ( int nIndex, unsigned char eType );
	void SetTextureData ( int nIndex, unsigned char eType );
	void OnTaskCSACompleted ( class AcAPBPlayerController* pPC );
	void OnTaskCSACancelled ( class AcAPBPlayerController* pPC );
	void OnTaskCSAStarted ( class AcAPBPlayerController* pPC );
	void OnGraffitiSprayed ( class AcAPBPlayerController* pPC );
	bool IsAllowedToTransitionToSprayedState ( );
	bool IsPartOfActiveTask ( );
	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	void eventSetInitialState ( );
	void eventCallSuperReplicated ( struct FName VarName );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName sVariableName );
};

UClass* AcGraffitiCrimeTarget::pClassPointer = NULL;

// Class APBGame.cGraffitiCrimeTargetPlaceholder
// 0x0000 (0x02C0 - 0x02C0)
class AcGraffitiCrimeTargetPlaceholder : public AcGraffitiCrimeTarget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGraffitiCrimeTargetPlaceholder" );

		return pClassPointer;
	};

	bool IsPawnInFrontOf ( class APawn* pUser );
};

UClass* AcGraffitiCrimeTargetPlaceholder::pClassPointer = NULL;

// Class APBGame.cGraffitiDescriptor
// 0x0014 (0x0074 - 0x0060)
class UcGraffitiDescriptor : public UcAssetCustomisation
{
public:
	struct FGuid                                       m_Guid;                                           		// 0x0060 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UcSymbolDescriptor*                          m_Symbol;                                         		// 0x0070 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGraffitiDescriptor" );

		return pClassPointer;
	};

};

UClass* UcGraffitiDescriptor::pClassPointer = NULL;

// Class APBGame.cGraffitiTestActor
// 0x0018 (0x0254 - 0x023C)
class AcGraffitiTestActor : public AActor
{
public:
	struct FString                                     m_sTargetPackage;                                 		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcGraffitiDescriptor*                        m_descriptor;                                     		// 0x0248 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector2D                                   m_Dimensions;                                     		// 0x024C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGraffitiTestActor" );

		return pClassPointer;
	};

};

UClass* AcGraffitiTestActor::pClassPointer = NULL;

// Class APBGame.cSymbolDescriptor
// 0x0020 (0x0080 - 0x0060)
class UcSymbolDescriptor : public UcAssetCustomisation
{
public:
	struct FPointer                                    VfTable_i2DCompositionInterface;                  		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FSymbolLayer >                      m_aLayers;                                        		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nRoyaltyFee;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	TArray< int >                                      m_aLookupTable;                                   		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSymbolDescriptor" );

		return pClassPointer;
	};

	int GetCost ( );
};

UClass* UcSymbolDescriptor::pClassPointer = NULL;

// Class APBGame.cTurfBoundaryMarker
// 0x0000 (0x02A8 - 0x02A8)
class AcTurfBoundaryMarker : public AcCustomGraffitiDisplayPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTurfBoundaryMarker" );

		return pClassPointer;
	};

	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
};

UClass* AcTurfBoundaryMarker::pClassPointer = NULL;

// Class APBGame.cTurfControlPointMarker
// 0x0008 (0x02B0 - 0x02A8)
class AcTurfControlPointMarker : public AcCustomGraffitiDisplayPoint
{
public:
	unsigned char                                      m_eFaction;                                       		// 0x02A8 (0x0001) [0x0000000000000000]              
	class UcObservers*                                 m_aObservers;                                     		// 0x02AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTurfControlPointMarker" );

		return pClassPointer;
	};

	void Capture ( class AcAPBPlayerController* PC );
	class UcObservers* GetObservers ( );
	unsigned char GetFaction ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
};

UClass* AcTurfControlPointMarker::pClassPointer = NULL;

// Class APBGame.cBoxComponent
// 0x00C0 (0x0298 - 0x01D8)
class UcBoxComponent : public UPrimitiveComponent
{
public:
	struct FVector                                     m_Verts[ 0x8 ];                                   		// 0x01D8 (0x0060) [0x0000000000000000]              
	struct FVector                                     m_WorldVerts[ 0x8 ];                              		// 0x0238 (0x0060) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBoxComponent" );

		return pClassPointer;
	};

};

UClass* UcBoxComponent::pClassPointer = NULL;

// Class APBGame.cAPBVolume
// 0x0000 (0x0278 - 0x0278)
class AcAPBVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBVolume" );

		return pClassPointer;
	};

	bool Encompasses2D ( struct FVector Point );
	struct FLinearColor GetColour ( );
	bool RandomPointInVolume ( int nMaxIterations, int* nRandomSeed, struct FVector* Point );
};

UClass* AcAPBVolume::pClassPointer = NULL;

// Class APBGame.cSpawnVolume
// 0x0008 (0x0280 - 0x0278)
class AcSpawnVolume : public AcAPBVolume
{
public:
	class ACameraActor*                                CameraRespawnNode;                                		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AcPlayerCharacterSpawnDirection*             m_SpawnDirection;                                 		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSpawnVolume" );

		return pClassPointer;
	};

	class ACameraActor* eventRetCameraRespawnNode ( );
};

UClass* AcSpawnVolume::pClassPointer = NULL;

// Class APBGame.cPlayerCharacterSpawnZone
// 0x001C (0x029C - 0x0280)
class AcPlayerCharacterSpawnZone : public AcSpawnVolume
{
public:
	int                                                m_HUDMarkerID;                                    		// 0x0280 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bMasterSpawnZone : 1;                           		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FEnumeratedName                             m_eSpawnFaction;                                  		// 0x0288 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_eSpawnFactionOrdinal;                           		// 0x0298 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerCharacterSpawnZone" );

		return pClassPointer;
	};

	unsigned char GetFaction ( );
	struct FLinearColor GetColour ( );
	void Destroyed ( );
	void NativePostBeginPlay ( );
	void PostBeginPlay ( );
};

UClass* AcPlayerCharacterSpawnZone::pClassPointer = NULL;

// Class APBGame.cAPBBotSpawnVolume
// 0x0000 (0x029C - 0x029C)
class AcAPBBotSpawnVolume : public AcPlayerCharacterSpawnZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBBotSpawnVolume" );

		return pClassPointer;
	};

	void Destroyed ( );
	void PostBeginPlay ( );
	struct FLinearColor GetColour ( );
};

UClass* AcAPBBotSpawnVolume::pClassPointer = NULL;

// Class APBGame.cAPBTriggerVolume
// 0x0000 (0x0278 - 0x0278)
class AcAPBTriggerVolume : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBTriggerVolume" );

		return pClassPointer;
	};

	void eventTelefragPawn ( class APawn* PawnToTelefrag );
};

UClass* AcAPBTriggerVolume::pClassPointer = NULL;

// Class APBGame.cAPBVolumeRenderComponent
// 0x0000 (0x01D8 - 0x01D8)
class UcAPBVolumeRenderComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBVolumeRenderComponent" );

		return pClassPointer;
	};

};

UClass* UcAPBVolumeRenderComponent::pClassPointer = NULL;

// Class APBGame.cAPBWorldBounds
// 0x0000 (0x0278 - 0x0278)
class AcAPBWorldBounds : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBWorldBounds" );

		return pClassPointer;
	};

};

UClass* AcAPBWorldBounds::pClassPointer = NULL;

// Class APBGame.cCustomisationZone
// 0x0004 (0x027C - 0x0278)
class AcCustomisationZone : public AcAPBTriggerVolume
{
public:
	int                                                m_nHUDMarkerID;                                   		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCustomisationZone" );

		return pClassPointer;
	};

	void RemoveHUDMessages ( class AcAPBPlayerController* pPC );
	void DisplayHUDMessage ( class AcAPBPlayerController* pPC );
	void TermHUDMarker ( );
	void InitHUDMarker ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AcCustomisationZone::pClassPointer = NULL;

// Class APBGame.cFactionalRestrictionVolume
// 0x0014 (0x028C - 0x0278)
class AcFactionalRestrictionVolume : public AcAPBVolume
{
public:
	struct FEnumeratedName                             m_eFactionRestriction;                            		// 0x0278 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    m_pSDDFactionRestrictionInfo;                     		// 0x0288 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cFactionalRestrictionVolume" );

		return pClassPointer;
	};

	struct FLinearColor GetColour ( );
	void eventEncroachedBy ( class AActor* Other );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void EncroachedByNative ( class AActor* Other );
	void BumpNative ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void SetAPBCollision ( struct FsAPBCollision newAPBCollision );
};

UClass* AcFactionalRestrictionVolume::pClassPointer = NULL;

// Class APBGame.cFlatTexturedQuadComponent
// 0x000C (0x01E4 - 0x01D8)
class UcFlatTexturedQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  m_Texture;                                        		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                m_nWidth;                                         		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                m_nLength;                                        		// 0x01E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cFlatTexturedQuadComponent" );

		return pClassPointer;
	};

};

UClass* UcFlatTexturedQuadComponent::pClassPointer = NULL;

// Class APBGame.cLCSpawnBlockingVolume
// 0x0000 (0x0278 - 0x0278)
class AcLCSpawnBlockingVolume : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCSpawnBlockingVolume" );

		return pClassPointer;
	};

	void SetAPBCollision ( struct FsAPBCollision newAPBCollision );
};

UClass* AcLCSpawnBlockingVolume::pClassPointer = NULL;

// Class APBGame.cMarketplaceZone
// 0x0004 (0x027C - 0x0278)
class AcMarketplaceZone : public AcAPBTriggerVolume
{
public:
	int                                                m_nHUDMarkerID;                                   		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cMarketplaceZone" );

		return pClassPointer;
	};

	void TermHUDMarker ( );
	void InitHUDMarker ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AcMarketplaceZone::pClassPointer = NULL;

// Class APBGame.cModalInteractionTriggerVolume
// 0x0010 (0x0288 - 0x0278)
class AcModalInteractionTriggerVolume : public AcAPBTriggerVolume
{
public:
	TArray< class AcAPBPlayerReplicationInfo* >        m_PRIs;                                           		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUIScene*                                    m_UIScene;                                        		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cModalInteractionTriggerVolume" );

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AcModalInteractionTriggerVolume::pClassPointer = NULL;

// Class APBGame.cOutOfBoundsVolume
// 0x0000 (0x0278 - 0x0278)
class AcOutOfBoundsVolume : public AcAPBTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cOutOfBoundsVolume" );

		return pClassPointer;
	};

	struct FLinearColor GetColour ( );
	void TouchNative ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AcOutOfBoundsVolume::pClassPointer = NULL;

// Class APBGame.cPlayerCharacterMissionSpawnZone
// 0x0001 (0x0281 - 0x0280)
class AcPlayerCharacterMissionSpawnZone : public AcSpawnVolume
{
public:
	unsigned char                                      m_eMissionSide;                                   		// 0x0280 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerCharacterMissionSpawnZone" );

		return pClassPointer;
	};

	struct FLinearColor GetColour ( );
	unsigned char RetMissionSide ( );
};

UClass* AcPlayerCharacterMissionSpawnZone::pClassPointer = NULL;

// Class APBGame.cPlayerCharacterSpawnDirection
// 0x0000 (0x023C - 0x023C)
class AcPlayerCharacterSpawnDirection : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerCharacterSpawnDirection" );

		return pClassPointer;
	};

};

UClass* AcPlayerCharacterSpawnDirection::pClassPointer = NULL;

// Class APBGame.cTaskItemSpawnZone
// 0x0000 (0x0278 - 0x0278)
class AcTaskItemSpawnZone : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskItemSpawnZone" );

		return pClassPointer;
	};

};

UClass* AcTaskItemSpawnZone::pClassPointer = NULL;

// Class APBGame.cVehicleBlockingVolume
// 0x0000 (0x0278 - 0x0278)
class AcVehicleBlockingVolume : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleBlockingVolume" );

		return pClassPointer;
	};

	void SetAPBCollision ( struct FsAPBCollision newAPBCollision );
};

UClass* AcVehicleBlockingVolume::pClassPointer = NULL;

// Class APBGame.cVehicleRepairTrigger
// 0x0020 (0x0298 - 0x0278)
class AcVehicleRepairTrigger : public AcAPBTriggerVolume
{
public:
	struct FPointer                                    VfTable_IiVehicleRepairer;                        		// 0x0278 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FtRepairOperation >                 m_aRepairOperations;                              		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAPBVehicleBase* >                  m_aContainedVehicles;                             		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nHUDMarkerID;                                   		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleRepairTrigger" );

		return pClassPointer;
	};

	void NotifyUnTouch ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void NotifyTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void TermHUDMarker ( );
	void InitHUDMarker ( );
	void OnRepairCancelled ( class UiRepairableVehicle* Vehicle );
	void OnRepairCompleted ( class UiRepairableVehicle* Vehicle );
	void UpdateRepairOperations ( float fDeltaTime );
	bool IsCurrentlyRepairing ( class UiRepairableVehicle* Vehicle );
	void OnRepairAttributesModified ( class UiRepairableVehicle* Vehicle );
	void EndRepair ( class UiRepairableVehicle* Vehicle, unsigned long bCancel );
	bool BeginRepair ( class UiRepairableVehicle* Vehicle, class AcAPBPlayerController* payingPlayer );
	bool CanBeginRepair ( class UiRepairableVehicle* Vehicle, class AcAPBPlayerController* payingPlayer );
};

UClass* AcVehicleRepairTrigger::pClassPointer = NULL;

// Class APBGame.cDistrictBlock
// 0x0048 (0x02C0 - 0x0278)
class AcDistrictBlock : public AcAPBVolume
{
public:
	struct FEnumeratedName                             m_eDistrictBlockName;                             		// 0x0278 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTaskTargetPool >                   m_TaskTargetPools;                                		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class URWTechNode* >                       m_LCSpawnDestroyNodes;                            		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    m_DistrictBlockDistances;                         		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nDistrictBlockArrayIndex;                       		// 0x02AC (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pSddDistrictBlock;                              		// 0x02B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      m_RouteControlElementCounts;                      		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDistrictBlock" );

		return pClassPointer;
	};

	bool IsDefaultObject ( class UObject* obj );
	bool AddPotentialTaskTarget ( class AActor* Actor, unsigned long bStrictTargetValidation, unsigned long bIgnoreEncompassCheck );
	void SetDistrictBlockArrayIndex ( int I );
	void ResetMapFeatureCounts ( );
};

UClass* AcDistrictBlock::pClassPointer = NULL;

// Class APBGame.cInteractiveDynamicSMActor
// 0x0010 (0x0284 - 0x0274)
class AcInteractiveDynamicSMActor : public ADynamicSMActor
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0274 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0278 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fInfoDisplayMaxDist;                            		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHeightOffset;                                  		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cInteractiveDynamicSMActor" );

		return pClassPointer;
	};

	void PostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	float RetHeight ( );
	void GetDebugText ( struct FString* s1, struct FString* s2, struct FString* s3 );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
};

UClass* AcInteractiveDynamicSMActor::pClassPointer = NULL;

// Class APBGame.cCheckpoint
// 0x00A4 (0x02E0 - 0x023C)
class AcCheckpoint : public AActor
{
public:
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FEnumeratedName                             m_eCheckpointType;                                		// 0x0244 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eTerritoryControlState;                         		// 0x0254 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x0255 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class AActor* >                            m_aActorsNewlyEntered;                            		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtContainedPlayerInfo >             m_aMissionPlayersContained;                       		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAPBVehicleBase* >                  m_aContainedVehicleList;                          		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAPBPlayerController* >             m_aPlayersCompletedObjective;                     		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtCheckpointPlayerInfo >            m_aPendingPlayers;                                		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcTaskItem* >                        m_aUniqueDeliveredTaskItems;                      		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAPBVehicleBase* >                  m_aDeliveredVehicles;                             		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pPendingSide;                                   		// 0x02AC (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pSddTaskTargetCheckpoint;                       		// 0x02B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskOperationRendezvous;                    		// 0x02B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskOperationItemDelivery;                  		// 0x02B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskOperationEscort;                        		// 0x02BC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskOperationTerritoryControl;              		// 0x02C0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_nRepTaskOperationID;                            		// 0x02C4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID;                           		// 0x02C8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOpposingSideID;                         		// 0x02CC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bDebugAlwaysVisible : 1;                        		// 0x02D0 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __NotifyPlayerEvent__Delegate;                    		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCheckpoint" );

		return pClassPointer;
	};

	void SetAlwaysVisible ( unsigned long bAlwaysVisible );
	void UpdateContainedVehicles ( );
	void NotifyActorUnTouch ( class AActor* Other );
	void NotifyActorTouch ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	void NotifyPlayerEventNative ( int nMessage, int nParam, class AActor* Emitter );
	void NotifyPlayerEvent ( int nMessage, int nParam, class AActor* Emitter );
	void eventSetInitialState ( );
	void eventCallSuperReplicated ( struct FName VarName );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcCheckpoint::pClassPointer = NULL;

// Class APBGame.cPlaceholderLocator
// 0x001C (0x025C - 0x0240)
class AcPlaceholderLocator : public AStaticMeshActor
{
public:
	int                                                m_nUID;                                           		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInfoDisplayMaxDist;                            		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_InfoDisplayColour;                              		// 0x0248 (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          m_CylinderComponent;                              		// 0x024C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_FlashingMaterialInst;                           		// 0x0250 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          m_DefaultMaterial;                                		// 0x0254 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          m_FlashingMaterial;                               		// 0x0258 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlaceholderLocator" );

		return pClassPointer;
	};

	void PostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	struct FString GetDisplayName ( );
	float GetCollisionHeight ( );
	float GetCollisionRadius ( );
	void eventSetMaterialNormal ( );
	void eventSetMaterialDim ( );
	void eventSetMaterialFlashing ( );
	void PreBeginPlay ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void SetUID ( int Uid );
	int GetUID ( );
};

UClass* AcPlaceholderLocator::pClassPointer = NULL;

// Class APBGame.cPlaceholderBlockingLocator
// 0x0000 (0x025C - 0x025C)
class AcPlaceholderBlockingLocator : public AcPlaceholderLocator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlaceholderBlockingLocator" );

		return pClassPointer;
	};

};

UClass* AcPlaceholderBlockingLocator::pClassPointer = NULL;

// Class APBGame.cStaticCrimeTarget
// 0x0024 (0x0280 - 0x025C)
class AcStaticCrimeTarget : public AcPlaceholderBlockingLocator
{
public:
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x025C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      m_eCrimeTargetType;                               		// 0x0260 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x0261 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x0264 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nRepTaskOperationID;                            		// 0x0268 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepBombSetLevel;                               		// 0x026C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bRepBombExploded : 1;                           		// 0x0270 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bRepBombExploded_Initial : 1;                   		// 0x0270 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID;                           		// 0x0274 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID_Initial;                   		// 0x0278 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOpposingSideID;                         		// 0x027C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStaticCrimeTarget" );

		return pClassPointer;
	};

	struct FString GetDisplayName ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	unsigned char GetCrimeTargetTypeEnvironmental ( );
	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	void eventCallSuperReplicated ( struct FName VarName );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcStaticCrimeTarget::pClassPointer = NULL;

// Class APBGame.cAmmoDepotComponent
// 0x0030 (0x0089 - 0x0059)
class UcAmmoDepotComponent : public UActorComponent
{
public:
	struct FPointer                                    VfTable_IiAmmoSupplier;                           		// 0x005C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FtResupplyOperation >               m_aResupplyOperations;                            		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtPendingResupplyInfo >             m_aPendingResupplyOperations;                     		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAPBPlayerController* >             m_aInventoryUsers;                                		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_HUDMarkerID;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eFaction;                                       		// 0x0088 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAmmoDepotComponent" );

		return pClassPointer;
	};

	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
};

UClass* UcAmmoDepotComponent::pClassPointer = NULL;

// Class APBGame.cAmmoVendingMachine
// 0x0010 (0x0294 - 0x0284)
class AcAmmoVendingMachine : public AcInteractiveDynamicSMActor
{
public:
	struct FPointer                                    VfTable_IiAmmoSupplier;                           		// 0x0284 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      m_eFaction;                                       		// 0x0288 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x028C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nHUDMarkerID;                                   		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAmmoVendingMachine" );

		return pClassPointer;
	};

	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
	void TermHUDMarker ( );
	void InitHUDMarker ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
};

UClass* AcAmmoVendingMachine::pClassPointer = NULL;

// Class APBGame.cItemCustomisationInfo
// 0x0020 (0x025C - 0x023C)
class AcItemCustomisationInfo : public AReplicationInfo
{
public:
	struct FGuid                                       m_ItemID;                                         		// 0x023C (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FPointer                                    m_pOwner;                                         		// 0x024C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FScriptDelegate                             ___OnDataChanged__Delegate;                       		// 0x0250 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemCustomisationInfo" );

		return pClassPointer;
	};

	void eventSetOnDataChanged ( struct FScriptDelegate Delegate );
	void _OnDataChanged ( class AActor* pItemCustomisationInfo );
	void OnDataChanged ( );
};

UClass* AcItemCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cBlobCustomisationInfo
// 0x0018 (0x0274 - 0x025C)
class AcBlobCustomisationInfo : public AcItemCustomisationInfo
{
public:
	int                                                m_nUsedBytes;                                     		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nVersion;                                       		// 0x0260 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sUserSpecifiedName;                             		// 0x0264 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct Fdword                                      m_nDataCRC;                                       		// 0x0270 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBlobCustomisationInfo" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnDataChanged ( );
};

UClass* AcBlobCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cClothingCustomisationInfo
// 0x0E00 (0x1074 - 0x0274)
class AcClothingCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x0274 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x0374 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x0474 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x0574 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x0674 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x0774 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x0874 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x0974 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_09;                                       		// 0x0A74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk;                                          		// 0x0B74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk01;                                        		// 0x0C74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk02;                                        		// 0x0D74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk03;                                        		// 0x0E74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk04;                                        		// 0x0F74 (0x0100) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cClothingCustomisationInfo" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcClothingCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cDisplayPointTokenCustomisationInfo
// 0x0010 (0x026C - 0x025C)
class AcDisplayPointTokenCustomisationInfo : public AcItemCustomisationInfo
{
public:
	struct FGuid                                       m_Guid;                                           		// 0x025C (0x0010) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDisplayPointTokenCustomisationInfo" );

		return pClassPointer;
	};

};

UClass* AcDisplayPointTokenCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cItem
// 0x003D (0x0279 - 0x023C)
class AcItem : public AActor
{
public:
	int                                                m_eInventoryItemType;                             		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcHoldableItemManager*                       m_OwningManager;                                  		// 0x0240 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_Name;                                           		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCost;                                          		// 0x0250 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEquipInVehicle : 1;                            		// 0x0254 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsInitialised : 1;                             		// 0x0254 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FEncumbrance                                m_Encumbrance;                                    		// 0x0258 (0x000C) [0x0000000000000000]              
	int                                                m_eItemAttachmentVisual;                          		// 0x0264 (0x0004) [0x0000000000000000]              
	struct FGuid                                       m_ItemID;                                         		// 0x0268 (0x0010) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eItemState;                                     		// 0x0278 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItem" );

		return pClassPointer;
	};

	void eventClientUnequipItem ( );
	void eventClientEquipItem ( unsigned long bImmediate );
	void StopFire ( );
	void StartFire ( class AActor* Target );
	void ReplicatedEventNative ( struct FName VarName );
	void GetWeaponAttachmentVisualAttributes ( int Id, struct FWeaponAttachmentVisual* attrs );
	void GetItemAttachmentVisualAttributes ( int Id, struct FItemAttachmentVisual* attrs );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcItem::pClassPointer = NULL;

// Class APBGame.cEquipableTaskItem
// 0x0023 (0x029C - 0x0279)
class AcEquipableTaskItem : public AcItem
{
public:
	class AcTaskItem*                                  m_TaskItem;                                       		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                m_nVariety;                                       		// 0x0280 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FPointer                                    m_pSddTaskItemSubCategory;                        		// 0x0284 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemCategory;                           		// 0x0288 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemSize;                               		// 0x028C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddItemAttachmentVisual;                       		// 0x0290 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemVariety;                            		// 0x0294 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemVisual;                             		// 0x0298 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEquipableTaskItem" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void TaskItemChanged ( int nVariety );
	unsigned char RetTaskItemSize ( );
};

UClass* AcEquipableTaskItem::pClassPointer = NULL;

// Class APBGame.cEquipment
// 0x0000 (0x0279 - 0x0279)
class AcEquipment : public AcItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEquipment" );

		return pClassPointer;
	};

};

UClass* AcEquipment::pClassPointer = NULL;

// Class APBGame.cHoldableItemManager
// 0x006C (0x02A8 - 0x023C)
class AcHoldableItemManager : public AActor
{
public:
	class AcEquipment*                                 m_CurrentEquipment;                               		// 0x023C (0x0004) [0x0000000000000000]              
	class AcWeapon*                                    m_DeployedWeapons[ 0x4 ];                         		// 0x0240 (0x0010) [0x0000000000000020]              ( CPF_Net )
	class AcWeapon*                                    m_WitnessingWeapon;                               		// 0x0250 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nSelectedWeapon;                                		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcItem*                                      m_PreviousItem;                                   		// 0x0258 (0x0004) [0x0000000000000000]              
	class AcItem*                                      m_PrevHeldItem;                                   		// 0x025C (0x0004) [0x0000000000000000]              
	class AcItem*                                      m_CurrentItem;                                    		// 0x0260 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcItem*                                      m_PendingItem;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	class AcEquipableTaskItem*                         m_HeldTaskItem;                                   		// 0x0268 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      m_bSwitchingItems : 1;                            		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bClientPendingActiveTransition : 1;             		// 0x026C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bClientAttemptingReload : 1;                    		// 0x026C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bClientThrowingGrenade : 1;                     		// 0x026C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bClientThrowingGrenadeStopFire : 1;             		// 0x026C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bDuringTaskItemPickup : 1;                      		// 0x026C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bIsInterrupted : 1;                             		// 0x026C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bIsImmediateSwitch : 1;                         		// 0x026C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bSpawnedOnClient : 1;                           		// 0x026C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bNotifiedServerSpawned : 1;                     		// 0x026C (0x0004) [0x0000000000000000] [0x00000200] 
	TArray< class AcTaskItem* >                        m_SmallTaskItems;                                 		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nNumSmallTaskItems;                             		// 0x027C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcAPBPawn*                                   m_OwningPawn;                                     		// 0x0280 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FScriptDelegate                             __OnItemChanged__Delegate;                        		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UI_OnInventoryChanged__Delegate;                		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UI_OnInventoryChanged2__Delegate;               		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHoldableItemManager" );

		return pClassPointer;
	};

	bool PassTaskItemToPawn ( class AcAPBPawn* Pawn );
	void PassTaskItemToCargoHold ( class AcAPBVehicleBase* Vehicle );
	int RetNumGroupedTaskItems ( );
	void DropHeldTaskItem ( );
	void DropSmallTaskItems ( );
	void DropTaskItems ( );
	bool CarryHeldTaskItem ( class AcEquipableTaskItem* pHeldTaskItem, unsigned long bNoFail );
	void DebugLogInventoryContents ( );
	bool ForceUnequipImmediate ( );
	void eventClientEquipCommandFailed ( );
	void eventCallClientUnEquip ( );
	void ClientUnEquip ( );
	void eventCallServerGiftAmmo ( );
	void ServerGiftAmmo ( );
	void eventCallServerGiftAllAmmo ( );
	void ServerGiftAllAmmo ( );
	void eventCallServerSelectUsable ( int nSlot );
	void ServerSelectUsable ( int nSlot );
	void eventClientReloadFailed ( );
	void eventCallServerReloadWeapon ( );
	void ServerReloadWeapon ( );
	void eventCallServerSelectNone ( );
	void ServerSelectNone ( );
	void eventServerSelectWeapon ( unsigned char eSlot );
	void eventServerNotifySpawnedOnClient ( );
	void eventPreBeginPlay ( );
	void ReEquipCurrentWeapon ( );
	void SwitchToPreviousWeapon ( unsigned long bInstant );
	void SwitchToBestWeapon ( );
	void SwitchToBestWeaponWithAmmo ( );
	void eventClientEndInterrupt ( );
	void eventClientStartInterrupt ( unsigned long bInterruptAll );
	void EndInterrupt ( );
	void StartInterrupt ( unsigned long bInterruptAll, unsigned long bResetMarksManShipMode );
	void EquipTimerCallback ( );
	void UnEquipTimerCallback ( );
	bool IsSwitchingItem ( );
	void StopUsingEquipment ( );
	class AcWeapon* RetCurrentWeapon ( );
	class AcWeapon* RetDeployedWeapon ( unsigned char eSlot );
	class AcEquipableTaskItem* RetVisibleHeldTaskItem ( );
	int RetSelectedWeapon ( );
	class AcEquipableTaskItem* RetHeldTaskItem ( );
	class AcItem* RetCurrentItem ( );
	void eventUI_SetOnInventoryChanged2 ( struct FScriptDelegate Delegate );
	void eventUI_SetOnInventoryChanged ( struct FScriptDelegate Delegate );
	void eventCallOnItemChangedDelegate ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetupWitnessingWeapon ( );
	class AcAPBPlayerController* GetOwningController ( );
	class AcAPBPawn* GetOwningPawn ( );
	void UI_OnInventoryChanged2 ( );
	void UI_OnInventoryChanged ( );
	void OnItemChanged ( );
};

UClass* AcHoldableItemManager::pClassPointer = NULL;

// Class APBGame.cRewardInfo
// 0x0004 (0x0260 - 0x025C)
class AcRewardInfo : public AcItemCustomisationInfo
{
public:
	int                                                m_eRewardPackage;                                 		// 0x025C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cRewardInfo" );

		return pClassPointer;
	};

};

UClass* AcRewardInfo::pClassPointer = NULL;

// Class APBGame.cLeagueRewardInfo
// 0x001C (0x027C - 0x0260)
class AcLeagueRewardInfo : public AcRewardInfo
{
public:
	class UcLeague*                                    m_league;                                         		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                m_nEndTime;                                       		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eType;                                          		// 0x0268 (0x0001) [0x0000000000000000]              
	int                                                m_nNumber;                                        		// 0x026C (0x0004) [0x0000000000000000]              
	int                                                m_nTied;                                          		// 0x0270 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bBroken : 1;                                    		// 0x0274 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nDistrictLeagueID;                              		// 0x0278 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLeagueRewardInfo" );

		return pClassPointer;
	};

};

UClass* AcLeagueRewardInfo::pClassPointer = NULL;

// Class APBGame.cOutfitCustomisationInfo
// 0x0400 (0x0674 - 0x0274)
class AcOutfitCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x0274 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x0374 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x0474 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x0574 (0x0100) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cOutfitCustomisationInfo" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcOutfitCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cRedeemableRewardInfo
// 0x0004 (0x0264 - 0x0260)
class AcRedeemableRewardInfo : public AcRewardInfo
{
public:
	int                                                m_eRedeemableReward;                              		// 0x0260 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cRedeemableRewardInfo" );

		return pClassPointer;
	};

};

UClass* AcRedeemableRewardInfo::pClassPointer = NULL;

// Class APBGame.cStorageInventory
// 0x7364 (0x75A0 - 0x023C)
class AcStorageInventory : public AReplicationInfo
{
public:
	struct FPointer                                    VfTable_IiAmmoContainer;                          		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcObservers*                                 m_aObservers;                                     		// 0x0240 (0x0004) [0x0000000000000000]              
	struct FInventoryItem                              m_aCharacterItems[ 0x2 ];                         		// 0x0244 (0x0048) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aClothingItems[ 0x28 ];                         		// 0x028C (0x05A0) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aDisplayPointTokenItems[ 0x64 ];                		// 0x082C (0x0E10) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aDummyItems[ 0x5 ];                             		// 0x163C (0x00B4) [0x0000000000000000]              
	struct FInventoryItem                              m_aMarketplaceCashItems[ 0x2 ];                   		// 0x16F0 (0x0048) [0x0000000000000000]              
	struct FInventoryItem                              m_aEquipmentItems[ 0x64 ];                        		// 0x1738 (0x0E10) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aFnModItems[ 0x64 ];                            		// 0x2548 (0x0E10) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aInstrumentItems[ 0x2 ];                        		// 0x3358 (0x0048) [0x0000000000000000]              
	struct FInventoryItem                              m_aOutfitItems[ 0x8 ];                            		// 0x33A0 (0x0120) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aSymbolItems[ 0x28 ];                           		// 0x34C0 (0x05A0) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aThemeItems[ 0xA ];                             		// 0x3A60 (0x0168) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aSongItems[ 0xA ];                              		// 0x3BC8 (0x0168) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aUnlockItems[ 0x2 ];                            		// 0x3D30 (0x0048) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aUsableTokenItems[ 0x64 ];                      		// 0x3D78 (0x0E10) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aVehicleItems[ 0xA ];                           		// 0x4B88 (0x0168) [0x0000000000000020]              ( CPF_Net )
	struct FInventoryItem                              m_aWeaponItems[ 0x64 ];                           		// 0x4CF0 (0x0E10) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aUnlockItemBits[ 0xFA ];                        		// 0x5B00 (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aUnlockItemBits01[ 0xFA ];                      		// 0x5BFA (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aUnlockItemBits02[ 0xFA ];                      		// 0x5CF4 (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aUnlockItemBits03[ 0xFA ];                      		// 0x5DEE (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aExaminedItemBits[ 0xFA ];                      		// 0x5EE8 (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aExaminedItemBits01[ 0xFA ];                    		// 0x5FE2 (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aExaminedItemBits02[ 0xFA ];                    		// 0x60DC (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aExaminedItemBits03[ 0xFA ];                    		// 0x61D6 (0x00FA) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aUsableTokenCharges[ 0x64 ];                    		// 0x62D0 (0x0064) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aPurchasedUnlocksBits[ 0x3E8 ];                 		// 0x6334 (0x03E8) [0x0000000000000000]              
	unsigned char                                      m_aAvailabilities[ 0x64 ];                        		// 0x671C (0x0064) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_aStackingSlots[ 0x64 ];                         		// 0x6780 (0x0064) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      m_bLoadingInventory : 1;                          		// 0x67E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bLockedDuringTransaction : 1;                   		// 0x67E4 (0x0004) [0x0000000000000000] [0x00000002] 
	class AcItemCustomisationInfo*                     m_aClothingCustomisations[ 0x28 ];                		// 0x67E8 (0x00A0) [0x0000000000000020]              ( CPF_Net )
	class AcItemCustomisationInfo*                     m_aThemeCustomisations[ 0xA ];                    		// 0x6888 (0x0028) [0x0000000000000020]              ( CPF_Net )
	class AcItemCustomisationInfo*                     m_aSongCustomisations[ 0xA ];                     		// 0x68B0 (0x0028) [0x0000000000000020]              ( CPF_Net )
	class AcItemCustomisationInfo*                     m_aOutfitCustomisations[ 0x8 ];                   		// 0x68D8 (0x0020) [0x0000000000000020]              ( CPF_Net )
	class AcItemCustomisationInfo*                     m_aDisplayPointTokenCustomisations[ 0x64 ];       		// 0x68F8 (0x0190) [0x0000000000000020]              ( CPF_Net )
	class AcItemCustomisationInfo*                     m_aDummyCustomisations[ 0x5 ];                    		// 0x6A88 (0x0014) [0x0000000000000000]              
	class AcItemCustomisationInfo*                     m_aSymbolCustomisations[ 0x28 ];                  		// 0x6A9C (0x00A0) [0x0000000000000020]              ( CPF_Net )
	class AcItemCustomisationInfo*                     m_aVehicleCustomisations[ 0xA ];                  		// 0x6B3C (0x0028) [0x0000000000000020]              ( CPF_Net )
	class AcItemCustomisationInfo*                     m_aWeaponCustomisations[ 0x64 ];                  		// 0x6B64 (0x0190) [0x0000000000000020]              ( CPF_Net )
	class UcCompressedAssetCustomisation*              m_aSongCustomisationsAssets[ 0xA ];               		// 0x6CF4 (0x0028) [0x0000000000000000]              
	int                                                m_nLastAvailabilityCalculationTime;               		// 0x6D1C (0x0004) [0x0000000000000000]              
	float                                              m_fNextAvailabilityReplenishTimestamp;            		// 0x6D20 (0x0004) [0x0000000000000000]              
	struct FInventoryItem                              m_aNone;                                          		// 0x6D24 (0x0024) [0x0000000000000000]              
	int                                                m_nStorageVersion;                                		// 0x6D48 (0x0004) [0x0000000000000000]              
	int                                                m_nDeploymentVersion;                             		// 0x6D4C (0x0004) [0x0000000000000000]              
	struct FGuid                                       m_aDeployedEquipment[ 0x5 ];                      		// 0x6D50 (0x0050) [0x0000000000000020]              ( CPF_Net )
	struct FGuid                                       m_aDeployedSymbols[ 0x5 ];                        		// 0x6DA0 (0x0050) [0x0000000000000020]              ( CPF_Net )
	struct FDeployedUsable                             m_aDeployedCharacterUsables[ 0x5 ];               		// 0x6DF0 (0x00F0) [0x0000000000000020]              ( CPF_Net )
	struct FDeployedUsable                             m_aDeployedVehicleUsables[ 0x5 ];                 		// 0x6EE0 (0x00F0) [0x0000000000000020]              ( CPF_Net )
	struct FGuid                                       m_nDeployedVehicle;                               		// 0x6FD0 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FGuid                                       m_nDeployedOutfit;                                		// 0x6FE0 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FGuid                                       m_nDeployedTheme;                                 		// 0x6FF0 (0x0010) [0x0000000000000020]              ( CPF_Net )
	int                                                m_aFnModsCharacter[ 0x4 ];                        		// 0x7000 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FReuseGroupData                             m_aReuseGroups[ 0xFA ];                           		// 0x7010 (0x03E8) [0x0000000000000020]              ( CPF_Net )
	int                                                m_AmmoPools[ 0x14 ];                              		// 0x73F8 (0x0050) [0x0000000000000020]              ( CPF_Net )
	int                                                m_AmmoTotals[ 0x14 ];                             		// 0x7448 (0x0050) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nGlobalCooldownTimeBegin;                       		// 0x7498 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nGlobalCooldownTimeEnd;                         		// 0x749C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FCustomColours                              m_CustomColours;                                  		// 0x74A0 (0x0060) [0x0000000000000020]              ( CPF_Net )
	struct FPointer                                    m_pCustomisationLimiter;                          		// 0x7500 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FCustomisationLimiterReplicationData        m_CustomisationLimiterRepData[ 0x9 ];             		// 0x7504 (0x0048) [0x0000000000000020]              ( CPF_Net )
	float                                              m_CustomisationLimiterClientReplenishTime[ 0x9 ]; 		// 0x754C (0x0024) [0x0000000000000000]              
	struct FScriptDelegate                             __UI_OnInventoryChanged__Delegate;                		// 0x7570 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UI_OnInventoryChanged2__Delegate;               		// 0x757C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UI_OnDeploymentChanged__Delegate;               		// 0x7588 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UI_OnDeploymentChanged2__Delegate;              		// 0x7594 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStorageInventory" );

		return pClassPointer;
	};

	void SetServerCustomisationLimiterUse ( unsigned char InventoryItemCategoryLimitedToUse );
	void DestroyedNative ( );
	void eventDestroyed ( );
	int WithdrawAmmo ( int eCategory, int nAmount );
	int StoreAmmo ( int eCategory, int eTarget, int nAmount );
	bool IsAmmoCategorySupported ( int eCategory );
	bool IsEmpty ( int eCategory );
	bool IsFull ( int eCategory );
	int RetCapacity ( int eCategory );
	int RetAmmoAmount ( int eCategory );
	void OnClientCustomisationLimiterRepDataChanged ( int nElement );
	void eventReplicatedArrayEvent ( struct FName VarName, int nElement );
	void eventReplicatedEvent ( struct FName VarName );
	void eventUI_HUD_NotifyWeaponsChanged ( );
	void eventUI_HUD_NotifyDeploymentChanged ( );
	class UcObservers* GetObservers ( );
	void UI_OnDeploymentChanged2 ( );
	void UI_OnDeploymentChanged ( );
	void UI_OnInventoryChanged2 ( );
	void UI_OnInventoryChanged ( );
};

UClass* AcStorageInventory::pClassPointer = NULL;

// Class APBGame.cSymbolCustomisationInfo
// 0x0800 (0x0A74 - 0x0274)
class AcSymbolCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x0274 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x0374 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x0474 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x0574 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x0674 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x0774 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x0874 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x0974 (0x0100) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSymbolCustomisationInfo" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcSymbolCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cThemeCustomisationInfo
// 0x0A10 (0x0C84 - 0x0274)
class AcThemeCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x0274 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x0374 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x0474 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x0574 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x0674 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x0774 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x0874 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x0974 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_09;                                       		// 0x0A74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk;                                          		// 0x0B74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FGuid                                       m_ThemeGuid;                                      		// 0x0C74 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cThemeCustomisationInfo" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnDataChanged ( );
};

UClass* AcThemeCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cVehicleCustomisationInfo
// 0x0C10 (0x0E84 - 0x0274)
class AcVehicleCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x0274 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x0374 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x0474 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x0574 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x0674 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x0774 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x0874 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x0974 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk_09;                                       		// 0x0A74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk;                                          		// 0x0B74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk01;                                        		// 0x0C74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	struct FBlobChunk                                  m_Chunk02;                                        		// 0x0D74 (0x0100) [0x0000000000000020]              ( CPF_Net )
	int                                                m_aFnMods[ 0x4 ];                                 		// 0x0E74 (0x0010) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleCustomisationInfo" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcVehicleCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cWeaponCustomisationInfo
// 0x000C (0x0268 - 0x025C)
class AcWeaponCustomisationInfo : public AcItemCustomisationInfo
{
public:
	int                                                m_aFnMods[ 0x3 ];                                 		// 0x025C (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWeaponCustomisationInfo" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcWeaponCustomisationInfo::pClassPointer = NULL;

// Class APBGame.cAPBCheatManager
// 0x0000 (0x0040 - 0x0040)
class UcAPBCheatManager : public UCheatManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCheatManager" );

		return pClassPointer;
	};

	void DumpCAMAssetList ( );
	void serverSpraryAllGraffiti ( );
	void SprayAllGraffiti ( );
	void SendEvent ( class UClass* EventClass, struct FString sLinkDesc );
	void SetSpeed ( float F );
	void Kill ( struct FString sNameToKill );
	void Summon ( struct FString sNameToSpawn, float fSpeed, float fDistance, int nX, int nY, int nZ );
};

UClass* UcAPBCheatManager::pClassPointer = NULL;

// Class APBGame.cHostingPlayerController
// 0x0098 (0x061C - 0x0584)
class AcHostingPlayerController : public APlayerController
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x0584 (0x0004) [0x0000000000000000]              
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0588 (0x0004) [0x0000000000000000]              
	struct FQWord                                      m_nSessionUID;                                    		// 0x058C (0x0008) [0x0000000000000000]              
	int                                                m_nAccountUID;                                    		// 0x0594 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nAccountType;                                   		// 0x0598 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nClanUID;                                       		// 0x059C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCash;                                          		// 0x05A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nPoints;                                        		// 0x05A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCharacterUID;                                  		// 0x05A8 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eFaction;                                       		// 0x05AC (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eGender;                                        		// 0x05AD (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eChatState;                                     		// 0x05AE (0x0001) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sClanName;                                      		// 0x05B0 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	float                                              m_fSubscriptionTimeoutTimeStamp;                  		// 0x05BC (0x0004) [0x0000000000000000]              
	struct FDatabaseTimestamp                          m_DatabasePendingDate;                            		// 0x05C0 (0x001C) [0x0000000000000000]              
	int                                                m_nDatabasePendingCount;                          		// 0x05DC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsReceivingMailMessage : 1;                    		// 0x05E0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     m_sReceivingMailMessage_To;                       		// 0x05E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sReceivingMailMessage_Subject;                  		// 0x05F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGuid                                       m_ReceivingMailMessage_ItemGuid;                  		// 0x05FC (0x0010) [0x0000000000000000]              
	int                                                m_nReceivingMailMessage_Cash;                     		// 0x060C (0x0004) [0x0000000000000000]              
	struct FString                                     m_sReceivingMailMessage_Body;                     		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHostingPlayerController" );

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void eventReceive_GC2DS_CLIENT_SYSTEM_SPEC ( struct FString sSystemSpec );
	void SendClientSpecDataToDistrictServer ( );
	void OnLfgStateChanged ( );
	void OnGroupPublicStateChanged ( );
	void OnChatStateChanged ( );
	void OnPointsChanged ( );
	void OnCashChanged ( );
	bool SetPointsAmount ( int Amount );
	int RetPointsAmount ( );
	bool SetCashAmount ( int Amount );
	int RetCashAmount ( );
	int RetDatabasePendingCount ( );
	void SetChatState ( unsigned char eChatState );
	unsigned char RetFaction ( );
	void SetClanName ( struct FString sClanName );
	bool SetClanUID ( int nClanUID );
	void SetCharacterUID ( int nCharacterUID );
	int RetCharacterUID ( );
	void SetAccountType ( int nAccountType );
	int RetAccountType ( );
	void SetAccountUID ( int nAccountUID );
	int RetAccountUID ( );
	void SetSessionUID ( struct FQWord nSessionUID );
	struct FQWord RetSessionUID ( );
	void Send_DS2GC_KICK ( int nReason, struct FString sInformation );
	int GetConnCharacterUID ( );
	bool GetConnGM ( );
	int GetConnAccountType ( );
	int GetConnAccountUID ( );
	struct FQWord GetConnSessionUID ( );
	void InitServer ( );
	void InitClient ( );
	void Receive_DS2GC_DISTRICT_SHUTDOWN_NOTIFY ( int nMinutes );
	void eventSend_DS2GC_DISTRICT_SHUTDOWN_NOTIFY ( int nMinutes );
	void Receive_DS2GC_MAIL_SYSTEM ( );
	void eventSend_DS2GC_MAIL_SYSTEM ( );
	void Receive_DS2GC_ANS_MAIL_DETACH_ITEM ( int nReturnCode, int nMailUID, int nRemainingTime );
	void eventSend_DS2GC_ANS_MAIL_DETACH_ITEM ( int nReturnCode, int nMailUID, int nRemainingTime );
	void Receive_GC2DS_ASK_MAIL_DETACH_ITEM ( int nMailUID, int nSelectedChildReward );
	void Send_GC2DS_ASK_MAIL_DETACH_ITEM ( int nMailUID, int nSelectedChildReward );
	void Receive_DS2GC_ANS_MAIL_DETACH_POINTS ( int nReturnCode, int nMailUID, int nRemainingTime );
	void eventSend_DS2GC_ANS_MAIL_DETACH_POINTS ( int nReturnCode, int nMailUID, int nRemainingTime );
	void Receive_GC2DS_ASK_MAIL_DETACH_POINTS ( int nMailUID );
	void Send_GC2DS_ASK_MAIL_DETACH_POINTS ( int nMailUID );
	void Receive_DS2GC_ANS_MAIL_DETACH_CASH ( int nReturnCode, int nMailUID, int nRemainingTime );
	void eventSend_DS2GC_ANS_MAIL_DETACH_CASH ( int nReturnCode, int nMailUID, int nRemainingTime );
	void Receive_GC2DS_ASK_MAIL_DETACH_CASH ( int nMailUID );
	void Send_GC2DS_ASK_MAIL_DETACH_CASH ( int nMailUID );
	void Receive_DS2GC_ANS_MAIL_SEND ( int nReturnCode );
	void eventSend_DS2GC_ANS_MAIL_SEND ( int nReturnCode );
	void Receive_GC2DS_ASK_MAIL_SEND_BODY_PART ( struct FString sBody, unsigned long bEnd );
	void Receive_GC2DS_ASK_MAIL_SEND_HEADER ( struct FString sTo, struct FString sSubject, struct FGuid nItemGuid, int nCash );
	void Send_GC2DS_ASK_MAIL_SEND ( struct FString sTo, struct FString sSubject, struct FString sBody, struct FGuid nItemGuid, int nCash );
	void Receive_DS2GC_ANS_MARKETPLACE_AUCTION_BID ( int nReturnCode, int eAuctionType, int nAuctionUID );
	void eventSend_DS2GC_ANS_MARKETPLACE_AUCTION_BID ( int nReturnCode, int eAuctionType, int nAuctionUID );
	void Receive_GC2DS_ASK_MARKETPLACE_AUCTION_BID ( unsigned char eAuctionType, int nAuctionUID, int nAmount );
	void Send_GC2DS_ASK_MARKETPLACE_AUCTION_BID ( unsigned char eAuctionType, int nAuctionUID, int nAmount );
	void Receive_DS2GC_ANS_MARKETPLACE_AUCTION_CREATE ( int nReturnCode, unsigned char eAuctionType );
	void eventSend_DS2GC_ANS_MARKETPLACE_AUCTION_CREATE ( int nReturnCode, unsigned char eAuctionType );
	void Receive_GC2DS_ASK_MARKETPLACE_AUCTION_CREATE ( unsigned char eAuctionType, unsigned char nFactionRestriction, struct FGuid nItemGuid, unsigned char eDuration, int nStartingBid, int nBuyout, int nCash );
	void Send_GC2DS_ASK_MARKETPLACE_AUCTION_CREATE ( unsigned char eAuctionType, unsigned char nFactionRestriction, struct FGuid nItemGuid, unsigned char eDuration, int nStartingBid, int nBuyout, int nCash );
	void Receive_DS2GC_CHAT_SYSTEM ( struct FString sMessage );
	void eventSend_DS2GC_CHAT_SYSTEM ( struct FString sMessage );
	void Receive_DS2GC_CHAT ( unsigned char eType, int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void eventSend_DS2GC_CHAT ( unsigned char eType, int nCharacterUID, unsigned long bFromGM, struct FString sMessage );
	void Receive_GC2DS_CHAT ( unsigned char eType, struct FString sMessage );
	void eventSend_GC2DS_CHAT ( unsigned char eType, struct FString sMessage );
	void Receive_DS2GC_ANS_DISTRICT_ENTER ( int nReturnCode, int nDistrictUID, int nInstanceNo );
	void Send_DS2GC_ANS_DISTRICT_ENTER ( int nReturnCode );
	void Receive_GC2DS_ASK_DISTRICT_ENTER ( );
	void Send_GC2DS_ASK_DISTRICT_ENTER ( );
	void eventDisconnect ( );
	void eventPreBeginPlay ( );
	void eventInitInputSystem ( );
	void dsdisconnect ( );
	void wsdisconnect ( );
	void lsdisconnect ( );
	void servercash ( int nCash );
	void Cash ( int nCash );
	void serversystemmessage ( struct FString sMessage );
	void SystemMessage ( struct FString sMessage );
	void FileSet ( unsigned char eSDDKey, struct FString sSection, struct FString sKey, struct FString sValue );
	void FileGet ( unsigned char eSDDKey, struct FString sSection, struct FString sKey );
	void FileSave ( unsigned char eSDDKey );
	void testname ( struct FString S, int nType );
	void ReportBug ( struct FString sSummary, struct FString sDescription );
	void leaguemyvalue ( int nLeagueUID, int nDistrictLeagueID );
	void leaguemyleagues ( int nType );
	void leagueleaders ( int nLeagueUID, int nDistrictLeagueID );
	void NameQuery ( unsigned char eNameQuery, int nCharacterUID );
	void DisplayMailInfo ( );
	void MailDelete ( int nMailNumber );
	void mailitem ( int nMailNumber );
	void MailRead ( int nMailNumber );
	void maillist ( int nPage, unsigned char eSort );
	void maildetachitem ( int nMailNumber );
	void maildetachpoints ( int nMailNumber );
	void maildetachcash ( int nMailNumber );
	void mailsend ( struct FString sTo, struct FString sSubject, struct FString sBody, struct FString sItemGUID, int nCash );
	void subscriptiontime ( );
	void displaymarketplacemybidinfo ( unsigned char eAuctionType );
	void displaymarketplacemyauctioninfo ( unsigned char eAuctionType );
	void displaymarketplaceauctioninfo ( unsigned char eAuctionType );
	void marketplacemybidlist ( unsigned char eAuctionType, int nClientPage, unsigned char eSort );
	void marketplacemyauctionlist ( unsigned char eAuctionType, int nClientPage, unsigned char eSort );
	void marketplaceauctionlist ( unsigned char eAuctionType, int nClientPage, unsigned char eSort, unsigned char eSearch, struct FString sSearch, int nCategory, int nSubcategory, int nRatingOrCashStart, int nRatingOrCashEnd );
	void marketplacesellerlist ( unsigned char eAuctionType, struct FString sSearch );
	void marketplaceauctionitem ( unsigned char eAuctionType, int nAuctionNumber );
	void MarketplaceAuctionCancel ( unsigned char eAuctionType, int nAuctionNumber );
	void marketplaceauctionbid ( unsigned char eAuctionType, int nAuctionNumber, int nAmount );
	void marketplaceauctioncreate ( unsigned char eAuctionType, unsigned char nFactionRestriction, struct FString sItemGUID, unsigned char eDuration, int nStartingBid, int nBuyout, int nCash );
	void findercharacterinfo ( struct FString sCharacterName );
	void displayignorelist ( );
	void IgnoreListRemove ( int nMemberNumber );
	void IgnoreListAdd ( struct FString sCharacterName );
	void displayfriendlist ( );
	void FriendListGetState ( );
	void FriendListRemove ( int nMemberNumber );
	void FriendListAdd ( struct FString sCharacterName );
	void DisplayClanMotd ( );
	void DisplayClanInformation ( );
	void DisplayClanBio ( );
	void displayclanrank ( int nRankNumber );
	void displayclanranks ( );
	void displayclanmemberprivatenote ( int nMemberNumber );
	void displayclanmemberpublicnote ( int nMemberNumber );
	void displayclanmemberbio ( int nMemberNumber );
	void displayclan ( );
	void ClanSetMotd ( struct FString sMotd );
	void ClanSetInformation ( struct FString sInformation );
	void ClanGetInformation ( );
	void ClanRankAssign ( int nMemberNumber, int nRankNumber );
	void ClanRankEdit ( int nRankNumber, int nPermission, struct FString sRankName );
	void ClanRankDelete ( int nRankNumber );
	void ClanRankCreate ( int nPermission, struct FString sRankName );
	void ClanMemberSetPrivateNote ( int nMemberNumber, struct FString sPrivateNote );
	void ClanMemberSetPublicNote ( int nMemberNumber, struct FString sPublicNote );
	void ClanMemberSetBio ( struct FString sBio );
	void ClanMemberGetProfile ( int nMemberNumber );
	void clanmembersgetstate ( );
	void ClanMemberGetStats ( int nMemberNumber );
	void clanmembersgetstats ( );
	void ClanSetTheme ( int nLength );
	void ClanGetTheme ( );
	void ClanSetSymbol ( int nLength );
	void ClanGetSymbol ( );
	void ClanSetBio ( struct FString sBio );
	void ClanGetBio ( );
	void ClanLeader ( int nMemberNumber );
	void ClanRemove ( int nMemberNumber );
	void ClanLeave ( );
	void clandecline ( );
	void clanaccept ( );
	void claninvite ( struct FString sCharacterName );
	void ClanDelete ( );
	void ClanCreate ( struct FString sClanName );
	void displaygroup ( );
	void GroupInfo ( struct FString sCharacterName );
	void GroupList ( int nDistrictUID, int nInstanceNo );
	void GroupState ( );
	void GroupLeader ( int nMemberNumber );
	void GroupRemove ( int nMemberNumber );
	void GroupLeave ( );
	void groupdecline ( );
	void groupaccept ( );
	void GroupInvite ( struct FString sCharacterName );
	void groupjoin ( struct FString sCharacterName );
	void groupinvitemode ( unsigned long bInvite );
	void grouppublicmode ( unsigned long bPublic );
	void groupinvitemodedefault ( unsigned long bInvite );
	void grouppublicmodedefault ( unsigned long bPublic );
	void LFG ( unsigned long bLFG );
	void DND ( struct FString sMessage );
	void AFK ( struct FString sMessage );
	void chatdistrict ( struct FString sMessage );
	void chatofficer ( struct FString sMessage );
	void chatclan ( struct FString sMessage );
	void chatgroup ( struct FString sMessage );
	void chatwhisper ( struct FString sCharacterName, struct FString sMessage );
	void chatmetagroup ( struct FString sMessage );
	void chatyell ( struct FString sMessage );
	void chatsay ( struct FString sMessage );
	void DistrictExit ( );
	void districtgroupqueuecancel ( );
	void DistrictQueueCancel ( );
	void DistrictReserveCancel ( );
	void DistrictReserveAccept ( );
	void districtgroupenter ( int nDistrictUID, int nInstanceNo, int nCharacterUID );
	void DistrictEnter ( int nDistrictUID, int nInstanceNo, int nCharacterUID );
	void displayinstances ( );
	void getinstances ( );
	void displaydistricts ( );
	void WorldQueueCancel ( );
	void WorldEnter ( int nSlotNumber );
	void CharacterInfo ( int nSlotNumber );
	void displaycharacters ( );
	void CharacterDelete ( int nSlotNumber );
	void CharacterCreate ( );
	void NameChange ( int nSlotNumber );
	void NameCheck ( struct FString sCharacterName, int nWorldUID );
	void displayworlds ( );
	void getworlds ( );
	void Logout ( );
	void Login ( struct FString sUsername, struct FString sPassword );
	int HexToInteger ( struct FString sHex );
	int FromHex ( struct FString sChar );
};

UClass* AcHostingPlayerController::pClassPointer = NULL;

// Class APBGame.cAPBPlayerControllerAnimation
// 0x0000 (0x061C - 0x061C)
class AcAPBPlayerControllerAnimation : public AcHostingPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBPlayerControllerAnimation" );

		return pClassPointer;
	};

	bool IsMoveInputIgnored ( );
	void eventLongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );
	void ServerUpdateTimeStamp ( float TimeStamp );
	void eventServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void ReplicateMove ( float DeltaTime, struct FVector newAccel, struct FRotator DeltaRot );
};

UClass* AcAPBPlayerControllerAnimation::pClassPointer = NULL;

// Class APBGame.cAPBPlayerController
// 0x06E0 (0x0CFC - 0x061C)
class AcAPBPlayerController : public AcAPBPlayerControllerAnimation
{
public:
	struct FPointer                                    VfTable_IiCustomisedActor;                        		// 0x061C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AcReplicatedHUDMarkerGroup*                  m_ReplicatedHUDMarkerGroup;                       		// 0x0620 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_iMissionsBeforeFeedback;                        		// 0x0624 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bRespawnInVehicle : 1;                          		// 0x0628 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bFlyWhileDead : 1;                              		// 0x0628 (0x0004) [0x0000000000004020] [0x00000002] ( CPF_Net | CPF_Config )
	unsigned long                                      m_bDebugOpenCustomisation : 1;                    		// 0x0628 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      m_bProtectPlayer : 1;                             		// 0x0628 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      m_bTestHitReactions : 1;                          		// 0x0628 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      m_bHideEnvironmentStreamingOnStartup : 1;         		// 0x0628 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      m_bHideCharacterStreamingOnStartup : 1;           		// 0x0628 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      m_bWaitForClosestBuildingLODOnly : 1;             		// 0x0628 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      m_bShowStreamingTransitionScreen : 1;             		// 0x0628 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      m_bRespawnAtCameraLocation : 1;                   		// 0x0628 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      m_bDuringSpawnMapDelay : 1;                       		// 0x0628 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIsShowingVehicleViewCones : 1;                   		// 0x0628 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bIsShowingVehicleSockets : 1;                     		// 0x0628 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      m_bShowGrenadeFlight : 1;                         		// 0x0628 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bIsShowingInteractionPoints : 1;                  		// 0x0628 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      m_bCurrentTargetIsAimLocked : 1;                  		// 0x0628 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bIsReadyForMissions : 1;                        		// 0x0628 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      m_bWasReadyForMissions : 1;                       		// 0x0628 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bHasDisplayedNag : 1;                           		// 0x0628 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bHadActiveMission : 1;                          		// 0x0628 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bMissionOffersDisabled_GM : 1;                  		// 0x0628 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bInitialSetupDone : 1;                          		// 0x0628 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bExtendedImmunityTime : 1;                      		// 0x0628 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bCanRespawnDeployedVehicle : 1;                 		// 0x0628 (0x0004) [0x0000000000000020] [0x00800000] ( CPF_Net )
	unsigned long                                      m_bCanTargetAll : 1;                              		// 0x0628 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      m_bShowServerHits : 1;                            		// 0x0628 (0x0004) [0x0000000000004020] [0x02000000] ( CPF_Net | CPF_Config )
	unsigned long                                      m_bDebugHitMarkers : 1;                           		// 0x0628 (0x0004) [0x0000000000004000] [0x04000000] ( CPF_Config )
	unsigned long                                      m_bAlwaysAccessInventory : 1;                     		// 0x0628 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      m_bStartGraffitiBar : 1;                          		// 0x0628 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      m_bRenderDebugTracers : 1;                        		// 0x0628 (0x0004) [0x0000000000004000] [0x20000000] ( CPF_Config )
	unsigned long                                      m_bUpdateTimeDebugData : 1;                       		// 0x0628 (0x0004) [0x0000000000004000] [0x40000000] ( CPF_Config )
	unsigned long                                      m_bMoveToPositionFirstPlayerMove : 1;             		// 0x0628 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      m_bReachedAutoMoveToPosition : 1;                 		// 0x062C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCanceledAutoMoveToState : 1;                   		// 0x062C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bClientRequestedCanceledAutoMoveToState : 1;    		// 0x062C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bAutoMoveToStateEndedSuccessfully : 1;          		// 0x062C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bAutoMoveToStateStartedInError : 1;             		// 0x062C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bEjectedDriver : 1;                             		// 0x062C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bCanceledVehicleCloseDoorState : 1;             		// 0x062C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bCloseDoorEndedSucessfully : 1;                 		// 0x062C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bHasMovedInCloseVehicleDoorState : 1;           		// 0x062C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bLeanOutPressed : 1;                            		// 0x062C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bPendingCSARequest : 1;                         		// 0x062C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bReceievedRespawnInfo : 1;                      		// 0x062C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bDiedOnMission : 1;                             		// 0x062C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bDead : 1;                                      		// 0x062C (0x0004) [0x0000000000000020] [0x00002000] ( CPF_Net )
	unsigned long                                      m_bDisplayingRespawnTransitionScreen : 1;         		// 0x062C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bDisplayingSpawnZoneSelectScreen : 1;           		// 0x062C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bCharacterCustomisationRequestComplete : 1;     		// 0x062C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      m_bInvertMouse : 1;                               		// 0x062C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bUIInteraction : 1;                             		// 0x062C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bLookBehindCamera : 1;                          		// 0x062C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bGettingCharacterState : 1;                     		// 0x062C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bWorldChangesEnabled : 1;                       		// 0x062C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bSpawnedBefore : 1;                             		// 0x062C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bSpawnedBeforeClient : 1;                       		// 0x062C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bCharacterCustomisationUploadInProgress : 1;    		// 0x062C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      m_bVehicleCustomisationUploadInProgress : 1;      		// 0x062C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      m_bGraffitiCustomisationUploadInProgress : 1;     		// 0x062C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      m_bArrested : 1;                                  		// 0x062C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      m_bUnconscious : 1;                               		// 0x062C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      m_bIsDeathmatchTarget : 1;                        		// 0x062C (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      m_bIsVIPTarget : 1;                               		// 0x062C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      m_bIsGM : 1;                                      		// 0x062C (0x0004) [0x0000000000000020] [0x80000000] ( CPF_Net )
	unsigned long                                      m_bIsGMInvisibilitySettingEnabled : 1;            		// 0x0630 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsGMInvincibilitySettingEnabled : 1;           		// 0x0630 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIsGMCollisionSettingEnabled : 1;               		// 0x0630 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIsGMIdentifierEnabled : 1;                     		// 0x0630 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bIsGMInFreeCameraMode : 1;                      		// 0x0630 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bWasGMInvisibilitySettingEnabled : 1;           		// 0x0630 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bWasGMIdentifierSettingEnabled : 1;             		// 0x0630 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bIsNoPenaltyRespawning : 1;                     		// 0x0630 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bInSymbolEditor : 1;                            		// 0x0630 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bInMusicStudio : 1;                             		// 0x0630 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bIsLfg : 1;                                     		// 0x0630 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bIsMissionInProgress : 1;                       		// 0x0630 (0x0004) [0x0000000000000020] [0x00000800] ( CPF_Net )
	unsigned long                                      m_bIsOvermatched : 1;                             		// 0x0630 (0x0004) [0x0000000000000020] [0x00001000] ( CPF_Net )
	unsigned long                                      m_bLockedInDatabase : 1;                          		// 0x0630 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bTutorialComplete : 1;                          		// 0x0630 (0x0004) [0x0000000000000020] [0x00004000] ( CPF_Net )
	unsigned long                                      m_bClientLoaded : 1;                              		// 0x0630 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bIsElectiveRespawnInProgress : 1;               		// 0x0630 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      m_bShieldsEnabled : 1;                            		// 0x0630 (0x0004) [0x0000000000004020] [0x00020000] ( CPF_Net | CPF_Config )
	unsigned long                                      m_bUsingAttachedToActorCamera : 1;                		// 0x0630 (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	unsigned long                                      m_bUseDirectorCameraMode : 1;                     		// 0x0630 (0x0004) [0x0000000000000020] [0x00080000] ( CPF_Net )
	unsigned long                                      m_bCameraKeysExtraMovement : 1;                   		// 0x0630 (0x0004) [0x0000000000000020] [0x00100000] ( CPF_Net )
	unsigned long                                      m_bMovementKeyDisallowLean : 1;                   		// 0x0630 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bSpectatorMode : 1;                             		// 0x0630 (0x0004) [0x0000000000000020] [0x00400000] ( CPF_Net )
	unsigned long                                      m_bCameraRightSideKey : 1;                        		// 0x0630 (0x0004) [0x0000000000000020] [0x00800000] ( CPF_Net )
	unsigned long                                      m_bVehicleMovementKeyIsDownOnServer : 1;          		// 0x0630 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      m_bLastServerDriveAcked : 1;                      		// 0x0630 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      m_bIsElectiveRespawning : 1;                      		// 0x0630 (0x0004) [0x0000000000002020] [0x04000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      m_bWaitingOnStreamingDerivedStateActive : 1;      		// 0x0630 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      m_bWantsToEnterMarksManShipMode : 1;              		// 0x0630 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      m_bToggleMarksManShipModeOverides : 1;            		// 0x0630 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      m_bSprintPressedSinceEnterMarksMan : 1;           		// 0x0630 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	int                                                m_ProtectedHealth;                                		// 0x0634 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTimeLeftForSpawnMapDelay;                      		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastTimeQueueNotEmpty;                         		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCompatCharacterUID;                            		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcDebugPage*                                 m_MyDebugPage;                                    		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcDebugPage*                                 m_MagicSpawnStuffPage;                            		// 0x0648 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcDebugPage*                                 m_vfxPage;                                        		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_scrapeFrequency;                                		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_CurrentTarget;                                  		// 0x0654 (0x0004) [0x0000000000000000]              
	struct FReticuleLinePickInfo                       m_ReticuleLinePickInfo;                           		// 0x0658 (0x0010) [0x0000000000000000]              
	struct FReticuleLinePickInfo                       m_ReticuleLinePickInfoNoTargetingRules;           		// 0x0668 (0x0010) [0x0000000000000000]              
	struct FReticuleLinePickInfo                       m_ReticuleLinePickInfoWeaponsAndProjectiles;      		// 0x0678 (0x0010) [0x0000000000000000]              
	int                                                m_nMenuSelection;                                 		// 0x0688 (0x0004) [0x0000000000000000]              
	int                                                m_nMenuItems;                                     		// 0x068C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_nVerbosityMissionManager;                       		// 0x0690 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_eCrimeListState;                                		// 0x0691 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_bSprint;                                        		// 0x0692 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bFireFlag;                                      		// 0x0693 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eGotoVehicleAccessPointIndex;                   		// 0x0694 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eGoToCSA;                                       		// 0x0695 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eVehicleCloseDoorIndex;                         		// 0x0696 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePendingPredictedCSA;                           		// 0x0697 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eFactionCached;                                 		// 0x0698 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCurUploadType;                                 		// 0x0699 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eLeanKeyState;                                  		// 0x069A (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nCustomizationZoneRefCount;                     		// 0x069B (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eFriendlyHUDMarkerState;                        		// 0x069C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eOppositionHUDMarkerState;                      		// 0x069D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eMissionInvolvement;                            		// 0x069E (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eUIInteractionState;                            		// 0x069F (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nLastServerDriveInputs;                         		// 0x06A0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_nCollisionGroupJoined;                          		// 0x06A1 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fNotReadyTimer;                                 		// 0x06A4 (0x0004) [0x0000000000000000]              
	int                                                m_NotReadyNagHandle;                              		// 0x06A8 (0x0004) [0x0000000000000000]              
	class AcPlayerVehicleSpawnZone*                    m_VehicleSpawnZone;                               		// 0x06AC (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pScorerServer;                                  		// 0x06B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pScorerClient;                                  		// 0x06B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pWitnessingManager;                             		// 0x06B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pActiveCrimesList;                              		// 0x06BC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              m_fCrimeListPredictedLocalExpiryTime;             		// 0x06C0 (0x0004) [0x0000000000000000]              
	int                                                m_nCachedHeatLevel;                               		// 0x06C4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fCachedHeatAmount;                              		// 0x06C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcAPBVehicleBase*                            m_DeployedVehicle;                                		// 0x06CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< int >                                      VehicleEnterErrorArray;                           		// 0x06D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fDeployedVehicleSpawnTimeStamp;                 		// 0x06DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_HitNotificationQueueLength;                     		// 0x06E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_HitNotificationTimeout;                         		// 0x06E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_HitNotificationRate;                            		// 0x06E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FHitNotificationRecord >            m_HitNotificationQueue;                           		// 0x06EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_HitNotificationCurrentShotID;                   		// 0x06F8 (0x0004) [0x0000000000000000]              
	int                                                m_HitNotificationLastEnteredShotID;               		// 0x06FC (0x0004) [0x0000000000000000]              
	int                                                m_HitNotificationLastRecdShotID;                  		// 0x0700 (0x0004) [0x0000000000000000]              
	float                                              m_GraffitiBarTime;                                		// 0x0704 (0x0004) [0x0000000000000000]              
	class AcDebugTracerManager*                        m_DebugTracerManager;                             		// 0x0708 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentServerTimeStamp;                        		// 0x070C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fPreviousServerTimeStamp;                       		// 0x0710 (0x0004) [0x0000000000000000]              
	float                                              m_PreviousClientTimeDeltas[ 0x3C ];               		// 0x0714 (0x00F0) [0x0000000000000000]              
	float                                              m_PreviousServerTimeDeltas[ 0x3C ];               		// 0x0804 (0x00F0) [0x0000000000000000]              
	int                                                m_nNextClientTimeDeltaIndex;                      		// 0x08F4 (0x0004) [0x0000000000000000]              
	int                                                m_nNextServerTimeDeltaIndex;                      		// 0x08F8 (0x0004) [0x0000000000000000]              
	struct FMusicPlaybackInfo                          m_MusicPlaybackInfo;                              		// 0x08FC (0x002C) [0x0000000000000000]              
	struct FMusicNameInfo                              m_MusicNameInfo;                                  		// 0x0928 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AcAPBVehicleBase*                            m_pMusicVehicle;                                  		// 0x094C (0x0004) [0x0000000000000000]              
	TArray< class AcAudioDisplayPoint* >               m_aMusicDisplayPoints;                            		// 0x0950 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nPlaybackDeviceSetting;                         		// 0x095C (0x0004) [0x0000000000000000]              
	class AcTestItem*                                  m_LastSpawnedTestHUDMarker;                       		// 0x0960 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_AutoMoveToPosition;                             		// 0x0964 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_DestinationPosition;                            		// 0x0970 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_AutoMoveToRotation;                             		// 0x097C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_DestinationRotation;                            		// 0x0988 (0x000C) [0x0000000000000000]              
	float                                              m_fAutoMoveTo2DDistanceAtDestination;             		// 0x0994 (0x0004) [0x0000000000000000]              
	float                                              m_fZDistanceAtDestination;                        		// 0x0998 (0x0004) [0x0000000000000000]              
	float                                              m_fDistanceTooFarFromDestination;                 		// 0x099C (0x0004) [0x0000000000000000]              
	float                                              m_AutoMoveToEnterTimeOut;                         		// 0x09A0 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_AutoMoveToPositionDirn;                         		// 0x09A4 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_PawnTestMovingPosition;                         		// 0x09B0 (0x000C) [0x0000000000000000]              
	float                                              m_MoveToPositionNoMovementSize;                   		// 0x09BC (0x0004) [0x0000000000000000]              
	float                                              m_MoveToPositionNoMovementTimeOut;                		// 0x09C0 (0x0004) [0x0000000000000000]              
	int                                                m_MoveToPositionID;                               		// 0x09C4 (0x0004) [0x0000000000000000]              
	class AcAPBVehicleBase*                            m_GotoVehicleAccessPointVehicle;                  		// 0x09C8 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_GoToCSAInteractiveActor;                        		// 0x09CC (0x0004) [0x0000000000000000]              
	int                                                m_nGoToCSAIPIndex;                                		// 0x09D0 (0x0004) [0x0000000000000000]              
	int                                                m_nGoToAutoRouteDataIndex;                        		// 0x09D4 (0x0004) [0x0000000000000000]              
	class AcAPBVehicleBase*                            m_VehicleCloseDoor;                               		// 0x09D8 (0x0004) [0x0000000000000000]              
	struct FPredictedADAInfo                           m_PredictedADAInfo;                               		// 0x09DC (0x0018) [0x0000000000000000]              
	class UcPlayerControllerCSAComponent*              m_CSAComponent;                                   		// 0x09F4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FRespawnInfo                                m_RespawnInfo;                                    		// 0x09F8 (0x0060) [0x0000000000000000]              
	class APawn*                                       DeadPawn;                                         		// 0x0A58 (0x0004) [0x0000000000000000]              
	class AcPlayerCharacterSpawnZone*                  m_pPendingSpawnZone;                              		// 0x0A5C (0x0004) [0x0000000000000000]              
	class AcStreamedBuildingActor*                     m_pCallbackBuildingActor;                         		// 0x0A60 (0x0004) [0x0000000000000000]              
	float                                              m_fCallbackBuildingDistanceSq;                    		// 0x0A64 (0x0004) [0x0000000000000000]              
	class APawn*                                       m_LastPawnViewed;                                 		// 0x0A68 (0x0004) [0x0000000000000000]              
	float                                              m_fSpikeWaitTime;                                 		// 0x0A6C (0x0004) [0x0000000000000000]              
	int                                                m_nSpikeFramesLeft;                               		// 0x0A70 (0x0004) [0x0000000000000000]              
	float                                              m_fPingTimeStamp;                                 		// 0x0A74 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    m_CameraAimRotation;                              		// 0x0A78 (0x000C) [0x0000000000000000]              
	class AcOpenWorldDropOff*                          m_AutoMarkedOpenWorldDropOff[ 0x6 ];              		// 0x0A84 (0x0018) [0x0000000000000000]              
	struct FString                                     m_sCharacterStateFileName;                        		// 0x0A9C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nPersistenceTestIndex;                          		// 0x0AA8 (0x0004) [0x0000000000000000]              
	int                                                m_nPersistenceTextMaxIndex;                       		// 0x0AAC (0x0004) [0x0000000000000000]              
	int                                                m_nPersistenceTestTimer;                          		// 0x0AB0 (0x0004) [0x0000000000000000]              
	TArray< struct FContactPair >                      m_aClientUnlockedContacts;                        		// 0x0AB4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aVehicleHUDMarkers;                             		// 0x0AC0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AcAPBVehicle*                                m_pLastCloseVehicle;                              		// 0x0ACC (0x0004) [0x0000000000000000]              
	float                                              m_fTimeCloseToVehicle;                            		// 0x0AD0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurUploadIndex;                                		// 0x0AD4 (0x0004) [0x0000000000000000]              
	class AcStorageInventory*                          m_Inventory;                                      		// 0x0AD8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcHoldableItemManager*                       m_HoldableItemManager;                            		// 0x0ADC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_ContactVendor;                                  		// 0x0AE0 (0x0004) [0x0000000000000000]              
	class AcVendorContactInterface*                    m_VendorContactInterface;                         		// 0x0AE4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class AActor* >                            m_FreeDisplayPoints;                              		// 0x0AE8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUploadItemCustomisationInfo                m_UploadItemCustomisationInfo;                    		// 0x0AF4 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FClientItemOperationInfo                    m_ClientItemOperationInfo;                        		// 0x0B1C (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcCompressedAssetCustomisation*              m_CharacterCustomisation;                         		// 0x0B30 (0x0004) [0x0000000000000000]              
	class UcCompressedAssetCustomisation*              m_VehicleCustomisation;                           		// 0x0B34 (0x0004) [0x0000000000000000]              
	class UcCompressedAssetCustomisation*              m_GraffitiCustomisation;                          		// 0x0B38 (0x0004) [0x0000000000000000]              
	class UcCompressedAssetCustomisation*              m_ThemeCustomisation;                             		// 0x0B3C (0x0004) [0x0000000000000000]              
	struct FGuid                                       m_LocalCharacterPrecacheGUID;                     		// 0x0B40 (0x0010) [0x0000000000000000]              
	struct FGuid                                       m_LastMissionGUID;                                		// 0x0B50 (0x0010) [0x0000000000000000]              
	struct FMultiMap_Mirror                            m_CustomisationDataRequests;                      		// 0x0B60 (0x003C) [0x0000000000001000]              ( CPF_Native )
	class UcCompressedAssetCustomisation*              m_UploadedCharacterCustomisation;                 		// 0x0B9C (0x0004) [0x0000000000000000]              
	class UcCompressedAssetCustomisation*              m_UploadedVehicleCustomisation;                   		// 0x0BA0 (0x0004) [0x0000000000000000]              
	class UcCompressedAssetCustomisation*              m_UploadedGraffitiCustomisation;                  		// 0x0BA4 (0x0004) [0x0000000000000000]              
	int                                                m_nTakeOutInstigatorUID;                          		// 0x0BA8 (0x0004) [0x0000000000000000]              
	TArray< int >                                      m_iInvulnerablePawnUIDsAttacked;                  		// 0x0BAC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nFriendlyHUDMarkerID;                           		// 0x0BB8 (0x0004) [0x0000000000000000]              
	int                                                m_nOppositionHUDMarkerID;                         		// 0x0BBC (0x0004) [0x0000000000000000]              
	int                                                m_eFriendlyHUDMarkerType;                         		// 0x0BC0 (0x0004) [0x0000000000000000]              
	int                                                m_eOppositionHUDMarkerType;                       		// 0x0BC4 (0x0004) [0x0000000000000000]              
	float                                              m_fGMRunSpeedOverride;                            		// 0x0BC8 (0x0004) [0x0000000000000000]              
	int                                                m_nGMHUDMarkerID;                                 		// 0x0BCC (0x0004) [0x0000000000000000]              
	int                                                m_eCurrentCustomisationEditor;                    		// 0x0BD0 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pMusicStudioDataStreamManager;                  		// 0x0BD4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nPledgedContactSddRowID;                        		// 0x0BD8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nEffectivePledgedContactSddRowID;               		// 0x0BDC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nSideLifetimePledgedContactSddRowID;            		// 0x0BE0 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pFoundPledgedContact;                           		// 0x0BE4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPledge;                                        		// 0x0BE8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPersonalCG;                                    		// 0x0BEC (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pSide;                                          		// 0x0BF0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class AcTaskDescription*                           m_Mission;                                        		// 0x0BF4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcTaskDescription*                           m_MissionPreRepnotify;                            		// 0x0BF8 (0x0004) [0x0000000000000000]              
	int                                                m_iTimeOfLastBackupCall;                          		// 0x0BFC (0x0004) [0x0000000000000000]              
	int                                                m_nMissionOfferPauseTimer;                        		// 0x0C00 (0x0004) [0x0000000000000000]              
	int                                                m_nMissionAbandonmentExpiryTime;                  		// 0x0C04 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nRespawnDelayDuration;                          		// 0x0C08 (0x0004) [0x0000000000000000]              
	class AcDistrictBlock*                             m_CurrentDistrict;                                		// 0x0C0C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pPersistentCharacter;                           		// 0x0C10 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPersisCharDataPrev;                            		// 0x0C14 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fDatabaseLastCheckpointTime;                    		// 0x0C18 (0x0004) [0x0000000000000000]              
	float                                              m_fDatabaseLastSaveTime;                          		// 0x0C1C (0x0004) [0x0000000000000000]              
	struct FString                                     m_sCharacterName;                                 		// 0x0C20 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	float                                              m_fOldInForward;                                  		// 0x0C2C (0x0004) [0x0000000000000000]              
	TArray< class AcWaypoint* >                        m_aPersonalWaypoints;                             		// 0x0C30 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcWaypoint* >                        m_aGroupWaypoints;                                		// 0x0C3C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_vecDiedCameraLocation;                          		// 0x0C48 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rotDiedCameraRotation;                          		// 0x0C54 (0x000C) [0x0000000000000000]              
	class AActor*                                      m_pUIActor;                                       		// 0x0C60 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxFlyCamSpeed;                                		// 0x0C64 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fMaxUpDownCamSpeed;                             		// 0x0C68 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_NextSpectatorViewTargetCharacterNameString;     		// 0x0C6C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AcAPBVehicleBase*                            m_APBVehicleHijacking;                            		// 0x0C78 (0x0004) [0x0000000000000000]              
	struct FPvPFlags                                   m_PvPFlags;                                       		// 0x0C7C (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                m_LastValidPawnViewTargetUID;                     		// 0x0C84 (0x0004) [0x0000000000000000]              
	float                                              m_fFlyCamLookUpScale;                             		// 0x0C88 (0x0004) [0x0000000000000000]              
	float                                              m_fFlyCamLookRightScale;                          		// 0x0C8C (0x0004) [0x0000000000000000]              
	int                                                m_MissionEvaluate_QuestionHandle;                 		// 0x0C90 (0x0004) [0x0000000000000000]              
	class UcObservers*                                 m_aObservers;                                     		// 0x0C94 (0x0004) [0x0000000000000000]              
	class AcAPBPawn*                                   m_APBPawnLastConnected;                           		// 0x0C98 (0x0004) [0x0000000000000000]              
	class AcAPBPawn*                                   m_APBPawnLastConnectedReplicated;                 		// 0x0C9C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fLastAimRotationTimeStamp;                      		// 0x0CA0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nLastAimRotation;                               		// 0x0CA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastCameraCollidePercent;                      		// 0x0CA8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastServerDriveInputsTimeStamp;                		// 0x0CAC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastServerDriveTimeStamp;                      		// 0x0CB0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnSummonItemClient__Delegate;                   		// 0x0CB4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOperateOnItemCallback__Delegate;              		// 0x0CC0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemCreateCallback__Delegate;                 		// 0x0CCC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetDisplayPointPositionCallback__Delegate;    		// 0x0CD8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddGroupWaypointCallback__Delegate;           		// 0x0CE4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDeleteGroupWaypointCallback__Delegate;        		// 0x0CF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBPlayerController" );

		return pClassPointer;
	};

	bool IsSocialDistrict ( );
	void eventServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void eventServerEmitNotReadyNag ( );
	void eventServerToggleReadyForMissions ( );
	void ToggleReadyForMissions ( );
	void PollVehicleMovementKeyIsDownOnServer ( );
	float RetOldInForward ( );
	void ResetOldInForward ( );
	class AcAPBPawn* RetPawnLastConnected ( );
	void SetPawnLastConnected ( class AcAPBPawn* PawnLastConenected );
	void eventServerToggleSwitchCameraSide ( );
	void ToggleSwitchCameraSide ( );
	void ServerForceCriticalDamageVehicleUse ( );
	void ForceCriticalDamageVehicleUse ( );
	void eventClientSyncTime ( float fClientGameSeconds, float fDistrictServerGameSecondsNow );
	void eventClientBeginSyncTime ( int nDistrictServerBaselineUTC, float fDistrictServerGameSecondsAtBaseline, float fDistrictServerGameSecondsNow );
	void eventServerSyncTime ( float fClientGameSeconds );
	void RetCameraLocationAndReticuleDirection ( struct FVector* CameraLocationOut, struct FVector* ReticuleDirectionOut );
	void ServerCustomisationLimiterUse ( unsigned char bUse );
	bool IsHijackingVehicle ( class AcAPBVehicleBase* APBVehicleHijacking );
	void HijackingEnded ( class AcAPBVehicleBase* APBVehicleHijacking );
	void HijackingStarted ( class AcAPBVehicleBase* APBVehicleHijacking );
	void ClientCSAEndEventTutorial ( int nTriggerEventID );
	void eventServerTriggerCSAEndEventTutorial ( int nTriggerEventID );
	void ClientCSABeginEventTutorial ( int nTriggerEventID );
	void eventServerTriggerCSABeginEventTutorial ( int nTriggerEventID );
	void ClientTriggerGameplayTutorial ( struct FString sEventName );
	void eventServerTriggerGameplayTutorial ( struct FString sEventName );
	void DBGTriggerGameplayTutorial ( struct FString sEventName );
	void eventClientReceiveActivityMessages ( struct FActivityMessageRecords activityMessages );
	void eventClientActiveCrimeDebugInfo ( struct FActiveCrimeDebugInfo DebugInfo );
	void eventClientHeatDebugInfo ( struct FHeatDebugInfo DebugInfo );
	void ServerFlythroughDestroyAllVehicles ( );
	void ServerFlythroughSpawnVehicle ( struct FVector vehicleLocation, struct FRotator vehicleRotation, int nMeshIndex );
	void ServerFlythroughDestroyAllPedestrians ( );
	void ServerFlythroughSpawnPedestrian ( struct FVector pedestrianLocation, struct FRotator pedestrianRotation, int nMeshIndex );
	void ServerDestroyFlythroughSpawnerActor ( );
	class AcFlythroughSpawnerActor* GetFlythroughSpawnerActor ( );
	void FlythroughDestroyAllVehicles ( );
	void FlythroughSpawnVehicle ( float vehicleLocationX, float vehicleLocationY, float vehicleLocationZ, int vehicleRotationPitch, int vehicleRotationYaw, int vehicleRotationRoll, int nMeshIndex );
	void FlythroughDestroyAllPedestrians ( );
	void FlythroughSpawnPedestrian ( float pedestrianLocationX, float pedestrianLocationY, float pedestrianLocationZ, int pedestrianRotationPitch, int pedestrianRotationYaw, int pedestrianRotationRoll, int nMeshIndex );
	void DestroyFlythroughSpawnerActor ( );
	void InitFlythroughSpawnerActor ( int nNumPedestrianAssetsToCache, int nOffset );
	void InitFlythroughSpawner ( int nNumPedestrianAssetsToCache, int nOffset );
	void ServerGolemSpawnRandomVehicles ( int nNumVehicles, float fSpawnRadius, float fSpawnFrequency, float fDespawnFrequency );
	void ServerGolemSpawnRandomCharacters ( int nNumCharacters, float fSpawnRadius, float fSpawnFrequency, float fDespawnFrequency );
	void ServerGolemSaveScene ( struct FString Filename );
	void ServerGolemSpawnVehicleAtPlayerLocation ( int nDescriptorIndex );
	void ServerGolemDestroyAllVehicles ( );
	void ServerGolemSpawnVehicle ( struct FVector vehicleLocation, struct FRotator vehicleRotation, int nDescriptorIndex );
	void ServerGolemSetRandomEmotes ( unsigned long bPlay );
	void ServerGolemSetRandomEmoteTrace ( unsigned long bPlay );
	void ServerGolemSetEmoteStatus ( unsigned long bPlay );
	void ServerGolemSetEmoteStatusTrace ( unsigned long bPlay );
	void ServerGolemSetEmoteTrace ( struct FString emoteName, unsigned long bPlay );
	void ServerGolemDestroyAllCharacters ( );
	void ServerGolemDestroyAssetTrace ( );
	void ServerGolemSetAssetDescriptorTrace ( int nDescriptorIndex );
	void ServerGolemSpawnCharacterAtPlayerLocation ( int nDescriptorIndex );
	void ServerGolemSpawnCharacter ( struct FVector characterLocation, struct FRotator characterRotation, int nDescriptorIndex, struct FString emoteName, unsigned long bPlayEmote );
	void ServerDestroyGolemSpawnerActor ( );
	void ServerPossessGolemSpawnerActor ( );
	class AGolemSpawnerActor* GetGolemSpawnerActor ( );
	void GolemSpawnRandomVehicles ( int nNumVehicles, float fSpawnRadius, float fSpawnFrequency, float fDespawnFrequency );
	void GolemSpawnRandomCharacters ( int nNumCharacters, float fSpawnRadius, float fSpawnFrequency, float fDespawnFrequency );
	void GolemSaveScene ( struct FString Filename );
	void GolemSpawnVehicleAtPlayerLocation ( int nDescriptorIndex );
	void GolemDestroyAllVehicles ( );
	void GolemSpawnVehicle ( float vehicleLocationX, float vehicleLocationY, float vehicleLocationZ, int vehicleRotationPitch, int vehicleRotationYaw, int vehicleRotationRoll, int nDescriptorIndex );
	void GolemDestroyAllCharacters ( );
	void GolemDestroyAssetTrace ( );
	void GolemSetRandomEmotes ( unsigned long bPlay );
	void GolemSetRandomEmoteTrace ( unsigned long bPlay );
	void GolemSetEmoteStatus ( unsigned long bPlay );
	void GolemSetEmoteStatusTrace ( unsigned long bPlay );
	void GolemSetEmoteTrace ( struct FString emoteName, unsigned long bPlay );
	void GolemSetAssetDescriptorTrace ( int nDescriptorIndex );
	void GolemSpawnCharacterAtPlayerLocation ( int nDescriptorIndex );
	void GolemSpawnCharacter ( float characterLocationX, float characterLocationY, float characterLocationZ, int characterRotationPitch, int characterRotationYaw, int characterRotationRoll, int nDescriptorIndex, struct FString emoteName, unsigned long bPlayEmote );
	void DestroyGolemSpawnerActor ( );
	void PossessGolemSpawnerActor ( );
	void SetLastValidPawnViewTargetUID ( int nLastValidPawnViewTargetUID );
	int RetLastValidPawnViewTargetUID ( );
	void eventServerMovementKeyDisallowLean ( unsigned long bMovementKeyDisallowLean );
	void MovementKeyDisallowLean ( unsigned long bMovementKeyDisallowLean );
	void eventClientNetSet ( struct FString Command );
	void eventServerNetSet ( struct FString Command );
	void NetSet ( struct FString Command );
	float RetFlyCamLookRightScale ( );
	void SetFlyCamLookRightScale ( float NewScale );
	float RetFlyCamLookUpScale ( );
	void SetFlyCamLookUpScale ( float NewScale );
	void CameraFlyLookRightScale ( float NewScale );
	void CameraFlyLookUpScale ( float NewScale );
	void CameraSteadyCamChangeInMovementSpeed ( float fChange, int nCameraModifier );
	void CameraSteadyCamDelay ( float FMin, float FMax, int nCameraModifier );
	void CameraSteadyCamMovementSpeed ( float FMin, float FMax, int nCameraModifier );
	void CameraSteadyCamInterpToSpeed ( float FMin, float FMax, int nCameraModifier );
	void CameraSteadyCamRotation ( float fYaw, float fPitch, float fRoll, int nCameraModifier );
	void CameraSteadyCam ( unsigned long bEnable, int nCameraModifier );
	void eventServerCameraKeysExtraMovement ( unsigned long bEnable );
	void CameraKeysExtraMovement ( unsigned long bEnable );
	void CameraAPBScreenShakeRotation ( int nAPBScreenShake, float fRotationAmplitudeX, float fRotationAmplitudeY, float fRotationAmplitudeZ, float fRotationFrequencyX, float fRotationFrequencyY, float fRotationFrequencyZ );
	void CameraAPBScreenShakeLocation ( int nAPBScreenShake, float fLocationAmplitudeX, float fLocationAmplitudeY, float fLocationAmplitudeZ, float fLocationFrequencyX, float fLocationFrequencyY, float fLocationFrequencyZ );
	void CameraRemoveAPBScreenShake ( int nAPBScreenShake );
	void CameraPlayAPBScreenShake ( int nAPBScreenShake );
	void eventServerCameraModeOriginLagSpeed ( unsigned char CameraModeChange, float fLagSpeed );
	void CameraModeOriginLagSpeed ( float fLagSpeed );
	void eventServerSetCameraMaximumUpDownSpeed ( float fMaxUpDownCameraSpeed );
	void CameraMaximumUpDownSpeed ( float fMaxUpDownCameraSpeed );
	void eventServerSetCameraMaximumFlySpeed ( float fMaxFlyCameraSpeed );
	void CameraMaximumFlySpeed ( float fMaxFlyCameraSpeed );
	void eventServerUseDirectorCameraMode ( unsigned long bUseDirectorCameraMode );
	void CameraDirectorMode ( unsigned long bUseDirectorCameraMode );
	void CameraTabViewTarget ( unsigned long bForwards );
	void CameraViewTarget ( struct FString sActorName );
	void eventServerCameraViewTarget ( struct FString sActorName );
	void CameraRoll ( float fCameraRoll );
	void CameraAlwaysHideLocalActor ( unsigned long bAlwaysHideLocalActor );
	void OnSpectatorModeRepNotify ( );
	bool RetSpectatorMode ( );
	void UnSpectate ( );
	void eventServerSpectatorMode ( unsigned long bSpectatorMode );
	void Spectate ( struct FString sCharacterNameString );
	void eventServerDoCameraCollision ( unsigned long bDoCameraCollision );
	void CameraCollision ( unsigned long bDoCameraCollision );
	void CameraHiddenObjects ( unsigned long bDoHiddenObjects );
	void CameraModeFOV ( float FOV );
	void eventServerSetClientViewPortSize ( struct FVector2D ClientViewportSize );
	void eventServerSetCameraModeFOV ( unsigned char CameraModeChange, unsigned char ViewPortUse, float FOV );
	void eventServerSetCameraModeOffsets ( unsigned char CameraModeChange, float fBackAdjust, float fHeightAdjust, float fRightAdjust, float fRightAdjustPitchScalar, unsigned char ViewPortUse, unsigned long bPrimaryAdjustments );
	void CameraModeOffsets ( float fBackAdjust, float fHeightAdjust, float fRightAdjust, float fRightAdjustPitchScalar );
	void eventServerSetCameraPosition ( unsigned char TargetType, unsigned char CameraPosition );
	void eventServerSetCameraUserDefinedViewScalar ( unsigned char TargetType, float UserDefinedViewScalar );
	void eventSetCustomColour ( int nIndex, struct FLinearColor colHSL );
	void ServerAwayFromKeyboardNative ( unsigned long bAutomaticAFK );
	void ServerAwayFromKeyboard ( unsigned long bAutomaticAFK );
	void eventAwayFromKeyboard ( unsigned long bAutomaticAFK );
	void eventServerSetPersistantData ( unsigned char TargetType, unsigned char CameraPosition, float UserDefinedViewScalar );
	class AcWaypoint* eventAddPersonalWaypoint ( struct FVector pos, unsigned long bUsePlayerHeight );
	void clientOnDeleteGroupWaypointComplete ( unsigned long bDeleted );
	bool serverDeleteGroupWaypointNative ( int nMarkerID );
	void serverDeleteGroupWaypoint ( int nMarkerID );
	void eventclientDeleteGroupWaypoint ( int nMarkerID, struct FScriptDelegate OnDeleteCallback );
	void OnDeleteGroupWaypointCallback ( unsigned long bDeleted );
	void clientOnAddGroupWaypointComplete ( int nMarkerID );
	int serverAddGroupWaypointNative ( struct FVector pos );
	void serverAddGroupWaypoint ( struct FVector pos );
	void eventclientAddGroupWaypoint ( struct FVector pos, struct FScriptDelegate OnAddCallback );
	void OnAddGroupWaypointCallback ( int nMarkerID );
	class AcWaypoint* AddWaypoint ( int nMaxWaypoints, struct FVector pos, unsigned long bUsePlayerHeight, TArray< class AcWaypoint* >* aWaypoints );
	void clientOnGetDisplayPointPositionComplete ( unsigned long bSuccess, struct FVector Position );
	bool serverGetDisplayPointPositionNative ( struct FGuid nDisplayPointGuid, struct FVector* Position );
	void serverGetDisplayPointPosition ( struct FGuid nDisplayPointGuid );
	void eventclientGetDisplayPointPosition ( struct FGuid nDisplayPointGuid, struct FScriptDelegate OnGetPositionCallback );
	void OnGetDisplayPointPositionCallback ( unsigned long bSuccess, struct FVector Position );
	void ExecOpenPopupKnowledgebasePage ( );
	void ExecClosePopupDialog ( );
	void ExecChatLogAction ( struct FString sChatLogAction );
	void ExecMusicTrackAction ( struct FString sMusicTrackAction );
	void eventClientReceiveDisplayPointTrackInfo ( class AcAudioDisplayPoint* in_pDisplayPointPointer, struct FString TrackName, struct FString artistName, struct FString releaseName );
	void eventServerRequestDisplayPointTrackInfo ( class AcAudioDisplayPoint* in_pDisplayPointPointer );
	void eventClientReceiveVehicleTrackInfo ( class AcAPBVehicleBase* in_pVehiclePointer, struct FString TrackName, struct FString artistName, struct FString releaseName, int trackGID );
	void eventServerRequestVehicleTrackInfo ( class AcAPBVehicleBase* in_pVehiclePointer );
	void SetMusicTrackOnDisplayPoint ( );
	void SetMusicTrackOnVehicle ( );
	void eventResetMusicTrack ( );
	void eventSetMusicStudioTrack ( unsigned long bBroadcastViaVehicle, struct FGuid songGuid, int nInitialPlaybackTime );
	void eventSetMusicTrack ( unsigned long bBroadcastViaVehicle, int nTrackGID, int nInitialPlaybackTime, float fStyleVector0, float fStyleVector1, float fStyleVector2, float fStyleVector3, struct FString sTrackName, struct FString sArtistName, struct FString sReleaseName );
	void RemoveMusicDisplayPoint ( class AcAudioDisplayPoint* pDisplayPoint );
	void AddMusicDisplayPoint ( class AcAudioDisplayPoint* pDisplayPoint );
	void eventSetMusicDeviceVehicle ( class AcAPBVehicleBase* pVehicle );
	bool IsInMusicStudio ( );
	void eventServerNotifyExitMusicStudio ( );
	void eventNotifyExitMusicStudio ( );
	void eventServerNotifyEnterMusicStudio ( );
	void eventNotifyEnterMusicStudio ( );
	bool IsInSymbolEditor ( );
	void eventServerNotifyExitSymbolEditor ( );
	void eventNotifyExitSymbolEditor ( );
	void eventServerNotifyEnterSymbolEditor ( );
	void eventNotifyEnterSymbolEditor ( );
	int RetCurrentCustomisationEditor ( );
	void eventServerNotifyEnterCustomisationStudio ( int eCustomisationEditor );
	void eventServerExitCustomisationStudio ( int eCustomisationEditor );
	void eventNotifyEnterCustomisationStudio ( int eCustomisationEditor );
	void NotifyIsCustomising ( unsigned long IsCustomising );
	bool IsCustomising ( );
	void OnClientExitCustomisationStudio ( );
	void eventServerSetIsCustomising ( unsigned long bIsCustomising );
	void eventClientGotoStateIfNotInState ( struct FName StateName );
	void eventShouldBeCustomising ( unsigned long bIsCustomising );
	void UpdateGender ( );
	float GetVehicleEnterTimeOut ( );
	float GetVehicleEnterSpeedHoldOnToDoor ( );
	float GetVehicleEnterNoMovementTimeOut ( );
	float GetVehicleEnterDistanceTooGreat ( );
	void eventCallServerDamageActor ( int nDamageAmount );
	void ServerDamageActor ( int nDamageAmount );
	void DamageActor ( int nDamageAmount );
	void eventCallSetPause ( unsigned long bPause );
	void eventReliableDoNothingServerRPC ( );
	void NativeClientRPCOverflow ( );
	void ClientRPCOverflow ( );
	void eventReliableDoNothingClientRPC ( );
	void NativeServerRPCOverFlow ( );
	void ServerServerRPCOverFlow ( );
	void ServerRPCOverflow ( );
	void SetAutoMoveToStateEndedSuccessfully ( unsigned long bEndedSuccessfully );
	bool CanRespawnDeployedVehicle ( );
	class AcPlayerVehicleSpawnZone* RetInteractingVehicleSpawnZone ( );
	void SetInteractingVehicleSpawnZone ( class AcPlayerVehicleSpawnZone* SpawnZone );
	unsigned char RetSprint ( );
	class UcPlayerControllerCSAComponent* RetCSAComponent ( );
	void SetWindowTitle ( );
	struct FString StatsToString ( );
	struct FString ToString ( );
	struct FString RetCharacterNameScript ( );
	int GetHealth ( );
	bool DecrementPoints ( int Amount );
	bool DecrementCash ( int Amount );
	bool IncrementPoints ( int Amount );
	bool IncrementCash ( int Amount );
	void eventOnDatabaseLoadComplete ( unsigned long bResult );
	void DatabaseLoad ( );
	void DatabaseCheckpoint ( unsigned long bLast );
	void OnChatStateRepNotify ( );
	void GameplayMessage ( struct FString sMessage );
	void ClientOnSideMemberRemovedNative ( int nCharacterUID, int nNewLeaderUID );
	void eventClientOnSideMemberRemoved ( int nCharacterUID, int nNewLeaderUID );
	void ClientOnSideMemberAddedNative ( struct FSideMember newMember );
	void eventClientOnSideMemberAdded ( struct FSideMember newMember );
	void eventClientOnSideLeftNative ( );
	void ClientOnSideJoinedNative ( struct FSidePacket packet );
	void eventClientOnSideJoined ( struct FSidePacket packet );
	void RemoveOtherGroups ( );
	int GetOppositionSideID ( );
	int GetSideID ( );
	int GetGroupID ( );
	class UcGroup* GetGroup ( );
	void eventClientSetGroupLeader ( int nCharacterUID );
	void ClientSetInitialStateNative ( int nCharacterUID, unsigned char Faction, unsigned char Gender );
	void eventClientSetInitialState ( int nCharacterUID, unsigned char Faction, unsigned char Gender );
	void eventSendUnreliableGroupData ( struct FUnreliableDataPacket packet );
	void ClientOnUnreliableGroupDataReceived ( struct FUnreliableDataPacket packet );
	void ClientReceiveOppositionIDNative ( int nOppositionSideID );
	void eventClientReceiveOppositionID ( int nOppositionSideID );
	void ClientOnGroupMemberRemovedNative ( int nCharacterUID );
	void eventClientOnGroupMemberRemoved ( int nCharacterUID );
	void ClientOnGroupMemberAddedNative ( struct FGroupMember newMember );
	void eventClientOnGroupMemberAdded ( struct FGroupMember newMember );
	void ClientOnGroupLeftNative ( );
	void eventClientOnGroupLeft ( );
	void ClientOnGroupJoinedNative ( struct FGroupPacket GroupPacket );
	void eventClientOnGroupJoined ( struct FGroupPacket packet );
	void ServerOnGroupLeft ( unsigned long bExittingDistrict );
	void ServerOnGroupJoined ( int nGroupUID, int nLeaderUID );
	void eventClientAutoJoinGroup ( struct FString leaderName );
	void eventNotifyServerLfgStateChanged ( unsigned long NewState );
	void eventNotifyServerGroupPublicStateChanged ( unsigned long NewState );
	void OnMissionRepNotify ( );
	float RetDeployedVehicleSpawnTimeStamp ( );
	void OnDeployedVehicleDestroyed ( unsigned long bTelefragged );
	void OnDeployedVehicleSpawned ( );
	class AcAPBVehicleBase* RetDeployedVehicle ( );
	void OnVehiclePassengerEnter ( class AcAPBVehicleBase* Vehicle );
	void OnVehiclePassengerExit ( class AcAPBVehicleBase* Vehicle, class AcAPBPawn* Passenger, unsigned long bGetOut );
	void OnVehicleDriverEnter ( class AcAPBVehicleBase* Vehicle );
	void OnVehicleDriverExit ( class AcAPBVehicleBase* Vehicle, class AcAPBPawn* Driver );
	bool IsVehicleDriver ( );
	bool IsInsideVehicle ( );
	void ClientOnCheckpointReachedNative ( class AcCheckpoint* pCheckpoint, class AcTaskObjective* pObjective );
	void ClientOnCheckpointReached ( class AcCheckpoint* pCheckpoint, class AcTaskObjective* pObjective );
	void eventOnCheckpointReached ( class AcCheckpoint* pCheckpoint, class AcTaskObjective* pObjective );
	bool HasActiveMission ( );
	void SetMission ( class AcTaskDescription* NewMission );
	class AcTaskDescription* GetMission ( );
	void ClientOnMissionEndedNative ( );
	void eventClientOnMissionEnded ( );
	bool IsDeathmatchTarget ( );
	bool IsVIP ( );
	class UcObservers* GetObservers ( );
	void DestroyHUDMarkers ( );
	void InitHUDMarkers ( );
	void OnArrestedPlayer ( class AcAPBPlayerController* ArrestedPlayer );
	void OnArrestedChanged ( unsigned long bIsArrested );
	void OnUnconsicousChanged ( unsigned long bIsUnconscious );
	void MS_SetVolume ( float fVol );
	void MS_GoIdle ( );
	void MS_SetSong ( int nSlot );
	void MS_LeaveLivePerformance ( int nPerformanceID );
	void MS_JoinLivePerformance ( struct FString sPerformerCharacterName );
	void MS_EndLivePerformance ( );
	void MS_StartLivePerformance ( );
	void eventMusicStudioLiveMode_ServerJoinLivePerformance ( int nCharacterUID );
	void eventMusicStudioLiveMode_ClientJoinedAsSpectator ( int nPerformanceID, int nDataStreamID, class AcAudioDisplayPoint* pAudioDisplayPoint );
	void eventMusicStudioLiveMode_ClientLiveModeStarted ( int nPerformanceID, int nDataStreamID, class AcAudioDisplayPoint* pAudioDisplayPoint );
	void eventMusicStudioLiveMode_ServerStartLiveMode ( );
	void eventMusicStudioDataStream_ClientSendData8 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientSendData7 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientSendData6 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientSendData5 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientSendData4 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientSendData3 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientSendData2 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientSendData1 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ClientMultiChunkDataBegin ( int streamId, int nDataSize );
	void eventMusicStudioDataStream_ClientCloseStream ( int streamId );
	void eventMusicStudioDataStream_ClientCreateStream ( int streamId );
	void eventMusicStudioDataStream_ServerSendData8 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerSendData7 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerSendData6 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerSendData5 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerSendData4 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerSendData3 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerSendData2 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerSendData1 ( int streamId, struct UcPlayerControllerTypes_FMusicStudioDataChunk chunk );
	void eventMusicStudioDataStream_ServerCloseStream ( int streamId );
	void eventMusicStudioDataStream_ServerMultiChunkDataBegin ( int streamId, int nDataSize );
	void eventClientReceiveCharacterThemeGuid ( int nCharacterUID, struct FGuid deployedThemeGuid, int nVersionHash );
	void eventServerRequestCharacterThemeGuid ( int nCharacterUID );
	void eventClientReceiveCharacterRolesData ( struct FCharacterRolesData RolesData );
	void eventServerRequestCharacterRolesData ( int nCharacterUID );
	void eventClientReceiveOtherPlayerContactStanding ( struct FContactStandingPacket packet );
	void eventServerRequestOtherPlayerContactStanding ( int nCharacterUID, int nContactID );
	void eventServerRequestOtherPlayerCustomisation ( int nCharacterUID, int nUserData );
	void eventClientReceiveVehicleData ( struct FVehicleData playerVehicleData );
	void eventServerRequestVehicleData ( int nCharacterUID );
	void eventClientReceiveCharacterStats ( struct FCharacterStats playerCharacterStats );
	void eventServerRequestCharacterStats ( int nCharacterUID );
	void eventClientReceiveCharacterData ( struct FCharacterData playerCharacterData );
	void eventServerRequestCharacterData ( int nCharacterUID );
	void eventClientOnCharacterDistrictExit ( int nCharacterUID );
	void eventSendCharacterInfoMultiPacket ( struct FCharacterInfoMultiPacket* packet );
	void ClientReceiveCharacterInfoMultiPacket ( struct FCharacterInfoMultiPacket packet );
	void eventSendCharacterInfo ( struct FCharacterInfoPacket* packet );
	void ClientReceiveCharacterInfo ( struct FCharacterInfoPacket packet );
	void AudioMemDump ( );
	void ReloadAudioGarageData ( );
	void SetVehicleDebugType ( int nType );
	void ToggleTracerDebug ( );
	void ToggleCollisionDebug ( );
	void CalculateAudioOutlineHoles ( );
	void SetDebugBitmapDrawLevel ( int nLevel );
	void SaveOutline ( );
	void ChangeOutlineColor ( int outlineID, int R, int G, int B );
	void ReloadConcaveOutlines ( );
	void ToggleDrawConcaveOutlines ( );
	void ToggleObstructionDebug ( );
	void ToggleGeometryDebug ( );
	void ToggleAmbientAudio ( );
	void SetPushForPrivacyOff ( );
	void SetPushForPrivacyOn ( );
	void SetPushToTalkOff ( );
	void SetPushToTalkOn ( );
	void AudioContactDialogueTestStop ( );
	void AudioContactDialogueTestStart ( struct FString sContactName, struct FString sEventName, int nIntervalBetweenTriggers );
	void AudioPriorityManagerDebugToggle ( );
	void AudioPriorityManagerDebugInfo ( );
	void MS_LogMem ( unsigned long bPrintCallStack );
	void MS_SaveThemeToFile ( struct FString Filename );
	void MS_LoadThemeFromFile ( struct FString Filename );
	void MS_PlaySongFromSlot ( int nSlot );
	void MS_PlayThemeFromSlot ( int nSlot );
	void MS_PlayFromFile ( struct FString sThemeFile );
	void MS_LoadSongIntoSlot ( int nSlot, struct FString sThemeFile );
	void MS_LoadThemeIntoSlot ( int nSlot, struct FString sThemeFile );
	void MS_SubtractMemSnapshots ( struct FString sName1, struct FString sName2, struct FString sDest );
	void MS_AddMemSnapshots ( struct FString sName1, struct FString sName2, struct FString sDest );
	void MS_DeleteMemSnapshot ( struct FString sName );
	void MS_DeleteAllMemSnapshots ( );
	void MS_LogMemSnapshot ( struct FString sName, unsigned long bPrintCallStack, struct FString sFilename );
	void MS_CreateMemSnapshot ( struct FString sName );
	void MS_GenericCommand3 ( struct FString sCommand, struct FString sParam1, struct FString sParam2, struct FString sParam3 );
	void MS_GenericCommand2 ( struct FString sCommand, struct FString sParam1, struct FString sParam2 );
	void MS_GenericCommand1 ( struct FString sCommand, struct FString sParam1 );
	void MS_PlayCharacterTheme ( struct FString sCharacterName );
	void MS_PlayCharacterUIDTheme ( int nCharacterUID );
	void MS_LoadAllInstruments ( unsigned long bAsyncLoad );
	void MS_FlushInstruments ( );
	void MS_StopAll ( );
	struct FGuid RetDeployedThemeGuid ( );
	void ResetLeanKeys ( );
	bool LeanAbsoluteContraintsMet ( );
	void ServerLeanRightKeyDown ( );
	void ServerLeanLeftKeyDown ( );
	void LeanRightKeyDown ( );
	void LeanLeftKeyDown ( );
	void eventRequestContactStanding ( int nContactID );
	void ServerRequestContactStanding ( int nContactID );
	void OnServerRequestContactStanding ( int nContactID );
	void eventContactStandingNotify ( struct FContactStandingPacket packet );
	void ClientContactStandingNotification ( struct FContactStandingPacket packet );
	void OnClientContactStandingNotification ( struct FContactStandingPacket packet );
	void ServerDebugSetThreatLevel ( int nThreatLevel );
	void ServerDebugAddFormHistoryNative ( struct FString sWinLoseDraw, int nNumMatches );
	void DebugSetThreatLevel ( int nThreatLevel );
	void DebugAddFormHistory ( struct FString sWinLoseDraw, int nNumMatches );
	void ServerDebugSetRating ( int nNewRating );
	void DebugSetRating ( int nNewRating );
	void ServerLogMissionsNative ( );
	void LogMissions ( );
	void ServerSetObjectivePreferredTaskTargetNative ( int nObjectiveIndex, int nTaskTargetIndex, unsigned long bTrue );
	void DebugPreferObjectiveTaskTarget ( int nObjectiveIndex, int nTaskTargetIndex, unsigned long bPreferred );
	void ServerSetPreferredTaskTargetNative ( struct FString sName, unsigned long bPreferred );
	void DebugPreferTaskTarget ( struct FString sName, unsigned long bPreferred );
	void ServerSetTaskTargetTriggeredNative ( int nTaskTargetIndex, unsigned long bTriggered );
	void DebugResetTaskTarget ( int nIndex );
	void DebugTriggerTaskTarget ( int nIndex );
	void ServerTeleportToTaskTargetNative ( int nObjectiveIndex, int nTaskTargetIndex );
	void DebugTeleportToObjectiveTaskTarget ( int nObjectiveIndex, int nTaskTargetIndex );
	void DebugTeleportToTaskTarget ( int nIndex );
	void GMDebug_SetGMNative ( unsigned long bEnabled );
	void GMDebug_SetGM ( unsigned long bEnabled );
	void eventGM_ServerSetOppositionNative ( struct FString sPlayerName );
	void GM_SetOpposition ( struct FString sPlayerName );
	void eventGM_ServerEndMissionNative ( struct FString sWhoWon );
	void GM_EndMission ( struct FString sWhoWon );
	void eventGM_ServerStartMissionNative ( struct FString sMissionName );
	void GM_StartMission ( struct FString sMissionName );
	void eventGM_ClientNotifyVehicleRepairFailed ( unsigned char eErrorCode );
	void eventGM_ServerRepairVehicle ( );
	void GM_RepairVehicle ( );
	void eventGM_ClientNotifyTeleportedByGM ( );
	void eventGM_ClientNotifyMovePlayerToGMLocationFailed ( struct FString sCharacterName, unsigned char eErrorCode );
	void eventGM_ServerMovePlayerToGMLocation ( struct FString sCharacterName );
	void GM_MovePlayerToGMLocation ( struct FString sCharacterName );
	void eventGM_ClientNotifyMoveToPlayerLocationFailed ( struct FString sCharacterName, unsigned char eErrorCode );
	void eventGM_ServerMoveToPlayerLocation ( struct FString sCharacterName );
	void GM_MoveToPlayerLocation ( struct FString sCharacterName );
	void eventGM_ClientNotifyMoveToLocationFailed ( struct FVector vecLocation, unsigned char eErrorCode );
	void eventGM_ServerMoveToLocation ( struct FVector vecLocation );
	void GM_MoveToLocation ( float fX, float fY, float fZ );
	void eventGM_ClientNotifyLeaveFreeCameraMode ( unsigned char eErrorCode );
	void eventGM_ClientNotifyEnterFreeCameraMode ( );
	void eventGM_ServerLeaveFreeCameraMode ( );
	void eventGM_ServerEnterFreeCameraMode ( );
	void GM_EnterFreeCameraMode ( );
	void GM_ResetRunSpeed ( );
	float GM_RetRunSpeed ( );
	void eventGM_ServerSetRunSpeedNative ( float fSpeed );
	void GM_SetRunSpeed ( float fSpeed );
	void GM_ServerSetIdentifiersEnabledNative ( unsigned long bEnabled );
	void GM_ServerToggleIdentifiersNative ( );
	void GM_ToggleIdentifiers ( );
	void GM_ServerSetCollisionEnabledNative ( unsigned long bEnabled );
	void eventGM_ServerToggleCollisionNative ( );
	void GM_ToggleCollision ( );
	void GM_ServerSetInvincibilityEnabledNative ( unsigned long bEnabled );
	void eventGM_ServerToggleInvincibilityNative ( );
	void GM_ToggleInvincibility ( );
	void GM_ServerSetInvisibilityEnabledNative ( unsigned long bEnabled );
	void eventGM_ServerToggleInvisibilityNative ( );
	void GM_ToggleInvisibility ( );
	bool IsGM_InFreeCameraMode ( );
	bool IsGM_RunSpeedOverrideEnabled ( );
	bool IsGM_IdentifierEnabled ( );
	bool IsGM_CollisionEnabled ( );
	bool IsGM_InvincibilityEnabled ( );
	bool IsGM_InvisibilityEnabled ( );
	void ReinitialiseGMState ( );
	void SetGM ( unsigned long bGM );
	bool IsGM ( );
	void SetNoPenaltyRespawning ( unsigned long bNoPenaltyRespawning );
	bool IsNoPenaltyRespawning ( );
	void eventSuicideCharacterPawn ( );
	void eventServerSetTrackedActivity ( int nTrackedActivityRow, int nValue );
	void SetTrackedActivity ( struct FString trackedActivityRowName, int nValue );
	void ServerDebugPrintTrackedActivityStats ( );
	void DebugPrintTrackedActivityStats ( );
	void DebugWeaponRecoil ( int eWeaponRecoil );
	void eventScorerKillNotify ( struct FScorerKillNotificationPacket* packet );
	void ClientScorerKillNotification ( struct FScorerKillNotificationPacket packet );
	void eventMissionSummaryNotify ( struct FMissionSummaryPacket packet );
	void ClientMissionSummaryNotification ( struct FMissionSummaryPacket packet );
	void OnMissionSummaryNotification ( struct FMissionSummaryPacket packet );
	void eventMedalAwardNotify ( int nMedalID );
	void ClientMedalAwardNotification ( int nMedalID );
	void OnMedalAwardNotification ( int nMedalID );
	void eventMedalsNotify ( struct FMedalsPacket packet );
	void ClientMedalsNotification ( struct FMedalsPacket packet );
	void OnMedalsNotification ( struct FMedalsPacket packet );
	void eventMissionStatsNotify ( struct FMissionStatsPacket packet );
	void ClientMissionStatsNotification ( struct FMissionStatsPacket packet );
	void OnTakeDamage ( int DamageAmount, class AcAPBPlayerController* EventInstigator );
	void OnMissionStatsNotification ( struct FMissionStatsPacket packet );
	void eventMissionGroupMembersNotify ( struct FMissionSideMembersPacket packet );
	void ClientMissionGroupMembersNotification ( struct FMissionSideMembersPacket packet );
	void OnMissionGroupMembersNotification ( struct FMissionSideMembersPacket packet );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void eventScriptIgnoreMoveInput ( unsigned long bNewMoveInput );
	void eventGoToStateOnInteractionFinished ( struct FName NewState );
	void eventEndContactDealingUI ( class AcContact* Contact );
	void eventStartContactDealingUI ( class AcContact* Contact );
	void eventEndMailBoxInteraction ( );
	void eventCallClientEndInteractionState ( unsigned char eState );
	void eventCallClientBeginInteractionState ( unsigned char eState, struct FGuid UIActorGUID, unsigned long bInteract, unsigned char eInteractionType );
	void eventClientEndInteractionState ( unsigned char eState );
	void eventServerEndInteractionState ( unsigned char eState );
	void eventClientBeginInteractionState ( unsigned char eState, struct FGuid UIActorGUID, unsigned long bInteract, unsigned char eInteractionType );
	void EndInteractionState ( unsigned char eState );
	void BeginInteractionState ( unsigned char eState, class AActor* UIActor, unsigned long bInteract, unsigned char eInteractionType, struct FGuid* UIActorGUID );
	void eventServerRemoteContactInteraction ( struct FGuid ContactGUID );
	void eventCallServerRemoteContactInteraction ( struct FGuid ContactGUID );
	void DebugRemoteContactInteractionNative ( struct FString contactName );
	void DebugRemoteContactInteraction ( struct FString contactName );
	void eventOnExitInteractionUI ( unsigned char eState );
	void eventEndUIInteraction ( );
	void eventBeginUIInteraction ( );
	void CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	void ClientSetLookBehind ( unsigned long bLookBehind );
	void ServerSetLookBehind ( unsigned long bLookBehind );
	void SetLookBehind ( unsigned long bLookBehind );
	void StopLookBehind ( );
	void StartLookBehind ( );
	bool eventGetInvertMouse ( );
	void ServerInvertMouse ( unsigned long bInvert );
	void ClientInvertMouse ( unsigned long bInvert );
	void SetInvertMouse ( unsigned long bInvert );
	void eventInvertMouse ( unsigned long bInvert );
	void PlayCameraShakeExported ( unsigned char CameraShakePresetExported );
	void PlayCameraShakePreset ( int Preset );
	void UpdateStateFromAdjustment ( struct FName NewState );
	void eventCloseDoorAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void CancelVehicleCloseDoorState ( );
	void ClientCancelVehicleCloseDoorState ( );
	void eventServerCancelVehicleCloseDoorState ( );
	void VehicleOpenDoor ( unsigned char eVehiclePositionIndex, unsigned long bOpen );
	void eventBailOutAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventGetOutAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventEjectSeatSlideAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventSwitchingSeatAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventGetInAndCloseDoorAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventCloseDoorFromInsideAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventClientCancelMoveToPositionState ( );
	void eventServerCancelMoveToPositionState ( int nID );
	void eventServerCancelMoveToPositionState_DONOTCALL ( int nID );
	void ClientAtAutoReachedPositionServer ( int nID );
	int eventGetMoveToID ( );
	void eventRoleAuthorityAutoMoveToUpdate ( );
	bool CancelMoveToPositionState ( int nID );
	void AutoMoveToEnterTimer ( );
	unsigned char AtAutoReachedPosition ( int nID );
	void eventEjectLaterAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventEjectInitialAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void eventOpenDoorAnimFinished ( class AcAPBPawn* PawnAnimFinished );
	void EndStateGotoVehicleAccessPointOpenDoorAndEjectState ( );
	void eventResetVehicleUseData ( );
	void EndStateGotoVehicleAccessPointAndOpenDoorState ( );
	void EndStateGotoVehicleAccessPointState ( );
	void EndStateAutoMoveToCSAPositionState ( );
	bool eventMoveToTargetValid ( );
	bool MoveToTargetValidAutoMoveToCSAPositionState ( );
	bool eventCalculateAutoRouteToPositionAndRotation ( struct FVector* AutoRouteToPosition, struct FRotator* AutoRouteToRotation );
	bool eventCalculateDestinationPositionAndRotation ( struct FVector* DestinationPosition, struct FRotator* DestinationRotation );
	bool CalculateAutoRouteToPositionAndRotationAutoMoveToCSAPositionState ( struct FVector* AutoRouteToPosition, struct FRotator* AutoRouteToRotation );
	bool CalculateDestinationPositionAndRotationAutoMoveToCSAPositionState ( struct FVector* DestinationPosition, struct FRotator* DestinationRotation );
	bool CalculateAutoRouteToPositionAndRotationGotoVehicleAccessPointState ( struct FVector* AutoRouteToPosition, struct FRotator* AutoRouteToRotation );
	bool CalculateDestinationPositionAndRotationGotoVehicleAccessPointState ( struct FVector* DestinationPosition, struct FRotator* DestinationRotation );
	float RetCSAInteractionDistance ( unsigned char eContextSensitveActionBase );
	float RetCSAVerticalInteractionDistance ( unsigned char eContextSensitveActionBase );
	void RoleAuthorityAutoMoveToUpdateAutoMoveToPositionState ( );
	void ClientCompleteAutoMoveToCSA ( );
	void ServerCompleteSuccessfulyAutoMoveToCSA ( );
	unsigned char AtAutoReachedPositionAutoMoveToPositionState ( int nID );
	void PlayerMoveAutoMoveToPositionState ( float DeltaTime );
	float eventGetAutoMoveToEnterTimeOut ( );
	void eventAutoReachedPosition ( float DeltaTime );
	bool eventCanDoReachedPosition ( );
	void eventProcessPrePlayerMove ( );
	unsigned char eventRetCurrentCSAAutoRoute ( );
	bool eventIsPerformingCSAAutoRoute ( );
	void ServerMoveToPositionNoMovementTimer ( );
	void eventCallServerCompleteSuccessfulyAutoMoveToCSA ( );
	void eventCallClientCompleteAutoMoveToCSA ( );
	void CallServerMoveToPositionNoMovementTimer ( );
	bool GetCSAAutoRouteDestinationAndRotation ( class AActor* pInteractiveActor, int nIPIndex, int nARDIndex, unsigned long bAdjustToPawnHeight, struct FVector* vDestination, struct FRotator* rRotation );
	bool GetCSAAutoRouteLocationAndRotation ( class AActor* pInteractiveActor, int nIPIndex, int nARDIndex, struct FVector* vLocation, struct FRotator* rRotation );
	void eventClientGoToCSAAutoRouteState ( class AActor* pInteractiveActor, unsigned char eCSA, int nIPIndex, int nARDIndex );
	void GoToCSAAutoRouteState ( class AActor* pInteractiveActor, unsigned char eCSA, int nIPIndex, int nARDIndex );
	void ProcessMoveAutoMoveToPositionState ( float DeltaRot, struct FVector* outNewAccel );
	void EndStateAutoMoveToPositionState ( );
	void ServerDebugPrintMissionDebugInfo ( );
	void DebugPrintMissionDebugInfo ( );
	void DebugReallocateTargetServer ( int nStageIndex, int nTargetIndex );
	void DebugReallocateTarget ( int nStageIndex, int nTargetIndex );
	void ServerSimulateTimeOut ( );
	void SetHeatAmountServerNative ( int NewValue );
	void SetHeatAmount ( int NewValue );
	void AwardContactStandingServerNative ( struct FString contactName, int nStandingIncrement );
	void AwardContactStanding ( struct FString contactName, int nStandingIncrement );
	void UnlockContactServerNative ( struct FString contactName );
	void UnlockContact ( struct FString contactName );
	void SetBombTimer ( int newTimeInSeconds );
	void ServerSetBombTimer ( int newTimeInSeconds );
	void ServerDebugAddMissionTimeBonus ( int nTimeBonus );
	void DebugAddMissionTimeBonus ( int nTimeBonus );
	void ServerDebugSetMissionTimer ( int newTimeInSeconds );
	void DebugSetMissionTimer ( int newTimeInSeconds );
	void SetMissionAbandonmentTimerServerNative ( int newTimeInSeconds );
	void SetMissionAbandonmentTimer ( int newTimeInSeconds );
	void SetMissionDelayTimerServerNative ( int newTimeInSeconds );
	void SetMissionDelayTimer ( int newTimeInSeconds );
	void eventOnPledgeChangedClient ( );
	void eventBreakPledgeServerNative ( );
	void BreakPledge ( );
	void eventTryPledgeServerNative ( struct FString contactName );
	void DebugPledgeServerNative ( struct FString contactName );
	void Pledge ( struct FString contactName );
	void DumpContactListNative ( );
	void DumpContactList ( );
	void ClientOnCallForBackUpUIResponseReceived ( unsigned char eAnswer );
	void StartCallForBackupUINative ( );
	void eventStartCallForBackupUI ( );
	void ServerCallForBackupNative ( unsigned long bYesNo );
	void eventClientCancelCallForBackup ( );
	void CancelCallForBackup ( );
	void eventClientCallForBackup ( );
	void CallForBackup ( );
	void eventClientSetPersistantData ( unsigned char TargetType, unsigned char CameraPosition, float UserDefinedViewScalar );
	void ServerShortTimeout ( );
	void SetCamRoll ( int nMode );
	void NotReadyNag_Callback ( unsigned char Answer );
	void NotReadyNag_OpenDialog ( );
	void ToogleCameraPositions ( );
	void eventServerMissionEvaluate ( int bAnswer );
	void MissionEvaluate ( int bAnswer );
	void MissionEvaluate_Callback ( unsigned char Answer );
	void eventMissionEvaluate_OpenDialog ( int iRowIndex );
	void eventMissionOffer_SendChangeNotification ( struct FtMissionJustification Justification );
	void eventAbandonMissionServerNative ( );
	void AbandonMission ( );
	bool eventIsInNormalLocomotionState ( );
	void ToggleMissionStats ( );
	void eventClientReplicateHUDMarkerText ( struct FString sText, int nServerMarkerID );
	void eventServerReplicateHUDMarkerText ( int nServerMarkerID );
	void ClientShowMarkerType ( unsigned char eCategory, unsigned long bShow );
	void eventServerShowMarkerType ( unsigned char eCategory, unsigned long bShow );
	void ClientDeleteHUDMarker ( int nServerMarkerID );
	void eventServerDeleteHUDMarker ( int nServerMarkerID );
	void eventClientShowHUDMarkerTaskMarker ( int nServerMarkerID, unsigned long bShow );
	void ClientReplicateHUDMarker ( struct FHUDMarkerData markerData, int nServerMarkerID );
	bool IsNetworkConnectionUnreponsive ( );
	void eventServerReplicateHUDMarker ( int nServerMarkerID );
	void MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot );
	void eventClientSetMarksManShipRequestInfo ( unsigned char nMarksManShipModeRequestID, unsigned long bMarksManShipMode );
	void eventServerTrySetMarksManShip ( unsigned char nMarksManShipModeRequestID, unsigned long bMarkManShipMode );
	void ToggleMarksmanship ( );
	void SetWantsToEnterMarksManShipMode ( unsigned long bWantsToEnterMarksManShipMode );
	void SetDoesntWantToEnterMarksManShipMode ( );
	void SetDoesWantToEnterMarksManShipMode ( );
	void HandleSprinting ( );
	void eventHandleWalking ( );
	void ClientUpdatePosition ( );
	void SetRunSpeedServer ( float fNewRunningSpeed );
	void SetSprintSpeedServer ( float fNewSprintingSpeed );
	void SetWalkSpeedServer ( float fNewWalkSpeed );
	void SetCrouchSpeedServer ( float fNewCrouchSpeed );
	void SetRunSpeed ( float fNewRunSpeed );
	void SetSprintSpeed ( float fNewSprintingSpeed );
	void SetWalkSpeed ( float fNewWalkSpeed );
	void SetCrouchSpeed ( float fNewCrouchSpeed );
	void ProtectPlayer ( unsigned long bValue );
	void SetAimRotation ( int aimRotation, float cameraCollidePercent );
	void eventServerUpdateTarget ( float TimeStamp, class AActor* NewTarget, int aimRotation, float cameraCollidePercent, struct FVector TargetOffset );
	void eventServerCosmeticAimRotation ( int aimRotation, float cameraCollidePercent );
	void UpdateAimReplication ( );
	struct FRotator UnpackAimRotation ( int aimRotation );
	int PackAimRotation ( struct FRotator aimRotation );
	void AlterAccelerationForCarSurfing ( struct FVector* CurrentAcceleration );
	bool IsEmoteUnlocked ( struct FString sEmoteName );
	void eventServerEmote ( struct FString sEmoteName, unsigned long Loop );
	void ServerSetShieldsEnabled ( unsigned long bEnabled );
	void ServerSetHealthRechargeDelay ( float ShieldHealth, float Stamina );
	void ServerSetHealthRechargeDuration ( float Health, float ShieldHealth, float Stamina );
	void ServerSetHealthAmounts ( int Health, int ShieldHealth, int Stamina );
	void SetShieldsEnabled ( unsigned long bEnabled );
	void SetHealthRechargeDelay ( float ShieldHealth, float Stamina );
	void SetHealthRechargeDuration ( float Health, float ShieldHealth, float Stamina );
	void SetHealthAmounts ( int Health, int ShieldHealth, int Stamina );
	void DisableShowInteractionPoints ( );
	void EnableShowInteractionPoints ( );
	void DisableShowVehicleSockets ( );
	void EnableShowVehicleSockets ( );
	void DisableShowVehicleViewCones ( );
	void EnableShowVehicleViewCones ( );
	void ListEmotes ( );
	bool eventUIExecuteEmote ( struct FString sEmoteName );
	void Emote ( struct FString sEmoteName );
	void RenderDebugPage ( class UCanvas* Canvas );
	void eventCallClientAckDrive ( float TimeStamp );
	void ClientAckDrive ( float TimeStamp );
	void CallNewServerDrive ( float TimeStamp, unsigned char Inputs );
	void eventNewServerDrive ( float TimeStamp, unsigned char Inputs );
	void UnpackDriveInputs ( int Inputs, float* OutForward, float* OutStrafe, float* OutUp );
	unsigned char PackDriveInputs ( float InForward, float InStrafe, float InUp );
	bool IsAbleToDrive ( );
	void TestForVehicleMovementKey ( float InForward );
	void ProcessMoveDeadState ( float DeltaRot, struct FVector* outNewAccel );
	void FindGoodViewDeadNative ( );
	void ServerSetDeadLocation ( struct FVector NewLoc );
	float RetSpawnConstant ( unsigned char eConstant );
	void ProcessRespawnInfo ( struct FRespawnInfo* Info );
	void SetRespawnTime ( int nRespawnDelay );
	void ForceRespawnTimer ( );
	void BeginRespawnSequence ( int nRespawnDelay, int nTransitionScreenDelay );
	void UpdateRespawnLocationForStreaming ( );
	void OnCloseRespawnTransitionScreen ( );
	void OnTransitionScreenFadedIn ( );
	void OnOpenRespawnTransitionScreen ( );
	void EndStateDead ( );
	void BeginStateDead ( );
	void ResupplyDeployedWeaponsFromStorage ( );
	void NotifyPlayerSpawned ( unsigned long bRespawn );
	void eventCallServerRestartPlayer ( );
	void ServerRestartPlayer ( );
	void eventServerSetViewTarget ( class AActor* A, unsigned long bUseAttachedToActorCamera, struct FViewTargetTransitionParams TransitionParams );
	bool eventCanClientSetViewTarget ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void PawnDied ( class APawn* inPawn );
	void eventClientReceiveRespawnInfo ( struct FRespawnInfo Info );
	void eventLogCurrentState ( );
	void OnStreamingCompletedNative ( );
	void BeginStateExitCustomisationStudioWaitOnStreaming ( );
	void GiveUpOnStreamingTimer ( );
	void SetShowStreamingTransitionScreen ( unsigned long bShowStreamingTransitionScreen );
	void FakeStreamingComplete ( );
	bool eventIsWaitingOnStreaming ( );
	class AcPlayerCharacterSpawnZone* eventRetPendingSpawnZone ( );
	void eventSetPendingSpawnZone ( class AcPlayerCharacterSpawnZone* PendingSpawnZone );
	bool IsStreamingComplete ( unsigned long bLogIfNotComplete );
	void OnStreamingComponentLoaded ( class AActor* StreamingActor );
	void OnCharacterRequestComplete ( );
	void BeginStatePlayerSpawnWaitOnStreaming ( );
	void EndStateWaitOnStreaming ( );
	void BeginStateWaitOnStreaming ( );
	void eventOnStreamingComplete ( );
	void ProcessMovePlayerImmobileState ( float DeltaRot, struct FVector* outNewAccel );
	void eventServerNotifyClientLoaded ( );
	void eventLevelLoadsComplete ( );
	void eventOnSelectSpawnZoneComplete ( );
	void eventServerSelectSpawnZone ( class AcPlayerCharacterSpawnZone* SpawnZone );
	int RetNumSpawnZones ( unsigned char eFaction );
	class AcPlayerCharacterSpawnZone* RetRandomSpawnZone ( unsigned char eFaction );
	void SelectRandomSpawnZone ( unsigned char eFaction );
	void ServerTestMapSelectScreen ( );
	void TestMapSelectScreen ( );
	void ClientGoToSpawnZoneSelectScreen ( unsigned char eFaction );
	void eventGoToSpawnZoneSelectScreen ( unsigned char eFaction );
	void ServerPrintNumSpawnZones ( );
	void PrintNumSpawnZones ( );
	void ServerSnapRotationToPawn ( );
	void SnapRotationToPawn ( );
	void ServerPrintState ( );
	void PrintState ( );
	void ClientNotifyElectiveRespawnStateChange ( unsigned long bElectiveRespawnInProgress );
	void eventServerCancelElectiveRespawn ( );
	void eventServerRequestElectiveRespawn ( );
	void CancelUnstick ( );
	void Unstick ( );
	void LogElectiveRespawn ( );
	void NotifyElectiveRespawnTimerElapsed ( );
	bool IsAllowedToPerformElectiveRespawn ( );
	float RetElectiveRespawnDelay ( );
	void ClientSetPlayerVelocityZero ( );
	void SetPlayerVelocityZero ( );
	float GetRollRotationDelta ( float fDeltaTime );
	void eventCancelAmmoResupply ( );
	void eventBeginAmmoResupply ( );
	void eventBuyAmmoAmount ( int eCategory, int nAmount );
	bool CanBuyAmmoAmount ( int eCategory, int nAmount );
	void eventBuyAmmoBoxes ( int eCategory, int nBoxCount );
	bool CanBuyAmmoBoxes ( int eCategory, int nBoxCount );
	int StoreCash ( int nAmount );
	int WithdrawCash ( int nAmount );
	bool TransferCashTo ( class AcAPBPlayerController* pPC, int nAmount );
	void ServerCancelAllAmmoResupplyActions ( );
	void CancelAllAmmoResupplyActions ( );
	void DebugCancelResupplyServer ( unsigned char eWeaponType );
	void DebugCancelResupply ( unsigned char eWeaponType );
	void DebugPayForHeat ( int nNewLevel );
	void DebugBuyAmmoAmount ( int eCategory, int nAmount );
	void DebugBuyAmmoBoxes ( int eCategory, int nBoxCount );
	void ServerEmptyAllEquippedWeapons ( );
	void EmptyAllEquippedWeapons ( );
	void APB_VFXToggle ( );
	void APB_VFXOff ( );
	void APB_VFXOn ( );
	void FillAllEquippedWeapons ( );
	void FillEquippedWeapon ( );
	void ServerRemoveStorageAmmo ( int eCategory, int nAmount );
	void RemoveStorageAmmo ( int eCategory, int nAmount );
	void ServerAddStorageAmmo ( int eCategory, int nAmount );
	void AddStorageAmmo ( int eCategory, int nAmount );
	void eventKickSideMemberServer ( int nCharacterUID );
	void ServerTestMissionTarget ( class AActor* pTargetActor );
	void DebugTestMissionTarget ( );
	void DebugLogHoldableItems ( );
	void ServerSetFirstStageTargetRange ( float fRange );
	void SetFirstStageTargetRange ( float fRange );
	void ServerSetFirstStageTargetRangeCheck ( unsigned long bEnabled );
	void SetFirstStageTargetRangeCheck ( unsigned long bEnabled );
	void DebugKickSideMemberServerNative ( struct FString PlayerName );
	void DebugKickSideMemberServer ( struct FString PlayerName );
	void KickSideMember ( struct FString PlayerName );
	void SetOppositionServerNative ( struct FString Who );
	void SetOppositionServer ( struct FString Who );
	void SetOpposition ( struct FString Who );
	void EndMissionServerNative ( struct FString how );
	void EndMissionServer ( struct FString how );
	void EndMission ( struct FString how );
	void StartMissionServerNative ( struct FString sMissionName, int nRandomSeed, unsigned long bApplyFilters );
	void StartMissionServer ( struct FString sMissionName, int nRandomSeed, unsigned long bApplyFilters );
	void StartMissionUnfiltered ( struct FString sMissionName, int nRandomSeed );
	void StartMission ( struct FString sMissionName, int nRandomSeed );
	void eventNotifyEndCSAScript ( unsigned char eCSAState );
	void EndCSA ( unsigned char eCSAState );
	bool eventCancelCSAAutoRoute ( );
	bool CancelAllCSAServer ( );
	bool CancelCSAInputType ( unsigned char eInputType, int eCSAInputMapping );
	void ForceToCancelCSA ( );
	void eventCallServerCSAKeyReleased ( int eCSAInputMapping );
	bool eventServerCSAKeyReleased ( int eCSAInputMapping );
	void CSAKeyReleased ( struct FString sCSAInputMapping );
	void eventCallClientResetPendingCSA ( unsigned char eCSAState );
	void ClientResetPendingCSA ( unsigned char eCSAState );
	void eventCallServerCSAKeyPressed ( int eCSAInputMapping, int aimRotation, float cameraCollidePercent, class AActor* pTargetedActor );
	unsigned char ServerProcessCSAKeyPressed ( int eCSAInputMapping, class AActor* pTargetedActor );
	void eventServerCSAKeyPressed ( int eCSAInputMapping, int aimRotation, float cameraCollidePercent, class AActor* pTargetedActor );
	void eventCallServerCSAPredictCancel ( int eCSAInputMapping, unsigned char eCSA, struct FPredictedADAInfo predictedADA );
	void eventServerCSAPredictCancel ( int eCSAInputMapping, unsigned char eCSA, struct FPredictedADAInfo predictedADA );
	bool ClientPredictCancelADA ( int eCSAInputMapping );
	void eventCallClientMispredictedCSA ( unsigned char eCSAState );
	void ClientMispredictedCSA ( unsigned char eCSAState );
	void InvokeADA ( class AcAnimationDrivenTrigger* pTrigger );
	void eventCallServerCSAPredicted ( int eCSAInputMapping, unsigned char eCSA, int aimRotation, float cameraCollidePercent, struct FPredictedADAInfo predictedADA );
	void eventServerCSAPredicted ( int eCSAInputMapping, int aimRotation, float cameraCollidePercent, struct FPredictedADAInfo predictedADA );
	bool ClientPredictADA ( int eCSAInputMapping );
	void CSAKeyPressed ( struct FString sCSAInputMapping );
	class AcAPBPawn* GetCharacterPawnLegacy ( );
	class AcAPBPawn* GetCharacterPawnAlive ( );
	class AcAPBPawn* GetCharacterPawn ( );
	void ServerTestCSA ( unsigned char eCSA, float fDuration );
	void TestCSA ( unsigned char eCSA, float fDuration );
	void ServerBeginCSA ( unsigned char eCSA );
	void ExecBeginCSA ( unsigned char eCSA );
	void BeginCSA ( unsigned char eCSA, class AActor* pInteractiveActor, int nIPIndex, float fOverideDuration );
	bool CanBeginCSA ( unsigned char eCSA, class AActor* InteractiveActor, int nIPIndex );
	void ServerStopLCVehicles ( );
	void StopLCVehicles ( );
	bool IsCarryingTaskItem ( );
	bool IsAimingAt ( class AActor* ATarget, float Epsilon );
	void eventServerSuicide ( );
	void Suicide ( );
	void AddCheats ( );
	void eventDestroyed ( );
	void DestroyedNative ( );
	void ServerProtectPlayer ( unsigned long bValue );
	void APB_serverUpdatePing ( float fTimeStamp );
	void eventClientReceivedPingTimestamp ( );
	void APB_UpdatePing ( );
	void eventPostBeginPlay ( );
	int ServerProcessAClientShout_Native ( );
	void eventServerProcessAClientShout ( );
	bool ActorIsRelevant ( class AActor* pr_pActor );
	void ToggleLightweight ( );
	void ToggleLightweightClient ( );
	void ClientParseCommandLine ( );
	void ResetDeployedVehicle ( unsigned long bDoRecylceDeployedVehicle, unsigned long bTelefragDeployedVehicle );
	class AcAPBVehicleBase* SpawnDeployedVehicle ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	bool GetRespawnCameraLocations ( struct FRespawnInfo* Info );
	void eventServerEnableRespawnAtCamera ( unsigned long bAllow );
	void EnableRespawnAtCamera ( unsigned long bAllow );
	void eventServerEnableFlyWhileDead ( unsigned long bAllow );
	void EnableFlyWhileDead ( unsigned long bAllow );
	void ServerIllegalLocation_APB ( );
	void ClientIllegalLocation_APB ( );
	void ClientIllegalLocation ( unsigned long bPawn );
	void ServerIllegalLocation ( unsigned long bPawn );
	void IllegalLocation ( unsigned long bServer, unsigned long bPawn );
	void ServerSetControllerPos ( struct FVector vNewPos );
	void DoSpike ( );
	void Spike ( float fSpikeTimeInMS, int nNumberOfSpikeFrames );
	void ReplicatedServerSpike ( float fSpikeTimeInMS, int nNumberOfSpikeFrames );
	void ServerSpike ( float fSpikeTimeInMS, int nNumberOfSpikeFrames );
	void MoveCam ( float fX, float fY, float fZ );
	void ServerSetVehicleDamageEffect ( int nEffectIndex );
	void SetVehicleDamageEffect ( int nEffectIndex );
	void eventEnableSIV ( );
	void ServerEnableRespawnInVehicle ( unsigned long bAllow );
	void EnableRespawnInVehicle ( unsigned long bAllow );
	void ReloadWeapon ( );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void TestRetContactRewardItems ( int ContactID, int LevelStart, int LevelEnd );
	void ThrowGrenade ( );
	void Witness ( );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	class AActor* RetAimLockedTarget ( );
	bool CanTarget ( class AActor* A );
	void ServerDebugExplosion ( int Type, struct FVector ExplosionLocation );
	void DebugExplosionOffset ( int Type, float X, float Y, float Z );
	void DebugExplosion ( int Type, float X, float Y, float Z );
	void ServerRescue ( );
	void Rescue ( );
	void ServerArrest ( );
	void Arrest ( );
	void ServerMakeUnconscious ( );
	void MakeUnconscious ( );
	void ServerSetShowServerHits ( unsigned long bShow );
	void ShowServerHits ( unsigned long bShow );
	void DisableTargetAll ( );
	void EnableTargetAll ( );
	void ServerSetAlwaysAccessInventory ( unsigned long NewState );
	void AlwaysAccessInventory ( unsigned long NewState );
	void LogItemAttachmentStatus ( );
	void eventClientServerShootLine ( struct FVector Start, struct FVector End );
	void ServerSetCanTargetAll ( unsigned long NewState );
	void SetPVPCombat ( unsigned long bState );
	void serverSetPVPCombat ( unsigned long bState );
	void clientSetPVPCombat ( unsigned long bState );
	class AActor* RetCurrentTarget ( );
	void ChangeTarget ( class AActor* pNewTarget, unsigned long bAimLocked );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void ParseCommandLine ( );
	void SetVehicleMaxSpeed ( float SpeedInMPH );
	void ServerSetVehicleMaxSpeed ( float SpeedInMPH );
	void eventClientSelfSay ( struct FString Message, int DisplayTime );
	void eventSelfSay ( struct FString Message, int DisplayTime );
	void NotifyBeginFireWeapon ( class AcWeapon* pWeapon );
	void NotifyDrivenVehicleDamagedByPlayer ( int nDamageAmount, class AcAPBPlayerController* EventInstigator, class UClass* DamageType, int nWeaponType );
	void NotifyDamagedByPlayer ( int nDamageAmount, class AcAPBPlayerController* EventInstigator, class UClass* DamageType, int nWeaponType );
	void NotifyDamageCaused ( class AActor* pActorDamaged, int nDamageAmount, class UClass* DamageType );
	void GetPlayerDeathViewPoint ( struct FVector* vecViewPoint, struct FRotator* rotRotation );
	void eventOnDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	class AcStorageInventory* RetStorageInventory ( );
	class AcHoldableItemManager* RetHoldableItemManager ( );
	int GetMenuItems ( );
	int GetMenuSelection ( );
	void eventAddDebugHitMarker ( struct FVector HitLocation, struct FVector HitDirection, struct FColor DrawColor );
	void eventCallClientPlayPawnEffect ( class AcAPBPawn* pInstigator, int nEffectType );
	void ClientPlayPawnEffect ( class AcAPBPawn* pInstigator, int nEffectType );
	void ClientExplosion ( class AActor* AttachActor, float ExplosionLocationX, float ExplosionLocationY, float ExplosionLocationZ, int ExplosionType, int InstigatingSideID );
	void eventNotifyExplosion ( class AActor* AttachActor, struct FVector ExplosionLocation, int ExplosionType, int InstigatingSideID );
	void ClientProjectileAttack ( class AcAPBPawn* Attacker );
	void ClientH2HAttack ( class AcAPBPawn* Attacker, int nCurrentAttack );
	void eventClientNotifySelfHit ( int nShotID, struct FSharedHitData sharedHitDataParam, struct FDynamicHitData dynamicHitDataParam );
	void eventClientNotifyDynamicHit ( int nShotID, struct FSharedHitData sharedHitDataParam, struct FDynamicHitData dynamicHitDataParam, unsigned long bLocal );
	void eventClientNotifyStaticHit ( int nShotID, struct FSharedHitData Hit, unsigned long bLocal );
	void AudioProjectileEvent ( struct FVector vStartPos, struct FVector vImpactPos, int nAudioMaterial, int nMangledWwiseIDForWeapon, unsigned long bLocallyFired, unsigned char nDamageAmount, unsigned long bLocalPlayerHit );
	void ClientImpactEffect ( struct FImpactInfo Info, struct FVector impactVelocity, unsigned long scrape, class AActor* Other );
	void eventNotifyImpactEffect ( struct FImpactInfo Info, struct FVector impactVelocity, unsigned long scrape, class AActor* Other );
	void eventReplicateProjectileAttack ( class AcAPBPawn* Attacker );
	void eventReplicateH2HAttack ( class AcAPBPawn* Attacker, int nCurrentAttack );
	void eventReplicateReloadFX ( class AcAPBPawn* reloader );
	void eventNotifyReloadFX ( class AcAPBPawn* reloader );
	void ClientReloadFX ( class AcAPBPawn* reloader );
	void serverNetStatue ( );
	void statue ( );
	void TestScene ( class UUIScene* Scene );
	void ToggleDistrictMap ( );
	void OpenOldVehicleCustomisationStudioNative ( );
	void OpenOldVehicleCustomisationStudio ( );
	void OpenOldCharacterCustomisationStudioNative ( );
	void OpenOldCharacterCustomisationStudio ( );
	void SetVerbosityMissionManagerServer ( unsigned char NewValue );
	void SetVerbosityMissionManager ( unsigned char NewValue );
	void ServerSetDebugOpenCustomisation ( unsigned long bOpen );
	void SetDebugOpenCustomisation ( unsigned long bOpen );
	void ResetCustomisationZoneRefCount ( );
	bool CanOpenCustomisationStudio ( );
	bool IsInCustomisationZone ( );
	void ClientSetInCustomisationZone ( unsigned long bInside );
	void SetInCustomisationZone ( unsigned long bInside );
	void ServerSetToDPeriod ( unsigned char ePeriod );
	void SetToDPeriod ( unsigned char ePeriod );
	void ServerToggleToD ( );
	void ToggleToD ( );
	void ServerSetRandomToD ( );
	void SetRandomToD ( );
	void ServerSetToD ( int nHours, int nMins );
	void SetToD ( int nHours, int nMins );
	void serverPrintToD ( );
	void PrintToD ( );
	void ServerKill ( struct FString sNameToKill );
	void ServerSummon ( struct FString sNameToSpawn, float fSpeed, float fDistance, int nX, int nY, int nZ );
	void eventNotifyOwnCustomisationChanged ( unsigned char eType, struct FGuid TheGuid );
	void NotifyCustomisationChanged ( unsigned char eType, unsigned long bSendPrecacheRequest );
	void eventServerNotifyCustomisationUploadComplete ( unsigned char eType );
	void eventServerReceiveCustomisationData ( unsigned char eType, int nCount, unsigned char* packet );
	void eventClientUploadCustomisationData ( unsigned char eType, int nBaseIndex );
	void SaveCustomisationToDisk ( unsigned char eType, struct FString sFilename );
	void UploadItemCustomisationNative ( TArray< unsigned char > aData, struct FGuid OriginalItemGuid );
	void eventclientUploadItemCustomisation ( struct FGuid ItemGuid, TArray< unsigned char > aData, struct FGuid OriginalItemGuid );
	void clientOnItemCreated ( struct FGuid ItemGuid, unsigned char eErrorCode );
	unsigned char nativeServerItemCreate ( int nInventoryItemType, struct FGuid* ItemGuid );
	void serverItemCreate ( int nInventoryItemType );
	bool eventclientItemCreate ( int nInventoryItemType, struct FScriptDelegate OnCreateCallback, struct FPointer pUserData, TArray< unsigned char > aData );
	void OnItemCreateCallback ( struct FGuid ItemGuid, unsigned char eErrorCode, struct FPointer pUserData );
	void eventUploadChunkServer ( struct FDataChunk chunk, struct FGuid OriginalItemGuid );
	void eventBeginUploadServer ( int nDataSize, struct FGuid nInventoryItemGuid );
	bool LoadCustomisationFromDisk ( unsigned char eType, struct FString sFilename, class UcCompressedAssetCustomisation* CompressedAsset );
	void SetCompressedCustomisation ( unsigned char eType, class UcCompressedAssetCustomisation* Data );
	class UcCompressedAssetCustomisation* GetCompressedCustomisation ( unsigned char eType );
	void SaveGraffitiCustomisation ( struct FString sFilename );
	void SaveVehicleCustomisation ( struct FString sFilename );
	void SaveCustomisation ( struct FString sFilename );
	void SetNumWantedMips ( int nNumMips );
	void LoadGraffitiCustomisation ( struct FString sFilename );
	void LoadVehicleCustomisation ( struct FString sFilename );
	void LoadCustomisation ( struct FString sFilename );
	void eventCustomisationDownloadComplete ( class UcCompressedAssetCustomisation* Data, int nUserData );
	void eventClientPrecacheCustomisation ( struct FGuid TheGuid, unsigned char eType, unsigned long bLocalPlayer );
	void eventClientCancelCustomisationRequest ( struct FGuid TheGuid );
	void eventServerRequestCustomisation ( struct FGuid TheGuid );
	void SetCustomisationUploadInProgress ( unsigned char eType, unsigned long bValue );
	bool RetCustomisationUploadInProgress ( unsigned char eType );
	void DistributeCustomisation ( unsigned char eType, class UcCompressedAssetCustomisation* asset );
	void eventCompressAndDistributeCustomisation ( unsigned char eType, class UcAssetCustomisation* CustomisedAsset );
	void LoadAndDistributeCustomisation ( unsigned char eType, struct FString sFilename );
	void TestMissionAllBlocksServer ( struct FString sMissionName );
	void TestMissionAllBlocks ( struct FString sMissionName );
	void ValidateMissionsServerNative ( );
	void eventValidateMissionsServer ( );
	void ValidateMissions ( );
	void eventLogDistrictBlockContentsServer ( int nDistrictBlockSddRow );
	void LogDistrictBlockContents ( struct FString sDistrictBlockName );
	void DisplayGraffitiLineChecks ( );
	void ShowMarkerType ( unsigned char eCategory, unsigned long bShow );
	void ServerDestroyTestMarker ( );
	void DestroyTestMarker ( );
	void ServerMoveTestMarker ( );
	void MoveTestMarker ( );
	void ServerSetTestMarkerType ( unsigned char eType );
	void SetTestMarkerType ( unsigned char eType );
	void ServerSetTestMarkerState ( unsigned char eState );
	void SetTestMarkerState ( unsigned char eState );
	void ServerSetTestMarkerRelevant ( unsigned long bRelevant );
	void SetTestMarkerRelevant ( unsigned long bRelevant );
	void ServerSummonTestMarkerNative ( int nHudMarkerID );
	void ServerSummonTestMarker ( );
	void SummonTestMarker ( );
	void ServerTestTaskItemSpawning ( int nNum, struct FString sTaskItemVarietyName );
	void TestTaskItemSpawning ( int nNum, struct FString sTaskItemVarietyName );
	void ServerSummonTaskItem ( struct FString sTaskItemVarietyName );
	void SummonTaskItem ( struct FString sTaskItemVarietyName );
	void ServerDeployNewCar ( );
	void DeployNewCar ( );
	void ServerTestKineCar ( );
	void TestKineCar ( );
	void LogModifiersNative ( );
	void ServerLogModifiers ( );
	void LogModifiers ( );
	void ServerResetReuseGroupsNative ( );
	void ResetReuseGroups ( );
	void DoHitReaction ( );
	void ServerTestHitReaction ( );
	void TestHitReaction ( );
	void ServerSetTestHitReactions ( unsigned long bTestHitReactions );
	void SetTestHitReactions ( unsigned long bTestHitReactions );
	void eventServerPawnTakeDamage ( int DamageAmount, class UClass* DamageType );
	void PawnTakeStaminaDamage ( int DamageAmount );
	void PawnTakeDamage ( int DamageAmount );
	void eventServerDamageCar ( );
	void DamageCar ( );
	void ServerLogActorPosition ( struct FString sActorName );
	void LogActorPosition ( struct FName sActorName );
	void DebugServerDecrementCash ( int Amount );
	void DebugDecrementCash ( int Amount );
	void DebugServerIncrementCash ( int Amount );
	void DebugIncrementCash ( int Amount );
	void eventServerDeclineVehicleSpawnDialogue ( );
	void eventServerAcceptVehicleSpawnDialogue ( );
	void DebugDeclineVehicleSpawnDialogue ( );
	void DebugAcceptVehicleSpawnDialogue ( );
	void VehicleSpawnRepairCostUI_PlayerAnswer ( unsigned char Answer );
	void eventStartVehicleSpawnRepairCostUI ( int nRepairCost );
	void LogInventoryNative ( int Type );
	void LogInventoryServer ( int Type );
	void LogAvailability ( );
	void LogStackingSlots ( );
	void LogPurchasedUnlocks ( );
	void LogExamined ( );
	void LogUnlocked ( );
	void LogInventory ( );
	void SetItemExaminedNative ( struct FString eInventoryItemType, unsigned long NewState );
	void SetItemExaminedServer ( struct FString eInventoryItemType, unsigned long NewState );
	void SetItemExamined ( struct FString eInventoryItemType, unsigned long NewState );
	void HasItemBeenExamined ( struct FString eInventoryItemType );
	void ItemExaminedNative ( int eInventoryItemType );
	void ItemExaminedServer ( int eInventoryItemType );
	void eventItemExamined ( int eInventoryItemType );
	void CreateSymbolLicenceNative ( struct FGuid nSymbolItem, int nRoyaltyFee );
	void eventCreateSymbolLicence ( struct FGuid nSymbolItem, int nRoyaltyFee );
	void CreateLicence ( int nSymbolSlot, int nRoyaltyFee );
	void RemoveUnlockNative ( struct FString sUnlockName );
	void RemoveUnlockServer ( struct FString sUnlockName );
	void RemoveUnlock ( struct FString sUnlockName );
	void UnlockAllItemsNative ( );
	void UnlockAllItemsServer ( );
	void UnlockAllItems ( );
	void ResetItemAvailabilitiesServerNative ( );
	void ResetItemAvailabilitiesServer ( );
	void ResetItemAvailabilities ( );
	void CombineItemStackGroupServerNative ( struct FDataChunk ItemStackGroupData, int nNumItemStacks );
	void eventCombineItemStackGroupServer ( struct FDataChunk ItemStackGroupData, int nNumItemStacks );
	void CombineItemStackGroup ( TArray< struct FGuid > ItemStackGroup );
	bool GetItemDetails ( struct FString sCategory, int nInventorySlot, unsigned char* eCategory, struct FGuid* nItemGuid );
	void eventclientOnOperateOnItem ( int eErr, struct FGuid ItemGuid, unsigned char eOperation );
	int OperateOnItemNative ( unsigned char eCategory, struct FGuid nItemGuid, unsigned char eOperation, struct FString sParam );
	void eventOperateOnItemServer ( unsigned char eCategory, struct FGuid nItemGuid, unsigned char eOperation, struct FString sParam );
	bool IsOperationOnItemCompletedNative ( int eErr );
	bool eventOperateOnItemByGuid ( unsigned char eCategory, struct FGuid nItemGuid, unsigned char eOperation, struct FScriptDelegate OnOperateCallback, struct FString sParam, struct FPointer pUserData );
	void OnOperateOnItemCallback ( int eErr, struct FGuid ItemGuid, unsigned char eOperation, struct FPointer pUserData );
	void OperateOnItem ( struct FString sCategory, int nInventorySlot, unsigned char eOperation, struct FString sParam );
	void UndeployFnMod ( struct FString sCategory, int nInventorySlot, int nFnModSlot );
	void UndeployItem ( struct FString sCategory, int nInventorySlot );
	void SplitItemStack ( struct FString sCategory, int nInventorySlot, int nNumToSplit );
	void SetNumItemsInStack ( struct FString sCategory, int nInventorySlot, int nNewStackSize );
	void SetItemExpiryTime ( struct FString sCategory, int nInventorySlot, int nSecondsFromNow );
	void SetItemStartTime ( struct FString sCategory, int nInventorySlot, int nSecondsFromNow );
	void SellItemToVendor ( struct FString sCategory, int nInventorySlot );
	void RenameItem ( struct FString sCategory, int nInventorySlot, struct FString sNewName );
	void RefurbishItem ( struct FString sCategory, int nInventorySlot );
	void CopyItem ( struct FString sCategory, int nInventorySlot, int nNumCopies );
	void DestroyItem ( struct FString sCategory, int nInventorySlot );
	void DeployItem ( struct FString sCategory, int nInventorySlot, int nDeploymentSlot );
	void DeployFnMod ( struct FString sCategory, int nInventorySlot, int nFnModSlot, int nDeploymentSlot );
	void ConsumeItem ( struct FString sCategory, int nInventorySlot );
	void CombineItemStack ( struct FString sCategory, int nInventorySlot1, int nInventorySlot2 );
	void UnapplyFnMod ( struct FString sCategory, int nInventorySlot, int nSlotIndex );
	void ApplyFnMod ( struct FString sCategory, int nInventorySlot, int nFnModIndex, int nSlotIndex );
	void DoPersistenceTests ( );
	void TestPersistenceServerNative ( int numTests );
	void TestPersistenceServer ( int numTests );
	void TestPersistence ( int numTests );
	void SaveCharacterStateServerNative ( struct FString Filename );
	void SaveCharacterStateServer ( struct FString Filename );
	void SaveCharacterState ( struct FString Filename );
	void LoadCharacterStateServerNative ( struct FString Filename );
	void LoadCharacterStateServer ( struct FString Filename );
	void LoadCharacterState ( struct FString Filename );
	void SummonDisplayPointTokenNative ( struct FString sDisplayPointName, int nStartTime, int nDuration );
	void SummonDisplayPointTokenServer ( struct FString sDisplayPointName, int nStartTime, int nDuration );
	void SummonDisplayPointToken ( struct FString sDisplayPointName, int nStartTime, int nDuration );
	void SummonRoleRewardServer ( struct FString sRoleMilestone );
	void SummonRoleReward ( struct FString sRoleMilestone );
	void SummonContactRewardServer ( struct FString sContactLevel );
	void SummonContactReward ( struct FString sContactLevel );
	void SummonRedeemableRewardServer ( int nKeyID );
	void SummonRedeemableReward ( int nKeyID );
	void SummonRewardServer ( struct FString sItemTypeName );
	void SummonReward ( struct FString sRewardPackageName );
	void SummonItemClient ( int Error, struct FGuid NewItemGUID );
	int SummonItemNative ( struct FString sItemTypeName, struct FGuid* NewItemGUID );
	void SummonItemServer ( struct FString sItemTypeName );
	void eventSummonItemCallback ( struct FString sItemTypeName, struct FScriptDelegate Callback );
	void OnSummonItemClient ( int eErr, struct FGuid ItemGuid );
	void SummonItem ( struct FString sItemTypeName );
	void SendLeagueRankingNative ( struct FString toPlayerName, struct FString sLeagueName, int ranking );
	void SendLeagueRankingServer ( struct FString toPlayerName, struct FString sLeagueName, int ranking );
	void SendLeagueRanking ( struct FString toPlayerName, struct FString sLeagueName, int ranking );
	void SendLeagueRewardsNative ( struct FString toPlayerName, unsigned char entity, unsigned char cycle, unsigned char Scope, unsigned char activity, unsigned char Type, int number, int tied, unsigned long broken, int District );
	void SendLeagueRewardsServer ( struct FString toPlayerName, unsigned char entity, unsigned char cycle, unsigned char Scope, unsigned char activity, unsigned char Type, int number, int tied, unsigned long broken, int District );
	void SendLeagueRewards ( struct FString toPlayerName, unsigned char entity, unsigned char cycle, unsigned char Scope, unsigned char activity, unsigned char Type, int number, int tied, unsigned long broken, int District );
	void OnVendorSetNative ( int nVendorID );
	void eventOnVendorSet ( int nVendorID );
	void eventClientSetSpawnedBefore ( );
	void RenderDebugTracers ( unsigned long bRender );
	void OnItemChanged ( );
	void ToggleNitroMod ( );
	void ToggleAmmoCarrierMod ( );
	void SelectUsable ( int nSlot );
	void SelectUnequipped ( );
	void SelectWeapon ( int nSlot );
	void NextWeapon ( );
	void PrevWeapon ( );
	void eventGM_ServerSetMissionOffersDisabled ( unsigned long bDisabled );
	void GM_ToggleMissionOffers ( );
	void ShowGameplayMarkersNative ( unsigned long bShowMarkers );
	void ServerShowGameplayMarkers ( unsigned long bShowMarkers );
	void ShowGameplayMarkers ( unsigned long bShowMarkers );
	void ServerShowAllCheckpoints ( unsigned long bShow );
	void ShowAllCheckpoints ( unsigned long bShow );
	void ClientCancelLeanInOut ( );
	void eventNotifyClientCancelLeanInOut ( );
	void ServerLeanInOut ( );
	void LeanInOut ( );
	void ToggleCharacterLocation ( );
	void ServerSetPawnAlwaysRelevant ( unsigned long bFlag );
	void SetPawnAlwaysRelevant ( unsigned long bFlag );
	void eventUpdateServerTimeStampHistory ( float fNewTimeStamp );
	float GetAppSeconds ( );
	void UpdateClientTimeDeltaHistory ( float fNewTimeDelta );
	void eventClientNotifyEnforcerWitness ( float fServerTimestamp, int nWitnessedCharacterUID );
	void eventClientCrimeListChanged ( unsigned char eState, float fPredictedTimeRemaining );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void SetCameraAimRot ( struct FRotator NewRot );
	struct FRotator GetCameraAimRot ( );
	void eventCallSuperReplicated ( struct FName VarName );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPhysCorrectMode ( int nMode );
	void ServerPhysCorrect ( int nMode );
	void PhysCorrectMode ( int nMode );
	void SetTimeDebugMs ( float fTimeInMs );
	void ServerUpdateTimeDebug ( unsigned long bUpdate );
	void UpdateTimeDebug ( unsigned long bUpdate );
	void OpenEmoteCommands ( );
	void OpenConsoleCommands ( );
	void OpenChatChannelCommands ( );
	void OpenSlashQuickChat ( );
	void OpenQuickReply ( );
	void OpenQuickChat ( );
	void OpenFullChat ( );
	void ToggleFullscreen ( );
	void ReplayLastHelpUI ( );
	bool RetIsPlayerCarryingTaskItem ( );
	unsigned char RetPlayerThreat ( );
	unsigned char RetPlayerStatus ( unsigned long ignoreReady );
	void UpdatePlayerHUDMarkerUserData ( );
	void eventClientNotifyBackupRecieved ( );
	void ToggleBackupRequest ( );
	void eventClientOnCSATimerChanged ( float fTimeRemaining, float fProgress );
	void eventClientOnCSATimerStopped ( );
	void eventClientOnCSATimerStarted ( float fTimeRemaining );
	void DeactivateOppositionHUDMarkerFirePing ( );
	void ActivateOppositionHUDMarkerFirePing ( class AcAPBPlayerController* pInstigator );
	void eventClientUpdateUnlockedContactsList ( struct FContactPairPacket UnlockedContacts );
	void GetUnlockedContacts ( TArray< struct FContactPair >* aUnlockedContacts );
	void ServerUpdateUnlockedContactsList ( );
	void eventUpdateClientUnlockedContactsList ( );
	void ToggleCharacterInspectUI ( );
	void eventServerPerformDisplayPointInteraction ( class AActor* pDisplayPoint, unsigned char eInteractionType );
	void eventClientUpdateDisplayPointUI ( class AActor* pDisplayPoint, unsigned char eInteractionType );
	void eventClientOpenDisplayPointUI ( class AActor* pDisplayPoint, unsigned char eInteractionType );
	void TestDisplayPointUI ( );
	void OpenDisplayPointUI ( class AActor* pDisplayPoint, unsigned char eInteractionType );
	void DebugMapSizeDecrement ( );
	void DebugMapSizeIncrement ( );
	void DebugChangeMapSize ( float fSize );
	void DebugMapCentreDecrementY ( );
	void DebugMapCentreIncrementY ( );
	void DebugMapCentreDecrementX ( );
	void DebugMapCentreIncrementX ( );
	void DebugChangeMapCentre ( float fX, float fY, float fZ );
	void DebugToggleMapChanges ( );
	void eventClientAddPopupDialog ( int ePopupDialog );
	void eventClientTriggerGameplayPopupDialog ( struct FString sEventName );
	void eventClientTriggerZonePopupDialog ( struct FString sEventName );
	void DebugTestAllTutorials ( );
	void DebugTestTutorial ( struct FString sMessage );
	void eventClientFlushHUDMessages ( );
	void eventClientAddItemDeliveryHUDMessage ( struct FString sMessage, int nItemsDelivered, int nItemsTotal );
	void eventClientAddWitnessingHUDMessage ( struct FString sMessage, int nCharacterUID );
	void eventClientAddResupplyHUDMessage ( struct FString sMessage, int eAmmoCategory, int eInventoryItemType, int nAmmoAmount, int nAmmoCost );
	void eventClientAddContactHUDMessage ( struct FString sMessage, struct FGuid ContactGUID, int nLevel );
	void eventClientAddHUDMessage ( struct FString sMessage );
	void DebugTestHUDMessage ( struct FString sMessage );
	void ToggleTimeSource ( );
	void RadarZoomDefault ( );
	void RadarZoomOut ( );
	void RadarZoomIn ( );
	void CloseBlazingFire ( );
	void OpenBlazingFire ( );
	void eventServerSetGroupLeaderPing ( unsigned long bIsBeingModified );
	void ToggleGroupLeaderPing ( );
	void ToggleTaskMarkerHUD_GroupMembers ( );
	void MainMenuReturnToLobby ( );
	void CloseMainMenu ( );
	void OpenMainMenu ( );
	void eventClientSetTutorialsComplete ( unsigned long bComplete );
	void eventServerSetTutorialsComplete ( unsigned long bComplete );
	void ToggleDataStoreRefresh ( );
	void ToggleDebugHUD ( );
	void ToggleDebugUnconsciousInfo ( );
	void ToggleDebugWeaponInfo ( );
	void ToggleScoreboardUI ( );
	void ToggleLeaguesUI ( );
	void TogglePlayerInfoUI ( );
	void ToggleHUDElement ( struct FString sDataStoreTag );
	void ToggleHUD ( );
	void CloseScene ( class UUIScene* Scene );
	void OpenScene ( class UUIScene* Scene );
	void ClientOpenUIScene ( class UUIScene* Scene );
	void OpenUIScene ( class UUIScene* Scene );
	bool IsDisplayDistrictEntryScreen ( );
	bool CanDoTargeting ( );
	void SetPropPhysics ( unsigned long bEnable );
	void ForcePropTicking ( unsigned long bEnable );
	void ShowCameraCoordsRelativeToPawn ( unsigned long bEnable );
	void ShowCameraCoords ( unsigned long bEnable );
	void ShowActorNetRates ( unsigned long bShow );
	void ShowTimeDebug ( unsigned long bEnable );
	void ShowDebugHUD ( unsigned long bEnable );
	void NativeVehicleSetup ( struct FString NewVehicleSetup );
	void SwitchVehicleSetup ( struct FString NewVehicleSetup );
	void InputToggleRun ( );
	void eventClientCancelCrouchRequest ( unsigned long bCrouch, int nCrouchRequestID );
	void eventServerCrouchRequest ( unsigned long bCrouch, int nCrouchRequestID );
	void InputToggleDuck ( );
	void SetSprint ( unsigned char nSprint );
	void InputStopSprinting ( );
	void InputSprinting ( );
	void VehicleMovementKeyIsUpOnServer ( );
	void VehicleMovementKeyIsDownOnServer ( );
	bool IsLookInputIgnored ( );
	bool IsMoveInputIgnored ( );
	void MovementKeyIsDownOnServer ( );
	void MovementKeyPressed ( );
	void RightMovementKeyDown ( );
	void LeftMovementKeyDown ( );
	void BackwardMovementKeyDown ( );
	void ForwardMovementKeyDown ( );
	void SetCachedHeatAmount ( float HeatAmount );
	float GetCachedHeatAmount ( );
	void SetCachedHeatLevel ( int HeatLevel );
	int GetCachedHeatLevel ( );
	void eventCallClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera );
	void eventCallClientGotoState ( struct FName NewState, struct FName NewLabel );
	void SetSubtitles ( unsigned long bValue );
	void CallSubtitleVO ( struct FString sFilename );
	void SubtitleTest ( struct FString sTestString );
	void FireAllVehicleEnterErrors ( );
	int RetValueVehicleEnterErrorArray ( int Index );
	bool FindSuccessInVehicleEnterErrorArray ( );
	int RetSizeOfVehicleEnterErrorArray ( );
	void ClearVehicleEnterErrorArray ( );
	void AddToVehicleEnterErrorArray ( int I );
	void TestActivityMessagesAllCallback ( );
	void TestActivityMessagesEnd ( );
	void TestActivityMessagesBegin ( int nTimeDelayBetweenMessages );
	void TestActivityMessage ( struct FString activityMessageName );
	void ToggleMovieCap ( );
	bool IsCapturingMovie ( );
	void StopCapturingMovie ( );
	void StartCapturingMovie ( );
};

UClass* AcAPBPlayerController::pClassPointer = NULL;

// Class APBGame.cAPBPlayerInput
// 0x0028 (0x0188 - 0x0160)
class UcAPBPlayerInput : public UPlayerInput
{
public:
	unsigned char                                      m_bDuckButton;                                    		// 0x0160 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bRun;                                           		// 0x0161 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bCameraZoomIn;                                  		// 0x0162 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bCameraZoomOut;                                 		// 0x0163 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadOne;                                     		// 0x0164 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadTwo;                                     		// 0x0165 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadThree;                                   		// 0x0166 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadFour;                                    		// 0x0167 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadFive;                                    		// 0x0168 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadSix;                                     		// 0x0169 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadSeven;                                   		// 0x016A (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadEight;                                   		// 0x016B (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNumPadNine;                                    		// 0x016C (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bAdd;                                           		// 0x016D (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bSubtract;                                      		// 0x016E (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bEight;                                         		// 0x016F (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_bNine;                                          		// 0x0170 (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              aVehicleThrottle;                                 		// 0x0174 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aVehicleTurn;                                     		// 0x0178 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aVehicleUp;                                       		// 0x017C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              RawVehicleThrottle;                               		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawVehicleTurn;                                   		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBPlayerInput" );

		return pClassPointer;
	};

	void Jump ( );
	bool IsCameraRotatingRight ( );
	bool IsCameraRotatingLeft ( );
	void eventPlayerInput ( float DeltaTime );
};

UClass* UcAPBPlayerInput::pClassPointer = NULL;

// Class APBGame.cAPBSavedMove
// 0x0004 (0x00DC - 0x00D8)
class UcAPBSavedMove : public USavedMove
{
public:
	unsigned long                                      m_bSprint : 1;                                    		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bPredictedJump : 1;                             		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSavedMove" );

		return pClassPointer;
	};

	void Clear ( );
	unsigned char CompressedFlags ( );
};

UClass* UcAPBSavedMove::pClassPointer = NULL;

// Class APBGame.cBotPlayerController
// 0x005C (0x0D58 - 0x0CFC)
class AcBotPlayerController : public AcAPBPlayerController
{
public:
	int                                                m_nCurrentDirection;                              		// 0x0CFC (0x0004) [0x0000000000000000]              
	float                                              m_fWaitTimer;                                     		// 0x0D00 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeUntilDirectionChange;                      		// 0x0D04 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bLevelLoadsComplete : 1;                        		// 0x0D08 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bHasBeenInitialised : 1;                        		// 0x0D08 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bShouldSuicideAndRespawn : 1;                   		// 0x0D08 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      m_BotPlayerState;                                 		// 0x0D0C (0x0001) [0x0000000000000000]              
	float                                              m_fXStep;                                         		// 0x0D10 (0x0004) [0x0000000000000000]              
	float                                              m_fYStep;                                         		// 0x0D14 (0x0004) [0x0000000000000000]              
	float                                              m_fXPosition;                                     		// 0x0D18 (0x0004) [0x0000000000000000]              
	float                                              m_fYPosition;                                     		// 0x0D1C (0x0004) [0x0000000000000000]              
	struct FString                                     m_BudgetTrackerCommandsScript;                    		// 0x0D20 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_fNumXStepsTaken;                                		// 0x0D2C (0x0004) [0x0000000000000000]              
	int                                                m_fNumYStepsTaken;                                		// 0x0D30 (0x0004) [0x0000000000000000]              
	float                                              m_fLocomotionSpeed;                               		// 0x0D34 (0x0004) [0x0000000000000000]              
	int                                                m_nNumberOfRespawns;                              		// 0x0D38 (0x0004) [0x0000000000000000]              
	TArray< class AcAPBDummyPawn* >                    m_aDummyPawnArray;                                		// 0x0D3C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nNumDummyPawns;                                 		// 0x0D48 (0x0004) [0x0000000000000000]              
	float                                              m_fLastServerMoveTime;                            		// 0x0D4C (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pCurrentNode;                                   		// 0x0D50 (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pNextNode;                                      		// 0x0D54 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBotPlayerController" );

		return pClassPointer;
	};

	void eventGoToSpawnZoneSelectScreen ( unsigned char eFaction );
	void eventJumpToLocation ( struct FVector vNewLocation, struct FRotator sNewRotation );
	void ServerSetLocation ( struct FVector vNewLocation, struct FRotator sNewRotation );
	void ServerSetNumDummies ( int nNum );
	void eventSetNumDummies ( int nNum );
	void NumDummies ( int nNum );
	void InitDummyPawns ( );
	void ServerAcknowledgePossession ( class APawn* P );
	void ServerRestartBots ( );
	void eventLevelLoadsComplete ( );
	void eventRespawnMyPawn ( );
	void eventSuicideMyPawn ( );
	void eventServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void CloseAutomatedRun ( );
	void CallConsoleCommands ( );
	void DoVehicleLocomotion ( float fDeltaTime );
	void DoSquareLocomotion ( float fDeltaTime );
	void DoPathgraphLocomotion ( float fDeltaTime );
	void DoLocomotion ( float fDeltaTime );
	void AskForARoute ( );
	bool AttemptInitialisation ( );
};

UClass* AcBotPlayerController::pClassPointer = NULL;

// Class APBGame.cGameInfoCache
// 0x0000 (0x0040 - 0x0040)
class UcGameInfoCache : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGameInfoCache" );

		return pClassPointer;
	};

};

UClass* UcGameInfoCache::pClassPointer = NULL;

// Class APBGame.cAPBSkeletalMeshActor
// 0x0008 (0x0258 - 0x0250)
class AcAPBSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	float                                              m_fInfoDisplayMaxDist;                            		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_InfoDisplayColour;                              		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBSkeletalMeshActor" );

		return pClassPointer;
	};

	struct FString GetDisplayName ( );
	float GetCollisionHeight ( );
	float GetCollisionRadius ( );
};

UClass* AcAPBSkeletalMeshActor::pClassPointer = NULL;

// Class APBGame.cContact
// 0x00C0 (0x0318 - 0x0258)
class AcContact : public AcAPBSkeletalMeshActor
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0258 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiAmmoSupplier;                           		// 0x025C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0260 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FEnumeratedName                             m_eContact;                                       		// 0x0264 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHUDMarkerID_Unpledged;                         		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                m_nHUDMarkerID_Pledged;                           		// 0x0278 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pSddDataRow;                                    		// 0x027C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      m_eFaction;                                       		// 0x0280 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eContactInteractionState;                       		// 0x0281 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eContactInteractionType;                        		// 0x0282 (0x0001) [0x0000000000000000]              
	class USkelControlLookAt*                          m_pLookAtControl;                                 		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBPawn*                                   m_pLocalPawn;                                     		// 0x0288 (0x0004) [0x0000000000000000]              
	class AcAPBPlayerController*                       m_InteractingController;                          		// 0x028C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bChangedContactInteractionState : 1;            		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bNextStateOnAnimEnd : 1;                        		// 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bInitiateCSAOnAlertIdle : 1;                    		// 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              m_fLastHailTime;                                  		// 0x0294 (0x0004) [0x0000000000000000]              
	struct FName                                       m_NextState;                                      		// 0x0298 (0x0008) [0x0000000000000000]              
	struct FName                                       m_NextStateAfterRotate;                           		// 0x02A0 (0x0008) [0x0000000000000000]              
	struct FName                                       m_aGreetingAnimNames[ 0x4 ];                      		// 0x02A8 (0x0020) [0x0000000000000000]              
	struct FName                                       m_aResponseAnimNames[ 0x4 ];                      		// 0x02C8 (0x0020) [0x0000000000000000]              
	struct FName                                       m_RotationAnimName;                               		// 0x02E8 (0x0008) [0x0000000000000000]              
	struct FRotator                                    m_rStartRotation;                                 		// 0x02F0 (0x000C) [0x0000000000000000]              
	float                                              m_fAngleRotationOffset;                           		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              m_fRotationSequenceLength;                        		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioTypeMangledWwiseID;                       		// 0x0304 (0x0004) [0x0000000000000000]              
	int                                                m_nRandomSeed;                                    		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              m_fTickDistance;                                  		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0314 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cContact" );

		return pClassPointer;
	};

	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
	void PostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void ClientBeginFaceToFaceInteraction ( class AcAPBPlayerController* PC, unsigned long bCanInteract, unsigned char eInteractionType );
	void ClientBeginRemoteInteraction ( class AcAPBPlayerController* PC );
	void eventCallClientBeginUse ( class AcAPBPlayerController* PC, unsigned long bCanInteract, unsigned char eInteractionType );
	void ClientEndUse ( );
	class AcAPBPlayerController* RetLocalPlayerController ( );
	void OnStateAnimEnd ( unsigned char eState, class UAnimNodeSequence* SeqNode );
	void GoToContactState ( struct FName NewState );
	void SetContactStateOnAnimEnd ( struct FName NewState );
	bool CanWaveGoodbye ( );
	bool CanHail ( );
	void ApplyRotationOffset ( float fDeltaTime );
	void GetAngleAndDirection ( struct FVector* vCurrent, struct FVector* vDesired, float* fAngle, unsigned char* eDir );
	void CalcBestFitRotationAnim ( float fAngleToRotate, unsigned char eDirection );
	bool TryInitRotation ( struct FVector vDesiredDirection );
	bool CanEndInteraction ( );
	float RetHailTimeReset ( );
	float RetOuterProximityRadius ( );
	float RetInnerProximityRadius ( );
	void eventTickInteractionSimulation ( float DeltaTime );
	void StopLookAt ( );
	void StartLookAt ( );
	void SetContactState ( unsigned char eState );
	bool IsLocalPawnInProximity ( class AcAPBPlayerController* pController, float fRadius );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	unsigned char RetContactType ( );
	struct FString GetTitle ( );
	struct FString ToString ( );
	float GetCollisionHeight ( );
	float GetCollisionRadius ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
};

UClass* AcContact::pClassPointer = NULL;

// Class APBGame.cCriminalContact
// 0x0000 (0x0318 - 0x0318)
class AcCriminalContact : public AcContact
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCriminalContact" );

		return pClassPointer;
	};

};

UClass* AcCriminalContact::pClassPointer = NULL;

// Class APBGame.cEnforcerContact
// 0x0000 (0x0318 - 0x0318)
class AcEnforcerContact : public AcContact
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEnforcerContact" );

		return pClassPointer;
	};

};

UClass* AcEnforcerContact::pClassPointer = NULL;

// Class APBGame.cToDManager
// 0x0044 (0x0280 - 0x023C)
class AcToDManager : public AcToDManagerBase
{
public:
	unsigned long                                      m_bConfigInitToD : 1;                             		// 0x023C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bConfigToDActive : 1;                           		// 0x023C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_bActive : 1;                                    		// 0x023C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	float                                              m_nConfigToDHours;                                		// 0x0240 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_nConfigToDMins;                                 		// 0x0244 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nLengthOfDayHours;                              		// 0x0248 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nLengthOfDayMins;                               		// 0x024C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fToD;                                           		// 0x0250 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eToDPeriod;                                     		// 0x0254 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fToDOffset;                                     		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fToDSeconds;                                    		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                m_nHours;                                         		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                m_nMins;                                          		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                m_nSecs;                                          		// 0x0268 (0x0004) [0x0000000000000000]              
	class UcObservers*                                 m_aObservers;                                     		// 0x026C (0x0004) [0x0000000000000000]              
	struct FcWeatherData                               m_CurrentWeather;                                 		// 0x0270 (0x0010) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cToDManager" );

		return pClassPointer;
	};

	void eventSetCurrentWeather ( struct FcWeatherData newWeather );
	void LogDebugToDInfo ( );
	class UcObservers* GetObservers ( );
};

UClass* AcToDManager::pClassPointer = NULL;

// Class APBGame.cAPBPlayerReplicationInfo
// 0x0000 (0x02D4 - 0x02D4)
class AcAPBPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBPlayerReplicationInfo" );

		return pClassPointer;
	};

};

UClass* AcAPBPlayerReplicationInfo::pClassPointer = NULL;

// Class APBGame.cAPBClientServerDebugManager
// 0x0118 (0x0354 - 0x023C)
class AcAPBClientServerDebugManager : public AActor
{
public:
	unsigned long                                      m_bDisplayNPCIDs : 1;                             		// 0x023C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      m_bDisplayPedestrianStates : 1;                   		// 0x023C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDisplayVehicleRoutes : 1;                      		// 0x023C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDisplayVehicleStates : 1;                      		// 0x023C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDisplayVehicleSearches : 1;                    		// 0x023C (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                m_nPedestrianIDToDrawRouteFor_Local;              		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                m_nPedestrianIDToDrawRouteFor_Replicated;         		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nDisplayStatePedestrianID;                      		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                m_nDisplayRouteVehicleID;                         		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                m_nDisplayStateVehicleID;                         		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                m_nDisplaySearchVehicleID;                        		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_aNPCPositions[ 0x14 ];                          		// 0x0258 (0x00F0) [0x0000000000000020]              ( CPF_Net )
	struct FSTickTimesReplicated                       m_ServerTickTimes_Replicated;                     		// 0x0348 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBClientServerDebugManager" );

		return pClassPointer;
	};

	void ReceivedNewServerTickTimes ( );
	void ReceivedNewPedestrianIDToDrawFor ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcAPBClientServerDebugManager::pClassPointer = NULL;

// Class APBGame.cAPBGameReplicationInfo
// 0x01F0 (0x04D8 - 0x02E8)
class AcAPBGameReplicationInfo : public AGameReplicationInfo
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x02E8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AcDistrictActors*                            m_DistrictActors;                                 		// 0x02EC (0x0004) [0x0000000000000000]              
	class AcDisplayPointManager*                       m_DisplayPointManager;                            		// 0x02F0 (0x0004) [0x0000000000000000]              
	class AcToDManager*                                m_ToDManager;                                     		// 0x02F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UcAudioManager*                              m_AudioManager;                                   		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              m_fGroupUnreliableDataUpdatePeriod;               		// 0x02FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AcUploadManager*                             m_UploadManager;                                  		// 0x0300 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_aJunctionStatus[ 0x190 ];                       		// 0x0304 (0x0190) [0x0000000000000020]              ( CPF_Net )
	int                                                nJunctions;                                       		// 0x0494 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBClientServerDebugManager*               m_pAPBClientServerDebugManager;                   		// 0x0498 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      m_bLevelLoadsComplete : 1;                        		// 0x049C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_cfg_bEnablePlayerDataLogging : 1;               		// 0x049C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_bIsDataLogged : 1;                              		// 0x049C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bMissionsEnabled : 1;                           		// 0x049C (0x0004) [0x0000000000004020] [0x00000008] ( CPF_Net | CPF_Config )
	unsigned long                                      m_bAllPvPDamageEnabled : 1;                       		// 0x049C (0x0004) [0x0000000000004020] [0x00000010] ( CPF_Net | CPF_Config )
	unsigned long                                      m_bAllPvEDamageEnabled : 1;                       		// 0x049C (0x0004) [0x0000000000004020] [0x00000020] ( CPF_Net | CPF_Config )
	unsigned long                                      m_bScoringIncludeTestContacts : 1;                		// 0x049C (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      m_bUseNewTrackedActivities : 1;                   		// 0x049C (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      m_bFastShortTimeout : 1;                          		// 0x049C (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      m_bActiveSteering : 1;                            		// 0x049C (0x0004) [0x0000000000004020] [0x00000200] ( CPF_Net | CPF_Config )
	unsigned long                                      m_bStatsEnabled : 1;                              		// 0x049C (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	int                                                m_cfg_nPlayerDataLogTime;                         		// 0x04A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     m_cfg_sPlayerDataFile;                            		// 0x04A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                m_nDebugBatchId;                                  		// 0x04B0 (0x0004) [0x0000000000000000]              
	int                                                m_nDistrictCriminalCount;                         		// 0x04B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nDistrictEnforcerCount;                         		// 0x04B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sSessionGuid;                                   		// 0x04BC (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                m_nDistrictInstanceType;                          		// 0x04C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< float >                                    afTimeNextStats;                                  		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBGameReplicationInfo" );

		return pClassPointer;
	};

	void DistrictInstanceTypeChanged ( );
	void DistrictPlayerCountChanged ( struct FName VarName );
	void ReceivedJunctionStatus ( int pr_nElementIndex );
	void eventReplicatedEvent ( struct FName VarName );
	void eventReplicatedArrayEvent ( struct FName sArrayName, int nElementIndex );
	void GroupUpdateTimerFunc ( );
	void GroupUpdateTimerFuncNative ( );
	void CreateLC ( class AcToDManager* pr_ToDManager );
	bool IsAPBDistrict ( );
	void eventNotifyLocalControllersOnLevelLoad ( );
	void FinishedBlockedLoads ( );
	void LinkActiveFeatures ( );
	void NotifyResourceAllocatorLevelLoadsComplete ( );
	void ReportFinishedBlockedLoads ( );
	void NotifyNetDriverLevelLoadsComplete ( );
	void PostBeginPlay ( );
	bool RetUsingMasterSpawnZones ( );
	void eventCallRemovePRIBase ( class APlayerReplicationInfo* PRI );
	void AllocateAPBDebugManager ( );
	class AcUploadManager* RetUploadManager ( );
	class AcToDManagerBase* RetToDManagerInterface ( );
	class AcToDManager* RetToDManager ( );
	class AcDisplayPointManager* RetDisplayPointManager ( );
	class AcDistrictActors* RetDistrictActors ( );
	struct FString RetNewGuid ( );
	void DumpStats ( unsigned char eType );
};

UClass* AcAPBGameReplicationInfo::pClassPointer = NULL;

// Class APBGame.cGroup
// 0x0204 (0x0244 - 0x0040)
class UcGroup : public UObject
{
public:
	struct FGroupMember                                m_aMembers[ 0x14 ];                               		// 0x0040 (0x01E0) [0x0000000000000000]              
	int                                                m_nIdentifier;                                    		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                m_nLeaderUID;                                     		// 0x0224 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pCollisionGroup;                                		// 0x0228 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      m_eFaction;                                       		// 0x022C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nNumMembers;                                    		// 0x022D (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bIsPublic : 1;                                  		// 0x0230 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWasReadyForMissions : 1;                       		// 0x0230 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< int >                                      m_anAttachedServerHUDMarkerIDs;                   		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nLeadersPledgedContactRowID;                    		// 0x0240 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGroup" );

		return pClassPointer;
	};

	void SetLeader ( int nCharacterUID );
	void OnUnreliableDataReceived ( struct FUnreliableDataPacket packet );
	void RemoveMember ( int nCharacterUID );
	void AddMember ( struct FGroupMember newMember );
};

UClass* UcGroup::pClassPointer = NULL;

// Class APBGame.cLookupTextureTestActor
// 0x0008 (0x0248 - 0x0240)
class AcLookupTextureTestActor : public AStaticMeshActor
{
public:
	class UMaterialInstanceConstant*                   m_MatInst;                                        		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextureDynamicLookup*                       m_LookupTex;                                      		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLookupTextureTestActor" );

		return pClassPointer;
	};

};

UClass* AcLookupTextureTestActor::pClassPointer = NULL;

// Class APBGame.TextureDynamicLookup
// 0x0018 (0x0108 - 0x00F0)
class UTextureDynamicLookup : public UTexture
{
public:
	TArray< unsigned char >                            m_afValues;                                       		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nWidth;                                         		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      m_Format;                                         		// 0x0100 (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    m_pResource;                                      		// 0x0104 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.TextureDynamicLookup" );

		return pClassPointer;
	};

};

UClass* UTextureDynamicLookup::pClassPointer = NULL;

// Class APBGame.cAPBCollisionDamage
// 0x0000 (0x0090 - 0x0090)
class UcAPBCollisionDamage : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCollisionDamage" );

		return pClassPointer;
	};

};

UClass* UcAPBCollisionDamage::pClassPointer = NULL;

// Class APBGame.cAPBCriticalDamage
// 0x0000 (0x0090 - 0x0090)
class UcAPBCriticalDamage : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCriticalDamage" );

		return pClassPointer;
	};

};

UClass* UcAPBCriticalDamage::pClassPointer = NULL;

// Class APBGame.cAPBStaminaDrain
// 0x0000 (0x0090 - 0x0090)
class UcAPBStaminaDrain : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBStaminaDrain" );

		return pClassPointer;
	};

};

UClass* UcAPBStaminaDrain::pClassPointer = NULL;

// Class APBGame.cAPBStunDamage
// 0x0000 (0x0090 - 0x0090)
class UcAPBStunDamage : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBStunDamage" );

		return pClassPointer;
	};

};

UClass* UcAPBStunDamage::pClassPointer = NULL;

// Class APBGame.cArsonDamageType
// 0x0000 (0x0090 - 0x0090)
class UcArsonDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cArsonDamageType" );

		return pClassPointer;
	};

};

UClass* UcArsonDamageType::pClassPointer = NULL;

// Class APBGame.cBombingDamageType
// 0x0000 (0x0090 - 0x0090)
class UcBombingDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBombingDamageType" );

		return pClassPointer;
	};

};

UClass* UcBombingDamageType::pClassPointer = NULL;

// Class APBGame.cBurglaryDamageType
// 0x0000 (0x0090 - 0x0090)
class UcBurglaryDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cBurglaryDamageType" );

		return pClassPointer;
	};

};

UClass* UcBurglaryDamageType::pClassPointer = NULL;

// Class APBGame.cDamageFilterComponent
// 0x001F (0x0078 - 0x0059)
class UcDamageFilterComponent : public UActorComponent
{
public:
	struct FPointer                                    VfTable_IDamageInterface;                         		// 0x005C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FtFilterEntry >                     m_FilterList;                                     		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FtTimerEntry >                      m_TimerList;                                      		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDamageFilterComponent" );

		return pClassPointer;
	};

	bool FilterHealing ( class UClass* DamageType );
	bool FilterDamage ( class UClass* DamageType );
	bool IsFiltered ( class UClass* DamageType );
	void UpdateDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void RemoveDamageType ( class UClass* DamageType );
	void AddDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void eventHealDamageTimed ( float TimePeriod, int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamageTimed ( float TimePeriod, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool eventRestore ( int Amount, class AController* Healer, class UClass* DamageType );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	bool eventIsSoft ( );
	bool eventIsHard ( );
};

UClass* UcDamageFilterComponent::pClassPointer = NULL;

// Class APBGame.cExplosiveDamageType
// 0x0000 (0x0090 - 0x0090)
class UcExplosiveDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cExplosiveDamageType" );

		return pClassPointer;
	};

};

UClass* UcExplosiveDamageType::pClassPointer = NULL;

// Class APBGame.cH2HDamageType
// 0x0000 (0x0090 - 0x0090)
class UcH2HDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cH2HDamageType" );

		return pClassPointer;
	};

};

UClass* UcH2HDamageType::pClassPointer = NULL;

// Class APBGame.cH2HStunDamage
// 0x0000 (0x0090 - 0x0090)
class UcH2HStunDamage : public UcAPBStunDamage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cH2HStunDamage" );

		return pClassPointer;
	};

};

UClass* UcH2HStunDamage::pClassPointer = NULL;

// Class APBGame.cNoPenaltyRespawnDamageType
// 0x0000 (0x0090 - 0x0090)
class UcNoPenaltyRespawnDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNoPenaltyRespawnDamageType" );

		return pClassPointer;
	};

};

UClass* UcNoPenaltyRespawnDamageType::pClassPointer = NULL;

// Class APBGame.cPropEnroachmentDamageType
// 0x0000 (0x0090 - 0x0090)
class UcPropEnroachmentDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropEnroachmentDamageType" );

		return pClassPointer;
	};

};

UClass* UcPropEnroachmentDamageType::pClassPointer = NULL;

// Class APBGame.cWeaponDamageType
// 0x0000 (0x0090 - 0x0090)
class UcWeaponDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWeaponDamageType" );

		return pClassPointer;
	};

};

UClass* UcWeaponDamageType::pClassPointer = NULL;

// Class APBGame.cTaskTargetTriggerVolume
// 0x0000 (0x0278 - 0x0278)
class AcTaskTargetTriggerVolume : public AcAPBTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTargetTriggerVolume" );

		return pClassPointer;
	};

};

UClass* AcTaskTargetTriggerVolume::pClassPointer = NULL;

// Class APBGame.cTaskTargetVehicleSpawner
// 0x0068 (0x02A4 - 0x023C)
class AcTaskTargetVehicleSpawner : public AActor
{
public:
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiBombTarget;                             		// 0x0240 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcTaskTargetComponent*                       m_TaskTargetComponent;                            		// 0x0244 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AcAPBVehicle*                                m_Vehicle;                                        		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fBombFuseTime;                                  		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                m_nRandomSeed;                                    		// 0x0250 (0x0004) [0x0000000000000000]              
	class AcTaskObjective*                             m_TaskObjective;                                  		// 0x0254 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_nOwnerDeliverableHUDMarkerID;                   		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_bShowHUDMarkerToOwners;                         		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nOppositionDeliverableHUDMarkerID;              		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_bShowHUDMarkerToOpposition;                     		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bVehicleUsedBefore : 1;                         		// 0x0268 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class AcAPBPlayerController*                       m_pBomberPC;                                      		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBPlayerController*                       m_pDefuserPC;                                     		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x0274 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOperationID;                            		// 0x0278 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepBombState;                                  		// 0x027C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepBombState_Initial;                          		// 0x0280 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepBombTimer;                                  		// 0x0284 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     m_vRepBombLocation;                               		// 0x0288 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID;                           		// 0x0294 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID_Initial;                   		// 0x0298 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOpposingSideID;                         		// 0x029C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FPointer                                    m_pSddVehicleSetupType;                           		// 0x02A0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTargetVehicleSpawner" );

		return pClassPointer;
	};

	bool APBTriggerEvent ( class UClass* InEventClass, class AActor* InInstigator, TArray< struct FString > aLinksToActivate, TArray< class USequenceVariable* > aVariablesToUpdate, unsigned long bTest );
	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void ClientNotifyBombTimerUpdated ( int nBombTimeRemaining );
	void ClientNotifyBombStateChanged ( int nBombState, unsigned long bAllowTransitionEffects );
	void ClientNotifyBombLocationChanged ( struct FVector vecLocation );
	class AcAPBPlayerController* RetDefuser ( );
	class AcAPBPlayerController* RetBomber ( );
	int RetBombState ( );
	bool IsBombDefused ( );
	bool IsBombExploded ( );
	bool IsBombPlanted ( );
	void DefuseBomb ( class AcAPBPlayerController* pDefuserPC );
	void PlantBomb ( class AcAPBPlayerController* pBomberPC );
	void NotifyBombDisposalSuccessful ( );
	void NotifyBombExploded ( );
	void NotifyBombFuseTriggered ( );
	class UiBombTarget* RetBombTarget ( );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	bool IsDeliverableVehicle ( );
	void SetStateAsDeliverableVehicle ( unsigned long bIsDeliverableVehicle );
	void InstigateTaskOpposition ( );
	bool IsPawnBlockingSpawnZone ( class APawn* PawnInZone );
	class AcAPBVehicle* RetVehicle ( );
	void SpawnVehicle ( );
	void RequestVehicleSpawn ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcTaskTargetVehicleSpawner::pClassPointer = NULL;

// Class APBGame.cTaskItem
// 0x0058 (0x0294 - 0x023C)
class AcTaskItem : public AActor
{
public:
	struct FPointer                                    VfTable_IiDeliverable;                            		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AcTaskObjective*                             m_TaskObjective;                                  		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                m_nSourceTaskTarget;                              		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                m_nVariety;                                       		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eBatch;                                         		// 0x024C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCurrentState;                                  		// 0x024D (0x0001) [0x0000000000000000]              
	int                                                m_nHUDMarkerID;                                   		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                m_nOppositionHUDMarkerID;                         		// 0x0254 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bShowHUDMarkerToOwners : 1;                     		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bShowHUDMarkerToOpposition : 1;                 		// 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bPickedUpBefore : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bOpenWorldTaskItem : 1;                         		// 0x0258 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDebugTaskItem : 1;                             		// 0x0258 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                m_nTaskMarkerIndex;                               		// 0x025C (0x0004) [0x0000000000000000]              
	class AcTaskItemPickup*                            m_Pickup;                                         		// 0x0260 (0x0004) [0x0000000000000000]              
	class AcHoldableItemManager*                       m_HoldableItemManager;                            		// 0x0264 (0x0004) [0x0000000000000000]              
	class AcAPBVehicleBase*                            m_Vehicle;                                        		// 0x0268 (0x0004) [0x0000000000000000]              
	class AcCheckpoint*                                m_Checkpoint;                                     		// 0x026C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pSddTaskItemSubCategory;                        		// 0x0270 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemCategory;                           		// 0x0274 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemSize;                               		// 0x0278 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddItemAttachmentVisual;                       		// 0x027C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemVariety;                            		// 0x0280 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemVisual;                             		// 0x0284 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FScriptDelegate                             __OnTaskItemStateChanged__Delegate;               		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskItem" );

		return pClassPointer;
	};

	void SetDeliverableHUDMarkerVisibility ( unsigned long bHideAllFromOwners, unsigned long bHideAllFromOpposition );
	unsigned char RetDeliverableState ( );
	bool IsDebugTaskItem ( );
	bool IsOpenWorldTaskItem ( );
	void eventInvokeOnTaskItemStateChangedDelegate ( class AcTaskItem* pChangedTaskItem );
	void OnTaskItemStateChanged ( class AcTaskItem* pChangedTaskItem );
};

UClass* AcTaskItem::pClassPointer = NULL;

// Class APBGame.cTaskItemPickup
// 0x0044 (0x0280 - 0x023C)
class AcTaskItemPickup : public AActor
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AcTaskItem*                                  m_TaskItem;                                       		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                m_nVariety;                                       		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FPointer                                    m_pSddTaskItemSubCategory;                        		// 0x0248 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemCategory;                           		// 0x024C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemSize;                               		// 0x0250 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddItemAttachmentVisual;                       		// 0x0254 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemVariety;                            		// 0x0258 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskItemVisual;                             		// 0x025C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x0260 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0264 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0268 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class AcTaskDescription*                           m_TaskDescription;                                		// 0x026C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInIllegalLocation : 1;                         		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bInOutOfBoundsVolume : 1;                       		// 0x0270 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FScriptDelegate                             __OnItemPickedUp__Delegate;                       		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskItemPickup" );

		return pClassPointer;
	};

	void ServerIllegalLocation_APB ( );
	void ClientIllegalLocation_APB ( );
	void DestroyOpenWorldTaskItem ( );
	bool eventInvokeUsedBy ( class APawn* User );
	void PostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void OnPickup ( class AcAPBPawn* User );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool CanAddTaskItemsToInventory ( class AcHoldableItemManager* Inv );
	bool AddTaskItemsToInventory ( class AcHoldableItemManager* Inv );
	void InitFallingPhysics ( );
	void OnReplicatedTaskItemVariety ( );
	void OnItemPickedUp ( class AcTaskItem* pItem );
};

UClass* AcTaskItemPickup::pClassPointer = NULL;

// Class APBGame.cTaskItemMultiPickup
// 0x001C (0x029C - 0x0280)
class AcTaskItemMultiPickup : public AcTaskItemPickup
{
public:
	TArray< class AcTaskItem* >                        m_TaskItems;                                      		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FEnumeratedName                             m_TaskItemVariety;                                		// 0x028C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskItemMultiPickup" );

		return pClassPointer;
	};

	void ServerIllegalLocation_APB ( );
	bool CanAddTaskItemsToInventory ( class AcHoldableItemManager* Inv );
	bool AddTaskItemsToInventory ( class AcHoldableItemManager* Inv );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
};

UClass* AcTaskItemMultiPickup::pClassPointer = NULL;

// Class APBGame.cAPBEmitter
// 0x0008 (0x025C - 0x0254)
class AcAPBEmitter : public AEmitter
{
public:
	class USoundCue*                                   m_Sound;                                          		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             m_ParticleSystem;                                 		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBEmitter" );

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* AcAPBEmitter::pClassPointer = NULL;

// Class APBGame.cSpawnedAPBEmitter
// 0x0000 (0x025C - 0x025C)
class AcSpawnedAPBEmitter : public AcAPBEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSpawnedAPBEmitter" );

		return pClassPointer;
	};

};

UClass* AcSpawnedAPBEmitter::pClassPointer = NULL;

// Class APBGame.cClientHUDMarker
// 0x0058 (0x02B4 - 0x025C)
class AcClientHUDMarker : public AcSpawnedAPBEmitter
{
public:
	struct FPointer                                    VfTable_IiHUDMarker;                              		// 0x025C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FHUDMarkerData                              m_HUDMarkerData;                                  		// 0x0260 (0x0020) [0x0000000000000000]              
	unsigned long                                      m_bUpdatingOffsetLocation : 1;                    		// 0x0280 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bShowTaskMarker : 1;                            		// 0x0280 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCachedAutoRouteOffsetValid : 1;                		// 0x0280 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FPointer                                    m_pVisualData;                                    		// 0x0284 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    m_pDistrictMapMarkerData;                         		// 0x0288 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    m_pTaskMarkerData;                                		// 0x028C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              m_fPingOpacity;                                   		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              m_fFlashingOpacity;                               		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              m_fFlashingDelta;                                 		// 0x0298 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sText;                                          		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_vecCachedAutoRouteOffset;                       		// 0x02A8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cClientHUDMarker" );

		return pClassPointer;
	};

	unsigned char GetCategory ( );
	struct FVector GetLocation ( );
	void SetText ( struct FString sText );
	void SetIsBeingModified ( unsigned long bIsBeingModified );
	void SetUserData2 ( int nUserData2 );
	void SetUserData ( int nUserData );
	void SetState ( unsigned char eState );
	void SetType ( unsigned char eType );
	void SetOffsetOverride ( unsigned char eOffsetOverride, unsigned char eAutoRouteData );
	void SetLinkedActor ( class AActor* pLinkedActor, struct FVector ActorPosition );
};

UClass* AcClientHUDMarker::pClassPointer = NULL;

// Class APBGame.cHUDMarkerManager
// 0x00C4 (0x0104 - 0x0040)
class UcHUDMarkerManager : public UObject
{
public:
	TArray< class UcServerHUDMarker* >                 m_ServerHUDMarkers;                               		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcClientHUDMarker* >                 m_ClientHUDMarkers;                               		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcRemoteHUDMarker* >                 m_RemoteHUDMarkers;                               		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMap_Mirror                                 m_RemoteMap;                                      		// 0x0064 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_ServerMap;                                      		// 0x00A0 (0x003C) [0x0000000000001000]              ( CPF_Native )
	int                                                m_nFreeMarkerID;                                  		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                m_nPlayerCategoryFilter;                          		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                m_nServerCategoryFilter;                          		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bShowWSMarkers : 1;                             		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	TArray< struct FScriptDelegate >                   m_OnHUDMarkersChangedCallbacks;                   		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHUDMarkersChanged__Delegate;                  		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHUDMarkerManager" );

		return pClassPointer;
	};

	float GetWorldTime ( );
	void UpdateTick ( );
	bool IsCategoryVisible ( unsigned char eCategory );
	void ClientShowWSMarkers ( unsigned long bShow );
	bool ClientShowMarkerType ( unsigned char eCategory, unsigned long bShow );
	bool ServerShowMarkerType ( unsigned char eCategory, int nCharacterID, unsigned long bShow );
	bool SetText ( int nMarkerID, struct FString sText );
	bool SetIsBeingModified ( int nMarkerID, unsigned long bIsBeingModified );
	bool SetOffsetOverride ( int nMarkerID, unsigned char eOffsetOverride, unsigned char eAutoRouteData );
	bool SetUserData2 ( int nMarkerID, int nUserData2 );
	bool SetUserData ( int nMarkerID, int nUserData );
	bool SetState ( int nMarkerID, unsigned char eState );
	bool SetType ( int nMarkerID, unsigned char eType );
	bool SetNeverUpdate ( int nServerMarkerID, unsigned long bNeverUpdate );
	bool AttachToFaction ( int nServerMarkerID, unsigned char eFaction );
	bool DetatchFromCharacter ( int nServerMarkerID, int nCharacterID );
	bool AttachToCharacter ( int nServerMarkerID, int nCharacterID );
	bool DestroyRemoteMarker ( int nServerMarkerID );
	int OnRecieveReplicatedText ( int nServerID, struct FString sText );
	int ConstructRemoteMarker ( struct FHUDMarkerData markerData, int nServerID );
	bool DestroyMarker ( int* nMarkerID );
	int ConstructClientMarker ( class AActor* pLinkedActor, unsigned char eType );
	int ConstructServerMarker ( class AActor* pLinkedActor, unsigned char eType );
	class AcClientHUDMarker* GetClientHUDMarker ( int nClientMarkerID );
	class AcRemoteHUDMarker* GetRemoteHUDMarker ( int nServerMarkerID );
	class UcServerHUDMarker* GetServerHUDMarker ( int nServerMarkerID );
	class UcHUDMarkerManager* GetInstanceScript ( );
	void RemoveOnHUDMarkersChangedCallbacks ( class UObject* pObject );
	void AddOnHUDMarkersChangedCallback ( class UObject* pObject, struct FName FunctionName );
	void eventNotifyHUDMarkersChanged ( );
	void OnHUDMarkersChanged ( );
};

UClass* UcHUDMarkerManager::pClassPointer = NULL;

// Class APBGame.cRemoteHUDMarker
// 0x0008 (0x02BC - 0x02B4)
class AcRemoteHUDMarker : public AcClientHUDMarker
{
public:
	int                                                m_nServerID;                                      		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              m_fLastUpdateTime;                                		// 0x02B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cRemoteHUDMarker" );

		return pClassPointer;
	};

};

UClass* AcRemoteHUDMarker::pClassPointer = NULL;

// Class APBGame.cReplicatedHUDMarkerGroup
// 0x0968 (0x0BA4 - 0x023C)
class AcReplicatedHUDMarkerGroup : public AReplicationInfo
{
public:
	class APlayerController*                           m_pCharacterPC;                                   		// 0x023C (0x0004) [0x0000000000000000]              
	struct FHUDMarkerUpdateInfo                        m_aHUDMarkerUpdates[ 0x64 ];                      		// 0x0240 (0x0960) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nSlotsUsed;                                     		// 0x0BA0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReplicatedHUDMarkerGroup" );

		return pClassPointer;
	};

	void OnHUDMarkerUpdated ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcReplicatedHUDMarkerGroup::pClassPointer = NULL;

// Class APBGame.cServerHUDMarker
// 0x007C (0x00BC - 0x0040)
class UcServerHUDMarker : public UObject
{
public:
	struct FPointer                                    VfTable_IiHUDMarker;                              		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FHUDMarkerData                              m_HUDMarkerData;                                  		// 0x0044 (0x0020) [0x0000000000000000]              
	int                                                m_nID;                                            		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< int >                                      m_AttachedSides;                                  		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_AttachedGroups;                                 		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_AttachedCharacters;                             		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAPBPlayerController* >             m_membershipList;                                 		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      m_eFactionFilter;                                 		// 0x0098 (0x0001) [0x0000000000000000]              
	float                                              m_fLastReplicatedTime;                            		// 0x009C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bNeverUpdate : 1;                               		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCachedAutoRouteOffsetValid : 1;                		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     m_sText;                                          		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_vecCachedAutoRouteOffset;                       		// 0x00B0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cServerHUDMarker" );

		return pClassPointer;
	};

	void SetText ( struct FString sText );
	void SetIsBeingModified ( unsigned long bIsBeingModified );
	void SetUserData2 ( int nUserData2 );
	void SetUserData ( int nUserData );
	void SetState ( unsigned char eState );
	void SetType ( unsigned char eType );
	void SetOffsetOverride ( unsigned char eOffsetOverride, unsigned char eAutoRouteData );
	void SetLinkedActor ( class AActor* pLinkedActor, struct FVector ActorPosition );
	void ReplicateThroughPC ( unsigned char eReplicationType, class AcAPBPlayerController* pPC );
	void ReplicateToClients ( unsigned char eReplicationType );
	struct FVector GetLocation ( );
};

UClass* UcServerHUDMarker::pClassPointer = NULL;

// Class APBGame.cTestItem
// 0x0004 (0x0240 - 0x023C)
class AcTestItem : public AActor
{
public:
	int                                                m_HUDMarkerID;                                    		// 0x023C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTestItem" );

		return pClassPointer;
	};

	void eventDestroyed ( );
	void NativePostBeginPlay ( );
	void eventPostBeginPlay ( );
};

UClass* AcTestItem::pClassPointer = NULL;

// Class APBGame.iHUDMarker
// 0x0000 (0x0040 - 0x0040)
class UiHUDMarker : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iHUDMarker" );

		return pClassPointer;
	};

	void SetText ( struct FString sText );
	void SetIsBeingModified ( unsigned long bIsBeingModified );
	void SetUserData2 ( int nUserData2 );
	void SetUserData ( int nUserData );
	void SetState ( unsigned char eState );
	void SetType ( unsigned char eType );
	void SetOffsetOverride ( unsigned char eOffsetOverride, unsigned char eAutoRouteData );
	void SetLinkedActor ( class AActor* pLinkedActor, struct FVector ActorPosition );
};

UClass* UiHUDMarker::pClassPointer = NULL;

// Class APBGame.cCCShoppingCart
// 0x0018 (0x0078 - 0x0060)
class UcCCShoppingCart : public UcUIListProvider
{
public:
	TArray< struct FCartItem >                         m_aCartItems;                                     		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGolemDescriptor*                            m_pOldDescriptor;                                 		// 0x006C (0x0004) [0x0000000000000000]              
	class UGolemDescriptor*                            m_pDescriptor;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bLocked : 1;                                    		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCCShoppingCart" );

		return pClassPointer;
	};

};

UClass* UcCCShoppingCart::pClassPointer = NULL;

// Class APBGame.cSDDLCEditor
// 0x0000 (0x0040 - 0x0040)
class UcSDDLCEditor : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDLCEditor" );

		return pClassPointer;
	};

};

UClass* UcSDDLCEditor::pClassPointer = NULL;

// Class APBGame.cSDDCSA
// 0x0000 (0x0040 - 0x0040)
class UcSDDCSA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDCSA" );

		return pClassPointer;
	};

};

UClass* UcSDDCSA::pClassPointer = NULL;

// Class APBGame.cTaskObjective
// 0x010C (0x0348 - 0x023C)
class AcTaskObjective : public AActor
{
public:
	unsigned long                                      m_bUseLegacyVehicleMissionCode : 1;               		// 0x023C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bReplicatedIsBombTimerActive : 1;               		// 0x023C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      m_bActive : 1;                                    		// 0x023C (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              m_fObjectiveBeginTimeStamp;                       		// 0x0240 (0x0004) [0x0000000000000000]              
	TArray< class UiBombTarget* >                      m_aBombTargets;                                   		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nNumberOfBombsSet;                              		// 0x0250 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nNumberOfBombsExploded;                         		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fCachedBombTimeRemaining;                       		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                m_nReplicatedBombTimeRemaining;                   		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nReplicatedArmedGuardTimeRemaining;             		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                m_nReplicatedNumberOfBombTargets;                 		// 0x0264 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nEscapeCurrentPenaltySeconds;                   		// 0x0268 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nEscapeBarLimit;                                		// 0x026C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nEscapeBar;                                     		// 0x0270 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FPointer                                    m_pEscapeInfo;                                    		// 0x0274 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      m_eTaskObjectiveState;                            		// 0x0278 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eSideFaction;                                   		// 0x0279 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class AcTaskDescription*                           m_TaskDescription;                                		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                m_nSddTaskObjectiveRow;                           		// 0x0280 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcTaskTargetAllocation*                      m_TaskTargetAllocation;                           		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetsTriggeredOwners;                        		// 0x0288 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nTargetsTriggeredOpposition;                    		// 0x028C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nTaskItemsSpawned;                              		// 0x0290 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nTaskItemsDelivered;                            		// 0x0294 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nVehiclesDelivered;                             		// 0x0298 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCheckpointsReachedByClient;                    		// 0x029C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pOwningSide;                                    		// 0x02A0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< class AcTaskItem* >                        m_TaskItems;                                      		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTaskObjective                              m_SddTaskObjective;                               		// 0x02B0 (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pSddTaskOperation;                              		// 0x0340 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pSddTaskOperationCategory;                      		// 0x0344 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskObjective" );

		return pClassPointer;
	};

	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateEscapeState ( );
	void OnCheckpointReachedByThisClient ( class AActor* pActor );
	int RetCheckpointsReachedByThisClient ( );
	int RetNumberOfBombsExploded ( );
	int RetNumberOfBombTargets ( );
	int RetNumberOfBombsActive ( );
	bool RetReplicatedIsBombTimerActive ( );
	int RetReplicatedBombTimeRemaining ( );
	float RetBombTimeRemaining ( );
	bool IsBombTimerActive ( );
	void OnBombTimerCompleted ( );
	void OnTaskObjectiveReplicated ( );
};

UClass* AcTaskObjective::pClassPointer = NULL;

// Class APBGame.cTaskTargetAllocation
// 0x00B8 (0x02F4 - 0x023C)
class AcTaskTargetAllocation : public AActor
{
public:
	class AcTaskDescription*                           m_TaskDescription;                                		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                m_nAllocationIndex;                               		// 0x0240 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsOwnerObjective : 1;                          		// 0x0244 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDebugBypassConstraintChecks : 1;               		// 0x0244 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FTaskTargetAllocation                       m_SddTaskTargetAllocation;                        		// 0x0248 (0x003C) [0x0000000000000000]              
	struct FTaskTargetType                             m_SddTaskTargetType;                              		// 0x0284 (0x0038) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTaskTargetClass                            m_SddTaskTargetClass;                             		// 0x02BC (0x0008) [0x0000000000000000]              
	TArray< struct FAllocatedTaskTarget >              m_aTargets;                                       		// 0x02C4 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class AcDistrictBlock*                             m_pDistrictBlock;                                 		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetReserveCount;                            		// 0x02D4 (0x0004) [0x0000000000000000]              
	TArray< class AcDistrictBlock* >                   m_PotentialBlocks;                                		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AcTaskTargetAllocation*                      m_pParentConstraint;                              		// 0x02E4 (0x0004) [0x0000000000000000]              
	TArray< class AcTaskTargetAllocation* >            m_ChildConstraints;                               		// 0x02E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTargetAllocation" );

		return pClassPointer;
	};

	void ProcessPendingTargetReallocations ( );
	void PostBeginPlay ( );
};

UClass* AcTaskTargetAllocation::pClassPointer = NULL;

// Class APBGame.cDistrictActors
// 0x0068 (0x02A4 - 0x023C)
class AcDistrictActors : public AActor
{
public:
	TArray< class AcContact* >                         m_Contacts;                                       		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerCharacterSpawnZone* >        m_EnforcerSpawnZones;                             		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerCharacterSpawnZone* >        m_CriminalSpawnZones;                             		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerCharacterSpawnZone* >        m_AllSpawnZones;                                  		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerCharacterMissionSpawnZone* > m_OwningSideMissionSpawnZones;                    		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerCharacterMissionSpawnZone* > m_OpposingSideMissionSpawnZones;                  		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcDistrictBlock* >                   m_DistrictBlocks;                                 		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcOpenWorldDropOff* >                m_OpenWorldDropOffs;                              		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bPreloadCommonAssets : 1;                       		// 0x029C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bStrictTaskTargetValidation : 1;                		// 0x029C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_bChooseFirstStageTargetsNearGroupLeader : 1;    		// 0x029C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	float                                              m_fMaxFirstStageTargetRadius;                     		// 0x02A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDistrictActors" );

		return pClassPointer;
	};

	void InitialiseContactMarkers ( class AcAPBPlayerController* pPC );
	void LogDistrictBlockContents ( int nDistrictBlockSddRow );
	void LevelLoadsComplete ( );
};

UClass* AcDistrictActors::pClassPointer = NULL;

// Class APBGame.cAPBCamera
// 0x0C18 (0x1064 - 0x044C)
class AcAPBCamera : public ACamera
{
public:
	unsigned long                                      bResetCameraInterpolation : 1;                    		// 0x044C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bUseCameraAdjustmentBlendNextUpdate : 1;        		// 0x044C (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bUseWorstLocationBlendNextUpdate : 1;           		// 0x044C (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bUseIdealLocationBlendNextUpdate : 1;           		// 0x044C (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bNeededToDoInterpToLastUpdate : 1;              		// 0x044C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bDoHiddenObjects : 1;                           		// 0x044C (0x0004) [0x0000000000002001] [0x00000020] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bDoPenetrationPrevention : 1;                   		// 0x044C (0x0004) [0x0000000000002001] [0x00000040] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bAlwaysHideLocalActor : 1;                      		// 0x044C (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bCameraRightSideOld : 1;                        		// 0x044C (0x0004) [0x0000000000002001] [0x00000100] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bCalculateOnServer : 1;                         		// 0x044C (0x0004) [0x0000000000004001] [0x00000200] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bSetLastActualCamLoc : 1;                       		// 0x044C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bLookBehind : 1;                                		// 0x044C (0x0004) [0x0000000000002001] [0x00000800] ( CPF_Edit | CPF_Transient )
	struct FVector                                     LastActualCameraOrigin;                           		// 0x0450 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              PenetrationBlendOutTime;                          		// 0x045C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PenetrationBlendInTime;                           		// 0x0460 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PenetrationBlockedPct;                            		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PenetrationExtentScale;                           		// 0x0468 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     LastActualOriginOffset;                           		// 0x046C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_LastActualCameraRotation;                       		// 0x0478 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FAPBViewAdjustmentData                      m_LastViewAdjustments;                            		// 0x0484 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FAPBViewAdjustmentData                      m_LastPrimaryViewAdjustments;                     		// 0x0494 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FAPBViewAdjustmentData                      m_LastSecondaryViewAdjustments;                   		// 0x04A4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCamFOV;                                       		// 0x04B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeDefault*                      APBCameraModeDefault;                             		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeMarksManShip*                 APBCameraModeMarksManShip;                        		// 0x04BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeDeath*                        APBCameraModeDeath;                               		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeSprinting*                    APBCameraModeSprinting;                           		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeADA*                          APBCameraModeADA;                                 		// 0x04C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeLean*                         APBCameraModeLeanTowardScreenCentre;              		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeVehicleUber*                  APBCameraModeVehicleUber;                         		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeVehicleDeath*                 APBCameraModeVehicleDeath;                        		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeFly*                          APBCameraModeFly;                                 		// 0x04D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeUnstick*                      APBCameraModeUnstick;                             		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeAttachToActor*                APBCameraModeAttachToActor;                       		// 0x04E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModeDirector*                     APBCameraModeDirector;                            		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModifierScreenShake*              APBCameraModifierScreenShake;                     		// 0x04E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraModifierSteadyCam*                APBCameraModifierSteadyCam[ 0x3 ];                		// 0x04EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraMode*                             CurrentCamMode;                                   		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WorstLocOffSetInterpSpeed;                        		// 0x04FC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     LastWorstLocationOffSet;                          		// 0x0500 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPenetrationAvoidanceFeeler >       PenetrationAvoidanceFeelers;                      		// 0x050C (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_LastActualCamLoc;                               		// 0x0518 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FScreenShakeStruct                          m_ScreenShakePresets[ 0xB ];                      		// 0x0524 (0x04D0) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   m_ClientViewPortSize;                             		// 0x09F4 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FsTargetTypeSettings                        m_TargetTypeSettings[ 0x4 ];                      		// 0x09FC (0x0640) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CameraExtent;                                     		// 0x103C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     CameraExtentAlreadyHidden;                        		// 0x1048 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              fCameraExtentXY;                                  		// 0x1054 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	float                                              fCameraExtentZ;                                   		// 0x1058 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	class AActor*                                      m_LastActorUpdated;                               		// 0x105C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAPBCameraMode*                             m_CamModeLastTick;                                		// 0x1060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCamera" );

		return pClassPointer;
	};

	bool SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	unsigned char GetCurrentViewPort ( );
	void SetSteadyCamModifierChangeInMovementSpeedPerSecond ( float fChange, int nCameraModifier );
	void SetSteadyCamModifierDelayMinMax ( float FMin, float FMax, int nCameraModifier );
	void SetSteadyCamModifierMovementSpeedMinMax ( float FMin, float FMax, int nCameraModifier );
	void SetSteadyCamModifierInterpToSpeedMinMax ( float FMin, float FMax, int nCameraModifier );
	void SetSteadyCamModifierRotationMaximumDeviation ( float fYaw, float fPitch, float fRoll, int nCameraModifier );
	void SetModifierSteadyCam ( unsigned long bEnable, int nCameraModifier );
	void RemoveCameraScreenShake ( int nScreenShake );
	void ChangeScreenShakeRotation ( int nScreenShake, float fRotationAmplitudeX, float fRotationAmplitudeY, float fRotationAmplitudeZ, float fRotationFrequencyX, float fRotationFrequencyY, float fRotationFrequencyZ );
	void ChangeScreenShakeLocation ( int nScreenShake, float fLocationAmplitudeX, float fLocationAmplitudeY, float fLocationAmplitudeZ, float fLocationFrequencyX, float fLocationFrequencyY, float fLocationFrequencyZ );
	bool SetCameraModeOriginLagSpeed ( unsigned char eCameraModeChange, float fLagSpeed );
	void SetCameraOriginLagSpeed ( float fLagSpeed );
	bool SetCameraModeFOV ( unsigned char eCameraModeChange, unsigned char ViewPortUse, float FOV );
	class UcAPBCameraMode* GetCameraMode ( unsigned char eCameraModeGet );
	bool SetCameraModeOffsets ( unsigned char eCameraModeChange, struct FAPBViewAdjustmentData APBViewAdjustments, unsigned char ViewPortUse, unsigned long bPrimaryAdjustments );
	void MoveCameraModeOffsets ( float fDeltaTime, struct FAPBViewAdjustmentData APBViewAdjustmentDirection, unsigned long bPrimaryAdjustments );
	void AlwaysHideLocalActor ( unsigned long bAlwaysHideLocalActor );
	void DoPenetrationPrevention ( unsigned long bDoPenetrationPrevention );
	void DoHiddenObjects ( unsigned long bDoHiddenObjects );
	void SetPenetrationBlockedPct ( float fCameraCollideParam );
	float RetPenetrationBlockedPct ( );
	void MoveCameraPosition ( float fDeltaTime, float fDirection );
	void eventDestroyed ( );
	void ToggleView ( );
	bool IsInLookBehind ( );
	void SetColorScale ( struct FVector NewColorScale );
	void PreventCameraPenetration ( class AActor* ActorUpdate, float DeltaTime, float CameraExtentScale, unsigned long bSingleRayOnly, struct FVector* WorstLocation, struct FVector* DesiredLocation, float* DistBlockedPct );
	void PlayerUpdateCameraNative ( class AActor* ActorUpdate, float DeltaTime, struct FTViewTarget* OutVT );
	void SetDoLookBehind ( unsigned long bDoLookBehind );
	void PlayShakePreset ( int Preset );
	void GetIdealCamera ( class AActor* ActorUpdate, struct FVector* IdealCameraOrigin, struct FRotator* IdealCameraRotation );
	bool GetSecondaryViewAdjustment ( class AActor* ActorUpdate, unsigned char eCurrentViewPortType, struct FRotator ViewRotation, struct FAPBViewAdjustmentData* ViewAdjustments );
	void GetPrimaryViewAdjustment ( class AActor* ActorUpdate, unsigned char eCurrentViewPortType, struct FRotator ViewRotation, struct FAPBViewAdjustmentData* ViewAdjustments );
	void SetUserDefinedViewScalar ( unsigned char TargetType, float UserDefinedViewScalar );
	void SetPersistantData ( unsigned char TargetType, unsigned char CameraPosition, float UserDefinedViewScalar );
	void ResetPenetration ( );
	void ResetCameraInterpolation ( );
};

UClass* AcAPBCamera::pClassPointer = NULL;

// Class APBGame.cAPBCameraMode
// 0x010C (0x014C - 0x0040)
class UcAPBCameraMode : public UCameraMode
{
public:
	float                                              m_fAdjustmentBlendSpeed;                          		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFOVBlendSpeed;                                 		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LazyCamSpeed;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorstLocOffset;                                   		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_SecondaryWorstLocOffset;                        		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDoPredictiveAvoidance : 1;                       		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDoPenetrationPrevention : 1;                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bUseDefaultCameraAdjustments : 1;               		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bCanDoLookBehind : 1;                           		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bSecondaryViewAdjustmentsDifferFromPrimary : 1; 		// 0x0064 (0x0004) [0x0000000000000000] [0x00000010] 
	class AcAPBCamera*                                 m_Camera;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FAPBViewAdjustmentData                      m_APBPrimaryViewAdjustments[ 0x6 ];               		// 0x006C (0x0060) [0x0000000000000001]              ( CPF_Edit )
	struct FAPBViewAdjustmentData                      m_APBSecondaryViewAdjustments[ 0x6 ];             		// 0x00CC (0x0060) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFOVAngle[ 0x6 ];                               		// 0x012C (0x0018) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eCameraMode;                                    		// 0x0144 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_IntendedTargetType;                             		// 0x0145 (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fPrimarySecondaryAdjustmentBlendSpeed;          		// 0x0148 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraMode" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraMode::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeCharacterBase
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeCharacterBase : public UcAPBCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeCharacterBase" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeCharacterBase::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeADA
// 0x0014 (0x0160 - 0x014C)
class UcAPBCameraModeADA : public UcAPBCameraModeCharacterBase
{
public:
	unsigned long                                      m_bFreezeCamera : 1;                              		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWasFreezeCamera : 1;                           		// 0x014C (0x0004) [0x0000000000000000] [0x00000002] 
	struct FVector                                     m_FreezeCamPos;                                   		// 0x0150 (0x000C) [0x0000000000000000]              
	float                                              m_LowestFreezeCamZCoord;                          		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeADA" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeADA::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeControllerBase
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeControllerBase : public UcAPBCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeControllerBase" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeControllerBase::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeAttachToActor
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeAttachToActor : public UcAPBCameraModeControllerBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeAttachToActor" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeAttachToActor::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeDeath
// 0x0024 (0x0170 - 0x014C)
class UcAPBCameraModeDeath : public UcAPBCameraModeCharacterBase
{
public:
	struct FVector                                     m_CameraIdealOrigin;                              		// 0x014C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_CameraIdealRotation;                            		// 0x0158 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_PawnDeathPositionLastUsed;                      		// 0x0164 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeDeath" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeDeath::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeDefault
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeDefault : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeDefault" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeDefault::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeDirector
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeDirector : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeDirector" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeDirector::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeFly
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeFly : public UcAPBCameraModeControllerBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeFly" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeFly::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeLean
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeLean : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeLean" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeLean::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeMarksManShip
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeMarksManShip : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeMarksManShip" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeMarksManShip::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeSprinting
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeSprinting : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeSprinting" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeSprinting::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeUnstick
// 0x0000 (0x014C - 0x014C)
class UcAPBCameraModeUnstick : public UcAPBCameraModeControllerBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeUnstick" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeUnstick::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeVehicleUber
// 0x009C (0x01E8 - 0x014C)
class UcAPBCameraModeVehicleUber : public UcAPBCameraMode
{
public:
	struct FtViewConeParams                            m_ViewConeParams;                                 		// 0x014C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FtLookBehindParams                          m_LookBehindParams;                               		// 0x0158 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FtAutoRollParams                            m_AutoRollParams;                                 		// 0x0160 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bEnableAutoLookbehind : 1;                      		// 0x0168 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                m_nCamRollMode;                                   		// 0x016C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_CurrentVehicleCamMode;                          		// 0x0170 (0x0001) [0x0000000000000000]              
	class AcAPBVehicle*                                m_CurrentVehicle;                                 		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    m_pCurrentCamSeatSetup;                           		// 0x0178 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     m_vLastGoodLocation;                              		// 0x017C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FtLookBehindState                           m_LookBehindState;                                		// 0x0188 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FtAutoRollState                             m_AutoRollState;                                  		// 0x0190 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FtDistrictMapState                          m_DistrictMapState;                               		// 0x01A8 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_PrevContrRotatorValue;                          		// 0x01BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_PrevVehicleViewRot;                             		// 0x01C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeSinceLastRotChange;                        		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastScaledDist;                                		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentScaledDist;                             		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBPawn*                                   m_LastAPBPawnUsing;                               		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBVehicleBase*                            m_LastAPBVehicleUsing;                            		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeVehicleUber" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeVehicleUber::pClassPointer = NULL;

// Class APBGame.cAPBCameraModeVehicleDeath
// 0x0018 (0x0200 - 0x01E8)
class UcAPBCameraModeVehicleDeath : public UcAPBCameraModeVehicleUber
{
public:
	struct FVector                                     m_vLastVehicleLocation;                           		// 0x01E8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_LastVehicleRotation;                            		// 0x01F4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModeVehicleDeath" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModeVehicleDeath::pClassPointer = NULL;

// Class APBGame.cAPBCameraModifier
// 0x0018 (0x0060 - 0x0048)
class UcAPBCameraModifier : public UCameraModifier
{
public:
	unsigned char                                      Priority;                                         		// 0x0048 (0x0001) [0x0000000000000000]              
	unsigned long                                      bExclusive : 1;                                   		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              AlphaInTime;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaOutTime;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Alpha;                                            		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetAlpha;                                      		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModifier" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModifier::pClassPointer = NULL;

// Class APBGame.cAPBCameraModifierScreenShake
// 0x000C (0x006C - 0x0060)
class UcAPBCameraModifierScreenShake : public UcAPBCameraModifier
{
public:
	TArray< struct FScreenShakeStruct >                Shakes;                                           		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModifierScreenShake" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModifierScreenShake::pClassPointer = NULL;

// Class APBGame.cAPBCameraModifierSteadyCam
// 0x0064 (0x00C4 - 0x0060)
class UcAPBCameraModifierSteadyCam : public UcAPBCameraModifier
{
public:
	struct FRotator                                    m_TargetRotationOffset;                           		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_InterpToRotationOffset;                         		// 0x006C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_MovingRotationOffset;                           		// 0x0078 (0x000C) [0x0000000000000000]              
	float                                              m_fCurrentInterpToRotationSpeed;                  		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentMovementSpeed;                          		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              m_fNextDelay;                                     		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentDelay;                                  		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCurrentlyActive : 1;                           		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAllowActivate : 1;                             		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FRotator                                    m_RotMaximumDeviation;                            		// 0x0098 (0x000C) [0x0000000000000000]              
	float                                              m_fInterpToSpeedMin;                              		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fInterpToSpeedMax;                              		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              m_fMovementSpeedMin;                              		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fMovementSpeedMax;                              		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fChangeInMovementSpeedPerSec;                   		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fDelayMin;                                      		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fDelayMax;                                      		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_RandSeed;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBCameraModifierSteadyCam" );

		return pClassPointer;
	};

};

UClass* UcAPBCameraModifierSteadyCam::pClassPointer = NULL;

// Class APBGame.cSDDMail
// 0x0000 (0x0040 - 0x0040)
class UcSDDMail : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDMail" );

		return pClassPointer;
	};

};

UClass* UcSDDMail::pClassPointer = NULL;

// Class APBGame.cSDDMarketplace
// 0x0000 (0x0040 - 0x0040)
class UcSDDMarketplace : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDMarketplace" );

		return pClassPointer;
	};

};

UClass* UcSDDMarketplace::pClassPointer = NULL;

// Class APBGame.cSDDScoring
// 0x0000 (0x0040 - 0x0040)
class UcSDDScoring : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDScoring" );

		return pClassPointer;
	};

};

UClass* UcSDDScoring::pClassPointer = NULL;

// Class APBGame.cCharacterScorer
// 0x0000 (0x0040 - 0x0040)
class UcCharacterScorer : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCharacterScorer" );

		return pClassPointer;
	};

};

UClass* UcCharacterScorer::pClassPointer = NULL;

// Class APBGame.cItemAttachment
// 0x0024 (0x0260 - 0x023C)
class AcItemAttachment : public AActor
{
public:
	class UMeshComponent*                              m_Mesh;                                           		// 0x023C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_OwnerMesh;                                      		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nAudioTypeMangledWwiseID;                       		// 0x0244 (0x0004) [0x0000000000000000]              
	struct FColor                                      m_Color;                                          		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                m_eInventoryItemType;                             		// 0x024C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eTaskItemAnimationType;                         		// 0x0250 (0x0001) [0x0000000000000000]              
	int                                                m_eItemAttachmentVisual;                          		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FName                                       m_sAttachedToSocketName;                          		// 0x0258 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemAttachment" );

		return pClassPointer;
	};

	class USkeletalMeshComponent* RetSkeletalMeshComponent ( );
	class UStaticMeshComponent* RetStaticMeshComponent ( );
	void UpdateDisplay ( struct FName sSocketName, unsigned long bShow );
	void DetachFrom ( class AcAPBPawn* ownerPawn );
	void AttachTo ( class AcAPBPawn* ownerPawn );
	void Init ( struct FItemAttachmentVisual ItemAttachmentVisual );
};

UClass* AcItemAttachment::pClassPointer = NULL;

// Class APBGame.cSkeletalItemAttachment
// 0x0004 (0x0264 - 0x0260)
class AcSkeletalItemAttachment : public AcItemAttachment
{
public:
	class USkeletalMeshComponent*                      m_SkeletalMesh;                                   		// 0x0260 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkeletalItemAttachment" );

		return pClassPointer;
	};

	class USkeletalMeshComponent* RetSkeletalMeshComponent ( );
	void Init ( struct FItemAttachmentVisual ItemAttachmentVisual );
};

UClass* AcSkeletalItemAttachment::pClassPointer = NULL;

// Class APBGame.cStaticItemAttachment
// 0x0004 (0x0264 - 0x0260)
class AcStaticItemAttachment : public AcItemAttachment
{
public:
	class UStaticMeshComponent*                        m_StaticMesh;                                     		// 0x0260 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStaticItemAttachment" );

		return pClassPointer;
	};

	class UStaticMeshComponent* RetStaticMeshComponent ( );
	void Init ( struct FItemAttachmentVisual ItemAttachmentVisual );
};

UClass* AcStaticItemAttachment::pClassPointer = NULL;

// Class APBGame.cWeaponAttachment
// 0x000C (0x0270 - 0x0264)
class AcWeaponAttachment : public AcSkeletalItemAttachment
{
public:
	struct FName                                       m_MuzzleFlashSocket;                              		// 0x0264 (0x0008) [0x0000000000000000]              
	class AcAPBPawn*                                   m_ownerPawn;                                      		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWeaponAttachment" );

		return pClassPointer;
	};

	void eventWeaponEvent ( struct FString eventLink );
	void DetachFrom ( class AcAPBPawn* ownerPawn );
	void AttachTo ( class AcAPBPawn* ownerPawn );
	void Init ( struct FItemAttachmentVisual ItemAttachmentVisual );
};

UClass* AcWeaponAttachment::pClassPointer = NULL;

// Class APBGame.cAPBProjectile
// 0x0044 (0x02BC - 0x0278)
class AcAPBProjectile : public AProjectile
{
public:
	float                                              m_AccelerationRate;                               		// 0x0278 (0x0004) [0x0000000000000000]              
	class UMeshComponent*                              Mesh;                                             		// 0x027C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      m_bExploded : 1;                                  		// 0x0280 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bPinOut : 1;                                    		// 0x0280 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      m_bBounceOffThrowingPlayer : 1;                   		// 0x0280 (0x0004) [0x0000000000000000] [0x00000004] 
	class AcAPBPlayerController*                       m_OwningController;                               		// 0x0284 (0x0004) [0x0000000000000000]              
	class AcGrenadeWeapon*                             m_OwningGrenadeWeapon;                            		// 0x0288 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pSddProjectile;                                 		// 0x028C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_ProjectileType;                                 		// 0x0290 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_FuseTime;                                       		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                m_EquippedWeapon;                                 		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              m_PrevSpeed;                                      		// 0x029C (0x0004) [0x0000000000000000]              
	class AActor*                                      m_LastHitActor;                                   		// 0x02A0 (0x0004) [0x0000000000000000]              
	class AEmitter*                                    m_particleTrail;                                  		// 0x02A4 (0x0004) [0x0000000000000000]              
	int                                                m_nThrownGrenadeWorldEventID;                     		// 0x02A8 (0x0004) [0x0000000000000000]              
	class UcAudioProjectileInterface*                  m_AudioProjectileInterface;                       		// 0x02AC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FGrenadeBounceInfo                          m_GrenadeBounceInfo;                              		// 0x02B0 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBProjectile" );

		return pClassPointer;
	};

	void HitObject ( struct FVector HitNormal, class AActor* Object, class UPrimitiveComponent* WallComp, class UPhysicalMaterial* HitMaterial );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventBaseChange ( );
	void eventStopFuse ( );
	void ToggleHidden ( );
	void eventStartFuse ( );
	void eventDestroyed ( );
	void DestroyTrail ( );
	void eventPostBeginPlay ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
	void eventReplicatedEvent ( struct FName VarName );
	void ArmingTimerCallback ( );
	bool RetIsArming ( );
	bool RetBounce ( );
	bool RetTumble ( );
	float RetBounceDamping ( );
	bool InitFromSDD ( int Entry );
};

UClass* AcAPBProjectile::pClassPointer = NULL;

// Class APBGame.cDebugTracerManager
// 0x0280 (0x04BC - 0x023C)
class AcDebugTracerManager : public AActor
{
public:
	struct FTracer                                     m_Tracers[ 0x14 ];                                		// 0x023C (0x0280) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDebugTracerManager" );

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	bool eventAddTracer ( float fTime, struct FVector vStart, struct FVector vEnd, unsigned long bHitTarget );
};

UClass* AcDebugTracerManager::pClassPointer = NULL;

// Class APBGame.cWeapon
// 0x0153 (0x03CC - 0x0279)
class AcWeapon : public AcItem
{
public:
	struct FPointer                                    VfTable_IiAmmoContainer;                          		// 0x027C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiModifiable;                             		// 0x0280 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    m_pSddWeaponType;                                 		// 0x0284 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      m_bPendingFire : 1;                               		// 0x0288 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bPreviousFireRequestFailed : 1;                 		// 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCancelledReload : 1;                           		// 0x0288 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShellChambered : 1;                            		// 0x0288 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDrawClientServerHits : 1;                      		// 0x0288 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	class UMeshComponent*                              Mesh;                                             		// 0x028C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_RoundsRemaining;                                		// 0x0290 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_ClientSideRoundsRemaining;                      		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                m_PreviousRoundsRemaining;                        		// 0x0298 (0x0004) [0x0000000000000000]              
	struct UiModifiable_FModifierData                  m_bandolierModifier;                              		// 0x029C (0x0018) [0x0000000000000000]              
	struct UiModifiable_FModifierData                  m_superMagModifier;                               		// 0x02B4 (0x0018) [0x0000000000000000]              
	struct FWeaponAmmoPool                             m_PrimaryAmmoPool;                                		// 0x02CC (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                m_CurrentBurstShots;                              		// 0x02D8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   m_FireSound;                                      		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                m_RandomSeed;                                     		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                m_RandomSeedReplicated;                           		// 0x02E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_RandomCount;                                    		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                m_RandomMax;                                      		// 0x02EC (0x0004) [0x0000000000000000]              
	int                                                m_CurrentShotID;                                  		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                m_CurrentShotsFired;                              		// 0x02F4 (0x0004) [0x0000000000000000]              
	struct FShotSeedEntry                              m_aShotSeedHistory[ 0xA ];                        		// 0x02F8 (0x0078) [0x0000000000000000]              
	int                                                m_nCurrentShotEntry;                              		// 0x0370 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_Target;                                         		// 0x0374 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_AimAtStartDebug;                                		// 0x0378 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_AimAtPoint;                                     		// 0x0384 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_FireStartLocation;                              		// 0x0390 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_WeaponDirection;                                		// 0x039C (0x000C) [0x0000000000000000]              
	TArray< struct UiModifiable_FModifierData >        m_aActiveModifiers;                               		// 0x03A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FModifiableVariables                        m_ModifiableVariables;                            		// 0x03B4 (0x0018) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWeapon" );

		return pClassPointer;
	};

	void ChamberingTimerCallback ( );
	void ReloadCheckTimer ( );
	void BurstEndTimer ( );
	void RefireCheckTimer ( );
	void eventCallServerStopFire ( );
	void ServerStopFire ( );
	void StopFire ( );
	void eventCallClientReloadComplete ( );
	void ClientReloadComplete ( );
	void eventCallServerCancelReload ( );
	void ServerCancelReload ( );
	void eventServerStartFire ( class AActor* Target, int aimRotation, float cameraCollidePercent, struct FVector TargetOffset, int ShotID );
	void StartFire ( class AActor* Target );
	bool IsReloading ( );
	bool HasAnyAmmo ( );
	void WeaponLog ( struct FString msg, struct FString FuncStr );
	void eventCallClientReload ( );
	void ClientReload ( );
	void CancelReload ( );
	int RetPrimaryAmmoCategory ( );
	int WithdrawAmmo ( int eCategory, int nAmount );
	int StoreAmmo ( int eCategory, int eTarget, int nAmount );
	bool IsAmmoCategorySupported ( int eCategory );
	bool IsEmpty ( int eCategory );
	bool IsFull ( int eCategory );
	int RetCapacity ( int eCategory );
	int RetAmmoAmount ( int eCategory );
	void eventClientShotFinishedOnServer ( int ShotID, int NumberShotsFired );
	void eventClientFireRequestFailed ( int ShotID );
	bool CanReload ( );
	bool IsLessLethal ( );
	bool IsInFiringMode ( );
	void ApplyDamage ( class AActor* HitActor, class AcAPBPlayerController* Controller, class UClass* HealthDamageType, class UClass* StunDamageType, struct FImpactInfo Impact, int* HealthDamage, int* StunDamage );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void eventVFXWeaponEvent ( struct FString VFXWeaponEventName );
};

UClass* AcWeapon::pClassPointer = NULL;

// Class APBGame.cProjectileWeapon
// 0x000C (0x03D8 - 0x03CC)
class AcProjectileWeapon : public AcWeapon
{
public:
	struct FPointer                                    m_pSddProjectileWeaponType;                       		// 0x03CC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              m_MaxFiringSpeed;                                 		// 0x03D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCookingGrenadeWorldEventID;                    		// 0x03D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cProjectileWeapon" );

		return pClassPointer;
	};

};

UClass* AcProjectileWeapon::pClassPointer = NULL;

// Class APBGame.cGrenadeWeapon
// 0x0014 (0x03EC - 0x03D8)
class AcGrenadeWeapon : public AcProjectileWeapon
{
public:
	class AcAPBProjectile*                             m_CookingGrenade;                                 		// 0x03D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_RangeScale;                                     		// 0x03DC (0x0004) [0x0000000000000000]              
	float                                              m_Range;                                          		// 0x03E0 (0x0004) [0x0000000000000000]              
	float                                              m_FloorHeight;                                    		// 0x03E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPinPulled : 1;                                 		// 0x03E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bThrowWhenAnimComplete : 1;                     		// 0x03E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bThrowing : 1;                                  		// 0x03E8 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGrenadeWeapon" );

		return pClassPointer;
	};

	void eventClientNotifyGrenadeExploded ( );
	void ThrowTimerCallback ( );
	void PinPullTimerCallback ( );
	void EndStateWeaponCooking ( );
	void BeginStateWeaponCooking ( );
	void EndFire ( );
	int StoreAmmo ( int eCategory, int eTarget, int nAmount );
	bool HasAnyAmmo ( );
};

UClass* AcGrenadeWeapon::pClassPointer = NULL;

// Class APBGame.cH2HWeapon
// 0x0028 (0x03F4 - 0x03CC)
class AcH2HWeapon : public AcWeapon
{
public:
	struct FPointer                                    m_pSddH2HWeaponType;                              		// 0x03CC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      m_bCoolingDown : 1;                               		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAttacking : 1;                                 		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              m_CurrentSliceStart;                              		// 0x03D4 (0x0004) [0x0000000000000000]              
	int                                                m_CurrentAttack;                                  		// 0x03D8 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_InstigatorPos;                                  		// 0x03DC (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_InstigatorDir;                                  		// 0x03E8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cH2HWeapon" );

		return pClassPointer;
	};

	void CoolDown ( );
	void CoolDownTimer ( );
	void GetTargetsInArc ( float ArcStart, float ArcEnd, TArray< class AActor* >* TargetsArray );
	bool BeginFire ( class AActor* Target, struct FVector TargetOffset );
	float RetBlockPeriod ( );
	float RetStunPeriod ( );
	float RetBlockModifier ( );
	void AttackTimer ( );
	void TimeH2HAttack ( float AttackDuration );
	bool HasAnyAmmo ( );
};

UClass* AcH2HWeapon::pClassPointer = NULL;

// Class APBGame.cRaycastWeapon
// 0x004C (0x0418 - 0x03CC)
class AcRaycastWeapon : public AcWeapon
{
public:
	struct FPointer                                    m_pSddRangedWeaponType;                           		// 0x03CC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              m_TanSpreadAngle;                                 		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              m_TanPelletSpread;                                		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              m_LastShotTime;                                   		// 0x03D8 (0x0004) [0x0000000000000000]              
	int                                                m_CurrentNumShots;                                		// 0x03DC (0x0004) [0x0000000000000000]              
	float                                              m_OverallShotModifier;                            		// 0x03E0 (0x0004) [0x0000000000000000]              
	float                                              m_MinAccuracy;                                    		// 0x03E4 (0x0004) [0x0000000000000000]              
	float                                              m_MaxAccuracy;                                    		// 0x03E8 (0x0004) [0x0000000000000000]              
	int                                                m_ShotNumber;                                     		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              m_fRampDistance;                                  		// 0x03F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fPerShotModifier;                               		// 0x03F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_ShortSightedModifier;                           		// 0x03F8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_EagleEyesModifier;                              		// 0x0400 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FModifierEffect                             m_PointGuardModifier;                             		// 0x0408 (0x0008) [0x0000000000000000]              
	float                                              m_fAccuracyRadiusScale;                           		// 0x0410 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bRampDamage : 1;                                		// 0x0414 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cRaycastWeapon" );

		return pClassPointer;
	};

};

UClass* AcRaycastWeapon::pClassPointer = NULL;

// Class APBGame.cWitnessingWeapon
// 0x0000 (0x0418 - 0x0418)
class AcWitnessingWeapon : public AcRaycastWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWitnessingWeapon" );

		return pClassPointer;
	};

	bool HasAnyAmmo ( );
};

UClass* AcWitnessingWeapon::pClassPointer = NULL;

// Class APBGame.cMailBox
// 0x0010 (0x0294 - 0x0284)
class AcMailBox : public AcInteractiveDynamicSMActor
{
public:
	struct FPointer                                    VfTable_IiAmmoSupplier;                           		// 0x0284 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      m_eFaction;                                       		// 0x0288 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHUDMarkerID;                                   		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0290 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cMailBox" );

		return pClassPointer;
	};

	void GetDebugText ( struct FString* s1, struct FString* s2, struct FString* s3 );
	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
};

UClass* AcMailBox::pClassPointer = NULL;

// Class APBGame.cSDDDisplayPoint
// 0x0000 (0x0040 - 0x0040)
class UcSDDDisplayPoint : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDDisplayPoint" );

		return pClassPointer;
	};

};

UClass* UcSDDDisplayPoint::pClassPointer = NULL;

// Class APBGame.cAudioDisplayPoint
// 0x0080 (0x0304 - 0x0284)
class AcAudioDisplayPoint : public AcInteractiveDynamicSMActor
{
public:
	struct FPointer                                    VfTable_IiDisplayPoint;                           		// 0x0284 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x0288 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AcAPBPlayerController*                       m_OwnerPlayerController;                          		// 0x028C (0x0004) [0x0000000000000000]              
	class UcAudioDisplayPointInterface*                m_AudioDisplayPointInterface;                     		// 0x0290 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nCharaterOwnerUID;                              		// 0x0294 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sCharacterOwnerName;                            		// 0x0298 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x02A4 (0x0001) [0x0000000000000020]              ( CPF_Net )
	struct FDisplayPointMusicPlaybackInfo              m_MusicPlaybackInfo;                              		// 0x02A8 (0x002C) [0x0000000000000020]              ( CPF_Net )
	struct FDisplayPointMusicNameInfo                  m_MusicNameInfo;                                  		// 0x02D4 (0x0024) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	unsigned long                                      m_bMusicNameInfoRequested : 1;                    		// 0x02F8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fDisplayPointVolume;                            		// 0x02FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fMusicVolumeMax;                                		// 0x0300 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioDisplayPoint" );

		return pClassPointer;
	};

	class AcAPBPlayerController* RetDisplayPointerOwnerPlayerController ( );
	class UcDisplayPointComponent* RetDisplayPointComponent ( );
	void GetDebugText ( struct FString* s1, struct FString* s2, struct FString* s3 );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSetInitialState ( );
	void OnTrackVolumeUpdated ( );
	void OnTrackInfoUpdated ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	bool IsLocallyControlled ( );
};

UClass* AcAudioDisplayPoint::pClassPointer = NULL;

// Class APBGame.cDisplayPointComponent
// 0x0037 (0x0090 - 0x0059)
class UcDisplayPointComponent : public UActorComponent
{
public:
	struct FEnumeratedName                             m_eDisplayPoint;                                  		// 0x005C (0x0010) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FPointer                                    m_pSddDisplayPoint;                               		// 0x006C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            m_aSupportedFactions;                             		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCharaterOwnerUID;                              		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< class AcAPBPlayerController* >             m_aUsers;                                         		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bInteractionPending : 1;                        		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDisplayPointComponent" );

		return pClassPointer;
	};

	unsigned char RetDisplayPointInteractionType ( class AcAPBPlayerController* pPC );
	bool CanOpenDisplayPointUI ( class AcAPBPlayerController* pPC );
	bool IsOwned ( );
	int RetOwnerUID ( );
	void SetOwnerUID ( int nUID );
	void InitDisplayPointAttributes ( );
	struct FGuid RetDisplayPointGUID ( );
	struct FString RetDisplayPointActivationTypeToString ( );
	struct FString RetDisplayPointTypeToString ( );
	struct FString RetDisplayPointName ( );
	bool CanPropagate ( );
	bool IsFactionSupported ( unsigned char eFaction );
	unsigned char RetDisplayPointType ( );
	unsigned char RetDisplayPointActivationType ( );
};

UClass* UcDisplayPointComponent::pClassPointer = NULL;

// Class APBGame.cDisplayPointManager
// 0x0048 (0x0284 - 0x023C)
class AcDisplayPointManager : public AActor
{
public:
	TArray< struct FPropagatedDisplayPoint >           m_aOwnedPropagatedDisplayPoints;                  		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcDisplayPointStatuePlinth* >        m_aStatuesDisplayPoints;                          		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerGraffitiDisplayPoint* >      m_aGraffitiDisplayPoints;                         		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerVehicleDisplayPoint* >       m_aVehicleDisplayPoints;                          		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAudioDisplayPoint* >               m_aAudioDisplayPoints;                            		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aDisplayPoints;                                 		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDisplayPointManager" );

		return pClassPointer;
	};

	void LevelLoadsComplete ( );
	int RetNumDisplayPoints ( );
	int RetAudioDisplayPoints ( );
	int RetVehicleDisplayPoints ( );
	int RetNumGraffitiDisplayPoints ( );
	int RetNumStatueDisplayPoints ( );
	class AcPlayerVehicleDisplayPoint* FindVehicleDisplayPoints ( class AcAPBVehicleBase* Vehicle );
};

UClass* AcDisplayPointManager::pClassPointer = NULL;

// Class APBGame.cDisplayPointStatuePlinth
// 0x0034 (0x02B8 - 0x0284)
class AcDisplayPointStatuePlinth : public AcInteractiveDynamicSMActor
{
public:
	struct FPointer                                    VfTable_IiDisplayPoint;                           		// 0x0284 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AcStatueModel*                               m_CurrentStatue;                                  		// 0x0288 (0x0004) [0x0000000000000000]              
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x028C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nCharaterOwnerUID;                              		// 0x0290 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sCharacterOwnerName;                            		// 0x0294 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x02A0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              m_fCSAHeightOffset;                               		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStatueScale;                                   		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpriteComponent*                            m_CSASprite;                                      		// 0x02AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            m_DisplayPointSprite;                             		// 0x02B0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_HUDMarkerID;                                    		// 0x02B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDisplayPointStatuePlinth" );

		return pClassPointer;
	};

	class UcDisplayPointComponent* RetDisplayPointComponent ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void GetDebugText ( struct FString* s1, struct FString* s2, struct FString* s3 );
	void eventRemoveStatue ( );
	class AcStatueModel* eventSpawnStatue ( );
	void eventDestroyed ( );
	void eventReplicatedEvent ( struct FName sVariableName );
};

UClass* AcDisplayPointStatuePlinth::pClassPointer = NULL;

// Class APBGame.cPlayerGraffitiDisplayPoint
// 0x0021 (0x02C9 - 0x02A8)
class AcPlayerGraffitiDisplayPoint : public AcCustomGraffitiDisplayPoint
{
public:
	struct FPointer                                    VfTable_IiDisplayPoint;                           		// 0x02A8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x02AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_ePendingInteractionType;                        		// 0x02B0 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pOverridenGraffitiDisplayPointData;             		// 0x02B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_nCharaterOwnerUID;                              		// 0x02B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sCharacterOwnerName;                            		// 0x02BC (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x02C8 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerGraffitiDisplayPoint" );

		return pClassPointer;
	};

	class UcDisplayPointComponent* RetDisplayPointComponent ( );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void eventSetInitialState ( );
};

UClass* AcPlayerGraffitiDisplayPoint::pClassPointer = NULL;

// Class APBGame.cPlayerVehicleDisplayPoint
// 0x0030 (0x0270 - 0x0240)
class AcPlayerVehicleDisplayPoint : public AStaticMeshActor
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0240 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiDisplayPoint;                           		// 0x0244 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0248 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AcPlayerVehicleSpawnDirection*               m_SpawnDirection;                                 		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eBayState;                                      		// 0x0250 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x0251 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x0254 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AcAPBVehicleBase*                            m_CurrentVehicle;                                 		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UcCompressedAssetCustomisation*              m_CompressedCustomisationData;                    		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                m_nCharaterOwnerUID;                              		// 0x0260 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sCharacterOwnerName;                            		// 0x0264 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerVehicleDisplayPoint" );

		return pClassPointer;
	};

	class UcDisplayPointComponent* RetDisplayPointComponent ( );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void EmptySpawnBay ( );
	struct FRotator eventRetSpawnDirection ( );
	unsigned char RetBayState ( );
	bool IsOccupied ( );
	void OnSpawnBayStateChanged ( );
	void OnVehicleCustomizationIsReady ( );
	void OnVehicleVariableReplicated ( );
	void SetBayState ( unsigned char eBayState );
	bool SpawnVehicle ( class AcAPBPlayerController* UserController );
	bool IsPlayerAllowedToUseSpawnBay ( class AcAPBPlayerController* User );
	bool IsCurrenlyShowingVehicle ( class AcAPBVehicleBase* Vehicle );
	void eventReplicatedEvent ( struct FName sVariableName );
	void eventSetInitialState ( );
};

UClass* AcPlayerVehicleDisplayPoint::pClassPointer = NULL;

// Class APBGame.cPlayerVehicleDisplayPointMesh
// 0x0004 (0x0244 - 0x0240)
class AcPlayerVehicleDisplayPointMesh : public AStaticMeshActor
{
public:
	class AcPlayerVehicleDisplayPoint*                 m_PlayerVehicleDisplayPoint;                      		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerVehicleDisplayPointMesh" );

		return pClassPointer;
	};

	class AcPlayerVehicleDisplayPoint* RetPlayerVehicleDisplayPoint ( );
};

UClass* AcPlayerVehicleDisplayPointMesh::pClassPointer = NULL;

// Class APBGame.cStatueDisplayPoint
// 0x0034 (0x0270 - 0x023C)
class AcStatueDisplayPoint : public AActor
{
public:
	struct FPointer                                    VfTable_IiDisplayPoint;                           		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AcStatueModel*                               m_CurrentStatue;                                  		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              m_fStatueScale;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHeightOffset;                                  		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpriteComponent*                            m_EditorSprite;                                   		// 0x024C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_EditorSkeletalMesh;                             		// 0x0250 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x0254 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nCharaterOwnerUID;                              		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     m_sCharacterOwnerName;                            		// 0x025C (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x0268 (0x0001) [0x0000000000000020]              ( CPF_Net )
	int                                                m_HUDMarkerID;                                    		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStatueDisplayPoint" );

		return pClassPointer;
	};

	class UcDisplayPointComponent* RetDisplayPointComponent ( );
	void RemoveStatue ( );
	class AcStatueModel* SpawnStatue ( );
	void eventDestroyed ( );
	void eventReplicatedEvent ( struct FName sVariableName );
};

UClass* AcStatueDisplayPoint::pClassPointer = NULL;

// Class APBGame.cStatueModel
// 0x0078 (0x02C8 - 0x0250)
class AcStatueModel : public ASkeletalMeshActor
{
public:
	struct FCompactGolemDescriptor                     m_CustomisationGuids;                             		// 0x0250 (0x0030) [0x0000000000000020]              ( CPF_Net )
	struct FCompactGolemDescriptor                     m_PreviousCustomisationGuids;                     		// 0x0280 (0x0030) [0x0000000000002000]              ( CPF_Transient )
	class UcCompressedAssetCustomisation*              m_CompressedCustomisationData;                    		// 0x02B0 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   m_pParentMaterial;                                		// 0x02B4 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_pMaterialInst;                                  		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_pHairMaterialInst;                              		// 0x02BC (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  m_pHairNormalMap;                                 		// 0x02C0 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_DisplayPointOwner;                              		// 0x02C4 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStatueModel" );

		return pClassPointer;
	};

	class AActor* RetDisplayPointOwner ( );
	void SetDisplayPointOwner ( class AActor* DisplayPointOwner );
	void eventReplicatedEvent ( struct FName sVariableName );
	void eventDestroyed ( );
	void NotifyCustomisationChanged ( );
	void SetPlayerModelNew ( class UcCompressedAssetCustomisation* Data );
};

UClass* AcStatueModel::pClassPointer = NULL;

// Class APBGame.cStatueUsePoint
// 0x0004 (0x0288 - 0x0284)
class AcStatueUsePoint : public AcInteractiveDynamicSMActor
{
public:
	class AcStatueDisplayPoint*                        m_StatueDisplayPoint;                             		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStatueUsePoint" );

		return pClassPointer;
	};

	class AcStatueDisplayPoint* RetStatueDisplayPoint ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void GetDebugText ( struct FString* s1, struct FString* s2, struct FString* s3 );
};

UClass* AcStatueUsePoint::pClassPointer = NULL;

// Class APBGame.iDisplayPoint
// 0x0000 (0x0040 - 0x0040)
class UiDisplayPoint : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iDisplayPoint" );

		return pClassPointer;
	};

	class UcDisplayPointComponent* RetDisplayPointComponent ( );
};

UClass* UiDisplayPoint::pClassPointer = NULL;

// Class APBGame.cExplosionsManager
// 0x0000 (0x0040 - 0x0040)
class UcExplosionsManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cExplosionsManager" );

		return pClassPointer;
	};

	bool GetExplosionAttributes ( int nExplosionType, struct FExplosion* Attributes );
	void Explosion ( class AcAPBPlayerController* InstigatingController, class AActor* AttachActor, struct FVector Location, int ExplosionType, int WeaponType, class AActor* pHitActor );
};

UClass* UcExplosionsManager::pClassPointer = NULL;

// Class APBGame.cSDDHostingConfigFile
// 0x0000 (0x0040 - 0x0040)
class UcSDDHostingConfigFile : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDHostingConfigFile" );

		return pClassPointer;
	};

};

UClass* UcSDDHostingConfigFile::pClassPointer = NULL;

// Class APBGame.cSDDChat
// 0x0000 (0x0040 - 0x0040)
class UcSDDChat : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDChat" );

		return pClassPointer;
	};

};

UClass* UcSDDChat::pClassPointer = NULL;

// Class APBGame.cSDDClan
// 0x0000 (0x0040 - 0x0040)
class UcSDDClan : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDClan" );

		return pClassPointer;
	};

};

UClass* UcSDDClan::pClassPointer = NULL;

// Class APBGame.cUIAction_CreateInventoryItem
// 0x0020 (0x0154 - 0x0134)
class UcUIAction_CreateInventoryItem : public UcUIAction_HostingOp
{
public:
	struct FString                                     m_sInventoryItemType;                             		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bWaitForItemReplication : 1;                    		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FGuid                                       m_CreatedItemGuid;                                		// 0x0144 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUIAction_CreateInventoryItem" );

		return pClassPointer;
	};

	void OnItemCreateCallback ( struct FGuid ItemGuid, unsigned char eErrorCode, class UObject* pUserData );
};

UClass* UcUIAction_CreateInventoryItem::pClassPointer = NULL;

// Class APBGame.cUIAction_GetInventoryCategoryInfo
// 0x0010 (0x0100 - 0x00F0)
class UcUIAction_GetInventoryCategoryInfo : public UUIAction
{
public:
	struct FEnumeratedName                             m_eInventoryItemCategory;                         		// 0x00F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUIAction_GetInventoryCategoryInfo" );

		return pClassPointer;
	};

};

UClass* UcUIAction_GetInventoryCategoryInfo::pClassPointer = NULL;

// Class APBGame.cUIAction_GetInventoryItemName
// 0x0010 (0x0100 - 0x00F0)
class UcUIAction_GetInventoryItemName : public UUIAction
{
public:
	struct FGuid                                       m_ItemGUID;                                       		// 0x00F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUIAction_GetInventoryItemName" );

		return pClassPointer;
	};

};

UClass* UcUIAction_GetInventoryItemName::pClassPointer = NULL;

// Class APBGame.cUIAction_OperateOnInventoryItem
// 0x001D (0x0151 - 0x0134)
class UcUIAction_OperateOnInventoryItem : public UcUIAction_HostingOp
{
public:
	struct FGuid                                       m_ItemGUID;                                       		// 0x0134 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     m_sParams;                                        		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_eOperation;                                     		// 0x0150 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUIAction_OperateOnInventoryItem" );

		return pClassPointer;
	};

	void OnOperatedOnItemCallback ( int eErr, struct FGuid ItemGuid, unsigned char eOperation, struct FPointer pUserData );
};

UClass* UcUIAction_OperateOnInventoryItem::pClassPointer = NULL;

// Class APBGame.cAttributeManager
// 0x0020 (0x0060 - 0x0040)
class UcAttributeManager : public UObject
{
public:
	class UGolemBase*                                  m_pMaleBase;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	class UGolemBase*                                  m_pFemaleBase;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sMaleBase;                                      		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sFemaleBase;                                    		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAttributeManager" );

		return pClassPointer;
	};

	void eventAddCharacterAttributes ( struct FAttributesData* pData );
	void CreateAttributeFromNode ( struct FName NodeName, unsigned char eGender, struct FAttributesData* pData );
	void CreateBaseArrayLocalisedString ( struct FName ArrayVariable, struct FName Variable, struct FString sSection, struct FAttributesData* pData );
	void CreateTESTextureAttribute ( struct FName TESTextureName, struct FName LayerProjectionAreaName, struct FName LayerProjectionInvertName, struct FAttributesData* pData );
	void CreateArrayAttribute ( struct FName ArrayVariable, struct FName Variable, unsigned char ePropertyType, unsigned char eGender, struct FName MaxVariable, unsigned char eAssetRebuildType, struct FAttributesData* pData );
	void CreateMakeUpColourAttribute ( struct FName Variable, unsigned char eGender, struct FAttributesData* pData );
	void CreateColourAttribute ( struct FName Variable, unsigned char eGender, struct FAttributesData* pData );
	void CreateAttribute ( struct FName Variable, unsigned char ePropertyType, unsigned char eGender, struct FName MaxVariable, unsigned char eAssetRebuildType, struct FAttributesData* pData );
	class UcAttributeManager* GetInstance ( );
};

UClass* UcAttributeManager::pClassPointer = NULL;

// Class APBGame.cUploadManager
// 0x0018 (0x0254 - 0x023C)
class AcUploadManager : public AActor
{
public:
	TArray< class UcAttribute* >                       m_aMaleAttributes;                                		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcAttribute* >                       m_aFemaleAttributes;                              		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUploadManager" );

		return pClassPointer;
	};

	void UploadChunk ( class AcAPBPlayerController* pPC, struct FDataChunk chunk, struct FGuid OriginalItemGuid );
	void BeginUpload ( class AcAPBPlayerController* pPC, int nDataSize, struct FGuid nInventoryItemGuid );
	bool GetUploadItemDataChunk ( TArray< unsigned char > aData, int nChunk, struct FDataChunk* newChunk );
	void Initialise ( );
	class AcUploadManager* GetInstance ( );
};

UClass* AcUploadManager::pClassPointer = NULL;

// Class APBGame.cAnimationInfo
// 0x0010 (0x0050 - 0x0040)
class UcAnimationInfo : public UObject
{
public:
	class UAnimTree*                                   m_AnimTree;                                       		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          m_aAnimSets;                                      		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimationInfo" );

		return pClassPointer;
	};

};

UClass* UcAnimationInfo::pClassPointer = NULL;

// Class APBGame.cSetupInfo
// 0x0020 (0x0060 - 0x0040)
class UcSetupInfo : public UObject
{
public:
	class USkeletalMesh*                               m_SkeletalMesh;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   m_AnimTree;                                       		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          m_aAnimSets;                                      		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcAnimationInfo*                             m_pAnimationInfo;                                 		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AcSetupTypeManager*                          m_pSTM;                                           		// 0x0058 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsManaged : 1;                                 		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupInfo" );

		return pClassPointer;
	};

};

UClass* UcSetupInfo::pClassPointer = NULL;

// Class APBGame.cPedestrianSetupInfo
// 0x000C (0x006C - 0x0060)
class UcPedestrianSetupInfo : public UcSetupInfo
{
public:
	struct FString                                     m_sPedestrianName;                                		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianSetupInfo" );

		return pClassPointer;
	};

};

UClass* UcPedestrianSetupInfo::pClassPointer = NULL;

// Class APBGame.cRagdollableNPCSkeletalMeshActor
// 0x0074 (0x02C4 - 0x0250)
class AcRagdollableNPCSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	struct FPointer                                    VfTable_ICombatTargetingInterface;                		// 0x0250 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IDamageInterface;                         		// 0x0254 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FNPCHitData                                 m_NPCHitData;                                     		// 0x0258 (0x0030) [0x0000000000000020]              ( CPF_Net )
	class UPhysicsAsset*                               mPhysicsAsset_HighDetail;                         		// 0x0288 (0x0004) [0x0000000000000000]              
	class UcDamageFilterComponent*                     m_DamageFilterComponent;                          		// 0x028C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      m_bCanShoot : 1;                                  		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsRagdollActive : 1;                           		// 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIsRechargingHealth : 1;                        		// 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bHasFullHealth : 1;                             		// 0x0290 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FCylinder                                   CameraNoRenderCylinder_High;                      		// 0x0294 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FCylinder                                   CameraNoRenderCylinder_FlickerBuffer;             		// 0x029C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLastExplosionType;                             		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vLastExplosionLocation;                         		// 0x02A8 (0x000C) [0x0000000000000000]              
	float                                              m_fTimeSinceRagdoll;                              		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              m_fHealth;                                        		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastDamage;                           		// 0x02BC (0x0004) [0x0000000000000000]              
	class UcAudioNPCInterface*                         m_AudioNPCInterface;                              		// 0x02C0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cRagdollableNPCSkeletalMeshActor" );

		return pClassPointer;
	};

	void GetCameraNoRenderCylinder ( unsigned long bViewTarget, unsigned long bHiddenLocally, float* Radius, float* Height );
	void ProcessDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int nWeaponType );
	bool FilterHealing ( class UClass* DamageType );
	bool FilterDamage ( class UClass* DamageType );
	bool IsFiltered ( class UClass* DamageType );
	void UpdateDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void RemoveDamageType ( class UClass* DamageType );
	void AddDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void eventHealDamageTimed ( float TimePeriod, int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamageTimed ( float TimePeriod, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool eventRestore ( int Amount, class AController* Healer, class UClass* DamageType );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	bool eventIsSoft ( );
	bool eventIsHard ( );
	void RetExplosionOcclusionExtents ( TArray< struct FVector >* Verts, struct FVector* ExplosionLocation );
	bool IsStaticTarget ( );
	bool IsDynamicTarget ( );
	bool CanBeDamaged ( class AcAPBPlayerController* PC );
	bool CanBeTargeted ( class AcAPBPlayerController* PC );
	void eventTornOff ( );
	struct FVector GetWeaponPhysicsImpulse ( struct FVector vHitLoc, struct FVector vMomentum, unsigned long bIsHitReaction, struct FTraceHitInfo* OutHitInfo );
	void PlayRagdoll ( );
	void Die ( class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int nWeaponType );
};

UClass* AcRagdollableNPCSkeletalMeshActor::pClassPointer = NULL;

// Class APBGame.cNPCDriverSkeletalMeshActor
// 0x007C (0x0340 - 0x02C4)
class AcNPCDriverSkeletalMeshActor : public AcRagdollableNPCSkeletalMeshActor
{
public:
	struct FPointer                                    VfTable_IcIEventReaction;                         		// 0x02C4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcPedestrianSetupInfo*                       m_pNPCDriverSetupInfo;                            		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                m_bNPCDriverUsingProperAsset;                     		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                m_nNPCDriverClientID;                             		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UcEventManager*                              m_pEM;                                            		// 0x02D4 (0x0004) [0x0000000000000000]              
	class UcReactionManager*                           m_pRM;                                            		// 0x02D8 (0x0004) [0x0000000000000000]              
	class UcNPCDriverSkeletalMeshComponent*            m_DriverSkeletalMeshComponent;                    		// 0x02DC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nAssetIndex;                                    		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                m_nPedestrianType;                                		// 0x02E4 (0x0004) [0x0000000000000000]              
	struct FDriverEjectData                            m_DriverEjectData;                                		// 0x02E8 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      m_bDriverInitialised : 1;                         		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCollisionEnabled : 1;                          		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bForceDisableCollision : 1;                     		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bEjectLaterAnimFinished : 1;                    		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bRagdollDespawnTimerSet : 1;                    		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bVehicleMoved : 1;                              		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bEnableDebugRendering : 1;                      		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bEjectSequenceStarted : 1;                      		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000080] 
	struct FPointer                                    m_pBoundingCylinder;                              		// 0x02F8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pBroadBoundingCylinder;                         		// 0x02FC (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fEjectDuration;                                 		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceCollisionOn;                          		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              m_fAnimTimeWhenCollisionEnabled;                  		// 0x0308 (0x0004) [0x0000000000000000]              
	struct FName                                       m_AnimWhenCollisionEnabled;                       		// 0x030C (0x0008) [0x0000000000000000]              
	struct FVector                                     m_vVehicleInitialLocation;                        		// 0x0314 (0x000C) [0x0000000000000000]              
	float                                              m_fBlockPlayerWaitingTime;                        		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              m_fCheckFloorTimer;                               		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              m_fWaitForDoorToOpenTime;                         		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              m_fCheckFloorIntervalTime;                        		// 0x032C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxDriverInsideVehicleMoveDistance;            		// 0x0330 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class URWTechReachSpec* >                  m_aRegisteredEdgeList;                            		// 0x0334 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCDriverSkeletalMeshActor" );

		return pClassPointer;
	};

	void DeRegisterWithPGEdges ( );
	bool ReplicatedEvent_Native ( struct FName pr_Name );
	void eventReplicatedEvent ( struct FName sVariableName );
	class UcNPCDriverSkeletalMeshComponent* GetDriverMesh ( );
	void DestroyDriver ( );
	void DisableCollision ( );
	void EnableCollision ( );
	void TriggerDeSpawnDriver ( );
	void OnDriverDestroy ( );
	void EnterRagdoll ( );
	void eventTornOff ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void ForceUpdateLighting ( );
};

UClass* AcNPCDriverSkeletalMeshActor::pClassPointer = NULL;

// Class APBGame.cNPCDriverSkeletalMeshComponent
// 0x0011 (0x04C5 - 0x04B4)
class UcNPCDriverSkeletalMeshComponent : public USkeletalMeshDLODComponent
{
public:
	int                                                m_nNPCTypeDriver;                                 		// 0x04B4 (0x0004) [0x0000000000000000]              
	int                                                m_nAssetIndex;                                    		// 0x04B8 (0x0004) [0x0000000000000000]              
	struct FName                                       m_NodePlayEjectAnimsOn;                           		// 0x04BC (0x0008) [0x0000000000000000]              
	unsigned char                                      m_LastEjectAnimation;                             		// 0x04C4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCDriverSkeletalMeshComponent" );

		return pClassPointer;
	};

	void CancelEjectAnimation ( );
	void MakeRootMotionFitGround ( unsigned char eNPCEjectAnimation, unsigned char eVehiclePositionIndex, class AcAPBVehicleBase* VehicleInside );
	void PlayEjectAnimation ( unsigned char eNPCEjectAnimation, unsigned char eVehiclePositionIndex, class AcAPBVehicleBase* VehicleInside );
};

UClass* UcNPCDriverSkeletalMeshComponent::pClassPointer = NULL;

// Class APBGame.cNPCSkeletalMeshActor
// 0x0178 (0x043C - 0x02C4)
class AcNPCSkeletalMeshActor : public AcRagdollableNPCSkeletalMeshActor
{
public:
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x02C4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x02C8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiNPCLookAt;                              		// 0x02CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                m_nID;                                            		// 0x02D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nTypeID;                                        		// 0x02D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_eNPCRaceType;                                   		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                m_nAudioType;                                     		// 0x02DC (0x0004) [0x0000000000000000]              
	class UcNPCPedestrianBrain*                        m_pBrain;                                         		// 0x02E0 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eBrainAndPhysRepState;                          		// 0x02E4 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eBrainAndPhysRepState_Replicated;               		// 0x02E5 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eNewTTIStage;                                   		// 0x02E6 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eNewTTIAnimationIndex;                          		// 0x02E7 (0x0001) [0x0000000000000000]              
	struct FPointer                                    m_pPedestrianHeightManager;                       		// 0x02E8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPedestrianBankingManager;                      		// 0x02EC (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPedestrianRotationManager;                     		// 0x02F0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fLocomotionSpeed;                               		// 0x02F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AcLCManager*                                 m_pLCManager;                                     		// 0x02F8 (0x0004) [0x0000000000000000]              
	class UcPedestrianSetupInfo*                       m_pSetupInfo;                                     		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAssetsLoaded : 1;                              		// 0x0300 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bUsingProperAsset : 1;                          		// 0x0300 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bTTIInProgress : 1;                             		// 0x0300 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bPlayDespawnParticleEffect : 1;                 		// 0x0300 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bIsCrouching : 1;                               		// 0x0300 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bIsBeingNudged : 1;                             		// 0x0300 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bHasBeenNudged : 1;                             		// 0x0300 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bRootMotionActive : 1;                          		// 0x0300 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bShouldUpdateCollisionVolume : 1;               		// 0x0300 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bShouldDetachSkeletalMeshComponent : 1;         		// 0x0300 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bDebugOverrideClientPedAssets : 1;              		// 0x0300 (0x0004) [0x0000000000000000] [0x00000400] 
	int                                                m_nAssetIndex;                                    		// 0x0304 (0x0004) [0x0000000000000000]              
	int                                                m_nAssetIndex_Replicated;                         		// 0x0308 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInstanceConstant*                   m_RacialMatInst;                                  		// 0x030C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_ClothingMatInst;                                		// 0x0310 (0x0004) [0x0000000000000000]              
	struct FSPedStateReplicated                        m_PedState_ReplicatedInitial;                     		// 0x0314 (0x0040) [0x0000000000000020]              ( CPF_Net )
	struct FSPedStateReplicated                        m_PedStateUpdate_Replicated;                      		// 0x0354 (0x0040) [0x0000000000000020]              ( CPF_Net )
	float                                              m_afEvtCriteriaTimers_R[ 0x8 ];                   		// 0x0394 (0x0020) [0x0000000000000020]              ( CPF_Net )
	struct FTTIReactionData                            m_TTIReactionData_Replicated;                     		// 0x03B4 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FTTIReactionInProgressData                  m_TTIReactionInProgressData_Replicated;           		// 0x03BC (0x0010) [0x0000000000000020]              ( CPF_Net )
	class UAnimNodeBlendList*                          m_pAnimWhileWalkingNode;                          		// 0x03CC (0x0004) [0x0000000000000000]              
	class UAnimNodeBlendList*                          m_pAnimWhileStationaryNode;                       		// 0x03D0 (0x0004) [0x0000000000000000]              
	class UcAPBAnimNodeBlendList*                      m_pSyncedReactionAnimNode;                        		// 0x03D4 (0x0004) [0x0000000000000000]              
	class UcAPBAnimNodeBlendList*                      m_pASyncedReactionAnimNode;                       		// 0x03D8 (0x0004) [0x0000000000000000]              
	class UcAPBAnimNodeBlendList*                      m_pStationaryReactionAnimNode;                    		// 0x03DC (0x0004) [0x0000000000000000]              
	class UcAnimNodeBlendAvoidCharacter*               m_pAnimNodeBlendAvoidCharacter;                   		// 0x03E0 (0x0004) [0x0000000000000000]              
	class UAnimNodeScaleRateBySpeed*                   m_pPaceNode;                                      		// 0x03E4 (0x0004) [0x0000000000000000]              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x03E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcTaskTargetComponentNPC*                    m_TaskTarget;                                     		// 0x03EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AcProp*                                      m_VignetteProp;                                   		// 0x03F0 (0x0004) [0x0000000000000000]              
	class UcVignetteDescriptor*                        m_DefaultVignetteDescriptor;                      		// 0x03F4 (0x0004) [0x0000000000000000]              
	int                                                m_nLastVNodeIDPlayedAt;                           		// 0x03F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nNPCLookAtPriority;                             		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              m_fCrouchColVolRadiusModifier;                    		// 0x0400 (0x0004) [0x0000000000000000]              
	float                                              m_fCrouchColVolHeightModifier;                    		// 0x0404 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLeftBeforeSelfDestruct;                    		// 0x0408 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLeftBeforeRagdollDespawn;                  		// 0x040C (0x0004) [0x0000000000000000]              
	class AcAPBVehicleBase*                            m_pNudgingVehicle;                                		// 0x0410 (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fNudgeTimeoutDuration;                      		// 0x0414 (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fNudgeRetractDelay;                         		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastNudge;                            		// 0x041C (0x0004) [0x0000000000000000]              
	struct FVector2D                                   m_vNudgeOffsetSpring;                             		// 0x0420 (0x0008) [0x0000000000000000]              
	float                                              m_fCollisionVolumeUpdateTimer;                    		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              m_fVignetteStartHeight;                           		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              RagdollBadSleep;                                  		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x0434 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPhoneDialogueStartTime_ReplicatedInitial;      		// 0x0438 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNPCSkeletalMeshActor" );

		return pClassPointer;
	};

	bool ReplicatedArrayEvent_Native ( struct FName pr_sArrayName, int pr_nElementIndex );
	bool ReplicatedEvent_Native ( struct FName pr_Name );
	void eventReplicatedArrayEvent ( struct FName sArrayName, int nElementIndex );
	void eventReplicatedEvent ( struct FName sVariableName );
	void UseProp ( struct FName sUseTagName );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	class AcProp* GetVignetteProp ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	bool IsCSASupportedNative ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	void OnAnimEndNative ( class UAnimNodeSequence* pr_pSeqNode, float pr_fPlayedTime, float pr_fExcessTime );
	void ProcessDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int nWeaponType );
	void Die ( class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int nWeaponType );
	void eventTornOff ( );
	void EnterRagdoll ( );
	struct FVector GetLookAtPosition ( );
	void SetLookAtPriority ( int pr_nLookAtPriority );
	int GetLookAtPriority ( );
	void CancelInteractionWithProp ( class UActorComponent* pr_pProp );
};

UClass* AcNPCSkeletalMeshActor::pClassPointer = NULL;

// Class APBGame.cAPBMultiLaneRoute
// 0x000C (0x004C - 0x0040)
class UcAPBMultiLaneRoute : public UObject
{
public:
	TArray< struct FcAPBMultiLaneRouteSection >        m_aSections;                                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBMultiLaneRoute" );

		return pClassPointer;
	};

	void Render2D ( class UCanvas* Canvas );
	void Render ( class UCanvas* Canvas, class UcNPCVehicleBrain* pVehicleBrain );
	void GetLocationAndDirection ( struct FcRoutePosition pos, struct FVector* vLocation, struct FVector* vDirection );
	int GetPreviousLaneIndex ( int nSectionIndex, int nLaneIndex );
	int GetNextLaneIndex ( int nSectionIndex, int nLaneIndex );
	int GetLaneIndex ( int nSectionIndex, class URWTechReachSpec* pLaneEdge );
	class URWTechReachSpec* GetLaneEdge ( int nSectionIndex, int nLaneIndex );
	unsigned char GetTurnType ( int nSectionIndex );
	unsigned char GetDefaultLane ( int nSectionIndex );
	int GetNumLanes ( int nSectionIndex );
	int GetNumSections ( );
	void SetTurnType ( int nSectionIndex, unsigned char eTurnType );
	void SetDefaultLane ( int nSectionIndex, int nDefaultLane );
	int AddLane ( int nSectionIndex, class URWTechReachSpec* pLaneEdge );
	int AddSection ( );
	void Empty ( );
};

UClass* UcAPBMultiLaneRoute::pClassPointer = NULL;

// Class APBGame.cAPBRoute
// 0x0034 (0x0074 - 0x0040)
class UcAPBRoute : public UObject
{
public:
	class URWTechNode*                                 m_pStartNode;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pEndNode;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	TArray< class URWTechNode* >                       m_aNodes;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nID;                                            		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSuccessfullyGenerated : 1;                     		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fCost;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              m_fShortestRouteLength;                           		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              m_fLength;                                        		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            m_aVehicleTypesAllowed;                           		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBRoute" );

		return pClassPointer;
	};

};

UClass* UcAPBRoute::pClassPointer = NULL;

// Class APBGame.cAStarManager
// 0x0004 (0x0044 - 0x0040)
class UcAStarManager : public UObject
{
public:
	class AcLCManager*                                 m_LCManager;                                      		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAStarManager" );

		return pClassPointer;
	};

	void eventSetLCManager ( class AcLCManager* pr_LCManager );
	bool FindRoute ( class UcAPBRoute* pr_pRouteToFill, unsigned long pr_bUseAllowedPaths );
};

UClass* UcAStarManager::pClassPointer = NULL;

// Class APBGame.cPedestrianBlockManager
// 0x0004 (0x0044 - 0x0040)
class UcPedestrianBlockManager : public UObject
{
public:
	class UcNodeManager*                               m_pNodeManager;                                   		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianBlockManager" );

		return pClassPointer;
	};

	void SetNodeManager ( class UcNodeManager* pr_pNM );
	class AcLCManager* GetLCManager ( );
	class AWorldInfo* GetWorldInfo ( );
	class UcNodeManager* GetNodeManager ( );
};

UClass* UcPedestrianBlockManager::pClassPointer = NULL;

// Class APBGame.cPedestrianDetailedRoute
// 0x0020 (0x0060 - 0x0040)
class UcPedestrianDetailedRoute : public UObject
{
public:
	class UcPedestrianRouteFollower*                   m_pRouteFollower;                                 		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< class URWTechNode* >                       m_aNodes;                                         		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           m_aNodeOffsets;                                   		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_cfg_nNumSmoothingIterationsPerNode;             		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianDetailedRoute" );

		return pClassPointer;
	};

};

UClass* UcPedestrianDetailedRoute::pClassPointer = NULL;

// Class APBGame.cPedestrianLocomotion
// 0x0054 (0x0094 - 0x0040)
class UcPedestrianLocomotion : public UObject
{
public:
	class UcPedestrianRouteFollower*                   m_pRouteFollower;                                 		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vPosition;                                      		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vDirection;                                     		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rRotation;                                      		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vVelocity;                                      		// 0x006C (0x000C) [0x0000000000000000]              
	unsigned char                                      m_eLState;                                        		// 0x0078 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eNextLState;                                    		// 0x0079 (0x0001) [0x0000000000000000]              
	float                                              m_fLocomotionSpeed;                               		// 0x007C (0x0004) [0x0000000000000000]              
	class UcBaseLocomotionState*                       m_pCurrentState;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	class UcEdgeLocomotionState*                       m_pEdgeState;                                     		// 0x0084 (0x0004) [0x0000000000000000]              
	class UcSmoothLocomotionState*                     m_pSmoothState;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	class UcEdgeLocomotionStateControlPoints*          m_pEdgeStateControlPoints;                        		// 0x008C (0x0004) [0x0000000000000000]              
	class UcSmoothLocomotionStateControlPoints*        m_pSmoothStateControlPoints;                      		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianLocomotion" );

		return pClassPointer;
	};

};

UClass* UcPedestrianLocomotion::pClassPointer = NULL;

// Class APBGame.cPedestrianPathGenerator
// 0x0004 (0x0044 - 0x0040)
class UcPedestrianPathGenerator : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianPathGenerator" );

		return pClassPointer;
	};

};

UClass* UcPedestrianPathGenerator::pClassPointer = NULL;

// Class APBGame.cPedestrianRouteFollower
// 0x0044 (0x0084 - 0x0040)
class UcPedestrianRouteFollower : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcPedestrianLocomotion*                      m_pLocomotion;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eRState;                                        		// 0x0048 (0x0001) [0x0000000000000000]              
	class UcPedestrianDetailedRoute*                   m_pDTRoute;                                       		// 0x004C (0x0004) [0x0000000000000000]              
	class URWTechNode*                                 m_pDTRouteNode;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                m_nDTRouteIndex;                                  		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                m_nScheduledRerouteIndex;                         		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fLocomotionSpeed;                               		// 0x005C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vFirstDTRouteNodeOffset;                        		// 0x0060 (0x000C) [0x0000000000000000]              
	float                                              m_fLookAheadVarianceDistance;                     		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              m_fLookAheadDistance;                             		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nNextCrossingNodeRouteIndex;                    		// 0x0074 (0x0004) [0x0000000000000000]              
	class UcPedestrianCrossing*                        m_pNextCrossing;                                  		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              m_fDistanceToStopLine;                            		// 0x007C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pEdgeUsageManager;                              		// 0x0080 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianRouteFollower" );

		return pClassPointer;
	};

	void SetLocomotionSpeed ( float pr_fLocomotionSpeed );
};

UClass* UcPedestrianRouteFollower::pClassPointer = NULL;

// Class APBGame.cVehicleRouteFollower
// 0x0170 (0x01B0 - 0x0040)
class UcVehicleRouteFollower : public UObject
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcAPBRoute*                                  m_PathfindingRoute;                               		// 0x0044 (0x0004) [0x0000000000000000]              
	class UcAPBMultiLaneRoute*                         m_DetailedRoute;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FcCubicBezierCurveStruct                    m_Curve;                                          		// 0x004C (0x0144) [0x0000000000000000]              
	class UcBaseSpeedState*                            m_pSpeedState;                                    		// 0x0190 (0x0004) [0x0000000000000000]              
	class UcBaseLaneState*                             m_pLaneState;                                     		// 0x0194 (0x0004) [0x0000000000000000]              
	class UcChangeSpeedState*                          m_pChangeSpeedState;                              		// 0x0198 (0x0004) [0x0000000000000000]              
	class UcConstantSpeedState*                        m_pConstantSpeedState;                            		// 0x019C (0x0004) [0x0000000000000000]              
	class UcChangeLaneState*                           m_pChangeLaneState;                               		// 0x01A0 (0x0004) [0x0000000000000000]              
	class UcFollowLaneState*                           m_pFollowLaneState;                               		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              m_fConstantTickTimeLeft;                          		// 0x01A8 (0x0004) [0x0000000000000000]              
	int                                                m_nNextSpliceArrayIndex;                          		// 0x01AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleRouteFollower" );

		return pClassPointer;
	};

	bool HasPriorityForJunction ( class URWTechNode* pJunctionNode );
	class URWTechNode* GetCurrentJunctionNode ( );
	float GetDistAlongRegisteredEdge ( class URWTechReachSpec* pEdge );
	bool IsStationary ( );
	bool IsDecelerating ( );
	bool IsAccelerating ( );
	float GetSpeedMultiplier ( );
	void OnConstantTick ( float fTimeElapsed );
	void OnTick ( float fTimeElapsed );
	bool LocomotionStep ( float fTimeElapsed );
	void RenderVehicleState2D ( class UCanvas* Canvas );
	void RenderVehicleState ( class UCanvas* Canvas );
	void RenderVehicleRoute2D ( class UCanvas* Canvas );
	void RenderVehicleRoute ( class UCanvas* Canvas );
	void BuildMultiLaneRoute ( class URWTechReachSpec* pStartingEdge );
	void OnLaneStateFinished ( );
	class UcFollowLaneState* GoToFollowLaneState ( struct FcRoutePosition pos, float fInitialDistance );
	class UcChangeLaneState* GoToChangeLaneState ( struct FcRoutePosition StartPos, struct FcRoutePosition TargetPos, float fDistance );
	void SetLaneState ( class UcBaseLaneState* pState );
	void OnSpeedStateFinished ( );
	class UcConstantSpeedState* GoToConstantSpeedState ( float fSpeed );
	class UcChangeSpeedState* GoToChangeSpeedState ( float fSpeed, float fAcceleration, float fTargetSpeed );
	void SetSpeedState ( class UcBaseSpeedState* pState );
	void SetPathfindingRoute ( int nRouteLUTIndex );
	void PerformDetourRouteSplice ( );
};

UClass* UcVehicleRouteFollower::pClassPointer = NULL;

// Class APBGame.cVehicleRouteGenerator
// 0x0058 (0x0294 - 0x023C)
class AcVehicleRouteGenerator : public AInfo
{
public:
	int                                                m_nIterationCount;                                		// 0x023C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIterationInProgress : 1;                       		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nMaxRouteCount;                                 		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxRouteCountEdgeID;                           		// 0x0248 (0x0004) [0x0000000000000000]              
	float                                              m_fRMS;                                           		// 0x024C (0x0004) [0x0000000000000000]              
	float                                              m_fMinRMS;                                        		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              m_fAvgNormRouteCount;                             		// 0x0254 (0x0004) [0x0000000000000000]              
	TArray< class UcAPBRoute* >                        m_pBestRoutesArray;                               		// 0x0258 (0x000C) [0x0000000000001000]              ( CPF_Native )
	class APathGraph*                                  m_pPathGraph;                                     		// 0x0264 (0x0004) [0x0000000000000000]              
	TArray< class URWTechReachSpec* >                  m_PathfindingEdges;                               		// 0x0268 (0x000C) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      m_eRenderState;                                   		// 0x0274 (0x0001) [0x0000000000000000]              
	class UcAStarManager*                              m_pAStarManager;                                  		// 0x0278 (0x0004) [0x0000000000000000]              
	class UcNodeManager*                               m_pNodeManager;                                   		// 0x027C (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            m_aAllVehicleTypes;                               		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pAPBRouteTable;                                 		// 0x028C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pLastProcessedRoute;                            		// 0x0290 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleRouteGenerator" );

		return pClassPointer;
	};

	class UcNodeManager* GetNodeManager ( );
	void SetNodeManager ( class UcNodeManager* pr_pNodeManager );
	float GetRouteLength ( class UcAPBRoute* pr_pRoute );
	bool IsVehiclePFNode ( class URWTechNode* pNode );
	struct FLinearColor CovertWeightToRGB ( float fValue );
	void GetVehicleTypesFromSDD ( );
	void SaveRoutesInTable ( );
	void CheckRouteLength ( );
	void ResetWeightsAndRoutes ( );
	void CreateRouteArray ( unsigned long pr_bEditor );
	void RollbackRoutes ( TArray< class UcAPBRoute* > pr_pRouteArray );
	void RollbackRoute ( class UcAPBRoute* pr_pRoute );
	void DoAStar ( );
	bool GenerateVehicleRoutes ( TArray< class URWTechNode* > pr_pUnNodes );
	void ReComputeARoute ( );
	void DoCalculations ( );
	void ProcessRoute ( class UcAPBRoute* pr_Route );
	void UnRegisterWithDVis ( );
	void RegisterWithDVis ( );
	void Initialise ( );
	void PostBeginPlay ( );
};

UClass* AcVehicleRouteGenerator::pClassPointer = NULL;

// Class APBGame.cEventManager
// 0x0054 (0x0094 - 0x0040)
class UcEventManager : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcIEventReaction*                            m_pOwner;                                         		// 0x0044 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0048 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UcEventCriteria* >                   m_apEventCriteria;                                		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pmEvents;                                       		// 0x0058 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pmActiveEvents;                                 		// 0x005C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pmmActiveEvents;                                		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      m_eClassScope;                                    		// 0x0064 (0x0001) [0x0000000000000000]              
	int                                                m_nLastIDGiven;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              m_fLastTimeEventCountsCleared;                    		// 0x006C (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pmWorldEventCounts;                             		// 0x0070 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pInstantNotifierEvent;                          		// 0x0074 (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FPointer >                          m_aPendingEvents;                                 		// 0x0078 (0x000C) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pmEventFactories;                               		// 0x0084 (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FPointer >                          m_apFactoryTypesLoaded;                           		// 0x0088 (0x000C) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEventManager" );

		return pClassPointer;
	};

};

UClass* UcEventManager::pClassPointer = NULL;

// Class APBGame.cEventCriteria
// 0x0018 (0x0058 - 0x0040)
class UcEventCriteria : public UObject
{
public:
	class UcEventManager*                              m_pEventManager;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eClassRole;                                     		// 0x0044 (0x0001) [0x0000000000000000]              
	int                                                m_nPriority;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nIdxToRepTimerArray;                            		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              m_fTimeBetweenEvaluations;                        		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeTillNextEvaluation;                        		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEventCriteria" );

		return pClassPointer;
	};

};

UClass* UcEventCriteria::pClassPointer = NULL;

// Class APBGame.cRandomEventCriteria
// 0x0008 (0x0060 - 0x0058)
class UcRandomEventCriteria : public UcEventCriteria
{
public:
	float                                              m_fMaxTimeInterval;                               		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fMinTimeInterval;                               		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cRandomEventCriteria" );

		return pClassPointer;
	};

};

UClass* UcRandomEventCriteria::pClassPointer = NULL;

// Class APBGame.cDriverRandomAnimEventCriteria
// 0x0004 (0x0064 - 0x0060)
class UcDriverRandomAnimEventCriteria : public UcRandomEventCriteria
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDriverRandomAnimEventCriteria" );

		return pClassPointer;
	};

};

UClass* UcDriverRandomAnimEventCriteria::pClassPointer = NULL;

// Class APBGame.cPedIdleEventCriteria
// 0x0000 (0x0060 - 0x0060)
class UcPedIdleEventCriteria : public UcRandomEventCriteria
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedIdleEventCriteria" );

		return pClassPointer;
	};

};

UClass* UcPedIdleEventCriteria::pClassPointer = NULL;

// Class APBGame.cPedRandomAnimEventCriteria
// 0x0004 (0x0064 - 0x0060)
class UcPedRandomAnimEventCriteria : public UcRandomEventCriteria
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedRandomAnimEventCriteria" );

		return pClassPointer;
	};

};

UClass* UcPedRandomAnimEventCriteria::pClassPointer = NULL;

// Class APBGame.cVehicleBlockedEventCriteria
// 0x0014 (0x006C - 0x0058)
class UcVehicleBlockedEventCriteria : public UcEventCriteria
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLeftToActivateEvent;                       		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              m_fMinStationaryPeriod;                           		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeInterval;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nTriggerCount;                                  		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleBlockedEventCriteria" );

		return pClassPointer;
	};

};

UClass* UcVehicleBlockedEventCriteria::pClassPointer = NULL;

// Class APBGame.cReaction
// 0x002C (0x006C - 0x0040)
class UcReaction : public UObject
{
public:
	class UcReactionManager*                           m_pRM;                                            		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_nReactionID;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sName;                                          		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      m_eReplicationStatus;                             		// 0x0054 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eReactionType;                                  		// 0x0055 (0x0001) [0x0000000000000000]              
	int                                                m_nPriority;                                      		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fDelay;                                         		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              m_fDuration;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bActive : 1;                                    		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nWorldEventID;                                  		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction" );

		return pClassPointer;
	};

};

UClass* UcReaction::pClassPointer = NULL;

// Class APBGame.cReactionList
// 0x0014 (0x0080 - 0x006C)
class UcReactionList : public UcReaction
{
public:
	int                                                m_nActiveAnim;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             m_aAnimNames;                                     		// 0x0070 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bLoopAnimation : 1;                             		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAdjustDuration : 1;                            		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReactionList" );

		return pClassPointer;
	};

	void AddAnimations ( struct FString pr_sAnimationType );
	void eventLoadAnims ( );
};

UClass* UcReactionList::pClassPointer = NULL;

// Class APBGame.cDriverReactionList
// 0x0008 (0x0088 - 0x0080)
class UcDriverReactionList : public UcReactionList
{
public:
	class UcAPBAnimNodeBlendList*                      m_pReactionBlendList;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fBlendTime;                                     		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDriverReactionList" );

		return pClassPointer;
	};

	void AddAnimations ( struct FString pr_sAnimationType );
};

UClass* UcDriverReactionList::pClassPointer = NULL;

// Class APBGame.cReaction_StopAndPlayAnim
// 0x0008 (0x0088 - 0x0080)
class UcReaction_StopAndPlayAnim : public UcReactionList
{
public:
	float                                              m_fBlendTime;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPlayAnimFromStart : 1;                         		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_StopAndPlayAnim" );

		return pClassPointer;
	};

};

UClass* UcReaction_StopAndPlayAnim::pClassPointer = NULL;

// Class APBGame.cReaction_BumpIntoPlayer
// 0x0000 (0x0088 - 0x0088)
class UcReaction_BumpIntoPlayer : public UcReaction_StopAndPlayAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_BumpIntoPlayer" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_BumpIntoPlayer::pClassPointer = NULL;

// Class APBGame.cReaction_Cower
// 0x000C (0x0094 - 0x0088)
class UcReaction_Cower : public UcReaction_StopAndPlayAnim
{
public:
	struct FVector                                     m_vDangerLocation;                                		// 0x0088 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_Cower" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_Cower::pClassPointer = NULL;

// Class APBGame.cReaction_CrimeCommitted
// 0x0020 (0x00A8 - 0x0088)
class UcReaction_CrimeCommitted : public UcReaction_StopAndPlayAnim
{
public:
	struct FVector                                     m_vLookAt_S;                                      		// 0x0088 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vCrimeLocation;                                 		// 0x0094 (0x000C) [0x0000000000000000]              
	float                                              m_fMaxDelay;                                      		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bReactionCompleted : 1;                         		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_CrimeCommitted" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_CrimeCommitted::pClassPointer = NULL;

// Class APBGame.cReaction_PlayAnimWhileWalking
// 0x0008 (0x0088 - 0x0080)
class UcReaction_PlayAnimWhileWalking : public UcReactionList
{
public:
	class UcAPBAnimNodeBlendList*                      m_pReactionBlendList;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fBlendTime;                                     		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_PlayAnimWhileWalking" );

		return pClassPointer;
	};

};

UClass* UcReaction_PlayAnimWhileWalking::pClassPointer = NULL;

// Class APBGame.cReaction_DelayedAnimWhileWalking
// 0x0000 (0x0088 - 0x0088)
class UcReaction_DelayedAnimWhileWalking : public UcReaction_PlayAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DelayedAnimWhileWalking" );

		return pClassPointer;
	};

};

UClass* UcReaction_DelayedAnimWhileWalking::pClassPointer = NULL;

// Class APBGame.cReaction_SpawnDestroy
// 0x0010 (0x007C - 0x006C)
class UcReaction_SpawnDestroy : public UcReaction
{
public:
	float                                              m_fTimeElapsed;                                   		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_ePedEvent;                                      		// 0x0070 (0x0001) [0x0000000000000000]              
	float                                              m_fDestroyDuration;                               		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPlayParticleEffect : 1;                        		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_SpawnDestroy" );

		return pClassPointer;
	};

};

UClass* UcReaction_SpawnDestroy::pClassPointer = NULL;

// Class APBGame.cReaction_DespawnPedestrian
// 0x0000 (0x007C - 0x007C)
class UcReaction_DespawnPedestrian : public UcReaction_SpawnDestroy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DespawnPedestrian" );

		return pClassPointer;
	};

};

UClass* UcReaction_DespawnPedestrian::pClassPointer = NULL;

// Class APBGame.cReaction_DriverAngry
// 0x0000 (0x0088 - 0x0088)
class UcReaction_DriverAngry : public UcDriverReactionList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DriverAngry" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_DriverAngry::pClassPointer = NULL;

// Class APBGame.cReaction_DriverDeSpawn
// 0x0014 (0x0094 - 0x0080)
class UcReaction_DriverDeSpawn : public UcReactionList
{
public:
	float                                              m_fTimeElapsed;                                   		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fDestroyDuration;                               		// 0x0084 (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           m_pAnimNodeSeq;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_LastEjectAnimation;                             		// 0x008C (0x0001) [0x0000000000000000]              
	unsigned long                                      m_bPlayParticleEffect : 1;                        		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DriverDeSpawn" );

		return pClassPointer;
	};

	void AddAnimations ( struct FString pr_sAnimationType );
	void eventLoadAnims ( );
};

UClass* UcReaction_DriverDeSpawn::pClassPointer = NULL;

// Class APBGame.cReaction_DriverRandomAnim
// 0x0004 (0x008C - 0x0088)
class UcReaction_DriverRandomAnim : public UcDriverReactionList
{
public:
	int                                                m_nPerformedCount;                                		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DriverRandomAnim" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_DriverRandomAnim::pClassPointer = NULL;

// Class APBGame.cReaction_DriverFrustrated
// 0x0000 (0x008C - 0x008C)
class UcReaction_DriverFrustrated : public UcReaction_DriverRandomAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DriverFrustrated" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_DriverFrustrated::pClassPointer = NULL;

// Class APBGame.cReaction_DriverPanic
// 0x0000 (0x0088 - 0x0088)
class UcReaction_DriverPanic : public UcDriverReactionList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DriverPanic" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_DriverPanic::pClassPointer = NULL;

// Class APBGame.cReaction_DriverStopAndPanic
// 0x0000 (0x0088 - 0x0088)
class UcReaction_DriverStopAndPanic : public UcReaction_DriverPanic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_DriverStopAndPanic" );

		return pClassPointer;
	};

};

UClass* UcReaction_DriverStopAndPanic::pClassPointer = NULL;

// Class APBGame.cReaction_Flinch
// 0x0000 (0x0088 - 0x0088)
class UcReaction_Flinch : public UcReaction_DelayedAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_Flinch" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_Flinch::pClassPointer = NULL;

// Class APBGame.cReaction_InstantAnimWhileWalking
// 0x0000 (0x0088 - 0x0088)
class UcReaction_InstantAnimWhileWalking : public UcReaction_PlayAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_InstantAnimWhileWalking" );

		return pClassPointer;
	};

};

UClass* UcReaction_InstantAnimWhileWalking::pClassPointer = NULL;

// Class APBGame.cReaction_LookAround
// 0x0004 (0x0070 - 0x006C)
class UcReaction_LookAround : public UcReaction
{
public:
	class AActor*                                      m_pTargetActor;                                   		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_LookAround" );

		return pClassPointer;
	};

};

UClass* UcReaction_LookAround::pClassPointer = NULL;

// Class APBGame.cReaction_LookAt
// 0x001C (0x0088 - 0x006C)
class UcReaction_LookAt : public UcReaction
{
public:
	class UiNPCLookAt*                                 m_TargetInterface;                                		// 0x006C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0070 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class AActor*                                      m_pTargetActor;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vTargetLocation;                                		// 0x0078 (0x000C) [0x0000000000000000]              
	class USkelControlLookAt*                          m_pLookAtControl;                                 		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_LookAt" );

		return pClassPointer;
	};

};

UClass* UcReaction_LookAt::pClassPointer = NULL;

// Class APBGame.cReaction_PlayAnimWhileStationary
// 0x0008 (0x0088 - 0x0080)
class UcReaction_PlayAnimWhileStationary : public UcReactionList
{
public:
	class UcAPBAnimNodeBlendList*                      m_pReactionBlendList;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fBlendTime;                                     		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_PlayAnimWhileStationary" );

		return pClassPointer;
	};

};

UClass* UcReaction_PlayAnimWhileStationary::pClassPointer = NULL;

// Class APBGame.cReaction_PedWaitingAnxious
// 0x0000 (0x0088 - 0x0088)
class UcReaction_PedWaitingAnxious : public UcReaction_PlayAnimWhileStationary
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_PedWaitingAnxious" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_PedWaitingAnxious::pClassPointer = NULL;

// Class APBGame.cReaction_PedWaitingGeneric
// 0x0000 (0x0088 - 0x0088)
class UcReaction_PedWaitingGeneric : public UcReaction_PlayAnimWhileStationary
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_PedWaitingGeneric" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_PedWaitingGeneric::pClassPointer = NULL;

// Class APBGame.cReaction_RandomAnim
// 0x0000 (0x0088 - 0x0088)
class UcReaction_RandomAnim : public UcReaction_DelayedAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_RandomAnim" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_RandomAnim::pClassPointer = NULL;

// Class APBGame.cReaction_RunAway
// 0x0004 (0x008C - 0x0088)
class UcReaction_RunAway : public UcReaction_InstantAnimWhileWalking
{
public:
	float                                              m_fRunSpeed;                                      		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_RunAway" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_RunAway::pClassPointer = NULL;

// Class APBGame.cReaction_RunIntoBuilding
// 0x0018 (0x00A4 - 0x008C)
class UcReaction_RunIntoBuilding : public UcReaction_RunAway
{
public:
	unsigned long                                      m_bDestroyNodeChosen : 1;                         		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fTimeInterval;                                  		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastCheck;                            		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vEventLocation;                                 		// 0x0098 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_RunIntoBuilding" );

		return pClassPointer;
	};

};

UClass* UcReaction_RunIntoBuilding::pClassPointer = NULL;

// Class APBGame.cReaction_StationaryRandomAnim
// 0x0000 (0x0088 - 0x0088)
class UcReaction_StationaryRandomAnim : public UcReaction_StopAndPlayAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_StationaryRandomAnim" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_StationaryRandomAnim::pClassPointer = NULL;

// Class APBGame.cReaction_SyncedRandomAnim
// 0x0000 (0x0088 - 0x0088)
class UcReaction_SyncedRandomAnim : public UcReaction_InstantAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_SyncedRandomAnim" );

		return pClassPointer;
	};

	void eventLoadAnims ( );
};

UClass* UcReaction_SyncedRandomAnim::pClassPointer = NULL;

// Class APBGame.cReaction_TaskTargetInteraction
// 0x0020 (0x008C - 0x006C)
class UcReaction_TaskTargetInteraction : public UcReaction
{
public:
	unsigned char                                      m_eCurrentState;                                  		// 0x006C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCSAIndex;                                      		// 0x006D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCurrentStage;                                  		// 0x006E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eAnimIndex;                                     		// 0x006F (0x0001) [0x0000000000000000]              
	float                                              m_fTTIDuration;                                   		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              m_fAnimTimeElapsed;                               		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              m_fEndingDuration;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              m_fBlendTime;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	class UAnimNodeBlendList*                          m_pAnimNode;                                      		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fDurationWhenCancelled;                         		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCancelPending : 1;                             		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_TaskTargetInteraction" );

		return pClassPointer;
	};

};

UClass* UcReaction_TaskTargetInteraction::pClassPointer = NULL;

// Class APBGame.cReaction_VehicleCriticallyDamaged
// 0x0000 (0x0088 - 0x0088)
class UcReaction_VehicleCriticallyDamaged : public UcReaction_DriverStopAndPanic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReaction_VehicleCriticallyDamaged" );

		return pClassPointer;
	};

};

UClass* UcReaction_VehicleCriticallyDamaged::pClassPointer = NULL;

// Class APBGame.cReactionManager
// 0x0020 (0x0060 - 0x0040)
class UcReactionManager : public UObject
{
public:
	class UcIEventReaction*                            m_pOwner;                                         		// 0x0040 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0044 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FPointer                                    m_pmReactions;                                    		// 0x0048 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UcReaction*                                  m_pCurrentReaction;                               		// 0x004C (0x0004) [0x0000000000000000]              
	class UcReaction*                                  m_pPendingReaction;                               		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< struct FReactionRequest >                  m_aPendingRequests;                               		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cReactionManager" );

		return pClassPointer;
	};

};

UClass* UcReactionManager::pClassPointer = NULL;

// Class APBGame.cJunction
// 0x004C (0x008C - 0x0040)
class UcJunction : public UObject
{
public:
	struct FVector                                     m_vJunctionLocation;                              		// 0x0040 (0x000C) [0x0000000000000000]              
	unsigned char                                      m_eState;                                         		// 0x004C (0x0001) [0x0000000000000000]              
	int                                                m_nCurrentStage;                                  		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeInCurrentStage;                            		// 0x0054 (0x0004) [0x0000000000000000]              
	TArray< struct FJunctionStage >                    m_aJunctionStages;                                		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNPCWaitingRecord >                 m_aPedsWaiting;                                   		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcPedestrianCrossing* >              m_aPedestrianCrossings;                           		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aNearbyVehicles;                                		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fTimeSinceVehicleRegistrationUpdate;            		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cJunction" );

		return pClassPointer;
	};

};

UClass* UcJunction::pClassPointer = NULL;

// Class APBGame.cJunctionManager
// 0x0014 (0x0054 - 0x0040)
class UcJunctionManager : public UObject
{
public:
	struct FPointer                                    m_pJunctionMap;                                   		// 0x0040 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pCrossingMap;                                   		// 0x0044 (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< class AcProp* >                            m_aRegistrationQueue;                             		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cJunctionManager" );

		return pClassPointer;
	};

};

UClass* UcJunctionManager::pClassPointer = NULL;

// Class APBGame.cNonTrafficLightJunction
// 0x005C (0x00E8 - 0x008C)
class UcNonTrafficLightJunction : public UcJunction
{
public:
	int                                                m_nIdxToStatusArray;                              		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHasPedestrianCrossing : 1;                     		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class URWTechReachSpec* >                  m_aPFEdges;                                       		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMap_Mirror                                 m_tVehiclesWaiting;                               		// 0x00A0 (0x003C) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fRecycleCheckTimer;                             		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                m_nRecycleCheckEdgeIndex;                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                m_nJunctionNodeID;                                		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cNonTrafficLightJunction" );

		return pClassPointer;
	};

};

UClass* UcNonTrafficLightJunction::pClassPointer = NULL;

// Class APBGame.cPedestrianCrossing
// 0x0048 (0x0088 - 0x0040)
class UcPedestrianCrossing : public UObject
{
public:
	class UPedestrianCrossingLaneReachSpec*            m_pCrossingEdge;                                  		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcJunction*                                  m_pJunction;                                      		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vCrossingDir;                                   		// 0x0048 (0x000C) [0x0000000000000000]              
	float                                              m_fStopLineDistance;                              		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_fStreetStartDistance;                           		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_fStreetEndDistance;                             		// 0x005C (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vStopLinePoint1;                                		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vStopLinePoint2;                                		// 0x006C (0x000C) [0x0000000000000000]              
	TArray< class UcNPCPedestrianBrain* >              m_aRegisteredPeds;                                		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nNumberOfPedsInStreet;                          		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianCrossing" );

		return pClassPointer;
	};

};

UClass* UcPedestrianCrossing::pClassPointer = NULL;

// Class APBGame.cPedestrianJunctionManager
// 0x0024 (0x0064 - 0x0040)
class UcPedestrianJunctionManager : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcPedestrianCrossing*                        m_pRegisteredCrossing;                            		// 0x0044 (0x0004) [0x0000000000000000]              
	class UcPedestrianCrossing*                        m_pRegisteredInStreetCrossing;                    		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeLeftToResumeWalking;                       		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bStopped : 1;                                   		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_cfg_fPedestrianStopLineCollisionDistance;       		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fPedestrianInMotionCollisionDistance;       		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fPedestrianStationaryCollisionDistance;     		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              m_cfg_fPedestrianMinCrossingStopTime;             		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPedestrianJunctionManager" );

		return pClassPointer;
	};

};

UClass* UcPedestrianJunctionManager::pClassPointer = NULL;

// Class APBGame.cTrafficLightJunction
// 0x0024 (0x00B0 - 0x008C)
class UcTrafficLightJunction : public UcJunction
{
public:
	int                                                m_nIdxToStatusArray;                              		// 0x008C (0x0004) [0x0000000000000000]              
	TArray< struct FtTrafficLightPair >                m_aTrafficLightGroups;                            		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fPrepareToHaltTimer;                            		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fRecycleCheckTimer;                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                m_nRecycleCheckPairIndex;                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCheckingFirstEdge : 1;                         		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nJunctionNodeID;                                		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTrafficLightJunction" );

		return pClassPointer;
	};

};

UClass* UcTrafficLightJunction::pClassPointer = NULL;

// Class APBGame.cAmmoDepotTriggerVolume
// 0x0018 (0x0290 - 0x0278)
class AcAmmoDepotTriggerVolume : public AcAPBTriggerVolume
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0278 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IiAmmoSupplier;                           		// 0x027C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      m_eFaction;                                       		// 0x0280 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0284 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0288 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_nHUDMarkerID;                                   		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAmmoDepotTriggerVolume" );

		return pClassPointer;
	};

	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
	void TermHUDMarker ( );
	void InitHUDMarker ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void NotifyUnTouch ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void NotifyTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AcAmmoDepotTriggerVolume::pClassPointer = NULL;

// Class APBGame.cAnimationDrivenTrigger
// 0x005C (0x02D4 - 0x0278)
class AcAnimationDrivenTrigger : public AcAPBTriggerVolume
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0278 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcAnimationDescriptor*                       m_Animation;                                      		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UcAnimationDescriptor*                       m_AlternativeAnimation;                           		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_Actor;                                          		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_TargetEdge[ 0x2 ];                              		// 0x0288 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_Dimensions;                                     		// 0x02A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            m_aIgnoreCollisionWith;                           		// 0x02AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UcEdgeHighlightComponent*                    m_EdgeHighlightComponent;                         		// 0x02B8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AcAnimationDrivenTrigger*                    m_OppositeTrigger;                                		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bTaskItemPassable : 1;                          		// 0x02C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDrawingMarker : 1;                             		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000002] 
	class UStaticMeshComponent*                        m_Marker;                                         		// 0x02C4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_HUDMarkerID;                                    		// 0x02C8 (0x0004) [0x0000000000000000]              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x02CC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UcAnimationDescriptor*                       m_AnimationToPlay;                                		// 0x02D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimationDrivenTrigger" );

		return pClassPointer;
	};

	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	void StopDrawingMarker ( );
	void StartDrawingMarker ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventDestroyed ( );
	void NativePostBeginPlay ( );
	void eventPostBeginPlay ( );
	float RetStaminaDrain ( class UcAnimationDescriptor* Animation );
	void GetExtraRootMotionPerSecond ( class APawn* Pawn, struct FVector StartLocation, struct FVector* ExtraRootMotionPerSecond, float* ContactTime, struct FRotator* SnapRotation );
	void GetSnapLocation ( class APawn* Pawn, struct FVector* SnapLocation, struct FRotator* SnapRotation );
	void GetStartEdge ( class APawn* Pawn, struct FVector* Start, struct FVector* End );
	void GetTargetEdge ( struct FVector* Start, struct FVector* End );
	struct FRotator Alignment ( struct FVector Start, struct FVector End );
	struct FVector ClosestPointOnLine ( struct FVector Point, struct FVector Start, struct FVector End );
	class AcAnimationDrivenTrigger* RetOppositeTrigger ( );
	bool IsTaskItemPassable ( );
};

UClass* AcAnimationDrivenTrigger::pClassPointer = NULL;

// Class APBGame.cPlayerVehicleSpawnDirection
// 0x0000 (0x023C - 0x023C)
class AcPlayerVehicleSpawnDirection : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerVehicleSpawnDirection" );

		return pClassPointer;
	};

};

UClass* AcPlayerVehicleSpawnDirection::pClassPointer = NULL;

// Class APBGame.cAPBTempCover
// 0x001C (0x0290 - 0x0274)
class AcAPBTempCover : public ADynamicSMActor
{
public:
	struct FPointer                                    VfTable_ICombatTargetingInterface;                		// 0x0274 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IDamageInterface;                         		// 0x0278 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcDamageFilterComponent*                     m_DamageFilterComponent;                          		// 0x027C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_Health;                                         		// 0x0280 (0x0004) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	float                                              m_RespawnTime;                                    		// 0x0284 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_TimeDestroyed;                                  		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              m_InitialHealth;                                  		// 0x028C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBTempCover" );

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void eventPostBeginPlay ( );
	bool FilterHealing ( class UClass* DamageType );
	bool FilterDamage ( class UClass* DamageType );
	bool IsFiltered ( class UClass* DamageType );
	void UpdateDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void RemoveDamageType ( class UClass* DamageType );
	void AddDamageType ( class UClass* DamageType, unsigned long Damage, unsigned long Healing );
	void eventHealDamageTimed ( float TimePeriod, int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamageTimed ( float TimePeriod, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool eventRestore ( int Amount, class AController* Healer, class UClass* DamageType );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	bool eventIsSoft ( );
	bool eventIsHard ( );
	void RetExplosionOcclusionExtents ( TArray< struct FVector >* Verts, struct FVector* ExplosionLocation );
	bool IsStaticTarget ( );
	bool IsDynamicTarget ( );
	bool CanBeDamaged ( class AcAPBPlayerController* PC );
	bool CanBeTargeted ( class AcAPBPlayerController* PC );
};

UClass* AcAPBTempCover::pClassPointer = NULL;

// Class APBGame.cTTSpawnInVolumeComponent
// 0x0008 (0x0110 - 0x0108)
class UcTTSpawnInVolumeComponent : public UcTaskTargetComponent
{
public:
	class AcTaskItemSpawnZone*                         m_SpawnZone;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaxAttempts;                                   		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTTSpawnInVolumeComponent" );

		return pClassPointer;
	};

};

UClass* UcTTSpawnInVolumeComponent::pClassPointer = NULL;

// Class APBGame.cTaskTargetTaskItemSpawner
// 0x0020 (0x025C - 0x023C)
class AcTaskTargetTaskItemSpawner : public AActor
{
public:
	struct FPointer                                    VfTable_ITaskTargetInterface;                     		// 0x023C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UcTaskTargetComponent*                       m_TaskTargetComponent;                            		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AcTaskItemPickup*                            m_TaskItemPickup;                                 		// 0x0244 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x0248 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOperationID;                            		// 0x024C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID;                           		// 0x0250 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOwningSideID_Initial;                   		// 0x0254 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                m_nRepTaskOpposingSideID;                         		// 0x0258 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskTargetTaskItemSpawner" );

		return pClassPointer;
	};

	bool ClientVFXIsLocalPlayerInTask ( );
	void ClientVFXNotifyLocalPlayerSideChange ( int nOldSideID, int nNewSideID );
	void ClientNotifyTaskOperationChanged ( int nTaskOperationIndex );
	void ClientNotifyTaskVFXStateChanged ( unsigned char eTriggeredState );
	void ClientNotifyMissionOppositionChanged ( int nOpposingSideID );
	void ClientNotifyMissionOwnersChanged ( int nOwningSideID, unsigned long bMissionInitialising );
	void MoveTargetState ( class AActor* targetActor );
	bool IsOpenWorldTarget ( );
	unsigned char RetTriggerState ( );
	bool IsTriggerableByOpposition ( );
	bool IsResetable ( );
	bool IsPartiallyTriggered ( );
	bool IsTriggered ( );
	int RetTaskOpposingSideID ( );
	int RetTaskOwningSideID ( );
	unsigned char RetTaskTargetVFXState ( );
	void ResetTaskTarget ( class AcAPBPlayerController* pPC );
	void PartiallyTriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void TriggerTaskTarget ( class AcAPBPlayerController* pPC );
	void DeactivateTaskTarget ( );
	void ActivateTaskTarget ( class AcTaskObjective* TaskObjective );
	void CleanUpTaskTarget ( );
	void InitTaskTarget ( class AcTaskDescription* TaskDesc );
	class UcTaskTargetComponent* RetTaskTargetComponent ( );
	void OnTaskItemSpawned ( class AcTaskItem* pSpawnedTaskItem );
	void OnItemPickedUp ( class AcTaskItem* pTaskItem );
	void InstigateTaskOpposition ( );
	class AcTaskItemPickup* RetTaskItemPickup ( );
	void eventCallSuperReplicated ( struct FName VarName );
	void NativeReplicatedEvent ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AcTaskTargetTaskItemSpawner::pClassPointer = NULL;

// Class APBGame.cPlayerControllerCSAComponent
// 0x00B7 (0x0110 - 0x0059)
class UcPlayerControllerCSAComponent : public UActorComponent
{
public:
	struct FInteractionData                            m_InteractionData;                                		// 0x005C (0x004C) [0x0000000000000000]              
	struct FInteractionData                            m_PendingInteractionData;                         		// 0x00A8 (0x004C) [0x0000000000000000]              
	unsigned char                                      m_ePendingCSAType;                                		// 0x00F4 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCurrentCSAState;                               		// 0x00F5 (0x0001) [0x0000000000000000]              
	struct FVector                                     m_vInitialPawnLocation;                           		// 0x00F8 (0x000C) [0x0000000000000000]              
	unsigned long                                      m_bEndCSACalled : 1;                              		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FDouble                                     m_dCSAStartTime;                                  		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerControllerCSAComponent" );

		return pClassPointer;
	};

	bool IsCSAIndefinite ( );
	bool IsCSAAnimationTimed ( );
	bool IsCSATimed ( );
	void EndCSA ( unsigned char eCSAState );
	void OnReceivedCSAAnimEvent ( unsigned char eAnimEvent );
	void OnCSACompletionCallback ( );
	void OnCSATimeExpired ( unsigned long bOutroFinished );
	void OnCSAAutoRouteFailed ( );
	void ResetPendingCSA ( );
	void BeginPendingCSA ( unsigned char ePendingCSAType );
	void BeginCSA ( unsigned char eCSA, class AActor* pInteractiveActor, int nIPIndex, float fOverideDuration );
	bool CanBeginCSA ( unsigned char eCSA, class AActor* pInteractiveActor, int nIPIndex );
	unsigned char RetCSAPendingType ( );
	bool IsCSAPending ( );
	struct FVector RetInitialPawnLocation ( );
	float RetItemEffectivenessModifier ( );
	class AActor* RetInteractiveActor ( );
	bool RetEndCSACalled ( );
	void eventUnRegisterAnimationCallback ( class AcAPBPawn* ApbPawn );
	void eventRegisterAnimationCallback ( class AcAPBPawn* ApbPawn );
};

UClass* UcPlayerControllerCSAComponent::pClassPointer = NULL;

// Class APBGame.cVendorContactInterface
// 0x0004 (0x0240 - 0x023C)
class AcVendorContactInterface : public AReplicationInfo
{
public:
	unsigned long                                      m_bIsActive : 1;                                  		// 0x023C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVendorContactInterface" );

		return pClassPointer;
	};

};

UClass* AcVendorContactInterface::pClassPointer = NULL;

// Class APBGame.cPlayerControllerTypes
// 0x0000 (0x0040 - 0x0040)
class UcPlayerControllerTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerControllerTypes" );

		return pClassPointer;
	};

};

UClass* UcPlayerControllerTypes::pClassPointer = NULL;

// Class APBGame.cVehicleCargoInventory
// 0x0034 (0x0270 - 0x023C)
class AcVehicleCargoInventory : public AActor
{
public:
	TArray< struct FCargoTaskItem >                    m_aCargoItems;                                    		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcAPBPawn* >                         m_aCargoPassengers;                               		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMaxPips;                                       		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nMaxPassengers;                                 		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCurrentPips;                                   		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                m_nCurrentPassengers;                             		// 0x0260 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      m_eCurrentCargoType;                              		// 0x0264 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class AcAPBVehicleBase*                            m_VehicleOwner;                                   		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                m_nNumTaskItems;                                  		// 0x026C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleCargoInventory" );

		return pClassPointer;
	};

	void DebugLogContents ( );
	void KillPassengers ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool IsEmpty ( );
	void SpawnTaskItemPickups ( unsigned long bIgnoreOpenWorldItems );
	int RetClientNumTaskItems ( );
	int RetNumTaskItems ( );
	unsigned char RetCurrentCargoType ( );
	int RetCurrentPassengers ( );
	int RetMaxPassengers ( );
	int RetCurrentPips ( );
	int RetMaxPips ( );
	void SetMaxPassengers ( int nMax );
	void SetMaxPips ( int nMax );
	unsigned char RetNextTaskItemSizeForPlayer ( class AcAPBPlayerController* pRetrievingPlayer );
	unsigned char RetNextTaskItemSize ( );
	class AcEquipableTaskItem* TryRetrieveTaskItem ( class AcAPBPlayerController* pRetrievingPlayer );
	class AcEquipableTaskItem* PopTaskItem ( );
	void AddTaskItem ( class AcEquipableTaskItem* TaskItem, int nInserterGroupID );
	bool IsAPassenger ( class AcAPBPawn* Passenger );
	class AcAPBPawn* GetPassenger ( int nIndex );
	bool RemovePassenger ( class AcAPBPawn* Passenger );
	void AddPassenger ( class AcAPBPawn* Passenger );
	void SetCargoInventoryOwner ( class AcAPBVehicleBase* VehicleOwner );
};

UClass* AcVehicleCargoInventory::pClassPointer = NULL;

// Class APBGame.cPseudoKinematicComponent
// 0x0083 (0x00DC - 0x0059)
class UcPseudoKinematicComponent : public UActorComponent
{
public:
	class UMeshComponent*                              TriggerComponent;                                 		// 0x005C (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	unsigned char                                      pkcState;                                         		// 0x0060 (0x0001) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    pClientState;                                     		// 0x0064 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              fTime_NoEncroach;                                 		// 0x0068 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              fTime_NoKinematicCollision;                       		// 0x006C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              fTime_NoPseudoKinematicCollision;                 		// 0x0070 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              fTime_NoLCSpawnBlockingVolumeCollision;           		// 0x0074 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              fMinTime_NoEncroach;                              		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              fMinTime_NoKinematicCollision;                    		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              fMinTime_NoPseudoKinematicCollision;              		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              fMinTime_NoLCSpawnBlockingVolumeCollision;        		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     vKinematicLocation;                               		// 0x0088 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FRotator                                    rKinematicRotation;                               		// 0x0094 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     vKinematicLinearVelocity;                         		// 0x00A0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     vKinematicAngularVelocity;                        		// 0x00AC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    pRBState;                                         		// 0x00B8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FRigidBodyUnpackParams                      unpackParams;                                     		// 0x00BC (0x0014) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UMaterialInterface*                          originalMatInst;                                  		// 0x00D0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   debugMatInst;                                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDebugColoration : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPseudoKinematicComponent" );

		return pClassPointer;
	};

	bool IsEncroached ( );
	void SetKinematicPosition ( struct FVector vLocation, struct FRotator rRotation );
	void EnterState ( unsigned char eNewState );
};

UClass* UcPseudoKinematicComponent::pClassPointer = NULL;

// Class APBGame.cLaneCommand
// 0x0000 (0x0040 - 0x0040)
class UcLaneCommand : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLaneCommand" );

		return pClassPointer;
	};

};

UClass* UcLaneCommand::pClassPointer = NULL;

// Class APBGame.cVehicleLightsPattern
// 0x0040 (0x0080 - 0x0040)
class UcVehicleLightsPattern : public UObject
{
public:
	struct FString                                     m_sPatternName;                                   		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     m_sPatternDescription;                            		// 0x004C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            m_UsedChannels;                                   		// 0x0058 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      m_aLightsPatternClasses[ 0x4 ];                   		// 0x0064 (0x0010) [0x0000000000000000]              
	class UGolemobile*                                 m_MyGolemobile;                                   		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bInvert : 1;                                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              m_fTimeDilation;                                  		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleLightsPattern" );

		return pClassPointer;
	};

	void SwitchOff ( );
	void SetEmissiveValue ( unsigned char EmissiveChannel, float fValue );
	void UpdateLights ( float fTimeDelta );
	class UcVehicleLightsPattern* CreateLightsPatternObject ( unsigned char PatternID, class UGolemobile* pGolemobileToUpdate );
};

UClass* UcVehicleLightsPattern::pClassPointer = NULL;

// Class APBGame.cVehicleLightsPattern_EnforcerPlaceholder
// 0x0004 (0x0084 - 0x0080)
class UcVehicleLightsPattern_EnforcerPlaceholder : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleLightsPattern_EnforcerPlaceholder" );

		return pClassPointer;
	};

	void UpdateLights ( float fTimeDelta );
};

UClass* UcVehicleLightsPattern_EnforcerPlaceholder::pClassPointer = NULL;

// Class APBGame.cVehicleLightsPattern_FlashOneAndTwo
// 0x0004 (0x0084 - 0x0080)
class UcVehicleLightsPattern_FlashOneAndTwo : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleLightsPattern_FlashOneAndTwo" );

		return pClassPointer;
	};

	void UpdateLights ( float fTimeDelta );
};

UClass* UcVehicleLightsPattern_FlashOneAndTwo::pClassPointer = NULL;

// Class APBGame.cVehicleLightsPattern_TEST
// 0x0000 (0x0080 - 0x0080)
class UcVehicleLightsPattern_TEST : public UcVehicleLightsPattern
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleLightsPattern_TEST" );

		return pClassPointer;
	};

	void UpdateLights ( float fTimeDelta );
};

UClass* UcVehicleLightsPattern_TEST::pClassPointer = NULL;

// Class APBGame.cAPBVehicleSimObj
// 0x0084 (0x0160 - 0x00DC)
class UcAPBVehicleSimObj : public USVehicleSimCar
{
public:
	struct FInterpCurveFloat                           m_TorqueCurve;                                    		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           m_ShiftCurve;                                     		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fRedlineRPM;                                    		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fGearRatios[ 0x6 ];                             		// 0x0100 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTransRatio;                                    		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLSDFactor;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fIdleRPM;                                       		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fThrottleSpeed;                                 		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTotalSpinVel;                                  		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fEngineRPM;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              m_fGearChangeTime;                                		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              m_fLastHandbrakeFactor;                           		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              GEAR_CHANGE_TIME;                                 		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              fTrackedInput;                                    		// 0x013C (0x0004) [0x0000000000000000]              
	struct FDouble                                     fTimerStart;                                      		// 0x0140 (0x0008) [0x0000000000000000]              
	struct FDouble                                     fElapsedOutput;                                   		// 0x0148 (0x0008) [0x0000000000000000]              
	struct FDouble                                     fElapsedActual;                                   		// 0x0150 (0x0008) [0x0000000000000000]              
	float                                              fCurrentSteeringSpeed;                            		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              fCurrentSteeringValue;                            		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBVehicleSimObj" );

		return pClassPointer;
	};

	float GetCurrentPower ( );
	float GetEngineRPM ( class ASVehicle* Vehicle );
};

UClass* UcAPBVehicleSimObj::pClassPointer = NULL;

// Class APBGame.cVehicleSetupInfo
// 0x00DC (0x013C - 0x0060)
class UcVehicleSetupInfo : public UcSetupInfo
{
public:
	struct FString                                     m_sVehicleName;                                   		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USVehicleSimBase*                            m_SimObj;                                         		// 0x006C (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	TArray< class USVehicleWheel* >                    m_aWheels;                                        		// 0x0070 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FName >                             m_aSeatSocketNames;                               		// 0x007C (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     m_vCOMOffset;                                     		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vInertiaTensorMultiplier;                       		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bStayUpright : 1;                               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              m_fStayUprightRollResistAngle;                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStayUprightPitchResistAngle;                   		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStayUprightStiffness;                          		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStayUprightDamping;                            		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fUprightLiftStrength;                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fUprightTorqueStrength;                         		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fUprightTime;                                   		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vBaseOffset;                                    		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vFarOffset;                                     		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vWorstOffset;                                   		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCamDist;                                       		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFarCamDist;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHandbrakeRampdownTime;                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fHandbrakeThresholdSpeed;                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFrontRearBrakeBalance;                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxBrakeDeceleration;                          		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxSpeed;                                      		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fThrottleForceMultiplier;                       		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTyreLongitudnalGrip;                           		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTyreLateralGrip;                               		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDragForceMultiplier;                           		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               m_PhysicsAsset;                                   		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMorphTargetSet* >                   m_aMorphSets;                                     		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UGolemobile*                                 m_pGolemobile;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_BlobShadowScale3D;                              		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_BlobShadowTranslation;                          		// 0x0130 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVehicleSetupInfo" );

		return pClassPointer;
	};

};

UClass* UcVehicleSetupInfo::pClassPointer = NULL;

// Class APBGame.cSetupTypeManager
// 0x031C (0x0558 - 0x023C)
class AcSetupTypeManager : public AActor
{
public:
	unsigned long                                      m_bEnabled : 1;                                   		// 0x023C (0x0004) [0x0000000000000000] [0x00000001] 
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x0240 (0x0004) [0x0000000000000000]              
	class UcClientSetupTypeHelper*                     m_pCSTHelper;                                     		// 0x0244 (0x0004) [0x0000000000000000]              
	struct FSActiveAssetIndexes                        m_aPedestrianAssetRange[ 0x14 ];                  		// 0x0248 (0x00F0) [0x0000000000000020]              ( CPF_Net )
	struct FSActiveAssetIndexes                        m_aVehicleAssetRange[ 0x14 ];                     		// 0x0338 (0x00F0) [0x0000000000000020]              ( CPF_Net )
	int                                                m_aPedestrianAssetRangeReceived[ 0x14 ];          		// 0x0428 (0x0050) [0x0000000000000000]              
	int                                                m_aVehicleAssetRangeReceived[ 0x14 ];             		// 0x0478 (0x0050) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x04C8 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeManager.m_mPedestrianTypeArrayOffsets
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0504 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeManager.m_mVehicleCategoryArrayOffsets
	float                                              m_cfg_fInitialPedestrianRotationInSeconds;        		// 0x0540 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fDefaultPedestrianRotationInSeconds;        		// 0x0544 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fInitialVehicleRotationInSeconds;           		// 0x0548 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fDefaultVehicleRotationInSeconds;           		// 0x054C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fClientGCAndStreamDelayInSeconds;           		// 0x0550 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_cfg_fReleaseDelayInSeconds;                     		// 0x0554 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeManager" );

		return pClassPointer;
	};

	void ReceivedVehicleAssetRangeOnClient ( int pr_nAryOffset );
	void ReceivedPedestrianAssetRangeOnClient ( int pr_nAryOffset );
	void eventReplicatedArrayEvent ( struct FName VarName, int nElement );
};

UClass* AcSetupTypeManager::pClassPointer = NULL;

// Class APBGame.cStreamedLODStaticMeshActor
// 0x0010 (0x0250 - 0x0240)
class AcStreamedLODStaticMeshActor : public AStaticMeshActor
{
public:
	class UcStreamedComponentSet*                      m_ComponentSet;                                   		// 0x0240 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     m_StreamingPriPos;                                		// 0x0244 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStreamedLODStaticMeshActor" );

		return pClassPointer;
	};

	bool IsLocked ( );
	void UnlockHighLODs ( );
	void LockHighLODs ( );
	void PrepareComponent ( class UActorComponent* pComponent, int nLOD );
};

UClass* AcStreamedLODStaticMeshActor::pClassPointer = NULL;

// Class APBGame.cStreamedBuildingActor
// 0x0030 (0x0280 - 0x0250)
class AcStreamedBuildingActor : public AcStreamedLODStaticMeshActor
{
public:
	class UTextureDynamicLookup*                       m_EmissiveLookupTexture;                          		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bEmissiveLookupCreated : 1;                     		// 0x0254 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bTransition : 1;                                		// 0x0254 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                m_nMaxEmissiveIndex;                              		// 0x0258 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nNumOnFeatures;                                 		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              m_LastEmissiveUpdateNTOD;                         		// 0x0260 (0x0004) [0x0000000000000000]              
	TArray< struct FMaterialInstanceList >             m_EmissiveMaterialInstances;                      		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMaterialInstanceList >             m_DebugHightlightMaterialInstances;               		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nOverrideLightmapResolution;                    		// 0x027C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStreamedBuildingActor" );

		return pClassPointer;
	};

	void PrepareComponent ( class UActorComponent* pComponent, int nLOD );
};

UClass* AcStreamedBuildingActor::pClassPointer = NULL;

// Class APBGame.cStreamedRoadActor
// 0x0000 (0x0250 - 0x0250)
class AcStreamedRoadActor : public AcStreamedLODStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStreamedRoadActor" );

		return pClassPointer;
	};

};

UClass* AcStreamedRoadActor::pClassPointer = NULL;

// Class APBGame.cStreamedTerrainActor
// 0x0000 (0x0250 - 0x0250)
class AcStreamedTerrainActor : public AcStreamedLODStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStreamedTerrainActor" );

		return pClassPointer;
	};

};

UClass* AcStreamedTerrainActor::pClassPointer = NULL;

// Class APBGame.cSetupTypeDef
// 0x0000 (0x0040 - 0x0040)
class UcSetupTypeDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeDef" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeDef::pClassPointer = NULL;

// Class APBGame.cClientSetupTypeHelper
// 0x0008 (0x0048 - 0x0040)
class UcClientSetupTypeHelper : public UObject
{
public:
	class UcPedestrianSetupInfo*                       m_pPedestrianMaleTempAsset;                       		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcPedestrianSetupInfo*                       m_pPedestrianFemaleTempAsset;                     		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cClientSetupTypeHelper" );

		return pClassPointer;
	};

};

UClass* UcClientSetupTypeHelper::pClassPointer = NULL;

// Class APBGame.cSetupTypeAssetRecord
// 0x0014 (0x0054 - 0x0040)
class UcSetupTypeAssetRecord : public UObject
{
public:
	struct FString                                     m_Name;                                           		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nAssetIndex;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nTypeOrCategoryIndex;                           		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeAssetRecord" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeAssetRecord::pClassPointer = NULL;

// Class APBGame.cSetupTypeDataStore
// 0x00F4 (0x0134 - 0x0040)
class UcSetupTypeDataStore : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0040 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeDataStore.m_mPedestrianTypeRecords
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x007C (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeDataStore.m_mVehicleCategoryRecords
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x00B8 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeDataStore.m_mPedestrianAssetRecords
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x00F4 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeDataStore.m_mVehicleAssetRecords
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x0130 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeDataStore" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeDataStore::pClassPointer = NULL;

// Class APBGame.cSetupTypeMain
// 0x00E4 (0x0124 - 0x0040)
class UcSetupTypeMain : public UObject
{
public:
	class UPackage*                                    m_PedestrianTypePackage;                          		// 0x0040 (0x0004) [0x0000000000000000]              
	class UPackage*                                    m_VehicleTypePackage;                             		// 0x0044 (0x0004) [0x0000000000000000]              
	TArray< struct FSActorWithSetupTypeRecord >        m_aPedsToWatch;                                   		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSActorWithSetupTypeRecord >        m_aVehsToWatch;                                   		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aPedestrianAssetsToStream;                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aVehicleAssetsToStream;                         		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aPedestrianAssetsToGC;                          		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aVehicleAssetsToGC;                             		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0090 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeMain.m_mPedestrianTypeRecordTimers
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00CC (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeMain.m_mVehicleCategoryRecordTimers
	struct FPointer                                    m_pmmPedestrianAssetInstanceTimers;               		// 0x0108 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UcSetupTypeTimer*                            m_pPedestrianRotationTimer;                       		// 0x010C (0x0004) [0x0000000000000000]              
	class UcSetupTypeTimer*                            m_pVehicleRotationTimer;                          		// 0x0110 (0x0004) [0x0000000000000000]              
	class AcSetupTypeManager*                          m_pSTManager;                                     		// 0x0114 (0x0004) [0x0000000000000000]              
	class UcSetupTypeDataStore*                        m_pSTDataStore;                                   		// 0x0118 (0x0004) [0x0000000000000000]              
	class UcSetupTypeSDDMisc*                          m_pSTSDDMisc;                                     		// 0x011C (0x0004) [0x0000000000000000]              
	class UcSetupTypeStreamCallback*                   m_pSTCallback;                                    		// 0x0120 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeMain" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeMain::pClassPointer = NULL;

// Class APBGame.cSetupTypePedestrianAssetRecord
// 0x000C (0x0060 - 0x0054)
class UcSetupTypePedestrianAssetRecord : public UcSetupTypeAssetRecord
{
public:
	int                                                m_nRaceType;                                      		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_AudioType;                                      		// 0x0058 (0x0001) [0x0000000000000000]              
	class UcPedestrianSetupInfo*                       m_pSetupInfo;                                     		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypePedestrianAssetRecord" );

		return pClassPointer;
	};

};

UClass* UcSetupTypePedestrianAssetRecord::pClassPointer = NULL;

// Class APBGame.cSetupTypeSDDMisc
// 0x0040 (0x0080 - 0x0040)
class UcSetupTypeSDDMisc : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0040 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeSDDMisc.m_mNPCTypeVehicleCategoryTranslation
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeSDDMisc" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeSDDMisc::pClassPointer = NULL;

// Class APBGame.cSetupTypeStreamCallback
// 0x0080 (0x00C0 - 0x0040)
class UcSetupTypeStreamCallback : public UObject
{
public:
	struct FPointer                                    VfTable_cObjectStreamingCallback;                 		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0044 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeStreamCallback.m_mPedestrianSetupTypeIndex
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0080 (0x003C) UNKNOWN PROPERTY: MapProperty APBGame.cSetupTypeStreamCallback.m_mVehicleSetupTypeIndex
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeStreamCallback" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeStreamCallback::pClassPointer = NULL;

// Class APBGame.cSetupTypeTimer
// 0x0010 (0x0050 - 0x0040)
class UcSetupTypeTimer : public UObject
{
public:
	unsigned char                                      m_eTimerState;                                    		// 0x0040 (0x0001) [0x0000000000000000]              
	float                                              m_fStartTime;                                     		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              m_fStopTime;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                m_nData;                                          		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeTimer" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeTimer::pClassPointer = NULL;

// Class APBGame.cSetupTypeVehicleAssetRecord
// 0x0004 (0x0058 - 0x0054)
class UcSetupTypeVehicleAssetRecord : public UcSetupTypeAssetRecord
{
public:
	class UcVehicleSetupInfo*                          m_pSetupInfo;                                     		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSetupTypeVehicleAssetRecord" );

		return pClassPointer;
	};

};

UClass* UcSetupTypeVehicleAssetRecord::pClassPointer = NULL;

// Class APBGame.RTWLVCPawn
// 0x00A0 (0x04C4 - 0x0424)
class ARTWLVCPawn : public APawn
{
public:
	int                                                ViewPitchValue;                                   		// 0x0424 (0x0004) [0x0000000000000000]              
	int                                                MaxPitchVariation;                                		// 0x0428 (0x0004) [0x0000000000000000]              
	struct FRotator                                    CurrentCameraRotation;                            		// 0x042C (0x000C) [0x0000000000000000]              
	float                                              OriginTargetDistance;                             		// 0x0438 (0x0004) [0x0000000000000000]              
	TArray< struct FCameraView >                       CameraViews;                                      		// 0x043C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ActiveCameraViewIdx;                              		// 0x0448 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowUI : 1;                                      		// 0x044C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FString >                           MenuStates;                                       		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveStateIdx;                                   		// 0x045C (0x0004) [0x0000000000000000]              
	class UAPBStudioVehicle*                           VehicleStudio;                                    		// 0x0460 (0x0004) [0x0000000000000000]              
	class UGolemobileBase*                             VehicleBase;                                      		// 0x0464 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           CSStates;                                         		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CSParameters;                                     		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CSActiveParameterIdx;                             		// 0x0480 (0x0004) [0x0000000000000000]              
	int                                                CSCurrentStateIdx;                                		// 0x0484 (0x0004) [0x0000000000000000]              
	class UDrawTESLayerComponent*                      TESLayerComponent;                                		// 0x0488 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UObject*                                     PresetsPackage;                                   		// 0x048C (0x0004) [0x0000000000000000]              
	struct FString                                     PresetsPackageName;                               		// 0x0490 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGolemobileDescriptor*                       PresetDescriptors[ 0xA ];                         		// 0x049C (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLVCPawn" );

		return pClassPointer;
	};

	void UpdateProjectionCylinder ( unsigned long bUpdateHeight );
	void GetBoneEndPoints ( struct FString BoneName, struct FVector* Start, struct FVector* End );
	void OnParameterChange ( struct FString ParamName, unsigned char eType );
	void OnStateLeave ( struct FString StateName );
	void OnStateEnter ( struct FString StateName );
	void SetProjectorToCamera ( );
	void GenerateRandomVehicles ( struct FString Parameters );
	void ClearSymbol ( );
	void LoadSymbol ( struct FString sName );
	void SetPreset ( int Index );
	void GetVehicleCustomisation ( TArray< unsigned char >* aData );
	void LoadCustomisation ( struct FString Filename );
	void SaveCustomisation ( struct FString Filename );
	void SavePresetsPackage ( );
	void LoadPresetsPackage ( );
	void LoadPresets ( );
	class UGolemobileDescriptor* LoadGolemobileDescriptor ( struct FString DescriptorName );
	void PreviousCameraView ( );
	void NextCameraView ( );
	void SetCameraViewFromIndex ( int CameraViewIndex );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	struct FRotator ComputeCameraRotation ( struct FVector* Origin, struct FVector* Target );
	void ProcessInputData ( struct ARTWLVCPawn_FInputData Data );
	void PreviousGroupItem ( );
	void NextGroupItem ( );
	void SetGroup ( int GroupIndex );
	void PreviousGroup ( );
	void NextGroup ( );
	void PreviousMenu ( );
	void NextMenu ( );
	void ToggleUI ( );
	void DrawHUD ( class AHUD* H );
	void DrawStateHUD ( class AHUD* H );
	void ClearPresetDecals ( unsigned long bActivePresetOnly );
	void GetViewPointLocal ( class UMeshComponent* MeshComp, struct FVector* Origin, struct FVector* Direction );
	void eventPostBeginPlay ( );
};

UClass* ARTWLVCPawn::pClassPointer = NULL;

// Class APBGame.RTWLCCPawn
// 0x0214 (0x0638 - 0x0424)
class ARTWLCCPawn : public APawn
{
public:
	int                                                ViewPitchValue;                                   		// 0x0424 (0x0004) [0x0000000000000000]              
	int                                                MaxPitchVariation;                                		// 0x0428 (0x0004) [0x0000000000000000]              
	struct FRotator                                    CurrentCameraRotation;                            		// 0x042C (0x000C) [0x0000000000000000]              
	float                                              OriginTargetDistance;                             		// 0x0438 (0x0004) [0x0000000000000000]              
	TArray< struct FCameraView >                       CameraViews;                                      		// 0x043C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ActiveCameraViewIdx;                              		// 0x0448 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowUI : 1;                                      		// 0x044C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FString >                           MenuStates;                                       		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveStateIdx;                                   		// 0x045C (0x0004) [0x0000000000000000]              
	class UAPBStudioCharacter*                         CharacterStudio;                                  		// 0x0460 (0x0004) [0x0000000000000000]              
	class UGolemBase*                                  CharacterBase;                                    		// 0x0464 (0x0004) [0x0000000000000000]              
	struct FString                                     CharacterBaseName;                                		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CSStates;                                         		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CSParameters;                                     		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CSActiveParameterIdx;                             		// 0x048C (0x0004) [0x0000000000000000]              
	int                                                CSCurrentStateIdx;                                		// 0x0490 (0x0004) [0x0000000000000000]              
	class UDrawTESLayerComponent*                      TESLayerComponent;                                		// 0x0494 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UObject*                                     PresetsPackage;                                   		// 0x0498 (0x0004) [0x0000000000000000]              
	struct FString                                     PresetsPackageName;                               		// 0x049C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGolemDescriptor*                            PresetDescriptors[ 0x64 ];                        		// 0x04A8 (0x0190) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLCCPawn" );

		return pClassPointer;
	};

	void UpdateProjectionCylinder ( unsigned long bUpdateHeight );
	void GetBoneEndPoints ( struct FString BoneName, struct FVector* Start, struct FVector* End );
	void OnParameterChange ( struct FString ParamName, unsigned char eType );
	void OnStateLeave ( struct FString StateName );
	void OnStateEnter ( struct FString StateName );
	void SetProjectorToCamera ( );
	void CreateStudio ( );
	void ClearSymbol ( );
	void LoadSymbol ( struct FString sName );
	void SetPreset ( int Index );
	void GetCharacterCustomisation ( TArray< unsigned char >* aData );
	void LoadCustomisation ( struct FString Filename );
	void SaveCustomisation ( struct FString Filename );
	void SavePresetsPackage ( );
	void LoadPresetsPackage ( );
	void LoadPresets ( );
	class UGolemDescriptor* LoadGolemDescriptor ( struct FString DescriptorName );
	void PreviousCameraView ( );
	void NextCameraView ( );
	void SetCameraViewFromIndex ( int CameraViewIndex );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	struct FRotator ComputeCameraRotation ( struct FVector* Origin, struct FVector* Target );
	void ProcessInputData ( struct ARTWLCCPawn_FInputData Data );
	void PreviousGroupItem ( );
	void NextGroupItem ( );
	void SetGroup ( int GroupIndex );
	void PreviousGroup ( );
	void NextGroup ( );
	void PreviousMenu ( );
	void NextMenu ( );
	void ToggleUI ( );
	void DrawHUD ( class AHUD* H );
	void DrawStateHUD ( class AHUD* H );
	void SetLOD ( int nLOD );
	void ResetMorphs ( );
	void ClearPresetDecals ( unsigned long bActivePresetOnly );
	void GenerateRandomCharacters ( struct FString Parameters );
	void SaveMaskTextures ( struct FString PackageName );
	void SaveBakedCharacter ( struct FString PackageName, unsigned long bCompress, int nNumLODs, unsigned long bContactCharacter, unsigned long bGenerateMaskTextures, struct FString MeshName );
	void GetViewPointLocal ( class UMeshComponent* MeshComp, struct FVector* Origin, struct FVector* Direction );
	void eventPostBeginPlay ( );
};

UClass* ARTWLCCPawn::pClassPointer = NULL;

// Class APBGame.cLocationBeaconActor
// 0x001C (0x0258 - 0x023C)
class AcLocationBeaconActor : public AActor
{
public:
	struct FString                                     m_sBeaconIDTag;                                   		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FEnumeratedName                             m_eBeaconType;                                    		// 0x0248 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLocationBeaconActor" );

		return pClassPointer;
	};

};

UClass* AcLocationBeaconActor::pClassPointer = NULL;

// Class APBGame.cItemRestrictionBase
// 0x0000 (0x0040 - 0x0040)
class UcItemRestrictionBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionBase" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionBase::pClassPointer = NULL;

// Class APBGame.cItemRestrictionClass
// 0x000C (0x004C - 0x0040)
class UcItemRestrictionClass : public UcItemRestrictionBase
{
public:
	class UcItemRestrictionGroup*                      m_group;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                m_slotId;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                m_nSecondaryKey;                                  		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionClass" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionClass::pClassPointer = NULL;

// Class APBGame.cItemRestrictionClassIcon
// 0x0004 (0x0050 - 0x004C)
class UcItemRestrictionClassIcon : public UcItemRestrictionClass
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionClassIcon" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionClassIcon::pClassPointer = NULL;

// Class APBGame.cItemRestrictionCommentIcon
// 0x0024 (0x0064 - 0x0040)
class UcItemRestrictionCommentIcon : public UcItemRestrictionBase
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FIntPoint                                   m_size;                                           		// 0x0044 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_beingResized : 1;                               		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FIntPoint                                   m_sizeBeforeResize;                               		// 0x0050 (0x0008) [0x0000000000000000]              
	struct FString                                     m_Text;                                           		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionCommentIcon" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionCommentIcon::pClassPointer = NULL;

// Class APBGame.cItemRestrictionCull
// 0x000C (0x004C - 0x0040)
class UcItemRestrictionCull : public UcItemRestrictionBase
{
public:
	TArray< class UcItemRestrictionGroup* >            m_groups;                                         		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionCull" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionCull::pClassPointer = NULL;

// Class APBGame.cItemRestrictionCullIcon
// 0x0004 (0x0050 - 0x004C)
class UcItemRestrictionCullIcon : public UcItemRestrictionCull
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionCullIcon" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionCullIcon::pClassPointer = NULL;

// Class APBGame.cItemRestrictionGroup
// 0x0094 (0x00D4 - 0x0040)
class UcItemRestrictionGroup : public UcItemRestrictionBase
{
public:
	unsigned long                                      m_compulsory : 1;                                 		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_order;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	class UcItemRestrictionClass*                      m_class;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	TArray< class UcItemRestrictionCull* >             m_culls;                                          		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_dependencies;                                   		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_children;                                       		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionSwap* >             m_swaps;                                          		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_dependenciesInverse;                            		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionSwap* >             m_dependenciesInverseSwap;                        		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionSwap* >             m_filtersInverseSwap;                             		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionSwap* >             m_antiFiltersInverseSwap;                         		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_parents;                                        		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcItemRestrictionGroup*                      m_parent;                                         		// 0x00B8 (0x0004) [0x0000000000000000]              
	TArray< class UcItemRestrictionGroup* >            m_parentsNonOrdered;                              		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_childrenNonOrdered;                             		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionGroup" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionGroup::pClassPointer = NULL;

// Class APBGame.cItemRestrictionGroupIcon
// 0x0010 (0x00E4 - 0x00D4)
class UcItemRestrictionGroupIcon : public UcItemRestrictionGroup
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_orderDisplayed;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                m_orderMax;                                       		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                m_depth;                                          		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionGroupIcon" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionGroupIcon::pClassPointer = NULL;

// Class APBGame.cItemRestrictionIconData
// 0x0014 (0x0054 - 0x0040)
class UcItemRestrictionIconData : public UObject
{
public:
	struct FIntPoint                                   m_pos;                                            		// 0x0040 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_beingMoved : 1;                                 		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FIntPoint                                   m_posBeforeMove;                                  		// 0x004C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionIconData" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionIconData::pClassPointer = NULL;

// Class APBGame.cItemRestrictionSwap
// 0x0030 (0x0070 - 0x0040)
class UcItemRestrictionSwap : public UcItemRestrictionBase
{
public:
	TArray< class UcItemRestrictionGroup* >            m_groups;                                         		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_dependencies;                                   		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_Filters;                                        		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcItemRestrictionGroup* >            m_antiFilters;                                    		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionSwap" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionSwap::pClassPointer = NULL;

// Class APBGame.cItemRestrictionSwapIcon
// 0x0004 (0x0074 - 0x0070)
class UcItemRestrictionSwapIcon : public UcItemRestrictionSwap
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionSwapIcon" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionSwapIcon::pClassPointer = NULL;

// Class APBGame.cItemRestrictionTree
// 0x0010 (0x0050 - 0x0040)
class UcItemRestrictionTree : public UObject
{
public:
	int                                                m_maxSlotId;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< class UcItemRestrictionBase* >             m_nodes;                                          		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cItemRestrictionTree" );

		return pClassPointer;
	};

};

UClass* UcItemRestrictionTree::pClassPointer = NULL;

// Class APBGame.cHUDBase
// 0x0100 (0x05C0 - 0x04C0)
class AcHUDBase : public AHUD
{
public:
	TArray< class UcUIDataStore_HUD* >                 m_aHUDDataStores;                                 		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UcUIDataStore_HUD*                           m_DistrictMapDS;                                  		// 0x04CC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHUDScenesVisible : 1;                          		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bHUDScenesOpen : 1;                             		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bToggleHUDOverride : 1;                         		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDataStoreRefresh : 1;                          		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDrawDebugHUD : 1;                              		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bShowCharLocation : 1;                          		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bShowTime : 1;                                  		// 0x04D0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bShowOwnName : 1;                               		// 0x04D0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bHealthBarWarningFlashOn : 1;                   		// 0x04D0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bHealthBarFlashOn : 1;                          		// 0x04D0 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bDrawDebugWeaponInfo : 1;                       		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bDrawDebugUnconsciousBar : 1;                   		// 0x04D0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bDrawJobs : 1;                                  		// 0x04D0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bDrawMessage : 1;                               		// 0x04D0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      flashAPB : 1;                                     		// 0x04D0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bSuicide : 1;                                   		// 0x04D0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bSameSideKill : 1;                              		// 0x04D0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      m_bPlayerOwnerDead : 1;                           		// 0x04D0 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bDrawMissionStats : 1;                          		// 0x04D0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bShowDeathDebugHUD : 1;                         		// 0x04D0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bShowBombHUD : 1;                               		// 0x04D0 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bBombTimerEnabled : 1;                          		// 0x04D0 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bDrawLocatorOverlays : 1;                       		// 0x04D0 (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      m_bDrawTaskItemSpawnLocations : 1;                		// 0x04D0 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      m_bDrawOpenWorldTargetText : 1;                   		// 0x04D0 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      m_bDrawBombLocations : 1;                         		// 0x04D0 (0x0004) [0x0000000000004000] [0x02000000] ( CPF_Config )
	unsigned long                                      m_bDrawVehicleDebugInfo : 1;                      		// 0x04D0 (0x0004) [0x0000000000004000] [0x04000000] ( CPF_Config )
	unsigned long                                      m_bDrawOpenWorldDropOffText : 1;                  		// 0x04D0 (0x0004) [0x0000000000004000] [0x08000000] ( CPF_Config )
	unsigned long                                      m_bDrawHealthBars : 1;                            		// 0x04D0 (0x0004) [0x0000000000004000] [0x10000000] ( CPF_Config )
	unsigned long                                      m_bHealthBarsOnlyDamaged : 1;                     		// 0x04D0 (0x0004) [0x0000000000004000] [0x20000000] ( CPF_Config )
	unsigned long                                      m_bHealthBarsOwnPawn : 1;                         		// 0x04D0 (0x0004) [0x0000000000004000] [0x40000000] ( CPF_Config )
	unsigned long                                      m_bHealthBarsDistanceFade : 1;                    		// 0x04D0 (0x0004) [0x0000000000004000] [0x80000000] ( CPF_Config )
	unsigned long                                      m_bHealthBarsTargeted : 1;                        		// 0x04D4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bHealthBarsDetailed : 1;                        		// 0x04D4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x04D8 (0x0008) MISSED OFFSET
	struct FMatrix                                     m_OldViewProjectionMatrix;                        		// 0x04E0 (0x0040) [0x0000000000000000]              
	struct FVector                                     m_OldDynamicOrigin;                               		// 0x0520 (0x000C) [0x0000000000000000]              
	struct FColor                                      m_FadeColor;                                      		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreviousFadeAlpha;                             		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTargetFadeAlpha;                               		// 0x0534 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFadeAlpha;                                     		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFadeAlphaTime;                                 		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFadeAlphaDelay;                                		// 0x0540 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTargetFadeAlphaTime;                           		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcAPBPawn*                                   m_pVehiclePawn;                                   		// 0x0548 (0x0004) [0x0000000000000000]              
	float                                              m_LowX;                                           		// 0x054C (0x0004) [0x0000000000000000]              
	float                                              m_LowY;                                           		// 0x0550 (0x0004) [0x0000000000000000]              
	float                                              m_HighX;                                          		// 0x0554 (0x0004) [0x0000000000000000]              
	float                                              m_HighY;                                          		// 0x0558 (0x0004) [0x0000000000000000]              
	float                                              m_ScreenRadius;                                   		// 0x055C (0x0004) [0x0000000000000000]              
	float                                              m_AreaRatio;                                      		// 0x0560 (0x0004) [0x0000000000000000]              
	float                                              m_fLocatorOverlayDrawDist;                        		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AcWeapon*                                    TempWeapon;                                       		// 0x0568 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           m_NPCTypes;                                       		// 0x056C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FHealthInfo >                       m_HealthRollovers;                                		// 0x0578 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_OldTarget;                                      		// 0x0584 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sMessage;                                       		// 0x0588 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nMessageAlpha;                                  		// 0x0594 (0x0004) [0x0000000000000000]              
	class AcAPBPlayerController*                       m_PC;                                             		// 0x0598 (0x0004) [0x0000000000000000]              
	class AcAPBPlayerReplicationInfo*                  m_PRI;                                            		// 0x059C (0x0004) [0x0000000000000000]              
	class AcDebugHUD*                                  m_pDebugHUD;                                      		// 0x05A0 (0x0004) [0x0000000000000000]              
	int                                                m_nKillerCharacterUID;                            		// 0x05A4 (0x0004) [0x0000000000000000]              
	int                                                m_nWeaponTypeID;                                  		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              m_fDeathRespawnTime;                              		// 0x05AC (0x0004) [0x0000000000000000]              
	float                                              m_fBombEndTime;                                   		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              m_fGuardEndTime;                                  		// 0x05B4 (0x0004) [0x0000000000000000]              
	float                                              m_fArmedGuardTimerEndTime;                        		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              m_fCheckPointTimerEndTime;                        		// 0x05BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHUDBase" );

		return pClassPointer;
	};

	void SetHUDSceneVisible ( struct FString sDataStoreTag, unsigned long bVisible );
	void eventScreenFade ( struct FColor NewFadeColor, unsigned char FromAlpha, unsigned char ToAlpha, float fFadeTime );
	void ToggleMissionStats ( );
	void DrawGroupMemberStats ( class UcGroup* pGroup, float X, float Y, float xSize, float ySize );
	void DrawMissionStats ( );
	void DrawDeathHUD ( );
	void ToggleDeathDebugHUD ( );
	void eventOnAliveNotification ( );
	void eventOnDeadNotification ( int _nKillerCharacterUID, int _nWeaponTypeID, float _nRespawnTime, unsigned long _bSuicide, unsigned long _bSameSideKill );
	void DrawHealthBars ( );
	void DrawBombLocations ( );
	void DrawOpenWorldDropOffText ( );
	void DrawOpenWorldTargetText ( );
	void DrawTaskItemSpawnLocations ( );
	void DrawVehicleSpawnBays ( );
	void DrawConsciousnessAndArrestedInfo ( class AcAPBPawn* Character );
	void ShowOwnName ( unsigned long bEnable );
	void DrawPlayerNames ( );
	void DrawConsciousnessAndArrestInfoBars ( );
	void eventDrawLocatorOverlays ( );
	void DebugDrawChevron ( struct FVector ChevronLocation, unsigned long Top, struct FVector Dimensions, struct FColor Colour );
	void eventDebugDrawCross ( struct FVector CrossLocation, int Size );
	void DrawJobsEnd ( );
	void DrawJobsBegin ( );
	void DebugAccuracyBar ( );
	void GetBoxExtents ( struct FBoxSphereBounds Bounds, float* LowX, float* LowY, float* HighX, float* HighY );
	void GetBoxComponentExtents ( class UcBoxComponent* Bounds, class AActor* Target, float* LowX, float* LowY, float* HighX, float* HighY );
	void DrawProgressBar ( float xLeft, float yTop, float fWidth, float fHeight, float fProgress, float fPadding );
	void DrawVehicleRepairHUD ( struct FVector TopLeftPos );
	void DrawHealthBar ( class AActor* Target, struct FVector Center, unsigned char Alpha );
	void DrawHealthRollovers ( );
	void AddHealthRollover ( class AActor* A, unsigned char Alpha );
	void DrawCurrentItemInfo ( class AcAPBPawn* PawnOwner, float X, float Y, float fWidth, float fHeight );
	void DrawHoldableItems ( float X, float Y );
	void DrawVehicleEntryMarkers ( );
	class AcAPBVehicle* GetBestEnterableVehicle ( );
	void DrawArrestedProgress ( class AcAPBPawn* Character, float fXPos, float fYPos, float fWidth, float fHeight );
	void DrawKnockedOutProgress ( class AcAPBPawn* Character, float fXPos, float fYPos, float fWidth, float fHeight );
	void DrawCharacterLocation ( );
	void FlashAPBTimer ( );
	void SelfSayFadeTimer ( );
	void DrawMissionInfo ( );
	void SelfSayTimer ( );
	void LocalSelfSayTimer ( );
	void LocalSelfSay ( struct FString Message, int DisplayTime );
	void ClientSelfSay ( struct FString Message, int DisplayTime );
	void SelfSay ( struct FString Message, int DisplayTime );
	void ToggleDebugUnconsciousInfo ( );
	void ToggleDebugWeaponInfo ( );
	void DrawVehicleDebugInfo ( );
	void eventDrawDebugHUD ( );
	void DebugDrawTakeoverBar ( );
	void DebugDrawArmedGuardTimerHUD ( );
	void DebugOnArmedGuardTimerStopped ( );
	void DebugOnArmedGuardTimerStarted ( float fTimeRemaining );
	void DrawBombTimerHUD ( );
	void DebugOnBombTimerStopped ( );
	void DebugOnBombTimerStarted ( float fTimeRemaining );
	void DebugSetBombHUDEnabled ( unsigned long bEnabled );
	void OutputNPCIDs ( class UCanvas* pr_pCanvas, struct FVector pr_vViewerLocation );
	bool Project ( struct FVector pr_2D, struct FVector* pr_3D );
	void NativeDrawHUD ( );
	void DrawHUD ( );
	void PostRender ( );
	void PreRender ( );
	void NativeTick ( float DeltaTime );
	void Tick ( float DeltaTime );
	void NativePostBeginPlay ( );
	void eventPostBeginPlay ( );
	void LoadDistrictEntryScene ( );
	void InitiateGameFlow ( );
	void ToggleDataStoreRefresh ( );
	void ToggleDebugHUD ( );
};

UClass* AcHUDBase::pClassPointer = NULL;

// Class APBGame.APBGameEngine
// 0x0050 (0x058C - 0x053C)
class UAPBGameEngine : public UGameEngine
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x053C (0x0004) [0x0000000000000000]              
	class UcHostingServer*                             m_HostingServer;                                  		// 0x0540 (0x0004) [0x0000000000000000]              
	class UcHostingImageServer*                        m_HostingImageServer;                             		// 0x0544 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sPrecacheObjectPath;                            		// 0x0548 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UObject*                                     m_PrecacheObject;                                 		// 0x0554 (0x0004) [0x0000000000000000]              
	class UcAPBConsoleCommands*                        m_Commands;                                       		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcTextureStreamingTracker*                   m_TextureStreamingTracker;                        		// 0x055C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAssetDescriptorManager*                    m_AssetDescriptorManager;                         		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcWeatherManager*                            m_WeatherManager;                                 		// 0x0564 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bOnlyLoadDatabaseAtChangelist : 1;              		// 0x0568 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bSupressLoadingScreens : 1;                     		// 0x0568 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIsSoak : 1;                                    		// 0x0568 (0x0004) [0x0000000000000000] [0x00000004] 
	class UcUILoadingScreenManager*                    m_LoadingMovieMgr;                                		// 0x056C (0x0004) [0x0000000000000000]              
	class UcHUDMarkerManager*                          m_HUDMarkerManager;                               		// 0x0570 (0x0004) [0x0000000000000000]              
	class UcAudioManager*                              m_AudioManager;                                   		// 0x0574 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pStaticGameInfo;                                		// 0x0578 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class AGolemSpawnerActor*                          m_GolemSpawner;                                   		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AcFlythroughSpawnerActor*                    m_FlythroughSpawner;                              		// 0x0580 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    m_NamedSharedMemory;                              		// 0x0584 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pMultiMonitorSupport;                           		// 0x0588 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBGameEngine" );

		return pClassPointer;
	};

	void eventOnBeginPlay ( );
	void OnWorldCleanup ( );
	void eventOnConnectFailed ( int nError );
	void eventOnConnectSuccess ( );
	class UcAudioManager* RetAudioManager ( );
};

UClass* UAPBGameEngine::pClassPointer = NULL;

// Class APBGame.APBGameViewportClient
// 0x0010 (0x0114 - 0x0104)
class UAPBGameViewportClient : public UGameViewportClient
{
public:
	struct FVector2D                                   m_MainViewportOffset;                             		// 0x0104 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_MainViewportSize;                               		// 0x010C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBGameViewportClient" );

		return pClassPointer;
	};

	void SetMainViewport ( struct FVector2D vOffset, struct FVector2D VSize );
	void DrawTransition ( class UCanvas* Canvas );
	void SetSplitscreenConfiguration ( unsigned char SplitType );
};

UClass* UAPBGameViewportClient::pClassPointer = NULL;

// Class APBGame.cDebugHUD
// 0x0030 (0x04F0 - 0x04C0)
class AcDebugHUD : public AHUD
{
public:
	class AcAPBPlayerController*                       PC;                                               		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bEnableTimeDebug : 1;                           		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bShowActorNetRates : 1;                         		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_bDrawServerPlayerCount : 1;                     		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      m_bShowTimeOfDay : 1;                             		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      m_bShowRangefinder : 1;                           		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      m_bShowHeat : 1;                                  		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      m_bShowActiveCrimes : 1;                          		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      m_bActivityMessagesShow : 1;                      		// 0x04C4 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	float                                              m_fTimeDebugHorzScale;                            		// 0x04C8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeDebugVertScale;                            		// 0x04CC (0x0004) [0x0000000000000000]              
	float                                              TIME_DEBUG_WIDTH;                                 		// 0x04D0 (0x0004) [0x0000000000000000]              
	float                                              TIME_DEBUG_HEIGHT;                                		// 0x04D4 (0x0004) [0x0000000000000000]              
	float                                              TIME_DEBUG_POS_X;                                 		// 0x04D8 (0x0004) [0x0000000000000000]              
	float                                              TIME_DEBUG_POS_Y;                                 		// 0x04DC (0x0004) [0x0000000000000000]              
	int                                                m_nHeatInfoRows;                                  		// 0x04E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fHeatInfoTimeout;                               		// 0x04E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nActivityMessagesMax;                           		// 0x04E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fActivityMessagesTimeout;                       		// 0x04EC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDebugHUD" );

		return pClassPointer;
	};

	void DrawRangefinder ( );
	void DrawTimeOfDay ( );
	void DrawHUD ( );
	void DrawActivityMessages ( );
	void DrawActiveCrimes ( );
	void DrawHeat ( );
	void DrawServerPlayerCount ( );
	void DrawActorProxies ( );
	void DrawActorNetRates ( );
	void DrawTimeDebugBar ( );
};

UClass* AcDebugHUD::pClassPointer = NULL;

// Class APBGame.cAPBConsoleCommands
// 0x0000 (0x0040 - 0x0040)
class UcAPBConsoleCommands : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBConsoleCommands" );

		return pClassPointer;
	};

	void eventRegisterAPBConsoleCommands_Script ( class UcConsoleCommandManager* manager );
	void RegisterAPBConsoleCommands ( );
	bool Command_APBEchoScript ( unsigned char eMode, TArray< struct FString > arguments, class UcConsoleCommandManager* manager );
};

UClass* UcAPBConsoleCommands::pClassPointer = NULL;

// Class APBGame.cAudioEnums
// 0x0000 (0x0040 - 0x0040)
class UcAudioEnums : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioEnums" );

		return pClassPointer;
	};

};

UClass* UcAudioEnums::pClassPointer = NULL;

// Class APBGame.cAsyncPackageNotify
// 0x0018 (0x0058 - 0x0040)
class UcAsyncPackageNotify : public UObject
{
public:
	struct FName                                       m_PackageName;                                    		// 0x0040 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bLoaded : 1;                                    		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FAsyncObjectData >                  m_Objects;                                        		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAsyncPackageNotify" );

		return pClassPointer;
	};

	bool IsFinishedLoading ( );
};

UClass* UcAsyncPackageNotify::pClassPointer = NULL;

// Class APBGame.cAsyncPackages
// 0x0010 (0x0050 - 0x0040)
class UcAsyncPackages : public UObject
{
public:
	TArray< class UcAsyncPackageNotify* >              m_Packages;                                       		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bLoadingStarted : 1;                            		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAsyncPackages" );

		return pClassPointer;
	};

	void Empty ( );
	void StartLoading ( );
	bool IsFinishedLoading ( );
	void NotifyPackageLoaded ( class UObject* pPackage );
};

UClass* UcAsyncPackages::pClassPointer = NULL;

// Class APBGame.cAction_PauseOnTrackImport
// 0x0000 (0x00E8 - 0x00E8)
class UcAction_PauseOnTrackImport : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_PauseOnTrackImport" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_PauseOnTrackImport::pClassPointer = NULL;

// Class APBGame.cAction_ResumeOnLeavingTrackImport
// 0x0000 (0x00E8 - 0x00E8)
class UcAction_ResumeOnLeavingTrackImport : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_ResumeOnLeavingTrackImport" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_ResumeOnLeavingTrackImport::pClassPointer = NULL;

// Class APBGame.cAction_SetThemeMusicOn
// 0x0004 (0x00EC - 0x00E8)
class UcAction_SetThemeMusicOn : public USequenceAction
{
public:
	unsigned long                                      m_bNonLinearMusic : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_SetThemeMusicOn" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_SetThemeMusicOn::pClassPointer = NULL;

// Class APBGame.cAction_WwiseFadeInEnvironment
// 0x0004 (0x00EC - 0x00E8)
class UcAction_WwiseFadeInEnvironment : public USequenceAction
{
public:
	float                                              m_fTimeInSeconds;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwiseFadeInEnvironment" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwiseFadeInEnvironment::pClassPointer = NULL;

// Class APBGame.cAction_WwiseFadeOutEnvironment
// 0x0004 (0x00EC - 0x00E8)
class UcAction_WwiseFadeOutEnvironment : public USequenceAction
{
public:
	unsigned long                                      m_bFadeOutPlayerMusic : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFadeOutAmbience : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwiseFadeOutEnvironment" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwiseFadeOutEnvironment::pClassPointer = NULL;

// Class APBGame.cAction_WwiseGetSwitch
// 0x0024 (0x010C - 0x00E8)
class UcAction_WwiseGetSwitch : public USequenceAction
{
public:
	struct FString                                     m_strSwitchGroup;                                 		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nGameObjectID;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bTryToGetSwitchStateName : 1;                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                m_nSwitchStateID;                                 		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FString                                     m_sSwitchStateName;                               		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwiseGetSwitch" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwiseGetSwitch::pClassPointer = NULL;

// Class APBGame.cAction_WwisePost3DEvent
// 0x000C (0x00F4 - 0x00E8)
class UcAction_WwisePost3DEvent : public USequenceAction
{
public:
	struct FString                                     m_strEventName;                                   		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwisePost3DEvent" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwisePost3DEvent::pClassPointer = NULL;

// Class APBGame.cAction_WwisePostEvent
// 0x0010 (0x0100 - 0x00F0)
class UcAction_WwisePostEvent : public UUIAction
{
public:
	struct FString                                     m_strEventName;                                   		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nGameObjectID;                                  		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwisePostEvent" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwisePostEvent::pClassPointer = NULL;

// Class APBGame.cAction_WwisePostLooping3DEvent
// 0x000C (0x00F4 - 0x00E8)
class UcAction_WwisePostLooping3DEvent : public USequenceAction
{
public:
	struct FString                                     m_strEventName;                                   		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwisePostLooping3DEvent" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwisePostLooping3DEvent::pClassPointer = NULL;

// Class APBGame.cAction_WwiseSetMouseSpeedRTPC
// 0x0040 (0x0130 - 0x00F0)
class UcAction_WwiseSetMouseSpeedRTPC : public UUIAction
{
public:
	struct FString                                     m_strRTPCName;                                    		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fScaleFactor;                                   		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nGameObjectID;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInterpolationSpeed;                            		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMouseSpeedCalculationDelay;                    		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRTPCMaxValue;                                  		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMouseLastX;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              m_fMouseLastY;                                    		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalMouseTravel;                              		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              m_fCounter;                                       		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                m_nUpdateState;                                   		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              m_afInterpolatedNumberState[ 0x3 ];               		// 0x0124 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwiseSetMouseSpeedRTPC" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwiseSetMouseSpeedRTPC::pClassPointer = NULL;

// Class APBGame.cAction_WwiseSetRTPCValue
// 0x0054 (0x013C - 0x00E8)
class UcAction_WwiseSetRTPCValue : public USequenceAction
{
public:
	struct FString                                     m_strRTPCName;                                    		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fRTPCValue;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nGameObjectID;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     m_strRTPCNamePrefix;                              		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_strRTPCNameSufix;                               		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bIncremental : 1;                               		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              m_fRangeMin;                                      		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRangeMax;                                      		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInterpolationSpeed;                            		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_afInterpolatedNumberState[ 0x3 ];               		// 0x0124 (0x000C) [0x0000000000000000]              
	struct FString                                     m_sFullRTPCName;                                  		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwiseSetRTPCValue" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwiseSetRTPCValue::pClassPointer = NULL;

// Class APBGame.cAction_WwiseSetSwitch
// 0x0020 (0x0108 - 0x00E8)
class UcAction_WwiseSetSwitch : public USequenceAction
{
public:
	struct FString                                     m_strSwitchGroup;                                 		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_strSwitchState;                                 		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nGameObjectID;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bRememberSwitchName : 1;                        		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAction_WwiseSetSwitch" );

		return pClassPointer;
	};

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

UClass* UcAction_WwiseSetSwitch::pClassPointer = NULL;

// Class APBGame.cAudioScriptInterface
// 0x000B (0x0064 - 0x0059)
class UcAudioScriptInterface : public UActorComponent
{
public:
	unsigned long                                      m_bInitialised : 1;                               		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    m_pAudioImplementation;                           		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioScriptInterface" );

		return pClassPointer;
	};

	void Tick ( float fDeltaSeconds );
};

UClass* UcAudioScriptInterface::pClassPointer = NULL;

// Class APBGame.cAudioCharacterInterface
// 0x0018 (0x007C - 0x0064)
class UcAudioCharacterInterface : public UcAudioScriptInterface
{
public:
	class AcAPBPawn*                                   m_AttachedCharacter;                              		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nADAAudioMaterial;                              		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sLastMaterial;                                  		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nPreviousHealth;                                		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioCharacterInterface" );

		return pClassPointer;
	};

	void StopFullyAutoWeaponFireEvent ( );
	void StartFullyAutoWeaponFireEvent ( unsigned long bAmmoLeft, float fFireInterval );
	void SetItemSwitchValue ( int nMangledWwiseID );
	void ReceiveDeathEvent ( );
	void ReceiveWeaponFireEvent ( unsigned long bAmmoLeft );
	void Term ( );
	void Tick ( float fDeltaSeconds );
	void Init ( class UObject* SourceObject, struct FString strAudioType );
};

UClass* UcAudioCharacterInterface::pClassPointer = NULL;

// Class APBGame.cAudioDisplayPointInterface
// 0x0008 (0x006C - 0x0064)
class UcAudioDisplayPointInterface : public UcAudioScriptInterface
{
public:
	class AcAudioDisplayPoint*                         m_AttachedDisplayPoint;                           		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                m_nMusicLocalID;                                  		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioDisplayPointInterface" );

		return pClassPointer;
	};

	void SetTrackVolume ( float fNewVolume );
	void SetTrack ( );
	void Term ( );
	void Tick ( float fDeltaSeconds );
	void Init ( class UObject* SourceObject );
};

UClass* UcAudioDisplayPointInterface::pClassPointer = NULL;

// Class APBGame.cAudioEmitterPositioningActor
// 0x0024 (0x0260 - 0x023C)
class AcAudioEmitterPositioningActor : public AActor
{
public:
	struct FString                                     m_sEmitterName;                                   		// 0x023C (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     m_sEventName;                                     		// 0x0248 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              m_fCullDistance;                                  		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bBypassEnvironment : 1;                         		// 0x0258 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bBypassObstruction : 1;                         		// 0x0258 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	int                                                m_nMangledUniqueEmitterID;                        		// 0x025C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioEmitterPositioningActor" );

		return pClassPointer;
	};

};

UClass* AcAudioEmitterPositioningActor::pClassPointer = NULL;

// Class APBGame.cAudioManager
// 0x0094 (0x00D4 - 0x0040)
class UcAudioManager : public UObject
{
public:
	struct FVector                                     m_DebugPos1;                                      		// 0x0040 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_DebugPos2;                                      		// 0x004C (0x000C) [0x0000000000000000]              
	struct FVector                                     m_DebugLineStartPos;                              		// 0x0058 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_DebugLineEndPos;                                		// 0x0064 (0x000C) [0x0000000000000000]              
	TArray< struct FCollisionDebugInfo >               m_aCollisionDebugInfo;                            		// 0x0070 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              m_fLastAudioThreadTime;                           		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              m_fLastAudioThreadInterval;                       		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fLastAudioThreadPercent;                        		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxAudioThreadTime;                            		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxAudioThreadInterval;                        		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              m_fMaxAudioThreadPercent;                         		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bShowGeometryDebug : 1;                         		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bShowObstructionDebug : 1;                      		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bShowCollisionDebug : 1;                        		// 0x0094 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShowTracerDebug : 1;                           		// 0x0094 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDrawConcaveOutlines : 1;                       		// 0x0094 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bReloadConcaveOutlines : 1;                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bPrintPriorityDebug : 1;                        		// 0x0094 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bMuteMasterVolumeWhenLosingFocus : 1;           		// 0x0094 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bInitialised : 1;                               		// 0x0094 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bGameHasFocus : 1;                              		// 0x0094 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bAudioIsMuted : 1;                              		// 0x0094 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bIsLocalPlayerInWorld : 1;                      		// 0x0094 (0x0004) [0x0000000000000000] [0x00000800] 
	struct FString                                     m_sMusicServerIpAddress;                          		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                m_sMusicServerPort;                               		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedExplosions;                         		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedVehicles;                           		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedMusic;                              		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedEmitters;                           		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedNPCS;                               		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedContacts;                           		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedVFX;                                		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedImpacts;                            		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPrioritisedScrapes;                            		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UcMusicStudioManager*                        m_pMusicStudioManager;                            		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              m_fMasterVolume;                                  		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioManager" );

		return pClassPointer;
	};

	void ReloadConcaveOutlines ( );
	void ToggleDrawConcaveOutlines ( );
	void ToggleObstructionDebug ( );
	void ToggleGeometryDebug ( );
	void TogglePriorityManagerDebugInfo ( );
	void PrintPriorityManagerDebugInfo ( );
	void CalculateOutlineHoles ( );
	void SaveOutline ( );
	void DrawOutlines ( class UCanvas* pCanvas );
	void ChangeOutlineColor ( int outlineID, int R, int G, int B );
	void TriggerMemDump ( );
	void DrawDebugText ( class UCanvas* pCanvas );
	void DrawHUD ( class UCanvas* pCanvas );
	void DrawDebugLines ( );
	void ReloadAudioGarageData ( );
	void ContactDialogueTestStop ( );
	void ContactDialogueTestStart ( struct FString sContactName, struct FString sEventName, int nIntervalBetweenTriggers );
	void SetVehicleDebugType ( int nType );
	void SetDebugBitmapDrawLevel ( int nLevel );
	void ToggleTracerDebug ( );
	void ToggleCollisionDebug ( );
	void ToggleAmbientAudio ( );
	class UcMusicStudioManager* RetMusicStudioManager ( );
	void SetTimeOfDay ( float fTOD );
	void SetPlayerInWorld ( unsigned long bInWorld );
	void ProjectileEvent ( struct FVector vStartPos, struct FVector vEndPos, int nAudioMaterial, int nMangledWwiseIDForWeapon, unsigned long bLocallyFired, unsigned char nDamageAmount, unsigned long bLocalPlayerHit );
	void ScriptPositionalEvent ( struct FVector vPosition, int nEventMangledWwiseID );
	void ScriptSimpleEvent ( int nEventMangledWwiseID );
	int ScriptGetMangledWwiseID ( struct FString sIDName );
	void TermMusicStudio ( );
	void TickMusicStudio ( float fDeltaSeconds );
	void InitMusicStudio ( );
	void OnExitUI ( );
	void OnEnterUI ( unsigned long bMuteMusic, unsigned long bMuteEngineSounds );
	void SetMasterVolumeInternal ( );
	void SetMasterMute ( unsigned long bMute );
	void SetMasterVolume ( float fVolume );
	void Term ( );
	void Tick ( float fDeltaSeconds );
	void Init ( class UObject* SourceObject, struct FString strAudioType );
	void SetPushForPrivacy ( unsigned long bOn );
	void SetPushToTalk ( unsigned long bOn );
	void OnLogoutComplete ( );
	void OnClanExit ( );
	void OnMetaGroupExit ( );
	void OnGroupExit ( );
	void OnDistrictExit ( );
	void OnWorldEnter ( );
	void OnBeginLogout ( );
	void OnBeginPlay ( );
	void Configure ( struct FString MusicServerIpAddress, int MusicServerPort );
};

UClass* UcAudioManager::pClassPointer = NULL;

// Class APBGame.cAudioNPCInterface
// 0x0008 (0x006C - 0x0064)
class UcAudioNPCInterface : public UcAudioScriptInterface
{
public:
	class AActor*                                      m_AttachedActor;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceDialogue;                             		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioNPCInterface" );

		return pClassPointer;
	};

	void SetSwitches ( struct FString sVoiceSwitchValue, struct FString sClothingFootwearSwitchValue, struct FString sClothingArmsSwitchValue, struct FString sClothingLegsSwitchValue, struct FString sClothingAccessoriesSwitchValue );
	void Term ( );
	void Tick ( float fDeltaSeconds );
	void Init ( class UObject* SourceObject, struct FString strAudioType );
};

UClass* UcAudioNPCInterface::pClassPointer = NULL;

// Class APBGame.cAudioProjectileInterface
// 0x0004 (0x0068 - 0x0064)
class UcAudioProjectileInterface : public UcAudioScriptInterface
{
public:
	class AcAPBProjectile*                             m_AttachedProjectile;                             		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioProjectileInterface" );

		return pClassPointer;
	};

	void NotifyBounce ( float fSpeed, int nMaterial );
	void StartMissileEvent ( );
	void Term ( );
	void Tick ( float fDeltaSeconds );
	void Init ( class UObject* SourceObject );
};

UClass* UcAudioProjectileInterface::pClassPointer = NULL;

// Class APBGame.cAudioPropInterface
// 0x0004 (0x0068 - 0x0064)
class UcAudioPropInterface : public UcAudioScriptInterface
{
public:
	class AcProp*                                      m_AttachedProp;                                   		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioPropInterface" );

		return pClassPointer;
	};

	void Term ( );
	void Tick ( float fDeltaSeconds );
	void Init ( class UObject* SourceObject );
};

UClass* UcAudioPropInterface::pClassPointer = NULL;

// Class APBGame.cAudioVehicleInterface
// 0x0044 (0x00A8 - 0x0064)
class UcAudioVehicleInterface : public UcAudioScriptInterface
{
public:
	class AcAPBVehicle*                                m_AttachedVehicle;                                		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPlayerDriven : 1;                              		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                m_nMangledWwiseIDDoorOpenFront;                   		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorOpenRearSide;                		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorOpenBack;                    		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorCloseFront;                  		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorCloseRearSide;               		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseIDDoorCloseBack;                   		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseID_LC_VehicleType;                 		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nMangledWwiseID_DamageType;                     		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nMusicLocalID;                                  		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceIdle;                                 		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              m_fLastVehicleSpeed;                              		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_nPreviousWheelsOnGround[ 0x4 ];                 		// 0x0098 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAudioVehicleInterface" );

		return pClassPointer;
	};

	int GetMusicLocalID ( );
	void SetTrack ( );
	void EngineStop ( );
	void EngineStart ( );
	void DoorCloseEvent ( int nVehicleSeatPositionIndex );
	void DoorOpenEvent ( int nVehicleSeatPositionIndex );
	void SetLivingCityDriven ( unsigned long bLCDriven );
	void Explode ( );
	void SetCriticalDamageState ( unsigned char nDamageState );
	void Term ( );
	void PostRenderTick ( );
	void Tick ( float fDeltaSeconds );
	void SetCustomisationFlags ( int nEngineType, int nExhaustType, int nTurboType, int nTransmissionType, int nDumpValveType, int nGearChangeType, int nHornType, int nSirenType, int nAmpType, int nSpeakerType );
	void SetVehicleTypeInfo ( float fWheelForceThreshold, float fWheelForceMax, int nMangledWwiseIDDoorOpenFront, int nMangledWwiseIDDoorOpenRearSide, int nMangledWwiseIDDoorOpenBack, int nMangledWwiseIDDoorCloseFront, int nMangledWwiseIDDoorCloseRearSide, int nMangledWwiseIDDoorCloseBack, int nMangledWwiseIDSuspensionType, int nMangledWwiseID_LC_VehicleType, int nMangledWwiseID_DamageType, float fAudioEnclosednessMax );
	void Init ( class UObject* SourceObject );
	void eventOutputDebugText3D ( class AHUD* HUD, struct FString outString, struct FVector vPosition, float fR, float fG, float fB );
};

UClass* UcAudioVehicleInterface::pClassPointer = NULL;

// Class APBGame.cMusicStudioManager
// 0x0008 (0x0048 - 0x0040)
class UcMusicStudioManager : public UObject
{
public:
	struct FPointer                                    m_pPimpl;                                         		// 0x0040 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      m_bInitialized : 1;                               		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTracklistRefresh : 1;                          		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cMusicStudioManager" );

		return pClassPointer;
	};

	void UnlockInstruments ( );
	void StopAllThemes ( );
	void FlushInstruments ( );
	void LoadAllInstruments ( unsigned long bAsyncLoad );
	void MusicStudioGenericCommand ( struct FString sParam1, struct FString sParam2, struct FString sParam3, struct FString sParam4 );
	bool PlayCharacterNameTheme ( struct FString sCharacterName );
	bool PlayThemeByGuid ( struct FGuid _guid, unsigned long bUpdateCache );
	bool PlayCharacterUIDTheme ( int nCharacterUID, struct FGuid* playRequestGuid );
	void OnCharacterNameReceived ( int nCharacterUID, struct FString sCharacterName );
};

UClass* UcMusicStudioManager::pClassPointer = NULL;

// Class APBGame.cMusicStudioThemeDescriptor
// 0x001C (0x007C - 0x0060)
class UcMusicStudioThemeDescriptor : public UcAssetCustomisation
{
public:
	TArray< unsigned char >                            m_aThemeData;                                     		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGuid                                       m_ThemeGuid;                                      		// 0x006C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cMusicStudioThemeDescriptor" );

		return pClassPointer;
	};

};

UClass* UcMusicStudioThemeDescriptor::pClassPointer = NULL;

// Class APBGame.cStreamedComponentSet
// 0x0063 (0x00BC - 0x0059)
class UcStreamedComponentSet : public UActorComponent
{
public:
	struct FPointer                                    VfTable_cObjectStreamingCallback;                 		// 0x005C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FtStreamedComponent >               m_aComponents;                                    		// 0x0060 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< float >                                    m_afLODDistances;                                 		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_LODSelectionTag;                                		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nChosenComponent;                               		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nAttachedComponent;                             		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPrevComponent;                                 		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bModifiedAndUnsaved : 1;                        		// 0x0088 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bLocked : 1;                                    		// 0x0088 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bAlwaysLoadOnServer : 1;                        		// 0x0088 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      m_bForceStreamUpdate : 1;                         		// 0x0088 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bIsLOD0Drawn : 1;                               		// 0x0088 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bIsLOD1Drawn : 1;                               		// 0x0088 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	float                                              m_fTransitionBlendDuration;                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FcDeferredDetachment >              m_DeferredDetachments;                            		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FcDeferredDetachment >              m_DeferredEvictions;                              		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nBlendSourceComponent;                          		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nBlendTargetComponent;                          		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInterface* >                m_ReferencedMaterials;                            		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cStreamedComponentSet" );

		return pClassPointer;
	};

	void EvictComponent ( int nIndex );
	void RequestComponent ( int nIndex );
	void ChooseComponent ( int nIndex );
	bool IsLocked ( );
	void UnlockHighLODs ( );
	void LockHighLODs ( );
};

UClass* UcStreamedComponentSet::pClassPointer = NULL;

// Class APBGame.CharacterBuildHelper
// 0x003C (0x007C - 0x0040)
class UCharacterBuildHelper : public UObject
{
public:
	class UAPBStudioCharacter*                         m_pStudio;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_pRenderTarget;                                  		// 0x0044 (0x0004) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_pMaskRenderTarget;                              		// 0x0048 (0x0004) [0x0000000000000000]              
	class UcGolemRenderTarget*                         m_pTempRenderTarget;                              		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                m_nRenderTargetSize;                              		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pBodyColourStack;                               		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPartColourStack;                               		// 0x0058 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pBodyNormalStack;                               		// 0x005C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pPartNormalStack;                               		// 0x0060 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pMeshDebugPage;                                 		// 0x0064 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pSeamExtDebugPage;                              		// 0x0068 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pDiffuseMapDebugPage;                           		// 0x006C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pNormalMapDebugPage;                            		// 0x0070 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pSummaryDebugPage;                              		// 0x0074 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fBuildTime;                                     		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.CharacterBuildHelper" );

		return pClassPointer;
	};

};

UClass* UCharacterBuildHelper::pClassPointer = NULL;

// Class APBGame.VehicleBuildHelper
// 0x0020 (0x0060 - 0x0040)
class UVehicleBuildHelper : public UObject
{
public:
	class UAPBStudioVehicle*                           m_pStudio;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FPointer                                    m_pExteriorDebugPage;                             		// 0x0044 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pInteriorDebugPage;                             		// 0x0048 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pGlassDebugPage;                                		// 0x004C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pWheelsDebugPage;                               		// 0x0050 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pMeshDebugPage;                                 		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pSeamExtDebugPage;                              		// 0x0058 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    m_pSummaryDebugPage;                              		// 0x005C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.VehicleBuildHelper" );

		return pClassPointer;
	};

};

UClass* UVehicleBuildHelper::pClassPointer = NULL;

// Class APBGame.cUILoadingScreenManager
// 0x00B4 (0x00F4 - 0x0040)
class UcUILoadingScreenManager : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     m_sLoadingMovie;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bIsTickEnabled : 1;                             		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsLoadingScreenRendering : 1;                  		// 0x0054 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                m_nPrevClientHostingState;                        		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sCurrentPackageName;                            		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sPrevPackageName;                               		// 0x0068 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nDistrictUID;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     m_sLMM_DistrictName;                              		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sLMM_LoadingText;                               		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sLMM_HintText;                                  		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_anHintList;                                     		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nHintIndex;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FDouble                                     m_dLastChangeTime;                                		// 0x00AC (0x0008) [0x0000000000000000]              
	struct FString                                     m_sLMM_Loading_FontName;                          		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sLMM_HintText_FontName;                         		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFont*                                       m_pLMM_Loading_Font;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	class UFont*                                       m_pLMM_HintText_Font;                             		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentLoadingMovieConfig;                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	TArray< struct FLoadingMovieConfig >               m_aPlaylist;                                      		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector2D                                   m_LoadingHeaderPosition;                          		// 0x00E4 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_LoadingHintPosition;                            		// 0x00EC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUILoadingScreenManager" );

		return pClassPointer;
	};

};

UClass* UcUILoadingScreenManager::pClassPointer = NULL;

// Class APBGame.cMaterialInstanceDebugHighlight
// 0x0004 (0x00A0 - 0x009C)
class UcMaterialInstanceDebugHighlight : public UMaterialInstance
{
public:
	struct FColor                                      m_HighlightColor;                                 		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cMaterialInstanceDebugHighlight" );

		return pClassPointer;
	};

};

UClass* UcMaterialInstanceDebugHighlight::pClassPointer = NULL;

// Class APBGame.cAPBUberPostProcessEffect
// 0x0173 (0x01D8 - 0x0065)
class UcAPBUberPostProcessEffect : public UPostProcessEffect
{
public:
	unsigned long                                      UseCurves : 1;                                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIrisResponse : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              BloomAlpha;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomThreshold;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomStrength;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomMinDarken;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOFFocusDistance;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOFTransitionDistance;                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOFMaxBlurForeground;                             		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOFMaxBlurBackground;                             		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomPostScale;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       CrvBloomAlpha;                                    		// 0x0090 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvBloomThreshold;                                		// 0x00AC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvBloomStrength;                                 		// 0x00C8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvBloomMinDarken;                                		// 0x00E4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvDOFFocusDistance;                              		// 0x0100 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvDOFTransitionDistance;                         		// 0x011C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvDOFMaxBlurForeground;                          		// 0x0138 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvDOFMaxBlurBackground;                          		// 0x0154 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CrvBloomPostScale;                                		// 0x0170 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              MiddleGrey;                                       		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lwhite;                                           		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdaptionRate;                                     		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdaptionCentre;                                   		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdaptionSlope;                                    		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAdaptationIn;                                  		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAdaptationOut;                                 		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAdaptationIn;                                  		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAdaptationOut;                                 		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Brightness;                                       		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Contrast;                                         		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Gamma;                                            		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Saturation;                                       		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PerChannelPower;                                  		// 0x01C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DesaturatedColour;                                		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VisualiseRenderTarget;                            		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RenderTargetTapPoint;                             		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBUberPostProcessEffect" );

		return pClassPointer;
	};

};

UClass* UcAPBUberPostProcessEffect::pClassPointer = NULL;

// Class APBGame.cUIBlurPostProcessEffect
// 0x000F (0x0074 - 0x0065)
class UcUIBlurPostProcessEffect : public UPostProcessEffect
{
public:
	float                                              fBlurStrength;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VisualiseRenderTarget;                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RenderTargetTapPoint;                             		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cUIBlurPostProcessEffect" );

		return pClassPointer;
	};

};

UClass* UcUIBlurPostProcessEffect::pClassPointer = NULL;

// Class APBGame.cPrecacheObject
// 0x000C (0x004C - 0x0040)
class UcPrecacheObject : public UObject
{
public:
	TArray< class UObject* >                           m_aObjects;                                       		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPrecacheObject" );

		return pClassPointer;
	};

};

UClass* UcPrecacheObject::pClassPointer = NULL;

// Class APBGame.cHUDMessageTypes
// 0x0000 (0x0040 - 0x0040)
class UcHUDMessageTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cHUDMessageTypes" );

		return pClassPointer;
	};

};

UClass* UcHUDMessageTypes::pClassPointer = NULL;

// Class APBGame.APBServerCommandlet
// 0x0000 (0x0080 - 0x0080)
class UAPBServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBServerCommandlet" );

		return pClassPointer;
	};

};

UClass* UAPBServerCommandlet::pClassPointer = NULL;

// Class APBGame.ReplaceDerivedContactsCommandlet
// 0x0000 (0x0080 - 0x0080)
class UReplaceDerivedContactsCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.ReplaceDerivedContactsCommandlet" );

		return pClassPointer;
	};

};

UClass* UReplaceDerivedContactsCommandlet::pClassPointer = NULL;

// Class APBGame.ReplaceSpawnBaysCommandlet
// 0x0000 (0x0080 - 0x0080)
class UReplaceSpawnBaysCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.ReplaceSpawnBaysCommandlet" );

		return pClassPointer;
	};

};

UClass* UReplaceSpawnBaysCommandlet::pClassPointer = NULL;

// Class APBGame.APBAnimNotify_FootstepVFX
// 0x0009 (0x0049 - 0x0040)
class UAPBAnimNotify_FootstepVFX : public UAnimNotify
{
public:
	struct FName                                       Bone;                                             		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Weight;                                           		// 0x0048 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBAnimNotify_FootstepVFX" );

		return pClassPointer;
	};

};

UClass* UAPBAnimNotify_FootstepVFX::pClassPointer = NULL;

// Class APBGame.APBParticleFoldFloat
// 0x0018 (0x0070 - 0x0058)
class UAPBParticleFoldFloat : public UDistributionFloatConstant
{
public:
	TArray< class UDistributionFloat* >                Distributions;                                    		// 0x0058 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      FoldOperation;                                    		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialValue;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThresholdToZero;                                  		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBParticleFoldFloat" );

		return pClassPointer;
	};

};

UClass* UAPBParticleFoldFloat::pClassPointer = NULL;

// Class APBGame.APBParticleFoldVector
// 0x002B (0x0090 - 0x0065)
class UAPBParticleFoldVector : public UDistributionVectorConstant
{
public:
	TArray< class UDistributionVector* >               Distributions;                                    		// 0x0068 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      FoldOperation;                                    		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InitialValue;                                     		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ThresholdToZero;                                  		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBParticleFoldVector" );

		return pClassPointer;
	};

};

UClass* UAPBParticleFoldVector::pClassPointer = NULL;

// Class APBGame.APBParticleParameterFloat
// 0x003C (0x0094 - 0x0058)
class UAPBParticleParameterFloat : public UDistributionFloatConstant
{
public:
	struct FString                                     ParentProperty;                                   		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_parentPropertyType;                             		// 0x0064 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bAbsoluteOnly : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampToRange : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              PropertyBias;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PropertyScale;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClampMinimum;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClampMaximum;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewValue;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_lastUpdateTime;                                 		// 0x0080 (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	float                                              m_lastUpdateValue;                                		// 0x0084 (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	TArray< int >                                      m_offsetPath;                                     		// 0x0088 (0x000C) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBParticleParameterFloat" );

		return pClassPointer;
	};

};

UClass* UAPBParticleParameterFloat::pClassPointer = NULL;

// Class APBGame.APBParticleParameterVector
// 0x006F (0x00D4 - 0x0065)
class UAPBParticleParameterVector : public UDistributionVectorConstant
{
public:
	struct FString                                     ParentProperty;                                   		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_parentPropertyType;                             		// 0x0074 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bAbsoluteOnly : 1;                                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampToRange : 1;                                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     PropertyBias;                                     		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PropertyScale;                                    		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ClampMinimum;                                     		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ClampMaximum;                                     		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PreviewValue;                                     		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_lastUpdateTime;                                 		// 0x00B8 (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	struct FVector                                     m_lastUpdateValue;                                		// 0x00BC (0x000C) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	TArray< int >                                      m_offsetPath;                                     		// 0x00C8 (0x000C) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBParticleParameterVector" );

		return pClassPointer;
	};

};

UClass* UAPBParticleParameterVector::pClassPointer = NULL;

// Class APBGame.APBParticleParameterVehicle
// 0x0030 (0x0088 - 0x0058)
class UAPBParticleParameterVehicle : public UDistributionFloatConstant
{
public:
	float                                              ScaleLatSlipAngle;                                		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleLongSlipRatio;                               		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SpeedSignIndicatesDirection : 1;                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SpeedAffectsSlip : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      PreviewHandbrake : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              BiasSpeed;                                        		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleSpeed;                                       		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeMultiplier;                              		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumOutput;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumOutput;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewSpeed;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewLatSlipAngle;                              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewLongSlipRatio;                             		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FinalScale;                                       		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBParticleParameterVehicle" );

		return pClassPointer;
	};

};

UClass* UAPBParticleParameterVehicle::pClassPointer = NULL;

// Class APBGame.cAPBTransientVFXManager
// 0x0018 (0x0254 - 0x023C)
class AcAPBTransientVFXManager : public AActor
{
public:
	TArray< class AEmitter* >                          m_poolEmitter;                                    		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UcParticleDecalComponent* >          m_poolParticleDecals;                             		// 0x0248 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBTransientVFXManager" );

		return pClassPointer;
	};

	int PoolCountLive ( );
	int PoolCount ( );
	class UTexture* LoadTexture ( struct FString textureName );
	class UcParticleDecalComponent* CreateDecal ( struct FString textureName, unsigned char BlendMode, unsigned char ProjectionMode, struct FVector someLocation, struct FRotator someRotation, struct FVector someScale );
	class UcParticleDecalComponent* SpawnDecal ( );
	void AddToPool ( class AEmitter* E );
	void RemoveFromPool ( class AEmitter* E );
	class UParticleSystem* LoadSystem ( struct FString systemName );
	class AEmitter* CreateEmitter ( struct FString systemName, struct FVector someLocation, struct FRotator someRotation, class AActor* someTarget );
	class AEmitter* SpawnEmitter ( );
};

UClass* AcAPBTransientVFXManager::pClassPointer = NULL;

// Class APBGame.iModifiable
// 0x0000 (0x0040 - 0x0040)
class UiModifiable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iModifiable" );

		return pClassPointer;
	};

};

UClass* UiModifiable::pClassPointer = NULL;

// Class APBGame.cWaypoint
// 0x0014 (0x0250 - 0x023C)
class AcWaypoint : public AActor
{
public:
	int                                                m_HUDMarkerID;                                    		// 0x023C (0x0004) [0x0000000000000000]              
	struct FEnumeratedName                             m_eHUDMarkerType;                                 		// 0x0240 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWaypoint" );

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void NativePostBeginPlay ( );
	void eventPostBeginPlay ( );
};

UClass* AcWaypoint::pClassPointer = NULL;

// Class APBGame.cSDDDistrict
// 0x0000 (0x0040 - 0x0040)
class UcSDDDistrict : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDDistrict" );

		return pClassPointer;
	};

};

UClass* UcSDDDistrict::pClassPointer = NULL;

// Class APBGame.cWeatherManager
// 0x0130 (0x0170 - 0x0040)
class UcWeatherManager : public UcWeatherManagerBase
{
public:
	struct FString                                     m_DefaultSettingsName;                            		// 0x0040 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UcWeatherSettings*                           m_DefaultSettings;                                		// 0x004C (0x0004) [0x0000000000000000]              
	TArray< class UHeightFogComponent* >               m_FogComponents;                                  		// 0x0050 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nWeatherOverride;                               		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPostProcessSettings                        CachedPostProcessSettings;                        		// 0x0060 (0x010C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bCachedPostProcessValid : 1;                      		// 0x016C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWeatherManager" );

		return pClassPointer;
	};

};

UClass* UcWeatherManager::pClassPointer = NULL;

// Class APBGame.cWeatherSettings
// 0x0010 (0x0050 - 0x0040)
class UcWeatherSettings : public UObject
{
public:
	TArray< struct FcWeatherType >                     Weather;                                          		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TransitionTime;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cWeatherSettings" );

		return pClassPointer;
	};

};

UClass* UcWeatherSettings::pClassPointer = NULL;

// Class APBGame.cSDDMissionJustification
// 0x0000 (0x0040 - 0x0040)
class UcSDDMissionJustification : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSDDMissionJustification" );

		return pClassPointer;
	};

};

UClass* UcSDDMissionJustification::pClassPointer = NULL;

// Class APBGame.cOpenWorldDropOff
// 0x0040 (0x02B8 - 0x0278)
class AcOpenWorldDropOff : public AcAPBTriggerVolume
{
public:
	struct FEnumeratedName                             m_eDropOffType;                                   		// 0x0278 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AcAPBVehicleBase* >                  m_aPendingVehicles;                               		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nHUDMarkerID;                                   		// 0x0294 (0x0004) [0x0000000000000000]              
	TArray< struct FtPlayerDropOffPointsInfo >         m_aPlayerPoints;                                  		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bIsReplenishingPoints : 1;                      		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    m_pSddOpenWorldDropOff;                           		// 0x02A8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FScriptDelegate                             __NotifyOpenWorldDropOffPlayerEvent__Delegate;    		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cOpenWorldDropOff" );

		return pClassPointer;
	};

	void UpdatePointReplenishment ( );
	void NotifyPlayerEventNative ( int nMessage, int nParam, class AActor* Emitter );
	void NotifyOpenWorldDropOffPlayerEvent ( int nMessage, int nParam, class AActor* Emitter );
	struct FLinearColor GetColour ( );
	void NotifyActorLeftCheckpoint ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void NotifyActorEnteredCheckpoint ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void ProcessPendingVehicleDeliveries ( );
	void PostBeginPlayNative ( );
	void eventPostBeginPlay ( );
};

UClass* AcOpenWorldDropOff::pClassPointer = NULL;

// Class APBGame.cLCSDDTypes
// 0x0000 (0x0040 - 0x0040)
class UcLCSDDTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cLCSDDTypes" );

		return pClassPointer;
	};

};

UClass* UcLCSDDTypes::pClassPointer = NULL;

// Class APBGame.cPlayerVehicleSpawnBay
// 0x0004 (0x027C - 0x0278)
class AcPlayerVehicleSpawnBay : public AcAPBTriggerVolume
{
public:
	class AcPlayerVehicleSpawnDirection*               m_SpawnDirection;                                 		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerVehicleSpawnBay" );

		return pClassPointer;
	};

};

UClass* AcPlayerVehicleSpawnBay::pClassPointer = NULL;

// Class APBGame.cPlayerVehicleSpawnInteractionPoint
// 0x0011 (0x0295 - 0x0284)
class AcPlayerVehicleSpawnInteractionPoint : public AcInteractiveDynamicSMActor
{
public:
	struct FPointer                                    VfTable_IiAmmoSupplier;                           		// 0x0284 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AcPlayerVehicleSpawnZone*                    m_pSpawnZone;                                     		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                m_nHUDMarkerID;                                   		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0290 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      m_eFaction;                                       		// 0x0294 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerVehicleSpawnInteractionPoint" );

		return pClassPointer;
	};

	bool IsPlayerUsingInventoryAccess ( class AcAPBPlayerController* pPlayer );
	void CancelAllInventoryAccesses ( );
	void EndInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned long bCancel );
	void BeginInventoryAccess ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	unsigned char CheckCanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer, unsigned char eRequestedType );
	bool CanPlayerAccessInventory ( class AcAPBPlayerController* pPlayer );
	void NotifyConsumerAttributesModified ( class UiAmmoConsumer* pConsumer );
	void NotifySupplierAttributesModified ( );
	bool IsResupplyingPlayer ( class AcAPBPlayerController* pPlayer );
	void CancelAllResupplyOperations ( );
	void EndResupply ( class AcAPBPlayerController* pPlayer, unsigned long bCancel, unsigned char eWeaponType );
	void BeginResupply ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	bool CanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	unsigned char CheckCanResupplyPlayer ( class AcAPBPlayerController* pPlayer, unsigned char eWeaponType );
	class AActor* RetAmmoSupplierActor ( );
	float RetAmmoResupplyRange ( );
	bool IsRangeBasedAmmoSupplier ( );
	bool IsAmmoCarrier ( );
	class UcAmmoDepotComponent* RetAmmoDepotComponent ( );
	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
};

UClass* AcPlayerVehicleSpawnInteractionPoint::pClassPointer = NULL;

// Class APBGame.cPlayerVehicleSpawnZone
// 0x0030 (0x02A8 - 0x0278)
class AcPlayerVehicleSpawnZone : public AcAPBTriggerVolume
{
public:
	struct FPointer                                    VfTable_IUseInterface;                            		// 0x0278 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      m_eFaction;                                       		// 0x027C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHUDMarkerID;                                   		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AcPlayerVehicleSpawnBay* >           m_aSpawnBays;                                     		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcPlayerVehicleSpawnInteractionPoint* > m_aSpawnInteractionPoints;                        		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nRandomSeed;                                    		// 0x029C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAllowDirectInteractionWithVolume : 1;          		// 0x02A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x02A4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerVehicleSpawnZone" );

		return pClassPointer;
	};

	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventEndUse ( class AcAPBPlayerController* UserController, unsigned char eCSA, int nIPIndex, unsigned char eCSAState );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
	struct FLinearColor GetColour ( );
	unsigned char RetFaction ( );
	unsigned char TrySpawnDeployedVehicle ( class AcAPBPlayerController* pSpawningPlayer );
	unsigned char CheckCanSpawnDeployedVehicle ( class AcAPBPlayerController* pSpawningPlayer );
	void NotifyTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AcPlayerVehicleSpawnZone::pClassPointer = NULL;

// Class APBGame.cPlayerUIInteractionPoint
// 0x001C (0x02A0 - 0x0284)
class AcPlayerUIInteractionPoint : public AcInteractiveDynamicSMActor
{
public:
	struct FEnumeratedName                             m_eInteractionPointType;                          		// 0x0284 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eFaction;                                       		// 0x0294 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHUDMarkerID;                                   		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    m_pSddPlayerUIInteractionPoint;                   		// 0x029C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerUIInteractionPoint" );

		return pClassPointer;
	};

	bool eventIsCSASupported ( unsigned char eCSA, class APawn* User, int nIPIndex );
	void eventBeginUse ( class APawn* User, unsigned char eCSA, int nIPIndex );
};

UClass* AcPlayerUIInteractionPoint::pClassPointer = NULL;

// Class APBGame.cFlythroughSpawnerActor
// 0x0018 (0x0254 - 0x023C)
class AcFlythroughSpawnerActor : public AActor
{
public:
	TArray< class AcFlythroughSkeletalMeshActor* >     spawnedPedestrians;                               		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AcFlythroughSkeletalMeshActor* >     spawnedVehicles;                                  		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cFlythroughSpawnerActor" );

		return pClassPointer;
	};

	void DestroyAllFlythroughActors ( unsigned char actorType );
	void DestroyFlythroughActor ( int nActorIndex, unsigned char actorType );
	void SpawnFlythroughActor ( struct FVector characterLocation, struct FRotator characterRotation, int meshIndex, unsigned char actorType );
};

UClass* AcFlythroughSpawnerActor::pClassPointer = NULL;

// Class APBGame.APBSeqEvent_cWeapon
// 0x0000 (0x0100 - 0x0100)
class UAPBSeqEvent_cWeapon : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSeqEvent_cWeapon" );

		return pClassPointer;
	};

};

UClass* UAPBSeqEvent_cWeapon::pClassPointer = NULL;

// Class APBGame.APBSpinnyCube
// 0x0004 (0x0278 - 0x0274)
class AAPBSpinnyCube : public ADynamicSMActor
{
public:
	float                                              rotationSpeed;                                    		// 0x0274 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.APBSpinnyCube" );

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void eventPreBeginPlay ( );
};

UClass* AAPBSpinnyCube::pClassPointer = NULL;

// Class APBGame.cActorFactorySkeletalMeshDLOD
// 0x0000 (0x0078 - 0x0078)
class UcActorFactorySkeletalMeshDLOD : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cActorFactorySkeletalMeshDLOD" );

		return pClassPointer;
	};

};

UClass* UcActorFactorySkeletalMeshDLOD::pClassPointer = NULL;

// Class APBGame.cSkeletalMeshDLODActor
// 0x0000 (0x0250 - 0x0250)
class AcSkeletalMeshDLODActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSkeletalMeshDLODActor" );

		return pClassPointer;
	};

};

UClass* AcSkeletalMeshDLODActor::pClassPointer = NULL;

// Class APBGame.cAdvertisement
// 0x0000 (0x0240 - 0x0240)
class AcAdvertisement : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAdvertisement" );

		return pClassPointer;
	};

};

UClass* AcAdvertisement::pClassPointer = NULL;

// Class APBGame.cAnimNotify_BlendToRagdoll
// 0x0004 (0x0044 - 0x0040)
class UcAnimNotify_BlendToRagdoll : public UAnimNotify_Scripted
{
public:
	float                                              fRandomBlendTime;                                 		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_BlendToRagdoll" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotify_BlendToRagdoll::pClassPointer = NULL;

// Class APBGame.cAnimNotify_DestroyHeldObject
// 0x0008 (0x0048 - 0x0040)
class UcAnimNotify_DestroyHeldObject : public UAnimNotify_Scripted
{
public:
	struct FName                                       m_sSocketName;                                    		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_DestroyHeldObject" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotify_DestroyHeldObject::pClassPointer = NULL;

// Class APBGame.cAnimNotify_PlayWeaponAnimation
// 0x000C (0x004C - 0x0040)
class UcAnimNotify_PlayWeaponAnimation : public UAnimNotify_Scripted
{
public:
	struct FName                                       m_sAnimationName;                                 		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCrouched : 1;                                  		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_PlayWeaponAnimation" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotify_PlayWeaponAnimation::pClassPointer = NULL;

// Class APBGame.cAnimNotify_ShowWeapon
// 0x0004 (0x0044 - 0x0040)
class UcAnimNotify_ShowWeapon : public UAnimNotify_Scripted
{
public:
	unsigned long                                      m_bShow : 1;                                      		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCrouched : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_ShowWeapon" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotify_ShowWeapon::pClassPointer = NULL;

// Class APBGame.cAnimNotify_SpawnHeldObject
// 0x0010 (0x0050 - 0x0040)
class UcAnimNotify_SpawnHeldObject : public UAnimNotify_Scripted
{
public:
	class UStaticMesh*                                 m_HeldObject;                                     		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_HeldObjectSkeletal;                             		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sSocketName;                                    		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotify_SpawnHeldObject" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotify_SpawnHeldObject::pClassPointer = NULL;

// Class APBGame.cAnimNotifyLogical_TaskItem
// 0x0001 (0x0041 - 0x0040)
class UcAnimNotifyLogical_TaskItem : public UcAnimNotifyLogical
{
public:
	unsigned char                                      m_eTaskItemNotify;                                		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyLogical_TaskItem" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotifyLogical_TaskItem::pClassPointer = NULL;

// Class APBGame.cAnimNotifyLogical_UseProp
// 0x0008 (0x0048 - 0x0040)
class UcAnimNotifyLogical_UseProp : public UcAnimNotifyLogical
{
public:
	struct FName                                       m_sUseTagName;                                    		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAnimNotifyLogical_UseProp" );

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UcAnimNotifyLogical_UseProp::pClassPointer = NULL;

// Class APBGame.cAPBDebugGameInfo
// 0x0000 (0x03DC - 0x03DC)
class AcAPBDebugGameInfo : public AAPBGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBDebugGameInfo" );

		return pClassPointer;
	};

};

UClass* AcAPBDebugGameInfo::pClassPointer = NULL;

// Class APBGame.cAPBDebugPlayerController
// 0x002C (0x0D28 - 0x0CFC)
class AcAPBDebugPlayerController : public AcAPBPlayerController
{
public:
	float                                              WeaponImpulse;                                    		// 0x0CFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HoldDistanceMin;                                  		// 0x0D00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HoldDistanceMax;                                  		// 0x0D04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThrowImpulse;                                     		// 0x0D08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChangeHoldDistanceIncrement;                      		// 0x0D0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_Handle*                                  PhysicsGrabber;                                   		// 0x0D10 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              HoldDistance;                                     		// 0x0D14 (0x0004) [0x0000000000000000]              
	struct FQuat                                       HoldOrientation;                                  		// 0x0D18 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cAPBDebugPlayerController" );

		return pClassPointer;
	};

	void PlayerTick ( float DeltaTime );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void NextWeapon ( );
	void PrevWeapon ( );
};

UClass* AcAPBDebugPlayerController::pClassPointer = NULL;

// Class APBGame.cTempHitMarker
// 0x000C (0x0248 - 0x023C)
class AcTempHitMarker : public AActor
{
public:
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x023C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_DisplayTime;                                    		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              m_RemoveTime;                                     		// 0x0244 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTempHitMarker" );

		return pClassPointer;
	};

	void SetColour ( struct FColor Colour );
	void eventTimer ( );
	void eventPostBeginPlay ( );
};

UClass* AcTempHitMarker::pClassPointer = NULL;

// Class APBGame.cCrimeTargetZone
// 0x0008 (0x0264 - 0x025C)
class AcCrimeTargetZone : public AcPlaceholderLocator
{
public:
	unsigned char                                      m_eCrimeTargetZone;                               		// 0x025C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_ZoneRadius;                                     		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cCrimeTargetZone" );

		return pClassPointer;
	};

	struct FString GetDisplayName ( );
	float GetZoneRadius ( );
	unsigned char GetCrimeTargetZoneType ( );
};

UClass* AcCrimeTargetZone::pClassPointer = NULL;

// Class APBGame.cDebugMiniMap
// 0x0000 (0x0040 - 0x0040)
class UcDebugMiniMap : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDebugMiniMap" );

		return pClassPointer;
	};

};

UClass* UcDebugMiniMap::pClassPointer = NULL;

// Class APBGame.cDisplayArea
// 0x0000 (0x0278 - 0x0278)
class AcDisplayArea : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cDisplayArea" );

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AcDisplayArea::pClassPointer = NULL;

// Class APBGame.cEnfPerfCar
// 0x0008 (0x1ADC - 0x1AD4)
class AcEnfPerfCar : public AcAPBVehicle
{
public:
	class UGolemobileBase*                             VehicleBaseHACK;                                  		// 0x1AD4 (0x0004) [0x0000000000000000]              
	float                                              m_fRandomPhase;                                   		// 0x1AD8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cEnfPerfCar" );

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void PostBeginPlay ( );
};

UClass* AcEnfPerfCar::pClassPointer = NULL;

// Class APBGame.cGangPerfCar
// 0x0004 (0x1AD8 - 0x1AD4)
class AcGangPerfCar : public AcAPBVehicle
{
public:
	class UGolemobileBase*                             VehicleBaseHACK;                                  		// 0x1AD4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cGangPerfCar" );

		return pClassPointer;
	};

};

UClass* AcGangPerfCar::pClassPointer = NULL;

// Class APBGame.cPersonalGraffitiDisplayPoint
// 0x0000 (0x02A8 - 0x02A8)
class AcPersonalGraffitiDisplayPoint : public AcCustomGraffitiDisplayPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPersonalGraffitiDisplayPoint" );

		return pClassPointer;
	};

};

UClass* AcPersonalGraffitiDisplayPoint::pClassPointer = NULL;

// Class APBGame.cPhysicsCube
// 0x0004 (0x02FC - 0x02F8)
class AcPhysicsCube : public AKActor
{
public:
	unsigned long                                      bForceAwake : 1;                                  		// 0x02F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPhysicsCube" );

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* AcPhysicsCube::pClassPointer = NULL;

// Class APBGame.cPlayerGraffitiDisplayPointPlaceholder
// 0x0000 (0x02C9 - 0x02C9)
class AcPlayerGraffitiDisplayPointPlaceholder : public AcPlayerGraffitiDisplayPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerGraffitiDisplayPointPlaceholder" );

		return pClassPointer;
	};

};

UClass* AcPlayerGraffitiDisplayPointPlaceholder::pClassPointer = NULL;

// Class APBGame.cPlayerVehicleSpawnPoint
// 0x0000 (0x025C - 0x025C)
class AcPlayerVehicleSpawnPoint : public AcPlaceholderLocator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPlayerVehicleSpawnPoint" );

		return pClassPointer;
	};

};

UClass* AcPlayerVehicleSpawnPoint::pClassPointer = NULL;

// Class APBGame.cPropComponent_PlayAnimation
// 0x0000 (0x00A0 - 0x00A0)
class UcPropComponent_PlayAnimation : public UcPropComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cPropComponent_PlayAnimation" );

		return pClassPointer;
	};

};

UClass* UcPropComponent_PlayAnimation::pClassPointer = NULL;

// Class APBGame.cRamRaidTriggerVolume
// 0x0000 (0x0278 - 0x0278)
class AcRamRaidTriggerVolume : public AcTaskTargetTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cRamRaidTriggerVolume" );

		return pClassPointer;
	};

};

UClass* AcRamRaidTriggerVolume::pClassPointer = NULL;

// Class APBGame.cSpriteActor
// 0x0004 (0x0240 - 0x023C)
class AcSpriteActor : public AActor
{
public:
	class USpriteComponent*                            DisplayComponent;                                 		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cSpriteActor" );

		return pClassPointer;
	};

};

UClass* AcSpriteActor::pClassPointer = NULL;

// Class APBGame.cTaskOperation
// 0x0000 (0x0040 - 0x0040)
class UcTaskOperation : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cTaskOperation" );

		return pClassPointer;
	};

};

UClass* UcTaskOperation::pClassPointer = NULL;

// Class APBGame.cVendorVolume
// 0x0000 (0x0278 - 0x0278)
class AcVendorVolume : public AcAPBTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.cVendorVolume" );

		return pClassPointer;
	};

};

UClass* AcVendorVolume::pClassPointer = NULL;

// Class APBGame.DirectionalCurveLight
// 0x0000 (0x0284 - 0x0284)
class ADirectionalCurveLight : public ACurveLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.DirectionalCurveLight" );

		return pClassPointer;
	};

};

UClass* ADirectionalCurveLight::pClassPointer = NULL;

// Class APBGame.iPropActor
// 0x0000 (0x0040 - 0x0040)
class UiPropActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.iPropActor" );

		return pClassPointer;
	};

	void SetEmissiveLevel ( float fLevel );
	float RetEmissiveLevel ( );
	void SetMaterialDamageLevel ( float fLevel );
	float RetMaterialDamageLevel ( );
	void SetVariant ( int nVariant );
	int RetVariant ( );
};

UClass* UiPropActor::pClassPointer = NULL;

// Class APBGame.DynamicSMPropActor
// 0x0000 (0x0260 - 0x0260)
class ADynamicSMPropActor : public ASMPropActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.DynamicSMPropActor" );

		return pClassPointer;
	};

};

UClass* ADynamicSMPropActor::pClassPointer = NULL;

// Class APBGame.RTWLCCFemalePawn
// 0x0000 (0x0638 - 0x0638)
class ARTWLCCFemalePawn : public ARTWLCCPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLCCFemalePawn" );

		return pClassPointer;
	};

};

UClass* ARTWLCCFemalePawn::pClassPointer = NULL;

// Class APBGame.RTWLCCGameInfo
// 0x000C (0x03B8 - 0x03AC)
class ARTWLCCGameInfo : public AGameInfo
{
public:
	struct FString                                     DefaultPawnClassName;                             		// 0x03AC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLCCGameInfo" );

		return pClassPointer;
	};

	void eventPostLogin ( class APlayerController* NewPlayer );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	bool AllowCheats ( class APlayerController* P );
	void RestartPlayer ( class AController* NewPlayer );
};

UClass* ARTWLCCGameInfo::pClassPointer = NULL;

// Class APBGame.RTWLCCHUD
// 0x0004 (0x04C4 - 0x04C0)
class ARTWLCCHUD : public AHUD
{
public:
	class UTexture2D*                                  HUDTexture;                                       		// 0x04C0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLCCHUD" );

		return pClassPointer;
	};

	void DrawHUD ( );
};

UClass* ARTWLCCHUD::pClassPointer = NULL;

// Class APBGame.RTWLCCPlayerController
// 0x0004 (0x0620 - 0x061C)
class ARTWLCCPlayerController : public AcHostingPlayerController
{
public:
	unsigned long                                      bKeyReleased : 1;                                 		// 0x061C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLCCPlayerController" );

		return pClassPointer;
	};

	void SymbolEditor ( );
	void UpdateCustomisation ( );
	void UpdateCameraRotation ( );
};

UClass* ARTWLCCPlayerController::pClassPointer = NULL;

// Class APBGame.RTWLCCMalePawn
// 0x0000 (0x0638 - 0x0638)
class ARTWLCCMalePawn : public ARTWLCCPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLCCMalePawn" );

		return pClassPointer;
	};

};

UClass* ARTWLCCMalePawn::pClassPointer = NULL;

// Class APBGame.RTWLCCPlayerInput
// 0x0000 (0x0160 - 0x0160)
class URTWLCCPlayerInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLCCPlayerInput" );

		return pClassPointer;
	};

};

UClass* URTWLCCPlayerInput::pClassPointer = NULL;

// Class APBGame.RTWLVCGameInfo
// 0x0000 (0x03AC - 0x03AC)
class ARTWLVCGameInfo : public AGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLVCGameInfo" );

		return pClassPointer;
	};

	bool AllowCheats ( class APlayerController* P );
	void RestartPlayer ( class AController* NewPlayer );
};

UClass* ARTWLVCGameInfo::pClassPointer = NULL;

// Class APBGame.RTWLVCPlayerController
// 0x0004 (0x0620 - 0x061C)
class ARTWLVCPlayerController : public AcHostingPlayerController
{
public:
	unsigned long                                      bKeyReleased : 1;                                 		// 0x061C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.RTWLVCPlayerController" );

		return pClassPointer;
	};

	void SymbolEditor ( );
	void UpdateCustomisation ( );
	void UpdateCameraRotation ( );
};

UClass* ARTWLVCPlayerController::pClassPointer = NULL;

// Class APBGame.StaticSMPropActor
// 0x0000 (0x0260 - 0x0260)
class AStaticSMPropActor : public ASMPropActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = UObject::FindClass ( "Class APBGame.StaticSMPropActor" );

		return pClassPointer;
	};

};

UClass* AStaticSMPropActor::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif