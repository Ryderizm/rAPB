DWORD g_RC4Key = 0x2A3F7290;

typedef int ( __thiscall* oRC4Key )(void *thisptr,  unsigned int len, const unsigned char* data );
oRC4Key pRC4Key = nullptr;
 
typedef int ( __thiscall* oAPBsend )(void *thisptr, unsigned int buf);
oAPBsend pAPBsend = nullptr;

int __fastcall hkRC4Key( void* thisptr, void* edx, unsigned int len, const unsigned char* key_data )
{
  g_RC4Key    = (DWORD)thisptr;
 
  printf("----------------------\n");
  printf("--Called hkRC4Key go--\n");
  printf("----------------------\n");
  printf("g_cPacket: 0x%X\n", g_RC4Key);
  printf("RC4 Key len: (%i)\n", len);
  Utils::HexDump((void*)key_data, len);
 
  RC4_set_key(&key, len, key_data);
 
  printf("---------------------\n");
  printf("-----hkRC4Key end----\n");
  printf("---------------------\n");
  printf("\n");
 
  return pRC4Key( thisptr, len, key_data );
}

int __fastcall hkAPBsend( void* thisptr, void* edx, unsigned int buf)
{
    printf("--------------------\n");
    printf("--Called hkAPBsend--\n");
    printf("--------------------\n");
    printf("\n");
 
    unsigned char outbuf[1028];
    Utils::add_log2("c:\\APBSendPacket.log","----------------\n");
    Utils::add_log2("c:\\APBSendPacket.log","hkAPBsend\n");
    Utils::add_log2("c:\\APBSendPacket.log","----------------\n");
    Utils::add_log2("c:\\APBSendPacket.log","APBsend buf:\n");
    Utils::HexDump2("c:\\APBSendPacket.log",(void*)buf, 512);
    Utils::add_log2("c:\\APBSendPacket.log","----------------\n");
    Utils::add_log2("c:\\APBSendPacket.log","\n\n");
 
    RC4(&key, 512, (const unsigned char*)buf, outbuf);
 
    Utils::add_log2("c:\\APBSendPacket2.log","----------------\n");
    Utils::add_log2("c:\\APBSendPacket2.log","hkAPBsend\n");
    Utils::add_log2("c:\\APBSendPacket2.log","----------------\n");
    Utils::add_log2("c:\\APBSendPacket2.log","APBsend buf:\n");
    Utils::HexDump2("c:\\APBSendPacket2.log",(void*)outbuf, 512);
    Utils::add_log2("c:\\APBSendPacket2.log","----------------\n");
    Utils::add_log2("c:\\APBSendPacket2.log","\n\n");
 
    return pAPBsend( thisptr, buf );
}

char cBuffer[512] = { NULL };
void Utils::add_log2( char* LOG_FILE, const char *fmt, ... )
{
    FILE* Log = NULL;
    sprintf_s ( cBuffer, LOG_FILE );
    fopen_s ( &Log, cBuffer, "a+" );
 
    va_list va_alist;
    char logbuf[256] = {0};
 
    va_start( va_alist, fmt );
    vsnprintf( logbuf + strlen(logbuf), sizeof(logbuf) - strlen(logbuf), fmt, va_alist );
    va_end( va_alist );
 
    fprintf ( Log, "%s", logbuf);
 
    fclose ( Log );
}
 
void Utils::HexDump2(char* LOG_FILE, void *ptr, int buflen) 
{
    unsigned char *buf = (unsigned char*)ptr;
    int i, j;
    for (i = 0; i < buflen; i += 16) 
    {
        add_log2(LOG_FILE, "%06x: ", i);
        for (j = 0; j < 16; j++)
            if ((i + j) < buflen)
                add_log2(LOG_FILE, "%02x ", buf[i+j]);
            else
                add_log2(LOG_FILE, "   ");
        add_log2(LOG_FILE, " ");
        for (j = 0; j < 16; j++) 
            if ((i + j) < buflen)
                add_log2(LOG_FILE, "%c", isprint(buf[i + j]) ? buf[i + j] : '.');
        add_log2(LOG_FILE, "\n");
    }
}

DWORD g_RC4Key = 0;

//decrypt packet recv
RC4((RC4_KEY *)(g_RC4Key + 124), len, (const unsigned char*)buf, outbuf);

//decrypt packet send
RC4((RC4_KEY *)(g_RC4Key + 1156), len, (const unsigned char*)buf, outbuf);

char __thiscall sub_10C3CE00(int this, int buf)
{
  int v2; // esi@1
  char result; // al@2
  char v4; // al@12
  char v5; // [sp+0h] [bp-4h]@0
 
  v2 = this;
  if ( *(_DWORD *)(this + 4) == 3 )
  {
    if ( dword_11C90FA8
      && (SHIDWORD(qword_1208EC94) <= 1999
       || dword_1206E4F8
       || !dword_11CB94A8
       || !(*(_DWORD *)(*(_DWORD *)(qword_1208EC94 + 7996) + 8) & 0x1000)) )
      sub_10F6E8D0(off_11C91088, 1999, (int)L"con%d send", *(_DWORD *)(this + 68));
    sub_10BE1510(1999, buf, *(_DWORD *)buf);
    if ( *(_BYTE *)(v2 + 120) )
      RC4(v2 + 1156, *(_DWORD *)buf - 4, buf + 4, buf + 4);
    if ( send(*(_DWORD *)(v2 + 68), (const char *)buf, *(_DWORD *)buf, 0) == -1 )
    {
      v4 = WSAGetLastError();
      sub_10F6EAE0(off_1207764C, 1996, (int)L"send() failed(%d)", v4);
      sub_10C3C6D0(v2);
      (*(void (**)(void))(**(_DWORD **)(v2 + 8) + 8))();
      result = 0;
    }
    else
    {
      result = 1;
    }
  }
  else
  {
    sub_10F6EAE0(off_1207764C, 1996, (int)L"send() failed(disconnected)", v5);
    result = 0;
  }
  return result;
}